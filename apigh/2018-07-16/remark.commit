{
  "sha": "592def143a694dbc8d39ddf3475721667422051e",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjU5MmRlZjE0M2E2OTRkYmM4ZDM5ZGRmMzQ3NTcyMTY2NzQyMjA1MWU=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2018-07-15T17:11:48Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2018-07-15T17:11:48Z"
    },
    "message": "clarify comments",
    "tree": {
      "sha": "a711dae3be3b8c10fe6e747bf891db5b6b583d01",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/a711dae3be3b8c10fe6e747bf891db5b6b583d01"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/592def143a694dbc8d39ddf3475721667422051e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/592def143a694dbc8d39ddf3475721667422051e",
  "html_url": "https://github.com/umputun/remark/commit/592def143a694dbc8d39ddf3475721667422051e",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/592def143a694dbc8d39ddf3475721667422051e/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e278da3cd074b86c5d59359e4f1c615ab6f98b93",
      "url": "https://api.github.com/repos/umputun/remark/commits/e278da3cd074b86c5d59359e4f1c615ab6f98b93",
      "html_url": "https://github.com/umputun/remark/commit/e278da3cd074b86c5d59359e4f1c615ab6f98b93"
    }
  ],
  "stats": {
    "total": 26,
    "additions": 13,
    "deletions": 13
  },
  "files": [
    {
      "sha": "7b71bcf1a5a360d3cfae3d563ec134b3b570f97f",
      "filename": "backend/app/rest/proxy/avatar.go",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark/blob/592def143a694dbc8d39ddf3475721667422051e/backend/app/rest/proxy/avatar.go",
      "raw_url": "https://github.com/umputun/remark/raw/592def143a694dbc8d39ddf3475721667422051e/backend/app/rest/proxy/avatar.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/proxy/avatar.go?ref=592def143a694dbc8d39ddf3475721667422051e",
      "patch": "@@ -16,15 +16,15 @@ import (\n \t\"github.com/umputun/remark/backend/app/store/avatar\"\n )\n \n-// Avatar provides file-system store and http handler for avatars\n+// Avatar provides http handler for avatars from avatar.Store\n // On user login auth will call Put and it will retrieve and save picture locally.\n type Avatar struct {\n \tStore     avatar.Store\n \tRoutePath string\n \tRemarkURL string\n }\n \n-// Put stores retrieved avatar to StorePath. Gets image from user info. Returns proxied url\n+// Put stores retrieved avatar to avatar.Store. Gets image from user info. Returns proxied url\n func (p *Avatar) Put(u store.User) (avatarURL string, err error) {\n \n \t// no picture for user, try default avatar\n@@ -54,13 +54,13 @@ func (p *Avatar) Put(u store.User) (avatarURL string, err error) {\n \t\treturn \"\", errors.Errorf(\"failed to get avatar from the orig, status %s\", resp.Status)\n \t}\n \n-\tavatar, err := p.Store.Put(u.ID, resp.Body)\n+\tavatarID, err := p.Store.Put(u.ID, resp.Body) // put returns avatar base name, like 123456.image\n \tif err != nil {\n \t\treturn \"\", err\n \t}\n \n-\tlog.Printf(\"[DEBUG] saved avatar from %s to %s, user %q\", u.Picture, avatar, u.Name)\n-\treturn p.RemarkURL + p.RoutePath + \"/\" + avatar, nil\n+\tlog.Printf(\"[DEBUG] saved avatar from %s to %s, user %q\", u.Picture, avatarID, u.Name)\n+\treturn p.RemarkURL + p.RoutePath + \"/\" + avatarID, nil\n }\n \n // Routes returns auth routes for given provider\n@@ -71,10 +71,10 @@ func (p *Avatar) Routes(middlewares ...func(http.Handler) http.Handler) (string,\n \t// GET /123456789.image\n \trouter.Get(\"/{avatar}\", func(w http.ResponseWriter, r *http.Request) {\n \n-\t\tavatar := chi.URLParam(r, \"avatar\")\n+\t\tavatarID := chi.URLParam(r, \"avatar\")\n \n \t\t// enforce client-side caching\n-\t\tetag := `\"` + p.Store.ID(avatar) + `\"`\n+\t\tetag := `\"` + p.Store.ID(avatarID) + `\"`\n \t\tw.Header().Set(\"Etag\", etag)\n \t\tw.Header().Set(\"Cache-Control\", \"max-age=604800\") // 7 days\n \t\tif match := r.Header.Get(\"If-None-Match\"); match != \"\" {\n@@ -84,15 +84,15 @@ func (p *Avatar) Routes(middlewares ...func(http.Handler) http.Handler) (string,\n \t\t\t}\n \t\t}\n \n-\t\tavReader, size, err := p.Store.Get(avatar)\n+\t\tavReader, size, err := p.Store.Get(avatarID)\n \t\tif err != nil {\n \t\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't load avatar\")\n \t\t\treturn\n \t\t}\n \n \t\tdefer func() {\n \t\t\tif e := avReader.Close(); e != nil {\n-\t\t\t\tlog.Printf(\"[WARN] can't close avatar reader for %s, %s\", avatar, e)\n+\t\t\t\tlog.Printf(\"[WARN] can't close avatar reader for %s, %s\", avatarID, e)\n \t\t\t}\n \t\t}()\n "
    },
    {
      "sha": "b24cbf042ae6fefcfb93e5fa8500ad80cbdb298c",
      "filename": "backend/app/rest/proxy/image.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/592def143a694dbc8d39ddf3475721667422051e/backend/app/rest/proxy/image.go",
      "raw_url": "https://github.com/umputun/remark/raw/592def143a694dbc8d39ddf3475721667422051e/backend/app/rest/proxy/image.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/proxy/image.go?ref=592def143a694dbc8d39ddf3475721667422051e",
      "patch": "@@ -113,7 +113,7 @@ func (p Image) extract(commentHTML string) ([]string, error) {\n \treturn result, nil\n }\n \n-// replace img links in commentHTML with route to proxy with base64 encoded original link\n+// replace img links in commentHTML with route to proxy, base64 encoded original link\n func (p Image) replace(commentHTML string, imgs []string) string {\n \n \tfor _, img := range imgs {"
    },
    {
      "sha": "1b612bcfde0f116740ae63ebf8f10f2cbc20df5c",
      "filename": "backend/app/store/avatar/store.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/592def143a694dbc8d39ddf3475721667422051e/backend/app/store/avatar/store.go",
      "raw_url": "https://github.com/umputun/remark/raw/592def143a694dbc8d39ddf3475721667422051e/backend/app/store/avatar/store.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/store.go?ref=592def143a694dbc8d39ddf3475721667422051e",
      "patch": "@@ -22,9 +22,9 @@ const imgSfx = \".image\"\n \n // Store defines interface to store and and load avatars\n type Store interface {\n-\tPut(userID string, reader io.Reader) (avatar string, err error)\n-\tGet(avatar string) (reader io.ReadCloser, size int, err error)\n-\tID(avatar string) (id string)\n+\tPut(userID string, reader io.Reader) (avatarID string, err error) // save avatar data from the given reader and return base name\n+\tGet(avatarID string) (reader io.ReadCloser, size int, err error)  // load avatar via reader\n+\tID(avatarID string) (id string)                                   // unique id of stored avatar's data\n }\n \n // resize an image of supported format (PNG, JPG, GIF) to the size of \"limit\" px of the biggest side"
    }
  ]
}
