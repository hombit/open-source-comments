{
  "sha": "0cc6df74ee52502dcb70a64e7057ea1474ae6797",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6MGNjNmRmNzRlZTUyNTAyZGNiNzBhNjRlNzA1N2VhMTQ3NGFlNjc5Nw==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2018-07-12T02:53:42Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2018-07-12T10:09:57Z"
    },
    "message": "Code review. Add e2e tests.",
    "tree": {
      "sha": "7b7139e3e8a55868ade4d5097cb511397bab0d6a",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/7b7139e3e8a55868ade4d5097cb511397bab0d6a"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/0cc6df74ee52502dcb70a64e7057ea1474ae6797",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/0cc6df74ee52502dcb70a64e7057ea1474ae6797",
  "html_url": "https://github.com/debiki/talkyard/commit/0cc6df74ee52502dcb70a64e7057ea1474ae6797",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/0cc6df74ee52502dcb70a64e7057ea1474ae6797/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "93c848e376fb70ca4eae0738afe714a31fa51c54",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/93c848e376fb70ca4eae0738afe714a31fa51c54",
      "html_url": "https://github.com/debiki/talkyard/commit/93c848e376fb70ca4eae0738afe714a31fa51c54"
    }
  ],
  "stats": {
    "total": 920,
    "additions": 815,
    "deletions": 105
  },
  "files": [
    {
      "sha": "3b728793d3a9d3356f5917849e9f5a97a7fb332c",
      "filename": "app/controllers/InviteController.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/controllers/InviteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/controllers/InviteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/InviteController.scala?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -48,14 +48,15 @@ class InviteController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n   def sendInvite: Action[JsValue] = PostJsonAction(RateLimits.SendInvite, maxBytes = 200) {\n         request =>\n+    import request.{dao, theRequester => requester}\n     val toEmailAddress = (request.body \\ \"toEmailAddress\").as[String].trim\n \n-    if (!isValidNonLocalEmailAddress(toEmailAddress))\n-      throwForbidden(\"DwE47YK2\", \"Bad email address\")\n+    throwForbiddenIf(!isValidNonLocalEmailAddress(toEmailAddress),\n+      \"DwE47YK2\", \"Bad email address\")\n \n-    // Right now there are no trust levels, so allow only admins to send invites.\n-    if (!request.theUser.isAdmin)\n-      throwForbidden(\"DwE403INA0\", \"Currently only admins may send invites\")\n+    // Right now, only for staff and core members. [5WBJAF2]\n+    throwForbiddenIf(!requester.isStaffOrCoreMember,\n+       \"TyE403INA0\", \"Currently only staff and core members may send invites\")\n \n     // Is toEmailAddress already a member or already invited?\n     request.dao.readOnlyTransaction { transaction =>"
    },
    {
      "sha": "e26630c6d7a95faab8de8e1212f95bc1d1683e6b",
      "filename": "app/controllers/LoginWithPasswordController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/controllers/LoginWithPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/controllers/LoginWithPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/LoginWithPasswordController.scala?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -86,7 +86,8 @@ class LoginWithPasswordController @Inject()(cc: ControllerComponents, edContext:\n         case DbDao.UserDeletedException => deny(\"USR_DELD\")\n         case DbDao.MemberHasNoPasswordException =>\n           // This'll open a dialog that tells the user to choose a password. [5WJBNR2]\n-          throwForbidden(\"_TyMCHOOSEPWD\", o\"\"\"You haven't choosen a password yet\"\"\")\n+          // (The message text \"You haven't ...\" will actually get ignored.)\n+          throwForbidden(\"_TyMCHOOSEPWD\", \"You haven't choosen a password yet\")\n         case DbDao.EmailNotVerifiedException =>\n           throwForbidden(\"TyEEML0VERIF_\", o\"\"\"You have not yet confirmed your email address.\n             Please check your email inbox â€” you should find an email from us with a"
    },
    {
      "sha": "137562dd0f986cd464293ba73312b8696d1d727c",
      "filename": "app/debiki/dao/UserDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/debiki/dao/UserDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/debiki/dao/UserDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/UserDao.scala?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -544,6 +544,7 @@ trait UserDao {\n       addUserStats(UserStats(loginGrant.user.id, lastSeenAt = tx.now))(tx)\n \n       // What? isSuspendedAt checks only suspendedTill ? what about suspendedAt? [4ELBAUPW2]\n+      // (Fine for now, maybe need to fix later though)\n       if (!loginGrant.user.isSuspendedAt(loginAttempt.date))\n         return loginGrant\n "
    },
    {
      "sha": "6cbddb1a50aa07d6033d9ec25fb08cddfe86e89f",
      "filename": "app/ed/server/pubsub/PubSub.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/ed/server/pubsub/PubSub.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/ed/server/pubsub/PubSub.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/pubsub/PubSub.scala?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -263,7 +263,7 @@ class PubSubActor(val nginxHost: String, val globals: Globals) extends Actor {\n \n   private def addOrUpdateSubscriber(siteId: SiteId, user: User, watchedPageIds: Set[PageId])\n         : Option[Set[PageId]] = {\n-    traceLog(siteId, s\"Adding/updating subscriber ${prettyUser(user)}\")\n+    traceLog(siteId, s\"Adding/updating subscriber ${prettyUser(user)} [TyDADUPSUBSC]\")\n     val subscribersById = subscribersByIdForSite(siteId)\n     // Remove and reinsert, so inactive users will be the first ones found when iterating.\n     val oldEntry = subscribersById.remove(user.id)\n@@ -274,7 +274,7 @@ class PubSubActor(val nginxHost: String, val globals: Globals) extends Actor {\n \n   private def removeSubscriber(siteId: SiteId, user: User): Set[PageId] = {\n     // COULD tell Nchan about this too\n-    traceLog(siteId, s\"Removing subscriber ${prettyUser(user)}\")\n+    traceLog(siteId, s\"Removing subscriber ${prettyUser(user)} [TyDRMSUBSC]\")\n     val oldEntry = subscribersByIdForSite(siteId).remove(user.id)\n     oldEntry.map(_.watchingPageIds) getOrElse Set.empty\n   }\n@@ -307,7 +307,7 @@ class PubSubActor(val nginxHost: String, val globals: Globals) extends Actor {\n     val userAndWhenById = subscribersByIdForSite(siteId)\n     val toUserIds = userAndWhenById.values.map(_.user.id).toSet - user.id\n \n-    traceLog(siteId, s\"Pupl presence ${prettyUser(user)}: $presence\")\n+    traceLog(siteId, s\"Pupl presence ${prettyUser(user)}: $presence [TyDPRESCNS]\")\n \n     sendPublishRequest(siteId, toUserIds, \"presence\", Json.obj(\n       \"user\" -> JsUser(user),\n@@ -328,7 +328,7 @@ class PubSubActor(val nginxHost: String, val globals: Globals) extends Actor {\n         JsonMaker.notificationsToJson(Seq(notf), transaction).notfsJson\n       }\n \n-      def lazyMessage = s\"Publ notifications to $lazyPrettyUser\"\n+      def lazyMessage = s\"Publ notifications to $lazyPrettyUser [TyDPUBLNTFS]\"\n       def lazyPrettyUser = anyPrettyUser(siteDao.getUser(notf.toUserId), notf.toUserId)\n       traceLog(message.siteId, lazyMessage)\n \n@@ -341,7 +341,7 @@ class PubSubActor(val nginxHost: String, val globals: Globals) extends Actor {\n           patchMessage.siteId, pageId = patchMessage.toUsersViewingPage).filter(_ != byId)\n         userIds.foreach(siteDao.markPageAsUnreadInWatchbar(_, patchMessage.toUsersViewingPage))\n \n-        def lazyMessage = s\"Publ storePatch to $lazyPrettyUsers\"\n+        def lazyMessage = s\"Publ storePatch to ${lazyPrettyUsers.mkString(\", \")} [TyDPUBLPTCH]\"\n         def lazyPrettyUsers: Iterable[String] = userIds.map(id => anyPrettyUser(siteDao.getUser(id), id))\n         traceLog(message.siteId, lazyMessage)\n \n@@ -358,9 +358,9 @@ class PubSubActor(val nginxHost: String, val globals: Globals) extends Actor {\n     val pageIdsAdded = newPageIds -- oldPageIds\n     val pageIdsRemoved = oldPageIds -- newPageIds\n \n-    def lazyMessage = s\"$lazyPrettyUser starts watching pages: $pageIdsAdded, stopped: $pageIdsRemoved\"\n     def lazyPrettyUser: String = anyPrettyUser(globals.siteDao(siteId).getUser(userId), userId)\n-    traceLog(siteId, lazyMessage)\n+    traceLog(siteId,\n+        s\"$lazyPrettyUser starts watching pages: $pageIdsAdded, stopped: $pageIdsRemoved [TyDWTCHPGS]\")\n \n     pageIdsRemoved foreach { pageId =>\n       val watcherIds = watcherIdsByPageId.getOrElse(pageId, mutable.Set.empty)\n@@ -432,7 +432,7 @@ class PubSubActor(val nginxHost: String, val globals: Globals) extends Actor {\n         if (now.millisSince(userWhenPages.when) < DeleteAfterInactiveMillis) false\n         else {\n           val user = userWhenPages.user\n-          traceLog(siteId, s\"Unsubscribing inactive ${prettyUser(user)} [EdDPS_UNSUBINACTV]\")\n+          traceLog(siteId, s\"Unsubscribing inactive ${prettyUser(user)} [TyDUNSUBINACTV]\")\n           updateWatcherIdsByPageId(\n               siteId, user.id, oldPageIds = userWhenPages.watchingPageIds, newPageIds = Set.empty)\n           true"
    },
    {
      "sha": "ef5ada0c659b143bf867be9dafb70b6f9f04d296",
      "filename": "app/views/createaccount/accountAlreadyExistsEmail.scala.html",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/views/createaccount/accountAlreadyExistsEmail.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/views/createaccount/accountAlreadyExistsEmail.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/createaccount/accountAlreadyExistsEmail.scala.html?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -7,7 +7,7 @@\n \n <p>\n You attempted to create a new account at <a href=\"@origin\">@siteAddress</a>,\n-with email address <tt>@emailAddress</tt>, but you already have such an account.\n+with email address <tt>@emailAddress</tt>, but you already have such an account.@* [2WABJDD4_] *@\n If you don't remember your password, you can\n <a href=\"@origin@controllers.routes.ResetPasswordController.showResetPasswordPage\">\n   reset it here.</a>"
    },
    {
      "sha": "74a303726deb0db696a3762ec7db5d2a3c1972a1",
      "filename": "app/views/invite/inviteEmail.scala.html",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/views/invite/inviteEmail.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/views/invite/inviteEmail.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/invite/inviteEmail.scala.html?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -9,7 +9,7 @@\n \n <p>Hi,</p>\n \n-<p>@inviterName invites you to join <a href=\"@siteUrl\">@siteHostname</a>.</p>\n+<p>@inviterName invites you to join@* [5FJBAW2_] *@ <a href=\"@siteUrl\">@siteHostname</a>.</p>@* I18N *@\n \n <p>Click the link below, if you are interested:</p>\n "
    },
    {
      "sha": "d55ec55848dda19ab62abe0a19adddccaef90fdd",
      "filename": "app/views/invite/welcomeSetPasswordEmail.scala.html",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/views/invite/welcomeSetPasswordEmail.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/app/views/invite/welcomeSetPasswordEmail.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/invite/welcomeSetPasswordEmail.scala.html?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -5,10 +5,10 @@\n   s\"$origin${controllers.routes.ResetPasswordController.showChooseNewPasswordPage(emailId)}\"\n }\n \n-<p>Welcome to @siteHostname! And thanks for accepting the invitation.</p>\n+<p>Welcome to @siteHostname! And thanks for accepting the invitation.@* [5FJB2AZY_]  I18N *@</p>\n \n-<p>We have created an account for you. Please login with your email address, always that\n-address, otherwise we won't know it's you. And you need a password; click the link below\n+<p>We have created an account for you. Please login with your email address,\n+so we will know it's you. And you need a password; click the link below\n to choose a password:</p>\n \n <p><a href=\"@setPasswordUrl\">@setPasswordUrl</a></p>"
    },
    {
      "sha": "82b4542d1c0ee2b5f5b1ba70003a3163e26e0586",
      "filename": "client/app/login/login-dialog.more.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/login/login-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/login/login-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/login/login-dialog.more.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -464,10 +464,12 @@ const PasswordLoginDialogContent = createClassAndFactory({\n       // This account has no password associated with it. [5WJBNR2]\n       util.openDefaultStupidDialog({\n         body: \"You have not yet chosen a password.\",  // I18N\n+        dialogClassName: 'e_NoPwD',\n         small: true,\n         closeButtonTitle: \"Create password\",          // I18N\n-        onCloseOk: () => {\n-          window.open(linkToResetPassword(), '_blank');\n+        onCloseOk: (whichButton) => {\n+          if (whichButton === 1) // primary button\n+            window.open(linkToResetPassword(), '_blank');\n         }\n       });\n       this.refs.passwordInput.getInputDOMNode().focus();"
    },
    {
      "sha": "fed92cacadd8a4732dac3c90069f4c8cc2278b2f",
      "filename": "client/app/model.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/model.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/model.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/model.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -265,7 +265,8 @@ interface Myself {\n   username?: string;\n   fullName?: string;\n   avatarSmallHashPath?: string;\n-  trustLevel: TrustLevel;\n+  lockedTrustLevel?: TrustLevel; // currently not set server side, hmm try make consistent [5ZKGJA2]\n+  trustLevel: TrustLevel;      // inconsistency: named effectiveTrustLevel in MemberInclDetails  [5ZKGJA2]\n   threatLevel: ThreatLevel;\n   permsOnPages: PermsOnPage[];\n \n@@ -893,10 +894,10 @@ interface MemberInclDetails extends MemberOrGroupInclDetails {\n   suspendedById?: number;\n   suspendedByUsername?: string;\n   suspendedReason?: string;\n-  effectiveTrustLevel: TrustLevel;\n+  effectiveTrustLevel: TrustLevel;  // inconsistency: Not used for Myself [5ZKGJA2]\n   // Only included if caller is staff:\n   trustLevel?: TrustLevel;\n-  lockedTrustLevel?: TrustLevel;\n+  lockedTrustLevel?: TrustLevel;  // not set for Myself [5ZKGJA2]\n   threatLevel?: ThreatLevel;\n   lockedThreatLevel?: ThreatLevel;\n   deactivatedAt?: number;"
    },
    {
      "sha": "09842a6be7f62a7a26edd02776ee8d4fa55472d3",
      "filename": "client/app/oop-methods.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/oop-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/oop-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/oop-methods.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -156,8 +156,8 @@ export function user_threatLevel(user: MemberInclDetails): ThreatLevel {\n }\n \n \n-export function user_trustLevel(user: MemberInclDetails): TrustLevel {\n-  return user.lockedTrustLevel || user.trustLevel;\n+export function user_trustLevel(user: MemberInclDetails | Myself): TrustLevel {\n+  return (<MemberInclDetails> user).effectiveTrustLevel || user.lockedTrustLevel || user.trustLevel;\n }\n \n "
    },
    {
      "sha": "b66efb3aaedca1b510805cdbb97a2df6b57894e6",
      "filename": "client/app/page-dialogs/about-user-dialog.styl",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/page-dialogs/about-user-dialog.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/page-dialogs/about-user-dialog.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/page-dialogs/about-user-dialog.styl?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -1,4 +1,4 @@\n-\n+.esDropModal_content.s_InvD,\n .esDropModal_content.esUsrDlg\n   padding: 0; // already padding in .modal-body\n   width: 590px; // there's a dropdown-modal max width already"
    },
    {
      "sha": "c4c959dae4bd346142e0b5e99861ec88e02c68da",
      "filename": "client/app/rules.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/rules.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/rules.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/rules.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -98,9 +98,11 @@ export function me_isStranger(me: Myself): boolean {\n }\n \n \n-export function maySendInvites(user: Myself | MemberInclDetails): MayMayNot {\n-  // Currently only admins may send invites.\n-  if (!user.isAdmin || user.isGroup) return mayMayNot(false, \"is not admin\");\n+export function user_maySendInvites(user: Myself | MemberInclDetails): MayMayNot {\n+  // Currently only staff and core members may send invites. [5WBJAF2]\n+  if (!user_isStaffOrCoreMember(user) || user.isGroup) {\n+    return mayMayNot(false, \"is not staff or core member\");\n+  }\n   return mayIndeed();\n }\n \n@@ -128,10 +130,14 @@ export function isMember(user: Myself | MemberInclDetails): boolean {\n   return member;\n }\n \n-export function isStaff(user: Myself | MemberInclDetails) {\n+export function isStaff(user: Myself | BriefUser | MemberInclDetails) {\n   return user.isAdmin || user.isModerator;\n }\n \n+export function user_isStaffOrCoreMember(user: Myself | MemberInclDetails): boolean {\n+  return isStaff(user) || user_trustLevel(user) >= TrustLevel.CoreMember;\n+}\n+\n \n export function isTalkToMeNotification(notf: Notification): boolean {\n   return notf.type === NotificationType.DirectReply ||"
    },
    {
      "sha": "7700d13485bd3e1a483dc234e7e08a9da726e4d6",
      "filename": "client/app/slim-bundle.d.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/slim-bundle.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/slim-bundle.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/slim-bundle.d.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -183,7 +183,7 @@ declare namespace debiki2 {\n \n   function user_isSuspended(user: MemberInclDetails, nowMs: WhenMs): boolean;\n   function user_threatLevel(user: MemberInclDetails): ThreatLevel;\n-  function user_trustLevel(user: MemberInclDetails): TrustLevel;\n+  function user_trustLevel(user: Myself | MemberInclDetails): TrustLevel;\n   function user_isGone(user: Myself | BriefUser | MemberInclDetails | UserAnyDetails): boolean;\n \n   function uppercaseFirst(text: string): string;\n@@ -206,7 +206,7 @@ declare namespace debiki2 {\n   var store_thisIsMyPage;\n   var hasErrorCode;\n   var page_mayChangeRole;\n-  var maySendInvites;\n+  var user_maySendInvites;\n   var isMember;\n   var userId_isGuest;\n   function store_canDeletePage(store: Store): boolean;"
    },
    {
      "sha": "0b76a6d88215a130db7644267aabae95fd31ce14",
      "filename": "client/app/users/user-invites.more.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 16,
      "changes": 27,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/users/user-invites.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/users/user-invites.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/users/user-invites.more.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -93,14 +93,15 @@ export const UserInvites = createFactory({\n       return r.p({}, t.Loading);\n \n     let inviteButton;\n-    const mayInvite = maySendInvites(user);\n+    const mayInvite = user_maySendInvites(user);\n     let introText: any = r.p({}, t.upp.InvitesIntro + (\n         this.state.invites.length\n             ? t.upp.InvitesListedBelow\n             : t.upp.NoInvites));\n     if (user.id === me.id && mayInvite.yes) {\n       inviteButton =\n-          Button({ onClick: () => openInviteSomeoneDialog(this.addInvite) }, t.upp.SendAnInv);\n+          Button({ className: 'e_SndInvB', onClick: () => openInviteSomeoneDialog(this.addInvite) },\n+            t.upp.SendAnInv);\n     }\n     else {\n       // (This is for staff, need not translate. [5JKBWS2])\n@@ -115,12 +116,6 @@ export const UserInvites = createFactory({\n       introText = r.p({}, introText);\n     }\n \n-    if (!this.state.invites.length)\n-      return (\n-        r.div({},\n-          introText,\n-          inviteButton));\n-\n     // REFACTOR COULD break out rendering code to separate module â€” also used in admin. [8HRAE3V]\n     const nowMs: WhenMs = Date.now();\n     const inviteRows = this.state.invites.map(function(invite: Invite) {\n@@ -166,18 +161,18 @@ export function InviteRowWithKey(props: { store: Store, invite: Invite, nowMs: W\n     let sentBy;\n     if (props.showSender) {\n       let sender: BriefUser = store_getUserOrMissing(store, invite.createdById);\n-      sentBy = r.td({}, UserName({ user: sender, store, makeLink: true }));\n+      sentBy = r.td({ className: 'e_Inv_SentByU' }, UserName({ user: sender, store, makeLink: true }));\n     }\n \n     // Invited-email + inviter-id is unique. [5GPJ4A0]\n     const key = invite.invitedEmailAddress + ' ' + invite.createdById;\n \n     return (\n-      r.tr({ key },\n-        r.td({}, invitedEmail),\n-        r.td({}, invitedUser),\n-        r.td({}, acceptedAt),\n-        r.td({}, moment(invite.createdAtEpoch).from(props.nowMs)),\n+      r.tr({ key, className: 's_InvsL_It' },\n+        r.td({ className: 'e_Inv_Em' }, invitedEmail),\n+        r.td({ className: 'e_Inv_U' }, invitedUser),\n+        r.td({ className: 'e_Inv_AcptAt' }, acceptedAt),\n+        r.td({ className: 'e_Inv_CrtdAt' }, moment(invite.createdAtEpoch).from(props.nowMs)),\n         sentBy));\n }\n \n@@ -217,7 +212,7 @@ const InviteDialog = createComponent({  // COULD break out to debiki2.invite mod\n     Server.sendInvite(emailAddress, (invite: Invite) => {\n       this.state.addInvite(invite);\n       this.close();\n-      util.openDefaultStupidDialog({ body: t.upp.InvDone });\n+      util.openDefaultStupidDialog({ body: t.upp.InvDone, dialogClassName: 's_InvSentD' });\n     }, (failedRequest: HttpRequest) => {\n       if (hasErrorCode(failedRequest, '_EsE403IUAM_')) {\n         this.setState({ error: t.upp.InvErrJoinedAlready });\n@@ -237,7 +232,7 @@ const InviteDialog = createComponent({  // COULD break out to debiki2.invite mod\n     const props: any = _.assign({}, this.props);\n     props.title = t.upp.SendAnInv;\n     return (\n-      Modal({ show: this.state.isOpen, onHide: this.close, dialogClassName: 'esUsrDlg' },\n+      Modal({ show: this.state.isOpen, onHide: this.close, dialogClassName: 's_InvD' },\n         ModalBody({},\n           r.p({}, t.upp.SendInvExpl),\n           EmailInput({ label: t.EmailAddress, placeholder: t.upp.EnterEmail,"
    },
    {
      "sha": "30b5d40e6c41029e68d2db7c218cf41c1f1c611b",
      "filename": "client/app/users/users-page.more.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/users/users-page.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/users/users-page.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/users/users-page.more.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -162,7 +162,7 @@ const UserPageComponent = createReactClass(<any> {\n   render: function() {\n     const store: Store = this.state.store;\n     const me: Myself = store.me;\n-    const user: UserAnyDetails = this.state.user;\n+    const user: MemberInclDetails = this.state.user;  // UserAnyDetails = better class?\n     const usernameOrId = this.props.match.params.usernameOrId;\n \n     // Wait until url updated to show username, instead of id, to avoid mounting & unmounting\n@@ -188,8 +188,8 @@ const UserPageComponent = createReactClass(<any> {\n     const preferencesNavItem = !showPrivateStuff ? null :\n       LiNavLink({ to: linkStart + 'preferences', id: 'e2eUP_PrefsB' }, t.upp.Preferences);\n \n-    const invitesNavItem = !showPrivateStuff || !maySendInvites(user).value ? null :\n-      LiNavLink({ to: linkStart + 'invites', id: 'e2eUP_InvitesB' }, t.upp.Invites);\n+    const invitesNavItem = !showPrivateStuff || !user_maySendInvites(user).value ? null :\n+      LiNavLink({ to: linkStart + 'invites', className: 'e_InvTabB' }, t.upp.Invites);\n \n     const childProps = {\n       store: store,"
    },
    {
      "sha": "f0aaac307db603f24c5d4835119dd75c8b4a3dac",
      "filename": "client/app/util/stupid-dialog.more.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/util/stupid-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/client/app/util/stupid-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/util/stupid-dialog.more.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -101,7 +101,7 @@ export const StupidDialog = createComponent({\n             onClick: makeCloseFn(2), className: 'e_SD_SecB' },\n           stuff.secondaryButonTitle)));\n     let result;\n-    const className = 'esStupidDlg ' + (stuff.small ? ' esStupidDlg-Small' : '') +\n+    const className = 'esStupidDlg ' + (stuff.small ? 'esStupidDlg-Small ' : '') +\n             (stuff.dialogClassName || '');\n \n     // CLEAN_UP, SMALLER_BUNDLE: use the same type of dialog for both non-iframe and iframe."
    },
    {
      "sha": "74e76b71bc69f63c3127dd86afd7d0dd785b3a7a",
      "filename": "docs/bem-blocks.txt",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/docs/bem-blocks.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/docs/bem-blocks.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/bem-blocks.txt?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -18,6 +18,7 @@ L  = list\n It = list item\n D  = dialog\n CB = checkbox\n+U  = user\n Example: s_Whatever_SaveB = save button. Or s_SomethingElse_EmT = email addresses table.\n \n \n@@ -87,6 +88,8 @@ FD              = flag dialog\n \n esH             = help\n \n+s_InvD          = invites dialog\n+\n esLD            = login/signup dialog\n \n s_MB            = topic metabar (just below the Orig Post, before all replies)\n@@ -100,6 +103,8 @@ s_NP            = No page, i.e. login-&-create-something-here stuff\n \n Nrw             = narrow\n \n+  U             = user\n+\n esUD            = About user dialog\n \n s_UP            = A user's public profile page"
    },
    {
      "sha": "9d8b6ea478ceda3830c43d89a64649301f626503",
      "filename": "docs/e2e-tests-map.txt",
      "status": "modified",
      "additions": 31,
      "deletions": 11,
      "changes": 42,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/docs/e2e-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/docs/e2e-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-map.txt?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -35,9 +35,9 @@ create account -\n \n login -\n   guest:\n-  password:  password-login-reset.2browsers.test.ts\n+  password:  password-login-reset.2browsers.test.ts  TyT5KAES20W\n   forgot password -\n-    reset it:   password-login-reset.2browsers.test.ts\n+    reset it:   password-login-reset.2browsers.test.ts  TyT5KAES20W\n     forgot email address:\n   providers -\n     google:\n@@ -51,9 +51,7 @@ login -\n     facebook:\n     github:\n     twitter:\n-  via invite email -  (7JK2)\n-    recent, fine:\n-    too old, denied:\n+  via invite email: (7JK2)\n \n different users -\n   login, logout, switch user:  almost all tests\n@@ -83,12 +81,31 @@ profile page -\n     won't list posts from deleted pages:\n     won't list posts from pages one may not see:\n \n+\n invites -\n-  view:\n-  send:\n-  accept:\n+  before accepts:\n+    signs up:\n+    logs in:\n+  accepts, and then: (7JK2)\n+    clicks create password email link:\n+      - invites-by-adm-click-email-set-pwd-link.2browsers.test.ts  TyT45FKAZZ2\n+    tries to login, but no password:\n+       - invites-by-core-try-login-after.2browsers.test.ts  TyT2WKF5PF30\n+    tries to sign up:\n+      - invites-by-mod-try-signup-after.2browsers.test.ts  TyT4FGJA20M\n+  view sent:\n+    as moderator:\n+      - invites-by-mod-try-signup-after TyT4FGJA20M\n+    as admin:\n+      - invites-by-core-try-login-after.2browsers.test.ts  TyT2WKF5PF30\n+    as core member:\n+      - invites-by-core-try-login-after.2browsers.test.ts  TyT2WKF5PF30\n+  core members can send, new users cannot:\n+    - invites-by-core-try-login-after.2browsers.test.ts  TyT2WKF5PF30\n+  don't become staff:\n+    - invites-by-mod-try-signup-after.2browsers.test.ts  TyT4WK0AQ2\n   expires:\n-  can login via:  (7JK2)\n+\n \n emails -\n   send invite:\n@@ -107,7 +124,7 @@ getting started guide -\n   edit about page:\n   create category:\n   create topic: (7UC2)\n-  send invite:\n+  send invite: (7JK2)\n \n forum -\n   edit title:  (7UC2)\n@@ -369,13 +386,16 @@ admin -\n moderators:\n   profile says is moderator:\n   can list users:\n+    - invites-by-mod-try-signup-after.2browsers.test.ts  TyT2PK703S\n   can approve new site members:\n   can suspend & silence & watch users:\n   can reject comments:\n     - mod-review.2browsers.test.ts  TyT4WKBDTQ\n   can approve comments:\n-  cannot read others' direct messages:\n+  can *not* read others' direct messages:\n     - mod-review.2browsers.test.ts  TyT6KRBEQ2\n+  can send and view invites:\n+    - invites-by-mod-try-signup-after  TyT4FGJA20M\n \n superadmin -\n   ... lots of stuff ..."
    },
    {
      "sha": "def563ea10d76d0a64eba79b1de55f7614fb7b7c",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -194,6 +194,15 @@ function runAllE2eTests {\n \n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only summary-emails.2browsers $args\n \n+  runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only invites-by-adm-click-email-set-pwd-link.2browsers $args\n+  runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only invites-by-mod-try-signup-after.2browsers $args\n+  runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only invites-by-core-try-login-after.2browsers $args\n+\n+\n+  # wip:\n+  # settings-allow-local-signup\n+  # settings-allow-signup\n+\n \n   # Usability Testing Exchange\n   # ------------\n@@ -286,10 +295,6 @@ function runAllE2eTests {\n     echo \"Stopped the http server for the Gatsby blog, old ed-comments 0.4.4, pid $server_port_8000_pid2.\"\n   fi\n   #------------------------------------------------------------\n-\n-  # wip:\n-  # settings-allow-local-signup\n-  # settings-allow-signup\n }\n \n "
    },
    {
      "sha": "1b07b9398a2c63766f10a22a39eaa5b55c3cd72d",
      "filename": "tests/e2e/specs/invites-by-adm-click-email-set-pwd-link.2browsers.test.ts",
      "status": "added",
      "additions": 132,
      "deletions": 0,
      "changes": 132,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/specs/invites-by-adm-click-email-set-pwd-link.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/specs/invites-by-adm-click-email-set-pwd-link.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/invites-by-adm-click-email-set-pwd-link.2browsers.test.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -0,0 +1,132 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('assert');\n+import server = require('../utils/server');\n+import utils = require('../utils/utils');\n+import { buildSite } from '../utils/site-builder';\n+import pagesFor = require('../utils/pages-for');\n+import settings = require('../utils/settings');\n+import logAndDie = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+declare var browser: any;\n+declare var browserA: any;\n+declare var browserB: any;\n+\n+let forum: EmptyTestForum;\n+\n+let everyonesBrowsers;\n+let staffsBrowser;\n+let othersBrowser;\n+let owen: Member;\n+let owensBrowser;\n+let janesBrowser;\n+\n+let siteId;\n+let siteIdAddress: IdAddress;\n+let forumTitle = \"Some E2E Test\";\n+\n+const janesEmailAddress = 'e2e-test--jane@example.com';\n+const janesUsername = 'e2e-test--jane';\n+const janesTopicData = { title: \"Hello I'm Jane\", body: \"Where am I?\" };\n+const janesTopicData2 = { title: \"I'm Jane\", body: \"I said I'll be back. Now I am back.\" };\n+const janesPassword = 'publ-ja020';\n+\n+\n+describe(\"invites-by-adm-click-email-set-pwd-link  TyT45FKAZZ2\", () => {\n+\n+  it(\"import a site\", () => {\n+    const builder = buildSite();\n+    forum = builder.addEmptyForum({\n+      title: forumTitle,\n+      members: []\n+    });\n+    assert(builder.getSite() === forum.siteData);\n+    siteIdAddress = server.importSiteData(forum.siteData);\n+    siteId = siteIdAddress.id;\n+  });\n+\n+  it(\"initialize people\", () => {\n+    everyonesBrowsers = _.assign(browser, pagesFor(browser));\n+    staffsBrowser = _.assign(browserA, pagesFor(browserA));\n+    othersBrowser = _.assign(browserB, pagesFor(browserB));\n+\n+    owen = forum.members.owen;\n+    owensBrowser = staffsBrowser;\n+\n+    janesBrowser = othersBrowser;\n+  });\n+\n+  it(\"Owen goes to the Invites tab\", () => {\n+    owensBrowser.adminArea.goToUsersInvited(siteIdAddress.origin, { loginAs: owen });\n+  });\n+\n+  it(\"He sends an invite to Jane\", () => {\n+    owensBrowser.adminArea.users.invites.clickSendInvite();\n+    owensBrowser.inviteDialog.typeAndSubmitInvite(janesEmailAddress);\n+  });\n+\n+  let inviteLinkJane;\n+\n+  it(\"Jane gets an invite email\", () => {\n+    inviteLinkJane = server.waitAndGetInviteLinkEmailedTo(siteId, janesEmailAddress, browserA);\n+  });\n+\n+  it(\"... clicks the link\", () => {\n+    janesBrowser.go(inviteLinkJane);\n+  });\n+\n+  it(\"... and gets logged in directly\", () => {\n+    janesBrowser.topbar.waitForMyMenuVisible();\n+    janesBrowser.topbar.assertMyUsernameMatches(janesUsername);\n+    janesBrowser.disableRateLimits();\n+  });\n+\n+  let choosePasswordLink;\n+\n+  it(\"Jane gets a 'Thanks for accepting the invitation' email\", () => {\n+    choosePasswordLink = server.waitAndGetThanksForAcceptingInviteEmailResetPasswordLink(\n+        siteId, janesEmailAddress, browserA);\n+  });\n+\n+  it(\"Jane can create a topic\", () => {\n+    janesBrowser.complex.createAndSaveTopic(janesTopicData);\n+  });\n+\n+  it(\"Jane logs out\", () => {\n+    janesBrowser.topbar.clickLogout();\n+  });\n+\n+  it(\"She clicks the choose-password link in the email\", () => {\n+    janesBrowser.go(choosePasswordLink);\n+  });\n+\n+  it(\"... and chooses a password\", () => {\n+    janesBrowser.chooseNewPasswordPage.typeAndSaveNewPassword(janesPassword);\n+  });\n+\n+  it(\"She logs out\", () => {\n+    janesBrowser.go('/');\n+    janesBrowser.topbar.clickLogout();\n+  });\n+\n+  it(\"She tries to login with no password\", () => {\n+    janesBrowser.topbar.clickLogin();\n+    janesBrowser.loginDialog.loginButBadPassword(janesUsername, '');\n+  });\n+\n+  it(\"... then, the wrong password\", () => {\n+    janesBrowser.loginDialog.loginButBadPassword(janesUsername, \"bad-password\");\n+  });\n+\n+  it(\"... finally with the correct password\", () => {\n+    janesBrowser.loginDialog.loginWithPassword(janesUsername, janesPassword)\n+  });\n+\n+  it(\"She posts a 2nd topic\", () => {\n+    janesBrowser.complex.createAndSaveTopic(janesTopicData2);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "a0f5d3b90e7a446568a7be54503e1dd2021a37dd",
      "filename": "tests/e2e/specs/invites-by-core-try-login-after.2browsers.test.ts",
      "status": "added",
      "additions": 184,
      "deletions": 0,
      "changes": 184,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/specs/invites-by-core-try-login-after.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/specs/invites-by-core-try-login-after.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/invites-by-core-try-login-after.2browsers.test.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -0,0 +1,184 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('assert');\n+import server = require('../utils/server');\n+import utils = require('../utils/utils');\n+import { buildSite } from '../utils/site-builder';\n+import pagesFor = require('../utils/pages-for');\n+import settings = require('../utils/settings');\n+import logAndDie = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+declare var browser: any;\n+declare var browserA: any;\n+declare var browserB: any;\n+\n+let forum: EmptyTestForum;\n+\n+let staffsBrowser;\n+let othersBrowser;\n+let owen: Member;\n+let owensBrowser;\n+let corax: Member;\n+let coraxBrowser;\n+let janesBrowser;\n+\n+let siteId;\n+let siteIdAddress: IdAddress;\n+let forumTitle = \"Some E2E Test\";\n+\n+const janesEmailAddress = 'e2e-test--jane@example.com';\n+const janesUsername = 'e2e-test--jane';\n+const janesPassword = 'publ-ja020';\n+\n+\n+describe(\"invites-by-core-try-login-after TyT2WKF5PF30\", () => {\n+\n+  it(\"import a site\", () => {\n+    const builder = buildSite();\n+    forum = builder.addEmptyForum({\n+      title: forumTitle,\n+      members: ['corax']  // is core member\n+    });\n+    assert(builder.getSite() === forum.siteData);\n+    siteIdAddress = server.importSiteData(forum.siteData);\n+    siteId = siteIdAddress.id;\n+  });\n+\n+  it(\"initialize people\", () => {\n+    staffsBrowser = _.assign(browserA, pagesFor(browserA));\n+    othersBrowser = _.assign(browserB, pagesFor(browserB));\n+\n+    owen = forum.members.owen;\n+    owensBrowser = staffsBrowser;\n+    corax = forum.members.corax;\n+    coraxBrowser = staffsBrowser;\n+\n+    janesBrowser = othersBrowser;\n+  });\n+\n+  it(\"Corax Core Member goes to his profile page\", () => {\n+    coraxBrowser.go(siteIdAddress.origin);\n+    coraxBrowser.complex.loginWithPasswordViaTopbar(corax);\n+    coraxBrowser.topbar.clickGoToProfile();\n+  });\n+\n+  it(\"He sends an invite to Jane\", () => {\n+    assert(coraxBrowser.userProfilePage.isInvitesTabVisible()); // tests that this test fn works (42BK6)\n+    coraxBrowser.userProfilePage.switchToInvites();\n+    assert(coraxBrowser.invitedUsersList.countNumInvited() === 0);\n+    coraxBrowser.userProfilePage.invites.clickSendInvite();\n+    coraxBrowser.inviteDialog.typeAndSubmitInvite(janesEmailAddress);\n+  });\n+\n+  it(\"... it appears in the Invites-Sent list\", () => {\n+    coraxBrowser.invitedUsersList.waitAssertInviteRowPresent(1, { email: janesEmailAddress });\n+    assert(coraxBrowser.invitedUsersList.countNumInvited() === 1);\n+    coraxBrowser.invitedUsersList.assertHasNotAcceptedInvite(janesUsername);\n+  });\n+\n+  let inviteLinkJane;\n+\n+  it(\"Jane gets an invite email\", () => {\n+    inviteLinkJane = server.waitAndGetInviteLinkEmailedTo(siteId, janesEmailAddress, browserA);\n+  });\n+\n+  it(\"... clicks the link\", () => {\n+    janesBrowser.go(inviteLinkJane);\n+  });\n+\n+  it(\"... and get auto logged in\", () => {\n+    janesBrowser.topbar.waitForMyMenuVisible();\n+    janesBrowser.topbar.assertMyUsernameMatches(janesUsername);\n+  });\n+\n+  it(\"... and gets a 'Thanks for accepting the invitation' email\", () => {\n+    server.waitAndGetThanksForAcceptingInviteEmailResetPasswordLink(siteId, janesEmailAddress, browserA);\n+  });\n+\n+  it(\"Corax sees in the invited users list that Jane has accepted the invite\", () => {\n+    coraxBrowser.refresh();\n+    coraxBrowser.invitedUsersList.waitUntilLoaded();\n+    assert(coraxBrowser.invitedUsersList.countNumInvited() === 1);\n+    coraxBrowser.invitedUsersList.assertHasAcceptedInvite(janesUsername);\n+  });\n+\n+  it(\"Jane logs out\", () => {\n+    janesBrowser.topbar.clickLogout();\n+  });\n+\n+  it(\"Now she wants to log in, types username but no password, she hasn't created one\", () => {\n+    janesBrowser.topbar.clickLogin();\n+    janesBrowser.loginDialog.fillInUsername(janesUsername);\n+    janesBrowser.loginDialog.clickSubmit();\n+  });\n+\n+  it(\"... sees the create password dialog\", () => {\n+    // Other things she could have done: Clicked the choose-password link in the email she got,\n+    // see  invites-by-adm-click-email-set-pwd-link  TyT45FKAZZ2.\n+    janesBrowser.loginDialog.waitForNotCreatedPasswordDialog();\n+  });\n+\n+  it(\"... clicks Create Password\", () => {\n+    janesBrowser.loginDialog.clickCreatePasswordButton();\n+  });\n+\n+  it(\"... types her email address\", () => {\n+    janesBrowser.swithToOtherTabOrWindow();\n+    janesBrowser.resetPasswordPage.submitAccountOwnerEmailAddress(janesEmailAddress);\n+    janesBrowser.switchBackToFirstTabOrWindow();\n+  });\n+\n+  let resetLink;\n+\n+  it(\"... gets a reset pwd email\", () => {\n+    resetLink = server.waitAndGetResetPasswordLinkEmailedTo(siteId, janesEmailAddress, browserA);\n+  });\n+\n+  it(\"... clicks the reset link\", () => {\n+    janesBrowser.go(resetLink);\n+  });\n+\n+  it(\"... and chooses a password\", () => {\n+    janesBrowser.chooseNewPasswordPage.typeAndSaveNewPassword(janesPassword);\n+  });\n+\n+  it(\"Jane now logs out\", () => {\n+    janesBrowser.go('/');\n+    janesBrowser.topbar.clickLogout();\n+  });\n+\n+  it(\"... and can login in with the correct password\", () => {\n+    janesBrowser.complex.loginWithPasswordViaTopbar(janesUsername, janesPassword)\n+  });\n+\n+  it(\"Jane goes to her profile\", () => {\n+    janesBrowser.topbar.clickGoToProfile();\n+  });\n+\n+  it(\"There is no Invite tab, she's a new member, not yet allowed to invite others\", () => {\n+    janesBrowser.userProfilePage.waitForTabsVisible();\n+    assert(!janesBrowser.userProfilePage.isInvitesTabVisible());  // (42BK6)\n+    // It's her own notifications.\n+    assert(janesBrowser.userProfilePage.isNotfsTabVisible());\n+  });\n+\n+  it(\"Owen logs in\", () => {\n+    coraxBrowser.topbar.clickLogout();\n+    owensBrowser.adminArea.goToUsersInvited(siteIdAddress.origin, { loginAs: owen });\n+  });\n+\n+  it(\"... and sees in the admin Invited Users tab, that Jane accepted an invite\", () => {\n+    owensBrowser.invitedUsersList.waitUntilLoaded();\n+    assert(owensBrowser.invitedUsersList.countNumInvited() === 1);\n+    owensBrowser.invitedUsersList.assertHasAcceptedInvite(janesUsername);\n+  });\n+\n+  it(\"... and that she was inited by Corax\", () => {\n+    owensBrowser.invitedUsersList.waitAssertInviteRowPresent(\n+        1, { email: janesEmailAddress, sentByUsername: corax.username });\n+  });\n+\n+});\n+"
    },
    {
      "sha": "92360e02b227347e6b420cc58ff55ac2aac3a68a",
      "filename": "tests/e2e/specs/invites-by-mod-try-signup-after.2browsers.test.ts",
      "status": "added",
      "additions": 190,
      "deletions": 0,
      "changes": 190,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/specs/invites-by-mod-try-signup-after.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/specs/invites-by-mod-try-signup-after.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/invites-by-mod-try-signup-after.2browsers.test.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -0,0 +1,190 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('assert');\n+import server = require('../utils/server');\n+import utils = require('../utils/utils');\n+import { buildSite } from '../utils/site-builder';\n+import pagesFor = require('../utils/pages-for');\n+import settings = require('../utils/settings');\n+import logAndDie = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+declare var browser: any;\n+declare var browserA: any;\n+declare var browserB: any;\n+\n+let forum: EmptyTestForum;\n+\n+let everyonesBrowsers;\n+let staffsBrowser;\n+let othersBrowser;\n+let owen: Member;\n+let modya: Member;\n+let modyasBrowser;\n+let janesBrowser;\n+\n+let siteId;\n+let siteIdAddress: IdAddress;\n+let forumTitle = \"Some E2E Test\";\n+\n+const janesEmailAddress = 'e2e-test--jane@example.com';\n+const janesUsername = 'e2e-test--jane';\n+const janesPassword = 'publ-ja020';\n+\n+\n+describe(\"invites-by-mod-try-signup-after TyT4FGJA20M\", () => {\n+\n+  it(\"import a site\", () => {\n+    const builder = buildSite();\n+    forum = builder.addEmptyForum({\n+      title: forumTitle,\n+      members: ['modya']\n+    });\n+    assert(builder.getSite() === forum.siteData);\n+    siteIdAddress = server.importSiteData(forum.siteData);\n+    siteId = siteIdAddress.id;\n+  });\n+\n+  it(\"initialize people\", () => {\n+    everyonesBrowsers = _.assign(browser, pagesFor(browser));\n+    staffsBrowser = _.assign(browserA, pagesFor(browserA));\n+    othersBrowser = _.assign(browserB, pagesFor(browserB));\n+\n+    owen = forum.members.owen;\n+    modya = forum.members.modya;\n+    modyasBrowser = staffsBrowser;\n+    janesBrowser = othersBrowser;\n+  });\n+\n+  it(\"Modya goes to the Invites tab\", () => {\n+    modyasBrowser.adminArea.goToUsersEnabled(siteIdAddress.origin);\n+    modyasBrowser.loginDialog.loginWithPassword(modya);\n+    modyasBrowser.adminArea.users.switchToInvites();\n+  });\n+\n+  it(\"She sends an invite to Jane\", () => {\n+    assert(modyasBrowser.invitedUsersList.countNumInvited() === 0);\n+    modyasBrowser.adminArea.users.invites.clickSendInvite();\n+    modyasBrowser.inviteDialog.typeAndSubmitInvite(janesEmailAddress);\n+  });\n+\n+  it(\"... it appears in the Invites-Sent list\", () => {\n+    modyasBrowser.invitedUsersList.waitAssertInviteRowPresent(\n+        1, { email: janesEmailAddress, sentByUsername: modya.username });\n+    assert(modyasBrowser.invitedUsersList.countNumInvited() === 1);\n+    modyasBrowser.invitedUsersList.assertHasNotAcceptedInvite(janesUsername);\n+  });\n+\n+  it(\"... Jane is *not yet* in the New Members list\", () => {\n+    modyasBrowser.adminArea.users.switchToNew();\n+    modyasBrowser.adminArea.users.asserExactlyNumUsers(2);  // Owen, Modya\n+    modyasBrowser.adminArea.users.assertUserListed(modya);\n+    modyasBrowser.adminArea.users.assertUserListed(owen);\n+  });\n+\n+  let inviteLinkJane;\n+\n+  it(\"Jane gets an invite email\", () => {\n+    inviteLinkJane = server.waitAndGetInviteLinkEmailedTo(siteId, janesEmailAddress, browserA);\n+  });\n+\n+  it(\"... clicks the link\", () => {\n+    janesBrowser.go(inviteLinkJane);\n+  });\n+\n+  it(\"... and get auto logged in\", () => {\n+    janesBrowser.topbar.waitForMyMenuVisible();\n+    janesBrowser.topbar.assertMyUsernameMatches(janesUsername);\n+  });\n+\n+  it(\"... and gets a 'Thanks for accepting the invitation' email\", () => {\n+    server.waitAndGetThanksForAcceptingInviteEmailResetPasswordLink(siteId, janesEmailAddress, browserA);\n+  });\n+\n+  it(\"Modya now sees Jane in the New Members list\", () => {\n+    modyasBrowser.refresh();\n+    modyasBrowser.adminArea.users.asserExactlyNumUsers(3);  // Jane, Modya, Owen\n+    modyasBrowser.adminArea.users.assertUserListed({ username: janesUsername });\n+    modyasBrowser.adminArea.users.assertUserListed(modya);\n+    modyasBrowser.adminArea.users.assertUserListed(owen);\n+  });\n+\n+  it(\"... and sees in the invited users list that Jane has accepted the invite\", () => {\n+    modyasBrowser.adminArea.users.switchToInvites();\n+    assert(modyasBrowser.invitedUsersList.countNumInvited() === 1);\n+    modyasBrowser.invitedUsersList.assertHasAcceptedInvite(janesUsername);\n+  });\n+\n+  it(\"... Jane is in the the Enabled-users list  TyT2PK703S\", () => {\n+    modyasBrowser.adminArea.users.switchToEnabled();\n+    modyasBrowser.adminArea.users.asserExactlyNumUsers(3);  // Jane, Modya, Owen\n+    modyasBrowser.adminArea.users.assertUserListed({ username: janesUsername });\n+    modyasBrowser.adminArea.users.assertUserListed(modya);\n+    modyasBrowser.adminArea.users.assertUserListed(owen);\n+  });\n+\n+  it(\"... but not in the Staff list; invited users don't auto-become staff  TyT4WK0AQ2\", () => {\n+    modyasBrowser.adminArea.users.switchToStaff();\n+    modyasBrowser.adminArea.users.asserExactlyNumUsers(2);  // Owen, Modya\n+    modyasBrowser.adminArea.users.assertUserListed(modya);\n+    modyasBrowser.adminArea.users.assertUserListed(owen);\n+  });\n+\n+  it(\"Jane logs out\", () => {\n+    janesBrowser.topbar.clickLogout();\n+  });\n+\n+  it(\"She forgots that she has an account already, tries to sign up\", () => {\n+    janesBrowser.topbar.clickSignUp();\n+    janesBrowser.loginDialog.fillInEmail(janesEmailAddress);\n+    janesBrowser.loginDialog.fillInUsername('janejane');\n+    janesBrowser.loginDialog.fillInPassword('publ-abc123def');\n+    janesBrowser.loginDialog.clickSubmit();\n+    janesBrowser.loginDialog.acceptTerms();\n+  });\n+\n+  let resetPwdLink;\n+\n+  it(\"... and gets an email that she has an account already\", () => {\n+    resetPwdLink =\n+        server.waitForAlreadyHaveAccountEmailGetResetPasswordLink(siteId, janesEmailAddress, browserA);\n+  });\n+\n+  it(\"... and doesn't get logged in\", () => {\n+    janesBrowser.topbar.waitUntilLoginButtonVisible();\n+  });\n+\n+  it(\"She clicks the reset-password link in the email\", () => {\n+    janesBrowser.go(resetPwdLink);\n+  });\n+\n+  it(\"... types her email address\", () => {\n+    janesBrowser.resetPasswordPage.submitAccountOwnerEmailAddress(janesEmailAddress);\n+  });\n+\n+  let resetLink;\n+\n+  it(\"... gets a reset pwd email\", () => {\n+    resetLink = server.waitAndGetResetPasswordLinkEmailedTo(siteId, janesEmailAddress, browserA);\n+  });\n+\n+  it(\"... clicks the reset link\", () => {\n+    janesBrowser.go(resetLink);\n+  });\n+\n+  it(\"... and chooses a password\", () => {\n+    janesBrowser.chooseNewPasswordPage.typeAndSaveNewPassword(janesPassword);\n+  });\n+\n+  it(\"She logs out\", () => {\n+    janesBrowser.go('/');\n+    janesBrowser.topbar.clickLogout();\n+  });\n+\n+  it(\"... and can login in with the correct password\", () => {\n+    janesBrowser.complex.loginWithPasswordViaTopbar(janesUsername, janesPassword)\n+  });\n+\n+});\n+"
    },
    {
      "sha": "68c260a31abc9f3a6cefe12cf7a7d5bbcbb69cee",
      "filename": "tests/e2e/specs/password-login-reset.2browsers.test.ts",
      "status": "modified",
      "additions": 12,
      "deletions": 19,
      "changes": 31,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/specs/password-login-reset.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/specs/password-login-reset.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/password-login-reset.2browsers.test.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -13,15 +13,15 @@ declare var browser: any;\n declare var browserA: any;\n declare var browserB: any;\n \n-var everyone;\n-var owen;\n-var michael;\n+let everyone;\n+let owen;\n+let michael;\n \n-var idAddress;\n-var forumTitle = \"Reset Pwd Test Forum\";\n+let idAddress;\n+const forumTitle = \"Reset Pwd Test Forum\";\n \n \n-describe(\"private chat\", function() {\n+describe(\"password-login-reset  TyT5KAES20W\", function() {\n \n   it(\"initialize people\", function() {\n     everyone = _.assign(browser, pagesFor(browser));\n@@ -30,7 +30,7 @@ describe(\"private chat\", function() {\n   });\n \n   it(\"import a site\", function() {\n-    var site: SiteData = make.forumOwnedByOwen('reset-pwd', { title: forumTitle });\n+    const site: SiteData = make.forumOwnedByOwen('reset-pwd', { title: forumTitle });\n     site.settings.allowGuestLogin = true;\n     site.settings.requireVerifiedEmail = false;\n     site.members.push(make.memberMichael());\n@@ -83,17 +83,13 @@ describe(\"private chat\", function() {\n \n   it(\"Michael resets his password\", function() {\n     michael.loginDialog.clickResetPasswordCloseDialogSwitchTab();\n-    michael.resetPasswordPage.fillInAccountOwnerEmailAddress(michael.emailAddress);\n-    michael.rememberCurrentUrl();\n-    michael.resetPasswordPage.clickSubmit();\n-    michael.waitForNewUrl();\n-    michael.waitForVisible('#e2eRPP_ResetEmailSent');\n+    michael.resetPasswordPage.submitAccountOwnerEmailAddress(michael.emailAddress);\n   });\n \n-  var resetPwdPageLink;\n+  let resetPwdPageLink;\n \n   it(\"... he gets a reset-pwd email with a choose-new-password page link\", function() {\n-    var email = server.getLastEmailSenTo(idAddress.id, michael.emailAddress, michael);\n+    const email = server.getLastEmailSenTo(idAddress.id, michael.emailAddress, michael);\n     resetPwdPageLink = utils.findFirstLinkToUrlIn(\n       idAddress.origin + '/-/reset-password/choose-password/', email.bodyHtmlText);\n   });\n@@ -104,13 +100,10 @@ describe(\"private chat\", function() {\n     michael.waitForNewUrl();\n   });\n \n-  var newPassword = \"new_password\";\n+  const newPassword = \"new_password\";\n \n   it(\"... types a new password\", function() {\n-    michael.waitAndSetValue('#e2ePassword', newPassword);\n-    michael.waitAndClick('#e2eSubmit');\n-    // (stays at the same url)\n-    michael.waitForVisible(\"#e2eRPP_PasswordChanged\");\n+    michael.chooseNewPasswordPage.typeAndSaveNewPassword(newPassword);\n   });\n \n   it(\"... he can login with the new password\", function() {"
    },
    {
      "sha": "87548f74ba9be8124ac499c13d56aabb2ba915fd",
      "filename": "tests/e2e/specs/settings-allow-signup.test.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/specs/settings-allow-signup.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/specs/settings-allow-signup.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/settings-allow-signup.test.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -76,7 +76,7 @@ describe(\"(dis)allow signup:\", () => {\n     // ...\n   });\n \n-  it(\"?? Michael got an invite. He can accept it\", () => {\n+  it(\"?? Michael got an invite from Owen. He can accept it\", () => {\n     // ...\n   });\n "
    },
    {
      "sha": "f59cd8ddb8d43f15b295f939e0f4476daadfe991",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 149,
      "deletions": 14,
      "changes": 163,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/pages-for.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -286,8 +286,8 @@ function pagesFor(browser) {\n       origWaitForExist.apply(browser, arguments);\n     },\n \n-    waitAndClick: function(selector: string) {\n-      api._waitAndClickImpl(selector, {});\n+    waitAndClick: function(selector: string, opts: { maybeMoves?: boolean, clickFirst?: boolean } = {}) {\n+      api._waitAndClickImpl(selector, opts);\n     },\n \n \n@@ -302,8 +302,8 @@ function pagesFor(browser) {\n     },\n \n \n-    _waitAndClickImpl: function(selector: string, opts: { clickFirst?: boolean } = {}) {\n-      api._waitForClickable(selector);\n+    _waitAndClickImpl: function(selector: string, opts: { clickFirst?: boolean, maybeMoves?: boolean } = {}) {\n+      api._waitForClickable(selector, opts);\n       if (!selector.startsWith('#') && !opts.clickFirst) {\n         let errors = '';\n         let length = 1;\n@@ -328,14 +328,17 @@ function pagesFor(browser) {\n     },\n \n \n-    _waitForClickable: function(selector) {\n+    _waitForClickable: function(selector, opts: { maybeMoves?: boolean } = {}) {\n       // Without pause(..), the tests often break when run in an *invisible* browser, but works\n       // just fine when run in a *visible* browser. Meaning, it's very hard to fix any race\n       // conditions, because only fails when I cannot see. So for now, pause(100).\n       browser.pause(100);\n       api.waitForVisible(selector);\n       api.waitForEnabled(selector);\n       api.waitUntilLoadingOverlayGone();\n+      if (opts.maybeMoves) {\n+        api.waitUntilDoesNotMove(selector);\n+      }\n     },\n \n \n@@ -439,11 +442,15 @@ function pagesFor(browser) {\n     },\n \n \n-    waitAndSetValue: function(selector, value) {\n+    waitAndSetValue: (selector: string, value: string | number, opts: { maybeMoves?: true } = {}) => {\n       browser.pause(30); // for FF else fails randomly [E2EBUG] but Chrome = fine\n+                          // (maybe add waitUntilDoesNotMove ?)\n       api.waitForVisible(selector);\n       api.waitForEnabled(selector);\n       api.waitUntilLoadingOverlayGone();\n+      if (opts.maybeMoves) {\n+        api.waitUntilDoesNotMove(selector);\n+      }\n       browser.setValue(selector, value);\n     },\n \n@@ -525,7 +532,7 @@ function pagesFor(browser) {\n       }\n       assert(n >= 1, \"n starts on 1, change from 0 to 1 please\");\n       const items = browser.elements(selector).value;\n-      assert(items.length >= n, \"Only \" + items.length + \" elems found, there's no elem no \" + n);\n+      assert(items.length >= n, `Elem ${n} missing: Only ${items.length} elems match: ${selector}`);\n       const response = browser.elementIdText(items[n - 1].ELEMENT);\n       assert(isResponseOk(response), \"Bad response._status: \" + response._status +\n           \", state: \" + response.state);\n@@ -879,12 +886,16 @@ function pagesFor(browser) {\n           // Then a login dialog will probably have opened now in full screen, with a modal\n           // backdrop, so don't wait for any backdrop to disappear.\n           api.waitUntilModalGone();\n-          api.waitForVisible('.esTopbar_logIn');\n+          api.topbar.waitUntilLoginButtonVisible();\n         }\n         // If on a users profile page, might start reloading something (because different user & perms).\n         api.waitUntilLoadingOverlayGone();\n       },\n \n+      waitUntilLoginButtonVisible: function() {\n+        api.waitForVisible('.esTopbar_logIn');\n+      },\n+\n       openMyMenu: function() {\n         api.waitAndClick('.esMyMenu');\n         api.waitUntilLoadingOverlayGone();\n@@ -1245,6 +1256,14 @@ function pagesFor(browser) {\n         api.waitUntilTextMatches('.modal-body', 'TyEUSRSSPNDD_');\n       },\n \n+      waitForNotCreatedPasswordDialog: () => {\n+        api.waitForVisible('.e_NoPwD');\n+      },\n+\n+      clickCreatePasswordButton: () => {\n+        api.waitAndClick('.e_NoPwD button');\n+      },\n+\n       signUpAsGuest: function(name: string, email?: string) { // CLEAN_UP use createPasswordAccount instead? [8JTW4]\n         console.log('createPasswordAccount with no email: fillInFullName...');\n         api.loginDialog.fillInFullName(name);\n@@ -1556,6 +1575,14 @@ function pagesFor(browser) {\n \n \n     resetPasswordPage: {\n+      submitAccountOwnerEmailAddress: function(emailAddress: string) {\n+        api.resetPasswordPage.fillInAccountOwnerEmailAddress(emailAddress);\n+        api.rememberCurrentUrl();\n+        api.resetPasswordPage.clickSubmit();\n+        api.waitForNewUrl();\n+        api.waitForVisible('#e2eRPP_ResetEmailSent');\n+      },\n+\n       fillInAccountOwnerEmailAddress: function(emailAddress: string) {\n         api.waitAndSetValue('#e2eRPP_emailI', emailAddress);\n       },\n@@ -1566,6 +1593,28 @@ function pagesFor(browser) {\n     },\n \n \n+    chooseNewPasswordPage: {\n+      typeAndSaveNewPassword: (password: string) => {\n+        api.chooseNewPasswordPage.typeNewPassword(password);\n+        api.chooseNewPasswordPage.submit();\n+        api.chooseNewPasswordPage.waitUntilPasswordChanged();\n+      },\n+\n+      typeNewPassword: (password: string) => {\n+        api.waitAndSetValue('#e2ePassword', password);\n+      },\n+\n+      submit: () => {\n+        api.waitAndClick('#e2eSubmit');\n+      },\n+\n+      waitUntilPasswordChanged: () => {\n+        // Stays at the same url.\n+        api.waitForVisible(\"#e2eRPP_PasswordChanged\");\n+      },\n+    },\n+\n+\n     pageTitle: {\n       clickEdit: function() {\n         api.waitAndClick('#e2eEditTitle');\n@@ -2547,15 +2596,28 @@ function pagesFor(browser) {\n         api.waitUntilLoadingOverlayGone();\n       },\n \n-      isNotfsTabVisible: function() {\n+      switchToInvites: () => {\n+        api.waitAndClick('.e_InvTabB');\n+        api.invitedUsersList.waitUntilLoaded();\n+      },\n+\n+      waitForTabsVisible: () => {\n         // The activity tab is always visible, if the notfs tab can possibly be visible.\n         api.waitForVisible('.e_UP_ActivityB');\n+      },\n+\n+      isInvitesTabVisible: () => {\n+        api.userProfilePage.waitForTabsVisible();\n+        return browser.isVisible('.e_InvTabB');\n+      },\n+\n+      isNotfsTabVisible: function() {\n+        api.userProfilePage.waitForTabsVisible();\n         return browser.isVisible('.e_UP_NotfsB');\n       },\n \n       isPrefsTabVisible: function() {\n-        // The activity tab is always visible, if the preferences tab can possibly be visible.\n-        api.waitForVisible('.e_UP_ActivityB');\n+        api.userProfilePage.waitForTabsVisible();\n         return browser.isVisible('#e2eUP_PrefsB');\n       },\n \n@@ -2694,6 +2756,12 @@ function pagesFor(browser) {\n         }\n       },\n \n+      invites: {\n+        clickSendInvite: () => {\n+          api.waitAndClick('.e_SndInvB');\n+        }\n+      },\n+\n       preferences: {\n         switchToEmailsLogins: function() {\n           api.waitAndClick('.s_UP_Prf_Nav_EmLgL');\n@@ -2893,6 +2961,14 @@ function pagesFor(browser) {\n         api.go((origin || '') + `/-/admin/users/id/${userId}`);\n       },\n \n+      goToUsersInvited: (origin?: string, opts: { loginAs? } = {}) => {\n+        api.go((origin || '') + '/-/admin/users/invited');\n+        if (opts.loginAs) {\n+          browser.loginDialog.loginWithPassword(opts.loginAs);\n+        }\n+        api.adminArea.users.invites.waitUntilLoaded();\n+      },\n+\n       goToReview: function(origin?: string, opts: { loginAs? } = {}) {\n         api.go((origin || '') + '/-/admin/review/all');\n         if (opts.loginAs) {\n@@ -3214,10 +3290,9 @@ function pagesFor(browser) {\n           api.adminArea.users.waitForLoaded();\n         },\n \n-        switchToInvite: function() {\n+        switchToInvites: function() {\n           api.waitAndClick('.e_InvitedUsB');\n-          // When this elem visible, any invited-users-data has also been loaded.\n-          api.waitForVisible('.s_InvsL');\n+          api.adminArea.users.invites.waitUntilLoaded();\n         },\n \n         waiting: {\n@@ -3237,6 +3312,17 @@ function pagesFor(browser) {\n             api.waitAndClickFirst(api.adminArea.users.waiting.undoSelector);\n             api.waitUntilGone(api.adminArea.users.waiting.undoSelector);\n           },\n+        },\n+\n+        invites: {\n+          waitUntilLoaded: () => {\n+            // When this elem present, any invited-users-data has also been loaded.\n+            api.waitForExist('.s_InvsL');\n+          },\n+\n+          clickSendInvite: () => {\n+            api.waitAndClick('.s_AA_Us_Inv_SendB');\n+          },\n         }\n       },\n \n@@ -3345,6 +3431,55 @@ function pagesFor(browser) {\n       },\n     },\n \n+\n+    inviteDialog: {\n+      waitUntilLoaded: () => {\n+        api.waitForVisible('.s_InvD');\n+      },\n+\n+      typeAndSubmitInvite: (emailAddress: string) => {\n+        api.waitAndSetValue('.s_InvD input', emailAddress, { maybeMoves: true });\n+        api.waitAndClick('.s_InvD .btn-primary');\n+        api.waitAndClick('.s_InvSentD .e_SD_CloseB', { maybeMoves: true });\n+      },\n+\n+    },\n+\n+\n+    invitedUsersList: {\n+      invitedUserSelector: '.e_Inv_U',\n+\n+      waitUntilLoaded: () => {\n+        // When this elem present, any invited-users-data has also been loaded.\n+        api.waitForExist('.s_InvsL');\n+      },\n+\n+      assertHasAcceptedInvite: (username: string) => {\n+        api.assertAnyTextMatches(api.invitedUsersList.invitedUserSelector, username);\n+      },\n+\n+      assertHasNotAcceptedInvite: (username: string) => {\n+        api.assertNoTextMatches(api.invitedUsersList.invitedUserSelector, username);\n+      },\n+\n+      waitAssertInviteRowPresent: (index: number, opts: {\n+            email: string, acceptedByUsername?: string, sentByUsername?: string }) => {\n+        api.waitForAtLeast(index, '.s_InvsL_It');\n+        api.assertNthTextMatches('.e_Inv_Em', index, opts.email);\n+        if (opts.acceptedByUsername) {\n+          api.assertNthTextMatches('.e_Inv_U', index, opts.acceptedByUsername);\n+        }\n+        if (opts.sentByUsername) {\n+          api.assertNthTextMatches('.e_Inv_SentByU', index, opts.sentByUsername);\n+        }\n+      },\n+\n+      countNumInvited: () => {\n+        return browser.elements('.s_InvsL_It').value.length;\n+      },\n+    },\n+\n+\n     serverErrorDialog: {\n       waitForJustGotSuspendedError: function() {\n         api.waitUntilTextMatches('.modal-body', 'TyESUSPENDED_|TyE0LGDIN_');"
    },
    {
      "sha": "c2abd9b8636f4980fdc9a6e3a7f60c47bbf833ac",
      "filename": "tests/e2e/utils/server.ts",
      "status": "modified",
      "additions": 38,
      "deletions": 1,
      "changes": 39,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/utils/server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/utils/server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/server.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -172,7 +172,7 @@ function getLastVerifyEmailAddressLinkEmailedTo(siteId: SiteId, emailAddress: st\n }\n \n \n-// Note: *another* email address, not for the initial signup.\n+// Note: for *an additional* email address, not for the initial signup.\n function waitAndGetVerifyAnotherEmailAddressLinkEmailedTo(siteId: SiteId, emailAddress: string, browser,\n      options?: { isOldAddr: boolean }): string {\n   const textToMatch = options && options.isOldAddr\n@@ -185,6 +185,39 @@ function waitAndGetVerifyAnotherEmailAddressLinkEmailedTo(siteId: SiteId, emailA\n }\n \n \n+function waitAndGetInviteLinkEmailedTo(siteId: SiteId, emailAddress: string, browser): string {\n+  const textToMatch = \"invites you to join\"; // [5FJBAW2_]\n+  waitUntilLastEmailMatches(siteId, emailAddress, [textToMatch], browser);\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findFirstLinkToUrlIn('https?://.*/-/accept-invite', email.bodyHtmlText);\n+}\n+\n+\n+function waitAndGetThanksForAcceptingInviteEmailResetPasswordLink(siteId, emailAddress, browser) {\n+  const textToMatch = \"thanks for accepting the invitation\"; // [5FJB2AZY_]\n+  waitUntilLastEmailMatches(siteId, emailAddress, [textToMatch], browser);\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findFirstLinkToUrlIn('https?://.*/-/reset-password', email.bodyHtmlText);\n+}\n+\n+\n+function waitForAlreadyHaveAccountEmailGetResetPasswordLink(\n+      siteId: SiteId, emailAddress: string, browser): string {\n+  const textToMatch = \"you already have such an account\"; // [2WABJDD4_]\n+  waitUntilLastEmailMatches(siteId, emailAddress, [textToMatch], browser);\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findFirstLinkToUrlIn('https?://.*/-/reset-password', email.bodyHtmlText);\n+}\n+\n+\n+function waitAndGetResetPasswordLinkEmailedTo(siteId: SiteId, emailAddress: string, browser): string {\n+  const textToMatch = 'reset-password';  // in the url\n+  waitUntilLastEmailMatches(siteId, emailAddress, [textToMatch], browser);\n+  const email = getLastEmailSenTo(siteId, emailAddress, browser);\n+  return utils.findFirstLinkToUrlIn('https?://.*/-/reset-password', email.bodyHtmlText);\n+}\n+\n+\n const unsubUrlRegexString = 'https?://.*/-/unsubscribe';\n \n function getLastUnsubscriptionLinkEmailedTo(siteId: SiteId, emailAddress: string, browser): string {\n@@ -269,6 +302,10 @@ export = {\n   countLastEmailsSentTo,\n   getLastVerifyEmailAddressLinkEmailedTo,\n   waitAndGetVerifyAnotherEmailAddressLinkEmailedTo,\n+  waitAndGetInviteLinkEmailedTo,\n+  waitAndGetThanksForAcceptingInviteEmailResetPasswordLink,\n+  waitForAlreadyHaveAccountEmailGetResetPasswordLink,\n+  waitAndGetResetPasswordLinkEmailedTo,\n   getLastUnsubscriptionLinkEmailedTo,\n   getAnyUnsubscriptionLinkEmailedTo,\n   waitForUnsubscriptionLinkEmailedTo,"
    },
    {
      "sha": "e7851f1fa65e4086e223f4a7b110dd673cb69edc",
      "filename": "tests/e2e/utils/utils.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/utils/utils.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/0cc6df74ee52502dcb70a64e7057ea1474ae6797/tests/e2e/utils/utils.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/utils.ts?ref=0cc6df74ee52502dcb70a64e7057ea1474ae6797",
      "patch": "@@ -46,11 +46,13 @@ const utils = {\n   },\n \n   _findFirstLinkToUrlImpl: function(url: string, text: string, mustMatch: boolean): string {\n-    const regexString = utils.regexEscapeSlashes(url) + '[^\"]*';\n+    // Make sure ends with \", otherwise might find: <a href=\"..\">http://this..instead..of..the..href</a>.\n+    // This:  (?: ...)  is a non-capture group, so the trailing \" won't be incl in the match.\n+    const regexString = '(' + utils.regexEscapeSlashes(url) + '[^\"\\']*)(?:[\"\\'])';\n     const matches = text.match(new RegExp(regexString));\n     dieIf(mustMatch && !matches,\n         `No link matching /${regexString}/ found in email [EsE5GPYK2], text: ${text}`);\n-    return matches ? matches[0] : undefined;\n+    return matches ? matches[1] : undefined;\n   }\n };\n "
    }
  ]
}
