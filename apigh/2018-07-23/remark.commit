{
  "sha": "dbd1d4069f7089e52e234891c22ceacd5eb57c18",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmRiZDFkNDA2OWY3MDg5ZTUyZTIzNDg5MWMyMmNlYWNkNWViNTdjMTg=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2018-07-23T02:46:25Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2018-07-23T02:46:25Z"
    },
    "message": "feature/ext-mongo (#177)\n\n* externalize mongo wrapper\r\n\r\n* remove mongo env from drone\r\n\r\n* export mongo test for coverage report",
    "tree": {
      "sha": "d3e03ae0add67412c8be4d31e356e44e4a7d41bb",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/d3e03ae0add67412c8be4d31e356e44e4a7d41bb"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/dbd1d4069f7089e52e234891c22ceacd5eb57c18",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbVUGBCRBK7hj4Ov3rIwAAdHIIAKEnyJG4ZejrfEfkoBsq2ml2\ng/1F/3k2tAFCpCyyHj9iykQhnRkEyV1u6SAxBF/YxEFrf58T7NsQ68LYy0NqBeP2\nkTH38ccZfF5oJ4SMnmxR0G2c7R3PImysY4lUu95KIdNLDfLPyIu3ctty4eeON5KT\nNda/x6Pt8lZWnWwW+YownxbJsV8soMOT2DZNOTxggJwnNV5Nszp/3EVF1/P4QnQ7\n11jyIzQBXdlr9/Fr/imjcqKyM9rQz/i/Lc+UjYvB4PBpZkNTjSExoI2Foc7otvRN\n92joex1d/H43lPCyfMg1qvi9UggBmnWbbjBNqZVkr/0/nMlheFt1MsWpKLSbkz8=\n=kQGP\n-----END PGP SIGNATURE-----\n",
      "payload": "tree d3e03ae0add67412c8be4d31e356e44e4a7d41bb\nparent fdf161850b737c39f6ea635474d5c1297c304c32\nauthor Umputun <umputun@gmail.com> 1532313985 -0400\ncommitter GitHub <noreply@github.com> 1532313985 -0400\n\nfeature/ext-mongo (#177)\n\n* externalize mongo wrapper\r\n\r\n* remove mongo env from drone\r\n\r\n* export mongo test for coverage report\r\n"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/dbd1d4069f7089e52e234891c22ceacd5eb57c18",
  "html_url": "https://github.com/umputun/remark/commit/dbd1d4069f7089e52e234891c22ceacd5eb57c18",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/dbd1d4069f7089e52e234891c22ceacd5eb57c18/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fdf161850b737c39f6ea635474d5c1297c304c32",
      "url": "https://api.github.com/repos/umputun/remark/commits/fdf161850b737c39f6ea635474d5c1297c304c32",
      "html_url": "https://github.com/umputun/remark/commit/fdf161850b737c39f6ea635474d5c1297c304c32"
    }
  ],
  "stats": {
    "total": 743,
    "additions": 311,
    "deletions": 432
  },
  "files": [
    {
      "sha": "1ba6f7301892359099f180915f474382cb5c9558",
      "filename": ".drone.yml",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/.drone.yml",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/.drone.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/.drone.yml?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -16,13 +16,12 @@ pipeline:\n   docker_master:\n     image: plugins/docker\n     repo: umputun/remark42\n-    secrets: [ docker_username, docker_password, mongo_remark_test ]\n+    secrets: [ docker_username, docker_password]\n     build_args:\n       - DRONE=${DRONE}\n       - DRONE_TAG=${DRONE_TAG}\n       - DRONE_COMMIT=${DRONE_COMMIT}\n       - DRONE_BRANCH=${DRONE_BRANCH}\n-    build_args_from_env: [mongo_remark_test]  \n     tags:\n       - ${DRONE_COMMIT_BRANCH/\\//-}\n     when:\n@@ -46,12 +45,11 @@ pipeline:\n   docker_branch:\n     image: plugins/docker\n     repo: umputun/remark42\n-    secrets: [ docker_username, docker_password, mongo_remark_test ]\n+    secrets: [ docker_username, docker_password ]\n     build_args:\n       - DRONE=${DRONE}\n       - DRONE_COMMIT=${DRONE_COMMIT}\n       - DRONE_BRANCH=${DRONE_BRANCH}\n-    build_args_from_env: [mongo_remark_test]\n     tags:\n       - ${DRONE_COMMIT_BRANCH/\\//-}\n     when:"
    },
    {
      "sha": "1c64345a21021561869d14344098ed62d12042bc",
      "filename": ".travis.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/.travis.yml",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/.travis.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/.travis.yml?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -16,5 +16,5 @@ script:\n       --build-arg TRAVIS_PULL_REQUEST_SHA=$TRAVIS_PULL_REQUEST_SHA\n       --build-arg TRAVIS_REPO_SLUG=$TRAVIS_REPO_SLUG\n       --build-arg TRAVIS_TAG=$TRAVIS_TAG\n-      --build-arg MONGO_REMARK_TEST=$MONGO_REMARK_TEST\n+      --build-arg MONGO_TEST=$MONGO_REMARK_TEST\n       ."
    },
    {
      "sha": "9f039463df8cdd8ff7f65ef40727c30acae70ddb",
      "filename": "Dockerfile",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/Dockerfile",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/Dockerfile",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/Dockerfile?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -19,30 +19,31 @@ ARG DRONE_BRANCH\n ARG DRONE_PULL_REQUEST\n \n ARG SKIP_BACKEND_TEST\n-ARG MONGO_REMARK_TEST\n+ARG MONGO_TEST\n \n WORKDIR /go/src/github.com/umputun/remark/backend\n ADD backend /go/src/github.com/umputun/remark/backend\n \n # run tests\n RUN \\\n-    if [ -f .mongo ] ; then export MONGO_REMARK_TEST=$(cat .mongo) ; fi && \\\n+    if [ -f .mongo ] ; then export MONGO_TEST=$(cat .mongo) ; fi && \\\n     cd app && \\\n     if [ -z \"$SKIP_BACKEND_TEST\" ] ; then go test ./... ; \\\n     else echo \"skip backend test\" ; fi\n \n-RUN echo \"mongo=${MONGO_REMARK_TEST}\" >> /etc/hosts\n+RUN echo \"mongo=${MONGO_TEST}\" >> /etc/hosts\n \n # linters\n RUN if [ -z \"$SKIP_BACKEND_TEST\" ] ; then \\\n-    if [ -f .mongo ] ; then export MONGO_REMARK_TEST=$(cat .mongo) ; fi && \\\n+    if [ -f .mongo ] ; then export MONGO_TEST=$(cat .mongo) ; fi && \\\n     gometalinter --disable-all --deadline=300s --vendor --enable=vet --enable=vetshadow --enable=golint \\\n     --enable=staticcheck --enable=ineffassign --enable=goconst --enable=errcheck --enable=unconvert \\\n     --enable=deadcode  --enable=gosimple --enable=gas --exclude=test --exclude=mock --exclude=vendor ./... ; \\\n     else echo \"skip backend linters\" ; fi\n \n # coverage report\n RUN if [ -z \"$SKIP_BACKEND_TEST\" ] ; then \\\n+    if [ -f .mongo ] ; then export MONGO_TEST=$(cat .mongo) ; fi && \\\n     mkdir -p target && /script/coverage.sh ; \\\n     else echo \"skip backend coverage\" ; fi\n "
    },
    {
      "sha": "e512a56e108029a5a4a0fa6674af460dadc9414e",
      "filename": "backend/Gopkg.lock",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/Gopkg.lock",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/Gopkg.lock",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/Gopkg.lock?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -81,6 +81,12 @@\n   revision = \"9f855fadd4b8cde7773f9ef51f6b2705af239519\"\n   version = \"v1.0.0\"\n \n+[[projects]]\n+  name = \"github.com/go-pkgz/mongo\"\n+  packages = [\".\"]\n+  revision = \"9a09a574c336c6ae2338a65bbebed2baab2a713c\"\n+  version = \"v1.0.0\"\n+\n [[projects]]\n   name = \"github.com/golang/protobuf\"\n   packages = [\"proto\"]\n@@ -250,6 +256,6 @@\n [solve-meta]\n   analyzer-name = \"dep\"\n   analyzer-version = 1\n-  inputs-digest = \"b6dd6c99dd3a4f5135f8b869063a2b24044494b2ed77442bfd50a45d096e414a\"\n+  inputs-digest = \"e933250b2582d1ff7d2b165c4a8a934762677a2ebaaea743fb3c485868c6d793\"\n   solver-name = \"gps-cdcl\"\n   solver-version = 1"
    },
    {
      "sha": "343a4dbae6e7a51c6bd3037b0c93db7a26315b42",
      "filename": "backend/app/main.go",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/app/main.go",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/app/main.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/main.go?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -11,9 +11,8 @@ import (\n \t\"syscall\"\n \t\"time\"\n \n-\t\"github.com/umputun/remark/backend/app/store/avatar\"\n-\n \t\"github.com/coreos/bbolt\"\n+\t\"github.com/go-pkgz/mongo\"\n \t\"github.com/hashicorp/logutils\"\n \t\"github.com/jessevdk/go-flags\"\n \t\"github.com/pkg/errors\"\n@@ -23,8 +22,8 @@ import (\n \t\"github.com/umputun/remark/backend/app/rest/auth\"\n \t\"github.com/umputun/remark/backend/app/rest/cache\"\n \t\"github.com/umputun/remark/backend/app/rest/proxy\"\n+\t\"github.com/umputun/remark/backend/app/store/avatar\"\n \t\"github.com/umputun/remark/backend/app/store/engine\"\n-\t\"github.com/umputun/remark/backend/app/store/engine/mongo\"\n \t\"github.com/umputun/remark/backend/app/store/service\"\n )\n "
    },
    {
      "sha": "33106f5d74fc6a92950b719680b32fc922b672dd",
      "filename": "backend/app/store/avatar/gridfs.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/app/store/avatar/gridfs.go",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/app/store/avatar/gridfs.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/gridfs.go?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -7,10 +7,10 @@ import (\n \t\"log\"\n \n \t\"github.com/globalsign/mgo\"\n+\t\"github.com/go-pkgz/mongo\"\n \t\"github.com/pkg/errors\"\n \n \t\"github.com/umputun/remark/backend/app/store\"\n-\t\"github.com/umputun/remark/backend/app/store/engine/mongo\"\n )\n \n // NewGridFS makes gridfs (mongo) avatar store"
    },
    {
      "sha": "bcc6baade152e856c7e9b922d6ac11f9d478652e",
      "filename": "backend/app/store/avatar/gridfs_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/app/store/avatar/gridfs_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/app/store/avatar/gridfs_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/gridfs_test.go?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -6,10 +6,9 @@ import (\n \t\"testing\"\n \n \t\"github.com/globalsign/mgo\"\n+\t\"github.com/go-pkgz/mongo\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n-\n-\t\"github.com/umputun/remark/backend/app/store/engine/mongo\"\n )\n \n func TestGridFS_PutAndGet(t *testing.T) {"
    },
    {
      "sha": "a6e50833c7020cad954e5a4035c89ad2730e5d15",
      "filename": "backend/app/store/engine/mongo.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/app/store/engine/mongo.go",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/app/store/engine/mongo.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/engine/mongo.go?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -5,11 +5,11 @@ import (\n \n \t\"github.com/globalsign/mgo\"\n \t\"github.com/globalsign/mgo/bson\"\n+\t\"github.com/go-pkgz/mongo\"\n \t\"github.com/hashicorp/go-multierror\"\n \t\"github.com/pkg/errors\"\n \n \t\"github.com/umputun/remark/backend/app/store\"\n-\t\"github.com/umputun/remark/backend/app/store/engine/mongo\"\n )\n \n // Mongo implements engine interface"
    },
    {
      "sha": "0d611647c2fb3dde6a379d53abcfca518eb310bb",
      "filename": "backend/app/store/engine/mongo/connection_test.go",
      "status": "removed",
      "additions": 0,
      "deletions": 126,
      "changes": 126,
      "blob_url": "https://github.com/umputun/remark/blob/fdf161850b737c39f6ea635474d5c1297c304c32/backend/app/store/engine/mongo/connection_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/fdf161850b737c39f6ea635474d5c1297c304c32/backend/app/store/engine/mongo/connection_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/engine/mongo/connection_test.go?ref=fdf161850b737c39f6ea635474d5c1297c304c32",
      "patch": "@@ -1,126 +0,0 @@\n-package mongo\n-\n-import (\n-\t\"fmt\"\n-\t\"testing\"\n-\n-\t\"github.com/globalsign/mgo\"\n-\t\"github.com/globalsign/mgo/bson\"\n-\t\"github.com/hashicorp/go-multierror\"\n-\t\"github.com/stretchr/testify/assert\"\n-)\n-\n-type testRecord struct {\n-\tSymbol string\n-\tNum    int\n-}\n-\n-func TestConnection_WithCollection(t *testing.T) {\n-\tc, err := write(t)\n-\tif err != nil {\n-\t\treturn\n-\t}\n-\tdefer RemoveTestCollection(t, c)\n-\n-\tvar res []testRecord\n-\terr = c.WithCollection(func(coll *mgo.Collection) error {\n-\t\treturn coll.Find(nil).All(&res)\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, 100, len(res))\n-\n-\terr = c.WithCollection(func(coll *mgo.Collection) error {\n-\t\treturn coll.Find(bson.M{\"symbol\": \"blah\"}).All(&res)\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, 0, len(res))\n-\n-\tr1 := testRecord{}\n-\terr = c.WithCollection(func(coll *mgo.Collection) error {\n-\t\treturn coll.Find(bson.M{\"symbol\": \"blah\"}).One(&r1)\n-\t})\n-\tassert.Equal(t, mgo.ErrNotFound, err)\n-\n-\tc = NewConnection(c.server, \"test\", \"bbbbbbbaaad\")\n-\terr = c.WithCollection(func(coll *mgo.Collection) error {\n-\t\treturn coll.Find(bson.M{\"symbol\": \"blah\"}).One(&r1)\n-\t})\n-\tassert.Equal(t, mgo.ErrNotFound, err)\n-}\n-\n-func TestConnection_WithCollectionNoDB(t *testing.T) {\n-\tc, err := write(t)\n-\tif err != nil {\n-\t\treturn\n-\t}\n-\tdefer RemoveTestCollection(t, c)\n-\n-\tvar res []testRecord\n-\terr = c.WithCollection(func(coll *mgo.Collection) error {\n-\t\treturn coll.Find(nil).All(&res)\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, 100, len(res))\n-}\n-\n-func TestConnection_WithDB(t *testing.T) {\n-\tc, err := write(t)\n-\tif err != nil {\n-\t\treturn\n-\t}\n-\tdefer RemoveTestCollection(t, c)\n-\n-\tvar res []testRecord\n-\terr = c.WithCustomDB(\"test\", func(dbase *mgo.Database) error {\n-\t\treturn dbase.C(c.collection).Find(nil).All(&res)\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, 100, len(res))\n-\n-\terr = c.WithDB(func(dbase *mgo.Database) error {\n-\t\treturn dbase.C(c.collection).Find(nil).All(&res)\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, 100, len(res))\n-}\n-\n-func TestCleanup(t *testing.T) {\n-\tc, err := write(t)\n-\tif err != nil {\n-\t\treturn\n-\t}\n-\tvar res []testRecord\n-\terr = c.WithCustomDB(\"test\", func(dbase *mgo.Database) error {\n-\t\treturn dbase.C(c.collection).Find(nil).All(&res)\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, 100, len(res))\n-\n-\tRemoveTestCollections(t, c, c.collection)\n-\terr = c.WithCustomDB(\"test\", func(dbase *mgo.Database) error {\n-\t\treturn dbase.C(c.collection).Find(nil).All(&res)\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, 0, len(res))\n-}\n-\n-func write(t *testing.T) (*Connection, error) {\n-\tc, err := MakeTestConnection(t)\n-\tif err != nil {\n-\t\treturn nil, err\n-\t}\n-\terr = c.WithCollection(func(coll *mgo.Collection) error {\n-\t\terrs := new(multierror.Error)\n-\t\tfor i := 0; i < 100; i++ {\n-\t\t\tr := testRecord{\n-\t\t\t\tSymbol: fmt.Sprintf(\"symb-%02d\", i%5),\n-\t\t\t\tNum:    i,\n-\t\t\t}\n-\t\t\tinsertErr := coll.Insert(r)\n-\t\t\tassert.Nil(t, insertErr, fmt.Sprintf(\"insert %+v\", r))\n-\t\t\terrs = multierror.Append(errs, insertErr)\n-\t\t}\n-\t\treturn errs.ErrorOrNil()\n-\t})\n-\treturn c, err\n-}"
    },
    {
      "sha": "1b83548a195e573464337693e4f09020723e8ded",
      "filename": "backend/app/store/engine/mongo/server_test.go",
      "status": "removed",
      "additions": 0,
      "deletions": 93,
      "changes": 93,
      "blob_url": "https://github.com/umputun/remark/blob/fdf161850b737c39f6ea635474d5c1297c304c32/backend/app/store/engine/mongo/server_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/fdf161850b737c39f6ea635474d5c1297c304c32/backend/app/store/engine/mongo/server_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/engine/mongo/server_test.go?ref=fdf161850b737c39f6ea635474d5c1297c304c32",
      "patch": "@@ -1,93 +0,0 @@\n-package mongo\n-\n-import (\n-\t\"os\"\n-\t\"testing\"\n-\t\"time\"\n-\n-\t\"github.com/globalsign/mgo\"\n-\t\"github.com/stretchr/testify/assert\"\n-)\n-\n-func TestServer_NewServerGood(t *testing.T) {\n-\tmongoURL := os.Getenv(\"MONGO_REMARK_TEST\")\n-\tif mongoURL == \"\" || mongoURL == \"skip\" {\n-\t\tt.Skip(\"no MONGO_REMARK_TEST in env\")\n-\t\treturn\n-\t}\n-\n-\tm, err := NewServerWithURL(mongoURL, 3*time.Second)\n-\tassert.Nil(t, err)\n-\tassert.NotNil(t, m)\n-\tassert.True(t, m.String() != \"\")\n-}\n-\n-func TestServer_NewServerBad(t *testing.T) {\n-\t_, err := NewServerWithURL(\"mongodb://127.0.0.3:27017/test\", 100*time.Millisecond)\n-\tassert.NotNil(t, err)\n-\tt.Log(err)\n-\n-\t_, err = NewServer(mgo.DialInfo{Addrs: []string{\"127.0.0.2\"}, Timeout: 100 * time.Millisecond}, ServerParams{})\n-\tassert.NotNil(t, err)\n-\n-\t_, err = NewServer(mgo.DialInfo{}, ServerParams{})\n-\tassert.NotNil(t, err)\n-\n-\t_, err = NewServerWithURL(\"mongodb://mongo:27017/test?blah=xxx\", 100*time.Millisecond)\n-\tassert.NotNil(t, err)\n-\tt.Log(err)\n-}\n-\n-func TestServer_parse(t *testing.T) {\n-\ttbl := []struct {\n-\t\tmongoURL string\n-\t\ttimeout  time.Duration\n-\t\tparams   ServerParams\n-\t\tdial     mgo.DialInfo\n-\t\tisErr    bool\n-\t}{\n-\t\t{\n-\t\t\t\"mongodb://127.0.0.3:27017/test\", time.Millisecond,\n-\t\t\tServerParams{ConsistencyMode: 1},\n-\t\t\tmgo.DialInfo{Addrs: []string{\"127.0.0.3:27017\"}, Timeout: 1000000, Database: \"test\",\n-\t\t\t\tReadPreference: &mgo.ReadPreference{Mode: 2}},\n-\t\t\tfalse,\n-\t\t},\n-\t\t{\n-\t\t\t\"mongodb://user:passwd@127.0.0.3:27017/test?ssl=true&authSource=admin\", time.Millisecond,\n-\t\t\tServerParams{ConsistencyMode: 1, SSL: true},\n-\t\t\tmgo.DialInfo{Addrs: []string{\"127.0.0.3:27017\"}, Timeout: 1000000, Database: \"test\", Source: \"admin\",\n-\t\t\t\tUsername: \"user\", Password: \"passwd\", ReadPreference: &mgo.ReadPreference{Mode: 2}},\n-\t\t\tfalse,\n-\t\t},\n-\t\t{\n-\t\t\t\"mongodb://127.0.0.3\", time.Millisecond,\n-\t\t\tServerParams{ConsistencyMode: 1, SSL: false},\n-\t\t\tmgo.DialInfo{Addrs: []string{\"127.0.0.3\"}, Timeout: 1000000, ReadPreference: &mgo.ReadPreference{Mode: 2}},\n-\t\t\tfalse,\n-\t\t},\n-\t\t{\n-\t\t\t\"127.0.0.3\", time.Millisecond,\n-\t\t\tServerParams{ConsistencyMode: 1, SSL: false},\n-\t\t\tmgo.DialInfo{Addrs: []string{\"127.0.0.3\"}, Timeout: 1000000, ReadPreference: &mgo.ReadPreference{Mode: 2}},\n-\t\t\tfalse,\n-\t\t},\n-\t\t{\n-\t\t\t\"127.0.0.3?xxx=yyy\", time.Millisecond,\n-\t\t\tServerParams{}, mgo.DialInfo{},\n-\t\t\ttrue,\n-\t\t},\n-\t}\n-\n-\tfor i, tt := range tbl {\n-\t\tdial, params, err := parseURL(tt.mongoURL, tt.timeout)\n-\t\tdial.DialServer = nil\n-\t\tif tt.isErr {\n-\t\t\tassert.NotNil(t, err, \"expect error #%d\", i)\n-\t\t\tt.Logf(\"dial %+v, params %+v\", dial, params)\n-\t\t\tcontinue\n-\t\t}\n-\t\tassert.Equal(t, tt.dial, dial, \"test #%d\", i)\n-\t\tassert.Equal(t, tt.params, params, \"test #%d\", i)\n-\t}\n-}"
    },
    {
      "sha": "1c4a79f5545701dcc8b1c62d2970407c7bb141b7",
      "filename": "backend/app/store/engine/mongo/writer_test.go",
      "status": "removed",
      "additions": 0,
      "deletions": 162,
      "changes": 162,
      "blob_url": "https://github.com/umputun/remark/blob/fdf161850b737c39f6ea635474d5c1297c304c32/backend/app/store/engine/mongo/writer_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/fdf161850b737c39f6ea635474d5c1297c304c32/backend/app/store/engine/mongo/writer_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/engine/mongo/writer_test.go?ref=fdf161850b737c39f6ea635474d5c1297c304c32",
      "patch": "@@ -1,162 +0,0 @@\n-package mongo\n-\n-import (\n-\t\"sync\"\n-\t\"testing\"\n-\t\"time\"\n-\n-\t\"github.com/globalsign/mgo\"\n-\t\"github.com/globalsign/mgo/bson\"\n-\t\"github.com/stretchr/testify/assert\"\n-\t\"github.com/stretchr/testify/require\"\n-)\n-\n-func TestWriter(t *testing.T) {\n-\n-\tcount := func(conn *Connection) (res int) {\n-\t\t_ = conn.WithCollection(func(coll *mgo.Collection) error {\n-\t\t\tvar err error\n-\t\t\tres, err = coll.Find(nil).Count()\n-\t\t\tassert.Nil(t, err)\n-\t\t\treturn nil\n-\t\t})\n-\t\treturn res\n-\t}\n-\n-\tconn, err := MakeTestConnection(t)\n-\tif err != nil {\n-\t\treturn\n-\t}\n-\tdefer RemoveTestCollection(t, conn)\n-\n-\tvar wr BufferedWriter = NewBufferedWriter(3, conn)\n-\tassert.Nil(t, wr.Write(bson.M{\"key1\": \"val1\"}), \"write rec #1\")\n-\tassert.Nil(t, wr.Write(bson.M{\"key2\": \"val2\"}), \"write rec #2\")\n-\n-\tassert.Equal(t, 0, count(conn), \"nothing yet\")\n-\n-\tassert.Nil(t, wr.Write(bson.M{\"key3\": \"val3\"}), \"write rec #3\")\n-\tassert.Equal(t, 3, count(conn), \"all 3 records in\")\n-\n-\tassert.Nil(t, wr.Write(bson.M{\"key4\": \"val4\"}), \"write rec #4\")\n-\tassert.Equal(t, 3, count(conn), \"still 3 records\")\n-\n-\tassert.Nil(t, wr.Flush())\n-\tassert.Equal(t, 4, count(conn), \"all 4 records\")\n-\n-\tassert.Nil(t, wr.Flush())\n-\tassert.Equal(t, 4, count(conn), \"still 4 records, nothing left to flush\")\n-\n-\tassert.Nil(t, wr.Close())\n-\n-}\n-\n-func TestWriter_Parallel(t *testing.T) {\n-\tconn, err := MakeTestConnection(t)\n-\tif err != nil {\n-\t\treturn\n-\t}\n-\tdefer RemoveTestCollection(t, conn)\n-\n-\tvar wg sync.WaitGroup\n-\twr := NewBufferedWriter(75, conn)\n-\n-\twriteMany := func() {\n-\t\tfor i := 0; i < 100; i++ {\n-\t\t\trequire.NoError(t, wr.Write(bson.M{\"key1\": 1, \"key2\": 2}))\n-\t\t}\n-\t\twr.Flush()\n-\t\twg.Done()\n-\t}\n-\n-\tfor i := 0; i < 16; i++ {\n-\t\twg.Add(1)\n-\t\tgo writeMany()\n-\t}\n-\n-\twg.Wait()\n-\n-\t_ = conn.WithCollection(func(coll *mgo.Collection) error {\n-\t\tres, err := coll.Find(nil).Count()\n-\t\tassert.Nil(t, err)\n-\t\tassert.Equal(t, 100*16, res)\n-\t\treturn nil\n-\t})\n-\tassert.Nil(t, wr.Close())\n-}\n-\n-func TestWriter_WithAuthFlush(t *testing.T) {\n-\tconn, err := MakeTestConnection(t)\n-\tif err != nil {\n-\t\treturn\n-\t}\n-\tdefer RemoveTestCollection(t, conn)\n-\n-\tvar wr BufferedWriter = NewBufferedWriter(3, conn).WithAutoFlush(500 * time.Millisecond)\n-\tcount := func() (res int) {\n-\t\t_ = conn.WithCollection(func(coll *mgo.Collection) error {\n-\t\t\tvar err error\n-\t\t\tres, err = coll.Find(nil).Count()\n-\t\t\tassert.Nil(t, err)\n-\t\t\treturn nil\n-\t\t})\n-\t\treturn res\n-\t}\n-\n-\tassert.Nil(t, wr.Write(bson.M{\"key1\": \"val1\"}), \"write rec #1\")\n-\tassert.Nil(t, wr.Write(bson.M{\"key2\": \"val2\"}), \"write rec #2\")\n-\tassert.Equal(t, 0, count(), \"nothing yet\")\n-\ttime.Sleep(600 * time.Millisecond)\n-\tassert.Equal(t, 2, count(), \"2 records flushed\")\n-\n-\tassert.Nil(t, wr.Write(bson.M{\"key3\": \"val3\"}), \"write rec #3\")\n-\tassert.Nil(t, wr.Write(bson.M{\"key4\": \"val4\"}), \"write rec #4\")\n-\tassert.Nil(t, wr.Write(bson.M{\"key5\": \"val5\"}), \"write rec #5\")\n-\tassert.Equal(t, 5, count(), \"5 records, flushed by size, not duration\")\n-\n-\tassert.Nil(t, wr.Write(bson.M{\"key6\": \"val6\"}), \"write rec #6\")\n-\tassert.Nil(t, wr.Write(bson.M{\"key7\": \"val7\"}), \"write rec #7\")\n-\tassert.Equal(t, 5, count(), \"still 5 records\")\n-\n-\tassert.Nil(t, wr.Flush())\n-\tassert.Equal(t, 7, count(), \"all 7 records\")\n-\n-\tassert.Nil(t, wr.Flush())\n-\tassert.Equal(t, 7, count(), \"still 7 records, nothing left to flush\")\n-\tassert.Nil(t, wr.Close())\n-}\n-\n-func TestWriter_ParallelWithAutoFlush(t *testing.T) {\n-\tconn, err := MakeTestConnection(t)\n-\tif err != nil {\n-\t\treturn\n-\t}\n-\tdefer RemoveTestCollection(t, conn)\n-\n-\tvar wg sync.WaitGroup\n-\twr := NewBufferedWriter(75, conn).WithAutoFlush(time.Millisecond)\n-\n-\twriteMany := func() {\n-\t\tfor i := 0; i < 100; i++ {\n-\t\t\trequire.NoError(t, wr.Write(bson.M{\"key1\": 1, \"key2\": 2}))\n-\t\t\ttime.Sleep(time.Millisecond * 3)\n-\t\t}\n-\t\twr.Flush()\n-\t\twg.Done()\n-\t}\n-\n-\tfor i := 0; i < 16; i++ {\n-\t\twg.Add(1)\n-\t\tgo writeMany()\n-\t}\n-\n-\twg.Wait()\n-\n-\t_ = conn.WithCollection(func(coll *mgo.Collection) error {\n-\t\tres, err := coll.Find(nil).Count()\n-\t\tassert.Nil(t, err)\n-\t\tassert.Equal(t, 100*16, res)\n-\t\treturn nil\n-\t})\n-\tassert.Nil(t, wr.Close())\n-}"
    },
    {
      "sha": "0d94745b12123cbe1da6fd12311b8f2afb24f1f0",
      "filename": "backend/app/store/engine/mongo_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/app/store/engine/mongo_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/app/store/engine/mongo_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/engine/mongo_test.go?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -6,11 +6,11 @@ import (\n \t\"testing\"\n \t\"time\"\n \n+\t\"github.com/go-pkgz/mongo\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n \n \t\"github.com/umputun/remark/backend/app/store\"\n-\t\"github.com/umputun/remark/backend/app/store/engine/mongo\"\n )\n \n func TestMongo_CreateAndFind(t *testing.T) {"
    },
    {
      "sha": "f1c181ec9c5c921245027c6b452ecfc1d3626364",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/.gitignore",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.gitignore",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.gitignore",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/.gitignore?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -0,0 +1,12 @@\n+# Binaries for programs and plugins\n+*.exe\n+*.exe~\n+*.dll\n+*.so\n+*.dylib\n+\n+# Test binary, build with `go test -c`\n+*.test\n+\n+# Output of the go coverage tool, specifically when used with LiteIDE\n+*.out"
    },
    {
      "sha": "6e8c06a70c93f4b721cb920959fbb3cddcb36a91",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/.travis.yml",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.travis.yml",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.travis.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/.travis.yml?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -0,0 +1,23 @@\n+language: go\n+\n+go:\n+  - \"1.10.x\"\n+\n+go_import_path: github.com/go-pkgz/mongo\n+\n+services: mongodb\n+\n+before_install:\n+  - cp -rf .vendor vendor\n+  - go get github.com/mattn/goveralls\n+  - go get gopkg.in/alecthomas/gometalinter.v2\n+  - $GOPATH/bin/gometalinter.v2 --install\n+\n+before_script:\n+  - sleep 3\n+\n+script:\n+  - export MONGO_TEST=mongodb://127.0.0.1:27017\n+  - go test ./...\n+  - $GOPATH/bin/gometalinter.v2 --exclude=test --exclude=mock --exclude=vendor ./...\n+  - $GOPATH/bin/goveralls -service=travis-ci"
    },
    {
      "sha": "c836416192da3691281691dfb0d16e177dfd068b",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/davecgh/go-spew/LICENSE",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/davecgh/go-spew/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/davecgh/go-spew/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/davecgh/go-spew/LICENSE?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -0,0 +1,15 @@\n+ISC License\n+\n+Copyright (c) 2012-2016 Dave Collins <dave@davec.name>\n+\n+Permission to use, copy, modify, and distribute this software for any\n+purpose with or without fee is hereby granted, provided that the above\n+copyright notice and this permission notice appear in all copies.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n+WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n+MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n+ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n+ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n+OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
    },
    {
      "sha": "770c7672b45d60108c346c7e979632841380eee3",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/LICENSE",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/LICENSE?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -0,0 +1,25 @@\n+mgo - MongoDB driver for Go\n+\n+Copyright (c) 2010-2013 - Gustavo Niemeyer <gustavo@niemeyer.net>\n+\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met: \n+\n+1. Redistributions of source code must retain the above copyright notice, this\n+   list of conditions and the following disclaimer. \n+2. Redistributions in binary form must reproduce the above copyright notice,\n+   this list of conditions and the following disclaimer in the documentation\n+   and/or other materials provided with the distribution. \n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    {
      "sha": "890326017b85cef1464487d35e9be9248022d196",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/bson/LICENSE",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/bson/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/bson/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/bson/LICENSE?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -0,0 +1,25 @@\n+BSON library for Go\n+\n+Copyright (c) 2010-2012 - Gustavo Niemeyer <gustavo@niemeyer.net>\n+\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met: \n+\n+1. Redistributions of source code must retain the above copyright notice, this\n+   list of conditions and the following disclaimer. \n+2. Redistributions in binary form must reproduce the above copyright notice,\n+   this list of conditions and the following disclaimer in the documentation\n+   and/or other materials provided with the distribution. \n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    {
      "sha": "74487567632c8f137ef3971b0f5912ca50bebcda",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/internal/json/LICENSE",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/internal/json/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/internal/json/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/globalsign/mgo/internal/json/LICENSE?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -0,0 +1,27 @@\n+Copyright (c) 2012 The Go Authors. All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+   * Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+   * Redistributions in binary form must reproduce the above\n+copyright notice, this list of conditions and the following disclaimer\n+in the documentation and/or other materials provided with the\n+distribution.\n+   * Neither the name of Google Inc. nor the names of its\n+contributors may be used to endorse or promote products derived from\n+this software without specific prior written permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    {
      "sha": "c67dad612a3dfca2b84599c640798d7be7d46728",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/pmezard/go-difflib/LICENSE",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/pmezard/go-difflib/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/pmezard/go-difflib/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/pmezard/go-difflib/LICENSE?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -0,0 +1,27 @@\n+Copyright (c) 2013, Patrick Mezard\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    Redistributions in binary form must reproduce the above copyright\n+notice, this list of conditions and the following disclaimer in the\n+documentation and/or other materials provided with the distribution.\n+    The names of its contributors may not be used to endorse or promote\n+products derived from this software without specific prior written\n+permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n+IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n+TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n+PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n+TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    {
      "sha": "473b670a7c6195561168a94337416f32a4db8e73",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/stretchr/testify/LICENSE",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/stretchr/testify/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/stretchr/testify/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/.vendor/github.com/stretchr/testify/LICENSE?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -0,0 +1,22 @@\n+Copyright (c) 2012 - 2013 Mat Ryer and Tyler Bunnell\n+\n+Please consider promoting this project if you find it useful.\n+\n+Permission is hereby granted, free of charge, to any person \n+obtaining a copy of this software and associated documentation \n+files (the \"Software\"), to deal in the Software without restriction, \n+including without limitation the rights to use, copy, modify, merge, \n+publish, distribute, sublicense, and/or sell copies of the Software, \n+and to permit persons to whom the Software is furnished to do so, \n+subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included\n+in all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, \n+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES \n+OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n+DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT \n+OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \n+OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    {
      "sha": "ca1252144e6f66d41b148c46e4e212aa0d3ff265",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/LICENSE",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/LICENSE?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -0,0 +1,21 @@\n+MIT License\n+\n+Copyright (c) 2018 Umputun\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE."
    },
    {
      "sha": "a3cd4c20110b93b2157ace98d258f668e079bb92",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/README.md",
      "status": "added",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/README.md",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/README.md?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -0,0 +1,58 @@\n+# Mongo [![Build Status](https://travis-ci.org/go-pkgz/mongo.svg?branch=master)](https://travis-ci.org/go-pkgz/mongo) [![Go Report Card](https://goreportcard.com/badge/github.com/go-pkgz/mongo)](https://goreportcard.com/report/github.com/go-pkgz/mongo) [![Coverage Status](https://coveralls.io/repos/github/go-pkgz/mongo/badge.svg?branch=master)](https://coveralls.io/github/go-pkgz/mongo?branch=master)\n+\n+Provides helpers on top of [mgo](https://github.com/globalsign/mgo)\n+\n+## Install and update\n+\n+`go get -u github.com/go-pkgz/mongo`\n+\n+\n+## Usage\n+\n+- `Server` represents mongo instance and provides session accessor. Application usually creates one server object and uses it for anything needed with this particular mongo host or replica set.\n+\n+- `Connection` encapsulates session and provides auto-closable wrapper. Each requests runs inside one of With* function makes new mongo session and closes on completion.\n+\n+- `BufferedWriter` implements buffered writer to mongo. Write method caching internally till it reached buffer size. Flush methods can be called manually at any time.\n+\n+\n+```golang\n+    m, err := NewServerWithURL(\"mongodb://127.0.0.1:27017/test?debug=true\", 3*time.Second)\n+    if err != nil {\n+        panic(\"can't make mongo server\")\n+    } \n+    \n+    type testRecord struct {\n+    \tKey1 string\n+    \tKay2 int\n+    }\n+    \n+    err = c.WithCollection(func(coll *mgo.Collection) error { // create session\n+        // insert 100 records\n+        for i := 0; i < 100; i++ {\n+            r := testRecord{\n+                Key1: fmt.Sprintf(\"key-%02d\", i%5),\n+                Key2: i,\n+            }\n+            if e := coll.Insert(r); e != nil {\n+                return e\n+            }\n+        }\n+        return nil\n+    })\n+    \n+```\n+\n+## Dependencies \n+\n+- [globalsign/mgo](https://github.com/globalsign/mgo) - mgo mongo driver\n+- [stretchr/testify/](https://github.com/stretchr/testify) - testing library (test-only dependency)\n+\n+## Testing\n+\n+`testing.go` helps to create test for real mongo (not mocks)\n+\n+- `mongo.MakeTestConnection` creates `mongo.Connection` for url defined in env `MONGO_TEST`. If not defined `mongodb://mongo:27017` used. By default it will use random connection with prefix `test_` in `test` DB.\n+- `mongo.RemoveTestCollection` - drops collection used by `MakeTestConnection`\n+- `mongo.RemoveTestCollections` - drops user-defined collections from `test` DB\n+"
    },
    {
      "sha": "2f5ef87fafb6dc0abbd4f9f24b19beae3d1103ad",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/connection.go",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/connection.go",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/connection.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/connection.go?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -6,7 +6,7 @@ import (\n \t\"github.com/globalsign/mgo\"\n )\n \n-// sessionFn is a function for all With calls, terminator not supported\n+// sessionFn is a function for all With*Collection calls\n type sessionFn func(coll *mgo.Collection) error\n \n // Connection allows to run request in separate session, closing automatically",
      "previous_filename": "backend/app/store/engine/mongo/connection.go"
    },
    {
      "sha": "31d7c0c09e865584473a9b6d0fac8f221d0601d2",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/server.go",
      "status": "renamed",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/server.go",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/server.go?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -1,9 +1,10 @@\n // Package mongo wraps mgo to provide easier way to construct mongo server (with auth).\n-// Connection provides With* func warapers to run query with session copy\n+// Connection provides With* func wrappers to run query with session copy\n package mongo\n \n import (\n \t\"crypto/tls\"\n+\t\"errors\"\n \t\"fmt\"\n \t\"log\"\n \t\"net\"\n@@ -12,7 +13,6 @@ import (\n \t\"time\"\n \n \t\"github.com/globalsign/mgo\"\n-\t\"github.com/pkg/errors\"\n )\n \n // Server represents mongo instance and provides session accessor\n@@ -24,9 +24,9 @@ type Server struct {\n \n // ServerParams optional set of parameters\n type ServerParams struct {\n+\tConsistencyMode mgo.Mode\n \tDelay           int  // initial delay to give mongo server some time to start, in case if mongo part of the same compose\n \tDebug           bool // turn on mgo debug mode\n-\tConsistencyMode mgo.Mode\n \tSSL             bool\n }\n \n@@ -35,14 +35,13 @@ type ServerParams struct {\n func NewServerWithURL(url string, timeout time.Duration) (res *Server, err error) {\n \tdial, params, err := parseURL(url, timeout)\n \tif err != nil {\n-\t\treturn nil, errors.Wrapf(err, \"failed to create mongo server from url %s\", url)\n+\t\treturn nil, fmt.Errorf(\"failed to create mongo server from url %s, %s\", url, err)\n \t}\n \treturn NewServer(dial, params)\n }\n \n // NewServer doing auth if passwd != \"\" and can delay to make sure local mongo is up\n func NewServer(dial mgo.DialInfo, params ServerParams) (res *Server, err error) {\n-\tlog.Printf(\"[INFO] make new mongo server %v with %+v\", dial.Addrs, params)\n \tresult := Server{dial: dial, params: params}\n \n \tif params.Debug {\n@@ -71,9 +70,7 @@ func NewServer(dial mgo.DialInfo, params ServerParams) (res *Server, err error)\n \n \tsession, err := mgo.DialWithInfo(&dial)\n \tif err != nil {\n-\t\terr = fmt.Errorf(\"can't connect to mongo, %v\", err)\n-\t\tlog.Printf(\"[ERROR] %v\", err)\n-\t\treturn nil, err\n+\t\treturn nil, fmt.Errorf(\"can't connect to mongo, %v\", err)\n \t}\n \tsession.SetMode(params.ConsistencyMode, true)\n \tsession.SetSyncTimeout(30 * time.Second)\n@@ -83,8 +80,7 @@ func NewServer(dial mgo.DialInfo, params ServerParams) (res *Server, err error)\n \t\tcreds := &mgo.Credential{Username: dial.Username, Password: dial.Password, Source: dial.Source}\n \t\tlog.Printf(\"[DEBUG] login to mongo, user=%s, db=%s\", creds.Username, creds.Source)\n \t\tif err = session.Login(creds); err != nil {\n-\t\t\tlog.Printf(\"[ERROR] can't login to mongo, %v\", err)\n-\t\t\treturn nil, err\n+\t\t\treturn nil, fmt.Errorf(\"can't login to mongo, %v\", err)\n \t\t}\n \t}\n \n@@ -114,7 +110,7 @@ func parseURL(mongoURL string, connectTimeout time.Duration) (mgo.DialInfo, Serv\n \n \tdial, err := mgo.ParseURL(mongoURL)\n \tif err != nil {\n-\t\treturn mgo.DialInfo{}, ServerParams{}, errors.Wrapf(err, \"failed to pars mongo url %s\", mongoURL)\n+\t\treturn mgo.DialInfo{}, ServerParams{}, fmt.Errorf(\"failed to pars mongo url %s, %s\", mongoURL, err)\n \t}\n \tdial.Timeout = connectTimeout\n \treturn *dial, params, nil",
      "previous_filename": "backend/app/store/engine/mongo/server.go"
    },
    {
      "sha": "d2cce4a94015c30a4f04d8bbc44cf1b8d6073814",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/testing.go",
      "status": "renamed",
      "additions": 16,
      "deletions": 13,
      "changes": 29,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/testing.go",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/testing.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/testing.go?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -9,32 +9,23 @@ import (\n \t\"time\"\n \n \t\"github.com/globalsign/mgo\"\n-\t\"github.com/pkg/errors\"\n+\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n )\n \n var conn *Connection\n var once sync.Once\n \n-// MakeTestConnection connects to MONGO_REMARK_TEST url or \"mongo\" host (in no env) and returns new connection.\n+// MakeTestConnection connects to MONGO_TEST url or \"mongo\" host (in no env) and returns new connection.\n // collection name randomized on each call\n func MakeTestConnection(t *testing.T) (*Connection, error) {\n-\tmongoURL := os.Getenv(\"MONGO_REMARK_TEST\")\n-\tif mongoURL == \"\" {\n-\t\tt.Skip(\"no MONGO_REMARK_TEST in env\")\n-\t\treturn nil, errors.New(\"skip\")\n-\t}\n-\tif mongoURL == \"skip\" {\n-\t\tt.Skip(\"skip mongo test\")\n-\t\treturn nil, errors.New(\"skip\")\n-\t}\n-\n+\tmongoURL := getMongoURL(t)\n \tonce.Do(func() {\n \t\tlog.Print(\"[DEBUG] connect to mongo test instance\")\n \t\tsrv, err := NewServerWithURL(mongoURL, 10*time.Second)\n \t\tassert.Nil(t, err, \"failed to dial\")\n-\t\tcollName := fmt.Sprintf(\"remark42_test_%d\", time.Now().Nanosecond())\n+\t\tcollName := fmt.Sprintf(\"test_%d\", time.Now().Nanosecond())\n \t\tconn = NewConnection(srv, \"test\", collName)\n \t})\n \tRemoveTestCollection(t, conn)\n@@ -71,3 +62,15 @@ func RemoveTestCollections(t *testing.T, c *Connection, collections ...string) {\n \t}\n \n }\n+\n+func getMongoURL(t *testing.T) string {\n+\tmongoURL := os.Getenv(\"MONGO_TEST\")\n+\tif mongoURL == \"\" {\n+\t\tmongoURL = \"mongodb://mongo:27017\"\n+\t\tt.Logf(\"no MONGO_TEST in env, defaulted to %s\", mongoURL)\n+\t}\n+\tif mongoURL == \"skip\" {\n+\t\tt.Skip(\"skip mongo test\")\n+\t}\n+\treturn mongoURL\n+}",
      "previous_filename": "backend/app/store/engine/mongo/testing.go"
    },
    {
      "sha": "722044db5a3acf1fa72eaa105f9b36a4a980b18d",
      "filename": "backend/vendor/github.com/go-pkgz/mongo/writer.go",
      "status": "renamed",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/writer.go",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/backend/vendor/github.com/go-pkgz/mongo/writer.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/mongo/writer.go?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -2,12 +2,12 @@ package mongo\n \n import (\n \t\"context\"\n+\t\"fmt\"\n \t\"log\"\n \t\"sync\"\n \t\"time\"\n \n \t\"github.com/globalsign/mgo\"\n-\t\"github.com/pkg/errors\"\n )\n \n // BufferedWriter defines interface for writes and flush\n@@ -76,7 +76,6 @@ func (bw *BufferedWriterMgo) WithAutoFlush(duration time.Duration) *BufferedWrit\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\tcase <-bw.ctx.Done():\n-\t\t\t\t\t\tlog.Printf(\"[DEBUG] mongo writer flusher terminated\")\n \t\t\t\t\t\treturn\n \t\t\t\t\t}\n \t\t\t\t}\n@@ -92,21 +91,26 @@ func (bw *BufferedWriterMgo) Write(rec interface{}) error {\n \t\tbw.lastWriteTime = time.Now()\n \t\tbw.buffer = append(bw.buffer, rec)\n \t\tif len(bw.buffer) >= bw.bufferSize {\n-\t\t\terr := bw.writeBuffer()\n+\t\t\tif err := bw.writeBuffer(); err != nil {\n+\t\t\t\treturn fmt.Errorf(\"failed to write to %s, %s\", bw.connection, err)\n+\t\t\t}\n \t\t\tbw.buffer = bw.buffer[0:0]\n-\t\t\treturn errors.Wrapf(err, \"failed to write to %s\", bw.connection)\n \t\t}\n \t\treturn nil\n \t})\n }\n \n // Flush writes everything left in buffer to mongo\n func (bw *BufferedWriterMgo) Flush() error {\n-\treturn bw.synced(func() error {\n+\terr := bw.synced(func() error {\n \t\terr := bw.writeBuffer()\n \t\tbw.buffer = bw.buffer[0:0]\n-\t\treturn errors.Wrapf(err, \"failed to flush to %s\", bw.connection)\n+\t\treturn err\n \t})\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"failed to flush to %s, %s\", bw.connection, err)\n+\t}\n+\treturn nil\n }\n \n // Close flushes all in-fly records and terminates background auto-flusher\n@@ -116,7 +120,6 @@ func (bw *BufferedWriterMgo) Close() (err error) {\n \t\tif bw.flushDuration > 0 {\n \t\t\tbw.cancel()\n \t\t\t<-bw.ctx.Done()\n-\t\t\tlog.Printf(\"[DEBUG] mongo buffered writer closed\")\n \t\t}\n \t\treturn err\n \t})",
      "previous_filename": "backend/app/store/engine/mongo/writer.go"
    },
    {
      "sha": "8af2392bae2430e45322bafe84990c13091fe1d2",
      "filename": "compose-dev-backend.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/dbd1d4069f7089e52e234891c22ceacd5eb57c18/compose-dev-backend.yml",
      "raw_url": "https://github.com/umputun/remark/raw/dbd1d4069f7089e52e234891c22ceacd5eb57c18/compose-dev-backend.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/compose-dev-backend.yml?ref=dbd1d4069f7089e52e234891c22ceacd5eb57c18",
      "patch": "@@ -18,7 +18,7 @@ services:\n             dockerfile: Dockerfile\n             args:\n                 - SKIP_FRONTEND_TEST=true\n-                - MONGO_REMARK_TEST=skip # disable mongo tests on build by default. To allow remove =skip part and see above\n+                - MONGO_TEST=skip # disable mongo tests on build by default. To allow remove =skip part and see above\n \n         image: umputun/remark42:dev\n         container_name: \"remark42-dev\""
    }
  ]
}
