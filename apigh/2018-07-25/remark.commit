{
  "sha": "1c97e0d31f0f51b37e00398286ac0789bd8c48db",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjFjOTdlMGQzMWYwZjUxYjM3ZTAwMzk4Mjg2YWMwNzg5YmQ4YzQ4ZGI=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2018-07-25T16:48:57Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2018-07-25T16:48:57Z"
    },
    "message": "add delete avatar and call it from deleteMe controller",
    "tree": {
      "sha": "962a3f0c6f3db12a8764f4798f41b04253762fd6",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/962a3f0c6f3db12a8764f4798f41b04253762fd6"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/1c97e0d31f0f51b37e00398286ac0789bd8c48db",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/1c97e0d31f0f51b37e00398286ac0789bd8c48db",
  "html_url": "https://github.com/umputun/remark/commit/1c97e0d31f0f51b37e00398286ac0789bd8c48db",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/1c97e0d31f0f51b37e00398286ac0789bd8c48db/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5c9d0d611917097f6fe122d174ae7fad5583c17e",
      "url": "https://api.github.com/repos/umputun/remark/commits/5c9d0d611917097f6fe122d174ae7fad5583c17e",
      "html_url": "https://github.com/umputun/remark/commit/5c9d0d611917097f6fe122d174ae7fad5583c17e"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 66,
    "deletions": 2
  },
  "files": [
    {
      "sha": "f979aec34acf4d4136daa6ba2d50fce358177d89",
      "filename": "backend/app/rest/api/admin.go",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark/blob/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/rest/api/admin.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/rest/api/admin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/admin.go?ref=1c97e0d31f0f51b37e00398286ac0789bd8c48db",
      "patch": "@@ -7,11 +7,13 @@ import (\n \t\"io\"\n \t\"log\"\n \t\"net/http\"\n+\t\"path\"\n \t\"time\"\n \n \t\"github.com/go-chi/chi\"\n \t\"github.com/go-chi/render\"\n \t\"github.com/umputun/remark/backend/app/rest/auth\"\n+\t\"github.com/umputun/remark/backend/app/rest/proxy\"\n \n \t\"github.com/umputun/remark/backend/app/migrator\"\n \t\"github.com/umputun/remark/backend/app/rest\"\n@@ -27,6 +29,7 @@ type admin struct {\n \tcache         cache.LoadingCache\n \tauthenticator auth.Authenticator\n \treadOnlyAge   int\n+\tavatarProxy   *proxy.Avatar\n }\n \n func (a *admin) routes(middlewares ...func(http.Handler) http.Handler) chi.Router {\n@@ -118,6 +121,14 @@ func (a *admin) deleteMeRequestCtrl(w http.ResponseWriter, r *http.Request) {\n \t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't delete user\")\n \t\treturn\n \t}\n+\n+\tif claims.User.Picture != \"\" {\n+\t\tif err := a.avatarProxy.Store.Remove(path.Base(claims.User.Picture)); err != nil {\n+\t\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't delete user's avatar\")\n+\t\t\treturn\n+\t\t}\n+\t}\n+\n \ta.cache.Flush(cache.Flusher(claims.SiteID).Scopes(claims.SiteID, claims.User.ID, \"last\"))\n \trender.Status(r, http.StatusOK)\n \trender.JSON(w, r, JSON{\"user_id\": claims.User.ID, \"site_id\": claims.SiteID})"
    },
    {
      "sha": "8b6bd5a1f1acc8bbb808f6e72d89d9d7e5270e9f",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/rest/api/rest.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/rest/api/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest.go?ref=1c97e0d31f0f51b37e00398286ac0789bd8c48db",
      "patch": "@@ -115,6 +115,7 @@ func (s *Rest) routes() chi.Router {\n \t\tcache:         s.Cache,\n \t\tauthenticator: s.Authenticator,\n \t\treadOnlyAge:   s.ReadOnlyAge,\n+\t\tavatarProxy:   s.AvatarProxy,\n \t}\n \n \tipFn := func(ip string) string { return store.HashValue(ip, s.DataService.Secret)[:12] } // logger uses it for anonymization"
    },
    {
      "sha": "f6103f1c5aa44b381f69e1915d62971378de914b",
      "filename": "backend/app/store/avatar/gridfs.go",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark/blob/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/store/avatar/gridfs.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/store/avatar/gridfs.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/gridfs.go?ref=1c97e0d31f0f51b37e00398286ac0789bd8c48db",
      "patch": "@@ -73,11 +73,23 @@ func (gf *GridFS) ID(avatar string) (id string) {\n \t\t\treturn errors.Wrapf(e, \"can't open avatar %s\", avatar)\n \t\t}\n \t\tid = fh.MD5()\n-\t\treturn nil\n+\t\treturn errors.Wrapf(fh.Close(), \"can't close avatar\")\n \t})\n \tif err != nil {\n \t\tlog.Printf(\"[DEBUG] can't get file info '%s', %s\", avatar, err)\n \t\treturn store.EncodeID(avatar)\n \t}\n \treturn id\n }\n+\n+// Remove avatar from gridfs\n+func (gf *GridFS) Remove(avatar string) error {\n+\treturn gf.Connection.WithDB(func(dbase *mgo.Database) error {\n+\t\tfh, e := dbase.GridFS(\"fs\").Open(avatar)\n+\t\tif e != nil {\n+\t\t\treturn errors.Wrapf(e, \"can't get avatar %s\", avatar)\n+\t\t}\n+\t\t_ = fh.Close()\n+\t\treturn dbase.GridFS(\"fs\").Remove(avatar)\n+\t})\n+}"
    },
    {
      "sha": "0ba335f0bbd5d7075386560f0a81f791fb0e04c7",
      "filename": "backend/app/store/avatar/gridfs_test.go",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark/blob/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/store/avatar/gridfs_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/store/avatar/gridfs_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/gridfs_test.go?ref=1c97e0d31f0f51b37e00398286ac0789bd8c48db",
      "patch": "@@ -34,6 +34,21 @@ func TestGridFS_PutAndGet(t *testing.T) {\n \tassert.Equal(t, \"70c881d4a26984ddce795f6f71817c9cf4480e79\", p.ID(\"aaaa\"), \"no data, encode avatar id\")\n }\n \n+func TestGridFS_Remove(t *testing.T) {\n+\tp, skip := prepGFStore(t)\n+\tif skip {\n+\t\treturn\n+\t}\n+\n+\tassert.NotNil(t, p.Remove(\"no-such-thing.image\"))\n+\n+\tavatar, err := p.Put(\"user1\", strings.NewReader(\"some picture bin data\"))\n+\trequire.Nil(t, err)\n+\tassert.Equal(t, \"b3daa77b4c04a9551b8781d03191fe098f325e67.image\", avatar)\n+\tassert.NoError(t, p.Remove(\"b3daa77b4c04a9551b8781d03191fe098f325e67.image\"), \"remove real one\")\n+\tassert.NotNil(t, p.Remove(\"b3daa77b4c04a9551b8781d03191fe098f325e67.image\"), \"already removed\")\n+}\n+\n func prepGFStore(t *testing.T) (Store, bool) {\n \tconn, err := mongo.MakeTestConnection(t)\n \tif err != nil {"
    },
    {
      "sha": "1c077b0f6035ef32a75aae6244218210c333307d",
      "filename": "backend/app/store/avatar/localfs.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark/blob/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/store/avatar/localfs.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/store/avatar/localfs.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/localfs.go?ref=1c97e0d31f0f51b37e00398286ac0789bd8c48db",
      "patch": "@@ -88,6 +88,13 @@ func (fs *LocalFS) ID(avatar string) (id string) {\n \treturn store.EncodeID(avatar + strconv.FormatInt(fi.ModTime().Unix(), 10))\n }\n \n+// Remove avatar file\n+func (fs *LocalFS) Remove(avatar string) error {\n+\tlocation := fs.location(strings.TrimSuffix(avatar, imgSfx))\n+\tavFile := path.Join(location, avatar)\n+\treturn os.Remove(avFile)\n+}\n+\n // get location (directory) for user id by adding partition to final path in order to keep files\n // in different subdirectories and avoid too many files in a single place.\n // the end result is a full path like this - /tmp/avatars.test/92"
    },
    {
      "sha": "51833f3019f19a65679f89691baa2edc9f54f6ac",
      "filename": "backend/app/store/avatar/localfs_test.go",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark/blob/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/store/avatar/localfs_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/store/avatar/localfs_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/localfs_test.go?ref=1c97e0d31f0f51b37e00398286ac0789bd8c48db",
      "patch": "@@ -110,6 +110,22 @@ func TestAvatarStoreFS_ID(t *testing.T) {\n \tassert.Equal(t, \"325d5b451f32c2f8e7f30a9fd65bff6a42954d9a\", id) // store.EncodeID(\"b3daa77b4c04a9551b8781d03191fe098f325e67.image1500000000\")\n }\n \n+func TestAvatarStoreFS_Remove(t *testing.T) {\n+\tp := NewLocalFS(\"/tmp/avatars.test\", 300)\n+\terr := os.MkdirAll(\"/tmp/avatars.test/30\", 0700)\n+\trequire.NoError(t, err)\n+\tdefer os.RemoveAll(\"/tmp/avatars.test\")\n+\n+\tassert.NotNil(t, p.Remove(\"no-such-avatar\"), \"remove non-existing avatar\")\n+\terr = ioutil.WriteFile(\"/tmp/avatars.test/30/b3daa77b4c04a9551b8781d03191fe098f325e67.image\", []byte(\"something\"), 0666)\n+\trequire.NoError(t, err)\n+\n+\tassert.NoError(t, p.Remove(\"b3daa77b4c04a9551b8781d03191fe098f325e67.image\"))\n+\t_, err = os.Stat(\"/tmp/avatars.test/30/b3daa77b4c04a9551b8781d03191fe098f325e67.image\")\n+\tassert.NotNil(t, err, \"removed for real\")\n+\tt.Log(err)\n+}\n+\n func BenchmarkAvatarStoreFS_ID(b *testing.B) {\n \tp := NewLocalFS(\"/tmp/avatars.test\", 300)\n \tos.MkdirAll(\"/tmp/avatars.test/30\", 0700)"
    },
    {
      "sha": "943924051912613dbfe0fccab0980a955e03742c",
      "filename": "backend/app/store/avatar/store.go",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/store/avatar/store.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c97e0d31f0f51b37e00398286ac0789bd8c48db/backend/app/store/avatar/store.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/store.go?ref=1c97e0d31f0f51b37e00398286ac0789bd8c48db",
      "patch": "@@ -22,9 +22,11 @@ const imgSfx = \".image\"\n \n // Store defines interface to store and and load avatars\n type Store interface {\n-\tPut(userID string, reader io.Reader) (avatarID string, err error) // save avatar data from the given reader and return base name\n+\tPut(userID string, reader io.Reader) (avatarID string, err error) // save avatar data from the reader and return base name\n \tGet(avatarID string) (reader io.ReadCloser, size int, err error)  // load avatar via reader\n \tID(avatarID string) (id string)                                   // unique id of stored avatar's data\n+\tRemove(avatarID string) error                                     // remove avatar data\n+\n }\n \n // resize an image of supported format (PNG, JPG, GIF) to the size of \"limit\" px of the biggest side"
    }
  ]
}
