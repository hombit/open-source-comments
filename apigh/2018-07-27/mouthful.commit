{
  "sha": "89ea44b5de0377cc9169e3f6aa370583915ed421",
  "node_id": "MDY6Q29tbWl0MTIwMTkwOTU3Ojg5ZWE0NGI1ZGUwMzc3Y2M5MTY5ZTNmNmFhMzcwNTgzOTE1ZWQ0MjE=",
  "commit": {
    "author": {
      "name": "Viktoras",
      "email": "vkuznecovas@users.noreply.github.com",
      "date": "2018-06-12T15:11:00Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2018-06-12T15:11:00Z"
    },
    "message": "Mouthful spoon (#86)\n\n* moved all the commands under a single cli\r\n\r\n* WIP on commands and their tests\r\n\r\n* updated readmes and goreleaser config\r\n\r\n* main readme updated with spoon",
    "tree": {
      "sha": "28baaad7bc453c615c61b36e57d3394e1096fbe0",
      "url": "https://api.github.com/repos/vkuznecovas/mouthful/git/trees/28baaad7bc453c615c61b36e57d3394e1096fbe0"
    },
    "url": "https://api.github.com/repos/vkuznecovas/mouthful/git/commits/89ea44b5de0377cc9169e3f6aa370583915ed421",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbH+KECRBK7hj4Ov3rIwAAdHIIAD2Jkgb+349bbwyKC8E7Q1T2\ncJjW1cM3DhYGDe3Uihk5pCAPBuKBe02PJLZAVMvC4jF77OOYLBBCJD4eRe7UqGPp\ngUtOITvQYioCH9uUqmaP62pP4lcjO/AsPaBYlaLRX8gfvngFBx0hFiu6S9F6Nmm7\nrm/G6EGtq309GoDbFv46Sw/SggR4eYR7A0UH88p/nzIlru+TRl7LN2DYcipDXfjI\nkIlsnpWvP6tCPPn/3JfZy8XCPSjKXP9Z6cw20/6gbQUWI/36iwk7lknJl+5SjF0e\n5IJHaAMpOJz+9iIBRsvKLXbTNXvuG2vJMByOWszUXHVP7J3Hfc/ITzMhl9wQ3io=\n=Ubgb\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 28baaad7bc453c615c61b36e57d3394e1096fbe0\nparent 8004cea5f64b8edeb963dcfa76c148a426f608e9\nauthor Viktoras <vkuznecovas@users.noreply.github.com> 1528816260 +0300\ncommitter GitHub <noreply@github.com> 1528816260 +0300\n\nMouthful spoon (#86)\n\n* moved all the commands under a single cli\r\n\r\n* WIP on commands and their tests\r\n\r\n* updated readmes and goreleaser config\r\n\r\n* main readme updated with spoon\r\n"
    }
  },
  "url": "https://api.github.com/repos/vkuznecovas/mouthful/commits/89ea44b5de0377cc9169e3f6aa370583915ed421",
  "html_url": "https://github.com/vkuznecovas/mouthful/commit/89ea44b5de0377cc9169e3f6aa370583915ed421",
  "comments_url": "https://api.github.com/repos/vkuznecovas/mouthful/commits/89ea44b5de0377cc9169e3f6aa370583915ed421/comments",
  "author": {
    "login": "vkuznecovas",
    "id": 18392269,
    "node_id": "MDQ6VXNlcjE4MzkyMjY5",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18392269?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vkuznecovas",
    "html_url": "https://github.com/vkuznecovas",
    "followers_url": "https://api.github.com/users/vkuznecovas/followers",
    "following_url": "https://api.github.com/users/vkuznecovas/following{/other_user}",
    "gists_url": "https://api.github.com/users/vkuznecovas/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vkuznecovas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vkuznecovas/subscriptions",
    "organizations_url": "https://api.github.com/users/vkuznecovas/orgs",
    "repos_url": "https://api.github.com/users/vkuznecovas/repos",
    "events_url": "https://api.github.com/users/vkuznecovas/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vkuznecovas/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "url": "https://api.github.com/repos/vkuznecovas/mouthful/commits/8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "html_url": "https://github.com/vkuznecovas/mouthful/commit/8004cea5f64b8edeb963dcfa76c148a426f608e9"
    }
  ],
  "stats": {
    "total": 683,
    "additions": 418,
    "deletions": 265
  },
  "files": [
    {
      "sha": "540257774ce374c5a713353372ec4e9277903f64",
      "filename": ".goreleaser.yml",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/.goreleaser.yml",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/.goreleaser.yml",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/.goreleaser.yml?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -19,8 +19,23 @@ builds:\n       - windows\n     goarch:\n       - amd64\n+  - main: ./cmd/spoon/main.go\n+    binary: spoon\n+    goos:\n+      - linux\n+    goarch:\n+      - amd64\n     hooks:\n       pre: ./goreleaser-pre.sh\n+  - main: ./cmd/spoon/main.go\n+    env:\n+      - CGO_ENABLED=1\n+      - CC=x86_64-w64-mingw32-gcc\n+    binary: spoon\n+    goos:\n+      - windows\n+    goarch:\n+      - amd64\n # Archive customization\n archive:\n   format: tar.gz"
    },
    {
      "sha": "c25532d0cd93860852c7ce7c98b183e0bfe26a24",
      "filename": ".travis.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/.travis.yml",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/.travis.yml",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/.travis.yml?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -31,8 +31,7 @@ install:\n script: \n   - ./test.sh\n   - go build main.go\n-  - go build cmd/migration/isso/main.go\n-  - go build cmd/migration/dynamodb/main.go\n+  - go build cmd/spoon/main.go\n   - (cd admin && npm run build)\n   - (cd client && npm run build)\n after_success:"
    },
    {
      "sha": "982b75877071597254a1cbdd0dbd6aa1b2fc716b",
      "filename": "README.md",
      "status": "modified",
      "additions": 13,
      "deletions": 9,
      "changes": 22,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/README.md",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/README.md",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/README.md?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -25,8 +25,9 @@ There's a demo hosted at [mouthful.dizzy.zone](https://mouthful.dizzy.zone). Che\n     * [Config file from Docker image](#config-file-from-docker)\n     * [Nginx configuration](#nginx-config)\n     * [Periodic cleanup](#periodic-cleanup)\n-* [Migrations](#migrations)\n-* [Backups and import](#backups-and-import)\n+* [Spoon](#spoon)\n+    * [Migrations](#migrations)\n+    * [Backups and import](#backups-and-import)\n * [Contributing](#contributing)\n * [Wish list](#wish-list)\n * [Get in touch](#get-in-touch)\n@@ -246,18 +247,21 @@ This is caused by mouthful using static assets and not serving any HTML itself.\n \n Mouthful allows for periodic cleanup of non-confirmed and soft-deleted comments. It's fully configurable under the moderation section of the config. For more on that, head to the [config documentation](./examples/configs/README.md#oauth-providers).\n \n-# Migrations\n+# Spoon\n \n-Mouthful supports migrating existing data from the following commenting engines:\n-* [Isso](./cmd/migration/isso/README.md)\n-* [Disqus](./cmd/migration/disqus/README.md)\n+Mouthful comes with a helper cli tool, called spoon. Spoon allows for data export and import, as well as migrations between databases and even different comment providers. [Head over to spoon documentation for examples.](./cmd/spoon/README.md)\n \n-Click on them to read the documentation on how that is done.\n+## Migrations\n \n-# Backups and import\n+Spoon supports migrating existing data from the following commenting engines:\n+* Isso\n+* Disqus\n \n-Mouthful allows for easy comment dumping and import of existing dumps. There's an [import tool]((./cmd/backup/import/README.md)) and an [export tool]((./cmd/backup/export/README.md)) you can use to do that. (They will be merged under one roof, some day.) \n+[Head over to spoon documentation for examples.](./cmd/spoon/README.md)\n \n+## Backups and import\n+\n+Spoon allows for easy comment dumping and import of existing dumps. [Head over to spoon documentation for examples.](./cmd/spoon/README.md)\n \n # Contributing\n "
    },
    {
      "sha": "7c3855894ba21731f3455b7fd288d50d429bd773",
      "filename": "cmd/backup/export/.gitignore",
      "status": "removed",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/export/.gitignore",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/export/.gitignore",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/backup/export/.gitignore?ref=8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "patch": "@@ -1,2 +0,0 @@\n-config.json\n-mouthful.dmp\n\\ No newline at end of file"
    },
    {
      "sha": "2562db55d07da1cb584a30a24ff663986f7c3527",
      "filename": "cmd/backup/export/README.md",
      "status": "removed",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/export/README.md",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/export/README.md",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/backup/export/README.md?ref=8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "patch": "@@ -1,9 +0,0 @@\n-# Mouthful export tool\n-\n-This tool is used to connect to the database you're running, and dump all the comments and threads to a dump file. \n-\n-These can then be archive and reimported.\n-\n-## Usage \n-\n-Simply run the main.go providing the path to mouthful config as a command line argument like so: `go run main.go ./config.json`. This will create a `mouthful.dmp` file in the current directory with a dump of all the threads and comments."
    },
    {
      "sha": "3e1e8b03c0446b12daaf5c66c146b1b31627fbe1",
      "filename": "cmd/backup/export/main.go",
      "status": "removed",
      "additions": 0,
      "deletions": 52,
      "changes": 52,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/export/main.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/export/main.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/backup/export/main.go?ref=8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "patch": "@@ -1,52 +0,0 @@\n-package main\n-\n-import (\n-\t\"errors\"\n-\t\"fmt\"\n-\t\"io/ioutil\"\n-\t\"log\"\n-\t\"os\"\n-\n-\t\"github.com/vkuznecovas/mouthful/db/tool\"\n-\n-\t\"github.com/vkuznecovas/mouthful/config\"\n-\t\"github.com/vkuznecovas/mouthful/db\"\n-)\n-\n-func main() {\n-\targsWithoutProg := os.Args[1:]\n-\tif len(argsWithoutProg) == 0 {\n-\t\tpanic(errors.New(\"Please provide a config filename\"))\n-\t}\n-\t// read config.json\n-\tif _, err := os.Stat(argsWithoutProg[0]); os.IsNotExist(err) {\n-\t\tfmt.Fprintln(os.Stderr, \"Couldn't find config file:\", argsWithoutProg[0])\n-\t\tos.Exit(1)\n-\t}\n-\n-\tcontents, err := ioutil.ReadFile(argsWithoutProg[0])\n-\tif err != nil {\n-\t\tfmt.Fprintln(os.Stderr, \"Couldn't read the config file\")\n-\t\tpanic(err)\n-\t}\n-\n-\t// unmarshal config\n-\tconfig, err := config.ParseConfig(contents)\n-\tif err != nil {\n-\t\tfmt.Fprintln(os.Stderr, \"Couldn't parse the config file\")\n-\t\tpanic(err)\n-\t}\n-\n-\t// set up db according to config\n-\tdatabase, err := db.GetDBInstance(config.Database)\n-\tif err != nil {\n-\t\tpanic(err)\n-\t}\n-\n-\terr = tool.ExportData(\"./mouthful.dmp\", database.GetAllThreads, database.GetAllComments)\n-\tif err != nil {\n-\t\tpanic(err)\n-\t}\n-\n-\tlog.Println(\"Done!\")\n-}"
    },
    {
      "sha": "dede92aec7acfd5a40185c5b7aaa9de26675ef49",
      "filename": "cmd/backup/import/.gitignore",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/import/.gitignore",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/import/.gitignore",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/backup/import/.gitignore?ref=8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "patch": "@@ -1,3 +0,0 @@\n-config.json\n-mouthful.dmp\n-test.db\n\\ No newline at end of file"
    },
    {
      "sha": "c430f069b1a7c501eebda316e88606d92c1e7b6b",
      "filename": "cmd/backup/import/README.md",
      "status": "removed",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/import/README.md",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/import/README.md",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/backup/import/README.md?ref=8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "patch": "@@ -1,7 +0,0 @@\n-# Mouthful import tool\n-\n-This tool is used to connect to the database you're running, and import a previous dump to it. It does a stupid insert, so not a good fit for merging with existing data.\n-\n-## Usage \n-\n-Simply run the main.go providing the path to mouthful config and the path to the existing dump as a command line argument like so: `go run main.go ./config.json ./mouthful.dmp`. This will then insert all the threads and comments to the database pointed at by the `config.json`."
    },
    {
      "sha": "a78da22711de9c3e7f104b25946de0fc488cca2b",
      "filename": "cmd/backup/import/main.go",
      "status": "removed",
      "additions": 0,
      "deletions": 57,
      "changes": 57,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/import/main.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/backup/import/main.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/backup/import/main.go?ref=8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "patch": "@@ -1,57 +0,0 @@\n-package main\n-\n-import (\n-\t\"errors\"\n-\t\"fmt\"\n-\t\"io/ioutil\"\n-\t\"log\"\n-\t\"os\"\n-\n-\t\"github.com/vkuznecovas/mouthful/config\"\n-\t\"github.com/vkuznecovas/mouthful/db\"\n-)\n-\n-func main() {\n-\targsWithoutProg := os.Args[1:]\n-\tif len(argsWithoutProg) != 2 {\n-\t\tpanic(errors.New(\"Please provide a config filename and a dump filename\"))\n-\t}\n-\n-\t// read config.json\n-\tif _, err := os.Stat(argsWithoutProg[0]); os.IsNotExist(err) {\n-\t\tfmt.Fprintln(os.Stderr, \"Couldn't find config file:\", argsWithoutProg[0])\n-\t\tos.Exit(1)\n-\t}\n-\n-\t// read dump\n-\tif _, err := os.Stat(argsWithoutProg[1]); os.IsNotExist(err) {\n-\t\tfmt.Fprintln(os.Stderr, \"Couldn't find dump file:\", argsWithoutProg[1])\n-\t\tos.Exit(1)\n-\t}\n-\n-\tcontents, err := ioutil.ReadFile(argsWithoutProg[0])\n-\tif err != nil {\n-\t\tfmt.Fprintln(os.Stderr, \"Couldn't read the config file\")\n-\t\tpanic(err)\n-\t}\n-\n-\t// unmarshal config\n-\tconfig, err := config.ParseConfig(contents)\n-\tif err != nil {\n-\t\tfmt.Fprintln(os.Stderr, \"Couldn't parse the config file\")\n-\t\tpanic(err)\n-\t}\n-\n-\t// set up db according to config\n-\tdatabase, err := db.GetDBInstance(config.Database)\n-\tif err != nil {\n-\t\tpanic(err)\n-\t}\n-\tlog.Println(argsWithoutProg[1])\n-\terr = database.ImportData(argsWithoutProg[1])\n-\tif err != nil {\n-\t\tpanic(err)\n-\t}\n-\n-\tlog.Println(\"Done!\")\n-}"
    },
    {
      "sha": "699d18433a05ce6521521159c3f5af1afd282852",
      "filename": "cmd/migration/README.md",
      "status": "removed",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/migration/README.md",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/migration/README.md",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/migration/README.md?ref=8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "patch": "@@ -1,7 +0,0 @@\n-# Migrations\n-\n-Mouthful comes with a couple of handy migration tools. These allow for seemless data migration from other commenting engines into mouthful, or between the various mouthful data stores.\n-\n-Currently supported tools:\n-* [Isso to moutful migration](./isso/README.md)\n-* [Mouthful sqlite to moutful dynamodb migration](./dynamodb/README.md)\n\\ No newline at end of file"
    },
    {
      "sha": "b5e36ed2ac3672690fc4b192c896734e9d5b4062",
      "filename": "cmd/migration/disqus/README.md",
      "status": "removed",
      "additions": 0,
      "deletions": 13,
      "changes": 13,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/migration/disqus/README.md",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/migration/disqus/README.md",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/migration/disqus/README.md?ref=8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "patch": "@@ -1,13 +0,0 @@\n-# Migration tool from disqus xml to mouthful sqlite\n-\n-This tool will migrate all the threads and comments from disqus xml dump to mouthful sqlite.\n-\n-## Usage\n-\n-Simply run the main.go, providing 1 argument: path to disqus xml dump file\n-\n-`go run main.go ./disqus.xml`\n-\n-This will create a mouthful.db file in the current directory as output\n-\n-> special thanks to Reddit user [doenietzomoeilijk](https://www.reddit.com/user/doenietzomoeilijk) for providing the dump to make this possible"
    },
    {
      "sha": "75e5e1f4253a9d3b9ecee996bc3fe31be924aefe",
      "filename": "cmd/migration/dynamodb/README.md",
      "status": "removed",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/migration/dynamodb/README.md",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/migration/dynamodb/README.md",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/migration/dynamodb/README.md?ref=8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "patch": "@@ -1,11 +0,0 @@\n-# Migration tool from mouthful sqlite to mouthful dynamodb\n-\n-This tool will migrate all the threads and comments from mouthful sqlite to mouthful dynamodb.\n-\n-## Usage\n-\n-Simply run the main.go, providing 2 arguments: path to sqlite mouthful database and path to mouthful config.json containing all the required settings for dynamodb.\n-\n-`go run main.go ./mouthful.db ./config.json`\n-\n-For example configs, please refer to [the configuration guide](../../../examples/configs/README.md)\n\\ No newline at end of file"
    },
    {
      "sha": "20d55fdbe67216524d4a7302cf0424b338c3dc99",
      "filename": "cmd/migration/isso/README.md",
      "status": "removed",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/migration/isso/README.md",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/8004cea5f64b8edeb963dcfa76c148a426f608e9/cmd/migration/isso/README.md",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/migration/isso/README.md?ref=8004cea5f64b8edeb963dcfa76c148a426f608e9",
      "patch": "@@ -1,9 +0,0 @@\n-# Migration tool from isso sqlite to mouthful sqlite\n-\n-This tool will migrate all the threads and comments from isso sqlite to mouthful sqlite.\n-\n-## Usage\n-\n-Simply run the main.go, providing 1 argument: path to isso sqlite databse file\n-\n-`go run main.go ./isso.db`\n\\ No newline at end of file"
    },
    {
      "sha": "7bf202cdbe31321013fa8eb9e87408e3c5b2b8cf",
      "filename": "cmd/spoon/README.md",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/README.md",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/README.md",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/spoon/README.md?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -0,0 +1,22 @@\n+# Introducing mouthful-spoon\n+\n+Spoon is the cli helper for mouthful, allowing for migration from other commenting engines, database backups and migrations.\n+\n+# Here are a few examples of working with spoon\n+\n+To import comments from disqus to mouthful:\n+`spoon migrate disqus --dump ./disqus.xml`\n+\n+> special thanks to Reddit user [doenietzomoeilijk](https://www.reddit.com/user/doenietzomoeilijk) for providing the dump to make this possible\n+\n+To import comments from sqlite to dynamodb:\n+`spoon migrate dynamodb --sqlite ./mouthful.db ./config.json`\n+\n+To import comments from isso to mouthful:\n+`spoon migrate isso --isso ./isso.db`\n+\n+To export comments from mouthful:\n+`spoon export --c ./config.json`\n+\n+To restore a previous dump to mouthful:\n+`spoon export --c ./config.json --dump ./mouthful.dmp`"
    },
    {
      "sha": "588378547c0805049f77187ede9a8453b84d904d",
      "filename": "cmd/spoon/command/disqus.go",
      "status": "renamed",
      "additions": 18,
      "deletions": 22,
      "changes": 40,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/disqus.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/disqus.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/spoon/command/disqus.go?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -1,25 +1,22 @@\n-package main\n+package command\n \n import (\n \t\"encoding/xml\"\n-\t\"errors\"\n \t\"fmt\"\n \t\"io/ioutil\"\n \t\"net/url\"\n-\t\"os\"\n \t\"time\"\n \n-\t\"github.com/vkuznecovas/mouthful/global\"\n-\n \tuuid \"github.com/satori/go.uuid\"\n-\t\"github.com/vkuznecovas/mouthful/api\"\n+\t\"github.com/urfave/cli\"\n \tconfigModel \"github.com/vkuznecovas/mouthful/config/model\"\n-\t\"github.com/vkuznecovas/mouthful/db\"\n \tdbModel \"github.com/vkuznecovas/mouthful/db/model\"\n \n+\t\"github.com/vkuznecovas/mouthful/api\"\n+\t\"github.com/vkuznecovas/mouthful/cmd/spoon/command/model\"\n+\t\"github.com/vkuznecovas/mouthful/db\"\n \t\"github.com/vkuznecovas/mouthful/db/sqlxDriver\"\n-\n-\t\"github.com/vkuznecovas/mouthful/cmd/migration/disqus/model\"\n+\t\"github.com/vkuznecovas/mouthful/global\"\n )\n \n type cpm struct {\n@@ -118,13 +115,10 @@ func insertComment(comment *model.Cpost, comments *[]*model.Cpost, threads *[]*m\n \treturn nil\n }\n \n-func main() {\n-\targsWithoutProg := os.Args[1:]\n-\tif len(argsWithoutProg) == 0 {\n-\t\tpanic(errors.New(\"Please provide a source database filename\"))\n-\t}\n+// DisqusMigrationRun migrates the provided disqus dump to a sqlite instance of mouthful\n+func DisqusMigrationRun(disqusDumpPath string) error {\n \t// read disqus.xml\n-\tcontents, err := ioutil.ReadFile(argsWithoutProg[0])\n+\tcontents, err := ioutil.ReadFile(disqusDumpPath)\n \tif err != nil {\n \t\tpanic(err)\n \t}\n@@ -135,17 +129,17 @@ func main() {\n \t\tDatabase: &dbFile,\n \t\tDialect:  \"sqlite3\",\n \t})\n-\tst := mouthfulDB.GetUnderlyingStruct()\n-\tdriverCasted := st.(*sqlxDriver.Database)\n-\n \tif err != nil {\n-\t\tpanic(err)\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't create a new database %v\", err.Error()), 1)\n \t}\n \n+\tst := mouthfulDB.GetUnderlyingStruct()\n+\tdriverCasted := st.(*sqlxDriver.Database)\n+\n \tvar dis model.Cdisqus\n \terr = xml.Unmarshal([]byte(contents), &dis)\n \tif err != nil {\n-\t\tpanic(err)\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't unmarshal disqus dump %v\", err.Error()), 1)\n \t}\n \n \t// first we form a map for comments, we'll need this to get their parent\n@@ -164,14 +158,16 @@ func main() {\n \tfor _, v := range dis.Cpost {\n \t\terr = insertComment(v, &dis.Cpost, &dis.Cthread, *driverCasted)\n \t\tif err != nil {\n-\t\t\tpanic(err)\n+\t\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't insert disqus comment id: %v \\n, Error: %v\", *v.Cid, err.Error()), 1)\n \t\t}\n \t}\n \n \tfor _, v := range toDelete {\n \t\terr = driverCasted.DeleteComment(v)\n \t\tif err != nil {\n-\t\t\tpanic(err)\n+\t\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't delete comment with id: %v \\n, Error: %v\", v, err.Error()), 1)\n \t\t}\n \t}\n+\n+\treturn nil\n }",
      "previous_filename": "cmd/migration/disqus/main.go"
    },
    {
      "sha": "cc96a20b8df9fb6933ab3f2cb9acc9e320324337",
      "filename": "cmd/spoon/command/dynamo.go",
      "status": "renamed",
      "additions": 20,
      "deletions": 29,
      "changes": 49,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/dynamo.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/dynamo.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/spoon/command/dynamo.go?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -1,67 +1,58 @@\n-// This is the entry point for mouthful sqlite to mouthful dynamodb migration\n-//\n-// Upon providing a mouthful database file and a dynamodb-compliant configuration file the command will migrate existing comments to dynamodb.\n-package main\n+package command\n \n import (\n-\t\"errors\"\n+\t\"fmt\"\n \t\"io/ioutil\"\n \t\"log\"\n-\t\"os\"\n-\n-\t\"github.com/vkuznecovas/mouthful/config\"\n-\t\"github.com/vkuznecovas/mouthful/global\"\n \n \t\"github.com/jmoiron/sqlx\"\n-\t_ \"github.com/mattn/go-sqlite3\"\n+\t\"github.com/urfave/cli\"\n+\t\"github.com/vkuznecovas/mouthful/config\"\n \t\"github.com/vkuznecovas/mouthful/db/dynamodb\"\n \tdynamoModel \"github.com/vkuznecovas/mouthful/db/dynamodb/model\"\n-\n \t\"github.com/vkuznecovas/mouthful/db/model\"\n+\t\"github.com/vkuznecovas/mouthful/global\"\n )\n \n-func main() {\n-\targsWithoutProg := os.Args[1:]\n-\tif len(argsWithoutProg) == 0 {\n-\t\tpanic(errors.New(\"Please provide a source database filename\"))\n-\t}\n-\tmouthDB, err := sqlx.Connect(\"sqlite3\", argsWithoutProg[0])\n+// DynamoCommandRun will migrate all the threads and comments from mouthful sqlite to mouthful dynamodb.\n+func DynamoCommandRun(sqlitePath, configPath string) error {\n+\tmouthDB, err := sqlx.Connect(\"sqlite3\", sqlitePath)\n \tif err != nil {\n-\t\tpanic(err)\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't connect to sqlite instance %v \\n Error: %v \", sqlitePath, err.Error()), 1)\n \t}\n \n \t// read config.json\n-\tcontents, err := ioutil.ReadFile(argsWithoutProg[1])\n+\tcontents, err := ioutil.ReadFile(configPath)\n \tif err != nil {\n-\t\tpanic(err)\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't read config %v \\n Error: %v \", configPath, err.Error()), 1)\n \t}\n \n \t// unmarshal config\n \tconfig, err := config.ParseConfig(contents)\n \tif err != nil {\n-\t\tpanic(err)\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't parse config %v \\n Error: %v \", configPath, err.Error()), 1)\n \t}\n \n \tdynamoDb, err := dynamodb.CreateDatabase(config.Database)\n \tif err != nil {\n-\t\tpanic(err)\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't create dynamodb %v \", err.Error()), 1)\n \t}\n \terr = dynamoDb.InitializeDatabase()\n \tif err != nil {\n-\t\tpanic(err)\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't initialize dynamodb %v \", err.Error()), 1)\n \t}\n \n \tplainDynamoDriver := dynamoDb.GetUnderlyingStruct().(*dynamodb.Database)\n \tthreads, err := mouthDB.Queryx(mouthDB.Rebind(\"select * from thread\"))\n \tif err != nil {\n-\t\tpanic(err)\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't get sqlx threads %v \", err.Error()), 1)\n \t}\n \tlog.Println(\"Migration started\")\n \tfor threads.Next() {\n \t\tvar t model.Thread\n \t\terr = threads.StructScan(&t)\n \t\tif err != nil {\n-\t\t\tpanic(err)\n+\t\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't get thread %v \\n Error: %v\", t, err.Error()), 1)\n \t\t}\n \t\tlog.Println(\"Migrating thread \" + t.Path)\n \t\tthreadToInsert := dynamoModel.Thread{\n@@ -73,14 +64,14 @@ func main() {\n \t\t\tTable(plainDynamoDriver.TablePrefix + global.DefaultDynamoDbThreadTableName).\n \t\t\tPut(threadToInsert).Run()\n \t\tif err != nil {\n-\t\t\tpanic(err)\n+\t\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't insert thread to dynamodb %v \\n Error: %v\", threadToInsert, err.Error()), 1)\n \t\t}\n \t\tcomments, err := mouthDB.Queryx(mouthDB.Rebind(\"select * from comment where ThreadId = ? order by createdAt asc\"), t.Id)\n \t\tfor comments.Next() {\n \t\t\tvar c model.Comment\n \t\t\terr = comments.StructScan(&c)\n \t\t\tif err != nil {\n-\t\t\t\tpanic(err)\n+\t\t\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't read sqlite comment %v \\n Error: %v\", c, err.Error()), 1)\n \t\t\t}\n \t\t\tvar deletedAt *int64\n \t\t\tif c.DeletedAt != nil {\n@@ -107,12 +98,12 @@ func main() {\n \t\t\t\tTable(plainDynamoDriver.TablePrefix + global.DefaultDynamoDbCommentTableName).\n \t\t\t\tPut(commentToInsert).Run()\n \t\t\tif err != nil {\n-\t\t\t\tpanic(err)\n+\t\t\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't insert dynamodbComment comment %v \\n Error: %v\", commentToInsert, err.Error()), 1)\n \t\t\t}\n \t\t\tlog.Printf(\"Comment %v migrated!\\n\", c.Id)\n \t\t}\n \t\tlog.Printf(\"Thread %v migrated!\\n\", t.Path)\n \t}\n \tlog.Println(\"Migration done!\")\n-\n+\treturn nil\n }",
      "previous_filename": "cmd/migration/dynamodb/main.go"
    },
    {
      "sha": "90ee09a2a59440fde2aee12e62527099d89aeb16",
      "filename": "cmd/spoon/command/dynamo_test.go",
      "status": "added",
      "additions": 74,
      "deletions": 0,
      "changes": 74,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/dynamo_test.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/dynamo_test.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/spoon/command/dynamo_test.go?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -0,0 +1,74 @@\n+package command_test\n+\n+import (\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"testing\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+\n+\t\"github.com/vkuznecovas/mouthful/cmd/spoon/command\"\n+\t\"github.com/vkuznecovas/mouthful/config/model\"\n+\t\"github.com/vkuznecovas/mouthful/db/sqlxDriver\"\n+\t\"github.com/vkuznecovas/mouthful/db/sqlxDriver/sqlite\"\n+)\n+\n+func TestDynamoImport(t *testing.T) {\n+\tsqlitePath := \"./mouthful_test_db\"\n+\tsqliteCfg := model.Config{\n+\t\tDatabase: model.Database{\n+\t\t\tDialect:  \"sqlite3\",\n+\t\t\tDatabase: &sqlitePath,\n+\t\t},\n+\t}\n+\n+\tsqliteDb, err := sqlite.CreateDatabase(sqliteCfg.Database)\n+\tassert.Nil(t, err)\n+\tdefer func() { os.Remove(sqlitePath) }()\n+\tcid, err := sqliteDb.CreateComment(\"test\", \"test\", \"/test\", true, nil)\n+\tassert.Nil(t, err)\n+\tcid, err = sqliteDb.CreateComment(\"test\", \"test\", \"/test\", true, cid)\n+\tassert.Nil(t, err)\n+\tcid, err = sqliteDb.CreateComment(\"test\", \"test\", \"/testasdasd\", true, nil)\n+\tassert.Nil(t, err)\n+\n+\tcid, err = sqliteDb.CreateComment(\"test\", \"test\", \"/testasasdasddasd\", true, nil)\n+\tassert.Nil(t, err)\n+\n+\terr = sqliteDb.DeleteComment(*cid)\n+\tassert.Nil(t, err)\n+\n+\tstr := sqliteDb.GetUnderlyingStruct()\n+\tstrCasted := str.(*sqlxDriver.Database)\n+\terr = strCasted.DB.Close()\n+\tassert.Nil(t, err)\n+\twu := int64(1)\n+\ttest := \"test\"\n+\tregion := \"eu-west-1\"\n+\tendpoint := \"http://localhost:8000\"\n+\tdynamoDbConfig := model.Config{\n+\t\tDatabase: model.Database{\n+\t\t\tDialect:                   \"dynamodb\",\n+\t\t\tDynamoDBThreadReadUnits:   &wu,\n+\t\t\tDynamoDBCommentReadUnits:  &wu,\n+\t\t\tDynamoDBThreadWriteUnits:  &wu,\n+\t\t\tDynamoDBCommentWriteUnits: &wu,\n+\t\t\tDynamoDBIndexWriteUnits:   &wu,\n+\t\t\tDynamoDBIndexReadUnits:    &wu,\n+\t\t\tAwsRegion:                 &region,\n+\t\t\tAwsAccessKeyID:            &test,\n+\t\t\tAwsSecretAccessKey:        &test,\n+\t\t\tDynamoDBEndpoint:          &endpoint,\n+\t\t},\n+\t}\n+\tres, err := json.Marshal(dynamoDbConfig)\n+\tassert.Nil(t, err)\n+\ttestFile := \"./test-file\"\n+\terr = ioutil.WriteFile(testFile, res, 0644)\n+\tassert.Nil(t, err)\n+\tdefer func() { os.Remove(testFile) }()\n+\n+\terr = command.DynamoCommandRun(sqlitePath, testFile)\n+\tassert.Nil(t, err)\n+}"
    },
    {
      "sha": "066591997980fc84c61e91ff685ae8a9c7d58e48",
      "filename": "cmd/spoon/command/export.go",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/export.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/export.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/spoon/command/export.go?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -0,0 +1,45 @@\n+// Package command contains all the spoon commands\n+package command\n+\n+import (\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"os\"\n+\n+\t\"github.com/urfave/cli\"\n+\t\"github.com/vkuznecovas/mouthful/config\"\n+\t\"github.com/vkuznecovas/mouthful/db\"\n+\t\"github.com/vkuznecovas/mouthful/db/tool\"\n+)\n+\n+// ExportCommandRun exports the database to mouthful format\n+func ExportCommandRun(configPath string) error {\n+\tif _, err := os.Stat(configPath); os.IsNotExist(err) {\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't find config file %v\", configPath), 1)\n+\t}\n+\tcontents, err := ioutil.ReadFile(configPath)\n+\tif err != nil {\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't read config file %v\", configPath), 1)\n+\t}\n+\n+\t// unmarshal config\n+\tconfig, err := config.ParseConfig(contents)\n+\tif err != nil {\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't parse the config file %v\", configPath), 1)\n+\t}\n+\n+\t// set up db according to config\n+\tdatabase, err := db.GetDBInstance(config.Database)\n+\tif err != nil {\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't connect to the database %v\", err.Error()), 1)\n+\t}\n+\n+\terr = tool.ExportData(\"./mouthful.dmp\", database.GetAllThreads, database.GetAllComments)\n+\tif err != nil {\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't export data %v\", err.Error()), 1)\n+\t}\n+\n+\tlog.Println(\"Dump done!\")\n+\treturn nil\n+}"
    },
    {
      "sha": "dc798aa0d8074a7571d61e8f43093b46e6bfbba4",
      "filename": "cmd/spoon/command/import.go",
      "status": "added",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/import.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/import.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/spoon/command/import.go?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -0,0 +1,50 @@\n+package command\n+\n+import (\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"os\"\n+\n+\t\"github.com/urfave/cli\"\n+\t\"github.com/vkuznecovas/mouthful/config\"\n+\t\"github.com/vkuznecovas/mouthful/db\"\n+)\n+\n+// ImportCommandRun imports the provided dump to the database pointed at by config.json\n+func ImportCommandRun(configPath, dumpPath string) error {\n+\t// read config.json\n+\tif _, err := os.Stat(configPath); os.IsNotExist(err) {\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't find config file %v\", configPath), 1)\n+\t}\n+\n+\t// read dump\n+\tif _, err := os.Stat(dumpPath); os.IsNotExist(err) {\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't find dump file %v\", dumpPath), 1)\n+\t}\n+\n+\tcontents, err := ioutil.ReadFile(configPath)\n+\tif err != nil {\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't read config file %v\", configPath), 1)\n+\t}\n+\n+\t// unmarshal config\n+\tconfig, err := config.ParseConfig(contents)\n+\tif err != nil {\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't parse the config file %v\", err.Error()), 1)\n+\t}\n+\n+\t// set up db according to config\n+\tdatabase, err := db.GetDBInstance(config.Database)\n+\tif err != nil {\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't connect to the database %v\", err.Error()), 1)\n+\t}\n+\n+\terr = database.ImportData(dumpPath)\n+\tif err != nil {\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't import data to the database %v\", err.Error()), 1)\n+\t}\n+\n+\tlog.Println(\"Done!\")\n+\treturn nil\n+}"
    },
    {
      "sha": "14aa3e5278d41c02cb9ab7daa800ab2ee47fa7a0",
      "filename": "cmd/spoon/command/isso.go",
      "status": "renamed",
      "additions": 21,
      "deletions": 30,
      "changes": 51,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/isso.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/isso.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/spoon/command/isso.go?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -1,78 +1,69 @@\n-// This is the entry point for isso to mouthful migration\n-//\n-// Upon providing an isso database file the command will spit out a mouthful equivalent.\n-package main\n+package command\n \n import (\n-\t\"errors\"\n+\t\"fmt\"\n \t\"log\"\n \t\"math\"\n-\t\"os\"\n \t\"time\"\n \n-\t\"github.com/satori/go.uuid\"\n-\n-\t\"github.com/vkuznecovas/mouthful/api\"\n-\t\"github.com/vkuznecovas/mouthful/global\"\n-\n \t\"github.com/jmoiron/sqlx\"\n-\t_ \"github.com/mattn/go-sqlite3\"\n-\t\"github.com/vkuznecovas/mouthful/cmd/migration/isso/model\"\n+\tuuid \"github.com/satori/go.uuid\"\n+\t\"github.com/urfave/cli\"\n+\t\"github.com/vkuznecovas/mouthful/api\"\n+\t\"github.com/vkuznecovas/mouthful/cmd/spoon/command/model\"\n \t\"github.com/vkuznecovas/mouthful/db/sqlxDriver/sqlite\"\n+\t\"github.com/vkuznecovas/mouthful/global\"\n )\n \n-type commentParentMap struct {\n+type commentParentMapIsso struct {\n \tId     int\n \tUid    uuid.UUID\n \tParent *int\n }\n \n-func main() {\n-\targsWithoutProg := os.Args[1:]\n-\tif len(argsWithoutProg) == 0 {\n-\t\tpanic(errors.New(\"Please provide a source database filename\"))\n-\t}\n-\tissoDB, err := sqlx.Connect(\"sqlite3\", argsWithoutProg[0])\n+// IssoCommandRun takes the issoDbPath connects to it and mmigrates all the comments to a new mouthful sqlite instance\n+func IssoCommandRun(issoDbPath string) error {\n+\tissoDB, err := sqlx.Connect(\"sqlite3\", issoDbPath)\n \tif err != nil {\n-\t\tpanic(err)\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't connect to isso db %v \\n Error: %v\", issoDbPath, err.Error()), 1)\n \t}\n \tmouthDB, err := sqlx.Connect(\"sqlite3\", \"./mouthful.db\")\n \tif err != nil {\n-\t\tpanic(err)\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't connect to mouthful db %v \\n Error: %v\", \"./mouthful.db\", err.Error()), 1)\n \t}\n \tfor _, v := range sqlite.SqliteQueries {\n \t\tmouthDB.MustExec(v)\n \t}\n \tthreads, err := issoDB.Queryx(issoDB.Rebind(\"select * from threads\"))\n \tif err != nil {\n-\t\tpanic(err)\n+\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't select threads from isso DB %v \\n Error: %v\", issoDbPath, err.Error()), 1)\n \t}\n \tlog.Println(\"Migration started\")\n-\tcommentMap := make(map[int]commentParentMap)\n+\tcommentMap := make(map[int]commentParentMapIsso)\n \tfor threads.Next() {\n \t\tvar t model.Thread\n \t\terr = threads.StructScan(&t)\n \t\tif err != nil {\n-\t\t\tpanic(err)\n+\t\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't select thread from isso DB %v\", err.Error()), 1)\n \t\t}\n \t\turi := api.NormalizePath(*t.Uri)\n \t\tlog.Println(\"Migrating thread \" + uri)\n \t\ttuid := global.GetUUID()\n \t\t_, err = mouthDB.Exec(mouthDB.Rebind(\"INSERT INTO Thread(Id,Path) VALUES(?, ?)\"), tuid, uri)\n \t\tif err != nil {\n-\t\t\tpanic(err)\n+\t\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't insert thread into mouthful DB %v, Error: %v\", t, err.Error()), 1)\n \t\t}\n \t\tcomments, err := issoDB.Queryx(issoDB.Rebind(\"select * from comments where tid = ? order by created asc\"), t.Id)\n \t\tfor comments.Next() {\n \n \t\t\tvar c model.Comment\n \t\t\terr = comments.StructScan(&c)\n \t\t\tif err != nil {\n-\t\t\t\tpanic(err)\n+\t\t\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't select comment from isso DB %v\", err.Error()), 1)\n \t\t\t}\n \t\t\tlog.Printf(\"Migrating comment %v\\n\", c.Id)\n \t\t\tcommentId := global.GetUUID()\n-\t\t\tcommentMap[c.Id] = commentParentMap{\n+\t\t\tcommentMap[c.Id] = commentParentMapIsso{\n \t\t\t\tId:     c.Id,\n \t\t\t\tParent: c.Parent,\n \t\t\t\tUid:    commentId,\n@@ -109,10 +100,10 @@ func main() {\n \t\t\tbody := global.ParseAndSaniziteMarkdown(*c.Text)\n \t\t\t_, err = mouthDB.Exec(mouthDB.Rebind(\"INSERT INTO comment(id, threadId, body, author, confirmed, createdAt, replyTo, deletedAt) VALUES(?,?,?,?,?,?,?,?)\"), commentId, tuid, body, *c.Author, confirmed, createdTime, replyTo, deletedAt)\n \t\t\tif err != nil {\n-\t\t\t\tpanic(err)\n+\t\t\t\treturn cli.NewExitError(fmt.Sprintf(\"Couldn't insert comment into mouthful DB %v, Error: %v\", c, err.Error()), 1)\n \t\t\t}\n \t\t}\n \n \t}\n-\n+\treturn nil\n }",
      "previous_filename": "cmd/migration/isso/main.go"
    },
    {
      "sha": "b37fa3a201061119a6a2f63cd8032d0f178e323d",
      "filename": "cmd/spoon/command/model/disqus.go",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/model/disqus.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/model/disqus.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/spoon/command/model/disqus.go?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -1,4 +1,4 @@\n-// package model contains all the required\n+// package model contains all the required models for commands\n package model\n \n import \"encoding/xml\"",
      "previous_filename": "cmd/migration/disqus/model/disqus.go"
    },
    {
      "sha": "ef602bc18adb2144db58141b9c5d1d2afa02b28f",
      "filename": "cmd/spoon/command/model/isso.go",
      "status": "renamed",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/model/isso.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/command/model/isso.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/spoon/command/model/isso.go?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -1,4 +1,3 @@\n-// Package model contains all the necessary models for isso migration\n package model\n \n // Thread represents an isso commenting thread",
      "previous_filename": "cmd/migration/isso/model/isso.go"
    },
    {
      "sha": "db750506359de16d5d52ed1eaa1cb12e1c06b7af",
      "filename": "cmd/spoon/main.go",
      "status": "added",
      "additions": 128,
      "deletions": 0,
      "changes": 128,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/main.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/cmd/spoon/main.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/cmd/spoon/main.go?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -0,0 +1,128 @@\n+package main\n+\n+import (\n+\t\"log\"\n+\t\"os\"\n+\n+\t\"github.com/urfave/cli\"\n+\t\"github.com/vkuznecovas/mouthful/cmd/spoon/command\"\n+)\n+\n+func main() {\n+\tapp := cli.NewApp()\n+\tapp.Name = \"Spoon\"\n+\tapp.Usage = \"the helpful mouthful helper - spoon will export and import mouthful data, migrate between db engines and import comments from other commenting engines\"\n+\tapp.Version = \"v0.0.0\"\n+\t// app.EnableBashCompletion = true\n+\n+\tapp.Commands = []cli.Command{\n+\t\t{\n+\t\t\tFlags: []cli.Flag{\n+\t\t\t\tcli.StringFlag{\n+\t\t\t\t\tName:   \"config, c\",\n+\t\t\t\t\tValue:  \"\",\n+\t\t\t\t\tUsage:  \"path to mouthful config file\",\n+\t\t\t\t\tEnvVar: \"MOUTHFUL_CONFIG\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tName:    \"export\",\n+\t\t\tAliases: []string{\"e\"},\n+\t\t\tUsage:   \"exports the database pointed by the config provided to a mouthful.dmp file\",\n+\t\t\tAction: func(c *cli.Context) error {\n+\t\t\t\tconfigPath := c.String(\"config\")\n+\t\t\t\treturn command.ExportCommandRun(configPath)\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tFlags: []cli.Flag{\n+\t\t\t\tcli.StringFlag{\n+\t\t\t\t\tName:   \"config, c\",\n+\t\t\t\t\tValue:  \"\",\n+\t\t\t\t\tUsage:  \"path to mouthful config file\",\n+\t\t\t\t\tEnvVar: \"MOUTHFUL_CONFIG\",\n+\t\t\t\t},\n+\t\t\t\tcli.StringFlag{\n+\t\t\t\t\tName:   \"dump, d\",\n+\t\t\t\t\tValue:  \"\",\n+\t\t\t\t\tUsage:  \"path to mouthful dump file\",\n+\t\t\t\t\tEnvVar: \"MOUTHFUL_DUMP\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tName:    \"import\",\n+\t\t\tAliases: []string{\"i\"},\n+\t\t\tUsage:   \"imports the  given dump to the database pointed by the config provided\",\n+\t\t\tAction: func(c *cli.Context) error {\n+\t\t\t\tconfigPath := c.String(\"config\")\n+\t\t\t\tdumpPath := c.String(\"dump\")\n+\t\t\t\treturn command.ImportCommandRun(configPath, dumpPath)\n+\t\t\t},\n+\t\t},\n+\t\t{\n+\t\t\tName:    \"migrate\",\n+\t\t\tAliases: []string{\"m\"},\n+\t\t\tUsage:   \"migrations between different commenting engines and supported mouthful database types\",\n+\t\t\tSubcommands: cli.Commands{\n+\t\t\t\t{\n+\t\t\t\t\tFlags: []cli.Flag{\n+\t\t\t\t\t\tcli.StringFlag{\n+\t\t\t\t\t\t\tName:   \"dump, d\",\n+\t\t\t\t\t\t\tValue:  \"\",\n+\t\t\t\t\t\t\tUsage:  \"path to disqus dump file\",\n+\t\t\t\t\t\t\tEnvVar: \"DISQUS_DUMP\",\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t\tName:  \"disqus\",\n+\t\t\t\t\tUsage: \"imports the given dump to a mouthful sqlite instance\",\n+\t\t\t\t\tAction: func(c *cli.Context) error {\n+\t\t\t\t\t\tdumpPath := c.String(\"dump\")\n+\t\t\t\t\t\treturn command.DisqusMigrationRun(dumpPath)\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tFlags: []cli.Flag{\n+\t\t\t\t\t\tcli.StringFlag{\n+\t\t\t\t\t\t\tName:   \"isso\",\n+\t\t\t\t\t\t\tValue:  \"\",\n+\t\t\t\t\t\t\tUsage:  \"path to isso sqlite file\",\n+\t\t\t\t\t\t\tEnvVar: \"ISSO_FILE\",\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t\tName:  \"isso\",\n+\t\t\t\t\tUsage: \"imports the given isso sqlite to a mouthful sqlite instance\",\n+\t\t\t\t\tAction: func(c *cli.Context) error {\n+\t\t\t\t\t\tissoPath := c.String(\"isso\")\n+\t\t\t\t\t\treturn command.IssoCommandRun(issoPath)\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\tFlags: []cli.Flag{\n+\t\t\t\t\t\tcli.StringFlag{\n+\t\t\t\t\t\t\tName:   \"sqlite, s\",\n+\t\t\t\t\t\t\tValue:  \"\",\n+\t\t\t\t\t\t\tUsage:  \"path to sqlite file to export from\",\n+\t\t\t\t\t\t\tEnvVar: \"SQLITE_FILE\",\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\tcli.StringFlag{\n+\t\t\t\t\t\t\tName:   \"config, c\",\n+\t\t\t\t\t\t\tValue:  \"\",\n+\t\t\t\t\t\t\tUsage:  \"path to mouthful config file\",\n+\t\t\t\t\t\t\tEnvVar: \"MOUTHFUL_CONFIG\",\n+\t\t\t\t\t\t},\n+\t\t\t\t\t},\n+\t\t\t\t\tName:  \"dynamo\",\n+\t\t\t\t\tUsage: \"imports the given sqlite database to the dynamodb database pointed by the config provided\",\n+\t\t\t\t\tAction: func(c *cli.Context) error {\n+\t\t\t\t\t\tsqlitePath := c.String(\"sqlite\")\n+\t\t\t\t\t\tconfigPath := c.String(\"config\")\n+\t\t\t\t\t\treturn command.DynamoCommandRun(sqlitePath, configPath)\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\terr := app.Run(os.Args)\n+\tif err != nil {\n+\t\tlog.Fatal(err)\n+\t}\n+}"
    },
    {
      "sha": "8af5e75c8dd3eb0ccd9fc3bf2628686947d2b129",
      "filename": "config/model/config.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/config/model/config.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/config/model/config.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/config/model/config.go?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -15,6 +15,7 @@ type Database struct {\n \tDynamoDBCommentWriteUnits *int64  `json:\"dynamoDBCommentWriteUnits,omitempty\"`\n \tDynamoDBIndexWriteUnits   *int64  `json:\"dynamoDBIndexWriteUnits,omitempty\"`\n \tDynamoDBIndexReadUnits    *int64  `json:\"dynamoDBIndexReadUnits,omitempty\"`\n+\tDynamoDBEndpoint          *string `json:\"dynamoDBEndpoint,omitempty\"`\n \tAwsAccessKeyID            *string `json:\"awsAccessKeyID,omitempty\"`\n \tAwsSecretAccessKey        *string `json:\"awsSecretAccessKey,omitempty\"`\n \tAwsRegion                 *string `json:\"awsRegion,omitempty\"`"
    },
    {
      "sha": "cb799252db3cac55773b85c94cb1a2331f114ba6",
      "filename": "db/dynamodb/database.go",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/db/dynamodb/database.go",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/db/dynamodb/database.go",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/db/dynamodb/database.go?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -81,7 +81,12 @@ func CreateDatabase(databaseConfig model.Database) (abstraction.Database, error)\n \tif err != nil {\n \t\treturn nil, err\n \t}\n-\tdb := dynamo.New(session.New(), &aws.Config{Region: aws.String(*databaseConfig.AwsRegion)})\n+\tcfg := &aws.Config{Region: aws.String(*databaseConfig.AwsRegion)}\n+\tif databaseConfig.DynamoDBEndpoint != nil {\n+\t\tcfg.Endpoint = aws.String(*databaseConfig.DynamoDBEndpoint)\n+\t}\n+\n+\tdb := dynamo.New(session.New(), cfg)\n \tprefix := \"\"\n \tif databaseConfig.TablePrefix != nil {\n \t\tprefix = *databaseConfig.TablePrefix"
    },
    {
      "sha": "406876e2cacf0f6b94f1a14336e9713dc401c190",
      "filename": "examples/configs/README.md",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/vkuznecovas/mouthful/blob/89ea44b5de0377cc9169e3f6aa370583915ed421/examples/configs/README.md",
      "raw_url": "https://github.com/vkuznecovas/mouthful/raw/89ea44b5de0377cc9169e3f6aa370583915ed421/examples/configs/README.md",
      "contents_url": "https://api.github.com/repos/vkuznecovas/mouthful/contents/examples/configs/README.md?ref=89ea44b5de0377cc9169e3f6aa370583915ed421",
      "patch": "@@ -232,6 +232,9 @@ Currently supported databases are:\n |awsRegion | determines the aws region we'll connect to | string | true |  | |\n |awsAccessKeyID | your aws access key id. Can be overriden by env variable `AWS_ACCESS_KEY_ID` | string | true |  |  |\n |awsSecretAccessKey | your secret aws access key. Can be overriden by env variable `AWS_SECRET_ACCESS_KEY` | string | true |  |  |\n+| dynamoDBEndpoint | endpoint of the aws dynamodb. Mostly used for testing. | string | false | none | none |\n+\n+\n \n You can find suggested provision ratios for dynamodb in the [example dynamodb config file](./dynamodb/config.json). They are experimental atm. Will be updated once more data on usage is collected.\n "
    }
  ]
}
