{
  "sha": "e7e8f4ef4cf5f86d60a58ec11b0610811656bc5f",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODplN2U4ZjRlZjRjZjVmODZkNjBhNThlYzExYjA2MTA4MTE2NTZiYzVm",
  "commit": {
    "author": {
      "name": "David Taylor",
      "email": "david@taylorhq.com",
      "date": "2018-08-15T16:19:08Z"
    },
    "committer": {
      "name": "David Taylor",
      "email": "david@taylorhq.com",
      "date": "2018-08-17T15:08:47Z"
    },
    "message": "Add plugin API for handling uploads with specific file extensions",
    "tree": {
      "sha": "3f84d7c6e01ec49983e45f023634e0e431cd79e9",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/3f84d7c6e01ec49983e45f023634e0e431cd79e9"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/e7e8f4ef4cf5f86d60a58ec11b0610811656bc5f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/e7e8f4ef4cf5f86d60a58ec11b0610811656bc5f",
  "html_url": "https://github.com/discourse/discourse/commit/e7e8f4ef4cf5f86d60a58ec11b0610811656bc5f",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/e7e8f4ef4cf5f86d60a58ec11b0610811656bc5f/comments",
  "author": {
    "login": "davidtaylorhq",
    "id": 6270921,
    "node_id": "MDQ6VXNlcjYyNzA5MjE=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/6270921?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davidtaylorhq",
    "html_url": "https://github.com/davidtaylorhq",
    "followers_url": "https://api.github.com/users/davidtaylorhq/followers",
    "following_url": "https://api.github.com/users/davidtaylorhq/following{/other_user}",
    "gists_url": "https://api.github.com/users/davidtaylorhq/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davidtaylorhq/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davidtaylorhq/subscriptions",
    "organizations_url": "https://api.github.com/users/davidtaylorhq/orgs",
    "repos_url": "https://api.github.com/users/davidtaylorhq/repos",
    "events_url": "https://api.github.com/users/davidtaylorhq/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davidtaylorhq/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "davidtaylorhq",
    "id": 6270921,
    "node_id": "MDQ6VXNlcjYyNzA5MjE=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/6270921?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davidtaylorhq",
    "html_url": "https://github.com/davidtaylorhq",
    "followers_url": "https://api.github.com/users/davidtaylorhq/followers",
    "following_url": "https://api.github.com/users/davidtaylorhq/following{/other_user}",
    "gists_url": "https://api.github.com/users/davidtaylorhq/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davidtaylorhq/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davidtaylorhq/subscriptions",
    "organizations_url": "https://api.github.com/users/davidtaylorhq/orgs",
    "repos_url": "https://api.github.com/users/davidtaylorhq/repos",
    "events_url": "https://api.github.com/users/davidtaylorhq/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davidtaylorhq/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a83f662492990282a8dbfb5a4b7db7408a7d610b",
      "url": "https://api.github.com/repos/discourse/discourse/commits/a83f662492990282a8dbfb5a4b7db7408a7d610b",
      "html_url": "https://github.com/discourse/discourse/commit/a83f662492990282a8dbfb5a4b7db7408a7d610b"
    }
  ],
  "stats": {
    "total": 40,
    "additions": 39,
    "deletions": 1
  },
  "files": [
    {
      "sha": "6218dbcfbc2e444778b0b4df4dc16e5f77008fb4",
      "filename": "app/assets/javascripts/discourse/components/composer-editor.js.es6",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/discourse/discourse/blob/e7e8f4ef4cf5f86d60a58ec11b0610811656bc5f/app/assets/javascripts/discourse/components/composer-editor.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/e7e8f4ef4cf5f86d60a58ec11b0610811656bc5f/app/assets/javascripts/discourse/components/composer-editor.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/components/composer-editor.js.es6?ref=e7e8f4ef4cf5f86d60a58ec11b0610811656bc5f",
      "patch": "@@ -38,6 +38,14 @@ import {\n \n const REBUILD_SCROLL_MAP_EVENTS = [\"composer:resized\", \"composer:typed-reply\"];\n \n+const uploadHandlers = [];\n+export function addComposerUploadHandler(extensions, method) {\n+  uploadHandlers.push({\n+    extensions,\n+    method\n+  });\n+}\n+\n export default Ember.Component.extend({\n   classNameBindings: [\"showToolbar:toolbar-visible\", \":wmd-controls\"],\n \n@@ -587,6 +595,19 @@ export default Ember.Component.extend({\n     });\n \n     $element.on(\"fileuploadsubmit\", (e, data) => {\n+      // Look for a matching file upload handler contributed from a plugin\n+      const matcher = handler => {\n+        const ext = handler.extensions.join(\"|\");\n+        const regex = new RegExp(`\\\\.(${ext})$`, \"i\");\n+        return regex.test(data.files[0].name);\n+      };\n+      const matchingHandler = uploadHandlers.find(matcher);\n+      if (data.files.length === 1 && matchingHandler) {\n+        matchingHandler.method(data.files[0]);\n+        return false;\n+      }\n+\n+      // If no plugin, continue as normal\n       const isPrivateMessage = this.get(\"composer.privateMessage\");\n \n       data.formData = { type: \"composer\" };"
    },
    {
      "sha": "7f3b9e4389881317c6c1528b0af82699539b08fc",
      "filename": "app/assets/javascripts/discourse/lib/plugin-api.js.es6",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/discourse/discourse/blob/e7e8f4ef4cf5f86d60a58ec11b0610811656bc5f/app/assets/javascripts/discourse/lib/plugin-api.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/e7e8f4ef4cf5f86d60a58ec11b0610811656bc5f/app/assets/javascripts/discourse/lib/plugin-api.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/lib/plugin-api.js.es6?ref=e7e8f4ef4cf5f86d60a58ec11b0610811656bc5f",
      "patch": "@@ -35,9 +35,10 @@ import { registerCustomAvatarHelper } from \"discourse/helpers/user-avatar\";\n import { disableNameSuppression } from \"discourse/widgets/poster-name\";\n import { registerCustomPostMessageCallback as registerCustomPostMessageCallback1 } from \"discourse/controllers/topic\";\n import Sharing from \"discourse/lib/sharing\";\n+import { addComposerUploadHandler } from \"discourse/components/composer-editor\";\n \n // If you add any methods to the API ensure you bump up this number\n-const PLUGIN_API_VERSION = \"0.8.23\";\n+const PLUGIN_API_VERSION = \"0.8.24\";\n \n class PluginApi {\n   constructor(version, container) {\n@@ -753,6 +754,22 @@ class PluginApi {\n     Sharing.addSharingId(options.id);\n     Sharing.addSource(options);\n   }\n+\n+  /**\n+   *\n+   * Registers a function to handle uploads for specified file types\n+   * The normal uploading functionality will be bypassed\n+   * This only for uploads of individual files\n+   *\n+   * Example:\n+   *\n+   * addComposerUploadHandler([\"mp4\", \"mov\"], (file) => {\n+   *    console.log(\"Handling upload for\", file.name);\n+   * })\n+   */\n+  addComposerUploadHandler(extensions, method) {\n+    addComposerUploadHandler(extensions, method);\n+  }\n }\n \n let _pluginv01;"
    }
  ]
}
