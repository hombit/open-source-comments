{
  "sha": "dff3d795698450c27cd799c0e99504b6bb77ec51",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6ZGZmM2Q3OTU2OTg0NTBjMjdjZDc5OWMwZTk5NTA0YjZiYjc3ZWM1MQ==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2018-08-24T16:14:18Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2018-08-24T16:14:18Z"
    },
    "message": "Subscription Optimizations (#1817)\n\n* fix: optimized user extraction during subscription operations\r\n\r\n* fix: fixed query\r\n\r\n* feat: added user refeshing batching",
    "tree": {
      "sha": "58683fa2c6f84f5132a148cf20c3c0bd95262866",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/58683fa2c6f84f5132a148cf20c3c0bd95262866"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/dff3d795698450c27cd799c0e99504b6bb77ec51",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbgC7aCRBK7hj4Ov3rIwAAdHIIAES2ZC4CnzX1Z9HsP7+x+bdc\nh1IbKbgd+DuXg6IlgoxEDgQ6SaVr/W8xmOisMlFBP8frYxDbNdw9Gg3G+624MzZc\nX5De4c6t65CEj2ik/AJ0jCvLeEK6dRwZpRuMgMcPXtmBvVHS4UmP5NfgQMRtEdEW\n/jJSjAyeKvW3WPelYWmaWxz8IndRtB3fjPROKn+u3wtwxQEhS1f9X1yS6P9WAkgx\neSGtCHuOK4KkUSZXbpkjbedIZERCEr0hO6RQPIQ7rmN3qyGFXBAneIhOhMVLsM/3\nQHiXWX0yTxzI7/0Ben/bSxHtwVkewqTYNLOZnEMzJBXkCx8ToFdR0MChpVFl7K4=\n=VhA/\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 58683fa2c6f84f5132a148cf20c3c0bd95262866\nparent 0904453e41cc7c17acbb5949b1f8a06998a1416f\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1535127258 +0000\ncommitter GitHub <noreply@github.com> 1535127258 +0000\n\nSubscription Optimizations (#1817)\n\n* fix: optimized user extraction during subscription operations\r\n\r\n* fix: fixed query\r\n\r\n* feat: added user refeshing batching\r\n"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/dff3d795698450c27cd799c0e99504b6bb77ec51",
  "html_url": "https://github.com/coralproject/talk/commit/dff3d795698450c27cd799c0e99504b6bb77ec51",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/dff3d795698450c27cd799c0e99504b6bb77ec51/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0904453e41cc7c17acbb5949b1f8a06998a1416f",
      "url": "https://api.github.com/repos/coralproject/talk/commits/0904453e41cc7c17acbb5949b1f8a06998a1416f",
      "html_url": "https://github.com/coralproject/talk/commit/0904453e41cc7c17acbb5949b1f8a06998a1416f"
    }
  ],
  "stats": {
    "total": 97,
    "additions": 86,
    "deletions": 11
  },
  "files": [
    {
      "sha": "e4ccfef04b15232d9a3bfa1e7a8e883ec2d89c20",
      "filename": "graph/subscriptions/index.js",
      "status": "modified",
      "additions": 86,
      "deletions": 11,
      "changes": 97,
      "blob_url": "https://github.com/coralproject/talk/blob/dff3d795698450c27cd799c0e99504b6bb77ec51/graph/subscriptions/index.js",
      "raw_url": "https://github.com/coralproject/talk/raw/dff3d795698450c27cd799c0e99504b6bb77ec51/graph/subscriptions/index.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/graph/subscriptions/index.js?ref=dff3d795698450c27cd799c0e99504b6bb77ec51",
      "patch": "@@ -1,11 +1,14 @@\n const { SubscriptionManager } = require('graphql-subscriptions');\n const { SubscriptionServer } = require('subscriptions-transport-ws');\n const debug = require('debug')('talk:graph:subscriptions');\n+const DataLoader = require('dataloader');\n \n const { getPubsub } = require('./pubsub');\n const schema = require('../schema');\n const Context = require('../context');\n const plugins = require('../../services/plugins');\n+const User = require('../../models/user');\n+const { singleJoinBy } = require('../loaders/util');\n \n const { deserializeUser } = require('../../services/subscriptions');\n const setupFunctions = require('./setupFunctions');\n@@ -59,31 +62,103 @@ const onConnect = async (connectionParams, connection) => {\n     }`;\n   }\n \n+  try {\n+    // Pull the user off of the upgrade request.\n+    const hydratedRequest = await deserializeUser(connection.upgradeReq);\n+\n+    // Update the connections upgrade request, as we'll use that to verify that\n+    // the user is allowed each operation.\n+    connection.upgradeReq = hydratedRequest;\n+  } catch (err) {\n+    console.error(err);\n+  }\n+\n   // Call all the hooks.\n   await Promise.all(\n     hooks.onConnect.map(hook => hook(connectionParams, connection))\n   );\n };\n \n-const onOperation = (parsedMessage, baseParams, connection) => {\n-  // Cache the upgrade request.\n-  let upgradeReq = connection.upgradeReq;\n+/**\n+ * batchedUserRefresher will get users based on ID for websocket user refresh\n+ * operations to reduce load related to user refreshing.\n+ */\n+const batchedUserRefresher = new DataLoader(\n+  userIDs => {\n+    console.log(`OPERATION: refreshing ${userIDs.length} users.`);\n+    return User.find({ id: { $in: userIDs } }).then(\n+      singleJoinBy(userIDs, 'id')\n+    );\n+  },\n+  {\n+    // Disable the cache, as this dataloader is long lived, and the point of\n+    // using this dataloader is to batch refetch operations rather than caching\n+    // then as we normally would.\n+    cache: false,\n+  }\n+);\n+\n+const contextGenerator = req => {\n+  // Pull the user(?) off the request.\n+  const { user, jwt } = req;\n \n-  // Attach the context per request.\n-  baseParams.context = async () => {\n-    let req;\n+  if (!user || !jwt) {\n+    // There is no valid user on the request, let it continue as is then.\n+    return async () => new Context(req);\n+  }\n+\n+  // Provide a flag that can be used to short circuit invalid requests.\n+  let expiredLogin = false;\n+\n+  async function refreshUser() {\n+    // Check to see if this request has been short circuited.\n+    if (expiredLogin) {\n+      // It has, let's exit here.\n+      return null;\n+    }\n+\n+    // Validate that the JWT for this user has not expired.\n+    const { exp = false } = jwt;\n+    if (exp && exp < Date.now() / 1000) {\n+      // Mark that this token has expired, don't bother performing this syscall\n+      // again to check the time.\n+      expiredLogin = true;\n+      return null;\n+    }\n \n     try {\n-      req = await deserializeUser(upgradeReq);\n-      debug(`user ${req.user ? 'was' : 'was not'} on websocket request`);\n-    } catch (e) {\n-      console.error(e);\n+      // Let's refresh the user from the database, as they may have changed.\n+      const refreshedUser = await batchedUserRefresher.load(user.id);\n+      if (!refreshedUser) {\n+        return null;\n+      }\n \n-      return new Context({});\n+      return refreshedUser;\n+    } catch (err) {\n+      return null;\n     }\n+  }\n \n+  // Return the context builder function that'll use the passed context to\n+  // generate future contexts.\n+  return async () => {\n+    // Refresh the user (potentially null).\n+    const refreshedUser = await refreshUser();\n+\n+    // Attach the refreshedUser to the request.\n+    req.user = refreshedUser;\n+\n+    // Return the new context.\n     return new Context(req);\n   };\n+};\n+\n+const onOperation = async (parsedMessage, baseParams, connection) => {\n+  // Pull the upgrade request off of the connection.\n+  const upgradeReq = connection.upgradeReq;\n+\n+  // Attach the context handler to the request.\n+  baseParams.context = contextGenerator(upgradeReq);\n \n   return baseParams;\n };"
    }
  ]
}
