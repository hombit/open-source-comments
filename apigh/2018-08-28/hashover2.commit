{
  "sha": "89cee94a25ca37663a4616faa29d068e8ba54de0",
  "node_id": "MDY6Q29tbWl0MTgwOTYzMjI6ODljZWU5NGEyNWNhMzc2NjNhNDYxNmZhYTI5ZDA2OGU4YmE1NGRlMA==",
  "commit": {
    "author": {
      "name": "jacobwb",
      "email": "jacobbarkdull@gmail.com",
      "date": "2018-08-17T03:09:50Z"
    },
    "committer": {
      "name": "jacobwb",
      "email": "jacobbarkdull@gmail.com",
      "date": "2018-08-17T03:09:50Z"
    },
    "message": "Added SMTP support",
    "tree": {
      "sha": "954fa8278280cc6261ba8b5f4e3215ef9ea0f5f1",
      "url": "https://api.github.com/repos/jacobwb/hashover-next/git/trees/954fa8278280cc6261ba8b5f4e3215ef9ea0f5f1"
    },
    "url": "https://api.github.com/repos/jacobwb/hashover-next/git/commits/89cee94a25ca37663a4616faa29d068e8ba54de0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/jacobwb/hashover-next/commits/89cee94a25ca37663a4616faa29d068e8ba54de0",
  "html_url": "https://github.com/jacobwb/hashover-next/commit/89cee94a25ca37663a4616faa29d068e8ba54de0",
  "comments_url": "https://api.github.com/repos/jacobwb/hashover-next/commits/89cee94a25ca37663a4616faa29d068e8ba54de0/comments",
  "author": {
    "login": "jacobwb",
    "id": 4677622,
    "node_id": "MDQ6VXNlcjQ2Nzc2MjI=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4677622?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacobwb",
    "html_url": "https://github.com/jacobwb",
    "followers_url": "https://api.github.com/users/jacobwb/followers",
    "following_url": "https://api.github.com/users/jacobwb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacobwb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacobwb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacobwb/subscriptions",
    "organizations_url": "https://api.github.com/users/jacobwb/orgs",
    "repos_url": "https://api.github.com/users/jacobwb/repos",
    "events_url": "https://api.github.com/users/jacobwb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacobwb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jacobwb",
    "id": 4677622,
    "node_id": "MDQ6VXNlcjQ2Nzc2MjI=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4677622?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacobwb",
    "html_url": "https://github.com/jacobwb",
    "followers_url": "https://api.github.com/users/jacobwb/followers",
    "following_url": "https://api.github.com/users/jacobwb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacobwb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacobwb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacobwb/subscriptions",
    "organizations_url": "https://api.github.com/users/jacobwb/orgs",
    "repos_url": "https://api.github.com/users/jacobwb/repos",
    "events_url": "https://api.github.com/users/jacobwb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacobwb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "77c8f6237edc1abe62a81d59b560f829be9d213c",
      "url": "https://api.github.com/repos/jacobwb/hashover-next/commits/77c8f6237edc1abe62a81d59b560f829be9d213c",
      "html_url": "https://github.com/jacobwb/hashover-next/commit/77c8f6237edc1abe62a81d59b560f829be9d213c"
    }
  ],
  "stats": {
    "total": 571,
    "additions": 570,
    "deletions": 1
  },
  "files": [
    {
      "sha": "17526e2196f498d5045557e140c7163d4f0c7747",
      "filename": "hashover/admin/views/settings/index.php",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/admin/views/settings/index.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/admin/views/settings/index.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/admin/views/settings/index.php?ref=89cee94a25ca37663a4616faa29d068e8ba54de0",
      "patch": "@@ -86,7 +86,8 @@ function ui_array (Setup $setup)\n \t\t\t'value' => $setup->mailer,\n \n \t\t\t'options' => array (\n-\t\t\t\t'sendmail' => 'Sendmail'\n+\t\t\t\t'sendmail' => 'Sendmail',\n+\t\t\t\t'smtp' => 'SMTP'\n \t\t\t)\n \t\t),\n \t\t'mail-type' => array ("
    },
    {
      "sha": "4139136469dd8141b56a5c27e9b14c049703beb2",
      "filename": "hashover/backend/classes/email.php",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/backend/classes/email.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/backend/classes/email.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/email.php?ref=89cee94a25ca37663a4616faa29d068e8ba54de0",
      "patch": "@@ -29,6 +29,27 @@ public function __construct (Setup $setup)\n \n \t\t// Instantiate mailer class\n \t\t$this->mailer = new $mail_class ($setup);\n+\n+\t\t// Setup SMTP Mailer\n+\t\tif (mb_strtolower ($setup->mailer) !== 'sendmail') {\n+\t\t\t// Set SMTP server host\n+\t\t\t$this->mailer->setHost ($this->smtpHost);\n+\n+\t\t\t// Set SMTP server port number\n+\t\t\t$this->mailer->setPort ($this->smtpPort);\n+\n+\t\t\t// Set SMTP server encryption method\n+\t\t\t$this->mailer->setCrypto ($this->smtpCrypto);\n+\n+\t\t\t// Set whether SMTP server requires authentication\n+\t\t\t$this->mailer->setAuth ($this->smtpAuth);\n+\n+\t\t\t// Set SMTP server login user\n+\t\t\t$this->mailer->setUser ($this->smtpUser);\n+\n+\t\t\t// Set SMTP server login password\n+\t\t\t$this->mailer->setPassword ($this->smtpPassword);\n+\t\t}\n \t}\n \n \t// Call mailer method"
    },
    {
      "sha": "7fade207b3232ca4b3943a7fcbd614e60ae9a292",
      "filename": "hashover/backend/classes/secrets.php",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/backend/classes/secrets.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/backend/classes/secrets.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/secrets.php?ref=89cee94a25ca37663a4616faa29d068e8ba54de0",
      "patch": "@@ -60,4 +60,24 @@ class Secrets\n \n \t// SQL database character set\n \tprotected $databaseCharset = 'utf8';\n+\n+\t// OPTIONAL SMTP MAILER SETUP\n+\n+\t// SMTP server host name\n+\tprotected $smtpHost = 'smtp.gmail.com';\n+\n+\t// SMTP server port number\n+\tprotected $smtpPort = 465;\n+\n+\t// SMTP server encryption method\n+\tprotected $smtpCrypto = 'ssl';\n+\n+\t// SMTP server requires login authentication\n+\tprotected $smtpAuth = true;\n+\n+\t// SMTP server user\n+\tprotected $smtpUser = 'user';\n+\n+\t// SMTP server password\n+\tprotected $smtpPassword = 'password';\n }"
    },
    {
      "sha": "30f45ec076c0635ad8e8e12e7008c22eef386702",
      "filename": "hashover/backend/classes/setupchecks.php",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/backend/classes/setupchecks.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/backend/classes/setupchecks.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/setupchecks.php?ref=89cee94a25ca37663a4616faa29d068e8ba54de0",
      "patch": "@@ -69,5 +69,24 @@ public function __construct (Setup $setup)\n \t\t\t\t));\n \t\t\t}\n \t\t}\n+\n+\t\t// Check if we're sending notification e-mails through SMTP\n+\t\tif ($setup->mailer === 'smtp') {\n+\t\t\t// If so, throw exception if SMTP user is set to the default\n+\t\t\tif ($this->smtpUser === 'user') {\n+\t\t\t\tthrow new \\Exception (sprintf (\n+\t\t\t\t\t'You must use an SMTP user name other than \"user\" in %s',\n+\t\t\t\t\t$setup->getBackendPath ('classes/secrets.php')\n+\t\t\t\t));\n+\t\t\t}\n+\n+\t\t\t// Throw exception if SMTP password is set to the default\n+\t\t\tif ($this->smtpPassword === 'password') {\n+\t\t\t\tthrow new \\Exception (sprintf (\n+\t\t\t\t\t'You must use an SMTP password other than \"password\" in %s',\n+\t\t\t\t\t$setup->getBackendPath ('classes/secrets.php')\n+\t\t\t\t));\n+\t\t\t}\n+\t\t}\n \t}\n }"
    },
    {
      "sha": "3b8e4282ad882cb4be95a6a8232e872b5bd49e69",
      "filename": "hashover/backend/classes/smtp.php",
      "status": "added",
      "additions": 503,
      "deletions": 0,
      "changes": 503,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/backend/classes/smtp.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/backend/classes/smtp.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/smtp.php?ref=89cee94a25ca37663a4616faa29d068e8ba54de0",
      "patch": "@@ -0,0 +1,503 @@\n+<?php namespace HashOver;\n+\n+// Copyright (C) 2018 Jacob Barkdull\n+// This file is part of HashOver.\n+//\n+// HashOver is free software: you can redistribute it and/or modify\n+// it under the terms of the GNU Affero General Public License as\n+// published by the Free Software Foundation, either version 3 of the\n+// License, or (at your option) any later version.\n+//\n+// HashOver is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU Affero General Public License for more details.\n+//\n+// You should have received a copy of the GNU Affero General Public License\n+// along with HashOver.  If not, see <http://www.gnu.org/licenses/>.\n+\n+\n+class SMTP\n+{\n+\t// Unix domain socket connection file pointer\n+\tprotected $fp;\n+\n+\t// Time until the connection gives up\n+\tprotected $timeout = 30;\n+\n+\t// Local host to greet the connection with\n+\tprotected $localhost = 'localhost';\n+\n+\t// Server authentication credentials\n+\tprotected $host;\n+\tprotected $port;\n+\tprotected $crypto;\n+\tprotected $auth;\n+\tprotected $user;\n+\tprotected $password;\n+\n+\t// E-mail data to send\n+\tprotected $to = array ();\n+\tprotected $from = array ();\n+\tprotected $subject;\n+\tprotected $reply = array ();\n+\tprotected $text;\n+\tprotected $html;\n+\n+\t// Type of content being sent\n+\tprotected $type = 'text';\n+\n+\t// Sets the SMTP host server\n+\tpublic function setHost ($host)\n+\t{\n+\t\t$this->host = $host;\n+\t}\n+\n+\t// Sets the SMTP server port\n+\tpublic function setPort ($port)\n+\t{\n+\t\t$this->port = $port;\n+\t}\n+\n+\t// Sets the SMTP cryptography\n+\tpublic function setCrypto ($crypto)\n+\t{\n+\t\t$this->crypto = $crypto;\n+\t}\n+\n+\t// Sets the SMTP authentication\n+\tpublic function setAuth ($auth)\n+\t{\n+\t\t$this->auth = $auth;\n+\t}\n+\n+\t// Sets the SMTP server user\n+\tpublic function setUser ($user)\n+\t{\n+\t\t$this->user = $user;\n+\t}\n+\n+\t// Sets the SMTP server password\n+\tpublic function setPassword ($password)\n+\t{\n+\t\t$this->password = $password;\n+\t}\n+\n+\t// Sets who we're sending the e-mail to\n+\tpublic function to ($email, $name = null)\n+\t{\n+\t\t$this->to['email'] = $email;\n+\t\t$this->to['name'] = $name;\n+\t}\n+\n+\t// Sets who the e-mail is coming from\n+\tpublic function from ($email, $name = null)\n+\t{\n+\t\t// Set \"from\" e-mail address and name\n+\t\t$this->from['email'] = $email;\n+\t\t$this->from['name'] = $name;\n+\n+\t\t// Set \"reply-to\" the same way\n+\t\tif (empty ($this->reply['email'])) {\n+\t\t\t$this->replyTo ($email, $name);\n+\t\t}\n+\t}\n+\n+\t// Sets subject line\n+\tpublic function subject ($text)\n+\t{\n+\t\t$this->subject = strip_tags ($text);\n+\t}\n+\n+\t// Sets where the recipient can reply to\n+\tpublic function replyTo ($email, $name = null)\n+\t{\n+\t\t$this->reply['email'] = $email;\n+\t\t$this->reply['name'] = $name;\n+\t}\n+\n+\t// Makes content comply to RFC-821\n+\tprotected function rfc ($content)\n+\t{\n+\t\t// Line ending styles to convert\n+\t\t$styles = array (\"\\r\\n\", \"\\r\");\n+\n+\t\t// Convert line endings to UNIX-style\n+\t\t$content = str_replace ($styles, \"\\n\", $content);\n+\n+\t\t// Wordwrap content to 998 characters\n+\t\t$content = wordwrap ($content, 998, \"\\n\");\n+\n+\t\t// Split the content by lines\n+\t\t$lines = explode (\"\\n\", $content);\n+\n+\t\t// Initial output\n+\t\t$output = '';\n+\n+\t\t// Run through the lines\n+\t\tforeach ($lines as $line) {\n+\t\t\t// RFC 821 section 4.5.2\n+\t\t\tif (!empty ($line) and $line[0] === '.') {\n+\t\t\t\t$line = '.' . $line;\n+\t\t\t}\n+\n+\t\t\t// Add line to output\n+\t\t\t$output .= $line . \"\\r\\n\";\n+\t\t}\n+\n+\t\treturn $output;\n+\t}\n+\n+\t// Converts message to plain text\n+\tprotected function plainText ($text)\n+\t{\n+\t\t// Strip HTML tags\n+\t\t$text = strip_tags ($text);\n+\n+\t\t// Convert HTML entities to normal characters\n+\t\t$text = html_entity_decode ($text, ENT_COMPAT, 'UTF-8');\n+\n+\t\t// Wordwrap text to 70 characters\n+\t\t$text = wordwrap ($text, 70, \"\\n\");\n+\n+\t\t// Make text comply to RFC-821\n+\t\t$text = $this->rfc ($text);\n+\n+\t\treturn $text;\n+\t}\n+\n+\t// Sets the message body to plain text\n+\tpublic function text ($text)\n+\t{\n+\t\t// Set text property\n+\t\t$this->text = $this->plainText ($text);\n+\n+\t\t// And set type to text\n+\t\t$this->type = 'text';\n+\t}\n+\n+\t// Sets the message body to HTML\n+\tpublic function html ($html)\n+\t{\n+\t\t// Set body property\n+\t\t$this->html = $this->rfc ($html);\n+\n+\t\t// Set automatic text version of the message\n+\t\tif (empty ($this->text)) {\n+\t\t\t$this->text = $this->plainText ($html);\n+\t\t}\n+\n+\t\t// And set type to HTML\n+\t\t$this->type = 'html';\n+\t}\n+\n+\t// Sets the message body\n+\tpublic function body ($text, $html = false)\n+\t{\n+\t\t// Set body as HTML if told to\n+\t\tif ($html === true) {\n+\t\t\treturn $this->html ($text);\n+\t\t}\n+\n+\t\t// Otherwise, set body as plain text\n+\t\treturn $this->text ($text);\n+\t}\n+\n+\t// Gets connection response\n+\tprotected function getResponse ()\n+\t{\n+\t\t// Initial response\n+\t\t$response = '';\n+\n+\t\t// Get response in 4KB chunks\n+\t\twhile ($data = @fgets ($this->fp, 4096)) {\n+\t\t\t// Add current lines to response\n+\t\t\t$response .= $data;\n+\n+\t\t\t// End loop if 4th character is a space\n+\t\t\tif (isset ($data[3]) and $data[3] == ' ') {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn $response;\n+\t}\n+\n+\t// Gets code from connection response\n+\tprotected function getCode ()\n+\t{\n+\t\t// Get the response code\n+\t\t$response = $this->getResponse ();\n+\n+\t\t// Filter the code from the response\n+\t\t$code = substr ($response, 0, 3);\n+\n+\t\treturn (int) ($code);\n+\t}\n+\n+\t// Sends request data to the SMTP server\n+\tprotected function request ($data)\n+\t{\n+\t\tfwrite ($this->fp, $data . \"\\r\\n\");\n+\t}\n+\n+\t// Connects to server\n+\tprotected function smtpConnect ()\n+\t{\n+\t\t// Prepend proper URL scheme if we're using SSL\n+\t\tif ($this->crypto === 'ssl') {\n+\t\t\t$this->host = 'ssl://' . $this->host;\n+\t\t}\n+\n+\t\t// Check if stream sockets are available\n+\t\tif (function_exists ('stream_socket_client')) {\n+\t\t\t// Create a stream context\n+\t\t\t$socket_context = stream_context_create ();\n+\n+\t\t\t// Open Unix domain stream connection\n+\t\t\t$this->fp = @stream_socket_client (\n+\t\t\t\t$this->host . ':' . $this->port,\n+\t\t\t\t$errno,\n+\t\t\t\t$errstr,\n+\t\t\t\t$this->timeout,\n+\t\t\t\tSTREAM_CLIENT_CONNECT,\n+\t\t\t\t$socket_context\n+\t\t\t);\n+\t\t} else {\n+\t\t\t// Open Unix domain socket connection\n+\t\t\t$this->fp = @fsockopen (\n+\t\t\t\t$this->host,\n+\t\t\t\t$this->port,\n+\t\t\t\t$errno,\n+\t\t\t\t$errstr,\n+\t\t\t\t$this->timeout\n+\t\t\t);\n+\t\t}\n+\n+\t\t// Return false if the connection is not a resource\n+\t\tif (!is_resource ($this->fp)) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t// Return false if the connection failed\n+\t\tif ($this->getCode () !== 220) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t// Decide greeting\n+\t\t$greeting = $this->auth ? 'EHLO' : 'HELO';\n+\n+\t\t// Send greeting to server\n+\t\t$this->request ($greeting . ' ' . $this->localhost);\n+\n+\t\t// Return false if the greeting failed\n+\t\tif ($this->getCode () !== 250) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t// Check if we are using TLS\n+\t\tif ($this->crypto === 'tls') {\n+\t\t\t// If so, send TLS handshake to server\n+\t\t\t$this->request ('STARTTLS');\n+\n+\t\t\t// Return false if the TLS handshake failed\n+\t\t\tif ($this->getCode () !== 220) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\n+\t\t\t// Type of encryption on the stream\n+\t\t\t$crypto_type = STREAM_CRYPTO_METHOD_TLS_CLIENT;\n+\n+\t\t\t// PHP 5.6 backwards compatibility\n+\t\t\tif (defined ('STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT')) {\n+\t\t\t\t$crypto_method |= STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT;\n+\t\t\t\t$crypto_method |= STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT;\n+\t\t\t}\n+\n+\t\t\t// Turn on encryption\n+\t\t\tstream_socket_enable_crypto ($this->fp, true, $crypto_type);\n+\n+\t\t\t// Send greeting again\n+\t\t\t$this->request ($greeting . ' ' . $this->localhost);\n+\n+\t\t\t// Return false if the greeting failed\n+\t\t\tif ($this->getCode () !== 250) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Check if authorization is required\n+\t\tif ($this->auth === true) {\n+\t\t\t// If so, send request for login\n+\t\t\t$this->request ('AUTH LOGIN');\n+\n+\t\t\t// Return false if the login authentication failed\n+\t\t\tif ($this->getCode () !== 334) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\n+\t\t\t// Send user name for login\n+\t\t\t$this->request (base64_encode ($this->user));\n+\n+\t\t\t// Return false if the user name login failed\n+\t\t\tif ($this->getCode () !== 334) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\n+\t\t\t// Send password for login\n+\t\t\t$this->request (base64_encode ($this->password));\n+\n+\t\t\t// Return false if the password login failed\n+\t\t\tif ($this->getCode () !== 235) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n+\n+\t// Converts to/from/reply-to to a formatted string\n+\tpublic function format (array $recipient)\n+\t{\n+\t\t// If a name was given in \"name <e-mail>\" format\n+\t\tif (!empty ($recipient['name'])) {\n+\t\t\treturn $recipient['name'] . ' <' . $recipient['email'] . '>';\n+\t\t}\n+\n+\t\t// Otherwise, e-mail address as-is\n+\t\treturn $recipient['email'];\n+\t}\n+\n+\t// Creates SMTP transport\n+\tprotected function smtpTransport ()\n+\t{\n+\t\t// Initial transport headers\n+\t\t$headers = array ();\n+\n+\t\t// Add recipient headers\n+\t\t$headers[] = 'MIME-Version: 1.0';\n+\t\t$headers[] = 'Content-Transfer-Encoding: 7bit';\n+\t\t$headers[] = 'To: ' . $this->format ($this->to);\n+\t\t$headers[] = 'From: ' . $this->format ($this->from);\n+\t\t$headers[] = 'Reply-To: ' . $this->format ($this->reply);\n+\t\t$headers[] = 'Subject: ' . $this->subject;\n+\t\t$headers[] = 'Date: ' . date ('r');\n+\n+\t\t// Check if the message type is text\n+\t\tif ($this->type === 'text') {\n+\t\t\t// If so, only add headers for the text version\n+\t\t\t$headers[] = 'Content-Type: text/plain; charset=\"UTF-8\"';\n+\t\t\t$headers[] = '';\n+\t\t\t$headers[] = $this->text;\n+\t\t} else {\n+\t\t\t// If not, create unique boundary\n+\t\t\t$boundary = md5 (uniqid (time ()));\n+\n+\t\t\t// Add multipart headers\n+\t\t\t$headers[] = 'Content-Type: multipart/alternative; boundary=\"' . $boundary . '\"';\n+\t\t\t$headers[] = '';\n+\t\t\t$headers[] = 'This is a multi-part message in MIME format.';\n+\n+\t\t\t// Start multipart boundary\n+\t\t\t$headers[] = '--' . $boundary;\n+\n+\t\t\t// Add headers for the text version\n+\t\t\t$headers[] = 'Content-Type: text/plain; charset=\"UTF-8\"';\n+\t\t\t$headers[] = '';\n+\t\t\t$headers[] = $this->text;\n+\n+\t\t\t// Add another multipart boundary\n+\t\t\t$headers[] = '--' . $boundary;\n+\n+\t\t\t// Add headers for the HTML version\n+\t\t\t$headers[] = 'Content-Type: text/html; charset=\"UTF-8\"';\n+\t\t\t$headers[] = '';\n+\t\t\t$headers[] = $this->html;\n+\n+\t\t\t// And end multipart boundary\n+\t\t\t$headers[] = '--' . $boundary . '--';\n+\t\t}\n+\n+\t\t// Add final period to end the message data\n+\t\t$headers[] = '.';\n+\n+\t\t// Convert headers to string\n+\t\t$transport = implode (\"\\r\\n\", $headers);\n+\n+\t\treturn $transport;\n+\t}\n+\n+\t// Sends full SMTP request\n+\tprotected function smtpDeliver ()\n+\t{\n+\t\t// Send who the e-mail is coming from\n+\t\t$this->request ('MAIL FROM: <' . $this->from['email'] . '>');\n+\n+\t\t// Return false if the sender address failed\n+\t\tif ($this->getCode () !== 250) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t// Send recipient e-mail address\n+\t\t$this->request ('RCPT TO: <' . $this->to['email'] . '>');\n+\n+\t\t// Return false if the recipient address failed\n+\t\tif ($this->getCode () !== 250) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t// Send intent to begin data\n+\t\t$this->request ('DATA');\n+\n+\t\t// Return false if the data intent failed\n+\t\tif ($this->getCode () !== 354) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t// Send message data\n+\t\t$this->request ($this->smtpTransport ());\n+\n+\t\t// Return false if the message data failed\n+\t\tif ($this->getCode () === 250) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n+\n+\t// Disconnects from server\n+\tprotected function smtpDisconnect ()\n+\t{\n+\t\t// Do nothing if the connection is not a resource\n+\t\tif (!is_resource ($this->fp)) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// Send intent to close the connection\n+\t\t$this->request ('QUIT');\n+\n+\t\t// Ignore response\n+\t\t$this->getResponse ();\n+\n+\t\t// And close the connection\n+\t\tfclose ($this->fp);\n+\t}\n+\n+\t// Sends an e-mail\n+\tpublic function send ()\n+\t{\n+\t\t// Check if we can connect to the server\n+\t\tif ($this->smtpConnect () === true) {\n+\t\t\t// If so, send the e-mail\n+\t\t\t$result = $this->smtpDeliver ();\n+\t\t} else {\n+\t\t\t// If not, assume failure\n+\t\t\t$result = false;\n+\t\t}\n+\n+\t\t// Disconnect from the server\n+\t\t$this->smtpDisconnect ();\n+\n+\t\treturn $result;\n+\t}\n+}"
    },
    {
      "sha": "7fa3bf7d0751dcc0ede297ea40baff19f38cb7d2",
      "filename": "hashover/backend/classes/sourcecode.php",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/backend/classes/sourcecode.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/89cee94a25ca37663a4616faa29d068e8ba54de0/hashover/backend/classes/sourcecode.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/sourcecode.php?ref=89cee94a25ca37663a4616faa29d068e8ba54de0",
      "patch": "@@ -243,6 +243,11 @@ class SourceCode\n \t\t\t'name' => 'SetupChecks',\n \t\t\t'path' => 'backend/classes/setupchecks.php'\n \t\t),\n+\t\tarray (\n+\t\t\t'type' => 'Class',\n+\t\t\t'name' => 'SMTP',\n+\t\t\t'path' => 'backend/classes/smtp.php'\n+\t\t),\n \t\tarray (\n \t\t\t'type' => 'Class',\n \t\t\t'name' => 'SourceSode',"
    }
  ]
}
