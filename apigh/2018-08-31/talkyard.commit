{
  "sha": "a160f4e985aebbede18e4211d7860b64ce74b31d",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6YTE2MGY0ZTk4NWFlYmJlZGUxOGU0MjExZDc4NjBiNjRjZTc0YjMxZA==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2018-08-29T09:07:47Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2018-08-31T01:27:48Z"
    },
    "message": "Code review. And add &categoryId=..&topicTyp=.. to resume-draft urls\n\nAnd fix load/save drafts bug. And unapproved page title gone bug.",
    "tree": {
      "sha": "8f23338b5ea8d94a914fde670af0d19f448bc3c8",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/8f23338b5ea8d94a914fde670af0d19f448bc3c8"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/a160f4e985aebbede18e4211d7860b64ce74b31d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/a160f4e985aebbede18e4211d7860b64ce74b31d",
  "html_url": "https://github.com/debiki/talkyard/commit/a160f4e985aebbede18e4211d7860b64ce74b31d",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/a160f4e985aebbede18e4211d7860b64ce74b31d/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3ebc050c3b27cd536915b98a2429807f6fa31d22",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/3ebc050c3b27cd536915b98a2429807f6fa31d22",
      "html_url": "https://github.com/debiki/talkyard/commit/3ebc050c3b27cd536915b98a2429807f6fa31d22"
    }
  ],
  "stats": {
    "total": 484,
    "additions": 324,
    "deletions": 160
  },
  "files": [
    {
      "sha": "cdcff7a006ecd367833b6ced7d1de87f109106c9",
      "filename": "app/controllers/DraftsController.scala",
      "status": "modified",
      "additions": 41,
      "deletions": 34,
      "changes": 75,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/app/controllers/DraftsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/app/controllers/DraftsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/DraftsController.scala?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -59,7 +59,9 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n   private def upsertDraftImpl(body: JsValue, request: ApiRequest[_]): Result = {\n     import request.{dao, theRequester => requester}\n \n-    throwForbiddenIf(requester.isGroup, \"EdE65AFRDJ2\", \"Groups may not save drafts\")\n+    throwForbiddenIf(requester.isGroup, \"TyE65AFRDJ2\", \"Groups may not save drafts\")\n+    throwForbiddenIf(0 <= requester.id && requester.id <= 9, \"TyE2ABKG5\",\n+      \"Special users may not save drafts\")\n \n     val locatorJson = (body \\ \"forWhat\").asOpt[JsObject] getOrThrowBadArgument(\n       \"TyE4AKBP20\", \"No draft locator: forWhat missing\")\n@@ -69,22 +71,25 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     val draftType = DraftType.fromInt(draftTypeInt) getOrThrowBadArgument(\n       \"TyE4AKBP22\", s\"Draft type not specified: ${locatorJson.toString}\")\n \n+    var anyPost: Option[Post] = None\n+\n     val pageId = (locatorJson \\ \"pageId\").asOpt[PageId]\n     val postNr = (locatorJson \\ \"postNr\").asOpt[PostNr]\n     val postId = (locatorJson \\ \"postId\").asOpt[PostId] orElse {\n       if (pageId.isDefined && postNr.isDefined) {\n-        // The browser currently doesn't send the post id, for new replies. [4BKG0BKR0]\n-        dao.loadPost(pageId.get, postNr.get).map(_.id)\n+        // The browser could maybe incl the post id, for new replies, [4BKG0BKR0]\n+        // so won't need to look it up here. But actually need to look it up anyway (7RWBJ3).\n+        anyPost = dao.loadPost(pageId.get, postNr.get)\n+        anyPost.map(_.id)\n       }\n       else {\n         None\n       }\n     }\n \n     // This currently rejects drafts for the very first comment, on an embedded comments page\n-    // — because the page hasn't yet been created; there's no page id, so no locator can\n-    // be constructed. COULD add an embeddingPageAltId field? as part of the locator?\n-    // UX SHOULD save draft also for this 1st blog post comment.  [BLGCMNT1]\n+    // — because the page hasn't yet been created, so there's no page id, so no locator can\n+    // be constructed. UX SHOULD save draft also for this 1st blog post comment.  [BLGCMNT1]\n     val draftLocator = Try(\n       DraftLocator(\n         draftType,\n@@ -104,7 +109,7 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n         draftNr = draftNr,\n         forWhat = draftLocator,\n         createdAt = now,\n-        lastEditedAt = Some(now),\n+        lastEditedAt = None, // createdAt will be used, if overwriting [5AKJWX0]\n         deletedAt = (body \\ \"deletedAt\").asOptWhen,\n         topicType = (body \\ \"topicType\").asOpt[Int].flatMap(PageRole.fromInt),\n         postType = (body \\ \"postType\").asOpt[Int].flatMap(PostType.fromInt),\n@@ -117,38 +122,37 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n       \"TyE4RBK02R9\", \"Draft empty. Delete it instead\")\n \n     if (draft.isNewTopic) {\n-      // For now, check later, when posting topic. The user can just pick another category,\n+      // For now, authorize this later, when posting topic. The user can just pick another category,\n       // in the categories dropdown, if current category turns out to be not allowed, when\n       // trying to post.\n     }\n-    else if (draft.isReply) {\n-      // Maybe good to know, directly, if not allowed to reply to this post?\n-\n-      val pageMeta = dao.getThePageMeta(draftLocator.pageId getOrDie \"TyE2ABS049S\")\n-      val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n-      val postType = draft.postType getOrDie \"TyER35SKS02GU\"\n-      val replyToPost =\n-        dao.loadPost(pageMeta.pageId, draftLocator.postNr getOrDie \"TyESRK0437\")\n-          .getOrElse(throwIndistinguishableNotFound(\"TyE4WEB93\"))\n-\n-      throwNoUnless(Authz.mayPostReply(\n-        request.theUserAndLevels, dao.getGroupIds(requester),\n-        postType, pageMeta, Vector(replyToPost), dao.getAnyPrivateGroupTalkMembers(pageMeta),\n-        inCategoriesRootLast = categoriesRootLast,\n-        permissions = dao.getPermsOnPages(categoriesRootLast)), \"EdEZBXK3M2\")\n-    }\n-    else if (draft.isEdit) {\n-      // Maybe good to know, directly, if may not edit?\n+    else if (draft.isReply || draft.isEdit) {\n+      // Maybe good to know, directly, if not allowed to reply to or edit this post?\n \n-      val post = dao.loadPostByUniqueId(draftLocator.postId.get) getOrElse throwIndistinguishableNotFound(\"TyE0DK9WRR\")\n+      val post = anyPost orElse dao.loadPostByUniqueId(  // (7RWBJ3)\n+        draftLocator.postId.get) getOrElse throwIndistinguishableNotFound(\"TyE0DK9WRR\")\n       val pageMeta = dao.getPageMeta(post.pageId) getOrElse throwIndistinguishableNotFound(\"TyE2AKBRE5\")\n       val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n \n-      throwNoUnless(Authz.mayEditPost(\n-        request.theUserAndLevels, dao.getGroupIds(requester),\n-        post, pageMeta, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n-        inCategoriesRootLast = categoriesRootLast,\n-        permissions = dao.getPermsOnPages(categoriesRootLast)), \"EdEZBXK3M2\")\n+      if (draft.isReply) {\n+        val postType = draft.postType getOrDie \"TyER35SKS02GU\"\n+        throwNoUnless(Authz.mayPostReply(\n+          request.theUserAndLevels, dao.getGroupIds(requester),\n+          postType, pageMeta, Vector(post), dao.getAnyPrivateGroupTalkMembers(pageMeta),\n+          inCategoriesRootLast = categoriesRootLast,\n+          permissions = dao.getPermsOnPages(categoriesRootLast)), \"EdEZBXK3M2\")\n+      }\n+      else {\n+        throwNoUnless(Authz.mayEditPost(\n+          request.theUserAndLevels, dao.getGroupIds(requester),\n+          post, pageMeta, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n+          inCategoriesRootLast = categoriesRootLast,\n+          permissions = dao.getPermsOnPages(categoriesRootLast)), \"EdEZBXK3M2\")\n+      }\n+    }\n+    else {\n+      // Don't think this can happen. Doesn't matter, will check authz later when\n+      // submitting draft, anyway.\n     }\n \n     val draftWithNr = dao.readWriteTransaction { tx =>\n@@ -166,7 +170,8 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n   }\n \n \n-  def listDrafts(userId: UserId): Action[Unit] = GetAction { request: GetRequest =>\n+  def listDrafts(userId: UserId): Action[Unit] = GetActionRateLimited(RateLimits.TouchesDbGetRequest) {\n+        request: GetRequest =>\n     import request.{dao, theRequester => requester}\n \n     // Tested here: [7WKABZP2]\n@@ -175,8 +180,10 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n       \"TyE2RDGWA8\", \"May not view other's drafts\")\n \n     SHOULD; OPTIMIZE // cache per user? don't want to touch the db all the time?\n-    SECURITY; COULD // rate limit? max 1 cache-miss req per 5 seconds on average?\n \n+    // Load drafts.\n+    // The drafts don't included the page title (that'd be dupl data) so we'll also\n+    // look up the page title and incl in the response.\n     val (drafts: immutable.Seq[Draft], pagePostNrsByPostId: Map[PostId, PagePostNr], pageIds) =\n         dao.readOnlyTransaction { tx =>\n       val ds = tx.listDraftsRecentlyEditedFirst(userId)"
    },
    {
      "sha": "94ab1cea86f5abf937ac98136da26a298e8d4614",
      "filename": "app/controllers/EditController.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/app/controllers/EditController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/app/controllers/EditController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/EditController.scala?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -43,9 +43,10 @@ class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n \n   REFACTOR // Move to DraftController?\n-  def loadDraftAndGuidelines(writingWhat: Int, draftType: Int, pageRole: String,\n-        categoryId: Option[Int], toUserId: Option[UserId], postId: Option[Int],\n-        pageId: Option[String], postNr: Option[Int]): Action[Unit] = GetAction { request =>\n+  def loadDraftAndGuidelines(writingWhat: Int, draftType: Int, pageRole: Int,\n+        categoryId: Option[Int], toUserId: Option[UserId],\n+        pageId: Option[String], postNr: Option[Int]): Action[Unit] =\n+      GetActionRateLimited(RateLimits.TouchesDbGetRequest) { request =>\n \n     import request.{dao, theRequester => requester}\n \n@@ -85,8 +86,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n     val writeWhat = WriteWhat.fromInt(writingWhat)\n \n-    val thePageRole = pageRole.toIntOption.flatMap(PageRole.fromInt) getOrElse throwBadArgument(\n-      \"DwE6PYK8\", \"pageRole\")\n+    val thePageRole = PageRole.fromInt(pageRole).getOrThrowBadArgument(\"TyE6PYK8\", \"pageRole\")\n \n     val guidelinesSafeHtml = writeWhat flatMap {\n       case WriteWhat.ChatComment =>\n@@ -124,7 +124,9 @@ class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n   /** Sends back a post's current CommonMark source to the browser.\n     * SHOULD change to pageId + postId (not postNr)  [idnotnr]\n     */\n-  def loadDraftAndText(pageId: String, postNr: Int): Action[Unit] = GetAction { request =>\n+  def loadDraftAndText(pageId: String, postNr: Int): Action[Unit] =\n+        GetActionRateLimited(RateLimits.TouchesDbGetRequest) { request =>\n+\n     import request.{dao, theRequester => requester}\n \n     val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdE4JBR01\")\n@@ -148,7 +150,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     }\n \n     // Not impossible that there're two drafts — if one has two browser tabs open at the same time,\n-    // and starts editing in both, at the same time. Weird. Just pick the random first one.\n+    // and starts editing in both, at the same time. Weird. Just pick one.\n     val anyDraft = anyDrafts.headOption\n \n     OkSafeJson(Json.obj( // LoadDraftAndTextResponse"
    },
    {
      "sha": "bf83d91197b85c7a5f71aedf72bf4c600814440f",
      "filename": "app/debiki/RateLimits.scala",
      "status": "modified",
      "additions": 15,
      "deletions": 4,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/app/debiki/RateLimits.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/app/debiki/RateLimits.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/RateLimits.scala?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -145,8 +145,18 @@ object RateLimits {\n   object ExpensiveGetRequest extends RateLimits {\n     val key = \"ExRq\"\n     val what = \"sent too many complicated HTTP GET requests\"\n-    def maxPerFifteenSeconds = 20             //  80/min\n-    def maxPerFifteenMinutes: Int = 30 * 15   //  30/min\n+    def maxPerFifteenSeconds = 15             //  60/min\n+    def maxPerFifteenMinutes: Int = 20 * 15   //  20/min\n+    def maxPerDay: Int = Unlimited\n+    def maxPerDayNewUser: Int = Unlimited\n+  }\n+\n+\n+  object TouchesDbGetRequest extends RateLimits {\n+    val key = \"DbRq\"\n+    val what = \"sent too many a bit complicated HTTP GET requests\"\n+    def maxPerFifteenSeconds = 25             //  100/min\n+    def maxPerFifteenMinutes: Int = 30 * 15   //   30/min\n     def maxPerDay: Int = Unlimited\n     def maxPerDayNewUser: Int = Unlimited\n   }\n@@ -373,9 +383,10 @@ object RateLimits {\n   object DraftSomething extends RateLimits {\n     val key = \"Drft\"\n     val what = \"edited or deleted your drafts too quickly\"\n-    def maxPerFifteenSeconds = 20\n+    def maxPerFifteenSeconds = 15  // 60/min = one per second, auto-saving every 2nd second [7AKBJ42]\n     def maxPerFifteenMinutes: Int = Unlimited\n-    def maxPerDay: Int = Unlimited\n+    // 3 people at the same ip, edits constantly for 2.5 hours = 150 min, auto-saving 30 times / minute.\n+    def maxPerDay: Int = 3 * 150 * 30\n     def maxPerDayNewUser: Int = Unlimited\n   }\n "
    },
    {
      "sha": "1712da43c8e601f05a8a0f915afa7f4c24b97701",
      "filename": "app/debiki/ReactJson.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/app/debiki/ReactJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/app/debiki/ReactJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/ReactJson.scala?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -1417,16 +1417,16 @@ object JsonMaker {\n     import inPageInfo._\n     val postType: Option[Int] = if (post.tyype == PostType.Normal) None else Some(post.tyype.toInt)\n \n-    val (anySanitizedHtml: Option[String], isApproved: Boolean) =\n+    val (anySanitizedHtml: Option[String], unsafeSource: Option[String], isApproved: Boolean) =\n       if ((post.isBodyHidden || post.isDeleted) && !showHidden) {\n-        (None, post.approvedAt.isDefined)\n+        (None, post.approvedSource, post.approvedAt.isDefined)\n       }\n       else if (includeUnapproved) {\n         val htmlString = renderer.renderAndSanitize(post, IfCached.Use)\n-        (Some(htmlString), post.isCurrentVersionApproved)\n+        (Some(htmlString), Some(post.currentSource), post.isCurrentVersionApproved)\n       }\n       else {\n-        (post.approvedHtmlSanitized, post.approvedAt.isDefined)\n+        (post.approvedHtmlSanitized, post.approvedSource, post.approvedAt.isDefined)\n       }\n \n     // For now, ignore ninja edits of the very first revision, because otherwise if\n@@ -1469,7 +1469,7 @@ object JsonMaker {\n       \"tags\" -> JsArray(tags.toSeq.map(JsString)))\n \n     if (post.isBodyHidden) fields :+= \"isBodyHidden\" -> JsTrue\n-    if (post.isTitle) fields :+= \"unsafeSource\" -> JsStringOrNull(post.approvedSource)\n+    if (post.isTitle) fields :+= \"unsafeSource\" -> JsStringOrNull(unsafeSource)\n \n     JsObject(fields)\n   }"
    },
    {
      "sha": "72d944afad1863901a4658acf99c24dd70ade9a7",
      "filename": "client/app/ReactActions.ts",
      "status": "modified",
      "additions": 38,
      "deletions": 36,
      "changes": 74,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/ReactActions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/ReactActions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/ReactActions.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2014 Kaj Magnus Lindberg\n+ * Copyright (c) 2014-2018 Kaj Magnus Lindberg\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU Affero General Public License as\n@@ -437,15 +437,16 @@ export function loadAndShowPost(postNr: PostNr, showChildrenToo?: boolean, callb\n \n /**\n  * If #post-X is specified in the URL, ensures all posts leading up to\n- * and including X have been loaded. Then scrolls to X.\n+ * and including X have been loaded. Then scrolls to X, and maybe opens the editor\n+ * to edit it or to reply (depending on other hash fragment parts).\n  */\n export function doUrlFragmentAction(newHashFragment?: string) {\n-  // How to interpret an action, might depend on what type of page the current page is.\n+  // How we'll interpret a hash fragment action, might depend on what type of page we're at.\n   // Is this a HACK? To access the store here?\n   const store: Store = ReactStore.allData();\n   const currentPage: Page | undefined = store.currentPage;\n \n-  const fragAction = findUrlFragmentAction(newHashFragment);\n+  const fragAction: FragAction = findUrlFragmentAction(newHashFragment);\n   if (!fragAction) {\n     // The default action for chat pages, is to scroll to the end.\n     if (currentPage && page_isChatChannel(currentPage.pageRole)) {\n@@ -455,25 +456,25 @@ export function doUrlFragmentAction(newHashFragment?: string) {\n     return;\n   }\n \n+  // @ifdef DEBUG\n   console.debug(`Doing url #action ${fragAction.type}...`);\n+  // @endif\n \n   const postNr: PostNr | undefined = fragAction.postNr;\n   if (!postNr) {\n     switch (fragAction.type) {\n       case FragActionType.ComposeDirectMessage:\n-        // For now, instead, see [4JABRF0].\n+        // For now, instead handled in  maybeOpenMessageEditor() in users-page.more.ts [4JABRF0].\n         break;\n       case FragActionType.ComposeForumTopic:\n-        Server.loadEditorAndMoreBundles(function() {\n-          const categoryId = 2; // for now\n-          const pageRole = PageRole.Discussion; // for now\n-          debiki2.editor.editNewForumPage(categoryId, pageRole);\n-        });\n+        editor.editNewForumPage(fragAction.categoryId, fragAction.topicType);\n         // Don't re-open the editor, if going to another page, and then back.\n         location.hash = '';\n         break;\n       default:\n+        // @ifdef DEBUG\n         die('TyE5AKBR3');\n+        // @endif\n     }\n     return;\n   }\n@@ -482,11 +483,12 @@ export function doUrlFragmentAction(newHashFragment?: string) {\n \n   const postElem = $byId(postAnchor);\n   if (postElem) {\n+    // Do frag action directly — post already loaded.\n     debiki.internal.showAndHighlightPost(postElem);\n     doAfterLoadedAnyPost();\n   }\n   else {\n-    // (Will highlight it, right?)\n+    // Load post, then do the frag action. (loadAndShowPost() highlights it, right?)\n     loadAndShowPost(postNr, undefined, doAfterLoadedAnyPost);\n   }\n \n@@ -526,7 +528,7 @@ export function doUrlFragmentAction(newHashFragment?: string) {\n     // navigating away, then, probably one is done editing? Or has maybe submitted\n     // the post already.)\n     if (resetHashFrag) {\n-      // Does this sometimes make the browser annyoyingly scroll-jump so this post is at\n+      // Does this sometimes make the browser annoyingly scroll-jump so this post is at\n       // the very top of the win, occluded by the topbar?\n       location.hash = '#' + postAnchor;\n     }\n@@ -547,15 +549,30 @@ export function findUrlFragmentAction(hashFragment?: string): FragAction | undef\n     return result;\n   }\n \n-  if (theHashFrag.indexOf(FragActionHashComposeTopic) >= 0)\n-    return { type: FragActionType.ComposeForumTopic };\n+  const draftNr = findIntInHashFrag(FragParamDraftNr, theHashFrag);\n+  const topicType = findIntInHashFrag(FragParamTopicType, theHashFrag);\n \n-  if (theHashFrag.indexOf(FragActionHashComposeMessage) >= 0)\n-    return { type: FragActionType.ComposeDirectMessage };\n+  if (theHashFrag.indexOf(FragActionHashComposeTopic) >= 0) {\n+    const categoryId = findIntInHashFrag(FragParamCategoryId, theHashFrag);\n+    return {\n+      type: FragActionType.ComposeForumTopic,\n+      draftNr,\n+      categoryId,\n+      topicType,\n+    };\n+  }\n+\n+  if (theHashFrag.indexOf(FragActionHashComposeMessage) >= 0) {\n+    return {\n+      type: FragActionType.ComposeDirectMessage,\n+      topicType: PageRole.FormalMessage,\n+      draftNr,\n+    };\n+  }\n \n   // The rest of the actions are for a specific post.\n \n-  const postNr: PostNr | undefined = findPostNrInHashFragment(theHashFrag);\n+  const postNr: PostNr | undefined = findIntInHashFrag(FragParamPostNr, theHashFrag);\n   if (!postNr)\n     return undefined;\n \n@@ -570,29 +587,14 @@ export function findUrlFragmentAction(hashFragment?: string): FragAction | undef\n     actionType = FragActionType.ScrollToPost;\n   }\n \n-  const draftNr: DraftNr | undefined = findDraftNrInHashFragment(theHashFrag);\n-\n   return { type: actionType, postNr, draftNr };\n }\n \n \n-function findPostNrInHashFragment(theHash: string): PostNr | undefined {\n-  // AngularJS (I think it is) somehow inserts a '/' at the start of the hash. I'd\n-  // guess it's Angular's router that messes with the hash. I don't want the '/' but\n-  // don't know how to get rid of it, so simply ignore it.\n-  const hashIsPostId = /#post-\\d+/.test(theHash);\n-  const hashIsSlashPostId = /#\\/post-\\d+/.test(theHash);\n-  if (hashIsPostId) return parseInt(theHash.substr(6, 999));\n-  if (hashIsSlashPostId) return parseInt(theHash.substr(7, 999));\n-}\n-\n-\n-function findDraftNrInHashFragment(hashFragment: string): DraftNr | undefined {\n-  const matches = /&draftNr=(\\d+)/.exec(hashFragment);\n-  if (matches) {\n-    const draftNrStr = matches[1];\n-    return parseInt(draftNrStr);\n-  }\n+function findIntInHashFrag(valuePrefix: string, theHash: string): PostNr | undefined {\n+  const index = theHash.indexOf(valuePrefix);\n+  const anyInt = index >= 0 ? parseInt(theHash.substr(index + valuePrefix.length, 999)) : undefined;\n+  return _.isNaN(anyInt) ? undefined : anyInt;\n }\n \n "
    },
    {
      "sha": "1c0acc144a619f40db5f0524afa629aea426ce4b",
      "filename": "client/app/Server.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/Server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/Server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/Server.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -939,7 +939,7 @@ export function listUsernames(prefix: string, pageId: PageId, success: (username\n \n \n // Currently doesn't load any draft.\n-// Later: add reply-to-post-unique-id, to load the correct draft?\n+// Later: add reply-to-post-unique-id, to load the correct draft?  [idnotnr]\n //\n export function loadDraftAndGuidelines(draftLocator: DraftLocator, writingWhat: WritingWhat,\n       categoryId: number, pageRole: PageRole,"
    },
    {
      "sha": "47a69380a49f4436b35f125e344b0fa9e1fa6943",
      "filename": "client/app/constants.ts",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/constants.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/constants.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/constants.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -110,4 +110,13 @@ const FragActionHashComposeTopic = '#composeForumTopic';\n const FragActionHashComposeMessage = '#composeDirectMessage';\n const FragActionHashScrollLatest = '#scrollToLatestPost';\n \n+// The post nr param looks a bit different, '-' not '=', because it's used in urls to link to\n+// posts, so nice if it uses '-' like url tend to do. Whereas the other params are more like\n+// api request params to the Javascript code, so then they can look like code & url params?\n+const FragParamPostNr = '#post-';\n+const FragParamDraftNr = '&draftNr=';\n+const FragParamTopicType = '&topicType=';\n+const FragParamCategoryId = '&categoryId=';\n+\n+\n // vim: fdm=marker et ts=2 sw=2 tw=0 fo=r list"
    },
    {
      "sha": "7ccba3069032c3bb365f97525e33a0421a8fe1f0",
      "filename": "client/app/editor/editor.editor.ts",
      "status": "modified",
      "additions": 20,
      "deletions": 12,
      "changes": 32,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/editor/editor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/editor/editor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/editor/editor.editor.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -101,7 +101,7 @@ export const Editor = createComponent({\n \n   componentWillMount: function() {\n     this.updatePreview = _.debounce(this.updatePreview, 333);\n-    this.saveDraftDebounced = _.debounce(this.saveDraftNow, 2022);\n+    this.saveDraftDebounced = _.debounce(this.saveDraftNow, 2022);  // [7AKBJ42]\n   },\n \n   componentDidMount: function() {\n@@ -257,8 +257,8 @@ export const Editor = createComponent({\n         this.setState({\n           text: this.state.text + perhapsNewline + '\\n' +\n             // (There's a sanitizer for this — for everything in the editor.)\n-          \"<!-- Uploaded file name:  \" + file.name + \"  -->\\n\" +\n-          linkHtml,\n+            \"<!-- Uploaded file name:  \" + file.name + \"  -->\\n\" +\n+            linkHtml,\n           draftStatus: DraftStatus.ShouldSave,\n         }, () => {\n           this.saveDraftDebounced();\n@@ -406,6 +406,8 @@ export const Editor = createComponent({\n       this.showEditor({ scrollToShowPostNr: response.postNr });\n       const store: Store = this.state.store;\n       const draft: Draft | undefined = response.draft;\n+      // This can fail, if the post was moved by staff to a different page? Then it\n+      // gets a new postNr. Then do what? Show a \"this post was moved to: ...\" dialog?\n       dieIf(postNr !== response.postNr, 'TyE23GPKG4');\n       this.setState({\n         anyPostType: null,\n@@ -773,6 +775,7 @@ export const Editor = createComponent({\n       locator.draftType = DraftType.Topic;\n       locator.categoryId = this.state.newForumTopicCategoryId;\n       // Need to know in which forum (sub community) the new page should be placed.\n+      // (Hmm or could lookup via category id?)\n       locator.pageId = this.state.editorsPageId;\n     }\n     else {\n@@ -799,7 +802,7 @@ export const Editor = createComponent({\n   },\n \n   saveDraftNow: function(callbackThatClosesEditor: () => void | undefined, useBeacon?: UseBeacon) {\n-    // TESTS_MISSING\n+    // Tested here: 7WKABZP2\n     // A bit dupl code [4ABKR2J0]\n \n     // If we're closing the page, do try saving anyway, using becaon, because the current non-beacon\n@@ -826,20 +829,23 @@ export const Editor = createComponent({\n     // which might be open in another browser tab. Could have the server check if there's\n     // a newer version of the draft (saved in another browser tab) and, if so, ask if\n     // wants to overwrite or not?  [5ABRQP0]  — This happens to me sometimes actually, in Facebook,\n-    // when composing replies there. Apparently FB has this same lost-updates bug in their editor.\n+    // when composing replies there; FB has this lost-updates bug in their editor (2018)?\n \n     // Delete any old draft, if text empty.\n     if (!text && !title) {\n       if (oldDraft) {\n         console.debug(\"Deleting draft...\");\n         this.setState({\n-          // When closing editor, after having deleted text, it's totally uninteresting that the\n-          // draft gets deleted? (cannot show a modal dialog about that)\n-          // Otherwise, a bit useful with a non-obtrusive small info about that.\n+          // When closing editor, after having deleted all text, it's rather uninteresting\n+          // that the draft gets deleted — don't show a modal dialog about that.\n+          // Still a bit interesting? so if editor still open, do show a small non-obtrusive\n+          // info about the draft getting deleted.\n           draftStatus: callbackThatClosesEditor ?\n               DraftStatus.NothingHappened : DraftStatus.Deleting,\n         });\n+        this.isSavingDraft = true;\n         Server.deleteDrafts([oldDraft.draftNr], useBeacon || (() => {\n+          this.isSavingDraft = false;\n           console.debug(\"...Deleted draft.\");\n           this.setState({\n             draft: null,\n@@ -1545,6 +1551,8 @@ function makeDefaultReplyText(store: Store, postIds: PostId[]): string {\n // We currently don't save any draft, for the 1st comment on a new blog post :-(   [BLGCMNT1]\n // because the page doesn't yet exist; there's no page id to use in the draft locator.\n function shallSkipDraft(props: { store: Store, messageToUserIds }): boolean {\n+  // If is-no-page, then the page doesn't exist. However, we might be in the user\n+  // profile section, writing a direct message to someone — then we do save drafts.\n   return store_isNoPage(props.store) && !props.messageToUserIds.length;\n }\n \n@@ -1565,23 +1573,23 @@ export function DraftStatusInfo(props: { draftStatus: DraftStatus, draftNr: numb\n   const draftNr: number | string = props.draftNr || '';\n   const draftErrorStatusCode: number | undefined = props.draftErrorStatusCode;\n \n-  switch (props.draftStatus) {\n+  switch (props.draftStatus) {  // I18N all draft statuses\n     case DraftStatus.NothingHappened: break;\n     case DraftStatus.EditsUndone: draftStatusText = \"Unchanged.\"; break;\n     case DraftStatus.Saved: draftStatusText = `Draft ${draftNr} saved.`; break;\n     case DraftStatus.Deleted: draftStatusText = `Draft ${draftNr} deleted.`; break;\n     case DraftStatus.ShouldSave: draftStatusText = `Will save draft ${draftNr} ...`; break;\n-    case DraftStatus.SavingSmall: draftStatusText = `Saving draft ${draftNr} ...`; break;  // I18N\n+    case DraftStatus.SavingSmall: draftStatusText = `Saving draft ${draftNr} ...`; break;\n     // UX COULD show in modal dialog, and an \"Ok I'll wait until you're done\" button, and a Cancel button.\n     case DraftStatus.SavingBig: draftStatusText = `Saving draft ${draftNr} ...`; break;\n     case DraftStatus.Deleting: draftStatusText = `Deleting draft ${draftNr} ...`; break;\n     case DraftStatus.CannotSave:\n       draftErrorClass = ' s_DfSts-Err';\n       let details: string;\n-      if (draftErrorStatusCode === 403) details = \"Access denied\";  // I18N\n+      if (draftErrorStatusCode === 403) details = \"Access denied\";\n       else if (draftErrorStatusCode) details = \"Error \" + draftErrorStatusCode;\n       else details = \"No internet connection\";  // I18N reuse string\n-      draftStatusText = \"Cannot save draft: \" + details;  // I18N\n+      draftStatusText = \"Cannot save draft: \" + details;\n       break;\n   }\n "
    },
    {
      "sha": "3ca9c80a9890b21fe12f2bc6bcf1a18178dc1041",
      "filename": "client/app/forum/forum.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/forum/forum.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/forum/forum.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/forum/forum.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -1250,7 +1250,7 @@ const TopicRow = createComponent({\n \n     const orderOffset: OrderOffset = this.props.orderOffset;\n \n-    const activeAt = Link({ to: topic.url + '#scrollToLatestPost' },\n+    const activeAt = Link({ to: topic.url + FragActionHashScrollLatest },\n         prettyLetterTimeAgo(\n           orderOffset.sortOrder === TopicSortOrder.CreatedAt\n             ? topic.createdAtMs"
    },
    {
      "sha": "e0f712a768b86ebfc32b1c97d7ed412218ab9a18",
      "filename": "client/app/links.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/links.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/links.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/links.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -111,17 +111,19 @@ export function linkToDraftSource(draft: Draft, pageId?: PageId, postNr?: PostNr\n   const locator = draft.forWhat;\n \n   // The current page id and post nr, might be different from draft.pageId and draft.postNr,\n-  // if the post was moved to another page. — Maybe shoud store only draft post id,\n-  // not page id & post nr?\n+  // if the post was moved to another page. So better use pageId, it's up-to-date the correct\n+  // page id directly from the server.\n   const maybeNewPageUrl = (): string => origin() + '/-' + (pageId || locator.pageId);\n \n   let theLink;\n \n   switch (locator.draftType) {\n     case DraftType.Topic:\n-      // Incl page url, so, in case the topic list is located at e.g. /forum/ or\n-      // /sub-community/ instead of /, we'll go to the right place.\n+      // Incl page url, so we'll go to the right place, also if the topic list is located at e.g.\n+      // /forum/  or  /sub-community/ instead of  /.\n       theLink = origin() + '/-' + locator.pageId + FragActionHashComposeTopic;\n+      if (draft.topicType) theLink += FragParamTopicType + draft.topicType;\n+      if (locator.categoryId) theLink += FragParamCategoryId + locator.categoryId;\n       break;\n     case DraftType.DirectMessage:\n       theLink = linkToSendMessage(locator.toUserId);\n@@ -130,24 +132,24 @@ export function linkToDraftSource(draft: Draft, pageId?: PageId, postNr?: PostNr\n       // No fragment action needed for chat messages — then the chat message input box is shown\n       // by default, and will load the draft. Do incl a '#' hash though so + &draftNr=... works.\n       const hashFragmentAction = draft.postType === PostType.ChatMessage ? '#' :\n-          '#post-' + locator.postNr + FragActionAndReplyToPost;\n+          FragParamPostNr + locator.postNr + FragActionAndReplyToPost;\n       theLink = maybeNewPageUrl() + hashFragmentAction;\n       break;\n     case DraftType.Edit:\n-      theLink = maybeNewPageUrl() + '#post-' + postNr + FragActionAndEditPost;\n+      theLink = maybeNewPageUrl() + FragParamPostNr + postNr + FragActionAndEditPost;\n       break;\n     default:\n-      die(\"Unknown draft source [TyE5WADK204]\")\n+      die(`Unknown draft type: ${locator.draftType} [TyE5AD2M4]`);\n   }\n \n-  theLink += '&draftNr=' + draft.draftNr;\n+  theLink += FragParamDraftNr + draft.draftNr;\n   return theLink;\n }\n \n \n export function linkToNotificationSource(notf: Notification): string {\n   if (notf.pageId && notf.postNr) {\n-    return origin() + '/-' + notf.pageId + '#post-' + notf.postNr;\n+    return origin() + '/-' + notf.pageId + FragParamPostNr + notf.postNr;\n   }\n   else {\n     die(\"Unknown notification type [EsE5GUKW2]\")"
    },
    {
      "sha": "90a4cec9b290f42b37c34f058e1604670ac11492",
      "filename": "client/app/model.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/model.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/model.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/model.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -81,6 +81,8 @@ interface RedirPathProps {\n  */\n interface FragAction {\n   type: FragActionType;\n+  categoryId?: CategoryId;\n+  topicType?: PageRole;\n   postNr?: PostNr;\n   draftNr?: DraftNr;\n }"
    },
    {
      "sha": "b6fb0a5be8d67669f816bce96ac94b7aa9c21262",
      "filename": "client/app/page/chat.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/page/chat.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/page/chat.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/page/chat.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -367,7 +367,7 @@ const ChatMessageEditor = createComponent({\n       return;\n \n     // If we're closing the page, do try saving anyway, using becaon, because the current non-beacon\n-    // request will probably be aborted by the browser (since, if beacon, the page is getting unloaded).\n+    // request will probably be aborted by the browser? (since, if beacon, the page is getting unloaded)\n     if (this.isSavingDraft && !useBeacon)\n       return;\n \n@@ -404,7 +404,9 @@ const ChatMessageEditor = createComponent({\n       if (oldDraft) {\n         console.debug(`Deleting draft${withBeacon}...`);\n         this.setState({ draftStatus: DraftStatus.Deleting });\n+        this.isSavingDraft = true;\n         Server.deleteDrafts([oldDraft.draftNr], useBeacon || (() => {\n+          this.isSavingDraft = false;\n           console.debug(\"...Deleted draft.\");\n           this.setState({\n             draft: null,"
    },
    {
      "sha": "78cda40cf2d943ba50dfeeb1fa8302909b4177b1",
      "filename": "client/app/page/discussion.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/page/discussion.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/page/discussion.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/page/discussion.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -362,7 +362,7 @@ export const Title = createComponent({\n \n     const deletedOrUnapprovedInfo = titlePost.isApproved ? false :\n         r.span({ className: 'esPendingApproval' },\n-          '(' + page.pageDeletedAtMs ? t.d.PageDeld : t.d.TitlePendAppr + ')');\n+          '(' + (page.pageDeletedAtMs ? t.d.PageDeld : t.d.TitlePendAppr) + ')');\n \n     // Insert the title as plain text (don't interpret any html tags — that'd let Mallory mess up\n     // the formatting, even if sanitized).\n@@ -617,7 +617,7 @@ const RootPostAndComments = createComponent({\n \n     const notYetApprovedMaybeDeletedInfo = rootPost.isApproved ? false :\n         r.div({ className: 'esPendingApproval' },\n-          '(' + page.pageDeletedAtMs ? t.d.PageDeld : t.d.TextPendingApproval + ')');\n+          '(' + (page.pageDeletedAtMs ? t.d.PageDeld : t.d.TextPendingApproval) + ')');\n \n     const deletedCross = !page.pageDeletedAtMs ? null :\n         r.div({ className: 's_Pg_DdX' });"
    },
    {
      "sha": "0eff8b4efc50c787733a404135ee3a45f30fea36",
      "filename": "client/app/pubsub/subscriptions.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/pubsub/subscriptions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/pubsub/subscriptions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/pubsub/subscriptions.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -108,7 +108,7 @@ export function subscribeToServerEvents() {\n       });\n     }\n     else {\n-      // If the server could reply with an error code, then the internet connection works, right.\n+      // If the server couldn't reply with an error code, there's likely no internet connection?\n       if (!errorStatusCode) {\n         $h.addClasses(document.documentElement, 's_NoInet');\n       }"
    },
    {
      "sha": "dac5fef38a563db14b4f0978de4af4be39183207",
      "filename": "client/app/users/user-drafts-etc.more.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/users/user-drafts-etc.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/users/user-drafts-etc.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/users/user-drafts-etc.more.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -41,6 +41,7 @@ export const UserDrafts = createFactory({\n     this.isGone = true;\n   },\n \n+  // SHOULD Switch to componentDidUpdate instead, see  users-page.more.ts  for how.\n   componentWillReceiveProps: function(nextProps: any) {\n     // Dupl code, also in view notfs. [7WUBKZ0]\n     const me: Myself = this.props.store.me;\n@@ -71,7 +72,7 @@ export const UserDrafts = createFactory({\n         pagePostNrsByPostId: response.pagePostNrsByPostId,\n       });\n     }, () => {\n-      // Clear state.notfs, in case we're no longer allowed to view the drafts.\n+      // Clear state.drafts, in case we're no longer allowed to view the drafts.\n       this.setState({ error: true, drafts: null });\n     });\n   },\n@@ -80,7 +81,7 @@ export const UserDrafts = createFactory({\n     // Dupl code, also in view notfs. [7WUBKZ0]\n     if (this.state.error)\n       return (\n-        r.p({ className: 'e_UP_Notfs_Err' },\n+        r.p({ className: 'e_Dfs-Err' },\n           _.isString(this.state.error) ? this.state.error : \"Error [EsE7YKW2].\"));\n \n     const drafts: Draft[] = this.state.drafts;\n@@ -99,7 +100,7 @@ export const UserDrafts = createFactory({\n     const draftElems = drafts.map((draft: Draft) =>\n         r.li({ key: draft.draftNr },\n           Draft({ draft, pageTitlesById: this.state.pageTitlesById,\n-            pagePostNrsByPostId: this.state.pagePostNrsByPostId, verbose: true })));\n+            pagePostNrsByPostId: this.state.pagePostNrsByPostId })));\n \n     return (\n       r.div({},\n@@ -112,7 +113,7 @@ export const UserDrafts = createFactory({\n \n \n function Draft(props: { draft: Draft, pageTitlesById: { [pageId: string]: string },\n-        pagePostNrsByPostId: { [pageId: string]: [PageId, PostNr] }, verbose: boolean }) {\n+        pagePostNrsByPostId: { [postId: string]: [PageId, PostNr] } }) {\n   const draft = props.draft;\n   const forWhat: DraftLocator = draft.forWhat;\n \n@@ -150,10 +151,10 @@ function Draft(props: { draft: Draft, pageTitlesById: { [pageId: string]: string\n \n     title = \"Your title: \" + title || \"(No title)\";  // I18N\n \n-    if (draft.forWhat.draftType === DraftType.DirectMessage) {\n+    if (forWhat.draftType === DraftType.DirectMessage) {\n       what = \"Direct message\"; // I18N\n     }\n-    else if (draft.forWhat.draftType === DraftType.Topic) {\n+    else if (forWhat.draftType === DraftType.Topic) {\n       what = \"New forum topic\"; // I18N\n     }\n     else {\n@@ -169,6 +170,9 @@ function Draft(props: { draft: Draft, pageTitlesById: { [pageId: string]: string\n     textTruncated += ' ...';\n   }\n \n+  // Here, for a post, pageId is accurate also if the post was moved to an new page by staff.\n+  // Then, draft.pageId is the page where the draft was created — and pageId is where it's\n+  // located now, and to where we should go to resume writing.\n   return (\n     Link({ to: linkToDraftSource(draft, pageId, postNr), className: 's_Dfs_Df' },\n       r.div({ className: 's_Dfs_Df_Wht' }, what ),"
    },
    {
      "sha": "bc832f3effb34b8dda0343e01033dea3a341682f",
      "filename": "client/app/users/user-notifications.more.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/users/user-notifications.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/client/app/users/user-notifications.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/users/user-notifications.more.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -41,6 +41,7 @@ export const UserNotifications = createFactory({\n     this.isGone = true;\n   },\n \n+  // SHOULD Switch to componentDidUpdate instead, see  users-page.more.ts  for how.\n   componentWillReceiveProps: function(nextProps: any) {\n     // Dupl code, also in view drafts. [7WUBKZ0]\n     const me: Myself = this.props.store.me;"
    },
    {
      "sha": "f1758332712d4f712e0b886032ff3ce684b7f537",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/conf/routes",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/conf/routes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf/routes?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -200,7 +200,7 @@ POST  /-/vote                   controllers.VoteController.handleVotes\n GET   /-/load-voters            controllers.VoteController.loadVoters(postId: Int, voteType: Int)\n POST  /-/flag                   controllers.Application.flag\n \n-GET   /-/load-draft-and-guidelines controllers.EditController.loadDraftAndGuidelines(writingWhat: Int, draftType: Int, pageRole, categoryId: Option[Int], toUserId: Option[Int], postId: Option[Int], pageId: Option[String], postNr: Option[Int])\n+GET   /-/load-draft-and-guidelines controllers.EditController.loadDraftAndGuidelines(writingWhat: Int, draftType: Int, pageRole: Int, categoryId: Option[Int], toUserId: Option[Int], pageId: Option[String], postNr: Option[Int])\n GET   /-/load-draft-and-text    controllers.EditController.loadDraftAndText(pageId, postNr: Int)\n POST  /-/edit                   controllers.EditController.edit\n POST  /-/edit-title-save-settings controllers.PageTitleSettingsController.editTitleSaveSettings"
    },
    {
      "sha": "93d596161ccad33b55fa5384d25d44b9bc7917d0",
      "filename": "docs/e2e-tests-map.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/docs/e2e-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/docs/e2e-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-map.txt?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -75,6 +75,7 @@ navigation:\n           - navigation-as-admin.test.ts  TyT7WAAR2J4\n \n unapproved comments -\n+          - new-member-allow-approve.2browsers.test.ts  TyT4AKBJ20\n   embedded + not-embedded -\n     see own, not others:\n     edit own:"
    },
    {
      "sha": "57f2b2b8c103acd8016ed3c9da87f09b9da679ff",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/Post.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/modules/ed-core/src/main/scala/com/debiki/core/Post.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/modules/ed-core/src/main/scala/com/debiki/core/Post.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/Post.scala?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -222,11 +222,14 @@ object DraftType {\n   * @param categoryId\n   * @param toUserId\n   * @param pageId — for new topics, is the page id of the forum where the topic is to be created,\n-  *   in case there're many forums (sub communities).\n+  *   in case there're many forums (sub communities). Hmm should lookup via category id instead,\n+  *   later when/if will be possible to move categories between forums? [subcomms]\n   *   For replies and edits, is the page the user was at, when writing.\n   *   Maybe, however, the post being edited, or replied to, will be moved elsewhere\n   *   by staff — so postId will be used, when finding the post, later when resuming\n-  *   writing.\n+  *   writing (rather than pageId and postNr). Still, nice to have pageId, in case staff\n+  *   moves the post to a page one may not access — then, good to know on which page it was\n+  *   located, originally, when starting typing the draft (so one knows what topic it concerns).\n   * @param postNr\n   * @param postId\n   */\n@@ -281,6 +284,9 @@ case class Draft(\n   require(forWhat.isNewTopic == topicType.isDefined, \"TyEBDDRFT08\")\n   require(!isReply || postType.isDefined, \"Draft postType missing, for a reply draft [TyEBDDRFT09]\")\n   require(postType.isEmpty || isReply || isEdit, \"Draft postType present [TyEBDDRFT10]\")\n+  require(!isReply || text.trim.nonEmpty, \"Empty draft, for replying — delete instead [TyEBDDRFT11]\")\n+  require(!isEdit || text.trim.nonEmpty, \"Empty draft, for edits — delete instead [TyEBDDRFT12]\")\n+  require(isNewTopic || title.isEmpty, \"Non new topic draft, with a title [TyEBDDRFT13]\")\n \n   def isNewTopic: Boolean = forWhat.isNewTopic\n   def isReply: Boolean = forWhat.draftType == DraftType.Reply"
    },
    {
      "sha": "a500f13dd84af161c81a1474b25003e84a811dcf",
      "filename": "modules/ed-dao-rdb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-dao-rdb?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -1 +1 @@\n-Subproject commit fffe2f9153201267fb20f56e9c66387c981f1fab\n+Subproject commit a500f13dd84af161c81a1474b25003e84a811dcf"
    },
    {
      "sha": "308c134b1e9063db2fcc5670bc01fa52a8bccefe",
      "filename": "tests/app/debiki/dao/DraftsDaoAppSpec.scala",
      "status": "modified",
      "additions": 73,
      "deletions": 12,
      "changes": 85,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/app/debiki/dao/DraftsDaoAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/app/debiki/dao/DraftsDaoAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/debiki/dao/DraftsDaoAppSpec.scala?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -28,6 +28,7 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n   var userOne: User = _\n   var userTwo: User = _\n \n+  var forumPageId: PageId = _\n   var categoryId: CategoryId = _\n \n   var pageId: PageId = _\n@@ -36,6 +37,8 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n   var draftTwoEdited: Draft = _\n   var draftThreeOlderDirectMessage: Draft = _\n   var draftThreeDeleted: Draft = _\n+  var draftThreeUndeleted: Draft = _\n+  var draftThreeNewest: Draft = _\n   var draftFourNewTopic: Draft = _\n   var draftFiveForEdits: Draft = _\n \n@@ -63,9 +66,11 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n         bodyTextAndHtml = dao.textAndHtmlMaker.forBodyOrComment(\"Text text.\"),\n         authorId = SystemUserId, browserIdData, dao, anyCategoryId = None)\n \n-      categoryId =\n+      val createForumResult =\n           dao.createForum(\"Forum\", s\"/drafts-forum/\", isForEmbCmts = false,\n-            Who(owner.id, browserIdData)).defaultCategoryId\n+            Who(owner.id, browserIdData))\n+      categoryId = createForumResult.defaultCategoryId\n+      forumPageId = createForumResult.pagePath.pageId.get\n     }\n \n     \"find the first draft nr\" in {\n@@ -117,7 +122,8 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n     \"save another draft, for a new topic\" in {\n       val locator = DraftLocator(\n         DraftType.Topic,\n-        categoryId = Some(categoryId))\n+        categoryId = Some(categoryId),\n+        pageId = Some(forumPageId))\n \n       draftTwoNewerForNewTopic = Draft(\n         byUserId = userOne.id,\n@@ -216,7 +222,7 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n       }\n     }\n \n-    \"load the deleted draft, by nr, it's now in deleted status\" in {\n+    \"load the deleted draft, by nr, it's now in deleted status [TyT2ARDW3]\" in {\n       dao.readOnlyTransaction { tx =>\n         draftThreeDeleted.draftNr mustBe draftThreeOlderDirectMessage.draftNr\n         tx.loadDraftByNr(userOne.id, draftThreeDeleted.draftNr) mustBe Some(draftThreeDeleted)\n@@ -229,9 +235,46 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n       }\n     }\n \n+    \"can undelete a draft [TyT2ARDW3]\" in {\n+      draftThreeUndeleted = draftThreeDeleted.copy(deletedAt = None)\n+      dao.readWriteTransaction { tx =>\n+        tx.upsertDraft(draftThreeUndeleted)\n+      }\n+    }\n+\n+    \"now it gets loaded by locator\" in {\n+      dao.readOnlyTransaction { tx =>\n+        tx.loadDraftsByLocator(userOne.id, draftThreeUndeleted.forWhat) mustBe Vector(draftThreeUndeleted)\n+      }\n+    }\n+\n+    \"can upsert-change editedAt\" in {\n+      dao.readOnlyTransaction { tx =>\n+        val drafts = tx.listDraftsRecentlyEditedFirst(userOne.id)\n+        drafts.length mustBe 3\n+        drafts mustBe Vector(draftTwoNewerForNewTopic, draftOne, draftThreeUndeleted)\n+      }\n+\n+      draftThreeNewest = draftThreeUndeleted.copy(createdAt = now.plusMillis(29000))  // newest\n+      dao.readWriteTransaction { tx =>\n+        tx.upsertDraft(draftThreeNewest)\n+      }\n+\n+      // This is what happens in the upsert:\n+      draftThreeNewest = draftThreeUndeleted.copy(lastEditedAt = Some(draftThreeNewest.createdAt))\n+\n+      dao.readOnlyTransaction { tx =>\n+        tx.loadDraftByNr(userOne.id, draftThreeNewest.draftNr) mustBe Some(draftThreeNewest)\n+\n+        val drafts = tx.listDraftsRecentlyEditedFirst(userOne.id)\n+        drafts.length mustBe 3\n+        drafts mustBe Vector(draftThreeNewest, draftTwoNewerForNewTopic, draftOne)\n+      }\n+    }\n+\n     \"hard delete a draft\" in {\n       dao.readWriteTransaction { tx =>\n-        tx.deleteDraft(userOne.id, draftThreeOlderDirectMessage.draftNr)\n+        tx.deleteDraft(userOne.id, draftThreeNewest.draftNr)\n       }\n     }\n \n@@ -245,12 +288,16 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n \n     \"can edit a draft\" in {\n       draftTwoEdited = draftTwoNewerForNewTopic.copy(\n-        lastEditedAt = Some(now.plusMillis(12000)),\n+        createdAt = now.plusMillis(12000),  // (4BKARE2)\n         title = DraftTwoTitleEdited,\n         text = DraftTwoTextEdited)\n       dao.readWriteTransaction { tx =>\n         tx.upsertDraft(draftTwoEdited)\n       }\n+      // This is what the db code does — the upsert works as an edit, because draft already exists.\n+      draftTwoEdited = draftTwoEdited.copy(\n+        createdAt = draftTwoNewerForNewTopic.createdAt,\n+        lastEditedAt = Some(draftTwoEdited.createdAt))\n     }\n \n     \"when reloading, the changes are there\" in {\n@@ -272,13 +319,14 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n     \"save a second new-topic draft\" in {\n       val locator = DraftLocator(\n         DraftType.Topic,\n-        categoryId = Some(categoryId))\n+        categoryId = Some(categoryId),\n+        pageId = Some(forumPageId))\n \n       draftFourNewTopic = Draft(\n         byUserId = userOne.id,\n         draftNr = 4,\n         forWhat = locator,\n-        createdAt = now.plusMillis(9000),  // newest, but older than the edits\n+        createdAt = now.plusMillis(9000),  // newest, but older than the edits (4BKARE2)\n         topicType = Some(PageRole.Question),\n         title = \"Is this a good question to ask?\",\n         text = DraftTwoTextOrig)\n@@ -315,7 +363,7 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n \n       draftFiveForEdits = Draft(\n         byUserId = userOne.id,\n-        draftNr = 1,\n+        draftNr = 5,\n         createdAt = now,\n         forWhat = locator,\n         postType = Some(PostType.Normal),\n@@ -327,10 +375,23 @@ class DraftsDaoAppSpec extends DaoAppSuite(disableScripts = true, disableBackgro\n       }\n     }\n \n-    \"finds the for-edits draft, by post locator\" in {\n-      val d5 = draftFiveForEdits\n+    \"finds the for-edits draft, by draft locator\" in {\n+      dao.readOnlyTransaction { tx =>\n+        tx.loadDraftsByLocator(userOne.id, draftFiveForEdits.forWhat) mustBe Vector(draftFiveForEdits)\n+      }\n+    }\n+\n+    \"... and draft one, by locator, without also finding draft 5\" in {\n+      dao.readOnlyTransaction { tx =>\n+        tx.loadDraftsByLocator(userOne.id, draftOne.forWhat) mustBe Vector(draftOne)\n+      }\n+    }\n+\n+    \"... won't find anything, for the wrong post id (but correct page id and nr)\" in {\n       dao.readOnlyTransaction { tx =>\n-        tx.loadDraftsByLocator(userOne.id, d5.forWhat) mustBe Vector(d5)\n+        val badId = Some(45678)\n+        tx.loadDraftsByLocator(userOne.id, draftFiveForEdits.forWhat.copy(postId = badId)) mustBe Nil\n+        tx.loadDraftsByLocator(userOne.id, draftOne.forWhat.copy(postId = badId)) mustBe Nil\n       }\n     }\n "
    },
    {
      "sha": "a814aef06fead40f841780d40eaef9fc826ca0ca",
      "filename": "tests/e2e/specs/drafts-chat-adv-ed.2browsers.test.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/specs/drafts-chat-adv-ed.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/specs/drafts-chat-adv-ed.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/drafts-chat-adv-ed.2browsers.test.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -146,7 +146,7 @@ describe(\"drafts-chat-adv-ed  TyT7JKMW24\", () => {\n   });\n \n \n-  // ----- Draft auto-saved, when navigating to other page\n+  // ----- Draft auto-saved on Reactjs unmount, when navigating to other page\n \n   it(\"Now between, Michael joins the chat\", () => {\n     michaelsBrowser.complex.loginWithPasswordViaTopbar(michael);\n@@ -195,7 +195,7 @@ describe(\"drafts-chat-adv-ed  TyT7JKMW24\", () => {\n   });\n \n \n-  // ----- Switch to advanced editor, draft auto saved, submit\n+  // ----- Switch to advanced editor, draft auto saved, submit in adv editor\n \n   it(\"Michael starts typing his 2nd message\", () => {\n     michaelsBrowser.chat.editChatMessage(michaelsMessageTwoOrig);"
    },
    {
      "sha": "d09ad3ebc47160737b238007532198c03c00f15a",
      "filename": "tests/e2e/specs/drafts-delete.test.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/specs/drafts-delete.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/specs/drafts-delete.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/drafts-delete.test.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -136,7 +136,7 @@ describe(\"drafts-delete  TyT5BKRQ0\", () => {\n     mariasBrowser.editor.waitForDraftTextToLoad(draftTopicTextToDelete);\n   });\n \n-  it(\"... and deletes all text\", () => {\n+  it(\"... and deletes all text, but not the title\", () => {\n     mariasBrowser.editor.editText('  ');\n   });\n \n@@ -148,7 +148,7 @@ describe(\"drafts-delete  TyT5BKRQ0\", () => {\n     mariasBrowser.forumButtons.clickCreateTopic();\n   });\n \n-  it(\"... the title is still there; the draft didn't get deleted\", () => {\n+  it(\"... the *title* is still there; the draft didn't get deleted\", () => {\n     mariasBrowser.editor.waitForDraftTitleToLoad(draftTopicTitleToDelete);\n     mariasBrowser.editor.waitForDraftTextToLoad('');\n   });\n@@ -171,7 +171,7 @@ describe(\"drafts-delete  TyT5BKRQ0\", () => {\n   });\n \n \n-  // ----- Delete reply draft: Quick cancel click\n+  // ----- Delete reply draft: Quick cancel click = Reactjs unmount\n \n   it(\"She opens the reply draft\", () => {\n     mariasBrowser.userProfilePage.draftsEtc.openDraftIndex(1);\n@@ -182,11 +182,11 @@ describe(\"drafts-delete  TyT5BKRQ0\", () => {\n     mariasBrowser.editor.editText(' ');\n   });\n \n-  it(\"... closes the editor\", () => {\n+  it(\"... closes the editor — this deletes the draft, since it's now empty\", () => {\n     mariasBrowser.editor.cancelNoHelp();\n   });\n \n-  it(\"When she starts replying again, the text is empty\", () => {\n+  it(\"When she starts replying again, the text is empty (draft gone)\", () => {\n     mariasBrowser.topic.clickReplyToOrigPost();\n     mariasBrowser.editor.waitForDraftTextToLoad('');\n   });\n@@ -199,7 +199,7 @@ describe(\"drafts-delete  TyT5BKRQ0\", () => {\n     mariasBrowser.topbar.myMenu.goToDraftsEtc();\n   });\n \n-  it(\"... it's now gone\", () => {\n+  it(\"... the draft is gone\", () => {\n     mariasBrowser.userProfilePage.draftsEtc.waitUntilNumDraftsListed(3 - 2);\n   });\n "
    },
    {
      "sha": "44184a74a7f8362acb0e3cb757fb2e45fde954c9",
      "filename": "tests/e2e/specs/drafts-new-topic.2browsers.test.ts",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/specs/drafts-new-topic.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/specs/drafts-new-topic.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/drafts-new-topic.2browsers.test.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -72,6 +72,9 @@ describe(\"drafts-new-topic  TyT5BR20P4\", () => {\n     mariasBrowser.complex.loginWithPasswordViaTopbar(maria);\n   });\n \n+\n+  // ----- Auto save after X seconds\n+\n   it(\"... starts typing a new topic\", () => {\n     mariasBrowser.forumButtons.clickCreateTopic();\n     mariasBrowser.editor.editTitle(mariasDraftTopicTitleOrig);\n@@ -95,6 +98,9 @@ describe(\"drafts-new-topic  TyT5BR20P4\", () => {\n     mariasBrowser.editor.waitForDraftTextToLoad(mariasDraftTopicTextOrig);\n   });\n \n+\n+  // ----- Reactjs unmount save\n+\n   it(\"Maria edits the topic\", () => {\n     mariasBrowser.editor.editTitle(mariasDraftTopicTitleEditedOnce);\n     mariasBrowser.editor.editText(mariasDraftTopicTextEditedOnce);\n@@ -114,6 +120,9 @@ describe(\"drafts-new-topic  TyT5BR20P4\", () => {\n     mariasBrowser.editor.waitForDraftTextToLoad(mariasDraftTopicTextEditedOnce);\n   });\n \n+\n+  // ----- Beacon save\n+\n   it(\"She edits again\", () => {\n     mariasBrowser.editor.editTitle(mariasDraftTopicTitleEditedTwice);\n     mariasBrowser.editor.editText(mariasDraftTopicTextEditedTwice);\n@@ -129,6 +138,9 @@ describe(\"drafts-new-topic  TyT5BR20P4\", () => {\n     mariasBrowser.editor.waitForDraftTextToLoad(mariasDraftTopicTextEditedTwice);\n   });\n \n+\n+  // ----- Reopen via drafts list\n+\n   it(\"She goes to her list-of-drafts user profile page\", () => {\n     mariasBrowser.editor.cancelNoHelp();\n     mariasBrowser.topbar.myMenu.goToDraftsEtc();\n@@ -161,7 +173,7 @@ describe(\"drafts-new-topic  TyT5BR20P4\", () => {\n \n   it(\"... and now, when starting a topic, there's no draft text\", () => {\n     mariasBrowser.forumButtons.clickCreateTopic();\n-    mariasBrowser.pause(500);\n+    mariasBrowser.pause(500); // wait for any draft to load\n     assert.equal(mariasBrowser.editor.getTitle(), '');\n     assert.equal(mariasBrowser.editor.getText(), '');\n   });\n@@ -170,7 +182,7 @@ describe(\"drafts-new-topic  TyT5BR20P4\", () => {\n     mariasBrowser.topbar.myMenu.goToDraftsEtc();\n   });\n \n-  it(\"... now it's empty, the draft was submittted\", () => {\n+  it(\"... it's empty, the draft was submittted\", () => {\n     mariasBrowser.userProfilePage.draftsEtc.waitUntilNumDraftsListed(0);\n   });\n "
    },
    {
      "sha": "7000f02e975eb74e2874a035c5821e7d25ad0f8a",
      "filename": "tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts",
      "status": "modified",
      "additions": 14,
      "deletions": 7,
      "changes": 21,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -38,8 +38,6 @@ const mariasReplyEditedTwice = 'mariasReplyEditedTwice';\n \n const marias2ndReplyOrig = 'marias2ndReplyOrig';\n \n-const marias3rdReplyOrig = 'marias3rdReplyOrig';\n-\n const mariasDirectMessageTitle = 'mariasDirectMessageTitle';\n const mariasDirectMessageText = 'mariasDirectMessageText';\n \n@@ -90,7 +88,7 @@ describe(\"drafts-chat-adv-ed  TyT7JKMW24\", () => {\n   });\n \n \n-  // ----- Drafts for edits\n+  // ----- Drafts for edits: auto save X seconds, and Reactjs unmount-save\n \n   it(\"Maria starts editing her reply to Michael  TyT5A2HSL8\", () => {\n     mariasBrowser.topic.clickEditoPostNr(c.FirstReplyNr);\n@@ -115,20 +113,20 @@ describe(\"drafts-chat-adv-ed  TyT7JKMW24\", () => {\n     mariasBrowser.editor.editText(mariasReplyEditedTwice);\n   });\n \n-  it(\"... and cancels\", () => {\n+  it(\"... and closes the editor, this Reactjs unmount-saves\", () => {\n     mariasBrowser.editor.cancelNoHelp();\n   });\n \n \n-  // ----- Drafts for replies\n+  // ----- Drafts for replies, saved via beacon\n \n   it(\"Maria starts typing another reply\", () => {\n     mariasBrowser.topic.clickReplyToOrigPost();\n     mariasBrowser.editor.waitForDraftTextToLoad('');  // no draft text yet\n     mariasBrowser.editor.editText(marias2ndReplyOrig);\n   });\n \n-  it(\"... quickly reloads the page, the edits get beacon-saved  TyT5ABKR20\", () => {\n+  it(\"... quickly reloads the page, the reply draft gets beacon-saved  TyT5ABKR20\", () => {\n     mariasBrowser.refresh();\n   });\n \n@@ -138,6 +136,15 @@ describe(\"drafts-chat-adv-ed  TyT7JKMW24\", () => {\n     mariasBrowser.editor.cancelNoHelp();\n   });\n \n+  it(\"When she resumes editing her 1st reply\", () => {\n+    mariasBrowser.topic.clickEditoPostNr(c.FirstReplyNr);\n+  });\n+\n+  it(\"... she sees those edits, not the new 2nd reply\", () => {\n+    mariasBrowser.editor.waitForDraftTextToLoad(mariasReplyEditedTwice);\n+    mariasBrowser.editor.cancelNoHelp();\n+  });\n+\n \n   // ----- Drafts for direct messages\n \n@@ -149,7 +156,7 @@ describe(\"drafts-chat-adv-ed  TyT7JKMW24\", () => {\n   });\n \n \n-  // ----- Open drafts via drafts list:\n+  // ----- Open drafts via drafts list ...\n \n   it(\"Maria closes the editor\", () => {\n     mariasBrowser.editor.cancelNoHelp();"
    },
    {
      "sha": "dc7c0e720ec2a4c231164d35ac648f986a7cb5d5",
      "filename": "tests/e2e/specs/new-member-allow-approve.2browsers.test.ts",
      "status": "modified",
      "additions": 28,
      "deletions": 8,
      "changes": 36,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/specs/new-member-allow-approve.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/specs/new-member-allow-approve.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/new-member-allow-approve.2browsers.test.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -28,16 +28,20 @@ let forumTitle = \"Flag Block Agree Forum\";\n \n let topics = {\n   majasTopicTitle: \"Icecream?\",\n+  majasTopicTitleEdited: \"Must yez zecream I\",\n   majasTopicText: \"I can haz icecream?\",\n+  majasTopicTextEdited: \"I can zumust haz eezecream\",\n   majasTopicUrl: '',\n   oldTopicTitle: \"Old Topic\",\n   oldTopicUrl: 'old_topic',\n };\n \n+const pageTitleEdited = 'pageTitleEdited';\n+const pageBodyEdited = 'pageBodyEdited';\n const threeIsOkay = \"Three is okay\";\n \n \n-describe(\"new member, allow, approve posts:\", () => {  // RENAME ths file to 'new-member-posts...'\n+describe(\"new member, allow, approve posts:  TyT4AKBJ20\", () => {  // RENAME ths file to 'new-member-posts...'\n \n   it(\"initialize people\", () => {\n     everyone = _.assign(browser, pagesFor(browser));\n@@ -100,15 +104,17 @@ describe(\"new member, allow, approve posts:\", () => {  // RENAME ths file to 'ne\n   });\n \n   it(\"... but she can edit the text, although not yet approved\", () => {\n-    // TESTS_MISSING\n+    majasBrowser.complex.editPageBody(topics.majasTopicTextEdited);\n   });\n \n   it(\"... and the title\", () => {\n-    // TESTS_MISSING\n-  });\n+    majasBrowser.complex.editPageTitle(topics.majasTopicTitleEdited);\n+});\n \n   it(\"... changes visible after reload\", () => {\n-    // TESTS_MISSING\n+    majasBrowser.refresh();\n+    majasBrowser.assertPageTitleMatches(topics.majasTopicTitleEdited);\n+    majasBrowser.assertPageBodyMatches(topics.majasTopicTextEdited);\n   });\n \n   it(\"... she posts three replies to an old topic\", () => {\n@@ -130,6 +136,11 @@ describe(\"new member, allow, approve posts:\", () => {  // RENAME ths file to 'ne\n     majasBrowser.complex.editPostNr(4, threeIsOkay);\n   });\n \n+  it(\"... changes visible after reload\", () => {\n+    majasBrowser.refresh();\n+    majasBrowser.topic.waitUntilPostTextMatches(4, threeIsOkay);\n+  });\n+\n   it(\"But now she may not post more replies, until the ones posted already gets reviewed: \" +\n       \"She clicks Reply\", () => {\n     majasBrowser.topic.clickReplyToOrigPost();\n@@ -279,17 +290,22 @@ describe(\"new member, allow, approve posts:\", () => {  // RENAME ths file to 'ne\n     michaelsBrowser.topic.refreshUntilPostNotPendingApproval(4);\n   });\n \n+  it(\"... and Maja's edits are there\", () => {\n+    michaelsBrowser.topic.assertPostTextMatches(4, threeIsOkay);\n+  });\n+\n   it(\"... and sees Maja's topic in the topic list\", () => {\n     michaelsBrowser.go('/');\n     michaelsBrowser.forumTopicList.waitForTopics();\n     michaelsBrowser.forumTopicList.assertNumVisible(2);\n     michaelsBrowser.forumTopicList.assertTopicVisible(topics.oldTopicTitle);\n-    michaelsBrowser.forumTopicList.assertTopicVisible(topics.majasTopicTitle);\n+    michaelsBrowser.forumTopicList.assertTopicVisible(topics.majasTopicTitleEdited);\n   });\n \n   it(\"... and can access it\", () => {\n-    michaelsBrowser.forumTopicList.goToTopic(topics.majasTopicTitle);\n+    michaelsBrowser.forumTopicList.goToTopic(topics.majasTopicTitleEdited);\n     michaelsBrowser.topic.assertPageNotPendingApproval();\n+    michaelsBrowser.assertPageBodyMatches(topics.majasTopicTextEdited);\n   });\n \n \n@@ -321,12 +337,16 @@ describe(\"new member, allow, approve posts:\", () => {  // RENAME ths file to 'ne\n     strangersBrowser.topic.assertPostNotPendingApproval(6);\n   });\n \n+  it(\"... incl Maja's edits to reply three\", () => {\n+    strangersBrowser.topic.assertPostTextMatches(4, threeIsOkay);\n+  });\n+\n   it(\"... and her topic in the topc list\", () => {\n     strangersBrowser.go('/');\n     strangersBrowser.forumTopicList.waitForTopics();\n     strangersBrowser.forumTopicList.assertNumVisible(2);\n     strangersBrowser.forumTopicList.assertTopicVisible(topics.oldTopicTitle);\n-    strangersBrowser.forumTopicList.assertTopicVisible(topics.majasTopicTitle);\n+    strangersBrowser.forumTopicList.assertTopicVisible(topics.majasTopicTitleEdited);\n   });\n \n });"
    },
    {
      "sha": "ffd5c7e1c2807d1743c2c11d1b4210791a9dc8d4",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/a160f4e985aebbede18e4211d7860b64ce74b31d/tests/e2e/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/pages-for.ts?ref=a160f4e985aebbede18e4211d7860b64ce74b31d",
      "patch": "@@ -4007,6 +4007,13 @@ function pagesFor(browser) {\n         api.waitUntilLoadingOverlayGone();\n       },\n \n+      editPageTitle: function(newTitle: string) {\n+        api.pageTitle.clickEdit();\n+        api.pageTitle.editTitle(newTitle);\n+        api.pageTitle.save();\n+        api.assertPageTitleMatches(newTitle);\n+      },\n+\n       editPageBody: function(newText: string) {\n         api.topic.clickEditOrigPost();\n         api.editor.editText(newText);"
    }
  ]
}
