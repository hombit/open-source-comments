{
  "sha": "3cc6762ebf4f578b6fa5c8b44775322857a4f607",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjNjYzY3NjJlYmY0ZjU3OGI2ZmE1YzhiNDQ3NzUzMjI4NTdhNGY2MDc=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2018-09-03T04:14:29Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2018-09-03T04:14:29Z"
    },
    "message": "add comments",
    "tree": {
      "sha": "0da945b898fd80f9e981f2a055056a07f4e5d0ed",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/0da945b898fd80f9e981f2a055056a07f4e5d0ed"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/3cc6762ebf4f578b6fa5c8b44775322857a4f607",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/3cc6762ebf4f578b6fa5c8b44775322857a4f607",
  "html_url": "https://github.com/umputun/remark/commit/3cc6762ebf4f578b6fa5c8b44775322857a4f607",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/3cc6762ebf4f578b6fa5c8b44775322857a4f607/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0cd76dfd2f573a7c64402ab9b609b6b200fac056",
      "url": "https://api.github.com/repos/umputun/remark/commits/0cd76dfd2f573a7c64402ab9b609b6b200fac056",
      "html_url": "https://github.com/umputun/remark/commit/0cd76dfd2f573a7c64402ab9b609b6b200fac056"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 15,
    "deletions": 13
  },
  "files": [
    {
      "sha": "7d3047df4c3a828dd4ab26e06f9bc2f46ef0d6d0",
      "filename": "backend/app/cmd/backup.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/3cc6762ebf4f578b6fa5c8b44775322857a4f607/backend/app/cmd/backup.go",
      "raw_url": "https://github.com/umputun/remark/raw/3cc6762ebf4f578b6fa5c8b44775322857a4f607/backend/app/cmd/backup.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/backup.go?ref=3cc6762ebf4f578b6fa5c8b44775322857a4f607",
      "patch": "@@ -13,7 +13,7 @@ import (\n )\n \n // BackupCommand set of flags and command for export\n-// ExportPath used as a separate element to leverage BACKUP_PATH. If ExportFile has a path (i.e. /) BACKUP_PATH ignored.\n+// ExportPath used as a separate element to leverage BACKUP_PATH. If ExportFile has a path (i.e. with /) BACKUP_PATH ignored.\n type BackupCommand struct {\n \tExportPath   string        `short:\"p\" long:\"path\" env:\"BACKUP_PATH\" default:\"./var/backup\" description:\"export path\"`\n \tExportFile   string        `short:\"f\" long:\"file\" default:\"userbackup-{{.SITE}}-{{.TS}}.gz\" description:\"file name\"`"
    },
    {
      "sha": "cb1d2c2f0968c67302df5ab7ec17ae7edc1f774f",
      "filename": "backend/app/cmd/cmd.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/3cc6762ebf4f578b6fa5c8b44775322857a4f607/backend/app/cmd/cmd.go",
      "raw_url": "https://github.com/umputun/remark/raw/3cc6762ebf4f578b6fa5c8b44775322857a4f607/backend/app/cmd/cmd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/cmd.go?ref=3cc6762ebf4f578b6fa5c8b44775322857a4f607",
      "patch": "@@ -29,6 +29,7 @@ type fileParser struct {\n // parse apply template and also concat path and file. In case if file contains path separator path will be ignored\n func (p *fileParser) parse(now time.Time) (string, error) {\n \n+\t// file/location paramaters my have template masks\n \tfileTemplate := struct {\n \t\tYYYYMMDD string\n \t\tYYYY     string"
    },
    {
      "sha": "249f52de86f3322c2a278056db31a08198bf597a",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/3cc6762ebf4f578b6fa5c8b44775322857a4f607/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark/raw/3cc6762ebf4f578b6fa5c8b44775322857a4f607/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/server.go?ref=3cc6762ebf4f578b6fa5c8b44775322857a4f607",
      "patch": "@@ -14,14 +14,14 @@ import (\n \t\"github.com/coreos/bbolt\"\n \t\"github.com/go-pkgz/mongo\"\n \t\"github.com/pkg/errors\"\n-\t\"github.com/umputun/remark/backend/app/store/admin\"\n \n \t\"github.com/umputun/remark/backend/app/migrator\"\n \t\"github.com/umputun/remark/backend/app/rest/api\"\n \t\"github.com/umputun/remark/backend/app/rest/auth\"\n \t\"github.com/umputun/remark/backend/app/rest/cache\"\n \t\"github.com/umputun/remark/backend/app/rest/proxy\"\n \t\"github.com/umputun/remark/backend/app/store\"\n+\t\"github.com/umputun/remark/backend/app/store/admin\"\n \t\"github.com/umputun/remark/backend/app/store/avatar\"\n \t\"github.com/umputun/remark/backend/app/store/engine\"\n \t\"github.com/umputun/remark/backend/app/store/keys\""
    },
    {
      "sha": "e71ce422c55a85465b5072ed03bede5fd7fd788c",
      "filename": "backend/app/rest/auth/auth.go",
      "status": "modified",
      "additions": 12,
      "deletions": 11,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark/blob/3cc6762ebf4f578b6fa5c8b44775322857a4f607/backend/app/rest/auth/auth.go",
      "raw_url": "https://github.com/umputun/remark/raw/3cc6762ebf4f578b6fa5c8b44775322857a4f607/backend/app/rest/auth/auth.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/auth/auth.go?ref=3cc6762ebf4f578b6fa5c8b44775322857a4f607",
      "patch": "@@ -28,7 +28,7 @@ var devUser = store.User{\n \tAdmin:   true,\n }\n \n-// PermissionChecker defines interface to get user flags\n+// PermissionChecker defines interface to check user flags\n type PermissionChecker interface {\n \tIsVerified(siteID, userID string) bool\n \tIsBlocked(siteID, userID string) bool\n@@ -41,21 +41,21 @@ func (a *Authenticator) Auth(reqAuth bool) func(http.Handler) http.Handler {\n \tf := func(h http.Handler) http.Handler {\n \t\tfn := func(w http.ResponseWriter, r *http.Request) {\n \n-\t\t\tif a.basicDevUser(w, r) { // fail-back to dev user if enabled\n+\t\t\tif a.basicDevUser(w, r) { // use dev user basic auth if enabled\n \t\t\t\tuser := devUser\n \t\t\t\tr = rest.SetUserInfo(r, user)\n \t\t\t\th.ServeHTTP(w, r)\n \t\t\t\treturn\n \t\t\t}\n \n \t\t\tclaims, err := a.JWTService.Get(r)\n-\t\t\tif err != nil && reqAuth { // in full auth lack of session causes Unauthorized\n-\t\t\t\tlog.Printf(\"[DEBUG] failed auth, %s\", err)\n-\t\t\t\thttp.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n-\t\t\t\treturn\n-\t\t\t}\n-\n-\t\t\tif err != nil { // in anonymous mode just pass it to the next handler\n+\t\t\tif err != nil {\n+\t\t\t\tif reqAuth { // in full auth lack of token causes Unauthorized\n+\t\t\t\t\tlog.Printf(\"[DEBUG] failed auth, %s\", err)\n+\t\t\t\t\thttp.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\t\t\t\t// in anonymous mode just pass it to the next handler\n \t\t\t\th.ServeHTTP(w, r)\n \t\t\t\treturn\n \t\t\t}\n@@ -74,7 +74,7 @@ func (a *Authenticator) Auth(reqAuth bool) func(http.Handler) http.Handler {\n \t\t\t\t\treturn\n \t\t\t\t}\n \n-\t\t\t\tif a.JWTService.HasFlags(claims) {\n+\t\t\t\tif a.JWTService.HasFlags(claims) { // flags in token indicate special use cases, not for login\n \t\t\t\t\tlog.Printf(\"[DEBUG] invalid token flags for %s/%s\", claims.User.Name, claims.User.ID)\n \t\t\t\t\thttp.Error(w, \"Unauthorized\", http.StatusUnauthorized)\n \t\t\t\t\treturn\n@@ -97,6 +97,7 @@ func (a *Authenticator) Auth(reqAuth bool) func(http.Handler) http.Handler {\n \treturn f\n }\n \n+// refreshExpiredToken makes new token with passed claims, but only if permission allowed\n func (a *Authenticator) refreshExpiredToken(w http.ResponseWriter, claims *CustomClaims) (*CustomClaims, error) {\n \tif a.PermissionChecker != nil {\n \t\tclaims.User.Admin = a.PermissionChecker.IsAdmin(claims.SiteID, claims.User.ID)\n@@ -110,7 +111,7 @@ func (a *Authenticator) refreshExpiredToken(w http.ResponseWriter, claims *Custo\n \treturn claims, nil\n }\n \n-// AdminOnly allows access to admins\n+// AdminOnly middleware allows access for admins only\n func (a *Authenticator) AdminOnly(next http.Handler) http.Handler {\n \tfn := func(w http.ResponseWriter, r *http.Request) {\n "
    }
  ]
}
