{
  "sha": "4382fb5facb035f5b414c6c7257dc828327a57c7",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo0MzgyZmI1ZmFjYjAzNWY1YjQxNGM2YzcyNTdkYzgyODMyN2E1N2M3",
  "commit": {
    "author": {
      "name": "David Taylor",
      "email": "david@taylorhq.com",
      "date": "2018-09-04T10:45:36Z"
    },
    "committer": {
      "name": "Sam",
      "email": "sam.saffron@gmail.com",
      "date": "2018-09-04T10:45:36Z"
    },
    "message": "DEV: Allow plugins to whitelist specific user custom_fields for editing (#6358)",
    "tree": {
      "sha": "4cb0f8a70d56d9d6b7d706d8903177de39fe4d57",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/4cb0f8a70d56d9d6b7d706d8903177de39fe4d57"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/4382fb5facb035f5b414c6c7257dc828327a57c7",
    "comment_count": 1,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/4382fb5facb035f5b414c6c7257dc828327a57c7",
  "html_url": "https://github.com/discourse/discourse/commit/4382fb5facb035f5b414c6c7257dc828327a57c7",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/4382fb5facb035f5b414c6c7257dc828327a57c7/comments",
  "author": {
    "login": "davidtaylorhq",
    "id": 6270921,
    "node_id": "MDQ6VXNlcjYyNzA5MjE=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/6270921?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davidtaylorhq",
    "html_url": "https://github.com/davidtaylorhq",
    "followers_url": "https://api.github.com/users/davidtaylorhq/followers",
    "following_url": "https://api.github.com/users/davidtaylorhq/following{/other_user}",
    "gists_url": "https://api.github.com/users/davidtaylorhq/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davidtaylorhq/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davidtaylorhq/subscriptions",
    "organizations_url": "https://api.github.com/users/davidtaylorhq/orgs",
    "repos_url": "https://api.github.com/users/davidtaylorhq/repos",
    "events_url": "https://api.github.com/users/davidtaylorhq/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davidtaylorhq/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "SamSaffron",
    "id": 5213,
    "node_id": "MDQ6VXNlcjUyMTM=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/5213?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/SamSaffron",
    "html_url": "https://github.com/SamSaffron",
    "followers_url": "https://api.github.com/users/SamSaffron/followers",
    "following_url": "https://api.github.com/users/SamSaffron/following{/other_user}",
    "gists_url": "https://api.github.com/users/SamSaffron/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/SamSaffron/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/SamSaffron/subscriptions",
    "organizations_url": "https://api.github.com/users/SamSaffron/orgs",
    "repos_url": "https://api.github.com/users/SamSaffron/repos",
    "events_url": "https://api.github.com/users/SamSaffron/events{/privacy}",
    "received_events_url": "https://api.github.com/users/SamSaffron/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d1af89e3b35d2fa16cace657bf91d49784eee193",
      "url": "https://api.github.com/repos/discourse/discourse/commits/d1af89e3b35d2fa16cace657bf91d49784eee193",
      "html_url": "https://github.com/discourse/discourse/commit/d1af89e3b35d2fa16cace657bf91d49784eee193"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 60,
    "deletions": 4
  },
  "files": [
    {
      "sha": "065f89732a896100b16e18a9d63ff5c886f36688",
      "filename": "app/controllers/users_controller.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/discourse/discourse/blob/4382fb5facb035f5b414c6c7257dc828327a57c7/app/controllers/users_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/4382fb5facb035f5b414c6c7257dc828327a57c7/app/controllers/users_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/users_controller.rb?ref=4382fb5facb035f5b414c6c7257dc828327a57c7",
      "patch": "@@ -104,7 +104,7 @@ def update\n     attributes.delete(:username)\n \n     if params[:user_fields].present?\n-      attributes[:custom_fields] = {}\n+      attributes[:custom_fields] ||= {}\n \n       fields = UserField.all\n       fields = fields.where(editable: true) unless current_user.staff?\n@@ -1167,6 +1167,7 @@ def user_params\n       :card_background\n     ]\n \n+    permitted << { custom_fields: User.editable_user_custom_fields } unless User.editable_user_custom_fields.blank?\n     permitted.concat UserUpdater::OPTION_ATTR\n     permitted.concat UserUpdater::CATEGORY_IDS.keys.map { |k| { k => [] } }\n     permitted.concat UserUpdater::TAG_NAMES.keys"
    },
    {
      "sha": "82c97f9c638c238d8ea0e28988ba02253cc5505d",
      "filename": "app/models/user.rb",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/discourse/discourse/blob/4382fb5facb035f5b414c6c7257dc828327a57c7/app/models/user.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/4382fb5facb035f5b414c6c7257dc828327a57c7/app/models/user.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/user.rb?ref=4382fb5facb035f5b414c6c7257dc828327a57c7",
      "patch": "@@ -222,6 +222,24 @@ def self.reserved_username?(username)\n     end\n   end\n \n+  def self.plugin_editable_user_custom_fields\n+    @plugin_editable_user_custom_fields ||= {}\n+  end\n+\n+  def self.register_plugin_editable_user_custom_field(custom_field_name, plugin)\n+    plugin_editable_user_custom_fields[custom_field_name] = plugin\n+  end\n+\n+  def self.editable_user_custom_fields\n+    fields = []\n+\n+    plugin_editable_user_custom_fields.each do |k, v|\n+      fields << k if v.enabled?\n+    end\n+\n+    fields.uniq\n+  end\n+\n   def self.plugin_staff_user_custom_fields\n     @plugin_staff_user_custom_fields ||= {}\n   end"
    },
    {
      "sha": "21c4b82d88c30e4512018671d85c702b145b8b92",
      "filename": "lib/plugin/instance.rb",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/4382fb5facb035f5b414c6c7257dc828327a57c7/lib/plugin/instance.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/4382fb5facb035f5b414c6c7257dc828327a57c7/lib/plugin/instance.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/plugin/instance.rb?ref=4382fb5facb035f5b414c6c7257dc828327a57c7",
      "patch": "@@ -121,6 +121,12 @@ def whitelist_staff_user_custom_field(field)\n     end\n   end\n \n+  def register_editable_user_custom_field(field)\n+    reloadable_patch do |plugin|\n+      ::User.register_plugin_editable_user_custom_field(field, plugin) # plugin.enabled? is checked at runtime\n+    end\n+  end\n+\n   def custom_avatar_column(column)\n     reloadable_patch do |plugin|\n       AvatarLookup.lookup_columns << column"
    },
    {
      "sha": "9956eae29b8edccda77efaf2cc0fbbcbd0070d63",
      "filename": "spec/requests/users_controller_spec.rb",
      "status": "modified",
      "additions": 34,
      "deletions": 3,
      "changes": 37,
      "blob_url": "https://github.com/discourse/discourse/blob/4382fb5facb035f5b414c6c7257dc828327a57c7/spec/requests/users_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/4382fb5facb035f5b414c6c7257dc828327a57c7/spec/requests/users_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/users_controller_spec.rb?ref=4382fb5facb035f5b414c6c7257dc828327a57c7",
      "patch": "@@ -1517,12 +1517,43 @@ def post_user\n           end\n \n           context \"custom_field\" do\n-            it \"does not update the custom field\" do\n-              put \"/u/#{user.username}.json\", params: { custom_fields: { test: :it } }\n+            before do\n+              plugin = Plugin::Instance.new\n+              plugin.register_editable_user_custom_field :test2\n+            end\n+\n+            after do\n+              User.plugin_editable_user_custom_fields.clear\n+            end\n+\n+            it \"only updates allowed user fields\" do\n+              put \"/u/#{user.username}.json\", params: { custom_fields: { test1: :hello1, test2: :hello2 } }\n+\n+              expect(response.status).to eq(200)\n+              expect(user.custom_fields[\"test1\"]).to be_blank\n+              expect(user.custom_fields[\"test2\"]).to eq(\"hello2\")\n+            end\n \n+            it \"works alongside a user field\" do\n+              user_field = Fabricate(:user_field, editable: true)\n+              put \"/u/#{user.username}.json\", params: { custom_fields: { test1: :hello1, test2: :hello2 }, user_fields: { user_field.id.to_s => 'happy' } }\n               expect(response.status).to eq(200)\n-              expect(user.custom_fields[\"test\"]).to be_blank\n+              expect(user.custom_fields[\"test1\"]).to be_blank\n+              expect(user.custom_fields[\"test2\"]).to eq(\"hello2\")\n+              expect(user.user_fields[user_field.id.to_s]).to eq('happy')\n             end\n+\n+            it \"is secure when there are no registered editable fields\" do\n+              User.plugin_editable_user_custom_fields.clear\n+              put \"/u/#{user.username}.json\", params: { custom_fields: { test1: :hello1, test2: :hello2 } }\n+              expect(response.status).to eq(200)\n+              expect(user.custom_fields[\"test1\"]).to be_blank\n+              expect(user.custom_fields[\"test2\"]).to be_blank\n+\n+              put \"/u/#{user.username}.json\", params: { custom_fields: [\"arrayitem1\", \"arrayitem2\"] }\n+              expect(response.status).to eq(200)\n+            end\n+\n           end\n         end\n "
    }
  ]
}
