{
  "sha": "3bb4f4c5efff46f3aa1607af53a0b0b3f7a02346",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODozYmI0ZjRjNWVmZmY0NmYzYWExNjA3YWY1M2EwYjBiM2Y3YTAyMzQ2",
  "commit": {
    "author": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2018-09-11T16:02:06Z"
    },
    "committer": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2018-09-11T16:02:06Z"
    },
    "message": "Adds test to make sure moderators can't make master keys\n\nIt wasn't obvious from the code, plus we'd never want this to regress!",
    "tree": {
      "sha": "15ceb9f10ad42cd0401ae9cada5fceb26636797f",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/15ceb9f10ad42cd0401ae9cada5fceb26636797f"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/3bb4f4c5efff46f3aa1607af53a0b0b3f7a02346",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/3bb4f4c5efff46f3aa1607af53a0b0b3f7a02346",
  "html_url": "https://github.com/discourse/discourse/commit/3bb4f4c5efff46f3aa1607af53a0b0b3f7a02346",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/3bb4f4c5efff46f3aa1607af53a0b0b3f7a02346/comments",
  "author": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1a01385e886b52e1d2e77c5d38d81846a736727b",
      "url": "https://api.github.com/repos/discourse/discourse/commits/1a01385e886b52e1d2e77c5d38d81846a736727b",
      "html_url": "https://github.com/discourse/discourse/commit/1a01385e886b52e1d2e77c5d38d81846a736727b"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 45,
    "deletions": 32
  },
  "files": [
    {
      "sha": "9cf3b6dc73054dde629e8f101f022c1a655c408c",
      "filename": "spec/requests/admin/api_controller_spec.rb",
      "status": "modified",
      "additions": 45,
      "deletions": 32,
      "changes": 77,
      "blob_url": "https://github.com/discourse/discourse/blob/3bb4f4c5efff46f3aa1607af53a0b0b3f7a02346/spec/requests/admin/api_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/3bb4f4c5efff46f3aa1607af53a0b0b3f7a02346/spec/requests/admin/api_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/admin/api_controller_spec.rb?ref=3bb4f4c5efff46f3aa1607af53a0b0b3f7a02346",
      "patch": "@@ -7,57 +7,70 @@\n   end\n \n   let(:admin) { Fabricate(:admin) }\n-  before do\n-    sign_in(admin)\n-  end\n \n-  describe '#index' do\n-    it \"succeeds\" do\n-      get \"/admin/api/keys.json\"\n-      expect(response.status).to eq(200)\n+  context \"as an admin\" do\n+    before do\n+      sign_in(admin)\n     end\n-  end\n \n-  describe '#regenerate_key' do\n-    let(:api_key) { Fabricate(:api_key) }\n-\n-    it \"returns 404 when there is no key\" do\n-      put \"/admin/api/key.json\", params: { id: 1234 }\n-      expect(response.status).to eq(404)\n+    describe '#index' do\n+      it \"succeeds\" do\n+        get \"/admin/api/keys.json\"\n+        expect(response.status).to eq(200)\n+      end\n     end\n \n-    it \"delegates to the api key's `regenerate!` method\" do\n-      prev_value = api_key.key\n-      put \"/admin/api/key.json\", params: { id: api_key.id }\n-      expect(response.status).to eq(200)\n+    describe '#regenerate_key' do\n+      let(:api_key) { Fabricate(:api_key) }\n \n-      api_key.reload\n-      expect(api_key.key).not_to eq(prev_value)\n-      expect(api_key.created_by.id).to eq(admin.id)\n-    end\n-  end\n+      it \"returns 404 when there is no key\" do\n+        put \"/admin/api/key.json\", params: { id: 1234 }\n+        expect(response.status).to eq(404)\n+      end\n \n-  describe '#revoke_key' do\n-    let(:api_key) { Fabricate(:api_key) }\n+      it \"delegates to the api key's `regenerate!` method\" do\n+        prev_value = api_key.key\n+        put \"/admin/api/key.json\", params: { id: api_key.id }\n+        expect(response.status).to eq(200)\n \n-    it \"returns 404 when there is no key\" do\n-      delete \"/admin/api/key.json\", params: { id: 1234 }\n-      expect(response.status).to eq(404)\n+        api_key.reload\n+        expect(api_key.key).not_to eq(prev_value)\n+        expect(api_key.created_by.id).to eq(admin.id)\n+      end\n     end\n \n-    it \"delegates to the api key's `regenerate!` method\" do\n-      delete \"/admin/api/key.json\", params: { id: api_key.id }\n-      expect(response.status).to eq(200)\n-      expect(ApiKey.where(key: api_key.key).count).to eq(0)\n+    describe '#revoke_key' do\n+      let(:api_key) { Fabricate(:api_key) }\n+\n+      it \"returns 404 when there is no key\" do\n+        delete \"/admin/api/key.json\", params: { id: 1234 }\n+        expect(response.status).to eq(404)\n+      end\n+\n+      it \"delegates to the api key's `regenerate!` method\" do\n+        delete \"/admin/api/key.json\", params: { id: api_key.id }\n+        expect(response.status).to eq(200)\n+        expect(ApiKey.where(key: api_key.key).count).to eq(0)\n+      end\n     end\n   end\n \n   describe '#create_master_key' do\n     it \"creates a record\" do\n+      sign_in(admin)\n       expect do\n         post \"/admin/api/key.json\"\n       end.to change(ApiKey, :count).by(1)\n       expect(response.status).to eq(200)\n     end\n+\n+    it \"doesn't allow moderators to create master keys\" do\n+      sign_in(Fabricate(:moderator))\n+      expect do\n+        post \"/admin/api/key.json\"\n+      end.to change(ApiKey, :count).by(0)\n+      expect(response.status).to eq(404)\n+    end\n+\n   end\n end"
    }
  ]
}
