{
  "sha": "b07445e5122060fb84382b3ccec19fad9b62835d",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6YjA3NDQ1ZTUxMjIwNjBmYjg0MzgyYjNjY2VjMTlmYWQ5YjYyODM1ZA==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2018-09-12T17:27:50Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2018-09-13T05:29:05Z"
    },
    "message": "Code review. Add change-password e2e test.",
    "tree": {
      "sha": "09ca99c366ea46f3e387a3093d23ab3318710a97",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/09ca99c366ea46f3e387a3093d23ab3318710a97"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/b07445e5122060fb84382b3ccec19fad9b62835d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/b07445e5122060fb84382b3ccec19fad9b62835d",
  "html_url": "https://github.com/debiki/talkyard/commit/b07445e5122060fb84382b3ccec19fad9b62835d",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/b07445e5122060fb84382b3ccec19fad9b62835d/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "71db15061046e481a16e3c2f6b8aaebd92ae0c23",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/71db15061046e481a16e3c2f6b8aaebd92ae0c23",
      "html_url": "https://github.com/debiki/talkyard/commit/71db15061046e481a16e3c2f6b8aaebd92ae0c23"
    }
  ],
  "stats": {
    "total": 317,
    "additions": 233,
    "deletions": 84
  },
  "files": [
    {
      "sha": "3ede6fb04b230fae8a7d910e7ed3acb263539ef9",
      "filename": "app/controllers/ApiV0Controller.scala",
      "status": "modified",
      "additions": 42,
      "deletions": 36,
      "changes": 78,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/app/controllers/ApiV0Controller.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/app/controllers/ApiV0Controller.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/ApiV0Controller.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -31,14 +31,6 @@ import scala.util.Try\n import Utils.OkXml\n \n \n-// LEFT TO REVIEW:\n-//     da18893 Add change password link.  — broken, bug.\n-//DONE 257b02d Bugfix: Show terms and privacy, if signing up for must-login-to-read site.\n-//DONE 3664a17 Bug fixes: Watchbar menu item, and auto play videos: muted attr.\n-//DONE 61d653d Add an Atom feed for all new posts.\n-\n-\n-\n // How test API?\n //  https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4\n //  looks nice:  https://github.com/vesln/hippie\n@@ -150,31 +142,30 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext)\n             throwBadRequest(\"TyEBADEXTUSR\", ex.getMessage)\n           }\n \n-        // where check email? Validation.checkEmail(primaryEmailAddress)\n+        throwForbiddenIf(!extUser.isEmailAddressVerified, \"TyESSOEMLUNVERF\", o\"\"\"s$siteId:\n+            The email address ${extUser.primaryEmailAddress} of external user '${extUser.externalId}'\n+            hasn't been verified.\"\"\")\n \n         val user = request.dao.readWriteTransaction { tx =>\n-          def makeName(): String = \"unnamed_\" + (nextRandomLong() % 1000)\n-          val usernameToTry = extUser.username.orElse(extUser.fullName).getOrElse(makeName())\n-          val okayUsername = User.makeOkayUsername(usernameToTry, allowDotDash = false,  // [CANONUN]\n-            tx.isUsernameInUse)  getOrElse throwForbidden(\"TyE2GKRC4C2\", s\"Cannot generate username\")\n-\n           // Look up by external id. If found, login.\n           // Look up by email. If found, reuse account, set external id, and login.\n           // Else, create new user with specified external id and email.\n \n-          tx.loadMemberInclDetailsByExternalId(extUser.externalId).map({ user =>\n+          tx.loadMemberInclDetailsByExternalId(extUser.externalId).map({ user =>  // (7KAB2BA)\n+            dieIf(user.externalId isNot extUser.externalId, \"TyE5KR02A\")\n             // TODO update fields, if different.\n             if (extUser.primaryEmailAddress != user.primaryEmailAddress) {\n               // TODO later: The external user's email address has been changed? Update this Talkyard\n               // user's email address too, then.  —  However, would be weird,\n-              // if there already is another external user mirror account, with that email??\n+              // if there already is another Talkyard account that mirrors [*another* external user\n+              // with that email]?\n               val anyUser2 = tx.loadMemberByPrimaryEmailOrUsername(extUser.primaryEmailAddress)\n               anyUser2 foreach { user2 =>\n                 throwForbidden(\"TyE2ABK40\", o\"\"\"s$siteId: Cannot update the email address of\n-                    Talkyard user ${user.idSpaceName} with external id\n+                    Talkyard user ${user.usernameHashId} with external id\n                     '${extUser.externalId}' to match the external user's new email address\n-                    ('${extUser.primaryEmailAddress}'): The address is already in use\n-                    by other Talkyard user ${user2.idSpaceName}\"\"\")\n+                    ('${extUser.primaryEmailAddress}'): The new address is already used\n+                    by another Talkyard user: ${user2.usernameHashId}\"\"\")\n               }\n \n               // TODO also check non-primary addrs. (5BK02A5)\n@@ -185,26 +176,34 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext)\n             // For now, just generate a login secret; don't sync users:\n             user\n           }) orElse\n-                // TODO what about looking up by secondary email addresses, or not?\n-                // Don't do that? They aren't supposed to be used for login. And do require\n-                // that there isn't any clash here: (5BK02A5)?\n-                tx.loadMemberInclDetailsByEmailAddr(extUser.primaryEmailAddress).map({ user =>\n-            dieIf(user.externalId is extUser.externalId, \"TyE7AKBR2\")\n+              // TODO what about looking up by secondary email addresses, or not?\n+              // Don't do that? They aren't supposed to be used for login. And do require\n+              // that there isn't any clash here: (5BK02A5)?\n+              tx.loadMemberInclDetailsByEmailAddr(extUser.primaryEmailAddress).map({ user =>\n+\n+            dieIf(user.externalId is extUser.externalId, \"TyE7AKBR2\") // ought to have been found by id\n+            dieIf(user.primaryEmailAddress != extUser.primaryEmailAddress, \"TyE7AKBR8\")\n+\n             throwForbiddenIf(user.externalId.isDefined,\n                 \"TyE5AKBR20\", o\"\"\"s$siteId: Email address ${extUser.primaryEmailAddress} is already\n-                  in use by Talkyard user ${user.idSpaceName} which mirrors\n-                  external user '${user.externalId}' - cannot create a mirror account for\n+                  in use by Talkyard user ${user.usernameHashId} which mirrors\n+                  external user '${user.externalId}' — cannot create a mirror account for\n                   external user '${extUser.externalId} that use that same email address\"\"\")\n \n+            throwForbiddenIf(user.emailVerifiedAt.isEmpty,\n+               \"TyE7BKG52A4\", o\"\"\"s$siteId: Cannot connect Talkyard user ${user.usernameHashId}\n+                  with external user '${user.externalId}': The Talkyard user account's email address\n+                  hasn't been verified.\"\"\")\n+\n             // Apparently this Talkyard user was created \"long ago\", and now we're\n-            // single-sign-on logging in as that user, for the first time. Connect this old account\n-            // with the external user account, and thereafter it'll get looked up via external\n-            // id instead (in the code block just above).\n-            Logger.info(o\"\"\"s$siteId: Connecting Talkyard user ${user.idSpaceName}\n-                to external user ${extUser.externalId}, because of matching\n-                email address: ${extUser.primaryEmailAddress}, and\n-                the Talkyard user doesn't currently mirror any external user.\n-                \"\"\")\n+            // single-sign-on logging in as that user, for the first time. Connect this Talkyard account\n+            // with the external user account, and, in the future, we'll find it via external\n+            // id lookup instead (in code block (7KAB2BA) above).\n+            Logger.info(o\"\"\"s$siteId:\n+                Connecting Talkyard user ${user.usernameHashId}\n+                to external user '${extUser.externalId}', because they have the same\n+                email address: ${extUser.primaryEmailAddress}, and the Talkyard\n+                user account doesn't currently mirror any external user. [TyM2DKW07X]\"\"\")\n \n             val updatedUser = user.copyWithExternalData(extUser)\n             dieIf(updatedUser == user, \"TyE4AKBRE2\")\n@@ -213,8 +212,15 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext)\n           }) getOrElse {\n             // Create a new Talkyard user account, for this external user.\n             // (There's no mirror account with a matching external id or email address.)\n+\n+            def makeName(): String = \"unnamed_\" + (nextRandomLong() % 1000)\n+            val usernameToTry = extUser.username.orElse(extUser.fullName).getOrElse(makeName())\n+            val okayUsername = User.makeOkayUsername(usernameToTry, allowDotDash = false,  // [CANONUN]\n+              tx.isUsernameInUse)  getOrElse throwForbidden(\"TyE2GKRC4C2\", s\"Cannot generate username\")\n+\n             Logger.info(o\"\"\"s$siteId: Creating new Talkyard user, with username @$okayUsername,\n-                for external user ${extUser.externalId}...\"\"\")\n+                for external user '${extUser.externalId}'... [TyM5BKA2WA0]\"\"\")\n+\n             val userData = // [5LKKWA10]\n               NewPasswordUserData.create(\n                 name = extUser.fullName,\n@@ -230,7 +236,7 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext)\n               match {\n                 case Good(data) => data\n                 case Bad(errorMessage) =>\n-                  throwUnprocessableEntity(\"DwE805T4\", s\"$errorMessage, please try again.\")\n+                  throwUnprocessableEntity(\"TyE4BKR03J\", s\"$errorMessage, please try again.\")\n               }\n             dao.createUserForExternalSsoUser(userData, request.theBrowserIdData, tx)\n           }"
    },
    {
      "sha": "8218ec15a8d523ee3dd761fcfad45ce93ab7bc92",
      "filename": "app/controllers/DraftsController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/app/controllers/DraftsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/app/controllers/DraftsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/DraftsController.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -164,7 +164,7 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n           val limit = 7 * 30\n           val oldDrafts = tx.listDraftsRecentlyEditedFirst(requester.id, limit = limit)\n           if (oldDrafts.length >= limit) oldDrafts.lastOption foreach { oldDraft =>\n-            val daysOld = now.daysSince(oldDraft.createdAt)\n+            val daysOld = now.daysSince(oldDraft.lastEditedAt getOrElse oldDraft.createdAt)\n             if (daysOld < 7)\n               throwTooManyRequests(\"Saving too many drafts [TyE7BKP32]\")\n           }"
    },
    {
      "sha": "ec61fa775537115da2c41dd58a5006b29e7ea68b",
      "filename": "app/controllers/EditController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/app/controllers/EditController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/app/controllers/EditController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/EditController.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -69,7 +69,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n         val thePageId = pageId.getOrThrowBadArgument(\"TyE2AKB45\", \"pageId\")\n         val thePostNr = postNr.getOrThrowBadArgument(\"TyE2AKB46\", \"postNr\")\n         val thePost = dao.loadPost(thePageId, thePostNr) getOrElse {\n-          throwIndistinguishableNotFound(\"TyE5AKBR02\")\n+          throwIndistinguishableNotFound(\"TyE8AKVR04\")\n         }\n         Some(DraftLocator(\n           DraftType.Reply,"
    },
    {
      "sha": "40463957004092388c16dc2fca16d3c8ca11d44c",
      "filename": "app/controllers/ResetPasswordController.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/app/controllers/ResetPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/app/controllers/ResetPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/ResetPasswordController.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -68,10 +68,10 @@ class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: EdC\n         dieIf(user.email != emailOrUsername && user.theUsername != emailOrUsername, \"DwE0F21\")\n         var isCreating = false\n         if (user.passwordHash.isDefined) {\n-          Logger.info(s\"s$siteId: Sending password reset email to: $emailOrUsername [TyM2AKEG5]\")\n+          Logger.info(s\"s$siteId: Sending password reset email ${toWho(user)} [TyM2AKEG5]\")\n         }\n         else {\n-          Logger.info(s\"s$siteId: Sending create password email to: $emailOrUsername [TyM6WKBA20]\")\n+          Logger.info(s\"s$siteId: Sending create password email ${toWho(user)} [TyM6WKBA20]\")\n           isCreating = true\n         }\n         sendChangePasswordEmailTo(user, request, isCreating = isCreating)\n@@ -91,6 +91,9 @@ class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: EdC\n     Redirect(routes.ResetPasswordController.showEmailSentPage(isEmailAddress.toString).url)\n   }\n \n+  private def toWho(member: MemberMaybeDetails) =\n+    s\"to ${member.usernameHashId}, addr: ${member.primaryEmailAddress}\"\n+\n \n   def sendResetPasswordEmail: Action[JsValue] = PostJsonAction(RateLimits.ResetPassword, maxBytes = 10) {\n         request =>\n@@ -102,10 +105,10 @@ class ResetPasswordController @Inject()(cc: ControllerComponents, edContext: EdC\n     throwForbiddenIf(member.emailVerifiedAt.isEmpty, \"TyE5KBRE21\", \"Email address not verified\")\n \n     if (member.passwordHash.isDefined) {\n-      Logger.info(s\"s$siteId: Sending password reset email to: ${member.idSpaceName} [TyM5BKFW0]\")\n+      Logger.info(s\"s$siteId: Sending password reset email ${toWho(member)} [TyM5BKFW0]\")\n     }\n     else {\n-      Logger.info(s\"s$siteId: Sending create password email to: ${member.idSpaceName} [TyM2AKBP05\")\n+      Logger.info(s\"s$siteId: Sending create password email ${toWho(member)} [TyM2AKBP05]\")\n     }\n     sendChangePasswordEmailTo(member.briefUser, request, isCreating = member.passwordHash.isEmpty)\n     OkSafeJson(JsString(\"Ok.\"))"
    },
    {
      "sha": "5d49b843b9aedbaf3874e0c929b5fc65e938f440",
      "filename": "app/debiki/ReactJson.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/app/debiki/ReactJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/app/debiki/ReactJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/ReactJson.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -1818,7 +1818,7 @@ object JsX {\n       \"createdAt\" -> JsWhenMs(apiSecret.createdAt),\n       \"deletedAt\" -> JsWhenMsOrNull(apiSecret.deletedAt),\n       \"isDeleted\" -> apiSecret.isDeleted,\n-      \"secretValue\" -> JsString(apiSecret.secretValue))\n+      \"secretKey\" -> JsString(apiSecret.secretKey))\n   }\n \n }"
    },
    {
      "sha": "2dbbc205b7e8365f9418c87973833bb53d0d67ea",
      "filename": "app/debiki/dao/RedisCache.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/app/debiki/dao/RedisCache.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/app/debiki/dao/RedisCache.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/RedisCache.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -151,13 +151,13 @@ class RedisCache(val siteId: SiteId, private val redis: RedisClient, private val\n   // SSO login\n   //-------------\n \n-  def saveOneTimeSsoLoginSecret(secretValue: String, userId: UserId) {\n-    val key = ssoUserBySecretKey(siteId, secretValue)\n+  def saveOneTimeSsoLoginSecret(secretKey: String, userId: UserId) {\n+    val key = ssoUserBySecretKey(siteId, secretKey)\n     redis.set(key, userId, exSeconds = Some(SingleSignOnSecretExpireSeconds))\n   }\n \n-  def getSsoLoginUserIdDestroySecret(secretValue: String): Option[UserId] = {\n-    val key = ssoUserBySecretKey(siteId, secretValue)\n+  def getSsoLoginUserIdDestroySecret(secretKey: String): Option[UserId] = {\n+    val key = ssoUserBySecretKey(siteId, secretKey)\n     // Could do this in a transaction? [REDITX]\n     val futureString: Future[Option[ByteString]] = redis.get(key)\n     redis.del(key)"
    },
    {
      "sha": "aa53024be7f35d981047d50a366c454dd747097d",
      "filename": "app/debiki/dao/SiteDao.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/app/debiki/dao/SiteDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/app/debiki/dao/SiteDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/SiteDao.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -369,14 +369,14 @@ class SiteDao(\n     val now = globals.now()\n \n     // If more than two *sysbot* secrets get greated per day, something weird is going on.\n-    val recentSecrets = listApiSecrets(limit = 100).takeWhile(s => now.daysSince(s.createdAt) < 20)\n+    val recentSecrets = listApiSecrets(limit = 50).takeWhile(s => now.daysSince(s.createdAt) < 20)\n     throwForbiddenIf(recentSecrets.length > 40, \"TyE5PKR2Q\", \"You're creating secrets too fast\")\n \n     val value = nextRandomString()\n     readWriteTransaction { tx =>\n       val nr = tx.nextApiSecretNr()\n       val secret = ApiSecret(nr, userId = forUserId, createdAt = now,\n-        deletedAt = None, isDeleted = false, secretValue = value)\n+        deletedAt = None, isDeleted = false, secretKey = value)\n       tx.insertApiSecret(secret)\n       secret\n     }\n@@ -387,8 +387,8 @@ class SiteDao(\n     readWriteTransaction(tx => secretNrs.foreach(tx.setApiSecretDeleted(_, now)))\n   }\n \n-  def getApiSecret(secretValue: String): Option[ApiSecret] = {\n-    readOnlyTransaction(_.loadApiSecretBySecretValue(secretValue))\n+  def getApiSecret(secretKey: String): Option[ApiSecret] = {\n+    readOnlyTransaction(_.loadApiSecretBySecretKey(secretKey))\n   }\n \n "
    },
    {
      "sha": "f852105e142375a9e379f99619832eda9c78e2c6",
      "filename": "app/debiki/dao/UserDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/app/debiki/dao/UserDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/app/debiki/dao/UserDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/UserDao.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -484,6 +484,7 @@ trait UserDao {\n \n   def createPasswordUserCheckPasswordStrong(userData: NewPasswordUserData, browserIdData: BrowserIdData)\n         : Member = {\n+    dieIf(userData.externalId.isDefined, \"TyE5BKW02QX\")\n     security.throwErrorIfPasswordBad(\n       password = userData.password.getOrDie(\"TyE2AKB84\"), username = userData.username,\n       fullName = userData.name, email = userData.email,"
    },
    {
      "sha": "6c07519c9e7627c1af3204d6e2b5d28b401a7e37",
      "filename": "app/ed/server/http/PlainApiActions.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/app/ed/server/http/PlainApiActions.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/app/ed/server/http/PlainApiActions.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/http/PlainApiActions.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -113,9 +113,9 @@ class PlainApiActions(\n       val decodedBytes: Array[Byte] = acb.Base64.decodeBase64(usernamePasswordBase64Encoded)\n       val usernameColonPassword = new String(decodedBytes, \"UTF-8\")\n       val (username, colonPassword) = usernameColonPassword.span(_ != ':')\n-      val secretValue = colonPassword.drop(1)\n+      val secretKey = colonPassword.drop(1)\n       val dao = globals.siteDao(site.id)\n-      val apiSecret = dao.getApiSecret(secretValue) getOrElse {\n+      val apiSecret = dao.getApiSecret(secretKey) getOrElse {\n         throwNotFound(\"TyEAPI0SECRET\", \"No such API secret or it has been deleted\")\n       }\n       val talkyardIdPrefix = \"talkyardId=\""
    },
    {
      "sha": "41d6f4d623be1a442284dc84547d74092b7f192b",
      "filename": "app/views/templates/wrapper.scala.html",
      "status": "modified",
      "additions": 3,
      "deletions": 9,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/app/views/templates/wrapper.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/app/views/templates/wrapper.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/templates/wrapper.scala.html?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -17,8 +17,6 @@\n \n @(tpi: debiki.SiteTpi, useGoogleAnalytics: Boolean = true)(content: Html)\n \n-@mustLoginToRead = @{ tpi.siteSettings.userMustBeAuthenticated }\n-\n <!DOCTYPE html>\n <html class=\"@tpi.debikiHtmlTagClasses\">\n <head>\n@@ -40,21 +38,17 @@\n <div id=\"esPageColumn\">\n <div id=\"esPageScrollable\">\n <div id=\"thePageTop\"></div>\n-@{ /* UX; SHOULD show the header, if logged in. Solution = move this to Typescript. [7WKBAY02] */}\n-@if(!mustLoginToRead) {\n <div class=\"esPageHeader\">\n @* Auto collapse nav menu items, if narrow screen?  https://github.com/lukejacksonn/GreedyNav  *@\n+@* Move to Typescript? So can hide, if not logged in. [7WKBAY02] *@\n @Html(tpi.siteSettings.headerHtml)\n </div>\n-}\n \n @content\n \n @if(!tpi.anyCurrentPageRole.exists(_.isChat)) {\n-  @{ /* UX; SHOULD show footer, if logged in. Solution = move this to Typescript. [7WKBAY02] */}\n-  @if(!mustLoginToRead) {\n-    @Html(tpi.siteSettings.footerHtml)\n-  }\n+  @* Move to Typescript? So can hide, if not logged in. [7WKBAY02] *@\n+  @Html(tpi.siteSettings.footerHtml)\n }\n \n <div id=\"thePageBottom\"></div>"
    },
    {
      "sha": "59c26e6a583c7d57877793887f6fa8595320976e",
      "filename": "client/app/admin/api-panel.staff.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/client/app/admin/api-panel.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/client/app/admin/api-panel.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/admin/api-panel.staff.ts?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -114,7 +114,7 @@ const ApiSecretItem = createComponent({\n     const secret: ApiSecret = this.props.apiSecret;\n     // Don't show secrets that still works, unless one clicks Show — so less risk that they get exposed.\n     const shallShow = this.state.showValue || secret.isDeleted;\n-    const valueOrShowButton = shallShow ? secret.secretValue :\n+    const secretKeyOrShowButton = shallShow ? secret.secretKey :\n         Button({ onClick: () => this.setState({ showValue: true }) }, \"Show\");\n \n     const deleteButton = secret.isDeleted ? null :\n@@ -126,7 +126,7 @@ const ApiSecretItem = createComponent({\n       r.td({}, timeExact(secret.createdAt)),\n       r.td({}, secret.isDeleted ? rFragment(\"Yes, \", timeExact(secret.deletedAt)) : \"No\"),\n       r.td({}, \"Do anything\"), // secret.secretType is always for any user\n-      r.td({}, deleteButton, valueOrShowButton));\n+      r.td({}, deleteButton, secretKeyOrShowButton));\n   }\n });\n "
    },
    {
      "sha": "ebcfb33f8f880bd51fa4f356862cbd43122d3ae4",
      "filename": "client/app/model.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/client/app/model.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/client/app/model.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/model.ts?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -1377,7 +1377,7 @@ interface ApiSecret {\n   createdAt: WhenMs;\n   deletedAt?: WhenMs;\n   isDeleted: boolean,\n-  secretValue: string;\n+  secretKey: string;\n }\n \n "
    },
    {
      "sha": "4b2bdf711ec3a6bb8f638f55d1637cb2c6157e53",
      "filename": "client/app/users/user-preferences.more.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/client/app/users/user-preferences.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/client/app/users/user-preferences.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/users/user-preferences.more.ts?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -387,12 +387,12 @@ const AboutMember = createComponent({\n         isBuiltInUser ? null : r.div({ className: 'form-group' },    // + also on  Account tab.\n           r.label({}, t.pwd.PasswordC),\n           r.span({}, user.hasPassword ? \" Yes.\" : \" None.\"),   // I18N\n-          r.a({ style: { verticalAlign: 'baseline' },\n-            // UX COULD improve: For now, link to the reset password page where one types\n-            // one's email or username, and then gets a pwd reset link via email.\n+          r.a({\n+            // UX COULD improve: For now, send a pwd reset email — works only if the user\n+            // has typed hens email addr :-/\n             // Later: link directly to the reset-pwd page, and have the user first type\n-            // the current pwd, before asking for a new. If they've forgotte their pwd,\n-            // send a pwd reset email. (But never let anyone changing pwd, without confirming\n+            // the current pwd, before asking for a new. Only if they've forgotten their pwd,\n+            // a pwd reset email is needed. (But never let anyone changing pwd, without confirming\n             // that hen knows the old, or is the email addr owner.)\n             onClick: this.maybeChangePassword,\n             className: 'btn s_UP_Prefs_ChangePwB' }, t.ChangeDots)),"
    },
    {
      "sha": "f41691641feef6e21d3fe00eb8646d6450b3056f",
      "filename": "client/app/users/users-page.styl",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/client/app/users/users-page.styl",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/client/app/users/users-page.styl",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app/users/users-page.styl?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -253,7 +253,8 @@ a.s_Dfs_Df\n   min-height: 70px;\n \n .s_UP_Prefs_ChangeUNB,\n-.s_UP_Prefs_ChangeEmailB\n+.s_UP_Prefs_ChangeEmailB,\n+.s_UP_Prefs_ChangePwB\n   border: none;\n   font-size: $postFontSize;\n   color: hsl(207, 80%, 41%);"
    },
    {
      "sha": "0dcc93ebb19d18074eeaaa9c6525c2e58d2b51b7",
      "filename": "docs/e2e-tests-map.txt",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/docs/e2e-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/docs/e2e-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-map.txt?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -90,7 +90,11 @@ profile page -\n   upload photo:  (8PK2)\n   edit full name:\n   change username:\n+  create password:\n   change password:\n+    type old password:\n+    via email:\n+          - user-profile-change-password.test.ts  TyT6HJ2RD1\n   create password:\n   list & click notfs:\n   suspend:"
    },
    {
      "sha": "2924804e38c692f1f571d9763c7a1c803b2507c3",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/Prelude.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/modules/ed-core/src/main/scala/com/debiki/core/Prelude.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/modules/ed-core/src/main/scala/com/debiki/core/Prelude.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/Prelude.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -215,6 +215,7 @@ object Prelude {\n    * was absent, or if there was nothing after the origin.\n    */\n   def stripOrigin(url: String): Option[String] = url match {\n+    // SECURITY use a simpler matches-more-but-still-safe regex, because here we want to excl weird things.\n     case StripOriginRegex(_, _, _, _, path) => Option(path)\n     case _ => None\n   }"
    },
    {
      "sha": "6491026139119e2b9a146700f020a420aa23613e",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/modules/ed-core/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/modules/ed-core/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/SiteTransaction.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -604,7 +604,7 @@ trait SiteTransaction {\n   def nextApiSecretNr(): DraftNr\n   def insertApiSecret(secret: ApiSecret)\n   def setApiSecretDeleted(secretNr: ApiSecretNr, when: When): Boolean\n-  def loadApiSecretBySecretValue(secretValue: String): Option[ApiSecret]\n+  def loadApiSecretBySecretKey(secretKey: String): Option[ApiSecret]\n   def listApiSecretsRecentlyCreatedFirst(limit: Int): immutable.Seq[ApiSecret]\n }\n "
    },
    {
      "sha": "2c30a3880a744a96d9183afb2b1adeb09035926e",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/package.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -603,15 +603,15 @@ package object core {\n     * @param deletedAt\n     * @param isDeleted — once set to true, never changed back to false. `deletedAt` might not`\n     *   always be accurate in case the server's clock is off.\n-    * @param secretValue — don't show\n+    * @param secretKey — don't show\n     */\n   case class ApiSecret(\n     nr: ApiSecretNr,\n     userId: Option[UserId],\n     createdAt: When,\n     deletedAt: Option[When],\n     isDeleted: Boolean,\n-    secretValue: String) {\n+    secretKey: String) {\n \n     require(!isDeleted || deletedAt.isDefined, \"TyE4ABKR01\")\n     require(deletedAt.isEmpty || createdAt.millis <= deletedAt.get.millis, \"TyE4ABKR02\")"
    },
    {
      "sha": "5c80b565ad6a44244f2473ac25eee89dceb2e6ca",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/user.scala",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/modules/ed-core/src/main/scala/com/debiki/core/user.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/modules/ed-core/src/main/scala/com/debiki/core/user.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/user.scala?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -175,8 +175,8 @@ case class NewPasswordUserData(\n   dieIfBad(Validation.checkEmail(email), \"TyE4WKBJ7Z\", identity)\n   // Password: See security.throwErrorIfPasswordTooWeak, instead.\n \n-  require(externalId.isDefined != password.isDefined, \"TyE5AKBR02\")\n-  require(!firstSeenAt.exists(_.isBefore(createdAt)), \"EdE2WVKF063\")\n+  require(externalId.isDefined != password.isDefined, \"TyE5VAKBR02\")\n+  require(!firstSeenAt.exists(_.isBefore(createdAt)), \"TyE2WVKF063\")\n }\n \n \n@@ -596,7 +596,7 @@ case class Member(\n   id: UserId,\n   fullName: Option[String],\n   theUsername: String,\n-  email: String,  // COULD RENAME to primaryEmailAddr\n+  email: String,  // COULD RENAME to primaryEmailAddress\n   emailNotfPrefs: EmailNotfPrefs,\n   emailVerifiedAt: Option[ju.Date] = None,\n   passwordHash: Option[String] = None,  // OPTIMIZE no need to always load? Move to MemberInclDetails?\n@@ -613,12 +613,15 @@ case class Member(\n   isModerator: Boolean = false,\n   isSuperAdmin: Boolean = false,\n   override val isDeactivated: Boolean = false,\n-  override val isDeleted: Boolean = false) extends User {\n+  override val isDeleted: Boolean = false) extends User with MemberMaybeDetails {\n+\n+  def primaryEmailAddress: String = email\n \n   override def anyName: Option[String] = fullName\n   override def anyUsername: Option[String] = username\n   def username: Option[String] = Some(theUsername)\n   def usernameOrGuestName: String = theUsername\n+  def usernameHashId: String = s\"@$username#$id\"\n \n   def usernameParensFullName: String = fullName match {\n     case Some(name) => s\"$theUsername ($name)\"\n@@ -650,6 +653,12 @@ case class Member(\n }\n \n \n+trait MemberMaybeDetails {\n+  def usernameHashId: String\n+  def primaryEmailAddress: String\n+}\n+\n+\n case class ExternalUser(\n   externalId: String,\n   primaryEmailAddress: String,\n@@ -663,7 +672,7 @@ case class ExternalUser(\n \n   require(externalId.isTrimmedNonEmpty, \"TyE5KBW01\")\n   Validation.checkEmail(primaryEmailAddress).badMap(errorMessage =>\n-    die(\"TyE5KBW02\", s\"Bad email: $primaryEmailAddress\"))\n+    die(\"TyE5KBW02\", s\"Bad email: $primaryEmailAddress, for external user id: '$externalId'\"))\n   require(username.forall(_.isTrimmedNonEmpty), \"TyE5KBW05\")\n   require(fullName.forall(_.isTrimmedNonEmpty), \"TyE5KBW06\")\n   require(avatarUrl.forall(_.isTrimmedNonEmpty), \"TyE5KBW07\")\n@@ -744,7 +753,7 @@ case class MemberInclDetails(\n   threatLevel: ThreatLevel = ThreatLevel.HopefullySafe,  // RENAME to autoThreatLevel?\n   lockedThreatLevel: Option[ThreatLevel] = None,\n   deactivatedAt: Option[When] = None,\n-  deletedAt: Option[When] = None) extends MemberOrGroupInclDetails {\n+  deletedAt: Option[When] = None) extends MemberOrGroupInclDetails with MemberMaybeDetails {\n \n   require(User.isOkayUserId(id), \"DwE077KF2\")\n   require(username.length >= 2, \"DwE6KYU9\")\n@@ -796,6 +805,7 @@ case class MemberInclDetails(\n   //def canonicalUsername: String = User.makeUsernameCanonical(username)  // [CANONUN]\n \n   def idSpaceName: String = s\"$id @$username\"\n+  def usernameHashId: String = s\"@$username#$id\"\n \n   def createdWhen: When = When.fromDate(createdAt)\n "
    },
    {
      "sha": "33056db2037ec9dc76eea9677403da2b06146ac8",
      "filename": "modules/ed-dao-rdb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": null,
      "raw_url": null,
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-dao-rdb?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -1 +1 @@\n-Subproject commit e653d288ad9a816ca52f5cc62b2e5779973d85a7\n+Subproject commit 33056db2037ec9dc76eea9677403da2b06146ac8"
    },
    {
      "sha": "689fe5f310c31a841061f37f289ce6b36e3c5806",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -224,6 +224,7 @@ function runAllE2eTests {\n   runE2eTest s/wdio target/e2e/wdio.conf.js            --only user-profile-access $args\n   runE2eTest s/wdio target/e2e/wdio.conf.js            --only user-profile-change-username $args\n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only user-profile-change-email $args\n+  runE2eTest s/wdio target/e2e/wdio.conf.js            --only user-profile-change-password $args\n   runE2eTest s/wdio target/e2e/wdio.conf.js            --only user-profile-cannot-delete-openauth-email $args\n \n   runE2eTest s/wdio target/e2e/wdio.3chrome.conf.js    --only custom-forms.3browsers $args"
    },
    {
      "sha": "119db78c14768c9b8df77ba3725553038c7ed5ad",
      "filename": "tests/e2e/specs/user-profile-change-password.test.ts",
      "status": "added",
      "additions": 115,
      "deletions": 0,
      "changes": 115,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/tests/e2e/specs/user-profile-change-password.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/tests/e2e/specs/user-profile-change-password.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/user-profile-change-password.test.ts?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -0,0 +1,115 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('assert');\n+import server = require('../utils/server');\n+import utils = require('../utils/utils');\n+import make = require('../utils/make');\n+import pagesFor = require('../utils/pages-for');\n+import settings = require('../utils/settings');\n+import { buildSite } from '../utils/site-builder';\n+import logAndDie = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+declare let browser: any;\n+\n+let forum: LargeTestForum;\n+\n+let everyonesBrowser;\n+let maria;\n+let mariasBrowser;\n+let mallory;\n+let mallorysBrowser;\n+\n+let idAddress: IdAddress;\n+let siteId;\n+let forumTitle = \"Change Password Test Forum\";\n+\n+let mariasPassword2 = \"kittens-I-pat-cute-cute-347-each-day\";\n+\n+\n+describe(\"user-profile-change-password.test.ts  TyT6HJ2RD1\", () => {\n+\n+  it(\"import a site, init people\", () => {\n+    everyonesBrowser = _.assign(browser, pagesFor(browser));\n+    mariasBrowser = everyonesBrowser;\n+    mallorysBrowser = everyonesBrowser;\n+\n+    forum = buildSite().addLargeForum({ title: forumTitle });\n+    maria = forum.members.maria;\n+    mallory = forum.members.mallory;\n+\n+    idAddress = server.importSiteData(forum.siteData);\n+    siteId = idAddress.id;\n+  });\n+\n+  it(\"Maria logs in\", () => {\n+    mariasBrowser.go(idAddress.origin + '/');\n+    mariasBrowser.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+\n+  it(\"... goes to her profile page\", () => {\n+    mariasBrowser.topbar.clickGoToProfile();\n+    mariasBrowser.userProfilePage.clickGoToPreferences();\n+  });\n+\n+  it(\"... and changes her password\", () => {\n+    mariasBrowser.userProfilePage.preferences.clickChangePassword();\n+    mariasBrowser.changePasswordDialog.clickYesChange();\n+  });\n+\n+  let mariasResetPasswordLink;\n+\n+  it(\"She gets a password reset email\", () => {\n+    mariasResetPasswordLink = server.waitAndGetResetPasswordLinkEmailedTo(\n+        siteId, maria.emailAddress, browser);\n+  });\n+\n+  it(\"... clicks the reset-password link\", () => {\n+    mariasBrowser.go(mariasResetPasswordLink);\n+  });\n+\n+  it(\"... chooses a new password\", () => {\n+    mariasBrowser.chooseNewPasswordPage.typeAndSaveNewPassword(mariasPassword2);\n+  });\n+\n+  it(\"Maria goes back to the homepage\", () => {\n+    mariasBrowser.waitAndClick('a[href=\"/\"]');\n+  });\n+\n+  it(\"Maria logs out\", () => {\n+    mariasBrowser.topbar.clickLogout();\n+  });\n+\n+  it(\"Opens the login dialog, cannot login with the old password\", () => {\n+    mariasBrowser.complex.loginWithPasswordViaTopbar(maria, { resultInError: true });\n+  });\n+\n+  it(\"... but yes Maria's new password works\", () => {\n+    mariasBrowser.loginDialog.loginWithPassword(maria.username, mariasPassword2);\n+  });\n+\n+  it(\"Maria leaves\", () => {\n+    mariasBrowser.topbar.clickLogout();\n+  });\n+\n+  it(\"Mallory cannot login with Maria's old password\", () => {\n+    mallorysBrowser.topbar.clickLogin();\n+    mallorysBrowser.loginDialog.loginButBadPassword(mallory.username, maria.password);\n+  });\n+\n+  it(\"... not with her new\", () => {\n+    mallorysBrowser.loginDialog.loginButBadPassword(mallory.username,  mariasPassword2);\n+  });\n+\n+  it(\"... yes though, with his own\", () => {\n+    mallorysBrowser.loginDialog.loginWithPassword(mallory.username, mallory.password);\n+  });\n+\n+  it(\"... he gets logged in properly\", () => {\n+    mallorysBrowser.topbar.waitForMyMenuVisible();\n+    mallorysBrowser.topbar.assertMyUsernameMatches(mallory.username);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "0c3de927ca5db60eb8984faec49b679245888d55",
      "filename": "tests/e2e/utils/make.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/tests/e2e/utils/make.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/tests/e2e/utils/make.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/make.ts?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -226,8 +226,10 @@ const make = {\n       createdAtMs: DefaultCreatedAtMs,\n       emailAddress: \"e2e-test--mallory@example.com\",\n       emailVerifiedAtMs: DefaultCreatedAtMs,\n-      passwordHash: \"cleartext:publ-ma020\",\n-      password: \"publ-ma020\",\n+      // As two chars from one's username, just after 'publ-', use 'ml' not 'ma',\n+      // so will be different from Maja's password.\n+      passwordHash: \"cleartext:publ-ml020\",\n+      password: \"publ-ml020\",\n     };\n   },\n "
    },
    {
      "sha": "0fb690503a79d757293d79795ba388247005e48b",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/b07445e5122060fb84382b3ccec19fad9b62835d/tests/e2e/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/b07445e5122060fb84382b3ccec19fad9b62835d/tests/e2e/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/pages-for.ts?ref=b07445e5122060fb84382b3ccec19fad9b62835d",
      "patch": "@@ -1353,6 +1353,7 @@ function pagesFor(browser) {\n           password = null;\n         }\n         if (_.isObject(username)) {\n+          dieIf(_.isString(password), 'TyE2AKBF053');\n           password = username.password;\n           username = username.username;\n         }\n@@ -3129,6 +3130,10 @@ function pagesFor(browser) {\n           setCheckbox('#emailForEveryNewPost', enabled);\n         },\n \n+        clickChangePassword: function() {\n+          api.waitAndClick('.s_UP_Prefs_ChangePwB');\n+        },\n+\n         save: function() {\n           api.userProfilePage.preferences.clickSave();\n           api.waitUntilModalGone();\n@@ -3138,7 +3143,6 @@ function pagesFor(browser) {\n         clickSave: function() {\n           api.waitAndClick('#e2eUP_Prefs_SaveB');\n         },\n-\n         // ---- /END should be wrapped in `about { .. }`.\n \n         privacy: {\n@@ -3881,6 +3885,13 @@ function pagesFor(browser) {\n     },\n \n \n+    changePasswordDialog: {\n+      clickYesChange: () => {\n+        browser.waitAndClick('.esStupidDlg .btn-primary');\n+      },\n+    },\n+\n+\n     serverErrorDialog: {\n       waitForJustGotSuspendedError: function() {\n         api.waitUntilTextMatches('.modal-body', 'TyESUSPENDED_|TyE0LGDIN_');"
    }
  ]
}
