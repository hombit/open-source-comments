{
  "sha": "1564b380b16da66c5fba06bc4b62a378ff836d93",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6MTU2NGIzODBiMTZkYTY2YzVmYmEwNmJjNGI2MmEzNzhmZjgzNmQ5Mw==",
  "commit": {
    "author": {
      "name": "Kim Gardner",
      "email": "kgardnr@gmail.com",
      "date": "2018-09-14T03:38:40Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2018-09-14T03:38:40Z"
    },
    "message": "Merge pull request #1870 from coralproject/tag-fix\n\nTag Fix",
    "tree": {
      "sha": "f0fa7041de8726f9024c5f3b7c6d0733f94ae7b1",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/f0fa7041de8726f9024c5f3b7c6d0733f94ae7b1"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/1564b380b16da66c5fba06bc4b62a378ff836d93",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbmy1BCRBK7hj4Ov3rIwAAdHIIAAHJjmg2oqmTu7OK9fF/NZ73\njco5XAh+2cmc/1U/uUKJ3Fwh//f4hWTzd/ULgWG0WDILNHlq35kECKuXJXwJzJhZ\nHxnj0osA36FyqixzTtVFydpHlK9XfaQJ9cdYCerYL1AsTXuAf9t8bqaojUOumucX\njq00gdGQ16DA36gSTMgU7CVaghLP5dyA/2XRsdLOTM0pNSZlR7s8xL7h3gJSEiHK\nsjLpzDbNkHu7b5Wv+freoyaM8Pdq2I2MHmD1RRS7O5/wF2hB4oIAoR1zWryQOUu3\n/NPOfkjo9tE5VOAgDE1IbYYdO3BqxbM31/OE8T7+67YTuZFVZ9LSJ7E5+LvbVbU=\n=nclE\n-----END PGP SIGNATURE-----\n",
      "payload": "tree f0fa7041de8726f9024c5f3b7c6d0733f94ae7b1\nparent 3fda3b4b7cbbc7b43b1e7732561bf2f29725a0b1\nparent 593b8959c59597df36d786916145b8ada781554d\nauthor Kim Gardner <kgardnr@gmail.com> 1536896320 -0400\ncommitter GitHub <noreply@github.com> 1536896320 -0400\n\nMerge pull request #1870 from coralproject/tag-fix\n\nTag Fix"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/1564b380b16da66c5fba06bc4b62a378ff836d93",
  "html_url": "https://github.com/coralproject/talk/commit/1564b380b16da66c5fba06bc4b62a378ff836d93",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/1564b380b16da66c5fba06bc4b62a378ff836d93/comments",
  "author": {
    "login": "kgardnr",
    "id": 1077300,
    "node_id": "MDQ6VXNlcjEwNzczMDA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/1077300?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kgardnr",
    "html_url": "https://github.com/kgardnr",
    "followers_url": "https://api.github.com/users/kgardnr/followers",
    "following_url": "https://api.github.com/users/kgardnr/following{/other_user}",
    "gists_url": "https://api.github.com/users/kgardnr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kgardnr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kgardnr/subscriptions",
    "organizations_url": "https://api.github.com/users/kgardnr/orgs",
    "repos_url": "https://api.github.com/users/kgardnr/repos",
    "events_url": "https://api.github.com/users/kgardnr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kgardnr/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3fda3b4b7cbbc7b43b1e7732561bf2f29725a0b1",
      "url": "https://api.github.com/repos/coralproject/talk/commits/3fda3b4b7cbbc7b43b1e7732561bf2f29725a0b1",
      "html_url": "https://github.com/coralproject/talk/commit/3fda3b4b7cbbc7b43b1e7732561bf2f29725a0b1"
    },
    {
      "sha": "593b8959c59597df36d786916145b8ada781554d",
      "url": "https://api.github.com/repos/coralproject/talk/commits/593b8959c59597df36d786916145b8ada781554d",
      "html_url": "https://github.com/coralproject/talk/commit/593b8959c59597df36d786916145b8ada781554d"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 41,
    "deletions": 3
  },
  "files": [
    {
      "sha": "4153842c3beb086e0228046dcdfb5c7c9b3d15eb",
      "filename": "services/tags.js",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/coralproject/talk/blob/1564b380b16da66c5fba06bc4b62a378ff836d93/services/tags.js",
      "raw_url": "https://github.com/coralproject/talk/raw/1564b380b16da66c5fba06bc4b62a378ff836d93/services/tags.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/services/tags.js?ref=1564b380b16da66c5fba06bc4b62a378ff836d93",
      "patch": "@@ -5,7 +5,6 @@ const Assets = require('./assets');\n const Settings = require('./settings');\n const { ADD_COMMENT_TAG } = require('../perms/constants');\n const { ErrNotAuthorized } = require('../errors');\n-const { get, has } = require('lodash');\n \n const updateModel = async (item_type, query, update) => {\n   // Get the model to update with.\n@@ -60,8 +59,16 @@ class TagsService {\n       asset = await Assets.findById(id);\n     }\n \n-    if (asset && has(asset, 'settings.tags')) {\n-      return get(asset, 'settings.tags');\n+    // Lodash has issues with determining property existence when the object\n+    // is a Mongoose model, this is likely related to how Mongoose proxies the\n+    // object, but this concrete check works.\n+    if (\n+      asset &&\n+      asset.settings &&\n+      asset.settings.tags &&\n+      Array.isArray(asset.settings.tags)\n+    ) {\n+      return asset.settings.tags;\n     }\n \n     // Extract the tags from the settings object."
    },
    {
      "sha": "519c68b8220cdf12b6ff0c7199c978fd914aab45",
      "filename": "test/server/services/tags.js",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/coralproject/talk/blob/1564b380b16da66c5fba06bc4b62a378ff836d93/test/server/services/tags.js",
      "raw_url": "https://github.com/coralproject/talk/raw/1564b380b16da66c5fba06bc4b62a378ff836d93/test/server/services/tags.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/test/server/services/tags.js?ref=1564b380b16da66c5fba06bc4b62a378ff836d93",
      "patch": "@@ -2,6 +2,7 @@ const TagsService = require('../../../services/tags');\n const UsersService = require('../../../services/users');\n const SettingsService = require('../../../services/settings');\n const CommentModel = require('../../../models/comment');\n+const AssetModel = require('../../../models/asset');\n const Context = require('../../../graph/context');\n \n const chai = require('chai');\n@@ -18,6 +19,24 @@ describe('services.TagsService', () => {\n       '1Coral!!',\n       'Stampi'\n     );\n+    // We don't care about the asset value, just that it exists.\n+    await AssetModel.create({\n+      id: '123',\n+      settings: {\n+        tags: [\n+          {\n+            name: 'TEST',\n+            permissions: {\n+              public: true,\n+              self: true,\n+              roles: [],\n+            },\n+            models: ['COMMENTS'],\n+            created_at: new Date(),\n+          },\n+        ],\n+      },\n+    });\n     comment = await CommentModel.create({\n       id: '1',\n       body: 'comment 10',\n@@ -28,6 +47,18 @@ describe('services.TagsService', () => {\n     });\n   });\n \n+  describe('#getAll', () => {\n+    it('retrieves tags from the asset', async () => {\n+      const tags = await TagsService.getAll({\n+        item_type: 'COMMENTS',\n+        asset_id: comment.asset_id,\n+      });\n+\n+      expect(tags.length).to.equal(1);\n+      expect(tags[0].name).to.equal('TEST');\n+    });\n+  });\n+\n   describe('#add', () => {\n     it('adds a tag', async () => {\n       const id = comment.id;"
    }
  ]
}
