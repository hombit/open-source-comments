{
  "sha": "c70e060d220a63bd097c89218dbf4279610cfd07",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmM3MGUwNjBkMjIwYTYzYmQwOTdjODkyMThkYmY0Mjc5NjEwY2ZkMDc=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2018-09-15T01:33:40Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2018-09-15T01:33:40Z"
    },
    "message": "Feature/avatar_bolt (#205)\n\n* add bolt implementation of avatar store\r\n\r\n* include bolt avatar store in main's test\r\n\r\n* change docs with new avatart params\r\n\r\n* lint: single line declaration\r\n\r\n* separate bucket for avatars metas\r\n\r\n* fix comments\r\n\r\n* test for bolt params\r\n\r\n* closable avatar store\r\n\r\n* fix dbl-close",
    "tree": {
      "sha": "ffb59844052819ad74afa370596af76c160d359e",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/ffb59844052819ad74afa370596af76c160d359e"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/c70e060d220a63bd097c89218dbf4279610cfd07",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbnGF0CRBK7hj4Ov3rIwAAdHIIAB1okXJymcgQcy0W2Pp2VOF+\nSWsEXk4Py87rU7mWIY+fpjGPVYsjoQfYYdrR6364AWErmCoLDJn9jI9leo+H6Az8\nmCt7cs7se3KmD45UGeIioXgxkvE8+cF5y0kI4RVXvJ6hYQ1yvfRuAjEgnLTHX9B4\nxEDjTcuQfQ5ygwNHPksN47fH2kSRbSegaW9KZLo3fPb3D3TxpvpNMyYqxYpEzO9V\nwRIDkLWeOPRcs3smpWHvLkLN04UBxpfhkTp3E8MZOTtxpxDNuezQT0tsB3bM00zC\nUBJjwbaGW7jAfXlkEo79qMwhGG7vVLTtm90LYFwQWvk0uNg9Etxd4fZ/FCOOKIQ=\n=NSD5\n-----END PGP SIGNATURE-----\n",
      "payload": "tree ffb59844052819ad74afa370596af76c160d359e\nparent d7185a861a19cf7bb08f7cb700091f83272368e8\nauthor Umputun <umputun@gmail.com> 1536975220 -0500\ncommitter GitHub <noreply@github.com> 1536975220 -0500\n\nFeature/avatar_bolt (#205)\n\n* add bolt implementation of avatar store\r\n\r\n* include bolt avatar store in main's test\r\n\r\n* change docs with new avatart params\r\n\r\n* lint: single line declaration\r\n\r\n* separate bucket for avatars metas\r\n\r\n* fix comments\r\n\r\n* test for bolt params\r\n\r\n* closable avatar store\r\n\r\n* fix dbl-close\r\n"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/c70e060d220a63bd097c89218dbf4279610cfd07",
  "html_url": "https://github.com/umputun/remark/commit/c70e060d220a63bd097c89218dbf4279610cfd07",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/c70e060d220a63bd097c89218dbf4279610cfd07/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d7185a861a19cf7bb08f7cb700091f83272368e8",
      "url": "https://api.github.com/repos/umputun/remark/commits/d7185a861a19cf7bb08f7cb700091f83272368e8",
      "html_url": "https://github.com/umputun/remark/commit/d7185a861a19cf7bb08f7cb700091f83272368e8"
    }
  ],
  "stats": {
    "total": 381,
    "additions": 337,
    "deletions": 44
  },
  "files": [
    {
      "sha": "8a7d17a998e583e040a22f2b2266df4f8e0dd220",
      "filename": "README.md",
      "status": "modified",
      "additions": 39,
      "deletions": 40,
      "changes": 79,
      "blob_url": "https://github.com/umputun/remark/blob/c70e060d220a63bd097c89218dbf4279610cfd07/README.md",
      "raw_url": "https://github.com/umputun/remark/raw/c70e060d220a63bd097c89218dbf4279610cfd07/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/README.md?ref=c70e060d220a63bd097c89218dbf4279610cfd07",
      "patch": "@@ -82,46 +82,45 @@ _this is the recommended way to run remark42_\n \n #### Parameters\n \n-| Command line       | Environment        | Default               | Description                                    |\n-| ------------------ | ------------------ | --------------------- | ---------------------------------------------- |\n-| url                | REMARK_URL         |                       | url to remark42 server, _required_             |\n-| secret             | SECRET             |                       | secret key, _required_                         |\n-| site               | SITE               | `remark`              | site name(s), _multi_                          |\n-| store.type         | STORE_TYPE         | `bolt`                | type of storage, `bolt` or `mongo`             |\n-| store.bolt.path    | STORE_BOLT_PATH    | `./var`               | path to data directory                         |\n-| store.bolt.timeout | STORE_BOLT_TIMEOUT | `30s`                 | boltdb access timeout                          |\n-| store.mongo.url    | STORE_MONGO_URL    |                       | mongo url for data store                       |\n-| store.mongo.db     | STORE_MONGO_DB     |                       | mongo db for data store                        |\n-| admin.shared.id    | ADMIN_SHARED_ID    |                       | admin names (list of user ids), _multi_        |\n-| admin.shared.email | ADMIN_SHARED_EMAIL | `admin@${REMARK_URL}` | admin email                                    |\n-| backup             | BACKUP_PATH        | `./var/backup`        | backups location                               |\n-| max-back           | MAX_BACKUP_FILES   | `10`                  | max backup files to keep                       |\n-| cache.max.items    | CACHE_MAX_ITEMS    | `1000`                | max number of cached items, `0` - unlimited    |\n-| cache.max.value    | CACHE_MAX_VALUE    | `65536`               | max size of cached value, `0` - unlimited      |\n-| cache.max.size     | CACHE_MAX_SIZE     | `50000000`            | max size of all cached values, `0` - unlimited |\n-| avatar.type        | AVATAR_TYPE        | `fs`                  | type of avatar storage, `fs` or `mongo`        |\n-| avatar.fs.path     | AVATAR_FS_PATH     | `./var/avatars`       | avatars location for `fs` store                |\n-| avatar.mongo.url   | AVATAR_MONGO_URL   |                       | mongo url for avatar store                     |\n-| avatar.mongo.db    | AVATAR_MONGO_DB    |                       | mongo db for avatar store                      |\n-| avatar.rsz-lmt     | AVATAR_RSZ_LMT     | 0                     | max image size for resizing avatars on save    |\n-| max-comment        | MAX_COMMENT_SIZE   | 2048                  | comment's size limit                           |\n-| auth.ttl.jwt       | AUTH_TTL_JWT       | 5m                    | jwt TTL                                        |\n-| auth.ttl.cookie    | AUTH_TTL_COOKIE    | 200h                  | cookie TTL                                     |\n-| auth.google.cid    | AUTH_GOOGLE_CID    |                       | Google OAuth client ID                         |\n-| auth.google.csec   | AUTH_GOOGLE_CSEC   |                       | Google OAuth client secret                     |\n-| auth.facebook.cid  | AUTH_FACEBOOK_CID  |                       | Facebook OAuth client ID                       |\n-| auth.facebook.csec | AUTH_FACEBOOK_CSEC |                       | Facebook OAuth client secret                   |\n-| auth.github.cid    | AUTH_GITHUB_CID    |                       | Github OAuth client ID                         |\n-| auth.github.csec   | AUTH_GITHUB_CSEC   |                       | Github OAuth client secret                     |\n-| auth.yandex.cid    | AUTH_YANDEX_CID    |                       | Yandex OAuth client ID                         |\n-| auth.yandex.csec   | AUTH_YANDEX_CSEC   |                       | Yandex OAuth client secret                     |\n-| auth.dev           | AUTH_DEV           | false                 | local oauth2 server, development mode only     |\n-| low-score          | LOW_SCORE          | `-5`                  | low score threshold                            |\n-| critical-score     | CRITICAL_SCORE     | `-10`                 | critical score threshold                       |\n-| edit-time          | EDIT_TIME          | `5m`                  | edit window                                    |\n-| img-proxy          | IMG_PROXY          | `false`               | enable http->https proxy for images            |\n-| dbg                | DEBUG              | `false`               | debug mode                                     |\n-| dev-passwd         | DEV_PASSWD         |                       | password for `dev` user                        |\n+| Command line       | Environment        | Default               | Description                                      |\n+| ------------------ | ------------------ | --------------------- | ------------------------------------------------ |\n+| url                | REMARK_URL         |                       | url to remark42 server, _required_               |\n+| secret             | SECRET             |                       | secret key, _required_                           |\n+| site               | SITE               | `remark`              | site name(s), _multi_                            |\n+| store.type         | STORE_TYPE         | `bolt`                | type of storage, `bolt` or `mongo`               |\n+| store.bolt.path    | STORE_BOLT_PATH    | `./var`               | path to data directory                           |\n+| store.bolt.timeout | STORE_BOLT_TIMEOUT | `30s`                 | boltdb access timeout                            |\n+| mongo.url          | MONGO_URL          |                       | mongo url for all stores using mongodb           |\n+| mongo.db           | MONGO_DB           |                       | mongo database                                   |\n+| admin.shared.id    | ADMIN_SHARED_ID    |                       | admin names (list of user ids), _multi_          |\n+| admin.shared.email | ADMIN_SHARED_EMAIL | `admin@${REMARK_URL}` | admin email                                      |\n+| backup             | BACKUP_PATH        | `./var/backup`        | backups location                                 |\n+| max-back           | MAX_BACKUP_FILES   | `10`                  | max backup files to keep                         |\n+| cache.max.items    | CACHE_MAX_ITEMS    | `1000`                | max number of cached items, `0` - unlimited      |\n+| cache.max.value    | CACHE_MAX_VALUE    | `65536`               | max size of cached value, `0` - unlimited        |\n+| cache.max.size     | CACHE_MAX_SIZE     | `50000000`            | max size of all cached values, `0` - unlimited   |\n+| avatar.type        | AVATAR_TYPE        | `fs`                  | type of avatar storage, `fs`, 'bolt`, or `mongo` |\n+| avatar.fs.path     | AVATAR_FS_PATH     | `./var/avatars`       | avatars location for `fs` store                  |\n+| avatar.bolt.file   | AVATAR_BOLT_FILE   | `./var/avatars.db`    | file name for  `bolt` store                      |\n+| avatar.rsz-lmt     | AVATAR_RSZ_LMT     | 0                     | max image size for resizing avatars on save      |\n+| auth.ttl.jwt       | AUTH_TTL_JWT       | 5m                    | jwt TTL                                          |\n+| auth.ttl.cookie    | AUTH_TTL_COOKIE    | 200h                  | cookie TTL                                       |\n+| auth.google.cid    | AUTH_GOOGLE_CID    |                       | Google OAuth client ID                           |\n+| auth.google.csec   | AUTH_GOOGLE_CSEC   |                       | Google OAuth client secret                       |\n+| auth.facebook.cid  | AUTH_FACEBOOK_CID  |                       | Facebook OAuth client ID                         |\n+| auth.facebook.csec | AUTH_FACEBOOK_CSEC |                       | Facebook OAuth client secret                     |\n+| auth.github.cid    | AUTH_GITHUB_CID    |                       | Github OAuth client ID                           |\n+| auth.github.csec   | AUTH_GITHUB_CSEC   |                       | Github OAuth client secret                       |\n+| auth.yandex.cid    | AUTH_YANDEX_CID    |                       | Yandex OAuth client ID                           |\n+| auth.yandex.csec   | AUTH_YANDEX_CSEC   |                       | Yandex OAuth client secret                       |\n+| auth.dev           | AUTH_DEV           | false                 | local oauth2 server, development mode only       |\n+| max-comment        | MAX_COMMENT_SIZE   | 2048                  | comment's size limit                             |\n+| low-score          | LOW_SCORE          | `-5`                  | low score threshold                              |\n+| critical-score     | CRITICAL_SCORE     | `-10`                 | critical score threshold                         |\n+| edit-time          | EDIT_TIME          | `5m`                  | edit window                                      |\n+| img-proxy          | IMG_PROXY          | `false`               | enable http->https proxy for images              |\n+| dbg                | DEBUG              | `false`               | debug mode                                       |\n+| dev-passwd         | DEV_PASSWD         |                       | password for `dev` user                          |\n \n * command line parameters are long form `--<key>=value`, i.e. `--site=https://demo.remark42.com`\n * _multi_ parameters separated by `,` in the environment or repeated with command line key, like `--site=s1 --site=s2 ...`"
    },
    {
      "sha": "7321a09f5735aacba90f60875a9617110fbc8ebd",
      "filename": "backend/app/cmd/avatar.go",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark/blob/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/cmd/avatar.go",
      "raw_url": "https://github.com/umputun/remark/raw/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/cmd/avatar.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/avatar.go?ref=c70e060d220a63bd097c89218dbf4279610cfd07",
      "patch": "@@ -2,8 +2,10 @@ package cmd\n \n import (\n \t\"log\"\n+\t\"path\"\n \t\"time\"\n \n+\t\"github.com/coreos/bbolt\"\n \t\"github.com/go-pkgz/mongo\"\n \t\"github.com/pkg/errors\"\n \n@@ -54,11 +56,20 @@ func (ac *AvatarCommand) Execute(args []string) error {\n \tif err != nil {\n \t\treturn err\n \t}\n+\n+\tif err = dst.Close(); err != nil {\n+\t\tlog.Printf(\"[WARN] failed to close dst store %s\", ac.AvatarDst.Type)\n+\t}\n+\tif err = src.Close(); err != nil {\n+\t\tlog.Printf(\"[WARN] failed to close src store %s\", ac.AvatarSrc.Type)\n+\t}\n+\n \tlog.Printf(\"[INFO] completed, migrated avatars = %d\", count)\n \treturn nil\n }\n \n func (ac *AvatarCommand) makeAvatarStore(gr AvatarGroup) (avatar.Store, error) {\n+\tlog.Printf(\"[DEBUG] make avatar store, type=%s\", gr.Type)\n \tswitch gr.Type {\n \tcase \"fs\":\n \t\tif err := makeDirs(gr.FS.Path); err != nil {\n@@ -72,6 +83,11 @@ func (ac *AvatarCommand) makeAvatarStore(gr AvatarGroup) (avatar.Store, error) {\n \t\t}\n \t\tconn := mongo.NewConnection(mgServer, ac.Mongo.DB, \"\")\n \t\treturn avatar.NewGridFS(conn, gr.RszLmt), nil\n+\tcase \"bolt\":\n+\t\tif err := makeDirs(path.Dir(gr.Bolt.File)); err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\treturn avatar.NewBoltDB(gr.Bolt.File, bolt.Options{}, gr.RszLmt)\n \t}\n \treturn nil, errors.Errorf(\"unsupported avatar store type %s\", gr.Type)\n }"
    },
    {
      "sha": "c7c62c91c231a69ff43bc0e5b363019966de9f78",
      "filename": "backend/app/cmd/avatar_test.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/cmd/avatar_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/cmd/avatar_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/avatar_test.go?ref=c70e060d220a63bd097c89218dbf4279610cfd07",
      "patch": "@@ -22,6 +22,7 @@ func TestAvatar_Execute(t *testing.T) {\n \t}\n \tdefer os.RemoveAll(\"/tmp/ava-test\")\n \n+\t// from fs to mongo\n \tcmd := AvatarCommand{migrator: &avatarMigratorMock{retCount: 100}}\n \tcmd.SetCommon(CommonOpts{RemarkURL: \"\", SharedSecret: \"123456\"})\n \tp := flags.NewParser(&cmd, flags.Default)\n@@ -31,6 +32,17 @@ func TestAvatar_Execute(t *testing.T) {\n \terr = cmd.Execute(nil)\n \tassert.NoError(t, err)\n \n+\t// from fs to bolt\n+\tcmd = AvatarCommand{migrator: &avatarMigratorMock{retCount: 100}}\n+\tcmd.SetCommon(CommonOpts{RemarkURL: \"\", SharedSecret: \"123456\"})\n+\tp = flags.NewParser(&cmd, flags.Default)\n+\t_, err = p.ParseArgs([]string{\"--src.type=fs\", \"--src.fs.path=/tmp/ava-test\", \"--dst.type=bolt\",\n+\t\t\"--dst.bolt.file=/tmp/ava-test.db\"})\n+\trequire.Nil(t, err)\n+\terr = cmd.Execute(nil)\n+\tassert.NoError(t, err)\n+\n+\t// failed\n \tcmd = AvatarCommand{migrator: &avatarMigratorMock{retCount: 0, retError: errors.New(\"failed blah\")}}\n \tcmd.SetCommon(CommonOpts{RemarkURL: \"\", SharedSecret: \"123456\"})\n \tp = flags.NewParser(&cmd, flags.Default)"
    },
    {
      "sha": "13cd98173659198db3f80af90fc9ab0bbf467301",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark/blob/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark/raw/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/server.go?ref=c70e060d220a63bd097c89218dbf4279610cfd07",
      "patch": "@@ -7,6 +7,7 @@ import (\n \t\"net/url\"\n \t\"os\"\n \t\"os/signal\"\n+\t\"path\"\n \t\"strings\"\n \t\"syscall\"\n \t\"time\"\n@@ -80,10 +81,13 @@ type StoreGroup struct {\n \n // AvatarGroup defines options group for avatar params\n type AvatarGroup struct {\n-\tType string `long:\"type\" env:\"TYPE\" description:\"type of avatar storage\" choice:\"fs\" choice:\"mongo\" default:\"fs\"`\n+\tType string `long:\"type\" env:\"TYPE\" description:\"type of avatar storage\" choice:\"fs\" choice:\"bolt\" choice:\"mongo\" default:\"fs\"`\n \tFS   struct {\n \t\tPath string `long:\"path\" env:\"PATH\" default:\"./var/avatars\" description:\"avatars location\"`\n \t} `group:\"fs\" namespace:\"fs\" env-namespace:\"FS\"`\n+\tBolt struct {\n+\t\tFile string `long:\"file\" env:\"FILE\" default:\"./var/avatars.db\" description:\"avatars bolt file location\"`\n+\t} `group:\"bolt\" namespace:\"bolt\" env-namespace:\"bolt\"`\n \tRszLmt int `long:\"rsz-lmt\" env:\"RESIZE\" default:\"0\" description:\"max image size for resizing avatars on save\"`\n }\n \n@@ -120,6 +124,7 @@ type serverApp struct {\n \texporter    migrator.Exporter\n \tdevAuth     *auth.DevAuthServer\n \tdataService *service.DataStore\n+\tavatarStore avatar.Store\n \tterminated  chan struct{}\n }\n \n@@ -247,6 +252,7 @@ func (s *ServerCommand) newServerApp() (*serverApp, error) {\n \t\texporter:      exporter,\n \t\tdevAuth:       devAuth,\n \t\tdataService:   dataService,\n+\t\tavatarStore:   avatarStore,\n \t\tterminated:    make(chan struct{}),\n \t}, nil\n }\n@@ -265,7 +271,10 @@ func (a *serverApp) run(ctx context.Context) error {\n \t\t\ta.devAuth.Shutdown()\n \t\t}\n \t\tif e := a.dataService.Close(); e != nil {\n-\t\t\tlog.Printf(\"[WARN] failed to close store, %s\", e)\n+\t\t\tlog.Printf(\"[WARN] failed to close data store, %s\", e)\n+\t\t}\n+\t\tif e := a.avatarStore.Close(); e != nil {\n+\t\t\tlog.Printf(\"[WARN] failed to close avatar store, %s\", e)\n \t\t}\n \n \t}()\n@@ -340,6 +349,11 @@ func (s *ServerCommand) makeAvatarStore() (avatar.Store, error) {\n \t\t}\n \t\tconn := mongo.NewConnection(mgServer, s.Mongo.DB, \"\")\n \t\treturn avatar.NewGridFS(conn, s.Avatar.RszLmt), nil\n+\tcase \"bolt\":\n+\t\tif err := makeDirs(path.Dir(s.Avatar.Bolt.File)); err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\treturn avatar.NewBoltDB(s.Avatar.Bolt.File, bolt.Options{}, s.Avatar.RszLmt)\n \t}\n \treturn nil, errors.Errorf(\"unsupported avatar store type %s\", s.Avatar.Type)\n }"
    },
    {
      "sha": "053be5c5dca0290fbc5d32a3e9d260ef5e6f047d",
      "filename": "backend/app/cmd/server_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/cmd/server_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/cmd/server_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/server_test.go?ref=c70e060d220a63bd097c89218dbf4279610cfd07",
      "patch": "@@ -202,7 +202,9 @@ func TestServerApp_MainSignal(t *testing.T) {\n \ts.SetCommon(CommonOpts{RemarkURL: \"https://demo.remark42.com\", SharedSecret: \"123456\"})\n \n \tp := flags.NewParser(&s, flags.Default)\n-\targs := []string{\"test\", \"--store.bolt.path=/tmp/xyz\", \"--backup=/tmp\", \"--avatar.fs.path=/tmp\", \"--port=18100\"}\n+\targs := []string{\"test\", \"--store.bolt.path=/tmp/xyz\", \"--backup=/tmp\", \"--avatar.type=bolt\",\n+\t\t\"--avatar.bolt.file=/tmp/ava-test.db\", \"--port=18100\"}\n+\tdefer os.Remove(\"/tmp/ava-test.db\")\n \t_, err := p.ParseArgs(args)\n \trequire.Nil(t, err)\n \terr = s.Execute(args)"
    },
    {
      "sha": "90ed197f8015b07f592d86fd8aecbb477537e899",
      "filename": "backend/app/store/avatar/bolt.go",
      "status": "added",
      "additions": 142,
      "deletions": 0,
      "changes": 142,
      "blob_url": "https://github.com/umputun/remark/blob/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/store/avatar/bolt.go",
      "raw_url": "https://github.com/umputun/remark/raw/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/store/avatar/bolt.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/bolt.go?ref=c70e060d220a63bd097c89218dbf4279610cfd07",
      "patch": "@@ -0,0 +1,142 @@\n+package avatar\n+\n+import (\n+\t\"bytes\"\n+\t\"crypto/sha1\"\n+\t\"encoding/hex\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\n+\t\"github.com/coreos/bbolt\"\n+\t\"github.com/pkg/errors\"\n+\n+\t\"github.com/umputun/remark/backend/app/store\"\n+)\n+\n+// BoltDB implements avatar store with bolt\n+// using separate db (file) with \"avatars\" bucket to keep image bin and \"metas\" bucket to keep sha1\n+// avatarID (base file name) used as a key\n+type BoltDB struct {\n+\tfileName    string // full path to boltdb\n+\tresizeLimit int\n+\tdb          *bolt.DB\n+}\n+\n+const avatarsBktName = \"avatars\"\n+const metasBktName = \"metas\"\n+\n+// NewBoltDB makes bolt avatar store\n+func NewBoltDB(fileName string, options bolt.Options, resizeLimit int) (*BoltDB, error) {\n+\tdb, err := bolt.Open(fileName, 0600, &options)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to make boltdb for %s\", fileName)\n+\t}\n+\terr = db.Update(func(tx *bolt.Tx) error {\n+\t\tif _, e := tx.CreateBucketIfNotExists([]byte(avatarsBktName)); e != nil {\n+\t\t\treturn errors.Wrapf(e, \"failed to create top level bucket %s\", avatarsBktName)\n+\t\t}\n+\t\t_, e := tx.CreateBucketIfNotExists([]byte(metasBktName))\n+\t\treturn errors.Wrapf(e, \"failed to create top metas bucket %s\", metasBktName)\n+\t})\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to initialize boltdb db %q buckets\", fileName)\n+\t}\n+\treturn &BoltDB{db: db, fileName: fileName, resizeLimit: resizeLimit}, nil\n+}\n+\n+// Put avatar to bolt, key by avatarID\n+func (b *BoltDB) Put(userID string, reader io.Reader) (avatar string, err error) {\n+\tid := encodeID(userID)\n+\n+\t// Trying to resize avatar.\n+\tif reader = resize(reader, b.resizeLimit); reader == nil {\n+\t\treturn \"\", errors.New(\"avatar resize reader is nil\")\n+\t}\n+\n+\tavatarID := id + imgSfx\n+\terr = b.db.Update(func(tx *bolt.Tx) error {\n+\t\tbuf := &bytes.Buffer{}\n+\t\tif _, err = io.Copy(buf, reader); err != nil {\n+\t\t\treturn errors.Wrapf(err, \"can't read avatar %s\", avatarID)\n+\t\t}\n+\n+\t\tif err = tx.Bucket([]byte(avatarsBktName)).Put([]byte(avatarID), buf.Bytes()); err != nil {\n+\t\t\treturn errors.Wrapf(err, \"can't put to bucket with %s\", avatarID)\n+\t\t}\n+\t\treturn tx.Bucket([]byte(metasBktName)).Put([]byte(avatarID), []byte(b.sha1(buf.Bytes(), id)))\n+\t})\n+\treturn avatarID, err\n+}\n+\n+// Get avatar reader for avatar id.image, avatarID used as the direct key\n+func (b *BoltDB) Get(avatarID string) (reader io.ReadCloser, size int, err error) {\n+\tbuf := &bytes.Buffer{}\n+\terr = b.db.View(func(tx *bolt.Tx) error {\n+\t\tdata := tx.Bucket([]byte(avatarsBktName)).Get([]byte(avatarID))\n+\t\tif data == nil {\n+\t\t\treturn errors.Errorf(\"can't load avatar %s\", avatarID)\n+\t\t}\n+\t\tsize, err = buf.Write(data)\n+\t\treturn errors.Wrapf(err, \"failed to write for %s\", avatarID)\n+\t})\n+\treturn ioutil.NopCloser(buf), size, err\n+}\n+\n+// ID returns a fingerprint of the avatar content.\n+func (b *BoltDB) ID(avatarID string) (id string) {\n+\tdata := []byte{}\n+\terr := b.db.View(func(tx *bolt.Tx) error {\n+\t\tdata = tx.Bucket([]byte(metasBktName)).Get([]byte(avatarID))\n+\t\tif data == nil {\n+\t\t\treturn errors.Errorf(\"can't load avatar's id for %s\", avatarID)\n+\t\t}\n+\t\treturn nil\n+\t})\n+\tif err != nil {\n+\t\tlog.Printf(\"[DEBUG] can't get avatar info '%s', %s\", avatarID, err)\n+\t\treturn store.EncodeID(avatarID)\n+\t}\n+\treturn string(data)\n+}\n+\n+// Remove avatar from bolt\n+func (b *BoltDB) Remove(avatarID string) (err error) {\n+\treturn b.db.Update(func(tx *bolt.Tx) error {\n+\t\tbkt := tx.Bucket([]byte(avatarsBktName))\n+\t\tif bkt.Get([]byte(avatarID)) == nil {\n+\t\t\treturn errors.Errorf(\"avatar key not found, %s\", avatarID)\n+\t\t}\n+\t\tif err = tx.Bucket([]byte(avatarsBktName)).Delete([]byte(avatarID)); err != nil {\n+\t\t\treturn errors.Wrapf(err, \"can't delete avatar object %s\", avatarID)\n+\t\t}\n+\t\treturn errors.Wrapf(tx.Bucket([]byte(metasBktName)).Delete([]byte(avatarID)),\n+\t\t\t\"can't delete meta object %s\", avatarID)\n+\t})\n+}\n+\n+// List all avatars (ids) from metas bucket\n+// note: id includes .image suffix\n+func (b *BoltDB) List() (ids []string, err error) {\n+\terr = b.db.View(func(tx *bolt.Tx) error {\n+\t\treturn tx.Bucket([]byte(metasBktName)).ForEach(func(k, _ []byte) error {\n+\t\t\tids = append(ids, string(k))\n+\t\t\treturn nil\n+\t\t})\n+\t})\n+\treturn ids, errors.Wrap(err, \"failed to list\")\n+}\n+\n+// Close bolt store\n+func (b *BoltDB) Close() error {\n+\treturn errors.Wrapf(b.db.Close(), \"failed to close %s\", b.fileName)\n+}\n+\n+func (b *BoltDB) sha1(data []byte, avatarID string) (id string) {\n+\th := sha1.New()\n+\tif _, err := h.Write(data); err != nil {\n+\t\tlog.Printf(\"[DEBUG] can't apply sha1 for content of '%s', %s\", avatarID, err)\n+\t\treturn store.EncodeID(avatarID)\n+\t}\n+\treturn hex.EncodeToString(h.Sum(nil))\n+}"
    },
    {
      "sha": "4db0376e2f3fe420696720817e03fa2eb05ca4e2",
      "filename": "backend/app/store/avatar/bolt_test.go",
      "status": "added",
      "additions": 98,
      "deletions": 0,
      "changes": 98,
      "blob_url": "https://github.com/umputun/remark/blob/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/store/avatar/bolt_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/store/avatar/bolt_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/bolt_test.go?ref=c70e060d220a63bd097c89218dbf4279610cfd07",
      "patch": "@@ -0,0 +1,98 @@\n+package avatar\n+\n+import (\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"sort\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/coreos/bbolt\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+)\n+\n+var testDb = \"/tmp/test-remark-avatars.db\"\n+\n+func TestBoltDB_PutAndGet(t *testing.T) {\n+\tvar b Store = prepBoltStore(t)\n+\tdefer func() {\n+\t\tassert.Nil(t, b.Close())\n+\t\tos.Remove(testDb)\n+\t}()\n+\n+\tavatar, err := b.Put(\"user1\", strings.NewReader(\"some picture bin data\"))\n+\trequire.Nil(t, err)\n+\tassert.Equal(t, \"b3daa77b4c04a9551b8781d03191fe098f325e67.image\", avatar)\n+\n+\trd, size, err := b.Get(avatar)\n+\trequire.Nil(t, err)\n+\tassert.Equal(t, 21, size)\n+\tdata, err := ioutil.ReadAll(rd)\n+\trequire.Nil(t, err)\n+\tassert.Equal(t, \"some picture bin data\", string(data))\n+\n+\t_, _, err = b.Get(\"bad avatar\")\n+\tassert.NotNil(t, err)\n+\n+\tassert.Equal(t, \"fddae9ce556712a6ece0e8951a6e7a05c51ed6bf\", b.ID(avatar))\n+\tassert.Equal(t, \"70c881d4a26984ddce795f6f71817c9cf4480e79\", b.ID(\"aaaa\"), \"no data, encode avatar id\")\n+\n+\tl, err := b.List()\n+\trequire.Nil(t, err)\n+\tassert.Equal(t, 1, len(l))\n+\tassert.Equal(t, \"b3daa77b4c04a9551b8781d03191fe098f325e67.image\", l[0])\n+}\n+\n+func TestBoltDB_Remove(t *testing.T) {\n+\tb := prepBoltStore(t)\n+\tdefer func() {\n+\t\tassert.Nil(t, b.Close())\n+\t\tos.Remove(testDb)\n+\t}()\n+\n+\tassert.NotNil(t, b.Remove(\"no-such-thing.image\"))\n+\n+\tavatar, err := b.Put(\"user1\", strings.NewReader(\"some picture bin data\"))\n+\trequire.Nil(t, err)\n+\tassert.Equal(t, \"b3daa77b4c04a9551b8781d03191fe098f325e67.image\", avatar)\n+\tassert.NoError(t, b.Remove(\"b3daa77b4c04a9551b8781d03191fe098f325e67.image\"), \"remove real one\")\n+\tassert.NotNil(t, b.Remove(\"b3daa77b4c04a9551b8781d03191fe098f325e67.image\"), \"already removed\")\n+}\n+\n+func TestBoltDB_List(t *testing.T) {\n+\tb := prepBoltStore(t)\n+\tdefer func() {\n+\t\tassert.Nil(t, b.Close())\n+\t\tos.Remove(testDb)\n+\t}()\n+\n+\t// write some avatars\n+\t_, err := b.Put(\"user1\", strings.NewReader(\"some picture bin data 1\"))\n+\trequire.Nil(t, err)\n+\t_, err = b.Put(\"user2\", strings.NewReader(\"some picture bin data 2\"))\n+\trequire.Nil(t, err)\n+\t_, err = b.Put(\"user3\", strings.NewReader(\"some picture bin data 3\"))\n+\trequire.Nil(t, err)\n+\n+\tl, err := b.List()\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, 3, len(l), \"3 avatars listed\")\n+\tsort.Strings(l)\n+\tassert.Equal(t, []string{\"0b7f849446d3383546d15a480966084442cd2193.image\", \"a1881c06eec96db9901c7bbfe41c42a3f08e9cb4.image\", \"b3daa77b4c04a9551b8781d03191fe098f325e67.image\"}, l)\n+\n+\tr, size, err := b.Get(\"0b7f849446d3383546d15a480966084442cd2193.image\")\n+\tassert.Nil(t, err)\n+\tassert.Equal(t, 23, size)\n+\tdata, err := ioutil.ReadAll(r)\n+\tassert.Nil(t, err)\n+\tassert.Equal(t, \"some picture bin data 3\", string(data))\n+}\n+\n+// makes new boltdb, put two records\n+func prepBoltStore(t *testing.T) *BoltDB {\n+\tos.Remove(testDb)\n+\tboltStore, err := NewBoltDB(testDb, bolt.Options{}, 0)\n+\trequire.Nil(t, err)\n+\treturn boltStore\n+}"
    },
    {
      "sha": "6a20253ed10276c905f53e064ce096574dca33dc",
      "filename": "backend/app/store/avatar/gridfs.go",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark/blob/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/store/avatar/gridfs.go",
      "raw_url": "https://github.com/umputun/remark/raw/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/store/avatar/gridfs.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/gridfs.go?ref=c70e060d220a63bd097c89218dbf4279610cfd07",
      "patch": "@@ -118,3 +118,8 @@ func (gf *GridFS) List() (ids []string, err error) {\n \t}\n \treturn ids, errors.Wrap(err, \"can't list avatars\")\n }\n+\n+// Close gridfs does nothing but satisfies interface\n+func (gf *GridFS) Close() error {\n+\treturn nil\n+}"
    },
    {
      "sha": "9b34ac3d462380799db04497563a7c1002db23dc",
      "filename": "backend/app/store/avatar/localfs.go",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark/blob/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/store/avatar/localfs.go",
      "raw_url": "https://github.com/umputun/remark/raw/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/store/avatar/localfs.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/localfs.go?ref=c70e060d220a63bd097c89218dbf4279610cfd07",
      "patch": "@@ -113,6 +113,11 @@ func (fs *LocalFS) List() (ids []string, err error) {\n \treturn ids, errors.Wrap(err, \"can't list avatars\")\n }\n \n+// Close gridfs does nothing but satisfies interface\n+func (fs *LocalFS) Close() error {\n+\treturn nil\n+}\n+\n // get location (directory) for user id by adding partition to final path in order to keep files\n // in different subdirectories and avoid too many files in a single place.\n // the end result is a full path like this - /tmp/avatars.test/92"
    },
    {
      "sha": "a38762072cf7b86cade30315c6048048343198df",
      "filename": "backend/app/store/avatar/store.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/store/avatar/store.go",
      "raw_url": "https://github.com/umputun/remark/raw/c70e060d220a63bd097c89218dbf4279610cfd07/backend/app/store/avatar/store.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/avatar/store.go?ref=c70e060d220a63bd097c89218dbf4279610cfd07",
      "patch": "@@ -32,7 +32,7 @@ type Store interface {\n \tID(avatarID string) (id string)                                   // unique id of stored avatar's data\n \tRemove(avatarID string) error                                     // remove avatar data\n \tList() (ids []string, err error)                                  // list all avatar ids\n-\n+\tClose() error\n }\n \n // Migrate avatars between stores"
    }
  ]
}
