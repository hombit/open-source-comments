{
  "sha": "00f333872a3abb71fef27e4e14af8eb75c25663a",
  "node_id": "MDY6Q29tbWl0MTgwOTYzMjI6MDBmMzMzODcyYTNhYmI3MWZlZjI3ZTRlMTRhZjhlYjc1YzI1NjYzYQ==",
  "commit": {
    "author": {
      "name": "jacobwb",
      "email": "jacobbarkdull@gmail.com",
      "date": "2018-09-27T03:39:08Z"
    },
    "committer": {
      "name": "jacobwb",
      "email": "jacobbarkdull@gmail.com",
      "date": "2018-09-27T03:39:08Z"
    },
    "message": "Added multisite support. (Using SQL? Read this commit)\n\nHashOver can now be set to treat URLs from different websites as separate collections of threads, ensuring that two similar URLs from two different websites that get converted to the same thread name will not conflict with each other.\n\nI am calling this \"Multisite\" support in the code, but it is not related to Wordpress. It might work on a Wordpress multisite setup, but it is not related to that functionality.\n\nWhen HashOver is storing comments in flat file formats, like XML and JSON, the threads are now separated by being in different directories. One directory under `hashover/comments` for each unique domain name. If you enable multisite support you will therefore need to move the `hashover/comments/threads` and `hashover/comments/metadata` directories under a new directory named after your website domain name.\n\nTo support multiple websites in SQL databases, like SQLite and MySQL, would have required using more unconventional methods like creating multiple databases/sqlite files for each domain or further prefixing the table names with each domain. This was obviously not a good idea.\n\nFor this reason, the SQL database code has been completely rewritten. Comments are now stored as rows in a single `comments` table, page info metadata is stored as rows in a single `page-info` table, with each of these tables including columns for the website domain name and thread name which are used to query the right comments for the right website from the database.\n\nThis change will break existing HashOver SQL databases. SQL has always been a work in progress, so I hope not too many people were using SQL for an important website, as migrating those comments will now be necessary.\n\nI have not yet figured out the easiest way to move comments from old SQL databases to the new format, but I hope it will be possible to do with a single SQL statement.\n\nIf you are using SQL, please open an issue saying so or contribute to an existing issue to help find a simple migration solution.\n\nThis change also happens to address issue #247.",
    "tree": {
      "sha": "4f873899e454fa880dbf6a40c50997cb7c083c59",
      "url": "https://api.github.com/repos/jacobwb/hashover-next/git/trees/4f873899e454fa880dbf6a40c50997cb7c083c59"
    },
    "url": "https://api.github.com/repos/jacobwb/hashover-next/git/commits/00f333872a3abb71fef27e4e14af8eb75c25663a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/jacobwb/hashover-next/commits/00f333872a3abb71fef27e4e14af8eb75c25663a",
  "html_url": "https://github.com/jacobwb/hashover-next/commit/00f333872a3abb71fef27e4e14af8eb75c25663a",
  "comments_url": "https://api.github.com/repos/jacobwb/hashover-next/commits/00f333872a3abb71fef27e4e14af8eb75c25663a/comments",
  "author": {
    "login": "jacobwb",
    "id": 4677622,
    "node_id": "MDQ6VXNlcjQ2Nzc2MjI=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4677622?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacobwb",
    "html_url": "https://github.com/jacobwb",
    "followers_url": "https://api.github.com/users/jacobwb/followers",
    "following_url": "https://api.github.com/users/jacobwb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacobwb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacobwb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacobwb/subscriptions",
    "organizations_url": "https://api.github.com/users/jacobwb/orgs",
    "repos_url": "https://api.github.com/users/jacobwb/repos",
    "events_url": "https://api.github.com/users/jacobwb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacobwb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jacobwb",
    "id": 4677622,
    "node_id": "MDQ6VXNlcjQ2Nzc2MjI=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4677622?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jacobwb",
    "html_url": "https://github.com/jacobwb",
    "followers_url": "https://api.github.com/users/jacobwb/followers",
    "following_url": "https://api.github.com/users/jacobwb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jacobwb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jacobwb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jacobwb/subscriptions",
    "organizations_url": "https://api.github.com/users/jacobwb/orgs",
    "repos_url": "https://api.github.com/users/jacobwb/repos",
    "events_url": "https://api.github.com/users/jacobwb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jacobwb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cca531724002155f8c7805b60bc72b1c9afd4bac",
      "url": "https://api.github.com/repos/jacobwb/hashover-next/commits/cca531724002155f8c7805b60bc72b1c9afd4bac",
      "html_url": "https://github.com/jacobwb/hashover-next/commit/cca531724002155f8c7805b60bc72b1c9afd4bac"
    }
  ],
  "stats": {
    "total": 575,
    "additions": 403,
    "deletions": 172
  },
  "files": [
    {
      "sha": "d52550e1930c664c789911b4ae3f227856b256a2",
      "filename": "hashover/admin/views/moderation/index.php",
      "status": "modified",
      "additions": 64,
      "deletions": 1,
      "changes": 65,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/admin/views/moderation/index.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/admin/views/moderation/index.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/admin/views/moderation/index.php?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -38,6 +38,17 @@ function add_table_row (HTMLTag $table, HTMLTag $child)\n \t// View setup\n \trequire (realpath ('../view-setup.php'));\n \n+\t// Get current website\n+\t$current_website = $hashover->setup->website;\n+\n+\t// Attempt to get website from GET data\n+\t$website = $hashover->setup->getRequest ('website', $current_website);\n+\n+\t// Set website if GET website is different\n+\tif ($website !== $current_website) {\n+\t\t$hashover->setup->setWebsite ($website);\n+\t}\n+\n \t// Attempt to get array of comment threads\n \t$threads = $hashover->thread->queryThreads ();\n \n@@ -49,6 +60,11 @@ function add_table_row (HTMLTag $table, HTMLTag $child)\n \t\t'cellpadding' => '8'\n \t));\n \n+\t// Add first row as header if multiple website support is enabled\n+\tif ($hashover->setup->supportsMultisites === true) {\n+\t\tadd_table_row ($threads_table, new HTMLTag ('b', $website, false));\n+\t}\n+\n \t// Run through comment threads\n \tforeach ($threads as $thread) {\n \t\t// Read and parse JSON metadata file\n@@ -65,6 +81,7 @@ function add_table_row (HTMLTag $table, HTMLTag $child)\n \t\t// Add thread hyperlink to row div\n \t\t$div->appendChild (new HTMLTag ('a', array (\n \t\t\t'href' => 'threads.php?' . implode ('&', array (\n+\t\t\t\t'website=' . urlencode ($website),\n \t\t\t\t'thread=' . urlencode ($thread),\n \t\t\t\t'title=' . urlencode ($data['title']),\n \t\t\t\t'url=' . urlencode ($data['url'])\n@@ -87,9 +104,55 @@ function add_table_row (HTMLTag $table, HTMLTag $child)\n \t\t'title'\t\t=> $hashover->locale->text['moderation'],\n \t\t'logout'\t=> $logout->asHTML (\"\\t\\t\\t\"),\n \t\t'sub-title'\t=> $hashover->locale->text['moderation-sub'],\n-\t\t'threads'\t=> $threads_table->asHTML (\"\\t\\t\")\n+\t\t'left-id'\t=> 'threads-column',\n+\t\t'threads'\t=> $threads_table->asHTML (\"\\t\\t\\t\\t\\t\"),\n \t);\n \n+\t// Check if multiple website support is enabled\n+\tif ($hashover->setup->supportsMultisites === true) {\n+\t\t// If so, attempt to get array of websites\n+\t\t$websites = $hashover->thread->queryWebsites ();\n+\n+\t\t// Check if other websites exist\n+\t\tif (count ($websites) > 1) {\n+\t\t\t// If so, create comment thread table\n+\t\t\t$websites_table = new HTMLTag ('table', array (\n+\t\t\t\t'id' => 'websites',\n+\t\t\t\t'class' => 'striped-rows-odd',\n+\t\t\t\t'cellspacing' => '0',\n+\t\t\t\t'cellpadding' => '8'\n+\t\t\t));\n+\n+\t\t\t// Add first row as header\n+\t\t\tadd_table_row ($websites_table, new HTMLTag ('b', array (\n+\t\t\t\t'innerHTML' => $hashover->locale->text['website'][1],\n+\t\t\t), false));\n+\n+\t\t\t// Sort the websites\n+\t\t\tsort ($websites, SORT_NATURAL);\n+\n+\t\t\t// Run through website directories\n+\t\t\tforeach ($websites as $name) {\n+\t\t\t\t// Skip current website\n+\t\t\t\tif ($name === $website) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\t// Create website hyperlink\n+\t\t\t\tadd_table_row ($websites_table, new HTMLTag ('a', array (\n+\t\t\t\t\t'href' => '?website=' . urlencode ($name),\n+\t\t\t\t\t'innerHTML' => $name\n+\t\t\t\t)));\n+\t\t\t}\n+\n+\t\t\t// And add other websites to template\n+\t\t\t$template = array_merge ($template, array (\n+\t\t\t\t'right-id'\t=> 'websites-column',\n+\t\t\t\t'websites'\t=> $websites_table->asHTML (\"\\t\\t\\t\\t\\t\")\n+\t\t\t));\n+\t\t}\n+\t}\n+\n \t// Load and parse HTML template\n \techo $hashover->templater->parseTemplate ('moderation.html', $template);\n "
    },
    {
      "sha": "e791a77925d6dc2f199dc58f4b4000d20524c36d",
      "filename": "hashover/admin/views/moderation/moderation.css",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/admin/views/moderation/moderation.css",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/admin/views/moderation/moderation.css",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/admin/views/moderation/moderation.css?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -16,6 +16,10 @@ table b {\n \tfont-weight: bold;\n }\n \n+#websites-column {\n+\tpadding-left: 10px;\n+}\n+\n #threads small {\n \tcolor: #5AB3FA;\n }"
    },
    {
      "sha": "45f7108cbb0c898391984d63ac551afefc1f3f94",
      "filename": "hashover/admin/views/moderation/moderation.html",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/admin/views/moderation/moderation.html",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/admin/views/moderation/moderation.html",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/admin/views/moderation/moderation.html?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -30,6 +30,10 @@ <h1 class=\"underlined\">\n \t\t\t\t<td id=\"{left-id}\" valign=\"top\">\n \t\t\t\t\t{threads}\n \t\t\t\t</td>\n+\n+\t\t\t\t<td id=\"{right-id}\" valign=\"top\">\n+\t\t\t\t\t{websites}\n+\t\t\t\t</td>\n \t\t\t</tr>\n \t\t</table>\n \t</body>"
    },
    {
      "sha": "f45acc98812c0ad21bbd5757c44add40683af5e7",
      "filename": "hashover/api/backend/latest-ajax.php",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/api/backend/latest-ajax.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/api/backend/latest-ajax.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/api/backend/latest-ajax.php?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -36,6 +36,9 @@\n \t// Set thread name from POST/GET data\n \t$hashover->setup->setThreadName ('request');\n \n+\t// Set website from POST/GET data\n+\t$hashover->setup->setWebsite ('request');\n+\n \t// Initiate and finalize comment processing\n \t$hashover->initiate ();\n \t$hashover->finalize ();"
    },
    {
      "sha": "4487d68d8d36726fca12eeaa591ed1da850d3d7e",
      "filename": "hashover/api/frontends/latest/constructor.js",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/api/frontends/latest/constructor.js",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/api/frontends/latest/constructor.js",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/api/frontends/latest/constructor.js?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -33,7 +33,12 @@ function HashOverLatest (options)\n \n \t// Check if options is an object\n \tif (options && options.constructor === Object) {\n-\t\t// If so, add thread to queries if present\n+\t\t// If so, add website to queries if present\n+\t\tif (options.website !== undefined) {\n+\t\t\tqueries.push ('website=' + encodeURIComponent (options.website));\n+\t\t}\n+\n+\t\t// And add thread to queries if present\n \t\tif (options.thread !== undefined) {\n \t\t\tqueries.push ('thread=' + encodeURIComponent (options.thread));\n \t\t}"
    },
    {
      "sha": "7712df12b8fea7d408e6b9d93b23d0a640de0b8c",
      "filename": "hashover/backend/classes/commentfiles.php",
      "status": "modified",
      "additions": 27,
      "deletions": 4,
      "changes": 31,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/commentfiles.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/commentfiles.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/commentfiles.php?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -245,17 +245,40 @@ public function checkThread ()\n \t}\n \n \t// Queries an array of directory names\n-\tprotected function queryDirs ($path)\n+\tprotected function queryDirs ($path, $callback = false)\n \t{\n+\t\t// Directory names output\n+\t\t$names = array ();\n+\n \t\t// Get comment directories\n \t\t$dirs = glob ($path . '/*', GLOB_ONLYDIR);\n \n \t\t// Convert directories paths to just their names\n-\t\tforeach ($dirs as $key => $name) {\n-\t\t\t$dirs[$key] = basename ($name);\n+\t\tforeach ($dirs as $name) {\n+\t\t\t// Check callback conditions\n+\t\t\t$match = $callback ? $callback ($name) : true;\n+\n+\t\t\t// And add directory if callback returns true\n+\t\t\tif ($match === true) {\n+\t\t\t\t$names[] = basename ($name);\n+\t\t\t}\n \t\t}\n \n-\t\treturn $dirs;\n+\t\treturn $names;\n+\t}\n+\n+\t// Queries an array of websites\n+\tpublic function queryWebsites ()\n+\t{\n+\t\t// Path to get website directories from\n+\t\t$path = $this->setup->commentsRoot;\n+\n+\t\t// Get website directories\n+\t\t$websites = $this->queryDirs ($path, function ($name) {\n+\t\t\treturn file_exists ($name . '/threads');\n+\t\t});\n+\n+\t\treturn $websites;\n \t}\n \n \t// Queries an array of comment threads"
    },
    {
      "sha": "f05ee8fd50dc76e48b490b82f5684d39bc3c4513",
      "filename": "hashover/backend/classes/database.php",
      "status": "modified",
      "additions": 177,
      "deletions": 147,
      "changes": 324,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/database.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/database.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/database.php?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -54,16 +54,19 @@ public function __construct (Setup $setup)\n \t\t\tif ($this->databaseType === 'sqlite') {\n \t\t\t\t// If so, construct SQLite file name\n \t\t\t\t$file = sprintf ('%s/%s.sqlite',\n-\t\t\t\t\t$setup->commentsPath, $this->databaseName\n+\t\t\t\t\t$setup->commentsRoot, $this->getDatabaseName ()\n \t\t\t\t);\n \n \t\t\t\t// Instantiate an SQLite data object\n \t\t\t\t$this->database = new \\PDO ('sqlite:' . $file);\n+\n+\t\t\t\t// And change file permissions\n+\t\t\t\t@chmod ($file, 0600);\n \t\t\t} else {\n \t\t\t\t// If not, create SQL server connection statement\n \t\t\t\t$connection = implode (';', array (\n \t\t\t\t\t'host=' . $this->databaseHost,\n-\t\t\t\t\t'dbname=' . $this->databaseName,\n+\t\t\t\t\t'dbname=' . $this->getDatabaseName (),\n \t\t\t\t\t'charset=' . $this->databaseCharset\n \t\t\t\t));\n \n@@ -79,16 +82,34 @@ public function __construct (Setup $setup)\n \t\t}\n \t}\n \n+\t// Returns appropriate database name as configured\n+\tprotected function getDatabaseName ()\n+\t{\n+\t\t// Prefix name with \"hashover-\" for non-SQLite drivers\n+\t\tif ($this->databaseType !== 'sqlite') {\n+\t\t\treturn 'hashover-' . $this->databaseName;\n+\t\t}\n+\n+\t\t// Otherwise, return database name as-is in SQLite\n+\t\treturn $this->databaseName;\n+\t}\n+\n \t// Prepares and executes an SQL statement\n \tprotected function executeStatement ($statement, $data = null)\n \t{\n \t\ttry {\n \t\t\t// Prepare statement\n \t\t\t$prepare = $this->database->prepare ($statement);\n \n-\t\t\t// Attempt to execute statement\n+\t\t\t// Check if prepare was successful\n \t\t\tif ($prepare !== false) {\n-\t\t\t\treturn $prepare->execute ($data);\n+\t\t\t\t// If so, attempt to execute statement\n+\t\t\t\t$execute = $prepare->execute ($data);\n+\n+\t\t\t\t// And return statement object if execute was successful\n+\t\t\t\tif ($execute !== false) {\n+\t\t\t\t\treturn $prepare;\n+\t\t\t\t}\n \t\t\t}\n \t\t} catch (\\PDOException $error) {\n \t\t\tthrow new \\Exception ($error->getMessage ());\n@@ -115,86 +136,99 @@ protected function creationArray (array $columns)\n \t\t// Initial statement\n \t\t$statement = array ();\n \n-\t\t// Check if the array is associative\n-\t\tif (array_keys ($columns) !== range (0, count ($columns) - 1)) {\n-\t\t\t// If so, create a statement using specific columns\n-\t\t\tforeach ($columns as $name => $value) {\n-\t\t\t\t// Decide type based on value type\n-\t\t\t\t$type = is_numeric ($value) ? 'INTEGER' : 'TEXT';\n+\t\t// Create a statement using specific columns\n+\t\tforeach ($columns as $name => $value) {\n+\t\t\t// Decide type based on value type\n+\t\t\t$type = is_numeric ($value) ? 'INTEGER' : 'TEXT';\n \n-\t\t\t\t// And add column to statement\n-\t\t\t\t$statement[] = sprintf ('`%s` %s', $name, $type);\n-\t\t\t}\n-\t\t} else {\n-\t\t\t// If not, create statement using generic \"items\" column\n-\t\t\t$statement[] = '`items` TEXT';\n+\t\t\t// And add column to statement\n+\t\t\t$statement[] = sprintf ('`%s` %s', $name, $type);\n \t\t}\n \n \t\treturn $statement;\n \t}\n \n-\t// Gets the appropriate metadata table name\n-\tprotected function getMetaTable ($name, $thread, $global)\n+\t// Reads and returns specific metadata from database\n+\tpublic function readMeta ($name, $thread = 'auto', $global = false)\n \t{\n-\t\t// Check if we're getting metadata for a specific thread\n-\t\tif ($global !== true) {\n-\t\t\t// If so, use the thread's table\n-\t\t\tif ($thread === 'auto') {\n-\t\t\t\t$table = $this->setup->threadName . '/metadata';\n-\t\t\t} else {\n-\t\t\t\t$table = $thread . '/metadata';\n-\t\t\t}\n-\t\t} else {\n-\t\t\t// If not, use the global metadata table\n-\t\t\t$table = 'hashover-metadata';\n-\t\t}\n+\t\t// Get thread\n+\t\t$thread = $this->getCommentThread ($thread);\n \n-\t\t// Final table name\n-\t\t$table .= '/' . $name;\n+\t\t// Prepared data for statement execution\n+\t\t$prepared = array (\n+\t\t\t'domain' => $this->setup->website\n+\t\t);\n+\n+\t\t// Choose statement for supported metadata\n+\t\tswitch ($name) {\n+\t\t\t// Latest comments\n+\t\t\tcase 'latest-comments': {\n+\t\t\t\t// Initial statement\n+\t\t\t\t$statements = array (\n+\t\t\t\t\t'SELECT * FROM `comments`',\n+\t\t\t\t\t'WHERE (status IS NULL OR status=\"approved\")',\n+\t\t\t\t\t'AND domain=:domain'\n+\t\t\t\t);\n \n-\t\treturn $table;\n-\t}\n+\t\t\t\t// Check if we are getting metadata from multiple threads\n+\t\t\t\tif ($global === false) {\n+\t\t\t\t\t// If so, add thread condition to statement\n+\t\t\t\t\t$statements[] = 'AND thread=:thread';\n \n-\t// Gets items column entries as array\n-\tprotected function getItems (array $rows)\n-\t{\n-\t\t// Initial items to return\n-\t\t$items = array ();\n+\t\t\t\t\t// And add thread to prepared data\n+\t\t\t\t\t$prepared['thread'] = $thread;\n+\t\t\t\t}\n \n-\t\t// Run through each item row\n-\t\tforeach ($rows as $row) {\n-\t\t\t$items[] = $row['items'];\n-\t\t}\n+\t\t\t\t// Sort comments by date\n+\t\t\t\t$statements[] = 'ORDER BY `date` DESC';\n \n-\t\treturn $items;\n-\t}\n+\t\t\t\t// Limit comments to configured maximum\n+\t\t\t\t$statements[] = 'LIMIT ' . $this->setup->latestMax;\n \n-\t// Reads and returns specific metadata from database\n-\tpublic function readMeta ($name, $thread = 'auto', $global = false)\n-\t{\n-\t\t// Metadata table\n-\t\t$metadata_table = $this->getMetaTable ($name, $thread, $global);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\n+\t\t\t// All others, just try to read as-is\n+\t\t\tdefault: {\n+\t\t\t\t// Initial statement\n+\t\t\t\t$statements = array (\n+\t\t\t\t\tsprintf ('SELECT * FROM `%s`', $name),\n+\t\t\t\t\t'WHERE domain=:domain'\n+\t\t\t\t);\n+\n+\t\t\t\t// Check if we are getting metadata from multiple threads\n+\t\t\t\tif ($global === false) {\n+\t\t\t\t\t// Add thread condition to statement\n+\t\t\t\t\t$statements[] = 'AND thread=:thread';\n+\n+\t\t\t\t\t// And add thread to prepared data\n+\t\t\t\t\t$prepared['thread'] = $thread;\n+\t\t\t\t}\n+\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n \n-\t\t// Query statement array\n-\t\t$statement = 'SELECT * FROM `' . $metadata_table . '`';\n+\t\t// Convert statements array into string\n+\t\t$statement = implode (' ', $statements);\n \n \t\t// Query statement\n-\t\t$results = $this->database->query ($statement);\n+\t\t$results = $this->executeStatement ($statement, $prepared);\n \n \t\t// Check if the query was successful\n \t\tif ($results !== false) {\n \t\t\t// If so, attempt to get all metadata\n \t\t\t$fetch_all = $results->fetchAll (\\PDO::FETCH_ASSOC);\n \n-\t\t\t// Check if we got the metadata\n-\t\t\tif ($fetch_all !== false and isset ($fetch_all[0])) {\n-\t\t\t\t// Return only the items column if present\n-\t\t\t\tif (isset ($fetch_all[0]['items'])) {\n-\t\t\t\t\treturn $this->getItems ($fetch_all);\n+\t\t\t// Check if metadata read successfully\n+\t\t\tif (!empty ($fetch_all)) {\n+\t\t\t\t// If so, return first for if metadata is page info\n+\t\t\t\tif ($name === 'page-info') {\n+\t\t\t\t\treturn $fetch_all[0];\n \t\t\t\t}\n \n-\t\t\t\t// Otherwise return the first row\n-\t\t\t\treturn $fetch_all[0];\n+\t\t\t\t// Otherwise, return all metadata\n+\t\t\t\treturn $fetch_all;\n \t\t\t}\n \t\t}\n \n@@ -205,10 +239,10 @@ public function readMeta ($name, $thread = 'auto', $global = false)\n \tprotected function createTable ($name, array $columns)\n \t{\n \t\t// Statement for creating an initial table\n-\t\t$statement = implode (' ', array (\n-\t\t\t'CREATE TABLE IF NOT EXISTS `' . $name . '`',\n-\t\t\t'(' . implode (', ', $columns) . ')'\n-\t\t));\n+\t\t$statement = sprintf (\n+\t\t\t'CREATE TABLE IF NOT EXISTS `%s` (%s)',\n+\t\t\t$name, implode (', ', $columns)\n+\t\t);\n \n \t\t// Execute statement\n \t\t$created = $this->executeStatement ($statement);\n@@ -235,67 +269,55 @@ protected function prepareArray (array $columns)\n \t\treturn $statement;\n \t}\n \n-\t// Deletes all rows from a given table\n-\tprotected function deleteAllRows ($table)\n+\t// Get `tick` quoted string of array keys\n+\tprotected function getTickKeys (array $data)\n \t{\n-\t\t// Deletion statement\n-\t\t$statement = 'DELETE FROM `' . $table . '`';\n-\n-\t\t// Execute statement\n-\t\t$deleted = $this->executeStatement ($statement);\n+\t\t// Initial tick quoted keys\n+\t\t$ticks = array ();\n \n-\t\t// Throw exception on failure\n-\t\tif ($deleted === false) {\n-\t\t\tthrow new \\Exception (\n-\t\t\t\t'Failed to delete existing metadata!'\n-\t\t\t);\n+\t\t// Add each array key wrapped in tick quotes\n+\t\tforeach (array_keys ($data) as $key) {\n+\t\t\t$ticks[] = \"`$key`\";\n \t\t}\n+\n+\t\t// And convert tick quoted key array to string\n+\t\t$statement = implode (', ', $ticks);\n+\n+\t\treturn $statement;\n \t}\n \n \t// Saves metadata to specific metadata JSON file\n-\tpublic function saveMeta ($name, array $data, $thread = 'auto', $global = false)\n+\tpublic function saveMeta ($name, array $data, $thread = 'auto')\n \t{\n-\t\t// Metadata table\n-\t\t$metadata_table = $this->getMetaTable ($name, $thread, $global);\n+\t\t// Get thread\n+\t\t$thread = $this->getCommentThread ($thread);\n+\n+\t\t// Add website domain and thread to data\n+\t\t$data = array_merge (array (\n+\t\t\t'domain' => $this->setup->website,\n+\t\t\t'thread' => $thread,\n+\t\t\t'name' => $name\n+\t\t), $data);\n \n-\t\t// Create metadata table creation statement\n+\t\t// Get metadata table creation statements\n \t\t$creation_statement = $this->creationArray ($data);\n \n+\t\t// Add primary key to columns\n+\t\t$creation_statement[] = 'PRIMARY KEY (`domain`, `thread`)';\n+\n \t\t// Attempt to create metadata table\n-\t\t$this->createTable ($metadata_table, $creation_statement);\n-\n-\t\t// Delete existing data from database\n-\t\t$this->deleteAllRows ($metadata_table);\n-\n-\t\t// Check if the array is associative\n-\t\tif (array_keys ($data) !== range (0, count ($data) - 1)) {\n-\t\t\t// If so, create metadata columns insertion statement array\n-\t\t\t$columns = $this->prepareArray ($data);\n-\n-\t\t\t// Insert data into specific columns\n-\t\t\t$save  = 'INSERT INTO `' . $metadata_table . '` ';\n-\t\t\t$save .= 'VALUES (' . implode (', ', $columns) . ')';\n-\n-\t\t\t// Execute statement\n-\t\t\t$saved = $this->executeStatement ($save, $data);\n-\t\t} else {\n-\t\t\t// If not, insert each item individually\n-\t\t\t$save  = 'INSERT INTO `' . $metadata_table . '` ';\n-\t\t\t$save .= 'VALUES (:items)';\n-\n-\t\t\t// Insert each item individually\n-\t\t\tfor ($i = 0, $il = count ($data); $i < $il; $i++) {\n-\t\t\t\t// Execute statement\n-\t\t\t\t$saved = $this->executeStatement ($save, array (\n-\t\t\t\t\t'items' => $data[$i]\n-\t\t\t\t));\n+\t\t$this->createTable ($name, $creation_statement);\n \n-\t\t\t\t// Stop on any failures\n-\t\t\t\tif ($saved === false) {\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+\t\t// Create metadata columns insertion statement\n+\t\t$columns = implode (', ', $this->prepareArray ($data));\n+\n+\t\t// Insert data into specific columns\n+\t\t$save = sprintf ('REPLACE INTO `%s` (%s) VALUES (%s)',\n+\t\t\t$name, $this->getTickKeys ($data), $columns\n+\t\t);\n+\n+\t\t// Execute statement\n+\t\t$saved = $this->executeStatement ($save, $data);\n \n \t\t// Throw exception on failure\n \t\tif ($saved === false) {\n@@ -311,6 +333,12 @@ public function write ($action, $thread, array $data, $alt = false)\n \t\t// Get thread\n \t\t$thread = $this->getCommentThread ($thread);\n \n+\t\t// Add website domain and thread to data\n+\t\t$data = array_merge ($data, array (\n+\t\t\t'domain' => $this->setup->website,\n+\t\t\t'thread' => $thread\n+\t\t));\n+\n \t\t// Decide on an action\n \t\tswitch ($action) {\n \t\t\t// Action for posting a comment\n@@ -320,8 +348,8 @@ public function write ($action, $thread, array $data, $alt = false)\n \n \t\t\t\t// Construct SQL statement\n \t\t\t\t$query = sprintf (\n-\t\t\t\t\t'INSERT INTO `%s` VALUES (%s)',\n-\t\t\t\t\t$thread, implode (', ', $columns)\n+\t\t\t\t\t'INSERT INTO `comments` VALUES (%s)',\n+\t\t\t\t\timplode (', ', $columns)\n \t\t\t\t);\n \n \t\t\t\tbreak;\n@@ -346,9 +374,11 @@ public function write ($action, $thread, array $data, $alt = false)\n \n \t\t\t\t// Construct SQL statement\n \t\t\t\t$query = implode (' ', array (\n-\t\t\t\t\t'UPDATE `' . $thread . '`',\n+\t\t\t\t\t'UPDATE `comments`',\n \t\t\t\t\t'SET ' . $columns,\n-\t\t\t\t\t'WHERE id=:id'\n+\t\t\t\t\t'WHERE domain=:domain',\n+\t\t\t\t\t'AND thread=:thread',\n+\t\t\t\t\t'AND comment=:comment'\n \t\t\t\t));\n \n \t\t\t\tbreak;\n@@ -360,15 +390,19 @@ public function write ($action, $thread, array $data, $alt = false)\n \t\t\t\tif ($alt === true) {\n \t\t\t\t\t// If so, use delete statement\n \t\t\t\t\t$query = implode (' ', array (\n-\t\t\t\t\t\t'DELETE FROM `' . $thread . '`',\n-\t\t\t\t\t\t'WHERE id=:id'\n+\t\t\t\t\t\t'DELETE FROM `comments`',\n+\t\t\t\t\t\t'WHERE domain=:domain',\n+\t\t\t\t\t\t'AND thread=:thread',\n+\t\t\t\t\t\t'AND comment=:comment'\n \t\t\t\t\t));\n \t\t\t\t} else {\n \t\t\t\t\t// If not, use status update statement\n \t\t\t\t\t$query = implode (' ', array (\n-\t\t\t\t\t\t'UPDATE `' . $thread . '`',\n+\t\t\t\t\t\t'UPDATE `comments`',\n \t\t\t\t\t\t'SET status=:status',\n-\t\t\t\t\t\t'WHERE id=:id'\n+\t\t\t\t\t\t'WHERE domain=:domain',\n+\t\t\t\t\t\t'AND thread=:thread',\n+\t\t\t\t\t\t'AND comment=:comment'\n \t\t\t\t\t));\n \t\t\t\t}\n \n@@ -392,49 +426,45 @@ public function write ($action, $thread, array $data, $alt = false)\n \t// Check if comments table exists\n \tpublic function checkThread ()\n \t{\n-\t\t// Get thread\n-\t\t$thread = $this->setup->threadName;\n-\n \t\t// Create comments table creation statements\n \t\t$statement = $this->creationArray ($this->commentsTable);\n \n \t\t// Create initial comments if it doesn't exist\n-\t\t$this->createTable ($thread, $statement);\n+\t\t$this->createTable ('comments', $statement);\n \t}\n \n-\t// Queries a list of comment threads\n-\tpublic function queryThreads ()\n+\t// Queries unique rows as of a specific column an array\n+\tprotected function queryColumn ($column)\n \t{\n-\t\t// Database name\n-\t\t$name = $this->databaseName;\n-\n-\t\t// Check if database type if SQLite\n-\t\tif ($this->databaseType === 'sqlite') {\n-\t\t\t// If so, use SQLite statement\n-\t\t\t$statement  = 'SELECT * FROM sqlite_master ';\n-\t\t\t$statement .= 'WHERE type=\\'table\\'';\n-\t\t} else {\n-\t\t\t// If not, use MySQL statement\n-\t\t\t$statement  = 'SELECT * FROM INFORMATION_SCHEMA.TABLES ';\n-\t\t\t$statement .= 'WHERE TABLE_TYPE=\\'BASE TABLE\\' ';\n-\t\t\t$statement .= 'AND TABLE_SCHEMA=\\'' . $name . '\\'';\n-\t\t}\n-\n-\t\t// Execute statement\n-\t\t$results = $this->database->query ($statement);\n+\t\t// Select unique thread names\n+\t\t$results = $this->executeStatement (sprintf (\n+\t\t\t'SELECT DISTINCT `%s` FROM `comments`', $column\n+\t\t));\n \n \t\t// Check if query was successful\n \t\tif ($results !== false) {\n-\t\t\t// If so, fetch all threads\n+\t\t\t// If so, fetch all rows in column\n \t\t\t$fetch_all = $results->fetchAll (\\PDO::FETCH_ASSOC);\n \n-\t\t\t// Return threads column\n-\t\t\treturn array_column ($fetch_all, 'name'));\n+\t\t\t// Return column as array\n+\t\t\treturn array_column ($fetch_all, $column);\n \t\t}\n \n \t\treturn false;\n \t}\n \n+\t// Queries an array of websites\n+\tpublic function queryWebsites ()\n+\t{\n+\t\treturn $this->queryColumn ('domain');\n+\t}\n+\n+\t// Queries an array of comment threads\n+\tpublic function queryThreads ()\n+\t{\n+\t\treturn $this->queryColumn ('thread');\n+\t}\n+\n \t// These methods are not necessary in SQL\n \tpublic function addLatestComment () {}\n \tpublic function removeFromLatest () {}"
    },
    {
      "sha": "78ddd73705a38efcb8a922cbeb6fa0ddb652697d",
      "filename": "hashover/backend/classes/parsesql.php",
      "status": "modified",
      "additions": 30,
      "deletions": 15,
      "changes": 45,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/parsesql.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/parsesql.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/parsesql.php?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -21,7 +21,9 @@ class ParseSQL extends Database\n {\n \t// Database statement for adding a new comment\n \tprotected $insert = array (\n-\t\t'id' => null,\n+\t\t'domain' => null,\n+\t\t'thread' => null,\n+\t\t'comment' => null,\n \t\t'body' => null,\n \t\t'status' => null,\n \t\t'date' => null,\n@@ -40,7 +42,9 @@ class ParseSQL extends Database\n \n \t// Database statement for updating an existing comment\n \tprotected $update = array (\n-\t\t'id' => null,\n+\t\t'domain' => null,\n+\t\t'thread' => null,\n+\t\t'comment' => null,\n \t\t'body' => null,\n \t\t'status' => null,\n \t\t'name' => null,\n@@ -91,11 +95,16 @@ public function query ()\n \n \t\t// SQL statement to query comments by\n \t\t$statement = implode (' ', array (\n-\t\t\t'SELECT `id` FROM `' . $this->setup->threadName\n-\t\t);\n+\t\t\t'SELECT `comment` FROM `comments`',\n+\t\t\t'WHERE domain=:domain',\n+\t\t\t'AND thread=:thread'\n+\t\t));\n \n \t\t// Query comments using the statement\n-\t\t$results = $this->database->query ($statement);\n+\t\t$results = $this->executeStatement ($statement, array (\n+\t\t\t'domain' => $this->setup->website,\n+\t\t\t'thread' => $this->setup->threadName\n+\t\t));\n \n \t\t// Check if we received any comments\n \t\tif ($results !== false) {\n@@ -118,9 +127,6 @@ public function query ()\n \t// Reads a comment from database\n \tpublic function read ($comment, $thread = 'auto')\n \t{\n-\t\t// Get thread\n-\t\t$thread = $this->getCommentThread ($thread);\n-\n \t\t// Construct column portion of SQL statement\n \t\t$columns = array (\n \t\t\t'`body`',\n@@ -142,16 +148,28 @@ public function read ($comment, $thread = 'auto')\n \t\t// SQL statement to get columns from database\n \t\t$statement = implode (' ', array (\n \t\t\t'SELECT ' . implode (', ', $columns),\n-\t\t\t'FROM `' . $thread . '`',\n-\t\t\t'WHERE id=\\'' . $comment . '\\''\n+\t\t\t'FROM `comments`',\n+\t\t\t'WHERE domain=:domain',\n+\t\t\t'AND thread=:thread',\n+\t\t\t'AND comment=:comment'\n \t\t));\n \n \t\t// Query columns using statement\n-\t\t$result = $this->database->query ($statement);\n+\t\t$result = $this->executeStatement ($statement, array (\n+\t\t\t'domain' => $this->setup->website,\n+\t\t\t'thread' => $this->setup->threadName,\n+\t\t\t'comment' => $comment\n+\t\t));\n \n \t\t// Return columns as array if successful\n \t\tif ($result !== false) {\n-\t\t\treturn (array) $result->fetch (\\PDO::FETCH_ASSOC);\n+\t\t\t// Fetch all comments\n+\t\t\t$fetch_all = $result->fetch (\\PDO::FETCH_ASSOC);\n+\n+\t\t\t// Return as array if comments exist\n+\t\t\tif (!empty ($fetch_all)) {\n+\t\t\t\treturn (array) $fetch_all;\n+\t\t\t}\n \t\t}\n \n \t\treturn false;\n@@ -178,9 +196,6 @@ protected function prepareQuery ($comment, array $contents, array $defaults)\n \t// Saves a comment into database\n \tpublic function save ($comment, array $contents, $editing = false, $thread = 'auto')\n \t{\n-\t\t// Get thread\n-\t\t$thread = $this->getCommentThread ($thread);\n-\n \t\t// Decide action based on if comment is being edited\n \t\t$action = ($editing === true) ? 'update' : 'insert';\n "
    },
    {
      "sha": "2a26732a75b0c69b5e0d3b381bb434d66b5f285e",
      "filename": "hashover/backend/classes/secrets.php",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/secrets.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/secrets.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/secrets.php?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -47,7 +47,7 @@ class Secrets\n \tprotected $databaseType = 'sqlite';\n \n \t// Database name (prefixed with \"hashover-\" in MySQL)\n-\tprotected $databaseName = 'hashover-threads';\n+\tprotected $databaseName = 'comments';\n \n \t// SQL database host name\n \tprotected $databaseHost = 'localhost';"
    },
    {
      "sha": "85d2318738d9becef8f00b0e682fdbe14aff0c0d",
      "filename": "hashover/backend/classes/sensitivesettings.php",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/sensitivesettings.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/sensitivesettings.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/sensitivesettings.php?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -57,6 +57,9 @@ class SensitiveSettings extends SafeSettings\n \tpublic $userDeletionsUnlink\t= false;\t\t\t// Whether user deleted files are actually unlinked from the filesystem\n \tpublic $allowLocalMetadata\t= false;\t\t\t// Whether default metadata should be collected while running on a local server\n \n+\t// Whether multiple website support is enabled\n+\tpublic $supportsMultisites = false;\n+\n \t// External domains allowed to remotely load HashOver scripts\n \tpublic $allowedDomains = array (\n \t\t// '*.example.com',"
    },
    {
      "sha": "490d20b4ecf9a19b239f3823e805736525e06a8e",
      "filename": "hashover/backend/classes/setup.php",
      "status": "modified",
      "additions": 72,
      "deletions": 3,
      "changes": 75,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/setup.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/setup.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/setup.php?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -21,6 +21,7 @@ class Setup extends Settings\n {\n \tpublic $usage;\n \tpublic $threadsPath;\n+\tpublic $website;\n \tpublic $isMobile = false;\n \tpublic $remoteAccess = false;\n \tpublic $filePath;\n@@ -45,6 +46,12 @@ class Setup extends Settings\n \t\t'&', '!', '*', '.', '=', '_', '+', ' '\n \t);\n \n+\t// Characters to convert to dashes in domain names\n+\tprotected $dashFromDomains = array (\n+\t\t'<', '>', ':', '\"', '/', '\\\\', '|', '?',\n+\t\t'&', '!', '*', '=', '_', '+', ' '\n+\t);\n+\n \t// HashOver-specific URL queries to be ignored\n \tprotected $hashoverQueries = array (\n \t\t'hashover-reply', 'hashover-edit'\n@@ -61,9 +68,6 @@ public function __construct (array $usage)\n \t\t// Check for required extensions\n \t\t$this->extensionsLoaded ($this->extensions);\n \n-\t\t// Comment threads directory path\n-\t\t$this->threadsPath = $this->commentsPath . '/threads';\n-\n \t\t// Throw exception if script wasn't requested by this server\n \t\tif ($this->usage['mode'] !== 'php') {\n \t\t\tif ($this->refererCheck () === false) {\n@@ -73,6 +77,18 @@ public function __construct (array $usage)\n \t\t\t}\n \t\t}\n \n+\t\t// Check if multisite support is enabled\n+\t\tif ($this->supportsMultisites === true) {\n+\t\t\t// If so, set website based on domain\n+\t\t\t$this->setWebsite ($this->domain);\n+\t\t} else {\n+\t\t\t// If not, set threads directory path\n+\t\t\t$this->threadsPath = $this->commentsRoot . '/threads';\n+\n+\t\t\t// And set website to \"all\"\n+\t\t\t$this->website = 'all';\n+\t\t}\n+\n \t\t// Check if we have a user agent\n \t\tif (!empty ($_SERVER['HTTP_USER_AGENT'])) {\n \t\t\t// If so, get user agent\n@@ -141,6 +157,41 @@ protected function requestData ($data = '', $default = false)\n \t\treturn $request;\n \t}\n \n+\t// Sets path to website-specific threads directory\n+\tpublic function setWebsite ($host = 'request')\n+\t{\n+\t\t// Attempt to obtain website via POST or GET if told to\n+\t\tif ($host === 'request') {\n+\t\t\t$host = $this->requestData ('website');\n+\t\t}\n+\n+\t\t// No nothing if host is false or multisites is disabled\n+\t\tif ($host === false or $this->supportsMultisites === false) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// Remove \"www.\" from URL host\n+\t\t$host = str_replace ('www.', '', $host);\n+\n+\t\t// Get directory safe name of host\n+\t\t$host = $this->getSafeDomainName ($host);\n+\n+\t\t// Set host as \"localhost\" on local addresses\n+\t\t$host = $this->isLocalhost ($host) ? 'localhost' : $host;\n+\n+\t\t// Append website host to comments directory path\n+\t\t$this->commentsPath = $this->commentsRoot . '/' . $host;\n+\n+\t\t// Set threads directory path\n+\t\t$this->threadsPath = $this->commentsPath . '/threads';\n+\n+\t\t// Set thread directory path\n+\t\t$this->threadPath = $this->threadsPath . '/' . $this->threadName;\n+\n+\t\t// And set website\n+\t\t$this->website = $host;\n+\t}\n+\n \t// Gets a domain with a port from given URL\n \tprotected function getDomainWithPort ($url = '')\n \t{\n@@ -376,6 +427,21 @@ protected function getSafeThreadName ($name)\n \t\treturn $name;\n \t}\n \n+\t// Gets an OS-agnostic safe directory name\n+\tprotected function getSafeDomainName ($name)\n+\t{\n+\t\t// Replace reserved characters with dashes\n+\t\t$name = str_replace ($this->dashFromDomains, '-', $name);\n+\n+\t\t// Remove multiple/leading/trailing dashes\n+\t\t$name = $this->reduceDashes ($name);\n+\n+\t\t// Remove leading periods to prevent hiding in UNIX\n+\t\t$name = ltrim ($name, '.');\n+\n+\t\treturn $name;\n+\t}\n+\n \t// Sets comment thread to read comments from\n \tpublic function setThreadName ($name = 'request')\n \t{\n@@ -415,6 +481,9 @@ public function setPageURL ($url = 'request')\n \t\t\t);\n \t\t}\n \n+\t\t// Set various paths to be website-specific\n+\t\t$this->setWebsite ($parts['host']);\n+\n \t\t// Check if URL has a path and is not the index\n \t\tif (!empty ($parts['path']) and $parts['path'] !== '/') {\n \t\t\t// If so, set file path property"
    },
    {
      "sha": "7cc8f45198675af354f32cc2f24c445e53b0a18f",
      "filename": "hashover/backend/classes/thread.php",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/thread.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/classes/thread.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/classes/thread.php?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -235,6 +235,12 @@ public function read ($end = null)\n \t\treturn $comments;\n \t}\n \n+\t// Queries an array of websites\n+\tpublic function queryWebsites ()\n+\t{\n+\t\treturn $this->data->queryWebsites ();\n+\t}\n+\n \t// Queries an array of comment threads\n \tpublic function queryThreads ()\n \t{"
    },
    {
      "sha": "a684de8d8c65bf5aaa63304f7254c5f3619e78a5",
      "filename": "hashover/backend/comments-ajax.php",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/comments-ajax.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/comments-ajax.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/comments-ajax.php?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -39,6 +39,9 @@\n \t// Set thread name from POST/GET data\n \t$hashover->setup->setThreadName ('request');\n \n+\t// Set website from POST/GET data\n+\t$hashover->setup->setWebsite ('request');\n+\n \t// Set instance from POST/GET data\n \t$hashover->setup->setInstance ('request');\n "
    },
    {
      "sha": "fa6da1c47cacf2377878e47cd125319b4cc04305",
      "filename": "hashover/backend/load-comments.php",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/jacobwb/hashover-next/blob/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/load-comments.php",
      "raw_url": "https://github.com/jacobwb/hashover-next/raw/00f333872a3abb71fef27e4e14af8eb75c25663a/hashover/backend/load-comments.php",
      "contents_url": "https://api.github.com/repos/jacobwb/hashover-next/contents/hashover/backend/load-comments.php?ref=00f333872a3abb71fef27e4e14af8eb75c25663a",
      "patch": "@@ -39,6 +39,9 @@\n \t// Set thread name from POST/GET data\n \t$hashover->setup->setThreadName ('request');\n \n+\t// Set website from POST/GET data\n+\t$hashover->setup->setWebsite ('request');\n+\n \t// Initiate comment processing\n \t$hashover->initiate ();\n "
    }
  ]
}
