{
  "sha": "79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6NzljN2NmNmY3YmNhMGEwYjZmYTVjZDIzNzQ5ZGI2YTYxOTNiOGUyMw==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2018-10-11T10:47:51Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2018-10-11T10:47:51Z"
    },
    "message": "Fix Gulpfile watch-server-scripts problem. Improve Nashorn error messages.",
    "tree": {
      "sha": "584450aa74cb85f3e16aa9ee66b0fd501ceb4d8b",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/584450aa74cb85f3e16aa9ee66b0fd501ceb4d8b"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23",
  "html_url": "https://github.com/debiki/talkyard/commit/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fcf42693906c2b68bffda9e35ced6bbff76b01c8",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/fcf42693906c2b68bffda9e35ced6bbff76b01c8",
      "html_url": "https://github.com/debiki/talkyard/commit/fcf42693906c2b68bffda9e35ced6bbff76b01c8"
    }
  ],
  "stats": {
    "total": 210,
    "additions": 145,
    "deletions": 65
  },
  "files": [
    {
      "sha": "a248f49524515d852970ba6f9c7a6d74190a1913",
      "filename": "app/debiki/DebikiHttp.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23/app/debiki/DebikiHttp.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23/app/debiki/DebikiHttp.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/DebikiHttp.scala?ref=79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23",
      "patch": "@@ -100,8 +100,8 @@ object EdHttp {\n   def UnprocessableEntityResult(errCode: String, message: String): Result =\n     R.UnprocessableEntity(s\"422 Unprocessable Entity\\n$message [$errCode]\")\n \n-  def InternalErrorResult(errCode: String, message: String): Result =\n-    R.InternalServerError(s\"500 Internal Server Error\\n$message [$errCode]\")\n+  def InternalErrorResult(errCode: String, message: String, moreDetails: String = \"\"): Result =\n+    R.InternalServerError(s\"500 Internal Server Error\\n$message [$errCode]\\n\\n$moreDetails\")\n \n   def InternalErrorResult2(message: String): Result =\n     R.InternalServerError(\"500 Internal Server Error\\n\"+ message)\n@@ -229,8 +229,8 @@ object EdHttp {\n     throwBadReq(errCode, message)\n   }\n \n-  def throwInternalError(errCode: String, message: String = \"\") =\n-    throw ResultException(InternalErrorResult(errCode, message))\n+  def throwInternalError(errCode: String, message: String = \"\", moreDetails: String = \"\") =\n+    throw ResultException(InternalErrorResult(errCode, message, moreDetails = moreDetails))\n \n \n "
    },
    {
      "sha": "9ad927993a2121481be59b7f8dcbd85759c3be56",
      "filename": "app/debiki/Nashorn.scala",
      "status": "modified",
      "additions": 47,
      "deletions": 14,
      "changes": 61,
      "blob_url": "https://github.com/debiki/talkyard/blob/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23/app/debiki/Nashorn.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23/app/debiki/Nashorn.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/Nashorn.scala?ref=79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23",
      "patch": "@@ -28,6 +28,7 @@ import scala.concurrent.Future\n import scala.util.Try\n import Nashorn._\n import jdk.nashorn.api.scripting.ScriptObjectMirror\n+import org.scalactic.{Bad, ErrorMessage, Good, Or}\n import scala.collection.mutable.ArrayBuffer\n \n \n@@ -188,31 +189,32 @@ class Nashorn(globals: Globals) {\n   }\n \n \n-  def renderPage(reactStoreJsonString: String): Option[String] = {\n+  def renderPage(reactStoreJsonString: String): String Or ErrorMessage = {\n     if (isTestSoDisableScripts)\n-      return Some(\"Scripts disabled [EsM6YKW2]\")\n+      return Good(\"Scripts disabled [EsM6YKW2]\")\n     withJavascriptEngine(engine => {\n       renderPageImpl(engine, reactStoreJsonString)\n     })\n   }\n \n \n-  private def renderPageImpl[R](engine: js.Invocable, reactStoreJsonString: String): Option[String] = {\n+  private def renderPageImpl[R](engine: js.Invocable, reactStoreJsonString: String)\n+        : String Or ErrorMessage = {\n     val timeBefore = System.currentTimeMillis()\n \n-    val pageHtml = engine.invokeFunction(\n+    val htmlOrError = engine.invokeFunction(\n       \"renderReactServerSide\", reactStoreJsonString, cdnOrigin.getOrElse(\"\")).asInstanceOf[String]\n-    if (pageHtml == ErrorRenderingReact) {\n+    if (htmlOrError.startsWith(ErrorRenderingReact)) {\n       logger.error(s\"Error rendering page with React server side [DwE5KGW2]\")\n-      return None\n+      return Bad(htmlOrError)\n     }\n \n     def timeElapsed = System.currentTimeMillis() - timeBefore\n     def threadId = java.lang.Thread.currentThread.getId\n     def threadName = java.lang.Thread.currentThread.getName\n     logger.trace(s\"Done rendering: $timeElapsed ms, thread $threadName  (id $threadId)\")\n \n-    Some(pageHtml)\n+    Good(htmlOrError)\n   }\n \n \n@@ -239,9 +241,17 @@ class Nashorn(globals: Globals) {\n           oneboxRenderer, uploadsUrlPrefix)\n       oneboxRenderer.javascriptEngine = None\n \n-      dieIf(!resultObj.isInstanceOf[ScriptObjectMirror],\n-          \"TyERCMR01\", s\"Bad class: ${classNameOf(resultObj)}\")\n-      val result = resultObj.asInstanceOf[ScriptObjectMirror]\n+      val result: ScriptObjectMirror = resultObj match {\n+        case scriptObjectMirror: ScriptObjectMirror =>\n+          scriptObjectMirror\n+        case errorDetails: ErrorMessage =>\n+          // Don't use Die â€” the stack trace to here isn't interesting? Instead, it's the\n+          // errorDetails from the inside-Nashorn exception that matters.\n+          debiki.EdHttp.throwInternalError(\n+            \"TyERCMEX\", \"Error rendering CommonMark, server side in Nashorn\", errorDetails)\n+        case unknown =>\n+          die(\"TyERCMR01\", s\"Bad class: ${classNameOf(unknown)}, thing as string: ``$unknown''\")\n+      }\n \n       dieIf(!result.isArray, \"TyERCMR02\", \"Not an array\")\n       dieIf(!result.hasSlot(0), \"TyERCMR03A\", \"No slot 0\")\n@@ -435,6 +445,7 @@ class Nashorn(globals: Globals) {\n         |}\n         |\n         |function renderReactServerSide(reactStoreJsonString, cdnOriginOrEmpty) {\n+        |  var exceptionAsString;\n         |  try {\n         |    theStore = JSON.parse(reactStoreJsonString);\n         |    theStore.currentPage = theStore.pagesById[theStore.currentPageId];\n@@ -465,14 +476,15 @@ class Nashorn(globals: Globals) {\n         |  }\n         |  catch (e) {\n         |    printStackTrace(e);\n+        |    exceptionAsString = exceptionToString(e);\n         |  }\n         |  finally {\n         |    // Reset things to error codes, to fail fast, if attempts to access these,\n         |    // when using this same Nashorn engine to render Markdown to HTML.\n         |    t = 'TyEBADACCESSLANG';\n         |    theStore = 'TyEBADACCESSSTORE';\n         |  }\n-        |  return '$ErrorRenderingReact';\n+        |  return '$ErrorRenderingReact\\n\\n' + exceptionAsString;\n         |}\n         |\"\"\")\n \n@@ -522,7 +534,7 @@ class Nashorn(globals: Globals) {\n     // Output the script so we can lookup line numbers if there's an error.\n     val script = scriptBuilder.toString()\n     if (!Globals.isProd) {\n-      val where = \"target/nashorn-ok-delete.js\"\n+      val where = \"target/nashorn-ok-delete.js\"   // RENAME to -auto-generated.js? sounds more serious\n       logger.debug(o\"\"\"... Here's the server side Javascript: $where\"\"\")\n       new jio.PrintWriter(where) {\n         write(script)\n@@ -601,8 +613,11 @@ object Nashorn {\n     |  printStackTrace(e);\n     |}\n     |\n+    |// Returns [html, mentions] if ok, else a string with an error message\n+    |// and exception stack trace.\n     |function renderAndSanitizeCommonMark(source, allowClassIdDataAttrs, followLinks,\n     |       instantOneboxRenderer, uploadsUrlPrefixCommonmark) {\n+    |  var exceptionAsString;\n     |  try {\n     |    theStore = null; // Fail fast. Don't use here, might not have been inited.\n     |    eds.uploadsUrlPrefixCommonmark = uploadsUrlPrefixCommonmark;  // [7AKBQ2]\n@@ -620,10 +635,11 @@ object Nashorn {\n     |    return [html, mentionsThisTime];\n     |  }\n     |  catch (e) {\n-    |    console.error(\"Error in renderAndSanitizeCommonMark: [TyERNDRCM02]\");\n+    |    console.error(\"Error in renderAndSanitizeCommonMark: [TyERNDRCM02A]\");\n     |    printStackTrace(e);\n+    |    exceptionAsString = exceptionToString(e);\n     |  }\n-    |  return \"Error rendering CommonMark on server [TyERNDRCM02]\";\n+    |  return \"Error in renderAndSanitizeCommonMark: [TyERNDRCM02B]\\n\\n\" + exceptionAsString;\n     |}\n     |\n     |// (Don't name this function 'sanitizeHtml' because it'd then get overwritten by\n@@ -683,6 +699,23 @@ object Nashorn {\n     |  console.error('Exception as is: ' + exception);\n     |  console.error('Exception as JSON: ' + JSON.stringify(exception));\n     |}\n+    |\n+    |// CLEAN_UP DO_AFTER 2018-11-01 use this + console.error(), instead of printStackTrace(exception) ?\n+    |// â€” just wait for a short while, in case there's some surprising problem with this fn:\n+    |// Could actually remove printStackTrace() and always log the error from Scala instead? since\n+    |// needs to return the error to Scala anyway, so can show in the browser.\n+    |function exceptionToString(exception) {\n+    |  return (\n+    |      'File: nashorn-ok-delete.js\\n' +\n+    |      'Line: ' + exception.lineNumber  + '\\n' +\n+    |      'Column: ' + exception.columnNumber  + '\\n' +\n+    |      'Exception message: ' + exception + '\\n' +\n+    |      'Exception as JSON: ' + JSON.stringify(exception) + '\\n' +\n+    |      // It's useful to include the 2 lines above, not only `.stack` below, because\n+    |      // sometimes, e.g. if doing `throw 'text'`, then `.stack` will be `undefined`.\n+    |      // However, `exception.toString()` will be 'text'.\n+    |      'Stack trace: ' + exception.stack  + '\\n');\n+    |}\n     |\"\"\"\n \n "
    },
    {
      "sha": "9a9218d435eac208b035ed9e456ddc34a6980b5c",
      "filename": "app/debiki/dao/RenderContentService.scala",
      "status": "modified",
      "additions": 61,
      "deletions": 22,
      "changes": 83,
      "blob_url": "https://github.com/debiki/talkyard/blob/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23/app/debiki/dao/RenderContentService.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23/app/debiki/dao/RenderContentService.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/RenderContentService.scala?ref=79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23",
      "patch": "@@ -24,6 +24,7 @@ import debiki.{DatabaseUtils, Globals, Nashorn}\n import play.{api => p}\n import scala.concurrent.duration._\n import RenderContentService._\n+import org.scalactic.{Bad, ErrorMessage, Good, Or}\n import scala.concurrent.ExecutionContext\n \n \n@@ -60,6 +61,8 @@ class RenderContentActor(\n \n   var pauseUntilNanos: Option[Long] = None\n \n+  var numBackgroundRenderErrorsInARow = 0\n+\n   override def receive: Receive = {\n     case PauseThreeSeconds =>\n       // Would be better with just [one-db-writer], then woudn't need this.\n@@ -90,16 +93,22 @@ class RenderContentActor(\n           false\n         }\n       }\n+\n       if (shallPause) {\n         context.system.scheduler.scheduleOnce(1 second, self, RegenerateStaleHtml)(execCtx)\n       }\n       else try {\n-        findAndUpdateOneOutOfDatePage()\n-\n-        val nanosAfter = System.nanoTime()\n-        val millisElapsedNow: Double = math.max(0, (nanosAfter - nanosBeore) / 1000 / 1000).toDouble\n-        val difference = millisElapsedNow - avgMillisToBackgroundRender\n-        avgMillisToBackgroundRender = avgMillisToBackgroundRender + difference * 0.15d\n+        val anyError = findAndUpdateOneOutOfDatePage()\n+        if (anyError.isDefined) {\n+          numBackgroundRenderErrorsInARow += 1\n+        }\n+        else {\n+          numBackgroundRenderErrorsInARow = 0\n+          val nanosAfter = System.nanoTime()\n+          val millisElapsedNow: Double = math.max(0, (nanosAfter - nanosBeore) / 1000 / 1000).toDouble\n+          val difference = millisElapsedNow - avgMillisToBackgroundRender\n+          avgMillisToBackgroundRender = avgMillisToBackgroundRender + difference * 0.15d\n+        }\n       }\n       catch {\n         case ex: java.sql.SQLException if DatabaseUtils.isConnectionClosed(ex) =>\n@@ -118,28 +127,37 @@ class RenderContentActor(\n           // waiting 100ms between each page. Anyway, let's try to not use more than 50% of\n           // the CPU by waiting with the next page, for as long as it took to render\n           // the last pages, on average?\n-          val millisToPause = math.max(50, avgMillisToBackgroundRender.toLong)\n-          context.system.scheduler.scheduleOnce(millisToPause millis, self, RegenerateStaleHtml)(execCtx)\n+          var millisToPause = math.max(50, avgMillisToBackgroundRender.toLong)\n+          if (numBackgroundRenderErrorsInARow > 5) {\n+            // This almost certainly isn't recoverable. Source code bug, needs fix & redeployment.\n+            p.Logger.warn(\"Slowing down background rendering: There are errors, and don't want to \" +\n+              \"fill the disks with error log messages. Retrying once every 30 seconds. [TyE5WKBAQ25]\")\n+            millisToPause = 30 * 1000\n+          }\n+          context.system.scheduler.scheduleOnce(millisToPause.millis, self, RegenerateStaleHtml)(execCtx)\n         }\n       }\n   }\n \n \n   private def rerenderContentHtmlUpdateCache(sitePageId: SitePageId,\n-        customParamsAndHash: Option[PageRenderParamsAndHash]) {\n+        customParamsAndHash: Option[PageRenderParamsAndHash]): Boolean Or ErrorMessage = {\n     try {\n       renderImpl(sitePageId, customParamsAndHash)\n     }\n     catch {\n       case ex: java.sql.SQLException if DatabaseUtils.isConnectionClosed(ex) =>\n         p.Logger.warn(\"Cannot render page, database connection closed [DwE5YJK1]\")\n+        Bad(\"Database connection closed [TyE5YJK2]\")\n       case ex: Exception =>\n         p.Logger.error(s\"Error rerendering page $sitePageId [DwE2WKP4]\", ex)\n+        Bad(\"Exception [TyE5YJK5KQ3]\")\n     }\n   }\n \n \n-  private def renderImpl(sitePageId: SitePageId, anyCustomParams: Option[PageRenderParamsAndHash]) {\n+  private def renderImpl(sitePageId: SitePageId, anyCustomParams: Option[PageRenderParamsAndHash])\n+      : Boolean Or ErrorMessage = {\n \n     // COULD add Metrics that times this.\n \n@@ -148,9 +166,12 @@ class RenderContentActor(\n \n     // If we got custom params, rerender only for those params (maybe other param combos = up-to-date).\n     anyCustomParams foreach { paramsHash =>\n-      renderIfNeeded(sitePageId, paramsHash.pageRenderParams, dao, Some(paramsHash.reactStoreJsonHash))\n-      dao.removePageFromMemCache(sitePageId, Some(paramsHash.pageRenderParams))\n-      return\n+      val result = renderIfNeeded(\n+        sitePageId, paramsHash.pageRenderParams, dao, Some(paramsHash.reactStoreJsonHash))\n+      if (result == Good(true)) {\n+        dao.removePageFromMemCache(sitePageId, Some(paramsHash.pageRenderParams))\n+      }\n+      return result\n     }\n \n     val isEmbedded = dao.getPageMeta(sitePageId.pageId).exists(_.pageRole == PageRole.EmbeddedComments)\n@@ -169,20 +190,30 @@ class RenderContentActor(\n       anyPageRoot = None,\n       anyPageQuery = None)\n \n-    renderIfNeeded(sitePageId, renderParams, dao, freshStoreJsonHash = None)\n+    var result = renderIfNeeded(sitePageId, renderParams, dao, freshStoreJsonHash = None)\n+    if (result.isBad)\n+      return result\n \n     // Render for medium width.\n     val mediumParams = renderParams.copy(widthLayout = WidthLayout.Medium)\n-    renderIfNeeded(sitePageId, mediumParams, dao, freshStoreJsonHash = None)\n+    result = renderIfNeeded(sitePageId, mediumParams, dao, freshStoreJsonHash = None)\n+    if (result.isBad)\n+      return result\n \n     // Remove cached whole-page-html, so we'll generate a new page (<html><head> etc) that\n     // includes the new content we generated above. [7UWS21]\n-    dao.removePageFromMemCache(sitePageId)\n+    if (result == Good(true)) {\n+      dao.removePageFromMemCache(sitePageId)\n+    }\n+\n+    result\n   }\n \n \n+  /** Returns Good(true-iff-was-rerendered) or Bad(ErrorMessage).\n+    */\n   private def renderIfNeeded(sitePageId: SitePageId, renderParams: PageRenderParams, dao: SiteDao,\n-      freshStoreJsonHash: Option[String]) {\n+      freshStoreJsonHash: Option[String]): Boolean Or ErrorMessage = {\n \n     // ----- Is still out-of-date?\n \n@@ -204,15 +235,18 @@ class RenderContentActor(\n     if (!isOutOfDate) {\n       p.Logger.debug(o\"\"\"Page ${sitePageId.pageId} site ${sitePageId.siteId}\n              is up-to-date, ignoring re-render message. [DwE4KPL8]\"\"\")\n-      return\n+      return Good(false)\n     }\n \n     // ----- Do render page\n \n     val toJsonResult = dao.jsonMaker.pageToJson(sitePageId.pageId, renderParams)\n-    val newHtml = nashorn.renderPage(toJsonResult.reactStoreJsonString) getOrElse {\n+    val newHtml = nashorn.renderPage(toJsonResult.reactStoreJsonString) match {\n+      case Good(html) => html\n+      case bad @ Bad(errorMessage) =>\n+      // The error has been logged already.\n       p.Logger.error(s\"Error rendering ${sitePageId.toPrettyString} [TyEBGRERR]\")\n-      return\n+      return bad\n     }\n \n     dao.readWriteTransaction { tx =>\n@@ -225,14 +259,19 @@ class RenderContentActor(\n     val embedded = if (renderParams.isEmbedded) \", embedded\" else \"\"\n     val custom = if (freshStoreJsonHash.isDefined) \", custom\" else \"\"\n     p.Logger.debug(o\"\"\"Background rendered $whichPage, $width$embedded$custom [TyMBGRDONE]\"\"\")\n+\n+    Good(true)\n   }\n \n \n-  private def findAndUpdateOneOutOfDatePage() {\n+  private def findAndUpdateOneOutOfDatePage(): Option[ErrorMessage] = {\n     val pageIdsToRerender = globals.systemDao.loadPageIdsToRerender(1)\n     for (toRerender <- pageIdsToRerender) {\n-      rerenderContentHtmlUpdateCache(toRerender.sitePageId, customParamsAndHash = None)\n+      val result = rerenderContentHtmlUpdateCache(toRerender.sitePageId, customParamsAndHash = None)\n+      if (result.isBad)\n+        return Some(result.swap.get)\n     }\n+    None\n   }\n \n }"
    },
    {
      "sha": "9270792a334c8e6df791280d5e37d2b0348dd1ba",
      "filename": "app/debiki/dao/RenderedPageHtmlDao.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23/app/debiki/dao/RenderedPageHtmlDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23/app/debiki/dao/RenderedPageHtmlDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/RenderedPageHtmlDao.scala?ref=79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23",
      "patch": "@@ -209,8 +209,11 @@ trait RenderedPageHtmlDao {\n     // Now we'll have to render the page contents [5KWC58], so we have some html to send back\n     // to the client, in case the client is a search engine bot â€” I suppose those\n     // aren't happy with only up-to-date json (but no html) + running React.js.\n-    val newHtml = context.nashorn.renderPage(currentReactStoreJsonString) getOrElse throwInternalError(\n-      \"TyE500RNDR\", \"Error rendering page\")\n+    val newHtml = context.nashorn.renderPage(currentReactStoreJsonString) getOrIfBad { errorMessage =>\n+      throwInternalError(\n+        \"TyE500RNDR\", \"Error rendering page, with React.js, server side in Nashorn\",\n+        moreDetails = errorMessage)\n+    }\n \n     readWriteTransaction { tx =>\n       tx.upsertCachedPageContentHtml("
    },
    {
      "sha": "8cf26d98270712df8b6ca5e305fb8f03a232c956",
      "filename": "gulpfile.js",
      "status": "modified",
      "additions": 28,
      "deletions": 23,
      "changes": 51,
      "blob_url": "https://github.com/debiki/talkyard/blob/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23/gulpfile.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23/gulpfile.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/gulpfile.js?ref=79c7cf6f7bca0a0b6fa5cd23749db6a6193b8e23",
      "patch": "@@ -220,7 +220,27 @@ var serverTypescriptSrc = [\n     'client/shared/plain-old-javascript.d.ts',\n     'client/typedefs/**/*.ts'];\n \n-function compileServerTypescript() {\n+var serverJavascriptSrc = [\n+    // Two different sanitizers. [5FKEW2]\n+    // Needs to be first. There's some missing ';' at the start of the script bug?\n+    'modules/sanitize-html/dist/sanitize-html.min.js',\n+    'client/third-party/html-css-sanitizer-bundle.js',\n+    'node_modules/react/umd/react.production.min.js',\n+    'node_modules/react-dom/umd/react-dom-server.browser.production.min.js',\n+    'node_modules/react-dom-factories/index.js',\n+    'node_modules/create-react-class/create-react-class.min.js',\n+    // Don't need React CSS transitions server side.\n+    'node_modules/react-router-dom/umd/react-router-dom.js',\n+    'client/third-party/tiny-querystring.umd.js',\n+    'node_modules/markdown-it/dist/markdown-it.min.js',\n+    'client/third-party/lodash-custom.js',\n+    'client/third-party/non-angular-slugify.js',\n+    'client/app/editor/mentions-markdown-it-plugin.js',\n+    'client/app/editor/onebox-markdown-it-plugin.js'];\n+\n+// This one also concatenates Javascript, so it's different from the other\n+// 'compile(Sth)Typescript' functions â€” so let's append 'ConcatJavascript' to the name.\n+function compileServerTypescriptConcatJavascript() {\n   var typescriptStream = gulp.src(serverTypescriptSrc)\n     .pipe(wrap(nextFileTemplate))\n     .pipe(serverTypescriptProject());\n@@ -231,23 +251,7 @@ function compileServerTypescript() {\n     });\n   }\n \n-  var javascriptStream = gulp.src([\n-        // Two different sanitizers. [5FKEW2]\n-        // Needs to be first. There's some missing ';' at the start of the script bug?\n-        'modules/sanitize-html/dist/sanitize-html.min.js',\n-        'client/third-party/html-css-sanitizer-bundle.js',\n-        'node_modules/react/umd/react.production.min.js',\n-        'node_modules/react-dom/umd/react-dom-server.browser.production.min.js',\n-        'node_modules/react-dom-factories/index.js',\n-        'node_modules/create-react-class/create-react-class.min.js',\n-        // Don't need React CSS transitions server side.\n-        'node_modules/react-router-dom/umd/react-router-dom.js',\n-        'client/third-party/tiny-querystring.umd.js',\n-        'node_modules/markdown-it/dist/markdown-it.min.js',\n-        'client/third-party/lodash-custom.js',\n-        'client/third-party/non-angular-slugify.js',\n-        'client/app/editor/mentions-markdown-it-plugin.js',\n-        'client/app/editor/onebox-markdown-it-plugin.js'])\n+  var javascriptStream = gulp.src(serverJavascriptSrc)\n       .pipe(wrap(nextFileTemplate));\n \n   return es.merge(typescriptStream, javascriptStream)\n@@ -340,8 +344,8 @@ function compileOtherTypescript(what, typescriptProject) {\n   return stream.pipe(gulp.dest('target/client/'));\n }\n \n-gulp.task('compileServerTypescript', function () {\n-  return compileServerTypescript();\n+gulp.task('compileServerTypescriptConcatJavascript', function () {\n+  return compileServerTypescriptConcatJavascript();\n });\n \n gulp.task('compileSlimTypescript', function () {\n@@ -366,7 +370,7 @@ gulp.task('compileEditorTypescript', function () {\n \n gulp.task('compileAllTypescript', function () {\n   return es.merge(\n-      compileServerTypescript(),\n+      compileServerTypescriptConcatJavascript(),\n       compileSlimTypescript(),\n       compileOtherTypescript('more', moreTypescriptProject),\n       compileOtherTypescript('2d', _2dTypescriptProject),\n@@ -376,7 +380,7 @@ gulp.task('compileAllTypescript', function () {\n \n \n var compileTsTaskNames = [\n-  'compileServerTypescript',\n+  'compileServerTypescriptConcatJavascript',\n   'compileSlimTypescript',\n   'compileMoreTypescript',\n   'compile2dTypescript',\n@@ -533,7 +537,8 @@ function logChangeFn(fileType) {\n \n gulp.task('watch', ['default'], function() {\n   watchAndLiveForever = true;\n-  gulp.watch(serverTypescriptSrc, ['compileServerTypescript-concatScripts']).on('change', logChangeFn('Server TypeScript'));\n+  var allServerScriptsSrc = serverTypescriptSrc.concat(serverJavascriptSrc);\n+  gulp.watch(allServerScriptsSrc, ['compileServerTypescriptConcatJavascript-concatScripts']).on('change', logChangeFn('Server TypeScript'));\n   gulp.watch(slimTypescriptSrc, ['compileSlimTypescript-concatScripts']).on('change', logChangeFn('Slim TypeScript'));\n   gulp.watch(makeOtherTypescriptSrc('more'), ['compileMoreTypescript-concatScripts']).on('change', logChangeFn('More TypeScript'));\n   gulp.watch(makeOtherTypescriptSrc('2d'), ['compile2dTypescript-concatScripts']).on('change', logChangeFn('2D TypeScript'));"
    }
  ]
}
