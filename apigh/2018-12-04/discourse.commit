{
  "sha": "e117deb2bafd52e55704f85455a32bb660e7961d",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODplMTE3ZGViMmJhZmQ1MmU1NTcwNGY4NTQ1NWEzMmJiNjYwZTc5NjFk",
  "commit": {
    "author": {
      "name": "David Taylor",
      "email": "david@taylorhq.com",
      "date": "2018-12-04T15:09:32Z"
    },
    "committer": {
      "name": "David Taylor",
      "email": "david@taylorhq.com",
      "date": "2018-12-04T15:09:32Z"
    },
    "message": "FIX: Improve avatar loading, and add tests\n\nFollow-up from 4e2cc9c",
    "tree": {
      "sha": "171a5d5a4ecc7bc8db459136714638366ac27180",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/171a5d5a4ecc7bc8db459136714638366ac27180"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/e117deb2bafd52e55704f85455a32bb660e7961d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/e117deb2bafd52e55704f85455a32bb660e7961d",
  "html_url": "https://github.com/discourse/discourse/commit/e117deb2bafd52e55704f85455a32bb660e7961d",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/e117deb2bafd52e55704f85455a32bb660e7961d/comments",
  "author": {
    "login": "davidtaylorhq",
    "id": 6270921,
    "node_id": "MDQ6VXNlcjYyNzA5MjE=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/6270921?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davidtaylorhq",
    "html_url": "https://github.com/davidtaylorhq",
    "followers_url": "https://api.github.com/users/davidtaylorhq/followers",
    "following_url": "https://api.github.com/users/davidtaylorhq/following{/other_user}",
    "gists_url": "https://api.github.com/users/davidtaylorhq/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davidtaylorhq/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davidtaylorhq/subscriptions",
    "organizations_url": "https://api.github.com/users/davidtaylorhq/orgs",
    "repos_url": "https://api.github.com/users/davidtaylorhq/repos",
    "events_url": "https://api.github.com/users/davidtaylorhq/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davidtaylorhq/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "davidtaylorhq",
    "id": 6270921,
    "node_id": "MDQ6VXNlcjYyNzA5MjE=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/6270921?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davidtaylorhq",
    "html_url": "https://github.com/davidtaylorhq",
    "followers_url": "https://api.github.com/users/davidtaylorhq/followers",
    "following_url": "https://api.github.com/users/davidtaylorhq/following{/other_user}",
    "gists_url": "https://api.github.com/users/davidtaylorhq/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davidtaylorhq/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davidtaylorhq/subscriptions",
    "organizations_url": "https://api.github.com/users/davidtaylorhq/orgs",
    "repos_url": "https://api.github.com/users/davidtaylorhq/repos",
    "events_url": "https://api.github.com/users/davidtaylorhq/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davidtaylorhq/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "22001b3c50dec1ce424dd821790ab4181012e99c",
      "url": "https://api.github.com/repos/discourse/discourse/commits/22001b3c50dec1ce424dd821790ab4181012e99c",
      "html_url": "https://github.com/discourse/discourse/commit/22001b3c50dec1ce424dd821790ab4181012e99c"
    }
  ],
  "stats": {
    "total": 38,
    "additions": 36,
    "deletions": 2
  },
  "files": [
    {
      "sha": "9805623ccf402eaf3327d745d899ef40faba4cd3",
      "filename": "lib/auth/managed_authenticator.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/e117deb2bafd52e55704f85455a32bb660e7961d/lib/auth/managed_authenticator.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e117deb2bafd52e55704f85455a32bb660e7961d/lib/auth/managed_authenticator.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/auth/managed_authenticator.rb?ref=e117deb2bafd52e55704f85455a32bb660e7961d",
      "patch": "@@ -72,7 +72,7 @@ def after_authenticate(auth_token, existing_account: nil)\n         credentials: auth_token[:credentials] || {},\n         extra: auth_token[:extra] || {}\n       )\n-      retrieve_avatar(result.user, auth_token[:info][:image])\n+      retrieve_avatar(result.user, auth_token.dig(:info, :image))\n     end\n \n     result.email_valid = true if result.email\n@@ -94,7 +94,7 @@ def create_association!(hash)\n   def after_create_account(user, auth)\n     data = auth[:extra_data]\n     create_association!(data.merge(user: user))\n-    retrieve_avatar(user, data&.[](\"info\")&.[](\"image\"))\n+    retrieve_avatar(user, data.dig(:info, :image))\n   end\n \n   def retrieve_avatar(user, url)"
    },
    {
      "sha": "6fed762f6f9b5fc0e81e5853f05affb10afff38a",
      "filename": "spec/components/auth/managed_authenticator_spec.rb",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/discourse/discourse/blob/e117deb2bafd52e55704f85455a32bb660e7961d/spec/components/auth/managed_authenticator_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e117deb2bafd52e55704f85455a32bb660e7961d/spec/components/auth/managed_authenticator_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/auth/managed_authenticator_spec.rb?ref=e117deb2bafd52e55704f85455a32bb660e7961d",
      "patch": "@@ -114,6 +114,40 @@ def match_by_email\n         expect(result.user.id).to eq(user.id)\n       end\n     end\n+\n+    describe \"avatar on update\" do\n+      let(:user) { Fabricate(:user) }\n+      let!(:associated) { UserAssociatedAccount.create!(user: user, provider_name: 'myauth', provider_uid: \"1234\") }\n+\n+      it \"schedules the job upon update correctly\" do\n+        # No image supplied, do not schedule\n+        expect { result = authenticator.after_authenticate(hash) }\n+          .to change { Jobs::DownloadAvatarFromUrl.jobs.count }.by(0)\n+\n+        # Image supplied, schedule\n+        expect { result = authenticator.after_authenticate(hash.deep_merge(info: { image: \"https://some.domain/image.jpg\" })) }\n+          .to change { Jobs::DownloadAvatarFromUrl.jobs.count }.by(1)\n+\n+        # User already has profile picture, don't schedule\n+        user.user_avatar = Fabricate(:user_avatar, custom_upload: Fabricate(:upload))\n+        user.save!\n+        expect { result = authenticator.after_authenticate(hash.deep_merge(info: { image: \"https://some.domain/image.jpg\" })) }\n+          .to change { Jobs::DownloadAvatarFromUrl.jobs.count }.by(0)\n+      end\n+    end\n+\n+    describe \"avatar on create\" do\n+      let(:user) { Fabricate(:user) }\n+      it \"doesn't schedule with no image\" do\n+        expect { result = authenticator.after_create_account(user, extra_data: hash) }\n+          .to change { Jobs::DownloadAvatarFromUrl.jobs.count }.by(0)\n+      end\n+\n+      it \"schedules with image\" do\n+        expect { result = authenticator.after_create_account(user, extra_data: hash.deep_merge(info: { image: \"https://some.domain/image.jpg\" })) }\n+          .to change { Jobs::DownloadAvatarFromUrl.jobs.count }.by(1)\n+      end\n+    end\n   end\n \n   describe 'description_for_user' do"
    }
  ]
}
