{
  "sha": "22d263c6d2211a663cbc1634b49093d5bb782221",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6MjJkMjYzYzZkMjIxMWE2NjNjYmMxNjM0YjQ5MDkzZDViYjc4MjIyMQ==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2018-12-13T20:41:40Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2018-12-13T20:41:40Z"
    },
    "message": "Embed Optimizations (#2121)\n\n* feat: refactored bridge\r\n\r\n- Cleaned up implementation of bridge\r\n- Removed unneeded babel-polyfill and webpack globals\r\n\r\n* fix: fixed up some static headers\r\n\r\n- bumped version\r\n\r\n* fix: moved intersection observer out of chunk\r\n\r\n* fix: fixed misplaced \"!\"",
    "tree": {
      "sha": "62fe7cea4a35df4931b2ecd03d6a623e43efb16e",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/62fe7cea4a35df4931b2ecd03d6a623e43efb16e"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/22d263c6d2211a663cbc1634b49093d5bb782221",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcEsQECRBK7hj4Ov3rIwAAdHIIAHZl6ac/BxYj9L3/iysoD+K2\ndogkIpb0rTkBIOqA75GjcFQUYU3rvV1kvU+J6ccBLH8fK9b3Tbb/jCzz7umGHE+c\nwhKUBM+UEmWunjS61qAa791Ssj+yy+y3MxdHHoKCeO+G94qMwE8iRQI+6nNxRfHG\n5+4p3fqQp9d90d99rL1YTIGenbG24/234VrF+h0N90BB6UojAaOqW5wAp84BYpGb\nsLdLvTCxwr8mS91cKgLeqtu5365VjtNeK+JLrGysKKmIAbqQ0/tTp8gYqQuLWKcC\nX/fmqkb3YuqU3x/J+eW3z9uKkcZ7S7V9rY+x4xqRweP/OgbOylkT7qc9wTZNXBI=\n=ywuq\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 62fe7cea4a35df4931b2ecd03d6a623e43efb16e\nparent d331bdee18b911120689d7eb9b866d2766b01854\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1544733700 +0000\ncommitter GitHub <noreply@github.com> 1544733700 +0000\n\nEmbed Optimizations (#2121)\n\n* feat: refactored bridge\r\n\r\n- Cleaned up implementation of bridge\r\n- Removed unneeded babel-polyfill and webpack globals\r\n\r\n* fix: fixed up some static headers\r\n\r\n- bumped version\r\n\r\n* fix: moved intersection observer out of chunk\r\n\r\n* fix: fixed misplaced \"!\"\r\n"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/22d263c6d2211a663cbc1634b49093d5bb782221",
  "html_url": "https://github.com/coralproject/talk/commit/22d263c6d2211a663cbc1634b49093d5bb782221",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/22d263c6d2211a663cbc1634b49093d5bb782221/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d331bdee18b911120689d7eb9b866d2766b01854",
      "url": "https://api.github.com/repos/coralproject/talk/commits/d331bdee18b911120689d7eb9b866d2766b01854",
      "html_url": "https://github.com/coralproject/talk/commit/d331bdee18b911120689d7eb9b866d2766b01854"
    }
  ],
  "stats": {
    "total": 979,
    "additions": 525,
    "deletions": 454
  },
  "files": [
    {
      "sha": "264069adb5d57dc11b6fb1b9315c93b74aabdf86",
      "filename": "client/coral-embed/src/Bridge.js",
      "status": "added",
      "additions": 324,
      "deletions": 0,
      "changes": 324,
      "blob_url": "https://github.com/coralproject/talk/blob/22d263c6d2211a663cbc1634b49093d5bb782221/client/coral-embed/src/Bridge.js",
      "raw_url": "https://github.com/coralproject/talk/raw/22d263c6d2211a663cbc1634b49093d5bb782221/client/coral-embed/src/Bridge.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/client/coral-embed/src/Bridge.js?ref=22d263c6d2211a663cbc1634b49093d5bb782221",
      "patch": "@@ -0,0 +1,324 @@\n+import queryString from 'querystringify';\n+import URLSearchParams from '@ungap/url-search-params';\n+import pym from 'pym.js';\n+import EventEmitter from 'eventemitter2';\n+import { buildUrl } from 'coral-framework/utils/url';\n+import SnackBar from './SnackBar';\n+import onIntersect from './onIntersect';\n+import {\n+  createStorage,\n+  connectStorageToPym,\n+} from 'coral-framework/services/storage';\n+\n+// Rebuild the origin if it isn't defined. This is our poor-mans polyfill\n+// for the location APIs.\n+if (!window.location.origin) {\n+  window.location.origin = `${window.location.protocol}//${\n+    window.location.hostname\n+  }${window.location.port ? `:${window.location.port}` : ''}`;\n+}\n+\n+const NOTIFICATION_OFFSET = 200;\n+\n+// Ensure there is a trailing slash.\n+function ensureEndSlash(p) {\n+  return p.match(/\\/$/) ? p : `${p}/`;\n+}\n+\n+// Build the URL to load in the pym iframe.\n+function buildStreamIframeUrl(talkBaseUrl, query) {\n+  let url = talkBaseUrl + 'embed/stream?';\n+\n+  url += queryString.stringify(query);\n+\n+  return url;\n+}\n+\n+// detectAssetURL will try to grab the canonical url from the head, if it isn't\n+// available, source the url from the current one.\n+function detectAssetURL() {\n+  try {\n+    // Try to get the url from the canonical tag on the page.\n+    return document.querySelector('link[rel=\"canonical\"]').href;\n+  } catch (e) {\n+    window.console.warn(\n+      'This page does not include a canonical link tag. Talk has inferred this asset_url from the window object. Query params have been stripped, which may cause a single thread to be present across multiple pages.'\n+    );\n+\n+    return window.location.origin + window.location.pathname;\n+  }\n+}\n+\n+function buildQuery({ asset_id, asset_url }) {\n+  // Compose the query to send down to the Talk API so it knows what to load.\n+  const query = {};\n+\n+  // Parse the url parameters to extract some of the information.\n+  const search = new URLSearchParams(window.location.search);\n+\n+  // Pull the Comment ID out of the query string.\n+  const commentID = search.get('commentId') || search.get('commentID');\n+  if (commentID) {\n+    query.comment_id = commentID;\n+  }\n+\n+  // Insert the asset_id into the query.\n+  if (asset_id) {\n+    query.asset_id = asset_id;\n+  }\n+\n+  // If the asset_url is defined, use it, otherwise, detect it.\n+  if (asset_url) {\n+    query.asset_url = asset_url;\n+  } else {\n+    query.asset_url = detectAssetURL();\n+  }\n+\n+  return query;\n+}\n+\n+// Get dimensions of viewport.\n+function viewportDimensions() {\n+  let target = window;\n+  let prefix = 'inner';\n+  if (!('innerWidth' in window)) {\n+    prefix = 'client';\n+    target = document.documentElement || document.body;\n+  }\n+\n+  return {\n+    width: target[`${prefix}Width`],\n+    height: target[`${prefix}Height`],\n+  };\n+}\n+\n+export default class Bridge {\n+  constructor(\n+    element,\n+    {\n+      // Pull out the URLs used to setup Talk.\n+      talk: talkBaseUrl,\n+      talkStaticUrl = talkBaseUrl,\n+      // Default the following to null.\n+      events = null,\n+      snackBarStyles = null,\n+      onAuthChanged = null,\n+      // Determine if we're in lazy mode or not. By default, the build argument\n+      // will determine the lazy render status. This default is primarily used\n+      // when the embed code cannot be changed, but control of the Talk serving\n+      // domain is available.\n+      lazy = process.env.TALK_DEFAULT_LAZY_RENDER === 'TRUE',\n+      // Any additional options are extracted to be sent to the embed via the\n+      // pym bridge.\n+      ...opts\n+    }\n+  ) {\n+    this.pym = null;\n+    this.element = element;\n+    this.opts = opts;\n+    this.query = buildQuery(this.opts);\n+    this.emitter = new EventEmitter({ wildcard: true });\n+    this.snackBar = new SnackBar(snackBarStyles || {});\n+    this.onAuthChanged = onAuthChanged;\n+    this.talkBaseUrl = ensureEndSlash(talkBaseUrl);\n+    this.talkStaticUrl = ensureEndSlash(talkStaticUrl);\n+    this.lazy = lazy;\n+\n+    // Store queued operations in a queue that can be processed once the stream\n+    // is rendered.\n+    this.queued = [];\n+\n+    // Attach to the events emitted by the pym parent.\n+    if (events) {\n+      events(this.emitter);\n+    }\n+\n+    // Start the embed loading process.\n+    if (this.lazy) {\n+      // When the dom element containing the talk embed container is in view,\n+      // render the stream with force turned on so that it skips this portion.\n+      onIntersect(this.element, () => this.load());\n+    } else {\n+      // We aren't being lazy, load it now!\n+      this.load();\n+    }\n+  }\n+\n+  ensureRendered() {\n+    // Check to see if the pym bridge is created, and the embed is loaded.\n+    if (this.pym === null) {\n+      throw new Error('Stream Embed must be rendered first');\n+    }\n+  }\n+\n+  queueWhenRendered(callback) {\n+    // Check to see if the queue is alive, if it isn't, run the callback now,\n+    // otherwise, push the callback to be processed when the stream has loaded.\n+    if (this.queued !== null) {\n+      this.queued.push(callback);\n+    } else {\n+      callback();\n+    }\n+  }\n+\n+  setupPym() {\n+    const url = buildStreamIframeUrl(this.talkBaseUrl, this.query);\n+    this.pym = new pym.Parent(this.element.id, url, {\n+      title: this.opts.title,\n+      id: `${this.element.id}_iframe`,\n+      name: `${this.element.id}_iframe`,\n+    });\n+\n+    // NOTE: Workaround for iOS Safari which ignores `width` but respects `min-width` value.\n+    this.pym.el.firstChild.style.width = '1px';\n+    this.pym.el.firstChild.style.minWidth = '100%';\n+\n+    // Resize parent iframe height when child height changes\n+    let cachedHeight;\n+    this.pym.onMessage('height', height => {\n+      if (height !== cachedHeight) {\n+        this.pym.el.firstChild.style.height = `${height}px`;\n+        cachedHeight = height;\n+      }\n+    });\n+\n+    // Send the config back over the pym bridge if requested.\n+    this.pym.onMessage('getConfig', () => {\n+      this.pym.sendMessage('config', JSON.stringify(this.opts));\n+    });\n+\n+    // If the auth changes, and someone is listening for it, then re-emit it.\n+    if (this.onAuthChanged) {\n+      this.pym.onMessage('coral-auth-changed', message => {\n+        this.onAuthChanged(message ? JSON.parse(message) : null);\n+      });\n+    }\n+\n+    // Remove the permalink comment id from the search.\n+    this.pym.onMessage('coral-view-all-comments', () => {\n+      const query = queryString.parse(location.search);\n+\n+      // Remove the commentId/commentID url param.\n+      delete query.commentId;\n+      delete query.commentID;\n+\n+      // Rebuild the search field without the commentId in it.\n+      const search = queryString.stringify(query);\n+\n+      // Change the url.\n+      window.history.replaceState(\n+        {},\n+        document.title,\n+        buildUrl({ ...location, search })\n+      );\n+    });\n+\n+    // Remove the permalink comment id from the hash.\n+    this.pym.onMessage('coral-view-comment', id => {\n+      const search = queryString.stringify({\n+        ...queryString.parse(location.search),\n+        commentId: id,\n+      });\n+\n+      // Change the url to the permalink url.\n+      window.history.replaceState(\n+        {},\n+        document.title,\n+        buildUrl({ ...location, search })\n+      );\n+    });\n+\n+    // Helps child show notifications at the right scrollTop.\n+    this.pym.onMessage('getPosition', () => {\n+      const { height } = viewportDimensions();\n+      let position = height + document.body.scrollTop;\n+\n+      if (position > NOTIFICATION_OFFSET) {\n+        position = position - NOTIFICATION_OFFSET;\n+      }\n+\n+      this.pym.sendMessage('position', position);\n+    });\n+\n+    // When end-user clicks link in iframe, open it in parent context\n+    this.pym.onMessage('navigate', url => {\n+      // Open the new window, detach the opener, and focus on it.\n+      const w = window.open(url, '_blank');\n+      w.opener = null;\n+      w.focus();\n+    });\n+\n+    // Pass events from iframe to the event emitter.\n+    this.pym.onMessage('event', raw => {\n+      const { eventName, value } = JSON.parse(raw);\n+      this.emitter.emit(eventName, value);\n+    });\n+  }\n+\n+  /**\n+   * load will configure the pym parent if it hasn't already been, and setup the\n+   * snackBar. If there are any queued operations, it will run them first.\n+   */\n+  load() {\n+    if (this.pym !== null) {\n+      throw new Error('Stream Embed already rendered');\n+    }\n+\n+    // Setup Pym.\n+    this.setupPym();\n+\n+    // Attach the snackBar to the pym parent and to the body of the page.\n+    this.snackBar.attach(window.document.body, this.pym);\n+\n+    // If the user clicks outside the embed, then tell the embed.\n+    document.addEventListener('click', this.handleClick.bind(this), true);\n+\n+    // Listens to ${name}Storage requests on pym and relay it to\n+    // ${name}Storage.\n+    ['local', 'session'].forEach(name => {\n+      connectStorageToPym(\n+        createStorage(`${name}Storage`),\n+        this.pym,\n+        `${name}Storage`\n+      );\n+    });\n+\n+    // Process any queued operations.\n+    const queued = this.queued;\n+    this.queued = null;\n+    queued.forEach(callback => callback());\n+  }\n+\n+  handleClick() {\n+    this.pym.sendMessage('click');\n+  }\n+\n+  enablePluginsDebug() {\n+    this.pym.sendMessage('enablePluginsDebug');\n+  }\n+\n+  disablePluginsDebug() {\n+    this.pym.sendMessage('disablePluginsDebug');\n+  }\n+\n+  login(token) {\n+    this.pym.sendMessage('login', token);\n+  }\n+\n+  logout() {\n+    this.pym.sendMessage('logout');\n+  }\n+\n+  remove() {\n+    // Remove the event listeners.\n+    document.removeEventListener('click', this.handleClick.bind(this));\n+    this.emitter.removeAllListeners();\n+\n+    // Remove the snackbar.\n+    this.snackBar.remove();\n+\n+    // Remove the pym parent.\n+    this.pym.remove();\n+    this.pym = null;\n+  }\n+}"
    },
    {
      "sha": "67851ce4e04765a181f0ba1e270bb551f3249fa1",
      "filename": "client/coral-embed/src/SnackBar.js",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/coralproject/talk/blob/22d263c6d2211a663cbc1634b49093d5bb782221/client/coral-embed/src/SnackBar.js",
      "raw_url": "https://github.com/coralproject/talk/raw/22d263c6d2211a663cbc1634b49093d5bb782221/client/coral-embed/src/SnackBar.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/client/coral-embed/src/SnackBar.js?ref=22d263c6d2211a663cbc1634b49093d5bb782221",
      "previous_filename": "client/coral-embed/src/Snackbar.js"
    },
    {
      "sha": "efb44bc3bd149986892a295119ab95577aa17fcb",
      "filename": "client/coral-embed/src/Stream.js",
      "status": "removed",
      "additions": 0,
      "deletions": 259,
      "changes": 259,
      "blob_url": "https://github.com/coralproject/talk/blob/d331bdee18b911120689d7eb9b866d2766b01854/client/coral-embed/src/Stream.js",
      "raw_url": "https://github.com/coralproject/talk/raw/d331bdee18b911120689d7eb9b866d2766b01854/client/coral-embed/src/Stream.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/client/coral-embed/src/Stream.js?ref=d331bdee18b911120689d7eb9b866d2766b01854",
      "patch": "@@ -1,259 +0,0 @@\n-/* global __webpack_public_path__ */ // eslint-disable-line no-unused-vars\n-\n-import queryString from 'querystringify';\n-import pym from 'pym.js';\n-import EventEmitter from 'eventemitter2';\n-import { buildUrl } from 'coral-framework/utils/url';\n-import Snackbar from './Snackbar';\n-import onIntersect from './onIntersect';\n-import {\n-  createStorage,\n-  connectStorageToPym,\n-} from 'coral-framework/services/storage';\n-\n-const NOTIFICATION_OFFSET = 200;\n-\n-// Ensure there is a trailing slash.\n-function ensureEndSlash(p) {\n-  return p.match(/\\/$/) ? p : `${p}/`;\n-}\n-\n-// Build the URL to load in the pym iframe.\n-function buildStreamIframeUrl(talkBaseUrl, query) {\n-  let url = talkBaseUrl + 'embed/stream?';\n-\n-  url += queryString.stringify(query);\n-\n-  return url;\n-}\n-\n-// Get dimensions of viewport.\n-function viewportDimensions() {\n-  let e = window,\n-    a = 'inner';\n-  if (!('innerWidth' in window)) {\n-    a = 'client';\n-    e = document.documentElement || document.body;\n-  }\n-\n-  return {\n-    width: e[`${a}Width`],\n-    height: e[`${a}Height`],\n-  };\n-}\n-\n-export default class Stream {\n-  constructor(el, talkBaseUrl, query, config) {\n-    this.query = query;\n-\n-    // Extract the non-opts opts from the object.\n-    const {\n-      events = null,\n-      snackBarStyles = null,\n-      onAuthChanged = null,\n-      talkStaticUrl = talkBaseUrl,\n-      ...opts\n-    } = config;\n-\n-    this.onAuthChanged = onAuthChanged;\n-    this.el = el;\n-    this.talkBaseUrl = ensureEndSlash(talkBaseUrl);\n-    this.talkStaticUrl = ensureEndSlash(talkStaticUrl);\n-    this.opts = opts;\n-    this.snackBar = new Snackbar(snackBarStyles || {});\n-    this.emitter = new EventEmitter({ wildcard: true });\n-\n-    // Because we're loading chunks dynamically below, we need to point to the\n-    // static URL.\n-    //\n-    // The __webpack_public_path__ can be referenced:\n-    // https://webpack.js.org/configuration/output/#output-publicpath\n-    //\n-    __webpack_public_path__ = this.talkStaticUrl + 'static/';\n-\n-    // Attach to the events emitted by the pym parent.\n-    if (events) {\n-      events(this.emitter);\n-    }\n-    if (config.lazy || process.env.TALK_DEFAULT_LAZY_RENDER === 'TRUE') {\n-      const renderOnIntersect = () => onIntersect(this.el, () => this.render());\n-      if (!window.IntersectionObserver) {\n-        // Include a polyfill for the intersection observer.\n-        import(/* webpackChunkName: \"intersection-observer\" */ 'intersection-observer')\n-          .then(() => {\n-            // Polyfill applied.\n-            renderOnIntersect();\n-          })\n-          .catch(e => {\n-            console.error(e);\n-            // Loading polyfill failed, just render it directly.\n-            this.render();\n-          });\n-      } else {\n-        // No need for polyfill.\n-        renderOnIntersect();\n-      }\n-    } else {\n-      this.render();\n-    }\n-  }\n-\n-  assertRendered() {\n-    if (!this.pym) {\n-      throw new Error('Stream Embed must be rendered first');\n-    }\n-  }\n-\n-  isRendered() {\n-    return !!this.pym;\n-  }\n-\n-  render() {\n-    if (this.pym) {\n-      throw new Error('Stream Embed already rendered');\n-    }\n-    this.pym = new pym.Parent(\n-      this.el.id,\n-      buildStreamIframeUrl(this.talkBaseUrl, this.query),\n-      {\n-        title: this.opts.title,\n-        id: `${this.el.id}_iframe`,\n-        name: `${this.el.id}_iframe`,\n-      }\n-    );\n-\n-    // Workaround: IOS Safari ignores `width` but respects `min-width` value.\n-    this.pym.el.firstChild.style.width = '1px';\n-    this.pym.el.firstChild.style.minWidth = '100%';\n-\n-    // Resize parent iframe height when child height changes\n-    let cachedHeight;\n-    this.pym.onMessage('height', height => {\n-      if (height !== cachedHeight) {\n-        this.pym.el.firstChild.style.height = `${height}px`;\n-        cachedHeight = height;\n-      }\n-    });\n-\n-    this.pym.onMessage('getConfig', () => {\n-      this.pym.sendMessage('config', JSON.stringify(this.opts));\n-    });\n-\n-    // If the auth changes, and someone is listening for it, then re-emit it.\n-    if (this.onAuthChanged) {\n-      this.pym.onMessage('coral-auth-changed', message => {\n-        this.onAuthChanged(message ? JSON.parse(message) : null);\n-      });\n-    }\n-\n-    // Attach the snackbar to the pym parent and to the body of the page.\n-    this.snackBar.attach(window.document.body, this.pym);\n-\n-    // Remove the permalink comment id from the hash.\n-    this.pym.onMessage('coral-view-all-comments', () => {\n-      const query = queryString.parse(location.search);\n-\n-      // Remove the commentId url param.\n-      delete query.commentId;\n-\n-      const search = queryString.stringify(query);\n-\n-      const url = buildUrl({ ...location, search });\n-\n-      // Change the url.\n-      window.history.replaceState({}, document.title, url);\n-    });\n-\n-    // Remove the permalink comment id from the hash.\n-    this.pym.onMessage('coral-view-comment', id => {\n-      const search = queryString.stringify({\n-        ...queryString.parse(location.search),\n-        commentId: id,\n-      });\n-\n-      // Remove the commentId url param.\n-      const url = buildUrl({ ...location, search });\n-\n-      // Change the url.\n-      window.history.replaceState({}, document.title, url);\n-    });\n-\n-    // Helps child show notifications at the right scrollTop.\n-    this.pym.onMessage('getPosition', () => {\n-      const { height } = viewportDimensions();\n-      let position = height + document.body.scrollTop;\n-\n-      if (position > NOTIFICATION_OFFSET) {\n-        position = position - NOTIFICATION_OFFSET;\n-      }\n-\n-      this.pym.sendMessage('position', position);\n-    });\n-\n-    // When end-user clicks link in iframe, open it in parent context\n-    this.pym.onMessage('navigate', url => {\n-      window.open(url, '_blank').focus();\n-    });\n-\n-    // Pass events from iframe to the event emitter.\n-    this.pym.onMessage('event', raw => {\n-      const { eventName, value } = JSON.parse(raw);\n-      this.emitter.emit(eventName, value);\n-    });\n-\n-    // If the user clicks outside the embed, then tell the embed.\n-    document.addEventListener('click', this.handleClick.bind(this), true);\n-\n-    // Listens to local storage requests on pym and relay it to local storage.\n-    connectStorageToPym(\n-      createStorage('localStorage'),\n-      this.pym,\n-      'localStorage'\n-    );\n-\n-    // Listens to session storage requests on pym and relay it to session storage.\n-    connectStorageToPym(\n-      createStorage('sessionStorage'),\n-      this.pym,\n-      'sessionStorage'\n-    );\n-  }\n-\n-  enablePluginsDebug() {\n-    this.assertRendered();\n-    this.pym.sendMessage('enablePluginsDebug');\n-  }\n-\n-  disablePluginsDebug() {\n-    this.assertRendered();\n-    this.pym.sendMessage('disablePluginsDebug');\n-  }\n-\n-  login(token) {\n-    this.assertRendered();\n-    this.pym.sendMessage('login', token);\n-  }\n-\n-  logout() {\n-    this.assertRendered();\n-    this.pym.sendMessage('logout');\n-  }\n-\n-  remove() {\n-    this.assertRendered();\n-    // Remove the event listeners.\n-    document.removeEventListener('click', this.handleClick.bind(this));\n-    this.emitter.removeAllListeners();\n-\n-    // Remove the snackbar.\n-    this.snackBar.remove();\n-\n-    // Remove the pym parent.\n-    this.pym.remove();\n-  }\n-\n-  handleClick() {\n-    this.assertRendered();\n-    this.pym.sendMessage('click');\n-  }\n-}"
    },
    {
      "sha": "1e54dd155dbd8e6f41668bfa196315c04f37a0d9",
      "filename": "client/coral-embed/src/StreamInterface.js",
      "status": "removed",
      "additions": 0,
      "deletions": 33,
      "changes": 33,
      "blob_url": "https://github.com/coralproject/talk/blob/d331bdee18b911120689d7eb9b866d2766b01854/client/coral-embed/src/StreamInterface.js",
      "raw_url": "https://github.com/coralproject/talk/raw/d331bdee18b911120689d7eb9b866d2766b01854/client/coral-embed/src/StreamInterface.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/client/coral-embed/src/StreamInterface.js?ref=d331bdee18b911120689d7eb9b866d2766b01854",
      "patch": "@@ -1,33 +0,0 @@\n-export default class StreamInterface {\n-  constructor(stream) {\n-    this._stream = stream;\n-  }\n-\n-  on(eventName, callback) {\n-    return this._stream.emitter.on(eventName, callback);\n-  }\n-\n-  off(eventName, callback) {\n-    return this._stream.emitter.off(eventName, callback);\n-  }\n-\n-  login(token) {\n-    return this._stream.login(token);\n-  }\n-\n-  logout() {\n-    return this._stream.logout();\n-  }\n-\n-  remove() {\n-    return this._stream.remove();\n-  }\n-\n-  enablePluginsDebug() {\n-    return this._stream.enablePluginsDebug();\n-  }\n-\n-  disablePluginsDebug() {\n-    return this._stream.disablePluginsDebug();\n-  }\n-}"
    },
    {
      "sha": "e64868e157cf9dd9cf1bab1a134650bf4a16fb9a",
      "filename": "client/coral-embed/src/index.js",
      "status": "modified",
      "additions": 55,
      "deletions": 91,
      "changes": 146,
      "blob_url": "https://github.com/coralproject/talk/blob/22d263c6d2211a663cbc1634b49093d5bb782221/client/coral-embed/src/index.js",
      "raw_url": "https://github.com/coralproject/talk/raw/22d263c6d2211a663cbc1634b49093d5bb782221/client/coral-embed/src/index.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/client/coral-embed/src/index.js?ref=22d263c6d2211a663cbc1634b49093d5bb782221",
      "patch": "@@ -1,107 +1,71 @@\n-import URLSearchParams from 'url-search-params';\n-import Stream from './Stream';\n-import StreamInterface from './StreamInterface';\n+// Polyfill IntersectionObserver always, the alternative is that we have to also\n+// polyfill for Promise, which itself adds 1KB gziped, which means that the\n+// 4KB that the intersection observer really doesn't take up that much in terms\n+// of size.\n+import 'intersection-observer';\n \n-// Rebuild the origin if it isn't defined. This is our poor-mans polyfill\n-// for the location API's.\n-if (!window.location.origin) {\n-  window.location.origin = `${window.location.protocol}//${\n-    window.location.hostname\n-  }${window.location.port ? `:${window.location.port}` : ''}`;\n-}\n+import Bridge from './Bridge';\n+import wrapBridge from './wrapBridge';\n \n-// parses the Asset URL from the config variable\n-function parseAssetURL() {\n-  try {\n-    // Try to get the url from the canonical tag on the page.\n-    return document.querySelector('link[rel=\"canonical\"]').href;\n-  } catch (e) {\n-    window.console.warn(\n-      'This page does not include a canonical link tag. Talk has inferred this asset_url from the window object. Query params have been stripped, which may cause a single thread to be present across multiple pages.'\n+/**\n+ * validateElement will throw an error when the element is not configured\n+ * correctly or is not an HTMLElement at all.\n+ *\n+ * @param {HTMLElement} element the HTMLElement where the stream will be rendered\n+ */\n+function validateElement(element) {\n+  if (!element) {\n+    throw new Error(\n+      'Please provide Coral.Talk.render() the HTMLElement you want to render Talk in.'\n     );\n+  }\n+\n+  if (typeof element !== 'object') {\n+    throw new Error(\n+      `Coral.Talk.render() expected HTMLElement but got ${element} (${typeof element})`\n+    );\n+  }\n \n-    return window.location.origin + window.location.pathname;\n+  // Ensure element has an id, as pym can't directly accept the HTMLElement.\n+  if (!element.id) {\n+    element.id = `_${Math.random()}`;\n+  }\n+}\n+\n+/**\n+ * validateConfig is the configuration validation tool.\n+ *\n+ * @param {Object} config the configuration that will be used to setup Talk.\n+ */\n+function validateConfig(config) {\n+  if (!config || typeof config !== 'object' || !config.talk) {\n+    throw new Error(\n+      'Coral.Talk.render() expected configuration with at least opts.talk as the Talk Base URL, none found'\n+    );\n   }\n }\n \n-export class Talk {\n+export const Talk = {\n   /**\n    * Render a Talk stream\n    * @param {HTMLElement} element - Element to render the stream in\n    * @param {Object} config - Configuration options for talk\n-   * @param {String} config.talk - Talk base URL\n-   * @param {String} [config.title] - Title of Stream (rendered in iframe)\n-   * @param {String} [config.asset_url] - Asset URL\n-   * @param {String} [config.asset_id] - Asset ID\n+   * @param {String} config.talk - URL to the Talk installation\n+   * @param {String} [config.asset_id] - (optional) ID for the Asset\n+   * @param {String} [config.asset_url] - (optional) URL where the Asset is located\n    * @param {String} [config.auth_token] - (optional) A jwt representing the session\n-   * @param {String} [config.lazy] - (optional) If set the stream will only render lazily.\n+   * @param {String} [config.lazy] - (optional) If set the stream will only render lazily\n+   * @param {String} [config.talkStaticUrl] - (optional) Static URL used to serve Talk\n    * @return {Object}\n-   *\n-   * Example:\n-   * ```\n-   *   const embed = Talk.render(document.getElementById('talkStreamEmbed'), config);\n-   *\n-   *   // trigger a login with optional token.\n-   *   embed.login(token);\n-   *\n-   *   // trigger a logout.\n-   *   embed.logout();\n-   *\n-   *   // listen to events (in this case all events).\n-   *   embed.on('**', function(value) {\n-   *     console.log(this.event, value);\n-   *   });\n-   * ```\n    */\n-  static render(element, config) {\n-    if (!element) {\n-      throw new Error(\n-        'Please provide Coral.Talk.render() the HTMLElement you want to render Talk in.'\n-      );\n-    }\n-    if (typeof element !== 'object') {\n-      throw new Error(\n-        `Coral.Talk.render() expected HTMLElement but got ${element} (${typeof element})`\n-      );\n-    }\n-    if (!config || typeof config !== 'object' || !config.talk) {\n-      throw new Error(\n-        'Coral.Talk.render() expected configuration with at least opts.talk as the Talk Base URL, none found'\n-      );\n-    }\n+  render: (element, config) => {\n+    // Validate the element.\n+    validateElement(element);\n \n-    // Ensure el has an id, as pym can't directly accept the HTMLElement.\n-    if (!element.id) {\n-      element.id = `_${Math.random()}`;\n-    }\n+    // Validate the configuration.\n+    validateConfig(config);\n \n-    // Compose the query to send down to the Talk API so it knows what to load.\n-    const query = {};\n-\n-    // Parse the url parameters to extract some of the information.\n-    const search = new URLSearchParams(window.location.search);\n-\n-    // Pull the commentID out from the query params.\n-    const commentID = search.get('commentId') || search.get('commentID');\n-    if (commentID) {\n-      query.comment_id = commentID;\n-    }\n-\n-    // Extract the asset id from the options.\n-    if (config.asset_id) {\n-      query.asset_id = config.asset_id;\n-    }\n-\n-    // Parse the Asset URL.\n-    query.asset_url = config.asset_url;\n-    if (!query.asset_url) {\n-      query.asset_url = parseAssetURL();\n-    }\n-\n-    // Create the new Stream.\n-    const stream = new Stream(element, config.talk, query, config);\n-\n-    // Return the public interface for the stream.\n-    return new StreamInterface(stream);\n-  }\n-}\n+    // Create the new Bridge, and wrap it up.\n+    return wrapBridge(new Bridge(element, config));\n+  },\n+};"
    },
    {
      "sha": "50716d62ac6b5981d4e696b30aab13222847ff32",
      "filename": "client/coral-embed/src/onIntersect.js",
      "status": "modified",
      "additions": 20,
      "deletions": 10,
      "changes": 30,
      "blob_url": "https://github.com/coralproject/talk/blob/22d263c6d2211a663cbc1634b49093d5bb782221/client/coral-embed/src/onIntersect.js",
      "raw_url": "https://github.com/coralproject/talk/raw/22d263c6d2211a663cbc1634b49093d5bb782221/client/coral-embed/src/onIntersect.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/client/coral-embed/src/onIntersect.js?ref=22d263c6d2211a663cbc1634b49093d5bb782221",
      "patch": "@@ -1,20 +1,30 @@\n export default function onIntersect(el, callback) {\n+  // Ensure that the intersection observer is available.\n   if (!IntersectionObserver) {\n     // tslint:disable-next-line:no-console\n-    console.warn('IntersectionObserver not available');\n+    window.console.warn('IntersectionObserver not available, rendering now');\n     callback();\n     return;\n   }\n-  const options = {\n-    rootMargin: '100px',\n-    threshold: 1.0,\n-  };\n \n-  const observer = new IntersectionObserver(entries => {\n-    if (entries[0].isIntersecting) {\n-      observer.disconnect();\n-      callback();\n+  // Create the Intersection Observer that will wait till the embed is within\n+  // view and will then call the callback.\n+  const observer = new IntersectionObserver(\n+    entries => {\n+      if (entries[0].isIntersecting) {\n+        // Stop receiving intersection events.\n+        observer.disconnect();\n+\n+        // Fire the callback.\n+        callback();\n+      }\n+    },\n+    {\n+      rootMargin: '100px',\n+      threshold: 1.0,\n     }\n-  }, options);\n+  );\n+\n+  // Start observing the element for visibility.\n   observer.observe(el);\n }"
    },
    {
      "sha": "9ef8a61cecd23228113f0a2d06dc835e7922a9c8",
      "filename": "client/coral-embed/src/wrapBridge.js",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/coralproject/talk/blob/22d263c6d2211a663cbc1634b49093d5bb782221/client/coral-embed/src/wrapBridge.js",
      "raw_url": "https://github.com/coralproject/talk/raw/22d263c6d2211a663cbc1634b49093d5bb782221/client/coral-embed/src/wrapBridge.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/client/coral-embed/src/wrapBridge.js?ref=22d263c6d2211a663cbc1634b49093d5bb782221",
      "patch": "@@ -0,0 +1,31 @@\n+export default bridge => {\n+  // whenRendered will call the callback when the stream has rendered (or now if\n+  // the stream is already rendered).\n+  const whenRendered = callback => bridge.queueWhenRendered(callback);\n+\n+  // onlyWhenRendered will guard the callback unless the stream is rendered.\n+  const onlyWhenRendered = callback => {\n+    bridge.ensureRendered();\n+    callback();\n+  };\n+\n+  // Return the limited stream interface.\n+  return {\n+    // Directly map the on/off from the event emitter to the stream.\n+    on: (eventName, callback) => bridge.emitter.on(eventName, callback),\n+    off: (eventName, callback) => bridge.emitter.off(eventName, callback),\n+\n+    // Queue up the login operation until the stream has been rendered.\n+    login: token => whenRendered(() => bridge.login(token)),\n+\n+    // Queue up the logout operation until the stream has been rendered.\n+    logout: () => whenRendered(() => bridge.logout()),\n+\n+    // Remove the stream if it's already been rendered.\n+    remove: () => onlyWhenRendered(() => bridge.remove()),\n+\n+    // Queue up the plugin config until the embed has rendered.\n+    enablePluginsDebug: () => whenRendered(() => bridge.enablePluginsDebug()),\n+    disablePluginsDebug: () => whenRendered(() => bridge.disablePluginsDebug()),\n+  };\n+};"
    },
    {
      "sha": "007aafb46886c6f30a50342f780ec93ea088ec2c",
      "filename": "config.js",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/22d263c6d2211a663cbc1634b49093d5bb782221/config.js",
      "raw_url": "https://github.com/coralproject/talk/raw/22d263c6d2211a663cbc1634b49093d5bb782221/config.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/config.js?ref=22d263c6d2211a663cbc1634b49093d5bb782221",
      "patch": "@@ -224,6 +224,14 @@ const CONFIG = {\n   CACHE_EXPIRY_COMMENT_COUNT:\n     process.env.TALK_CACHE_EXPIRY_COMMENT_COUNT || '1hr',\n \n+  // EMBED_EXPIRY_TIME is the time that the embed will be cacheable for, sent as\n+  // the max-age= directive on the Cache-Control header.\n+  EMBED_EXPIRY_TIME: ms(process.env.TALK_EMBED_EXPIRY || '24hr'),\n+\n+  // EMBED_EXPIRY_TIME is the time that the rest of the static files will be\n+  // cacheable for, sent as the max-age= directive on the Cache-Control header.\n+  STATIC_EXPIRY_TIME: ms(process.env.TALK_STATIC_EXPIRY || '1w'),\n+\n   //------------------------------------------------------------------------------\n   // Recaptcha configuration\n   //------------------------------------------------------------------------------"
    },
    {
      "sha": "7bd5b7908660ec7e719c63213ce0fcea74fd64dd",
      "filename": "middleware/staticFiles.js",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/coralproject/talk/blob/22d263c6d2211a663cbc1634b49093d5bb782221/middleware/staticFiles.js",
      "raw_url": "https://github.com/coralproject/talk/raw/22d263c6d2211a663cbc1634b49093d5bb782221/middleware/staticFiles.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/middleware/staticFiles.js?ref=22d263c6d2211a663cbc1634b49093d5bb782221",
      "patch": "@@ -0,0 +1,44 @@\n+const express = require('express');\n+const path = require('path');\n+const staticServer = require('express-static-gzip');\n+const { merge } = require('lodash');\n+const { EMBED_EXPIRY_TIME, STATIC_EXPIRY_TIME } = require('../config');\n+\n+// EMBED_CACHE_CONTROL_HEADER is the header sent when the file is embed.js.\n+const EMBED_CACHE_CONTROL_HEADER = [\n+  'public',\n+  `max-age=${Math.floor(EMBED_EXPIRY_TIME / 1000)}`,\n+  'immutable',\n+].join(', ');\n+\n+// Define the options to be applied to all static files, the embed itself has a\n+// separate override.\n+const defaultOpts = {\n+  maxAge: STATIC_EXPIRY_TIME,\n+  immutable: true,\n+  setHeaders: (res, path) => {\n+    if (path.includes('/dist/embed.js')) {\n+      // embed.js has a different max-age then the rest of the static files.\n+      res.setHeader('Cache-Control', EMBED_CACHE_CONTROL_HEADER);\n+    }\n+  },\n+};\n+\n+// Setup the configuration for the compression options on how to serve files.\n+const compressionOpts = {\n+  indexFromEmptyFile: false,\n+  enableBrotli: true,\n+  customCompressions: [{ encodingName: 'deflate', fileExtension: 'zz' }],\n+};\n+\n+// Serve the directories under ../dist.\n+const dist = path.resolve(path.join(__dirname, '../dist'));\n+\n+/**\n+ * middleware in production will serve compressed files if available, otherwise\n+ * it will use express's static middleware.\n+ */\n+module.exports =\n+  process.env.NODE_ENV === 'production'\n+    ? staticServer(dist, merge(compressionOpts, defaultOpts))\n+    : express.static(dist, defaultOpts);"
    },
    {
      "sha": "b1f4b5a5677d85345b35e212b2cddfd59ef19d20",
      "filename": "package.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/22d263c6d2211a663cbc1634b49093d5bb782221/package.json",
      "raw_url": "https://github.com/coralproject/talk/raw/22d263c6d2211a663cbc1634b49093d5bb782221/package.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package.json?ref=22d263c6d2211a663cbc1634b49093d5bb782221",
      "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"talk\",\n-  \"version\": \"4.6.9\",\n+  \"version\": \"4.6.10\",\n   \"description\": \"A better commenting experience from Mozilla, The New York Times, and the Washington Post. https://coralproject.net\",\n   \"main\": \"app.js\",\n   \"private\": true,\n@@ -58,6 +58,7 @@\n   \"dependencies\": {\n     \"@coralproject/gql-merge\": \"^0.1.0\",\n     \"@coralproject/graphql-anywhere-optimized\": \"^0.1.0\",\n+    \"@ungap/url-search-params\": \"^0.1.2\",\n     \"apollo-client\": \"^1.9.1\",\n     \"apollo-engine\": \"^0.8.1\",\n     \"apollo-server-express\": \"^1.2.0\",\n@@ -211,7 +212,6 @@\n     \"url-join\": \"^2.0.2\",\n     \"url-loader\": \"^0.6.0\",\n     \"url-parse\": \"^1.4.3\",\n-    \"url-search-params\": \"^0.9.0\",\n     \"uuid\": \"^3.1.0\",\n     \"webpack\": \"^3.10.0\",\n     \"webpack-manifest-plugin\": \"^2.0.0-rc.2\","
    },
    {
      "sha": "f08b94f536e2296307de0f8daf397dfaf6aa23bd",
      "filename": "routes/index.js",
      "status": "modified",
      "additions": 9,
      "deletions": 41,
      "changes": 50,
      "blob_url": "https://github.com/coralproject/talk/blob/22d263c6d2211a663cbc1634b49093d5bb782221/routes/index.js",
      "raw_url": "https://github.com/coralproject/talk/raw/22d263c6d2211a663cbc1634b49093d5bb782221/routes/index.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/routes/index.js?ref=22d263c6d2211a663cbc1634b49093d5bb782221",
      "patch": "@@ -10,7 +10,7 @@ const compression = require('compression');\n const plugins = require('../services/plugins');\n const staticTemplate = require('../middleware/staticTemplate');\n const nonce = require('../middleware/nonce');\n-const staticServer = require('express-static-gzip');\n+const staticFiles = require('../middleware/staticFiles');\n const { DISABLE_STATIC_SERVER } = require('../config');\n const { passport } = require('../services/passport');\n const { MOUNT_PATH } = require('../url');\n@@ -32,6 +32,8 @@ if (!DISABLE_STATIC_SERVER) {\n \n   /**\n    * Redirect old embed calls.\n+   *\n+   * TODO: (wyattjoh) remove this on the next minor release\n    */\n   const oldEmbed = url.resolve(MOUNT_PATH, 'embed.js');\n   const newEmbed = url.resolve(MOUNT_PATH, 'static/embed.js');\n@@ -43,49 +45,15 @@ if (!DISABLE_STATIC_SERVER) {\n   });\n \n   /**\n-   * setHeaders adds new headers related to caching to the static files that are\n-   * served.\n-   *\n-   * @param res the response that can be used to set headers on\n-   * @param path the path on the filesystem where the files are being served from\n-   */\n-  const setHeaders = (res, path) => {\n-    if (path.endsWith('embed.js')) {\n-      // The embed.js file itself should not be cached for a long duration of\n-      // time, as it may change based on the deploy.\n-      res.setHeader('Cache-Control', 'public, max-age=3600');\n-    } else {\n-      // All static files besides the embed.js file contain hashes, we should\n-      // ensure that any other file is cached for a long duration of time. This\n-      // is cached for 1 week.\n-      res.setHeader('Cache-Control', 'public, max-age=604800, immutable');\n-    }\n-  };\n-\n-  /**\n-   * Serve the directories under dist.\n+   * Setup static file serving.\n    */\n-  const dist = path.resolve(path.join(__dirname, '../dist'));\n-  if (process.env.NODE_ENV === 'production') {\n-    router.use(\n-      '/static',\n-      staticServer(dist, {\n-        indexFromEmptyFile: false,\n-        enableBrotli: true,\n-        customCompressions: [\n-          {\n-            encodingName: 'deflate',\n-            fileExtension: 'zz',\n-          },\n-        ],\n-        setHeaders,\n-      })\n-    );\n-  } else {\n-    router.use('/static', express.static(dist, { setHeaders }));\n-  }\n+  router.use('/static', staticFiles);\n }\n \n+//==============================================================================\n+// Shared Middleware\n+//==============================================================================\n+\n // Add the i18n middleware to all routes.\n router.use(i18n);\n "
    },
    {
      "sha": "e23aa1e2a4ffc118de0562cad616a7b12d26b231",
      "filename": "webpack.config.js",
      "status": "modified",
      "additions": 27,
      "deletions": 13,
      "changes": 40,
      "blob_url": "https://github.com/coralproject/talk/blob/22d263c6d2211a663cbc1634b49093d5bb782221/webpack.config.js",
      "raw_url": "https://github.com/coralproject/talk/raw/22d263c6d2211a663cbc1634b49093d5bb782221/webpack.config.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/webpack.config.js?ref=22d263c6d2211a663cbc1634b49093d5bb782221",
      "patch": "@@ -310,19 +310,32 @@ const applyConfig = (entries, root = {}) =>\n     config,\n     {\n       entry: entries.reduce(\n-        (entry, { name, path: modulePath, disablePolyfill = false }) => {\n-          const entries = [\n-            path.join(\n-              __dirname,\n-              'client/coral-framework/helpers/webpackGlobals'\n-            ),\n-          ];\n-          if (disablePolyfill) {\n-            entries.push(modulePath);\n-          } else {\n-            entries.unshift('babel-polyfill');\n-            entries.push(modulePath);\n+        (\n+          entry,\n+          {\n+            name,\n+            path: modulePath,\n+            disablePolyfill = false,\n+            disableWebpackGlobals = false,\n           }\n+        ) => {\n+          // Create all the entries to be added to the final build target.\n+          const entries = [];\n+\n+          if (!disablePolyfill) {\n+            entries.push('babel-polyfill');\n+          }\n+\n+          if (!disableWebpackGlobals) {\n+            entries.push(\n+              path.join(\n+                __dirname,\n+                'client/coral-framework/helpers/webpackGlobals'\n+              )\n+            );\n+          }\n+\n+          entries.push(modulePath);\n \n           entry[name] = entries;\n \n@@ -350,7 +363,8 @@ module.exports = [\n       {\n         name: 'embed',\n         path: path.join(__dirname, 'client/coral-embed/src/index'),\n-        disablePolyfill: process.env.TALK_DISABLE_EMBED_POLYFILL === 'TRUE',\n+        disablePolyfill: true,\n+        disableWebpackGlobals: true,\n       },\n     ],\n     {"
    },
    {
      "sha": "8d904c9f7dbff46ab40ed249653b45a8c034f555",
      "filename": "yarn.lock",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/22d263c6d2211a663cbc1634b49093d5bb782221/yarn.lock",
      "raw_url": "https://github.com/coralproject/talk/raw/22d263c6d2211a663cbc1634b49093d5bb782221/yarn.lock",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/yarn.lock?ref=22d263c6d2211a663cbc1634b49093d5bb782221",
      "patch": "@@ -221,6 +221,11 @@\n   dependencies:\n     \"@types/node\" \"*\"\n \n+\"@ungap/url-search-params@^0.1.2\":\n+  version \"0.1.2\"\n+  resolved \"https://registry.yarnpkg.com/@ungap/url-search-params/-/url-search-params-0.1.2.tgz#8ba8c0527543fe675d1c29ae0a2daca842e8ee4f\"\n+  integrity sha512-WVk5+lJ+AoNLh2sIDMhnEAgLsVQuI067hWLJCzirErH1GYiy1gs09q4+XZxYWSvdAsslKsaO4q1iXXMx2c72dA==\n+\n JSONStream@^1.0.7:\n   version \"1.3.3\"\n   resolved \"https://registry.yarnpkg.com/JSONStream/-/JSONStream-1.3.3.tgz#27b4b8fbbfeab4e71bcf551e7f27be8d952239bf\"\n@@ -13362,11 +13367,6 @@ url-regex@~4.1.1:\n     ip-regex \"^1.0.1\"\n     tlds \"^1.187.0\"\n \n-url-search-params@^0.9.0:\n-  version \"0.9.0\"\n-  resolved \"https://registry.yarnpkg.com/url-search-params/-/url-search-params-0.9.0.tgz#e71d7764a6503533cbfe9771b2963cb61ea1c225\"\n-  integrity sha1-5x13ZKZQNTPL/pdxspY8th6hwiU=\n-\n url@^0.11.0:\n   version \"0.11.0\"\n   resolved \"https://registry.yarnpkg.com/url/-/url-0.11.0.tgz#3838e97cfc60521eb73c525a8e55bfdd9e2e28f1\""
    }
  ]
}
