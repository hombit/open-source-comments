{
  "sha": "e5afa2fb745f65bec7fa8262bb742281f97606b3",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmU1YWZhMmZiNzQ1ZjY1YmVjN2ZhODI2MmJiNzQyMjgxZjk3NjA2YjM=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2018-12-19T07:39:45Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2018-12-19T07:39:45Z"
    },
    "message": "add check for manual RO https://github.com/umputun/remark/issues/230#issuecomment-448492041",
    "tree": {
      "sha": "a761fe11618e1b913da54e40ed4e5d011b817d48",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/a761fe11618e1b913da54e40ed4e5d011b817d48"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/e5afa2fb745f65bec7fa8262bb742281f97606b3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/e5afa2fb745f65bec7fa8262bb742281f97606b3",
  "html_url": "https://github.com/umputun/remark/commit/e5afa2fb745f65bec7fa8262bb742281f97606b3",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/e5afa2fb745f65bec7fa8262bb742281f97606b3/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "908eb9b63124a6684f276e7930d8bc6783b861bf",
      "url": "https://api.github.com/repos/umputun/remark/commits/908eb9b63124a6684f276e7930d8bc6783b861bf",
      "html_url": "https://github.com/umputun/remark/commit/908eb9b63124a6684f276e7930d8bc6783b861bf"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 30,
    "deletions": 4
  },
  "files": [
    {
      "sha": "5a45573db9d7cff4e03eb7c4e12aaf2ff58a3871",
      "filename": "backend/app/rest/api/admin_test.go",
      "status": "modified",
      "additions": 26,
      "deletions": 1,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark/blob/e5afa2fb745f65bec7fa8262bb742281f97606b3/backend/app/rest/api/admin_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/e5afa2fb745f65bec7fa8262bb742281f97606b3/backend/app/rest/api/admin_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/admin_test.go?ref=e5afa2fb745f65bec7fa8262bb742281f97606b3",
      "patch": "@@ -1,6 +1,7 @@\n package api\n \n import (\n+\t\"bytes\"\n \t\"compress/gzip\"\n \t\"encoding/json\"\n \t\"fmt\"\n@@ -11,7 +12,7 @@ import (\n \t\"testing\"\n \t\"time\"\n \n-\t\"github.com/dgrijalva/jwt-go\"\n+\tjwt \"github.com/dgrijalva/jwt-go\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n \n@@ -304,6 +305,18 @@ func TestAdmin_ReadOnly(t *testing.T) {\n \tassert.Nil(t, err)\n \tassert.True(t, info.ReadOnly)\n \n+\t// try to write comment\n+\tc := store.Comment{Text: \"test test #2\", ParentID: \"p1\",\n+\t\tLocator: store.Locator{SiteID: \"radio-t\", URL: \"https://radio-t.com/blah\"}}\n+\tb, err := json.Marshal(c)\n+\tassert.Nil(t, err, \"can't marshal comment %+v\", c)\n+\treq, err = http.NewRequest(\"POST\", ts.URL+\"/api/v1/comment\", bytes.NewBuffer(b))\n+\tassert.Nil(t, err)\n+\treq.SetBasicAuth(\"dev\", \"password\")\n+\tresp, err = client.Do(req)\n+\tassert.Nil(t, err)\n+\tassert.Equal(t, http.StatusForbidden, resp.StatusCode)\n+\n \t// reset post's read-only\n \treq, err = http.NewRequest(http.MethodPut,\n \t\tfmt.Sprintf(\"%s/api/v1/admin/readonly?site=radio-t&url=https://radio-t.com/blah&ro=0\", ts.URL), nil)\n@@ -315,6 +328,18 @@ func TestAdmin_ReadOnly(t *testing.T) {\n \tinfo, err = srv.DataService.Info(store.Locator{SiteID: \"radio-t\", URL: \"https://radio-t.com/blah\"}, 0)\n \tassert.Nil(t, err)\n \tassert.False(t, info.ReadOnly)\n+\n+\t// try to write comment\n+\tc = store.Comment{Text: \"test test #2\", ParentID: \"p1\",\n+\t\tLocator: store.Locator{SiteID: \"radio-t\", URL: \"https://radio-t.com/blah\"}}\n+\tb, err = json.Marshal(c)\n+\tassert.Nil(t, err, \"can't marshal comment %+v\", c)\n+\treq, err = http.NewRequest(\"POST\", ts.URL+\"/api/v1/comment\", bytes.NewBuffer(b))\n+\tassert.Nil(t, err)\n+\treq.SetBasicAuth(\"dev\", \"password\")\n+\tresp, err = client.Do(req)\n+\tassert.Nil(t, err)\n+\tassert.Equal(t, http.StatusCreated, resp.StatusCode)\n }\n \n func TestAdmin_ReadOnlyWithAge(t *testing.T) {"
    },
    {
      "sha": "0331c91186a05c4beabcf1d46261d96b3d3d52f3",
      "filename": "backend/app/rest/api/rest_private.go",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark/blob/e5afa2fb745f65bec7fa8262bb742281f97606b3/backend/app/rest/api/rest_private.go",
      "raw_url": "https://github.com/umputun/remark/raw/e5afa2fb745f65bec7fa8262bb742281f97606b3/backend/app/rest/api/rest_private.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_private.go?ref=e5afa2fb745f65bec7fa8262bb742281f97606b3",
      "patch": "@@ -10,10 +10,10 @@ import (\n \t\"strings\"\n \t\"time\"\n \n-\t\"github.com/dgrijalva/jwt-go\"\n+\tjwt \"github.com/dgrijalva/jwt-go\"\n \t\"github.com/go-chi/chi\"\n \t\"github.com/go-chi/render\"\n-\t\"github.com/hashicorp/go-multierror\"\n+\tmultierror \"github.com/hashicorp/go-multierror\"\n \n \t\"github.com/umputun/remark/backend/app/rest\"\n \t\"github.com/umputun/remark/backend/app/rest/auth\"\n@@ -253,9 +253,10 @@ func (s *Rest) deleteMeCtrl(w http.ResponseWriter, r *http.Request) {\n \n func (s *Rest) isReadOnly(locator store.Locator) bool {\n \tif s.ReadOnlyAge > 0 {\n+\t\t// check RO by age\n \t\tif info, e := s.DataService.Info(locator, s.ReadOnlyAge); e == nil && info.ReadOnly {\n \t\t\treturn true\n \t\t}\n \t}\n-\treturn false\n+\treturn s.DataService.IsReadOnly(locator) // ro manually\n }"
    }
  ]
}
