{
  "sha": "2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjJlY2MwOGZiM2ViYzNjMGM2MDNlM2NmNTg0YTRhMzljZTk4ZjQxZDE=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2018-12-20T03:57:33Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2018-12-20T03:57:33Z"
    },
    "message": "Ext cache (#236)\n\n* remove  cache, switch to go-pkgz/rest/cache\r\n\r\n* remove mongo cache from server test\r\n\r\n* remove old caching code\r\n\r\n* test tricky disqus inputs\r\n\r\n* fix migrator test\r\n\r\n* stacktrace dump test",
    "tree": {
      "sha": "1c7171a0544836daab9c64900349bcdbb99d2485",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/1c7171a0544836daab9c64900349bcdbb99d2485"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcGxMtCRBK7hj4Ov3rIwAAdHIIAIxcB08It+4zkCqLaOpS4LMF\nO/8gwq/QDAoPz+wXvZ23jXI9WtRDnCSSUW5eNJSL4IXQ6L7uBwwKPCKp1UEPVK2o\n0OIsz1ndSM1dlc99AkaI5t2u4HnHjsQHEhizl1ToQI9+rA6BJhVZn0q1e8nmn4wo\nz2FzLyAJPpapfKywwR4JFH8g6oaKQ8MGNodmEbDfpixy9nrIzgUWjf1D9MtWmZuU\n+0KiMUrsoJfBVw/J1VvQ6Ot5mbroxx6TcfNDufZhZ/oxCzYGT0MEADpbUxoAbKyP\nd/zAkFyb7s/79p4IAquzNusEtW98ay75KnnO7WSBHWdxbPNDqz/Jy7OTaeF6pa4=\n=YDQk\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 1c7171a0544836daab9c64900349bcdbb99d2485\nparent bf716ac01fe94893d3079dd163fb2f15c4b62c39\nauthor Umputun <umputun@gmail.com> 1545278253 -0600\ncommitter GitHub <noreply@github.com> 1545278253 -0600\n\nExt cache (#236)\n\n* remove  cache, switch to go-pkgz/rest/cache\r\n\r\n* remove mongo cache from server test\r\n\r\n* remove old caching code\r\n\r\n* test tricky disqus inputs\r\n\r\n* fix migrator test\r\n\r\n* stacktrace dump test\r\n"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
  "html_url": "https://github.com/umputun/remark/commit/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bf716ac01fe94893d3079dd163fb2f15c4b62c39",
      "url": "https://api.github.com/repos/umputun/remark/commits/bf716ac01fe94893d3079dd163fb2f15c4b62c39",
      "html_url": "https://github.com/umputun/remark/commit/bf716ac01fe94893d3079dd163fb2f15c4b62c39"
    }
  ],
  "stats": {
    "total": 1244,
    "additions": 313,
    "deletions": 931
  },
  "files": [
    {
      "sha": "995c89c0230e1d017122a6cdca61f220f08e75e1",
      "filename": "backend/Gopkg.lock",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/Gopkg.lock",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/Gopkg.lock",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/Gopkg.lock?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -130,6 +130,14 @@\n   revision = \"f2a67dcf050cab24d57132a7d8b45553ceab817b\"\n   version = \"v1.0.0\"\n \n+[[projects]]\n+  branch = \"master\"\n+  digest = \"1:c6b263f17e06fcc612b40d1a4ca6d29588ae536170810bddd78227b5ea21f1f1\"\n+  name = \"github.com/go-pkgz/rest\"\n+  packages = [\"cache\"]\n+  pruneopts = \"UT\"\n+  revision = \"88a256cf379018b68f9ef9a35c79fd336ae503fe\"\n+\n [[projects]]\n   digest = \"1:ffc060c551980d37ee9e428ef528ee2813137249ccebb0bfc412ef83071cac91\"\n   name = \"github.com/golang/protobuf\"\n@@ -376,6 +384,7 @@\n     \"github.com/go-chi/render\",\n     \"github.com/go-pkgz/mongo\",\n     \"github.com/go-pkgz/repeater\",\n+    \"github.com/go-pkgz/rest/cache\",\n     \"github.com/google/uuid\",\n     \"github.com/gorilla/feeds\",\n     \"github.com/hashicorp/go-multierror\","
    },
    {
      "sha": "ab7abae0f73a88553d0db9a8a020bcb2e068d70c",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/server.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -12,15 +12,15 @@ import (\n \t\"syscall\"\n \t\"time\"\n \n-\t\"github.com/coreos/bbolt\"\n+\tbolt \"github.com/coreos/bbolt\"\n \t\"github.com/go-pkgz/mongo\"\n+\t\"github.com/go-pkgz/rest/cache\"\n \t\"github.com/pkg/errors\"\n \n \t\"github.com/umputun/remark/backend/app/migrator\"\n \t\"github.com/umputun/remark/backend/app/notify\"\n \t\"github.com/umputun/remark/backend/app/rest/api\"\n \t\"github.com/umputun/remark/backend/app/rest/auth\"\n-\t\"github.com/umputun/remark/backend/app/rest/cache\"\n \t\"github.com/umputun/remark/backend/app/rest/proxy\"\n \t\"github.com/umputun/remark/backend/app/store\"\n \t\"github.com/umputun/remark/backend/app/store/admin\"\n@@ -431,14 +431,14 @@ func (s *ServerCommand) makeCache() (cache.LoadingCache, error) {\n \tcase \"mem\":\n \t\treturn cache.NewMemoryCache(cache.MaxCacheSize(s.Cache.Max.Size), cache.MaxValSize(s.Cache.Max.Value),\n \t\t\tcache.MaxKeys(s.Cache.Max.Items))\n-\tcase \"mongo\":\n-\t\tmgServer, err := s.makeMongo()\n-\t\tif err != nil {\n-\t\t\treturn nil, errors.Wrap(err, \"failed to create mongo server\")\n-\t\t}\n-\t\tconn := mongo.NewConnection(mgServer, s.Mongo.DB, \"cache\")\n-\t\treturn cache.NewMongoCache(conn, cache.MaxCacheSize(s.Cache.Max.Size), cache.MaxValSize(s.Cache.Max.Value),\n-\t\t\tcache.MaxKeys(s.Cache.Max.Items))\n+\t// case \"mongo\":\n+\t// \tmgServer, err := s.makeMongo()\n+\t// \tif err != nil {\n+\t// \t\treturn nil, errors.Wrap(err, \"failed to create mongo server\")\n+\t// \t}\n+\t// \tconn := mongo.NewConnection(mgServer, s.Mongo.DB, \"cache\")\n+\t// \treturn cache.NewMongoCache(conn, cache.MaxCacheSize(s.Cache.Max.Size), cache.MaxValSize(s.Cache.Max.Value),\n+\t// \t\tcache.MaxKeys(s.Cache.Max.Items))\n \tcase \"none\":\n \t\treturn &cache.Nop{}, nil\n \t}"
    },
    {
      "sha": "82284d542b75f92fef32694326cd3b957f41ac81",
      "filename": "backend/app/cmd/server_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/cmd/server_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/cmd/server_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/server_test.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -15,7 +15,7 @@ import (\n \n \t\"github.com/globalsign/mgo\"\n \t\"github.com/go-pkgz/mongo\"\n-\t\"github.com/jessevdk/go-flags\"\n+\tflags \"github.com/jessevdk/go-flags\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n )\n@@ -91,7 +91,7 @@ func TestServerApp_WithMongo(t *testing.T) {\n \n \t// prepare options\n \tp := flags.NewParser(&opts, flags.Default)\n-\t_, err := p.ParseArgs([]string{\"--dev-passwd=password\", \"--cache.type=mongo\", \"--store.type=mongo\",\n+\t_, err := p.ParseArgs([]string{\"--dev-passwd=password\", \"--cache.type=none\", \"--store.type=mongo\",\n \t\t\"--avatar.type=mongo\", \"--mongo.url=\" + mongoURL, \"--mongo.db=test_remark\", \"--port=12345\", \"--admin.type=mongo\"})\n \trequire.Nil(t, err)\n \topts.Auth.Github.CSEC, opts.Auth.Github.CID = \"csec\", \"cid\""
    },
    {
      "sha": "b266442b5c55e32a5fa90cf3478978318ea8d6aa",
      "filename": "backend/app/main.go",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/main.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/main.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/main.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -77,19 +77,23 @@ func setupLog(dbg bool) {\n \tlog.SetOutput(filter)\n }\n \n+// getDump reads runtime stack and returns as a string\n+func getDump() string {\n+\tmaxSize := 5 * 1024 * 1024\n+\tstacktrace := make([]byte, maxSize)\n+\tlength := runtime.Stack(stacktrace, true)\n+\tif length > maxSize {\n+\t\tlength = maxSize\n+\t}\n+\treturn string(stacktrace[:length])\n+}\n+\n func init() {\n \t// catch SIGQUIT and print stack traces\n \tsigChan := make(chan os.Signal)\n \tgo func() {\n \t\tfor range sigChan {\n-\t\t\tlog.Print(\"[INFO] SIGQUIT detected\")\n-\t\t\tmaxSize := 5 * 1024 * 1024\n-\t\t\tstacktrace := make([]byte, maxSize)\n-\t\t\tlength := runtime.Stack(stacktrace, true)\n-\t\t\tif length > maxSize {\n-\t\t\t\tlength = maxSize\n-\t\t\t}\n-\t\t\tfmt.Println(string(stacktrace[:length]))\n+\t\t\tlog.Printf(\"[INFO] SIGQUIT detected, dump:\\n%s\", getDump())\n \t\t}\n \t}()\n \tsignal.Notify(sigChan, syscall.SIGQUIT)"
    },
    {
      "sha": "7981e1d6fb52c262a26fed2e4b1aa614acf41638",
      "filename": "backend/app/main_test.go",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/main_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/main_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/main_test.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -2,8 +2,10 @@ package main\n \n import (\n \t\"io/ioutil\"\n+\t\"log\"\n \t\"net/http\"\n \t\"os\"\n+\t\"strings\"\n \t\"sync\"\n \t\"syscall\"\n \t\"testing\"\n@@ -46,3 +48,11 @@ func TestMain(t *testing.T) {\n \n \twg.Wait()\n }\n+\n+func TestGetDump(t *testing.T) {\n+\tdump := getDump()\n+\tassert.True(t, strings.Contains(dump, \"goroutine\"))\n+\tassert.True(t, strings.Contains(dump, \"[running]\"))\n+\tassert.True(t, strings.Contains(dump, \"backend/app/main.go\"))\n+\tlog.Print(\"\\n dump:\" + dump)\n+}"
    },
    {
      "sha": "a904159c8267df04af62e9f02255be15119d0e77",
      "filename": "backend/app/migrator/disqus_test.go",
      "status": "modified",
      "additions": 46,
      "deletions": 11,
      "changes": 57,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/migrator/disqus_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/migrator/disqus_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/migrator/disqus_test.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -6,7 +6,7 @@ import (\n \t\"testing\"\n \t\"time\"\n \n-\t\"github.com/coreos/bbolt\"\n+\tbolt \"github.com/coreos/bbolt\"\n \t\"github.com/stretchr/testify/require\"\n \t\"github.com/umputun/remark/backend/app/store\"\n \t\"github.com/umputun/remark/backend/app/store/admin\"\n@@ -24,20 +24,20 @@ func TestDisqus_Import(t *testing.T) {\n \td := Disqus{DataStore: &dataStore}\n \tsize, err := d.Import(strings.NewReader(xmlTestDisqus), \"test\")\n \tassert.Nil(t, err)\n-\tassert.Equal(t, 3, size)\n+\tassert.Equal(t, 4, size)\n \n \tlast, err := dataStore.Last(\"test\", 10)\n \tassert.Nil(t, err)\n-\tassert.Equal(t, 3, len(last), \"3 comments imported\")\n+\tassert.Equal(t, 4, len(last), \"4 comments imported\")\n \n-\tc := last[0]\n-\tassert.True(t, strings.HasPrefix(c.Text, \"<p>Google App Engine\"))\n-\tassert.Equal(t, \"299986072\", c.ID)\n+\tc := last[len(last)-1] // last reverses, get first one\n+\tassert.True(t, strings.HasPrefix(c.Text, \"<p>The quick brown fox\"))\n+\tassert.Equal(t, \"299619020\", c.ID)\n \tassert.Equal(t, \"\", c.ParentID)\n-\tassert.Equal(t, store.Locator{SiteID: \"test\", URL: \"http://radio-t.umputun.com/2011/03/229_8880.html\"}, c.Locator)\n-\tassert.Equal(t, \"Dmitry Noname\", c.User.Name)\n-\tassert.Equal(t, \"disqus_8799342cdf328253e03313958ffc6a433659d7ff\", c.User.ID)\n-\tassert.Equal(t, \"7001968ea3f6c9013a9f0a3650f200c10c927638\", c.User.IP)\n+\tassert.Equal(t, store.Locator{SiteID: \"test\", URL: \"https://radio-t.com/p/2011/03/05/podcast-229/\"}, c.Locator)\n+\tassert.Equal(t, \"Alexander Blah\", c.User.Name)\n+\tassert.Equal(t, \"disqus_328c8b68974aef73785f6b38c3d3fedfdf941434\", c.User.ID)\n+\tassert.Equal(t, \"2ba6b71dbf9750ae3356cce14cac6c1b1962747c\", c.User.IP)\n \n \tposts, err := dataStore.List(\"test\", 0, 0)\n \tassert.Nil(t, err)\n@@ -56,7 +56,7 @@ func TestDisqus_Convert(t *testing.T) {\n \tfor comment := range ch {\n \t\tres = append(res, comment)\n \t}\n-\tassert.Equal(t, 3, len(res), \"3 comments total, 1 spam excluded\")\n+\tassert.Equal(t, 4, len(res), \"4 comments total, 1 spam excluded, 1 bad excluded\")\n \n \texp0 := store.Comment{\n \t\tID: \"299619020\",\n@@ -102,6 +102,7 @@ var xmlTestDisqus = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n \t\t<isClosed>false</isClosed>\n \t\t<isDeleted>false</isDeleted>\n \t</thread>\n+\n \t<thread dsq:id=\"247937687\">\n \t\t<id>http://www.radio-t.com/p/2011/03/05/podcast-229/</id>\n \t\t<forum>radiot</forum>\n@@ -121,6 +122,7 @@ var xmlTestDisqus = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n \t\t<isDeleted>false</isDeleted>\n \t</thread>\n \n+\n \t<post dsq:id=\"299619020\">\n \t\t<id>3565798471341011339</id>\n \t\t<message>\n@@ -175,6 +177,23 @@ var xmlTestDisqus = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n \t\t<thread dsq:id=\"247918464\"/>\n \t</post>\n \n+\t<post>\n+\t\t<id>12345678890</id>\n+\t\t<message>This comment had no ID</message>\n+\t\t<createdAt>2011-08-31T22:49:43Z</createdAt>\n+\t\t<forum>radiot</forum>\n+\t\t<isDeleted>false</isDeleted>\n+\t\t<isSpam>false</isSpam>\n+\t\t<author>\n+\t\t\t<email>blah.noname@gmail.com</email>\n+\t\t\t<name>Blah Noname</name>\n+\t\t\t<isAnonymous>false</isAnonymous>\n+\t\t\t<username>74b9e7568ef6860e93862c5d77590123</username>\n+\t\t</author>\n+\t\t<ipAddress>189.89.89.139</ipAddress>\n+\t\t<thread dsq:id=\"247918464\"/>\n+\t</post>\n+\n \t<post dsq:id=\"299986073\">\n \t\t<id>6580890074280459219</id>\n \t\t<message>some ugly spam</message>\n@@ -190,5 +209,21 @@ var xmlTestDisqus = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n \t\t<ipAddress>189.89.89.139</ipAddress>\n \t\t<thread dsq:id=\"247937687\"/>\n \t</post>\n+\n+\t<post dsq:id=\"x299986073\">\n+\t\t<message>some bad comment</message>\n+\t\t<createdAt>2011-x09-30T22:48:43Z</createdAt>\n+\t\t<isDeleted>false</isDeleted>\n+\t\t<isSpam>123</isSpam>\n+\t\t<author>\n+\t\t\t<email>noname@gmail.com</email>\n+\t\t\t<name>Noname</name>\n+\t\t\t<isAnonymous>true</isAnonymous>\n+\t\t\t<username>google-2c5d77590123</username>\n+\t\t</author>\n+\t\t<ipAddress>189.89.89.39</ipAddress>\n+\t\t<thread dsq:id=247937687/>\n+\t</post>\n+\n </disqus>\n `"
    },
    {
      "sha": "42367fafd00dabac97214376c44a8c60bb1e8fe1",
      "filename": "backend/app/migrator/migrator_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/migrator/migrator_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/migrator/migrator_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/migrator/migrator_test.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -5,7 +5,7 @@ import (\n \t\"os\"\n \t\"testing\"\n \n-\t\"github.com/coreos/bbolt\"\n+\tbolt \"github.com/coreos/bbolt\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n \n@@ -33,11 +33,11 @@ func TestMigrator_ImportDisqus(t *testing.T) {\n \t\tProvider:  \"disqus\",\n \t})\n \tassert.Nil(t, err)\n-\tassert.Equal(t, 3, size)\n+\tassert.Equal(t, 4, size)\n \n \tlast, err := dataStore.Last(\"test\", 10)\n \tassert.Nil(t, err)\n-\tassert.Equal(t, 3, len(last), \"3 comments imported\")\n+\tassert.Equal(t, 4, len(last), \"4 comments imported\")\n }\n \n func TestMigrator_ImportWordPress(t *testing.T) {"
    },
    {
      "sha": "5ee0dad62fd15d17b2ce1a3bb48979585278df6e",
      "filename": "backend/app/rest/api/admin.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/admin.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/admin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/admin.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -9,10 +9,10 @@ import (\n \n \t\"github.com/go-chi/chi\"\n \t\"github.com/go-chi/render\"\n+\t\"github.com/go-pkgz/rest/cache\"\n \n \t\"github.com/umputun/remark/backend/app/rest\"\n \t\"github.com/umputun/remark/backend/app/rest/auth\"\n-\t\"github.com/umputun/remark/backend/app/rest/cache\"\n \t\"github.com/umputun/remark/backend/app/rest/proxy\"\n \t\"github.com/umputun/remark/backend/app/store\"\n \t\"github.com/umputun/remark/backend/app/store/service\""
    },
    {
      "sha": "2fdf0e4e04ba8fc253ca397591c8fdc3b813b4dc",
      "filename": "backend/app/rest/api/migrator.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/migrator.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/migrator.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/migrator.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -14,11 +14,11 @@ import (\n \n \t\"github.com/go-chi/chi\"\n \t\"github.com/go-chi/render\"\n+\t\"github.com/go-pkgz/rest/cache\"\n \t\"github.com/pkg/errors\"\n \n \t\"github.com/umputun/remark/backend/app/migrator\"\n \t\"github.com/umputun/remark/backend/app/rest\"\n-\t\"github.com/umputun/remark/backend/app/rest/cache\"\n )\n \n // Migrator rest with import and export controllers"
    },
    {
      "sha": "dec91a4d52e24ff317dcad40a997bfaa639d695d",
      "filename": "backend/app/rest/api/migrator_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/migrator_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/migrator_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/migrator_test.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -15,14 +15,14 @@ import (\n \t\"testing\"\n \t\"time\"\n \n-\t\"github.com/coreos/bbolt\"\n+\tbolt \"github.com/coreos/bbolt\"\n \t\"github.com/go-chi/chi\"\n+\t\"github.com/go-pkgz/rest/cache\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n \n \t\"github.com/umputun/remark/backend/app/migrator\"\n \t\"github.com/umputun/remark/backend/app/rest/auth\"\n-\t\"github.com/umputun/remark/backend/app/rest/cache\"\n \t\"github.com/umputun/remark/backend/app/store\"\n \tadminstore \"github.com/umputun/remark/backend/app/store/admin\"\n \t\"github.com/umputun/remark/backend/app/store/engine\""
    },
    {
      "sha": "4167a881c26c442e184a866f7cab4b8dea5c4308",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/rest.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -19,13 +19,13 @@ import (\n \t\"github.com/go-chi/chi/middleware\"\n \t\"github.com/go-chi/cors\"\n \t\"github.com/go-chi/render\"\n+\t\"github.com/go-pkgz/rest/cache\"\n \t\"github.com/pkg/errors\"\n \t\"github.com/rakyll/statik/fs\"\n \n \t\"github.com/umputun/remark/backend/app/notify\"\n \t\"github.com/umputun/remark/backend/app/rest\"\n \t\"github.com/umputun/remark/backend/app/rest/auth\"\n-\t\"github.com/umputun/remark/backend/app/rest/cache\"\n \t\"github.com/umputun/remark/backend/app/rest/proxy\"\n \t\"github.com/umputun/remark/backend/app/store\"\n \t\"github.com/umputun/remark/backend/app/store/service\"\n@@ -336,3 +336,14 @@ func filterComments(comments []store.Comment, fn func(c store.Comment) bool) (fi\n \t}\n \treturn filtered\n }\n+\n+// URLKey gets url from request to use it as cache key\n+// admins will have different keys in order to prevent leak of admin-only data to regular users\n+func URLKey(r *http.Request) string {\n+\tadminPrefix := \"admin!!\"\n+\tkey := strings.TrimPrefix(r.URL.String(), adminPrefix)          // prevents attach with fake url to get admin view\n+\tif user, err := rest.GetUserInfo(r); err == nil && user.Admin { // make separate cache key for admins\n+\t\tkey = adminPrefix + key\n+\t}\n+\treturn key\n+}"
    },
    {
      "sha": "a607f1002cd28fa75acc0dbe378b2849d2ea17a5",
      "filename": "backend/app/rest/api/rest_private.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/rest_private.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/rest_private.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_private.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -13,11 +13,11 @@ import (\n \tjwt \"github.com/dgrijalva/jwt-go\"\n \t\"github.com/go-chi/chi\"\n \t\"github.com/go-chi/render\"\n+\t\"github.com/go-pkgz/rest/cache\"\n \tmultierror \"github.com/hashicorp/go-multierror\"\n \n \t\"github.com/umputun/remark/backend/app/rest\"\n \t\"github.com/umputun/remark/backend/app/rest/auth\"\n-\t\"github.com/umputun/remark/backend/app/rest/cache\"\n \t\"github.com/umputun/remark/backend/app/store\"\n \t\"github.com/umputun/remark/backend/app/store/service\"\n )"
    },
    {
      "sha": "45cfdc45ef3a83641df085bfbf03cd226967a89d",
      "filename": "backend/app/rest/api/rest_public.go",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/rest_public.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/rest_public.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_public.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -10,9 +10,9 @@ import (\n \n \t\"github.com/go-chi/chi\"\n \t\"github.com/go-chi/render\"\n+\t\"github.com/go-pkgz/rest/cache\"\n \n \t\"github.com/umputun/remark/backend/app/rest\"\n-\t\"github.com/umputun/remark/backend/app/rest/cache\"\n \t\"github.com/umputun/remark/backend/app/store\"\n )\n \n@@ -26,7 +26,7 @@ func (s *Rest) findCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \t}\n \tlog.Printf(\"[DEBUG] get comments for %+v, sort %s, format %s\", locator, sort, r.URL.Query().Get(\"format\"))\n \n-\tkey := cache.NewKey(locator.SiteID).ID(cache.URLKey(r)).Scopes(locator.SiteID, locator.URL)\n+\tkey := cache.NewKey(locator.SiteID).ID(URLKey(r)).Scopes(locator.SiteID, locator.URL)\n \tdata, err := s.Cache.Get(key, func() ([]byte, error) {\n \t\tcomments, e := s.DataService.Find(locator, sort)\n \t\tif e != nil {\n@@ -87,7 +87,7 @@ func (s *Rest) previewCommentCtrl(w http.ResponseWriter, r *http.Request) {\n func (s *Rest) infoCtrl(w http.ResponseWriter, r *http.Request) {\n \tlocator := store.Locator{SiteID: r.URL.Query().Get(\"site\"), URL: r.URL.Query().Get(\"url\")}\n \n-\tkey := cache.NewKey(locator.SiteID).ID(cache.URLKey(r)).Scopes(locator.SiteID, locator.URL)\n+\tkey := cache.NewKey(locator.SiteID).ID(URLKey(r)).Scopes(locator.SiteID, locator.URL)\n \tdata, err := s.Cache.Get(key, func() ([]byte, error) {\n \t\tinfo, e := s.DataService.Info(locator, s.ReadOnlyAge)\n \t\tif e != nil {\n@@ -114,7 +114,7 @@ func (s *Rest) lastCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tlimit = 0\n \t}\n \n-\tkey := cache.NewKey(siteID).ID(cache.URLKey(r)).Scopes(lastCommentsScope)\n+\tkey := cache.NewKey(siteID).ID(URLKey(r)).Scopes(lastCommentsScope)\n \tdata, err := s.Cache.Get(key, func() ([]byte, error) {\n \t\tcomments, e := s.DataService.Last(siteID, limit)\n \t\tif e != nil {\n@@ -170,7 +170,7 @@ func (s *Rest) findUserCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \n \tlog.Printf(\"[DEBUG] get comments for userID %s, %s\", userID, siteID)\n \n-\tkey := cache.NewKey(siteID).ID(cache.URLKey(r)).Scopes(userID, siteID)\n+\tkey := cache.NewKey(siteID).ID(URLKey(r)).Scopes(userID, siteID)\n \tdata, err := s.Cache.Get(key, func() ([]byte, error) {\n \t\tcomments, e := s.DataService.User(siteID, userID, limit, 0)\n \t\tif e != nil {\n@@ -253,7 +253,7 @@ func (s *Rest) countMultiCtrl(w http.ResponseWriter, r *http.Request) {\n \t}\n \n \t// key could be long for multiple posts, make it sha1\n-\tk := cache.URLKey(r) + strings.Join(posts, \",\")\n+\tk := URLKey(r) + strings.Join(posts, \",\")\n \thasher := sha1.New()\n \tif _, err := hasher.Write([]byte(k)); err != nil {\n \t\trest.SendErrorJSON(w, r, http.StatusInternalServerError, err, \"can't make sha1 for list of urls\")\n@@ -289,7 +289,7 @@ func (s *Rest) listCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tskip = v\n \t}\n \n-\tkey := cache.NewKey(siteID).ID(cache.URLKey(r)).Scopes(siteID)\n+\tkey := cache.NewKey(siteID).ID(URLKey(r)).Scopes(siteID)\n \tdata, err := s.Cache.Get(key, func() ([]byte, error) {\n \t\tposts, e := s.DataService.List(siteID, limit, skip)\n \t\tif e != nil {"
    },
    {
      "sha": "f5600760716c33530e08807d7b48d54ff6567f27",
      "filename": "backend/app/rest/api/rest_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/rest_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/rest_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_test.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -12,13 +12,13 @@ import (\n \t\"testing\"\n \t\"time\"\n \n-\t\"github.com/coreos/bbolt\"\n+\tbolt \"github.com/coreos/bbolt\"\n+\t\"github.com/go-pkgz/rest/cache\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n \n \t\"github.com/umputun/remark/backend/app/migrator\"\n \t\"github.com/umputun/remark/backend/app/rest/auth\"\n-\t\"github.com/umputun/remark/backend/app/rest/cache\"\n \t\"github.com/umputun/remark/backend/app/rest/proxy\"\n \t\"github.com/umputun/remark/backend/app/store\"\n \tadminstore \"github.com/umputun/remark/backend/app/store/admin\""
    },
    {
      "sha": "4c5b12564c6dd08b6b602df352e515b0ecca7a53",
      "filename": "backend/app/rest/api/rss.go",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/rss.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/app/rest/api/rss.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rss.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -7,11 +7,11 @@ import (\n \t\"time\"\n \n \t\"github.com/go-chi/chi\"\n+\t\"github.com/go-pkgz/rest/cache\"\n \t\"github.com/gorilla/feeds\"\n \t\"github.com/pkg/errors\"\n \n \t\"github.com/umputun/remark/backend/app/rest\"\n-\t\"github.com/umputun/remark/backend/app/rest/cache\"\n \t\"github.com/umputun/remark/backend/app/store\"\n )\n \n@@ -35,7 +35,7 @@ func (s *Rest) rssPostCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \tlocator := store.Locator{SiteID: r.URL.Query().Get(\"site\"), URL: r.URL.Query().Get(\"url\")}\n \tlog.Printf(\"[DEBUG] get rss for post %+v\", locator)\n \n-\tkey := cache.NewKey(locator.SiteID).ID(cache.URLKey(r)).Scopes(locator.SiteID, locator.URL)\n+\tkey := cache.NewKey(locator.SiteID).ID(URLKey(r)).Scopes(locator.SiteID, locator.URL)\n \tdata, err := s.Cache.Get(key, func() ([]byte, error) {\n \t\tcomments, e := s.DataService.Find(locator, \"-time\")\n \t\tif e != nil {\n@@ -67,7 +67,7 @@ func (s *Rest) rssSiteCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \tsiteID := r.URL.Query().Get(\"site\")\n \tlog.Printf(\"[DEBUG] get rss for site %s\", siteID)\n \n-\tkey := cache.NewKey(siteID).ID(cache.URLKey(r)).Scopes(siteID, lastCommentsScope)\n+\tkey := cache.NewKey(siteID).ID(URLKey(r)).Scopes(siteID, lastCommentsScope)\n \tdata, err := s.Cache.Get(key, func() ([]byte, error) {\n \t\tcomments, e := s.DataService.Last(siteID, maxRssItems)\n \t\tif e != nil {\n@@ -100,7 +100,7 @@ func (s *Rest) rssRepliesCtrl(w http.ResponseWriter, r *http.Request) {\n \tsiteID := r.URL.Query().Get(\"site\")\n \tlog.Printf(\"[DEBUG] get rss replies to user %s for site %s\", userID, siteID)\n \n-\tkey := cache.NewKey(siteID).ID(cache.URLKey(r)).Scopes(siteID, lastCommentsScope)\n+\tkey := cache.NewKey(siteID).ID(URLKey(r)).Scopes(siteID, lastCommentsScope)\n \tdata, err := s.Cache.Get(key, func() (res []byte, e error) {\n \t\tcomments, e := s.DataService.Last(siteID, maxLastCommentsReply)\n \t\tif e != nil {"
    },
    {
      "sha": "8b0e06459382aa639c777fd03d9bb2d63ea91979",
      "filename": "backend/app/rest/cache/cache_test.go",
      "status": "removed",
      "additions": 0,
      "deletions": 55,
      "changes": 55,
      "blob_url": "https://github.com/umputun/remark/blob/bf716ac01fe94893d3079dd163fb2f15c4b62c39/backend/app/rest/cache/cache_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/bf716ac01fe94893d3079dd163fb2f15c4b62c39/backend/app/rest/cache/cache_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/cache/cache_test.go?ref=bf716ac01fe94893d3079dd163fb2f15c4b62c39",
      "patch": "@@ -1,55 +0,0 @@\n-package cache\n-\n-import (\n-\t\"net/http\"\n-\t\"testing\"\n-\n-\t\"github.com/stretchr/testify/assert\"\n-\t\"github.com/umputun/remark/backend/app/rest\"\n-\t\"github.com/umputun/remark/backend/app/store\"\n-)\n-\n-func TestCache_Keys(t *testing.T) {\n-\ttbl := []struct {\n-\t\tkey    string\n-\t\tscopes []string\n-\t\tfull   string\n-\t}{\n-\t\t{\"key1\", []string{\"s1\"}, \"s1@@key1@@site\"},\n-\t\t{\"key2\", []string{\"s11\", \"s2\"}, \"s11$$s2@@key2@@site\"},\n-\t\t{\"key3\", []string{}, \"@@key3@@site\"},\n-\t}\n-\n-\tfor n, tt := range tbl {\n-\t\tk := NewKey(\"site\").ID(tt.key).Scopes(tt.scopes...)\n-\t\tfull := k.Merge()\n-\t\tassert.Equal(t, tt.full, full, \"making key, #%d\", n)\n-\n-\t\tk, e := ParseKey(full)\n-\t\tassert.Nil(t, e)\n-\t\tassert.Equal(t, tt.scopes, k.scopes)\n-\t\tassert.Equal(t, tt.key, k.id)\n-\t}\n-\n-\t_, err := ParseKey(\"abc\")\n-\tassert.Error(t, err)\n-\t_, err = ParseKey(\"\")\n-\tassert.Error(t, err)\n-}\n-\n-func TestCache_URLKey(t *testing.T) {\n-\tr, err := http.NewRequest(\"GET\", \"http://blah/123\", nil)\n-\tassert.Nil(t, err)\n-\tkey := URLKey(r)\n-\tassert.Equal(t, \"http://blah/123\", key)\n-\n-\tr, err = http.NewRequest(\"GET\", \"http://blah/123?key=v&k2=v2\", nil)\n-\tassert.Nil(t, err)\n-\tkey = URLKey(r)\n-\tassert.Equal(t, \"http://blah/123?key=v&k2=v2\", key)\n-\n-\tuser := store.User{Admin: true}\n-\tr = rest.SetUserInfo(r, user)\n-\tkey = URLKey(r)\n-\tassert.Equal(t, \"admin!!http://blah/123?key=v&k2=v2\", key)\n-}"
    },
    {
      "sha": "35fe6b6af817978720f96dc4cef2219d3a364def",
      "filename": "backend/app/rest/cache/memory_test.go",
      "status": "removed",
      "additions": 0,
      "deletions": 310,
      "changes": 310,
      "blob_url": "https://github.com/umputun/remark/blob/bf716ac01fe94893d3079dd163fb2f15c4b62c39/backend/app/rest/cache/memory_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/bf716ac01fe94893d3079dd163fb2f15c4b62c39/backend/app/rest/cache/memory_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/cache/memory_test.go?ref=bf716ac01fe94893d3079dd163fb2f15c4b62c39",
      "patch": "@@ -1,310 +0,0 @@\n-package cache\n-\n-import (\n-\t\"fmt\"\n-\t\"math/rand\"\n-\t\"sync\"\n-\t\"sync/atomic\"\n-\t\"testing\"\n-\t\"time\"\n-\n-\t\"github.com/pkg/errors\"\n-\t\"github.com/stretchr/testify/assert\"\n-\t\"github.com/stretchr/testify/require\"\n-)\n-\n-func TestMemoryCache_Get(t *testing.T) {\n-\tvar postFnCall, coldCalls int32\n-\tlc, err := NewMemoryCache(PostFlushFn(func() { atomic.AddInt32(&postFnCall, 1) }))\n-\trequire.Nil(t, err)\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key\"), func() ([]byte, error) {\n-\t\tatomic.AddInt32(&coldCalls, 1)\n-\t\treturn []byte(\"result\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result\", string(res))\n-\tassert.Equal(t, int32(1), atomic.LoadInt32(&coldCalls))\n-\tassert.Equal(t, int32(0), atomic.LoadInt32(&postFnCall))\n-\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key\"), func() ([]byte, error) {\n-\t\tatomic.AddInt32(&coldCalls, 1)\n-\t\treturn []byte(\"result\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result\", string(res))\n-\tassert.Equal(t, int32(1), atomic.LoadInt32(&coldCalls))\n-\tassert.Equal(t, int32(0), atomic.LoadInt32(&postFnCall))\n-\n-\tlc.Flush(Flusher(\"site\"))\n-\ttime.Sleep(100 * time.Millisecond) // let postFn to do its thing\n-\tassert.Equal(t, int32(1), atomic.LoadInt32(&postFnCall))\n-\n-\t_, err = lc.Get(NewKey(\"site\").ID(\"key\"), func() ([]byte, error) {\n-\t\treturn nil, errors.New(\"err\")\n-\t})\n-\tassert.NotNil(t, err)\n-}\n-\n-func TestMemoryCache_MaxKeys(t *testing.T) {\n-\tvar postFnCall, coldCalls int32\n-\tlc, err := NewMemoryCache(PostFlushFn(func() { atomic.AddInt32(&postFnCall, 1) }),\n-\t\tMaxKeys(5), MaxValSize(10))\n-\trequire.Nil(t, err)\n-\n-\t// put 5 keys to cache\n-\tfor i := 0; i < 5; i++ {\n-\t\tres, e := lc.Get(NewKey(\"site\").ID(fmt.Sprintf(\"key-%d\", i)), func() ([]byte, error) {\n-\t\t\tatomic.AddInt32(&coldCalls, 1)\n-\t\t\treturn []byte(fmt.Sprintf(\"result-%d\", i)), nil\n-\t\t})\n-\t\tassert.Nil(t, e)\n-\t\tassert.Equal(t, fmt.Sprintf(\"result-%d\", i), string(res))\n-\t\tassert.Equal(t, int32(i+1), atomic.LoadInt32(&coldCalls))\n-\t\tassert.Equal(t, int32(0), atomic.LoadInt32(&postFnCall))\n-\t}\n-\n-\t// check if really cached\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key-3\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-blah\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-3\", string(res), \"should be cached\")\n-\n-\t// try to cache after maxKeys reached\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-X\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-X\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-X\", string(res))\n-\n-\tassert.Equal(t, 5, lc.(*memoryCache).bytesCache.Len())\n-\n-\t// put to cache and make sure it cached\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-Z\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-Z\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-Z\", string(res))\n-\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-Z\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-Zzzz\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-Z\", string(res), \"got cached value\")\n-\tassert.Equal(t, 5, lc.(*memoryCache).bytesCache.Len())\n-}\n-\n-func TestMemoryCache_MaxValueSize(t *testing.T) {\n-\tlc, err := NewMemoryCache(MaxKeys(5), MaxValSize(10))\n-\trequire.Nil(t, err)\n-\t// put good size value to cache and make sure it cached\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key-Z\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-Z\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-Z\", string(res))\n-\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-Z\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-Zzzz\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-Z\", string(res), \"got cached value\")\n-\n-\t// put too big value to cache and make sure it is not cached\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-Big\"), func() ([]byte, error) {\n-\t\treturn []byte(\"1234567890\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"1234567890\", string(res))\n-\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-Big\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-big\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-big\", string(res), \"got not cached value\")\n-}\n-\n-func TestMemoryCache_MaxCacheSize(t *testing.T) {\n-\tlc, err := NewMemoryCache(MaxKeys(50), MaxCacheSize(20))\n-\trequire.Nil(t, err)\n-\n-\t// put good size value to cache and make sure it cached\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key-Z\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-Z\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-Z\", string(res))\n-\tassert.Equal(t, int64(8), lc.(*memoryCache).currentSize)\n-\n-\t_, err = lc.Get(NewKey(\"site\").ID(\"key-Z2\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-Z\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, int64(16), lc.(*memoryCache).currentSize)\n-\n-\t// this will cause removal\n-\t_, err = lc.Get(NewKey(\"site\").ID(\"key-Z3\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-Z\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, int64(16), lc.(*memoryCache).currentSize)\n-\n-\tassert.Equal(t, 2, lc.(*memoryCache).bytesCache.Len())\n-}\n-\n-func TestMemoryCache_MaxCacheSizeParallel(t *testing.T) {\n-\tlc, err := NewMemoryCache(MaxCacheSize(123), MaxKeys(10000))\n-\trequire.Nil(t, err)\n-\n-\twg := sync.WaitGroup{}\n-\tfor i := 0; i < 1000; i++ {\n-\t\twg.Add(1)\n-\t\ti := i\n-\t\tgo func() {\n-\t\t\ttime.Sleep(time.Duration(rand.Intn(100)) * time.Nanosecond)\n-\t\t\tdefer wg.Done()\n-\t\t\tres, err := lc.Get(NewKey(\"site\").ID(fmt.Sprintf(\"key-%d\", i)), func() ([]byte, error) {\n-\t\t\t\treturn []byte(fmt.Sprintf(\"result-%d\", i)), nil\n-\t\t\t})\n-\t\t\trequire.Nil(t, err)\n-\t\t\trequire.Equal(t, fmt.Sprintf(\"result-%d\", i), string(res))\n-\t\t\tsize := atomic.LoadInt64(&lc.(*memoryCache).currentSize)\n-\t\t\trequire.True(t, size < 200 && size >= 0, \"unexpected size=%d\", size) // won't be exactly 123 due parallel\n-\t\t}()\n-\t}\n-\twg.Wait()\n-\tassert.True(t, lc.(*memoryCache).currentSize < 123 && lc.(*memoryCache).currentSize >= 0)\n-\tt.Log(\"size=\", lc.(*memoryCache).currentSize)\n-}\n-\n-func TestMemoryCache_Parallel(t *testing.T) {\n-\tvar coldCalls int32\n-\tlc, err := NewMemoryCache()\n-\trequire.Nil(t, err)\n-\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key\"), func() ([]byte, error) {\n-\t\treturn []byte(\"value\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"value\", string(res))\n-\n-\twg := sync.WaitGroup{}\n-\tfor i := 0; i < 1000; i++ {\n-\t\twg.Add(1)\n-\t\ti := i\n-\t\tgo func() {\n-\t\t\tdefer wg.Done()\n-\t\t\tres, err := lc.Get(NewKey(\"site\").ID(\"key\"), func() ([]byte, error) {\n-\t\t\t\tatomic.AddInt32(&coldCalls, 1)\n-\t\t\t\treturn []byte(fmt.Sprintf(\"result-%d\", i)), nil\n-\t\t\t})\n-\t\t\trequire.Nil(t, err)\n-\t\t\trequire.Equal(t, \"value\", string(res))\n-\t\t}()\n-\t}\n-\twg.Wait()\n-\tassert.Equal(t, int32(0), atomic.LoadInt32(&coldCalls))\n-}\n-\n-func TestMemoryCache_Scopes(t *testing.T) {\n-\tlc, err := NewMemoryCache()\n-\trequire.Nil(t, err)\n-\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key\").Scopes(\"s1\", \"s2\"), func() ([]byte, error) {\n-\t\treturn []byte(\"value\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"value\", string(res))\n-\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key2\").Scopes(\"s2\"), func() ([]byte, error) {\n-\t\treturn []byte(\"value2\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"value2\", string(res))\n-\n-\tassert.Equal(t, 2, lc.(*memoryCache).bytesCache.Len())\n-\tlc.Flush(Flusher(\"site\").Scopes(\"s1\"))\n-\tassert.Equal(t, 1, lc.(*memoryCache).bytesCache.Len())\n-\n-\t_, err = lc.Get(NewKey(\"site\").ID(\"key2\").Scopes(\"s2\"), func() ([]byte, error) {\n-\t\tassert.Fail(t, \"should stay\")\n-\t\treturn nil, nil\n-\t})\n-\tassert.Nil(t, err)\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key\").Scopes(\"s1\", \"s2\"), func() ([]byte, error) {\n-\t\treturn []byte(\"value-upd\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"value-upd\", string(res), \"was deleted, update\")\n-}\n-\n-func TestMemoryCache_Flush(t *testing.T) {\n-\tlc, err := NewMemoryCache()\n-\trequire.Nil(t, err)\n-\n-\taddToCache := func(id string, scopes ...string) {\n-\t\tres, err := lc.Get(NewKey(\"site\").ID(id).Scopes(scopes...), func() ([]byte, error) {\n-\t\t\treturn []byte(\"value\" + id), nil\n-\t\t})\n-\t\trequire.Nil(t, err)\n-\t\trequire.Equal(t, \"value\"+id, string(res))\n-\t}\n-\n-\tinit := func() {\n-\t\tlc.Flush(Flusher(\"site\"))\n-\t\taddToCache(\"key1\", \"s1\", \"s2\")\n-\t\taddToCache(\"key2\", \"s1\", \"s2\", \"s3\")\n-\t\taddToCache(\"key3\", \"s1\", \"s2\", \"s3\")\n-\t\taddToCache(\"key4\", \"s2\", \"s3\")\n-\t\taddToCache(\"key5\", \"s2\")\n-\t\taddToCache(\"key6\")\n-\t\taddToCache(\"key7\", \"s4\", \"s3\")\n-\t\trequire.Equal(t, 7, lc.(*memoryCache).bytesCache.Len(), \"cache init\")\n-\t}\n-\n-\ttbl := []struct {\n-\t\tscopes []string\n-\t\tleft   int\n-\t\tmsg    string\n-\t}{\n-\t\t{[]string{}, 0, \"full flush, no scopes\"},\n-\t\t{[]string{\"s0\"}, 7, \"flush wrong scope\"},\n-\t\t{[]string{\"s1\"}, 4, \"flush s1 scope\"},\n-\t\t{[]string{\"s2\", \"s1\"}, 2, \"flush s2+s1 scope\"},\n-\t\t{[]string{\"s1\", \"s2\"}, 2, \"flush s1+s2 scope\"},\n-\t\t{[]string{\"s1\", \"s2\", \"s4\"}, 1, \"flush s1+s2+s4 scope\"},\n-\t\t{[]string{\"s1\", \"s2\", \"s3\"}, 1, \"flush s1+s2+s3 scope\"},\n-\t\t{[]string{\"s1\", \"s2\", \"ss\"}, 2, \"flush s1+s2+wrong scope\"},\n-\t}\n-\n-\tfor i, tt := range tbl {\n-\t\tinit()\n-\t\tlc.Flush(Flusher(\"site\").Scopes(tt.scopes...))\n-\t\tassert.Equal(t, tt.left, lc.(*memoryCache).bytesCache.Len(), \"keys size, %s #%d\", tt.msg, i)\n-\t}\n-}\n-\n-func TestMemoryCache_FlushFailed(t *testing.T) {\n-\tlc, err := NewMemoryCache()\n-\trequire.Nil(t, err)\n-\tval, err := lc.Get(NewKey(\"site\").ID(\"invalid-composite\"), func() ([]byte, error) {\n-\t\treturn []byte(\"value\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"value\", string(val))\n-\tassert.Equal(t, 1, lc.(*memoryCache).bytesCache.Len())\n-\n-\tlc.Flush(Flusher(\"site\").Scopes(\"invalid-composite\"))\n-\tassert.Equal(t, 1, lc.(*memoryCache).bytesCache.Len())\n-}\n-\n-func TestMemoryCache_BadOptions(t *testing.T) {\n-\t_, err := NewMemoryCache(MaxCacheSize(-1))\n-\tassert.EqualError(t, err, \"failed to set cache option: negative size or MaxCacheSize, -1\")\n-\n-\t_, err = NewMemoryCache(MaxKeys(-1))\n-\tassert.EqualError(t, err, \"failed to set cache option: negative size for MaxKeys, -1\")\n-\n-\t_, err = NewMemoryCache(MaxValSize(-1))\n-\tassert.EqualError(t, err, \"failed to set cache option: negative size for MaxValSize, -1\")\n-}"
    },
    {
      "sha": "b0e23b5adee63d92b11bc5183ec4e154a6032ddd",
      "filename": "backend/app/rest/cache/mongo.go",
      "status": "removed",
      "additions": 0,
      "deletions": 187,
      "changes": 187,
      "blob_url": "https://github.com/umputun/remark/blob/bf716ac01fe94893d3079dd163fb2f15c4b62c39/backend/app/rest/cache/mongo.go",
      "raw_url": "https://github.com/umputun/remark/raw/bf716ac01fe94893d3079dd163fb2f15c4b62c39/backend/app/rest/cache/mongo.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/cache/mongo.go?ref=bf716ac01fe94893d3079dd163fb2f15c4b62c39",
      "patch": "@@ -1,187 +0,0 @@\n-package cache\n-\n-import (\n-\t\"log\"\n-\t\"time\"\n-\n-\t\"github.com/globalsign/mgo\"\n-\t\"github.com/globalsign/mgo/bson\"\n-\t\"github.com/go-pkgz/mongo\"\n-\t\"github.com/go-pkgz/repeater\"\n-\tmultierror \"github.com/hashicorp/go-multierror\"\n-\t\"github.com/pkg/errors\"\n-)\n-\n-type mongoCache struct {\n-\tconnection   *mongo.Connection\n-\tpostFlushFn  func()\n-\tmaxKeys      int\n-\tmaxValueSize int\n-\tmaxCacheSize int64\n-}\n-\n-const cacheCollection = \"cache\"\n-\n-type mongoDoc struct {\n-\tSiteID string   `bson:\"site\"`\n-\tKey    string   `bson:\"key\"`\n-\tScopes []string `bson:\"scopes,omitempty\"`\n-\tData   []byte   `bson:\"data\"`\n-}\n-\n-// NewMongoCache makes mongoCache implementation\n-func NewMongoCache(connection *mongo.Connection, options ...Option) (LoadingCache, error) {\n-\tlog.Printf(\"[INFO] make mongo cache with %s\", connection)\n-\tres := &mongoCache{\n-\t\tconnection:   connection,\n-\t\tpostFlushFn:  func() {},\n-\t\tmaxKeys:      1000,\n-\t\tmaxValueSize: 0,\n-\t}\n-\tfor _, opt := range options {\n-\t\tif err := opt(res); err != nil {\n-\t\t\treturn nil, errors.Wrap(err, \"failed to set cache option\")\n-\t\t}\n-\t}\n-\tif err := res.prepare(); err != nil {\n-\t\treturn nil, err\n-\t}\n-\treturn res, nil\n-}\n-\n-// Get is loading cache method to get value by key or load via fn if not found\n-func (m *mongoCache) Get(key Key, fn func() ([]byte, error)) (data []byte, err error) {\n-\n-\td := mongoDoc{}\n-\n-\t// repeat find from cache with small delay to avoid mgo random error\n-\trep := repeater.NewDefault(5, 10*time.Millisecond)\n-\tmgErr := rep.Do(func() error {\n-\t\treturn m.connection.WithCustomCollection(cacheCollection, func(coll *mgo.Collection) error {\n-\t\t\treturn coll.Find(bson.M{\"site\": key.siteID, \"key\": key.id}).One(&d)\n-\t\t})\n-\t}, mgo.ErrNotFound)\n-\tif mgErr == nil { // cached result found\n-\t\treturn d.Data, nil\n-\t}\n-\n-\tif data, err = fn(); err != nil {\n-\t\treturn data, err\n-\t}\n-\n-\tif mgErr != mgo.ErrNotFound { // some other error in mgo query, don't try to update cache\n-\t\tlog.Printf(\"[WARN] unexpected mgo error %+v\", mgErr)\n-\t\treturn data, err\n-\t}\n-\n-\tif !m.allowed(data) {\n-\t\treturn data, nil\n-\t}\n-\n-\td = mongoDoc{\n-\t\tSiteID: key.siteID,\n-\t\tKey:    key.id,\n-\t\tData:   data,\n-\t\tScopes: key.scopes,\n-\t}\n-\terr = m.connection.WithCustomCollection(cacheCollection, func(coll *mgo.Collection) error {\n-\t\t_, e := coll.Upsert(bson.M{\"site\": key.siteID, \"key\": key.id}, bson.M{\"$set\": d})\n-\t\treturn e\n-\t})\n-\tif err != nil {\n-\t\treturn nil, errors.Wrapf(err, \"can't set cached value for %+v\", key)\n-\t}\n-\n-\tif m.maxKeys > 0 {\n-\t\terr = m.cleanup(key.siteID)\n-\t}\n-\n-\treturn data, errors.Wrap(err, \"failed to cleanup cached records\")\n-}\n-\n-func (m *mongoCache) cleanup(siteID string) (err error) {\n-\tids := []struct {\n-\t\tID bson.ObjectId `bson:\"_id\"`\n-\t}{}\n-\n-\terr = m.connection.WithCustomCollection(cacheCollection, func(coll *mgo.Collection) error {\n-\t\tn, countErr := coll.Find(bson.M{\"site\": siteID}).Count()\n-\t\tif countErr != nil {\n-\t\t\treturn countErr\n-\t\t}\n-\t\tif countErr == nil && n > m.maxKeys {\n-\t\t\tif findErr := coll.Find(bson.M{\"site\": siteID}).Sort(\"+id\").Limit(n - m.maxKeys).All(&ids); findErr == nil {\n-\t\t\t\tbsonIDs := []bson.ObjectId{}\n-\t\t\t\tfor _, id := range ids {\n-\t\t\t\t\tbsonIDs = append(bsonIDs, id.ID)\n-\t\t\t\t}\n-\t\t\t\t_, removalErr := coll.RemoveAll(bson.M{\"_id\": bson.M{\"$in\": bsonIDs}})\n-\t\t\t\treturn removalErr\n-\t\t\t}\n-\t\t}\n-\t\treturn nil\n-\t})\n-\treturn err\n-}\n-\n-// Flush clears cache and calls postFlushFn async\n-func (m *mongoCache) Flush(req FlusherRequest) {\n-\terr := m.connection.WithCustomCollection(cacheCollection, func(coll *mgo.Collection) error {\n-\t\tq := bson.M{\"site\": req.siteID}\n-\t\tif len(req.scopes) > 0 {\n-\t\t\tq[\"scopes\"] = bson.M{\"$in\": req.scopes}\n-\t\t}\n-\t\t_, e := coll.RemoveAll(q)\n-\t\treturn e\n-\t})\n-\n-\tif err == nil && m.postFlushFn != nil {\n-\t\tm.postFlushFn()\n-\t}\n-}\n-\n-// prepare collections with all indexes\n-func (m *mongoCache) prepare() error {\n-\terrs := new(multierror.Error)\n-\treturn m.connection.WithCustomCollection(cacheCollection, func(coll *mgo.Collection) error {\n-\t\terrs = multierror.Append(errs, coll.EnsureIndexKey(\"site\", \"key\"))\n-\t\terrs = multierror.Append(errs, coll.EnsureIndexKey(\"site\", \"scopes\"))\n-\t\treturn errors.Wrapf(errs.ErrorOrNil(), \"can't create index for %s\", cacheCollection)\n-\t})\n-}\n-\n-func (m *mongoCache) allowed(data []byte) bool {\n-\tif m.maxValueSize > 0 && len(data) >= m.maxValueSize {\n-\t\treturn false\n-\t}\n-\treturn true\n-}\n-\n-func (m *mongoCache) setMaxValSize(max int) error {\n-\tm.maxValueSize = max\n-\tif max <= 0 {\n-\t\treturn errors.Errorf(\"negative size for MaxValSize, %d\", max)\n-\t}\n-\treturn nil\n-}\n-\n-func (m *mongoCache) setMaxKeys(max int) error {\n-\tm.maxKeys = max\n-\tif max <= 0 {\n-\t\treturn errors.Errorf(\"negative size for MaxKeys, %d\", max)\n-\t}\n-\treturn nil\n-}\n-\n-func (m *mongoCache) setMaxCacheSize(max int64) error {\n-\tm.maxCacheSize = max\n-\tif max <= 0 {\n-\t\treturn errors.Errorf(\"negative size or MaxCacheSize, %d\", max)\n-\t}\n-\treturn nil\n-}\n-\n-func (m *mongoCache) setPostFlushFn(postFlushFn func()) error {\n-\tm.postFlushFn = postFlushFn\n-\treturn nil\n-}"
    },
    {
      "sha": "aa478020bb5708e2bb999a8c3269d12085b7c257",
      "filename": "backend/app/rest/cache/mongo_test.go",
      "status": "removed",
      "additions": 0,
      "deletions": 312,
      "changes": 312,
      "blob_url": "https://github.com/umputun/remark/blob/bf716ac01fe94893d3079dd163fb2f15c4b62c39/backend/app/rest/cache/mongo_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/bf716ac01fe94893d3079dd163fb2f15c4b62c39/backend/app/rest/cache/mongo_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/cache/mongo_test.go?ref=bf716ac01fe94893d3079dd163fb2f15c4b62c39",
      "patch": "@@ -1,312 +0,0 @@\n-package cache\n-\n-import (\n-\t\"fmt\"\n-\t\"log\"\n-\t\"os\"\n-\t\"strings\"\n-\t\"sync\"\n-\t\"sync/atomic\"\n-\t\"testing\"\n-\t\"time\"\n-\n-\t\"github.com/globalsign/mgo\"\n-\t\"github.com/globalsign/mgo/bson\"\n-\t\"github.com/go-pkgz/mongo\"\n-\t\"github.com/pkg/errors\"\n-\t\"github.com/stretchr/testify/assert\"\n-\t\"github.com/stretchr/testify/require\"\n-)\n-\n-func TestMongoCache_Get(t *testing.T) {\n-\tconn, err := mongo.MakeTestConnection(t)\n-\tassert.NoError(t, err)\n-\tdefer mongo.RemoveTestCollections(t, conn, \"cache\")\n-\n-\tvar postFnCall, coldCalls int32\n-\tlc, err := NewMongoCache(conn, PostFlushFn(func() { atomic.AddInt32(&postFnCall, 1) }))\n-\trequire.Nil(t, err)\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key\"), func() ([]byte, error) {\n-\t\tatomic.AddInt32(&coldCalls, 1)\n-\t\treturn []byte(\"result\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result\", string(res))\n-\tassert.Equal(t, int32(1), atomic.LoadInt32(&coldCalls))\n-\tassert.Equal(t, int32(0), atomic.LoadInt32(&postFnCall))\n-\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key\"), func() ([]byte, error) {\n-\t\tatomic.AddInt32(&coldCalls, 1)\n-\t\treturn []byte(\"result\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result\", string(res))\n-\tassert.Equal(t, int32(1), atomic.LoadInt32(&coldCalls))\n-\tassert.Equal(t, int32(0), atomic.LoadInt32(&postFnCall))\n-\n-\tlc.Flush(Flusher(\"site\"))\n-\ttime.Sleep(100 * time.Millisecond) // let postFn to do its thing\n-\tassert.Equal(t, int32(1), atomic.LoadInt32(&postFnCall))\n-\n-\t_, err = lc.Get(NewKey(\"site\").ID(\"key\"), func() ([]byte, error) {\n-\t\treturn nil, errors.New(\"err\")\n-\t})\n-\tassert.NotNil(t, err)\n-}\n-\n-func TestMongoCache_MaxKeys(t *testing.T) {\n-\tvar postFnCall, coldCalls int32\n-\tconn, err := mongo.MakeTestConnection(t)\n-\tassert.NoError(t, err)\n-\tdefer mongo.RemoveTestCollections(t, conn, \"cache\")\n-\n-\tlc, err := NewMongoCache(conn, PostFlushFn(func() { atomic.AddInt32(&postFnCall, 1) }),\n-\t\tMaxKeys(5), MaxValSize(10))\n-\trequire.Nil(t, err)\n-\n-\t// put 5 keys to cache\n-\tfor i := 0; i < 5; i++ {\n-\t\tres, e := lc.Get(NewKey(\"site\").ID(fmt.Sprintf(\"key-%d\", i)), func() ([]byte, error) {\n-\t\t\tatomic.AddInt32(&coldCalls, 1)\n-\t\t\treturn []byte(fmt.Sprintf(\"result-%d\", i)), nil\n-\t\t})\n-\t\tassert.Nil(t, e)\n-\t\tassert.Equal(t, fmt.Sprintf(\"result-%d\", i), string(res))\n-\t\tassert.Equal(t, int32(i+1), atomic.LoadInt32(&coldCalls))\n-\t\tassert.Equal(t, int32(0), atomic.LoadInt32(&postFnCall))\n-\t}\n-\n-\t// check if really cached\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key-3\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-blah\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-3\", string(res), \"should be cached\")\n-\n-\t// try to cache after maxKeys reached\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-X\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-X\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-X\", string(res))\n-\n-\tconn.WithCustomCollection(\"cache\", func(coll *mgo.Collection) error {\n-\t\tn, e := coll.Find(bson.M{\"site\": \"site\"}).Count()\n-\t\trequire.NoError(t, e)\n-\t\trequire.Equal(t, 5, n)\n-\t\tr := mongoDoc{}\n-\t\trequire.NoError(t, coll.Find(bson.M{\"site\": \"site\"}).Sort(\"+_id\").One(&r))\n-\t\tassert.Equal(t, \"key-1\", r.Key)\n-\t\treturn nil\n-\t})\n-\n-\t// put to cache and make sure it cached\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-Z\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-Z\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-Z\", string(res))\n-\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-Z\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-Zzzz\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-Z\", string(res), \"got cached value\")\n-\n-\tconn.WithCustomCollection(\"cache\", func(coll *mgo.Collection) error {\n-\t\tn, e := coll.Find(bson.M{\"site\": \"site\"}).Count()\n-\t\trequire.NoError(t, e)\n-\t\trequire.Equal(t, 5, n)\n-\t\tr := mongoDoc{}\n-\t\trequire.NoError(t, coll.Find(bson.M{\"site\": \"site\"}).Sort(\"+_id\").One(&r))\n-\t\tassert.Equal(t, \"key-2\", r.Key)\n-\t\treturn nil\n-\t})\n-}\n-\n-func TestMongoCache_MaxValueSize(t *testing.T) {\n-\tconn, err := mongo.MakeTestConnection(t)\n-\tassert.NoError(t, err)\n-\tdefer mongo.RemoveTestCollections(t, conn, \"cache\")\n-\tlc, err := NewMongoCache(conn, MaxKeys(5), MaxValSize(10))\n-\trequire.Nil(t, err)\n-\n-\t// put good size value to cache and make sure it cached\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key-Z\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-Z\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-Z\", string(res))\n-\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-Z\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-Zzzz\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-Z\", string(res), \"got cached value\")\n-\n-\t// put too big value to cache and make sure it is not cached\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-Big\"), func() ([]byte, error) {\n-\t\treturn []byte(\"1234567890\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"1234567890\", string(res))\n-\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key-Big\"), func() ([]byte, error) {\n-\t\treturn []byte(\"result-big\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"result-big\", string(res), \"got not cached value\")\n-}\n-func TestMongoCache_Parallel(t *testing.T) {\n-\tvar coldCalls int32\n-\tconn, err := mongo.MakeTestConnection(t)\n-\tassert.NoError(t, err)\n-\tdefer mongo.RemoveTestCollections(t, conn, \"cache\")\n-\tlc, err := NewMongoCache(conn)\n-\trequire.Nil(t, err)\n-\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key\").Scopes(\"s1\", \"s2\"), func() ([]byte, error) {\n-\t\treturn []byte(\"value\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"value\", string(res))\n-\twg := sync.WaitGroup{}\n-\tfor i := 0; i < 100; i++ {\n-\t\twg.Add(1)\n-\t\ti := i\n-\t\tgo func() {\n-\t\t\tdefer wg.Done()\n-\t\t\tr, err := lc.Get(NewKey(\"site\").ID(\"key\").Scopes(\"s1\", \"s2\"), func() ([]byte, error) {\n-\t\t\t\tatomic.AddInt32(&coldCalls, 1)\n-\t\t\t\treturn []byte(fmt.Sprintf(\"result-%d\", i)), nil\n-\t\t\t})\n-\t\t\trequire.Nil(t, err)\n-\t\t\tv := string(r)\n-\t\t\tassert.Equal(t, \"value\", v, \"th=%d\", i)\n-\t\t}()\n-\t}\n-\twg.Wait()\n-\tassert.Equal(t, int32(0), atomic.LoadInt32(&coldCalls))\n-}\n-\n-func TestMongoCache_Flush(t *testing.T) {\n-\tconn, err := mongo.MakeTestConnection(t)\n-\tassert.NoError(t, err)\n-\tdefer mongo.RemoveTestCollections(t, conn, \"cache\")\n-\tlc, err := NewMongoCache(conn)\n-\trequire.Nil(t, err)\n-\n-\taddToCache := func(id string, scopes ...string) {\n-\t\tres, err := lc.Get(NewKey(\"site\").ID(id).Scopes(scopes...), func() ([]byte, error) {\n-\t\t\treturn []byte(\"value\" + id), nil\n-\t\t})\n-\t\trequire.Nil(t, err)\n-\t\trequire.Equal(t, \"value\"+id, string(res))\n-\t}\n-\n-\tinit := func() {\n-\t\tlc.Flush(Flusher(\"site\"))\n-\t\taddToCache(\"key1\", \"s1\", \"s2\")\n-\t\taddToCache(\"key2\", \"s1\", \"s2\", \"s3\")\n-\t\taddToCache(\"key3\", \"s1\", \"s2\", \"s3\")\n-\t\taddToCache(\"key4\", \"s2\", \"s3\")\n-\t\taddToCache(\"key5\", \"s2\")\n-\t\taddToCache(\"key6\")\n-\t\taddToCache(\"key7\", \"s4\", \"s3\")\n-\t\trequire.Equal(t, 7, mongoCacheSize(t, conn), \"cache init\")\n-\t}\n-\n-\ttbl := []struct {\n-\t\tscopes []string\n-\t\tleft   int\n-\t\tmsg    string\n-\t}{\n-\t\t{[]string{}, 0, \"full flush, no scopes\"},\n-\t\t{[]string{\"s0\"}, 7, \"flush wrong scope\"},\n-\t\t{[]string{\"s1\"}, 4, \"flush s1 scope\"},\n-\t\t{[]string{\"s2\", \"s1\"}, 2, \"flush s2+s1 scope\"},\n-\t\t{[]string{\"s1\", \"s2\"}, 2, \"flush s1+s2 scope\"},\n-\t\t{[]string{\"s1\", \"s2\", \"s4\"}, 1, \"flush s1+s2+s4 scope\"},\n-\t\t{[]string{\"s1\", \"s2\", \"s3\"}, 1, \"flush s1+s2+s3 scope\"},\n-\t\t{[]string{\"s1\", \"s2\", \"ss\"}, 2, \"flush s1+s2+wrong scope\"},\n-\t}\n-\n-\tfor i, tt := range tbl {\n-\t\tinit()\n-\t\tlc.Flush(Flusher(\"site\").Scopes(tt.scopes...))\n-\t\tassert.Equal(t, tt.left, mongoCacheSize(t, conn), \"keys size, %s #%d\", tt.msg, i)\n-\t}\n-}\n-\n-func TestMongoCache_Scopes(t *testing.T) {\n-\tconn, err := mongo.MakeTestConnection(t)\n-\tassert.NoError(t, err)\n-\tdefer mongo.RemoveTestCollections(t, conn, \"cache\")\n-\tlc, err := NewMongoCache(conn)\n-\trequire.Nil(t, err)\n-\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key\").Scopes(\"s1\", \"s2\"), func() ([]byte, error) {\n-\t\treturn []byte(\"value\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"value\", string(res))\n-\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key2\").Scopes(\"s2\"), func() ([]byte, error) {\n-\t\treturn []byte(\"value2\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"value2\", string(res))\n-\n-\tassert.Equal(t, 2, mongoCacheSize(t, conn))\n-\tlc.Flush(Flusher(\"site\").Scopes(\"s1\"))\n-\tassert.Equal(t, 1, mongoCacheSize(t, conn))\n-\n-\t_, err = lc.Get(NewKey(\"site\").ID(\"key2\").Scopes(\"s2\"), func() ([]byte, error) {\n-\t\tassert.Fail(t, \"should stay\")\n-\t\treturn nil, nil\n-\t})\n-\tassert.Nil(t, err)\n-\tres, err = lc.Get(NewKey(\"site\").ID(\"key\").Scopes(\"s1\", \"s2\"), func() ([]byte, error) {\n-\t\treturn []byte(\"value-upd\"), nil\n-\t})\n-\tassert.Nil(t, err)\n-\tassert.Equal(t, \"value-upd\", string(res), \"was deleted, update\")\n-}\n-\n-func BenchmarkMongoCache(b *testing.B) {\n-\tlog.Print(\"[DEBUG] connect to mongo test instance\")\n-\tsrv, err := mongo.NewServerWithURL(os.Getenv(\"MONGO_TEST\"), 10*time.Second)\n-\tassert.Nil(b, err, \"failed to dial\")\n-\tcollName := fmt.Sprintf(\"test_%d\", time.Now().Nanosecond())\n-\tconn := mongo.NewConnection(srv, \"test\", collName)\n-\n-\tdata := \"\"\n-\tfor i := 0; i < 1000; i++ {\n-\t\tdata += \"x\"\n-\t}\n-\tlc, err := NewMongoCache(conn)\n-\trequire.Nil(b, err)\n-\tres, err := lc.Get(NewKey(\"site\").ID(\"key\").Scopes(\"s1\", \"s2\"), func() ([]byte, error) {\n-\t\treturn []byte(data), nil\n-\t})\n-\trequire.Nil(b, err)\n-\trequire.True(b, strings.HasPrefix(string(res), \"xxxx\"), string(res))\n-\n-\tkey := NewKey(\"site\").ID(\"key\").Scopes(\"s1\", \"s2\")\n-\tb.ResetTimer()\n-\tfor i := 0; i < b.N; i++ {\n-\t\tlc.Get(key, func() ([]byte, error) {\n-\t\t\tb.Fail()\n-\t\t\treturn nil, nil\n-\t\t})\n-\t}\n-}\n-\n-func mongoCacheSize(t *testing.T, conn *mongo.Connection) (count int) {\n-\tconn.WithCustomCollection(\"cache\", func(coll *mgo.Collection) (e error) {\n-\t\tcount, e = coll.Find(bson.M{\"site\": \"site\"}).Count()\n-\t\trequire.NoError(t, e)\n-\t\treturn e\n-\t})\n-\treturn count\n-}"
    },
    {
      "sha": "c836416192da3691281691dfb0d16e177dfd068b",
      "filename": "backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/davecgh/go-spew/LICENSE",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/davecgh/go-spew/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/davecgh/go-spew/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/davecgh/go-spew/LICENSE?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -0,0 +1,15 @@\n+ISC License\n+\n+Copyright (c) 2012-2016 Dave Collins <dave@davec.name>\n+\n+Permission to use, copy, modify, and distribute this software for any\n+purpose with or without fee is hereby granted, provided that the above\n+copyright notice and this permission notice appear in all copies.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n+WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n+MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n+ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n+ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n+OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
    },
    {
      "sha": "d99f02ffac5185e2550770d33333a67e2cf2092b",
      "filename": "backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/go-chi/chi/LICENSE",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/go-chi/chi/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/go-chi/chi/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/go-chi/chi/LICENSE?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -0,0 +1,20 @@\n+Copyright (c) 2015-present Peter Kieltyka (https://github.com/pkieltyka), Google Inc.\n+\n+MIT License\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy of\n+this software and associated documentation files (the \"Software\"), to deal in\n+the Software without restriction, including without limitation the rights to\n+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n+the Software, and to permit persons to whom the Software is furnished to do so,\n+subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    {
      "sha": "4344db78a1fc8f5d25eaf6f7a6f9eb30ada8d35a",
      "filename": "backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/go-chi/render/LICENSE",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/go-chi/render/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/go-chi/render/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/go-chi/render/LICENSE?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -0,0 +1,20 @@\n+Copyright (c) 2016-Present https://github.com/go-chi authors\n+\n+MIT License\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy of\n+this software and associated documentation files (the \"Software\"), to deal in\n+the Software without restriction, including without limitation the rights to\n+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n+the Software, and to permit persons to whom the Software is furnished to do so,\n+subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    {
      "sha": "835ba3e755cef8c0dde475f1ebfd41e4ba0c79bf",
      "filename": "backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/pkg/errors/LICENSE",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/pkg/errors/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/pkg/errors/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/pkg/errors/LICENSE?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -0,0 +1,23 @@\n+Copyright (c) 2015, Dave Cheney <dave@cheney.net>\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are met:\n+\n+* Redistributions of source code must retain the above copyright notice, this\n+  list of conditions and the following disclaimer.\n+\n+* Redistributions in binary form must reproduce the above copyright notice,\n+  this list of conditions and the following disclaimer in the documentation\n+  and/or other materials provided with the distribution.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n+FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    {
      "sha": "c67dad612a3dfca2b84599c640798d7be7d46728",
      "filename": "backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/pmezard/go-difflib/LICENSE",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/pmezard/go-difflib/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/pmezard/go-difflib/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/pmezard/go-difflib/LICENSE?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -0,0 +1,27 @@\n+Copyright (c) 2013, Patrick Mezard\n+All rights reserved.\n+\n+Redistribution and use in source and binary forms, with or without\n+modification, are permitted provided that the following conditions are\n+met:\n+\n+    Redistributions of source code must retain the above copyright\n+notice, this list of conditions and the following disclaimer.\n+    Redistributions in binary form must reproduce the above copyright\n+notice, this list of conditions and the following disclaimer in the\n+documentation and/or other materials provided with the distribution.\n+    The names of its contributors may not be used to endorse or promote\n+products derived from this software without specific prior written\n+permission.\n+\n+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n+IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n+TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n+PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n+TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    {
      "sha": "473b670a7c6195561168a94337416f32a4db8e73",
      "filename": "backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/stretchr/testify/LICENSE",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/stretchr/testify/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/stretchr/testify/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/.vendor/github.com/stretchr/testify/LICENSE?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -0,0 +1,22 @@\n+Copyright (c) 2012 - 2013 Mat Ryer and Tyler Bunnell\n+\n+Please consider promoting this project if you find it useful.\n+\n+Permission is hereby granted, free of charge, to any person \n+obtaining a copy of this software and associated documentation \n+files (the \"Software\"), to deal in the Software without restriction, \n+including without limitation the rights to use, copy, modify, merge, \n+publish, distribute, sublicense, and/or sell copies of the Software, \n+and to permit persons to whom the Software is furnished to do so, \n+subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included\n+in all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, \n+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES \n+OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \n+IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \n+DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT \n+OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \n+OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
    },
    {
      "sha": "ca1252144e6f66d41b148c46e4e212aa0d3ff265",
      "filename": "backend/vendor/github.com/go-pkgz/rest/LICENSE",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/LICENSE",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/LICENSE",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/LICENSE?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -0,0 +1,21 @@\n+MIT License\n+\n+Copyright (c) 2018 Umputun\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE."
    },
    {
      "sha": "8b0cef8f956bf96be91b1ee44fd07dfc5dcc4b2e",
      "filename": "backend/vendor/github.com/go-pkgz/rest/cache/README.md",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/cache/README.md",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/cache/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/cache/README.md?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -0,0 +1,43 @@\n+\n+## Cache wrapper for web applications. \n+\n+The primary goal is to simplify caching of responses. \n+\n+Adds guava-style loading cache and support of scopes for partial flushes. \n+Provides in-memory `NewMemoryCache` on top of [hashicorp/golang-lru](\"https://github.com/hashicorp/golang-lru\") and \n+defines basic interface for other implementations.\n+\n+In addition to `Get` and `Flush` methods, memory cache also support limits for a single value size, number of keys and total memory utilization. `PostFlushFn` adds ability to call a function on flush completion.\n+\n+## Install and update\n+\n+`go get -u github.com/go-pkgz/rest/cache`\n+\n+## Technical details\n+\n+- Cache keeps data in a simple key:value format. \n+- Key is a type, created with `Key(site_id)` where `site_id` represents independent bucket in the cache. For simple cases can be set to an empty string.\n+- Particular key set by `Key.ID(string)`\n+- Key may contain optional scopes (list of string). They not affect retrieval and used for partial (scoped) invalidation only.\n+- Cache is safe for concurrent use.\n+- Value is []byte.\n+- `Get` method returns from the cache if the key already in. Overwise executes passed function and saves results.\n+- Special fake implementation `cache.Nop` satisfies `LoadingCache` interface and can be used to disable any caching\n+\n+## Usage\n+\n+```golang\n+    // create in-memory cache with max keys=50, total (max) size=2000 and max cached size of a record = 200\n+    lc, err := cache.NewMemoryCache(cache.MaxKeys(50), cacheMaxCacheSize(2000), cache.MaxValSize(200)) \n+    if err != nil {\n+        panic(err)\n+    }\n+    ...\n+\n+    // load cached value for key1. Call func if not cached yet or evicted\n+    res, err = lc.Get(cache.NewKey(\"site1\").ID(\"key1\").Scopes(\"scope1\"), func() ([]byte, error) {\n+\t\treturn []byte(\"1234567890\"), nil\n+    }) \n+    \n+    lc.Flush(\"scope1\") // invalidate cache for scope1\n+```"
    },
    {
      "sha": "2270cd8ac76090c94a156d6fc53af231146eccfd",
      "filename": "backend/vendor/github.com/go-pkgz/rest/cache/cache.go",
      "status": "renamed",
      "additions": 0,
      "deletions": 14,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/cache/cache.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/cache/cache.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/cache/cache.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "patch": "@@ -1,12 +1,9 @@\n package cache\n \n import (\n-\t\"net/http\"\n \t\"strings\"\n \n \t\"github.com/pkg/errors\"\n-\n-\t\"github.com/umputun/remark/backend/app/rest\"\n )\n \n // LoadingCache defines interface for caching\n@@ -89,17 +86,6 @@ func (f FlusherRequest) Scopes(scopes ...string) FlusherRequest {\n \treturn f\n }\n \n-// URLKey gets url from request to use it as cache key\n-// admins will have different keys in order to prevent leak of admin-only data to regular users\n-func URLKey(r *http.Request) string {\n-\tadminPrefix := \"admin!!\"\n-\tkey := strings.TrimPrefix(r.URL.String(), adminPrefix)          // prevents attach with fake url to get admin view\n-\tif user, err := rest.GetUserInfo(r); err == nil && user.Admin { // make separate cache key for admins\n-\t\tkey = adminPrefix + key\n-\t}\n-\treturn key\n-}\n-\n // Nop does nothing for caching, passing fn call only\n type Nop struct{}\n ",
      "previous_filename": "backend/app/rest/cache/cache.go"
    },
    {
      "sha": "a40153b0c9f8e4c3b0741e9c8a812615c0adb970",
      "filename": "backend/vendor/github.com/go-pkgz/rest/cache/memory.go",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/cache/memory.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/cache/memory.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/cache/memory.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "previous_filename": "backend/app/rest/cache/memory.go"
    },
    {
      "sha": "f0911eb24c1acaef5b785dbe4cf2dd1e8029711a",
      "filename": "backend/vendor/github.com/go-pkgz/rest/cache/options.go",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/umputun/remark/blob/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/cache/options.go",
      "raw_url": "https://github.com/umputun/remark/raw/2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1/backend/vendor/github.com/go-pkgz/rest/cache/options.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/cache/options.go?ref=2ecc08fb3ebc3c0c603e3cf584a4a39ce98f41d1",
      "previous_filename": "backend/app/rest/cache/options.go"
    }
  ]
}
