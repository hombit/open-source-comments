{
  "sha": "5ac1e3d4cd345d75fc02eed3d1c24a23cd915ffa",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo1YWMxZTNkNGNkMzQ1ZDc1ZmMwMmVlZDNkMWMyNGEyM2NkOTE1ZmZh",
  "commit": {
    "author": {
      "name": "Régis Hanol",
      "email": "regis@hanol.fr",
      "date": "2019-01-04T16:19:44Z"
    },
    "committer": {
      "name": "Régis Hanol",
      "email": "regis@hanol.fr",
      "date": "2019-01-04T16:21:16Z"
    },
    "message": "FIX: emojis are hard :shrug:",
    "tree": {
      "sha": "5a33fbbdc822da2e96fc115c856b3eff11db21e8",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/5a33fbbdc822da2e96fc115c856b3eff11db21e8"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/5ac1e3d4cd345d75fc02eed3d1c24a23cd915ffa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/5ac1e3d4cd345d75fc02eed3d1c24a23cd915ffa",
  "html_url": "https://github.com/discourse/discourse/commit/5ac1e3d4cd345d75fc02eed3d1c24a23cd915ffa",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/5ac1e3d4cd345d75fc02eed3d1c24a23cd915ffa/comments",
  "author": {
    "login": "ZogStriP",
    "id": 362783,
    "node_id": "MDQ6VXNlcjM2Mjc4Mw==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/362783?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZogStriP",
    "html_url": "https://github.com/ZogStriP",
    "followers_url": "https://api.github.com/users/ZogStriP/followers",
    "following_url": "https://api.github.com/users/ZogStriP/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZogStriP/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZogStriP/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZogStriP/subscriptions",
    "organizations_url": "https://api.github.com/users/ZogStriP/orgs",
    "repos_url": "https://api.github.com/users/ZogStriP/repos",
    "events_url": "https://api.github.com/users/ZogStriP/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZogStriP/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ZogStriP",
    "id": 362783,
    "node_id": "MDQ6VXNlcjM2Mjc4Mw==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/362783?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZogStriP",
    "html_url": "https://github.com/ZogStriP",
    "followers_url": "https://api.github.com/users/ZogStriP/followers",
    "following_url": "https://api.github.com/users/ZogStriP/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZogStriP/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZogStriP/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZogStriP/subscriptions",
    "organizations_url": "https://api.github.com/users/ZogStriP/orgs",
    "repos_url": "https://api.github.com/users/ZogStriP/repos",
    "events_url": "https://api.github.com/users/ZogStriP/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZogStriP/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f400830575d800e7fb2fc206f0967773af120fa4",
      "url": "https://api.github.com/repos/discourse/discourse/commits/f400830575d800e7fb2fc206f0967773af120fa4",
      "html_url": "https://github.com/discourse/discourse/commit/f400830575d800e7fb2fc206f0967773af120fa4"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 30,
    "deletions": 16
  },
  "files": [
    {
      "sha": "f1fc15e7aab8ff8c7fc63217c3bae5a0fba73450",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/emoji.js.es6",
      "status": "modified",
      "additions": 30,
      "deletions": 16,
      "changes": 46,
      "blob_url": "https://github.com/discourse/discourse/blob/5ac1e3d4cd345d75fc02eed3d1c24a23cd915ffa/app/assets/javascripts/pretty-text/engines/discourse-markdown/emoji.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/5ac1e3d4cd345d75fc02eed3d1c24a23cd915ffa/app/assets/javascripts/pretty-text/engines/discourse-markdown/emoji.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/emoji.js.es6?ref=5ac1e3d4cd345d75fc02eed3d1c24a23cd915ffa",
      "patch": "@@ -122,16 +122,22 @@ function getEmojiTokenByTranslation(content, pos, state) {\n   let found = null;\n \n   while (t.length > 0 && pos < content.length) {\n+    let matched = false;\n     let code = content.charCodeAt(pos);\n \n     for (let i = 0; i < t.length; i++) {\n       if (t[i][0] === code) {\n+        matched = true;\n         found = t[i][2];\n         t = t[i][1];\n         break;\n       }\n     }\n \n+    if (!matched) {\n+      return;\n+    }\n+\n     pos++;\n   }\n \n@@ -164,26 +170,32 @@ function getEmojiTokenByTranslation(content, pos, state) {\n   }\n }\n \n-function applyEmoji(content, state, emojiUnicodeReplacer, enableShortcuts, inlineEmoji) {\n+function applyEmoji(\n+  content,\n+  state,\n+  emojiUnicodeReplacer,\n+  enableShortcuts,\n+  inlineEmoji\n+) {\n   let result = null;\n-  let contentToken = null;\n   let start = 0;\n \n   if (emojiUnicodeReplacer) {\n     content = emojiUnicodeReplacer(content);\n   }\n \n-  let endToken = content.length;\n+  let end = content.length;\n \n   for (let i = 0; i < content.length - 1; i++) {\n     let offset = 0;\n     let token = null;\n-    const emojiName = getEmojiName(content, i, state, inlineEmoji);\n \n-    if (emojiName) {\n-      token = getEmojiTokenByName(emojiName, state);\n+    const name = getEmojiName(content, i, state, inlineEmoji);\n+\n+    if (name) {\n+      token = getEmojiTokenByName(name, state);\n       if (token) {\n-        offset = emojiName.length + 2;\n+        offset = name.length + 2;\n       }\n     }\n \n@@ -199,22 +211,24 @@ function applyEmoji(content, state, emojiUnicodeReplacer, enableShortcuts, inlin\n \n     if (token) {\n       result = result || [];\n+\n       if (i - start > 0) {\n-        contentToken = new state.Token(\"text\", \"\", 0);\n-        contentToken.content = content.slice(start, i);\n-        result.push(contentToken);\n+        let text = new state.Token(\"text\", \"\", 0);\n+        text.content = content.slice(start, i);\n+        result.push(text);\n       }\n \n       result.push(token);\n-      i += offset;\n-      endToken = start = i;\n+\n+      end = start = i + offset;\n+      i += offset - 1;\n     }\n   }\n \n-  if (endToken < content.length) {\n-    contentToken = new state.Token(\"text\", \"\", 0);\n-    contentToken.content = content.slice(endToken);\n-    result.push(contentToken);\n+  if (end < content.length) {\n+    let text = new state.Token(\"text\", \"\", 0);\n+    text.content = content.slice(end);\n+    result.push(text);\n   }\n \n   return result;"
    }
  ]
}
