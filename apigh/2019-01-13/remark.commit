{
  "sha": "cfe8391da5af45b3959db7c803c13d0cc39c5be4",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmNmZTgzOTFkYTVhZjQ1YjM5NTlkYjdjODAzYzEzZDBjYzM5YzViZTQ=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-01-12T04:51:43Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-01-12T04:51:43Z"
    },
    "message": "revendor with lgr 0.2",
    "tree": {
      "sha": "da95e508abd098b8481fe40ad5bf8d526f6a6650",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/da95e508abd098b8481fe40ad5bf8d526f6a6650"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/cfe8391da5af45b3959db7c803c13d0cc39c5be4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/cfe8391da5af45b3959db7c803c13d0cc39c5be4",
  "html_url": "https://github.com/umputun/remark/commit/cfe8391da5af45b3959db7c803c13d0cc39c5be4",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/cfe8391da5af45b3959db7c803c13d0cc39c5be4/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8b0926a3380472113f275481a3d3c92d43aafc0b",
      "url": "https://api.github.com/repos/umputun/remark/commits/8b0926a3380472113f275481a3d3c92d43aafc0b",
      "html_url": "https://github.com/umputun/remark/commit/8b0926a3380472113f275481a3d3c92d43aafc0b"
    }
  ],
  "stats": {
    "total": 107,
    "additions": 81,
    "deletions": 26
  },
  "files": [
    {
      "sha": "ba8e88e0f775309a0cb5f87bd4e16cd9c28215c4",
      "filename": "backend/Gopkg.lock",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/cfe8391da5af45b3959db7c803c13d0cc39c5be4/backend/Gopkg.lock",
      "raw_url": "https://github.com/umputun/remark/raw/cfe8391da5af45b3959db7c803c13d0cc39c5be4/backend/Gopkg.lock",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/Gopkg.lock?ref=cfe8391da5af45b3959db7c803c13d0cc39c5be4",
      "patch": "@@ -126,12 +126,12 @@\n   version = \"v0.3.1\"\n \n [[projects]]\n-  digest = \"1:01f2a0dea4785957fb0832580a244e693c710130e2785e4a2f73cc7872cdfa82\"\n+  digest = \"1:479ca4406d1521b92615374d807581ccfdb1b971abc3bac7e29c1fc83c988745\"\n   name = \"github.com/go-pkgz/lgr\"\n   packages = [\".\"]\n   pruneopts = \"UT\"\n-  revision = \"5bea4c7108c41005f69ad77c05f516b2228837e2\"\n-  version = \"v0.1.3\"\n+  revision = \"07dcefe903e40f6c93674e1b85f84764552665b0\"\n+  version = \"v0.2.0\"\n \n [[projects]]\n   digest = \"1:1212e114344a5cdcc834ea69e19d456eef230f9784659080fee67e02ba2cb574\""
    },
    {
      "sha": "c49963ab546688dba050a859fb1c28e78b8cdba2",
      "filename": "backend/app/main.go",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/cfe8391da5af45b3959db7c803c13d0cc39c5be4/backend/app/main.go",
      "raw_url": "https://github.com/umputun/remark/raw/cfe8391da5af45b3959db7c803c13d0cc39c5be4/backend/app/main.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/main.go?ref=cfe8391da5af45b3959db7c803c13d0cc39c5be4",
      "patch": "@@ -62,8 +62,10 @@ func main() {\n \n func setupLog(dbg bool) {\n \tif dbg {\n-\t\tlog.Setup(log.Debug, log.Caller)\n+\t\tlog.Setup(log.Debug, log.CallerFile, log.Msec, log.LevelBraces)\n+\t\treturn\n \t}\n+\tlog.Setup(log.Msec, log.LevelBraces)\n }\n \n // getDump reads runtime stack and returns as a string"
    },
    {
      "sha": "a0d9ed4f2783f9ea9f66b43e960207ee2a86d38b",
      "filename": "backend/vendor/github.com/go-pkgz/lgr/interface.go",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark/blob/cfe8391da5af45b3959db7c803c13d0cc39c5be4/backend/vendor/github.com/go-pkgz/lgr/interface.go",
      "raw_url": "https://github.com/umputun/remark/raw/cfe8391da5af45b3959db7c803c13d0cc39c5be4/backend/vendor/github.com/go-pkgz/lgr/interface.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/lgr/interface.go?ref=cfe8391da5af45b3959db7c803c13d0cc39c5be4",
      "patch": "@@ -1,6 +1,9 @@\n package lgr\n \n-import stdlog \"log\"\n+import (\n+\tstdlog \"log\"\n+\t\"os\"\n+)\n \n var def = New() // default logger doesn't allow DEBUG and doesn't add caller info\n \n@@ -31,6 +34,12 @@ func Print(line string) {\n \tdef.Logf(line)\n }\n \n+// Fatalf simplifies replacement of std logger\n+func Fatalf(format string, args ...interface{}) {\n+\tdef.Logf(format, args...)\n+\tos.Exit(1)\n+}\n+\n // Setup default logger with options\n func Setup(opts ...Option) {\n \tdef = New(opts...)"
    },
    {
      "sha": "02808d790d695393111e7b27036ecefd1abab831",
      "filename": "backend/vendor/github.com/go-pkgz/lgr/logger.go",
      "status": "modified",
      "additions": 65,
      "deletions": 21,
      "changes": 86,
      "blob_url": "https://github.com/umputun/remark/blob/cfe8391da5af45b3959db7c803c13d0cc39c5be4/backend/vendor/github.com/go-pkgz/lgr/logger.go",
      "raw_url": "https://github.com/umputun/remark/raw/cfe8391da5af45b3959db7c803c13d0cc39c5be4/backend/vendor/github.com/go-pkgz/lgr/logger.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/lgr/logger.go?ref=cfe8391da5af45b3959db7c803c13d0cc39c5be4",
      "patch": "@@ -14,13 +14,15 @@ var levels = []string{\"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"PANIC\", \"FATAL\"}\n \n // Logger provided simple logger with basic support of levels. Thread safe\n type Logger struct {\n-\tstdout, stderr io.Writer\n-\tdbg            bool\n-\tlock           sync.Mutex\n-\tcallers        bool\n-\tnow            nowFn\n-\tfatal          panicFn\n-\tskipCallers    int\n+\tstdout, stderr         io.Writer\n+\tdbg                    bool\n+\tlock                   sync.Mutex\n+\tcallerFile, callerFunc bool\n+\tnow                    nowFn\n+\tfatal                  panicFn\n+\tskipCallers            int\n+\tlevelBraces            bool\n+\tmsec                   bool\n }\n \n type nowFn func() time.Time\n@@ -48,24 +50,43 @@ func New(options ...Option) *Logger {\n // FATAL adds runtime stack and os.exit(1), like panic.\n func (l *Logger) Logf(format string, args ...interface{}) {\n \n+\t// format timestamp with or without msecs\n+\tts := func() (res string) {\n+\t\tif l.msec {\n+\t\t\treturn l.now().Format(\"2006/01/02 15:04:05.000 \")\n+\t\t}\n+\t\treturn l.now().Format(\"2006/01/02 15:04:05 \")\n+\t}\n+\n \tlv, msg := l.extractLevel(fmt.Sprintf(format, args...))\n+\tif lv == \"DEBUG \" && !l.dbg {\n+\t\treturn\n+\t}\n \tvar bld strings.Builder\n-\tbld.WriteString(l.now().Format(\"2006/01/02 15:04:05.000 \"))\n+\tbld.WriteString(ts())\n \tbld.WriteString(lv)\n \n-\tif l.dbg && l.callers {\n+\tif l.dbg && (l.callerFile || l.callerFunc) {\n \t\tif pc, file, line, ok := runtime.Caller(l.skipCallers); ok {\n-\t\t\tfnameElems := strings.Split(file, \"/\")\n-\t\t\tfuncNameElems := strings.Split(runtime.FuncForPC(pc).Name(), \"/\")\n-\t\t\tsrcFileInfo := fmt.Sprintf(\"{%s:%d %s} \", strings.Join(fnameElems[len(fnameElems)-2:], \"/\"),\n-\t\t\t\tline, funcNameElems[len(funcNameElems)-1])\n+\n+\t\t\tfuncName := \"\"\n+\t\t\tif l.callerFunc {\n+\t\t\t\tfuncNameElems := strings.Split(runtime.FuncForPC(pc).Name(), \"/\")\n+\t\t\t\tfuncName = funcNameElems[len(funcNameElems)-1]\n+\t\t\t}\n+\t\t\tfileInfo := \"\"\n+\t\t\tif l.callerFile {\n+\t\t\t\tfnameElems := strings.Split(file, \"/\")\n+\t\t\t\tfileInfo = fmt.Sprintf(\"%s:%d\", strings.Join(fnameElems[len(fnameElems)-2:], \"/\"), line)\n+\t\t\t\tif l.callerFunc {\n+\t\t\t\t\tfileInfo += \" \"\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tsrcFileInfo := fmt.Sprintf(\"{%s%s} \", fileInfo, funcName)\n \t\t\tbld.WriteString(srcFileInfo)\n \t\t}\n \t}\n \n-\tif lv == \"DEBUG \" && !l.dbg {\n-\t\treturn\n-\t}\n \tbld.WriteString(msg)  //nolint\n \tbld.WriteString(\"\\n\") //nolint\n \n@@ -86,19 +107,27 @@ func (l *Logger) Logf(format string, args ...interface{}) {\n }\n \n func (l *Logger) extractLevel(line string) (level, msg string) {\n+\n+\tbrace := func(b string) string {\n+\t\tif l.levelBraces {\n+\t\t\treturn b\n+\t\t}\n+\t\treturn \"\"\n+\t}\n+\n \tspaces := \" \"\n \tfor _, lv := range levels {\n \t\tif strings.HasPrefix(line, lv) {\n \t\t\tif len(lv) == 4 {\n \t\t\t\tspaces = \"  \"\n \t\t\t}\n-\t\t\treturn lv + spaces, line[len(lv)+1:]\n+\t\t\treturn brace(\"[\") + lv + brace(\"]\") + spaces, line[len(lv)+1:]\n \t\t}\n \t\tif strings.HasPrefix(line, \"[\"+lv+\"]\") {\n \t\t\tif len(lv) == 4 {\n \t\t\t\tspaces = \"  \"\n \t\t\t}\n-\t\t\treturn lv + spaces, line[len(lv)+3:]\n+\t\t\treturn brace(\"[\") + lv + brace(\"]\") + spaces, line[len(lv)+3:]\n \t\t}\n \t}\n \treturn \"\", line\n@@ -137,7 +166,22 @@ func Debug(l *Logger) {\n \tl.dbg = true\n }\n \n-// Caller adds caller info with func, file, and line number\n-func Caller(l *Logger) {\n-\tl.callers = true\n+// CallerFile adds caller info with file, and line number\n+func CallerFile(l *Logger) {\n+\tl.callerFile = true\n+}\n+\n+// CallerFunc adds caller info with function name\n+func CallerFunc(l *Logger) {\n+\tl.callerFunc = true\n+}\n+\n+// LevelBraces adds [] to level\n+func LevelBraces(l *Logger) {\n+\tl.levelBraces = true\n+}\n+\n+// Msec adds .msec to timestamp\n+func Msec(l *Logger) {\n+\tl.msec = true\n }"
    }
  ]
}
