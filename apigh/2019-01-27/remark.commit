{
  "sha": "c7468184ba08cd8d607acf4ed22dd9bce381788e",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmM3NDY4MTg0YmEwOGNkOGQ2MDdhY2Y0ZWQyMmRkOWJjZTM4MTc4OGU=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-01-26T23:05:54Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-01-26T23:05:54Z"
    },
    "message": "fix unexpected blocking if +1 vote in positive score only mode on 0",
    "tree": {
      "sha": "e7648ed7a4de56567372dd1f288f583b22fda613",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/e7648ed7a4de56567372dd1f288f583b22fda613"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/c7468184ba08cd8d607acf4ed22dd9bce381788e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/c7468184ba08cd8d607acf4ed22dd9bce381788e",
  "html_url": "https://github.com/umputun/remark/commit/c7468184ba08cd8d607acf4ed22dd9bce381788e",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/c7468184ba08cd8d607acf4ed22dd9bce381788e/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cb5fc79dbe522acb4edae3e214254f114cb23fa0",
      "url": "https://api.github.com/repos/umputun/remark/commits/cb5fc79dbe522acb4edae3e214254f114cb23fa0",
      "html_url": "https://github.com/umputun/remark/commit/cb5fc79dbe522acb4edae3e214254f114cb23fa0"
    }
  ],
  "stats": {
    "total": 6,
    "additions": 5,
    "deletions": 1
  },
  "files": [
    {
      "sha": "eadd6059c05becf1733b00b2cda84dcd913fdfd6",
      "filename": "backend/app/store/service/service.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/c7468184ba08cd8d607acf4ed22dd9bce381788e/backend/app/store/service/service.go",
      "raw_url": "https://github.com/umputun/remark/raw/c7468184ba08cd8d607acf4ed22dd9bce381788e/backend/app/store/service/service.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/service/service.go?ref=c7468184ba08cd8d607acf4ed22dd9bce381788e",
      "patch": "@@ -155,7 +155,7 @@ func (s *DataStore) Vote(locator store.Locator, commentID string, userID string,\n \t\treturn comment, errors.Errorf(\"maximum number of votes exceeded for comment %s\", commentID)\n \t}\n \n-\tif s.PositiveScore && comment.Score <= 0 {\n+\tif s.PositiveScore && comment.Score <= 0 && !val {\n \t\treturn comment, errors.Errorf(\"minimal score reached for comment %s\", commentID)\n \t}\n "
    },
    {
      "sha": "82fd5653bf757e9c13dd3bc2b7efb7bb8ba97b3d",
      "filename": "backend/app/store/service/service_test.go",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/c7468184ba08cd8d607acf4ed22dd9bce381788e/backend/app/store/service/service_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/c7468184ba08cd8d607acf4ed22dd9bce381788e/backend/app/store/service/service_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/service/service_test.go?ref=c7468184ba08cd8d607acf4ed22dd9bce381788e",
      "patch": "@@ -325,11 +325,15 @@ func TestService_VotePositive(t *testing.T) {\n \t_, err := b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-1\", \"user2\", false)\n \tassert.EqualError(t, err, \"minimal score reached for comment id-1\")\n \n+\t_, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-1\", \"user3\", true)\n+\tassert.Nil(t, err, \"minimal score doesn't affect positive vote\")\n+\n \tb = DataStore{Interface: prepStoreEngine(t), AdminStore: admin.NewStaticKeyStore(\"secret 123\"),\n \t\tMaxVotes: -1, PositiveScore: false}\n \tc, err := b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-1\", \"user2\", false)\n \tassert.Nil(t, err, \"minimal score ignored\")\n \tassert.Equal(t, -1, c.Score)\n+\n }\n \n func TestService_Pin(t *testing.T) {"
    }
  ]
}
