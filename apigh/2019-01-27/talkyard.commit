{
  "sha": "e9dd9fae00142d176afe523a45a0a1d5de588bdc",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6ZTlkZDlmYWUwMDE0MmQxNzZhZmU1MjNhNDVhMGExZDVkZTU4OGJkYw==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-01-21T05:47:41Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-01-21T05:47:41Z"
    },
    "message": "Email whitelist blacklist wip.",
    "tree": {
      "sha": "5239b324c1e4d862de432ab66df2569959cf02a8",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/5239b324c1e4d862de432ab66df2569959cf02a8"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/e9dd9fae00142d176afe523a45a0a1d5de588bdc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/e9dd9fae00142d176afe523a45a0a1d5de588bdc",
  "html_url": "https://github.com/debiki/talkyard/commit/e9dd9fae00142d176afe523a45a0a1d5de588bdc",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/e9dd9fae00142d176afe523a45a0a1d5de588bdc/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7995197573c295430aab0537114f0e4bddc69d47",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/7995197573c295430aab0537114f0e4bddc69d47",
      "html_url": "https://github.com/debiki/talkyard/commit/7995197573c295430aab0537114f0e4bddc69d47"
    }
  ],
  "stats": {
    "total": 241,
    "additions": 213,
    "deletions": 28
  },
  "files": [
    {
      "sha": "b5d12d79d266101388004a5a9bd5af86a6858ae0",
      "filename": "app/controllers/LoginAsGuestController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/e9dd9fae00142d176afe523a45a0a1d5de588bdc/app/controllers/LoginAsGuestController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/e9dd9fae00142d176afe523a45a0a1d5de588bdc/app/controllers/LoginAsGuestController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/LoginAsGuestController.scala?ref=e9dd9fae00142d176afe523a45a0a1d5de588bdc",
      "patch": "@@ -58,6 +58,8 @@ class LoginAsGuestController @Inject()(cc: ControllerComponents, edContext: EdCo\n     throwForbiddenIf(name.isEmpty, \"TyE872Y90\", \"Please fill in your name\")\n     throwForbiddenIf(email.nonEmpty && Participant.emailIsWeird(email),\n       \"TyE04HK83\", \"Weird email. Please use a real email address\")\n+    throwForbiddenIf(!settings.isEmailAddressAllowed(email),\n+      \"TyE7WKBRA2\", \"You cannot sign up using that email address\")\n \n     // A browser id should be set, at the start of all POST requests. [5JKWQ21]\n     val theBrowserId: String = request.theBrowserIdData.idCookie getOrElse throwForbidden("
    },
    {
      "sha": "fc396235aa1d2bd3bf9829abe0530a86cb23c244",
      "filename": "app/controllers/LoginWithOpenAuthController.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/e9dd9fae00142d176afe523a45a0a1d5de588bdc/app/controllers/LoginWithOpenAuthController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/e9dd9fae00142d176afe523a45a0a1d5de588bdc/app/controllers/LoginWithOpenAuthController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/LoginWithOpenAuthController.scala?ref=e9dd9fae00142d176afe523a45a0a1d5de588bdc",
      "patch": "@@ -360,7 +360,11 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n               }\n             case None =>\n               if (!siteSettings.allowSignup) {\n-                throwForbidden(\"TyE0SIGNUP02\", \"Creation of new accounts is disabled\")\n+                throwForbidden(\"TyE0SIGNUP02A\", \"Creation of new accounts is disabled\")\n+              }\n+              else if (!siteSettings.isEmailAddressAllowed(oauthDetails.emailLowercasedOrEmpty)) {\n+                throwForbidden(\n+                  \"TyE0SIGNUP02B\", \"You cannot sign up using that email address\")\n               }\n               else if (mayCreateNewUser) {\n                 showCreateUserDialog(request, oauthDetails)\n@@ -506,6 +510,9 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     val username = (body \\ \"username\").as[String].trim\n     val anyReturnToUrl = (body \\ \"returnToUrl\").asOpt[String]\n \n+    throwForbiddenIf(!siteSettings.isEmailAddressAllowed(emailAddress),\n+      \"TyE0SIGNUP05\", \"You cannot sign up using that email address\")\n+\n     val oauthDetailsCacheKey = (body \\ \"authDataCacheKey\").asOpt[String] getOrElse\n       throwBadReq(\"DwE08GM6\", \"Auth data cache key missing\")\n     val oauthDetails = Option(cache.getIfPresent(oauthDetailsCacheKey)) match {"
    },
    {
      "sha": "47bbc8636d48cb14a77ce6ac73a3f81ebd55124c",
      "filename": "app/controllers/LoginWithPasswordController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/e9dd9fae00142d176afe523a45a0a1d5de588bdc/app/controllers/LoginWithPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/e9dd9fae00142d176afe523a45a0a1d5de588bdc/app/controllers/LoginWithPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/LoginWithPasswordController.scala?ref=e9dd9fae00142d176afe523a45a0a1d5de588bdc",
      "patch": "@@ -121,6 +121,8 @@ class LoginWithPasswordController @Inject()(cc: ControllerComponents, edContext:\n     throwForbiddenIf(!siteSettings.allowSignup, \"TyE0SIGNUP01\", \"Creation of new accounts is disabled\")\n     throwForbiddenIf(!siteSettings.allowLocalSignup,\n       \"TyE0LCALSIGNUP\", \"Creation of local password accounts has been disabled\")\n+    throwForbiddenIf(!siteSettings.isEmailAddressAllowed(emailAddress),\n+      \"TyEBADEMLDMN\", \"You cannot sign up using that email address\")\n \n     val becomeOwner = LoginController.shallBecomeOwner(request, emailAddress)\n "
    },
    {
      "sha": "ec456c6e905bb3f7eeec8ce7a42766f54146c065",
      "filename": "app/debiki/settings.scala",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/debiki/talkyard/blob/e9dd9fae00142d176afe523a45a0a1d5de588bdc/app/debiki/settings.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/e9dd9fae00142d176afe523a45a0a1d5de588bdc/app/debiki/settings.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/settings.scala?ref=e9dd9fae00142d176afe523a45a0a1d5de588bdc",
      "patch": "@@ -391,6 +391,12 @@ case class EffectiveSettings(\n     allowGuestLogin && !userMustBeAuthenticated && !userMustBeApproved &&\n       !inviteOnly && allowSignup && !enableSso\n \n+  def isEmailAddressAllowed(address: String): Boolean =\n+    // If SSO enabled, the remote SSO system determines what's allowed and what's not. [7AKBR25]\n+    if (enableSso) true\n+    else EffectiveSettings.isEmailAddressAllowed(\n+      address, domainWhiteListText = emailDomainWhitelist, domainBlackListText = emailDomainBlacklist)\n+\n   /** Finds any invalid setting value, or invalid settings configurations. */\n   def findAnyError: Option[String] = {\n     // Hmm ...\n@@ -424,6 +430,37 @@ object EffectiveSettings {\n     }\n     okSources.mkString(\" \")\n   }\n+\n+  def isEmailAddressAllowed(address: String, domainWhiteListText: String, domainBlackListText: String)\n+        : Boolean = {\n+    def canBeDomain(line: String) = line.nonEmpty && line.headOption.isNot('#')\n+    val whiteDomains = domainWhiteListText.lines.map(_.trim).filter(canBeDomain)\n+    val blackDomains = domainBlackListText.lines.map(_.trim).filter(canBeDomain)\n+    def addrEndsWith(domain: String) =\n+      if (domain.contains(\"@\") && domain.head != '@') {\n+        // Is an email address, not a domain. Fine — let people specify full addresses. And\n+        // then require an exact match, so another.jane.doe@ex.com won't match jane.doe@ex.com.\n+        address == domain\n+      }\n+      else if (domain.head == '.' || domain.head == '@') {\n+        // For whatever reason, the admin prepended a '.' or '@' although not needed.\n+        address.endsWith(domain)\n+      }\n+      else {\n+        // Match only on domain boundaries = '.'. E.g.  let hacker.bad.com match bad.com,\n+        // but don't let  someone.goodbad.com match bad.com.\n+        address.endsWith(s\".$domain\") || address.endsWith(s\"@$domain\")\n+      }\n+    for (blackDomain <- blackDomains) {\n+      if (addrEndsWith(blackDomain))\n+        return false\n+    }\n+    for (whiteDomain <- whiteDomains) {\n+      if (addrEndsWith(whiteDomain))\n+        return true\n+    }\n+    whiteDomains.isEmpty\n+  }\n }\n \n "
    },
    {
      "sha": "bb5196a18ff39d406d6b3a02232e44e76bb6fb05",
      "filename": "client/app-staff/admin/admin-app.staff.ts",
      "status": "modified",
      "additions": 34,
      "deletions": 27,
      "changes": 61,
      "blob_url": "https://github.com/debiki/talkyard/blob/e9dd9fae00142d176afe523a45a0a1d5de588bdc/client/app-staff/admin/admin-app.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/e9dd9fae00142d176afe523a45a0a1d5de588bdc/client/app-staff/admin/admin-app.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-staff/admin/admin-app.staff.ts?ref=e9dd9fae00142d176afe523a45a0a1d5de588bdc",
      "patch": "@@ -695,6 +695,38 @@ const LoginAndSignupSettings = createFactory({\n           }\n         }),\n \n+\n+        // ---- Email domain whitelist and blacklist\n+\n+        // Hide, if SSO enabled — then, the SSO system determines if allowed or not. [7AKBR25]\n+\n+        enableSso || !allowSignup ? null : Setting2(props, {\n+          type: 'textarea', label: \"Email domain whitelist\", id: 'e_EmailWhitelist',\n+          help: rFragment({},\n+            \"People may \", r.i({}, \"only \"),\n+            \"sign up with emails from these domains. One domain per row. \" +\n+            \"Lines starting with '#' are ignored (so you can add comments).\"),\n+          getter: (s: Settings) => s.emailDomainWhitelist,\n+          update: (newSettings: Settings, target) => {\n+            newSettings.emailDomainWhitelist = target.value;\n+          }\n+        }),\n+\n+        enableSso || !allowSignup ? null : Setting2(props, {\n+          type: 'textarea', label: \"Email domain blacklist\", id: 'e_EmailBlacklist',\n+          help: rFragment({},\n+            \"People may \", r.i({}, \"not \"),\n+            \"sign up with emails from these domains. One domain per row. \" +\n+            \"Lines starting with '#' are ignored (so you can add comments).\"),\n+          getter: (s: Settings) => s.emailDomainBlacklist,\n+          update: (newSettings: Settings, target) => {\n+            newSettings.emailDomainBlacklist = target.value;\n+          }\n+        }),\n+\n+\n+        // ---- Single Sign-On\n+\n         Setting2(props, {\n           type: 'text', label: \"Single Sign-On URL\",\n           className: 'e_SsoUrl',\n@@ -704,8 +736,8 @@ const LoginAndSignupSettings = createFactory({\n             r.p({},\n               r.samp({}, \"https://www.your-website.com/login?returnTo=${talkyardPathQueryEscHash}\")),\n             r.p({},\n-              \"To start using SSO, fill in only this SSO URL field (but do \", r.i({}, \"not \"),\n-              \"enable SSO below), save the settings, and go here: \",\n+              \"To start using SSO, fill in this SSO URL field, but do \", r.i({}, \"not \"),\n+              \"enable SSO below. Save the settings, and go here: \",\n               ssoTestPageLink,\n               \", to test if your SSO settings work. \" +\n               \"Especially see if you can login as admin — give that a try \",\n@@ -745,31 +777,6 @@ const LoginAndSignupSettings = createFactory({\n             newSettings.enableSso = target.checked;\n           }\n         }),\n-\n-\n-        // ---- Email domain blacklist\n-\n-        /* Not impl server side. And UX? Should whitelist domains be shown client side?\n-\n-        enableSso || !allowSignup ? null : Setting2(props, {\n-          type: 'textarea', label: \"Email domain blacklist\", id: 'e_EmailBlacklist',\n-          help: \"People may not sign up with emails from these domains. One domain per row. \" +\n-          \"Lines starting with '#' are ignored (so you can add comments).\",\n-          getter: (s: Settings) => s.emailDomainBlacklist,\n-          update: (newSettings: Settings, target) => {\n-            newSettings.emailDomainBlacklist = target.value;\n-          }\n-        }),\n-\n-        enableSso || !allowSignup ? null : Setting2(props, {\n-          type: 'textarea', label: \"Email domain whitelist\", id: 'e_EmailWhitelist',\n-          help: \"People may only sign up with emails from these domains. One domain per row. \" +\n-            \"Lines starting with '#' are ignored (so you can add comments).\",\n-          getter: (s: Settings) => s.emailDomainWhitelist,\n-          update: (newSettings: Settings, target) => {\n-            newSettings.emailDomainWhitelist = target.value;\n-          }\n-        }),  */\n         ));\n   }\n });"
    },
    {
      "sha": "e7ad7959a5a25dd6bd5f856f15521077f5470507",
      "filename": "docs/e2e-tests-map.txt",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/e9dd9fae00142d176afe523a45a0a1d5de588bdc/docs/e2e-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/e9dd9fae00142d176afe523a45a0a1d5de588bdc/docs/e2e-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-map.txt?ref=e9dd9fae00142d176afe523a45a0a1d5de588bdc",
      "patch": "@@ -413,6 +413,8 @@ links -\n \n site settings:\n   login -\n+    allowed email domains:\n+      - settings-allowed-email-domains.2browsers.test.ts  TyT5AKRD04\n     login required:\n       - settings-toggle-login-required.3browsers.test.ts  [TyT4GKBW20]\n       - admin-user-approve-reject.2browsers.test.ts [TyT5KHEWQ2]"
    },
    {
      "sha": "fadd6a978d8b6355c78bf8dc29234fa3d7920f27",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/e9dd9fae00142d176afe523a45a0a1d5de588bdc/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/e9dd9fae00142d176afe523a45a0a1d5de588bdc/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=e9dd9fae00142d176afe523a45a0a1d5de588bdc",
      "patch": "@@ -210,6 +210,7 @@ function runAllE2eTests {\n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only drafts-chat-adv-ed.2browsers $args\n   runE2eTest s/wdio target/e2e/wdio.conf.js            --only drafts-delete $args\n \n+  runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only settings-allowed-email-domains.2browsers $args\n   runE2eTest s/wdio target/e2e/wdio.3chrome.conf.js    --only settings-toggle-login-required.3browsers $args\n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only settings-approve-members.2browsers $args\n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only admin-user-approve-reject.2browsers $args"
    },
    {
      "sha": "c329c165b63662e0d05c3a824fe594e123da0a2f",
      "filename": "tests/e2e/specs/settings-allowed-email-domains.2browsers.test.ts",
      "status": "added",
      "additions": 127,
      "deletions": 0,
      "changes": 127,
      "blob_url": "https://github.com/debiki/talkyard/blob/e9dd9fae00142d176afe523a45a0a1d5de588bdc/tests/e2e/specs/settings-allowed-email-domains.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/e9dd9fae00142d176afe523a45a0a1d5de588bdc/tests/e2e/specs/settings-allowed-email-domains.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/settings-allowed-email-domains.2browsers.test.ts?ref=e9dd9fae00142d176afe523a45a0a1d5de588bdc",
      "patch": "@@ -0,0 +1,127 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('assert');\n+import server = require('../utils/server');\n+import utils = require('../utils/utils');\n+import { buildSite } from '../utils/site-builder';\n+import pagesFor = require('../utils/pages-for');\n+import settings = require('../utils/settings');\n+import logAndDie = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+declare var browser: any;\n+declare var browserA: any;\n+declare var browserB: any;\n+\n+let everyonesBrowsers;\n+let richBrowserA;\n+let richBrowserB;\n+let owen: Member;\n+let owensBrowser;\n+let mons: Member;\n+let monsBrowser;\n+let modya: Member;\n+let modyasBrowser;\n+let corax: Member;\n+let coraxBrowser;\n+let regina: Member;\n+let reginasBrowser;\n+let maria: Member;\n+let mariasBrowser;\n+let michael: Member;\n+let michaelsBrowser;\n+let mallory: Member;\n+let mallorysBrowser;\n+let strangersBrowser;\n+\n+let siteIdAddress: IdAddress;\n+let siteId;\n+\n+let forum: EmptyTestForum;\n+\n+let discussionPageUrl: string;\n+\n+\n+describe(\"email-domain-whitelist-blacklist [TyT5AKRD04]\", () => {\n+\n+  it(\"import a site\", () => {\n+    const builder = buildSite();\n+    forum = builder.addEmptyForum({\n+      title: \"Allowed Email Domains E2E Test\",\n+      members: undefined, // default = everyone\n+    });\n+    assert(builder.getSite() === forum.siteData);\n+    siteIdAddress = server.importSiteData(forum.siteData);\n+    siteId = siteIdAddress.id;\n+  });\n+\n+  it(\"initialize people\", () => {\n+    everyonesBrowsers = _.assign(browser, pagesFor(browser));\n+    richBrowserA = _.assign(browserA, pagesFor(browserA));\n+    richBrowserB = _.assign(browserB, pagesFor(browserB));\n+\n+    owen = forum.members.owen;\n+    owensBrowser = richBrowserA;\n+    mons = forum.members.mons;\n+    monsBrowser = richBrowserA;\n+    modya = forum.members.modya;\n+    modyasBrowser = richBrowserA;\n+    corax = forum.members.corax;\n+    coraxBrowser = richBrowserA;\n+\n+    regina = forum.members.regina;\n+    reginasBrowser = richBrowserB;\n+    maria = forum.members.maria;\n+    mariasBrowser = richBrowserB;\n+    michael = forum.members.michael;\n+    michaelsBrowser = richBrowserB;\n+    mallory = forum.members.mallory;\n+    mallorysBrowser = richBrowserB;\n+    strangersBrowser = richBrowserB;\n+  });\n+\n+  it(\"Owen logs in to admin area, ... \", () => {\n+    owensBrowser.adminArea.goToUsersEnabled(siteIdAddress.origin);\n+    owensBrowser.loginDialog.loginWithPassword(owen);\n+  });\n+\n+  it(\"Owen blacklists the domains 'very.bad.com' and 'evil.org'\", () => {\n+    owensBrowser.debug();\n+  });\n+\n+  it(\"A stranger attempts to sign up with those blacklisted email domains\", () => {\n+    strangersBrowser.go(siteIdAddress.origin);\n+    strangersBrowser.debug();\n+    //strangersBrowser.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+\n+  it(\"Owen clears the blacklist\", () => {\n+    owensBrowser.debug();\n+  });\n+\n+  it(\"... Now the stranger can sign up\", () => {\n+    strangersBrowser.debug();\n+  });\n+\n+  it(\"Owen adds an email domain whitelist, good.org\", () => {\n+    owensBrowser.debug();\n+  });\n+\n+  it(\"A stranger attempts to sign up with a non white listed domain\", () => {\n+  });\n+\n+  it(\"... that doesn't work\", () => {\n+  });\n+\n+  it(\"But hen *can* sign up with an email addr on the white listed domain\", () => {\n+  });\n+\n+  it(\"Owen black lists a sub domain of the whitelist, not.good.org\", () => {\n+  });\n+\n+  it(\"A stranger cannot sign up via this bad sub domain\", () => {\n+  });\n+\n+});\n+"
    }
  ]
}
