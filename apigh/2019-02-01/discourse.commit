{
  "sha": "e75b240390e1e2c51e636bcbd32478609b6a93ed",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODplNzViMjQwMzkwZTFlMmM1MWU2MzZiY2JkMzI0Nzg2MDliNmE5M2Vk",
  "commit": {
    "author": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2019-02-01T16:44:37Z"
    },
    "committer": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2019-02-01T16:44:37Z"
    },
    "message": "FIX: Some brittle tests with hardcoded ids\n\nIf we're going to use hardcoded ids, we should make sure the records are\nnot saved, or that the ID will not come up during normal use.",
    "tree": {
      "sha": "5244a55f469b9b85764e2616d337105ae43accd5",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/5244a55f469b9b85764e2616d337105ae43accd5"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/e75b240390e1e2c51e636bcbd32478609b6a93ed",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/e75b240390e1e2c51e636bcbd32478609b6a93ed",
  "html_url": "https://github.com/discourse/discourse/commit/e75b240390e1e2c51e636bcbd32478609b6a93ed",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/e75b240390e1e2c51e636bcbd32478609b6a93ed/comments",
  "author": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "37c28cf0b7973d817e73bf2f47bc41ebc34b1f22",
      "url": "https://api.github.com/repos/discourse/discourse/commits/37c28cf0b7973d817e73bf2f47bc41ebc34b1f22",
      "html_url": "https://github.com/discourse/discourse/commit/37c28cf0b7973d817e73bf2f47bc41ebc34b1f22"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 25,
    "deletions": 23
  },
  "files": [
    {
      "sha": "a99117812cfbfeca4dfdaac3592ee5fd036d93dd",
      "filename": "app/models/category.rb",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/e75b240390e1e2c51e636bcbd32478609b6a93ed/app/models/category.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e75b240390e1e2c51e636bcbd32478609b6a93ed/app/models/category.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/category.rb?ref=e75b240390e1e2c51e636bcbd32478609b6a93ed",
      "patch": "@@ -113,6 +113,9 @@ class Category < ActiveRecord::Base\n   # we may consider wrapping this in another spot\n   attr_accessor :displayable_topics, :permission, :subcategory_ids, :notification_level, :has_children\n \n+  # Allows us to skip creating the category definition topic in tests.\n+  attr_accessor :skip_category_definition\n+\n   @topic_id_cache = DistributedCache.new('category_topic_ids')\n \n   def self.topic_ids\n@@ -212,6 +215,8 @@ def self.post_template\n   end\n \n   def create_category_definition\n+    return if skip_category_definition\n+\n     t = Topic.new(title: I18n.t(\"category.topic_prefix\", category: name), user: user, pinned_at: Time.now, category_id: id)\n     t.skip_callbacks = true\n     t.ignore_category_auto_close = true"
    },
    {
      "sha": "fa6395a48e77615570d5a39f30909696b1f8673d",
      "filename": "spec/models/report_spec.rb",
      "status": "modified",
      "additions": 20,
      "deletions": 23,
      "changes": 43,
      "blob_url": "https://github.com/discourse/discourse/blob/e75b240390e1e2c51e636bcbd32478609b6a93ed/spec/models/report_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e75b240390e1e2c51e636bcbd32478609b6a93ed/spec/models/report_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/report_spec.rb?ref=e75b240390e1e2c51e636bcbd32478609b6a93ed",
      "patch": "@@ -1,6 +1,10 @@\n require 'rails_helper'\n \n describe Report do\n+  let(:c0) { Fabricate(:category, skip_category_definition: true) }  # id: 3\n+  let(:c1) { Fabricate(:category, parent_category: c0, skip_category_definition: true) }  # id: 2\n+  let(:c2) { Fabricate(:category, skip_category_definition: true) }  # id: 4\n+\n   shared_examples 'no data' do\n     context \"with no data\" do\n       it 'returns an empty report' do\n@@ -16,13 +20,6 @@\n   end\n \n   shared_examples 'category filtering on subcategories' do\n-    before do\n-      c = Fabricate(:category, id: 3)\n-      c.topic.destroy\n-      c = Fabricate(:category, id: 2, parent_category_id: 3)\n-      c.topic.destroy\n-      # destroy the category description topics so the count is right, on filtered data\n-    end\n \n     it 'returns the filtered data' do\n       expect(report.total).to eq(1)\n@@ -753,7 +750,7 @@\n       before(:each) do\n         user = Fabricate(:user)\n         post0 = Fabricate(:post)\n-        post1 = Fabricate(:post, topic: Fabricate(:topic, category_id: 2))\n+        post1 = Fabricate(:post, topic: Fabricate(:topic, category: c1))\n         post2 = Fabricate(:post)\n         post3 = Fabricate(:post)\n         PostAction.act(user, post0, PostActionType.types[:off_topic])\n@@ -765,12 +762,12 @@\n       end\n \n       context \"with category filtering\" do\n-        let(:report) { Report.find('flags', category_id: 2) }\n+        let(:report) { Report.find('flags', category_id: c1.id) }\n \n         include_examples 'category filtering'\n \n         context \"on subcategories\" do\n-          let(:report) { Report.find('flags', category_id: 3) }\n+          let(:report) { Report.find('flags', category_id: c0.id) }\n \n           include_examples 'category filtering on subcategories'\n         end\n@@ -788,18 +785,18 @@\n \n       before(:each) do\n         Fabricate(:topic)\n-        Fabricate(:topic, category_id: 2)\n+        Fabricate(:topic, category: c1)\n         Fabricate(:topic)\n         Fabricate(:topic, created_at: 45.days.ago)\n       end\n \n       context \"with category filtering\" do\n-        let(:report) { Report.find('topics', category_id: 2) }\n+        let(:report) { Report.find('topics', category_id: c1.id) }\n \n         include_examples 'category filtering'\n \n         context \"on subcategories\" do\n-          let(:report) { Report.find('topics', category_id: 3) }\n+          let(:report) { Report.find('topics', category_id: c0.id) }\n \n           include_examples 'category filtering on subcategories'\n         end\n@@ -876,20 +873,20 @@ class ReportInitError < StandardError; end\n \n       before(:each) do\n         topic = Fabricate(:topic)\n-        topic_with_category_id = Fabricate(:topic, category_id: 2)\n+        topic_with_category_id = Fabricate(:topic, category: c1)\n         Fabricate(:post, topic: topic)\n         Fabricate(:post, topic: topic_with_category_id)\n         Fabricate(:post, topic: topic)\n         Fabricate(:post, created_at: 45.days.ago, topic: topic)\n       end\n \n       context \"with category filtering\" do\n-        let(:report) { Report.find('posts', category_id: 2) }\n+        let(:report) { Report.find('posts', category_id: c1.id) }\n \n         include_examples 'category filtering'\n \n         context \"on subcategories\" do\n-          let(:report) { Report.find('posts', category_id: 3) }\n+          let(:report) { Report.find('posts', category_id: c0.id) }\n \n           include_examples 'category filtering on subcategories'\n         end\n@@ -908,19 +905,19 @@ class ReportInitError < StandardError; end\n       include_examples 'with data x/y'\n \n       before(:each) do\n-        Fabricate(:topic, category_id: 2)\n+        Fabricate(:topic, category: c1)\n         Fabricate(:post, topic: Fabricate(:topic))\n         Fabricate(:topic)\n         Fabricate(:topic, created_at: 45.days.ago)\n       end\n \n       context \"with category filtering\" do\n-        let(:report) { Report.find('topics_with_no_response', category_id: 2) }\n+        let(:report) { Report.find('topics_with_no_response', category_id: c1.id) }\n \n         include_examples 'category filtering'\n \n         context \"on subcategories\" do\n-          let(:report) { Report.find('topics_with_no_response', category_id: 3) }\n+          let(:report) { Report.find('topics_with_no_response', category_id: c0.id) }\n \n           include_examples 'category filtering on subcategories'\n         end\n@@ -937,11 +934,11 @@ class ReportInitError < StandardError; end\n       include_examples 'with data x/y'\n \n       before(:each) do\n-        topic = Fabricate(:topic, category_id: 2)\n+        topic = Fabricate(:topic, category: c1)\n         post = Fabricate(:post, topic: topic)\n         PostAction.act(Fabricate(:user), post, PostActionType.types[:like])\n \n-        topic = Fabricate(:topic, category_id: 4)\n+        topic = Fabricate(:topic, category: c2)\n         post = Fabricate(:post, topic: topic)\n         PostAction.act(Fabricate(:user), post, PostActionType.types[:like])\n         PostAction.act(Fabricate(:user), post, PostActionType.types[:like])\n@@ -951,12 +948,12 @@ class ReportInitError < StandardError; end\n       end\n \n       context \"with category filtering\" do\n-        let(:report) { Report.find('likes', category_id: 2) }\n+        let(:report) { Report.find('likes', category_id: c1.id) }\n \n         include_examples 'category filtering'\n \n         context \"on subcategories\" do\n-          let(:report) { Report.find('likes', category_id: 3) }\n+          let(:report) { Report.find('likes', category_id: c0.id) }\n \n           include_examples 'category filtering on subcategories'\n         end"
    }
  ]
}
