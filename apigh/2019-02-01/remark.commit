{
  "sha": "76d0cc32e205ac433ffa4cd8ac99ccc7c10131df",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjc2ZDBjYzMyZTIwNWFjNDMzZmZhNGNkOGFjOTljY2M3YzEwMTMxZGY=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-01-30T21:59:00Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-01-30T21:59:00Z"
    },
    "message": "use repeater context to avoid long calls",
    "tree": {
      "sha": "b42a3abc196cecbe440f3eb763cad766496fa54b",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/b42a3abc196cecbe440f3eb763cad766496fa54b"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/76d0cc32e205ac433ffa4cd8ac99ccc7c10131df",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/76d0cc32e205ac433ffa4cd8ac99ccc7c10131df",
  "html_url": "https://github.com/umputun/remark/commit/76d0cc32e205ac433ffa4cd8ac99ccc7c10131df",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/76d0cc32e205ac433ffa4cd8ac99ccc7c10131df/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "44cb54477e62ac95bd30e64bf90f4b8c53a7e64f",
      "url": "https://api.github.com/repos/umputun/remark/commits/44cb54477e62ac95bd30e64bf90f4b8c53a7e64f",
      "html_url": "https://github.com/umputun/remark/commit/44cb54477e62ac95bd30e64bf90f4b8c53a7e64f"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 47,
    "deletions": 3
  },
  "files": [
    {
      "sha": "5e13e738eadc779416a3402a1cbeadcbbaa1fb3c",
      "filename": "backend/app/notify/telegram.go",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark/blob/76d0cc32e205ac433ffa4cd8ac99ccc7c10131df/backend/app/notify/telegram.go",
      "raw_url": "https://github.com/umputun/remark/raw/76d0cc32e205ac433ffa4cd8ac99ccc7c10131df/backend/app/notify/telegram.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/notify/telegram.go?ref=76d0cc32e205ac433ffa4cd8ac99ccc7c10131df",
      "patch": "@@ -42,7 +42,10 @@ func NewTelegram(token string, channelID string, timeout time.Duration, api stri\n \t}\n \tlog.Printf(\"[DEBUG] create new telegram notifier for cham %s, timeout=%s, api=%s\", channelID, res.timeout, res.timeout)\n \n-\terr := repeater.NewDefault(5, time.Millisecond*250).Do(func() error {\n+\tctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n+\tdefer cancel()\n+\n+\terr := repeater.NewDefault(5, time.Millisecond*250).Do(ctx, func() error {\n \t\tclient := http.Client{Timeout: telegramTimeOut}\n \t\tresp, err := client.Get(fmt.Sprintf(\"%s%s/getMe\", res.apiPrefix, token))\n \t\tif err != nil {"
    },
    {
      "sha": "5ad0b805ea6f492a856cadd42e8dc512e0aa12d5",
      "filename": "backend/app/rest/proxy/image.go",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark/blob/76d0cc32e205ac433ffa4cd8ac99ccc7c10131df/backend/app/rest/proxy/image.go",
      "raw_url": "https://github.com/umputun/remark/raw/76d0cc32e205ac433ffa4cd8ac99ccc7c10131df/backend/app/rest/proxy/image.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/proxy/image.go?ref=76d0cc32e205ac433ffa4cd8ac99ccc7c10131df",
      "patch": "@@ -1,6 +1,7 @@\n package proxy\n \n import (\n+\t\"context\"\n \t\"encoding/base64\"\n \t\"io\"\n \t\"net/http\"\n@@ -22,6 +23,7 @@ type Image struct {\n \tRemarkURL string\n \tRoutePath string\n \tEnabled   bool\n+\tTimeout   time.Duration\n }\n \n // Convert all img src links without https to proxied links\n@@ -51,11 +53,23 @@ func (p Image) Routes() chi.Router {\n \t\t\treturn\n \t\t}\n \n+\t\ttimeout := 60 * time.Second // default\n+\t\tif p.Timeout > 0 {\n+\t\t\ttimeout = p.Timeout\n+\t\t}\n+\n+\t\tctx, cancel := context.WithTimeout(context.Background(), timeout)\n+\t\tdefer cancel()\n+\n \t\tclient := http.Client{Timeout: 30 * time.Second}\n \t\tvar resp *http.Response\n-\t\terr = repeater.NewDefault(5, time.Second).Do(func() error {\n+\t\terr = repeater.NewDefault(5, time.Second).Do(ctx, func() error {\n \t\t\tvar e error\n-\t\t\tresp, e = client.Get(string(src))\n+\t\t\treq, e := http.NewRequest(\"GET\", string(src), nil)\n+\t\t\tif e != nil {\n+\t\t\t\treturn errors.Wrapf(e, \"failed to make request for %s\", r.URL.Query().Get(\"src\"))\n+\t\t\t}\n+\t\t\tresp, e = client.Do(req.WithContext(ctx))\n \t\t\treturn e\n \t\t})\n \t\tif err != nil {"
    },
    {
      "sha": "dc8eae0c6ab7efd99b719715aa09231e5708267d",
      "filename": "backend/app/rest/proxy/image_test.go",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark/blob/76d0cc32e205ac433ffa4cd8ac99ccc7c10131df/backend/app/rest/proxy/image_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/76d0cc32e205ac433ffa4cd8ac99ccc7c10131df/backend/app/rest/proxy/image_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/proxy/image_test.go?ref=76d0cc32e205ac433ffa4cd8ac99ccc7c10131df",
      "patch": "@@ -3,9 +3,12 @@ package proxy\n import (\n \t\"encoding/base64\"\n \t\"fmt\"\n+\t\"io/ioutil\"\n \t\"net/http\"\n \t\"net/http/httptest\"\n+\t\"strings\"\n \t\"testing\"\n+\t\"time\"\n \n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n@@ -87,6 +90,25 @@ func TestImage_Routes(t *testing.T) {\n \tassert.Equal(t, 400, resp.StatusCode)\n }\n \n+func TestImage_RoutesTimedOut(t *testing.T) {\n+\timg := Image{Enabled: true, RemarkURL: \"https://demo.remark42.com\", RoutePath: \"/api/v1/proxy\", Timeout: 50 * time.Millisecond}\n+\trouter := img.Routes()\n+\n+\thttpSrv := imgHTTPServer(t)\n+\tdefer httpSrv.Close()\n+\tts := httptest.NewServer(router)\n+\tdefer ts.Close()\n+\n+\tencodedImgURL := base64.URLEncoding.EncodeToString([]byte(httpSrv.URL + \"/image/img-slow.png\"))\n+\tresp, err := http.Get(ts.URL + \"/?src=\" + encodedImgURL)\n+\trequire.Nil(t, err)\n+\tassert.Equal(t, 400, resp.StatusCode)\n+\tb, err := ioutil.ReadAll(resp.Body)\n+\trequire.Nil(t, err)\n+\tt.Log(string(b))\n+\tassert.True(t, strings.Contains(string(b), \"deadline exceeded\"))\n+}\n+\n func TestPicture_Convert(t *testing.T) {\n \timg := Image{Enabled: true, RoutePath: \"/img\"}\n \tr := img.Convert(`<img src=\"http://radio-t.com/img3.png\"/> xyz <img src=\"http://images.pexels.com/67636/img4.jpeg\">`)\n@@ -113,6 +135,11 @@ func imgHTTPServer(t *testing.T) *httptest.Server {\n \t\t\tw.Write([]byte(fmt.Sprintf(\"%123s\", \"X\")))\n \t\t\treturn\n \t\t}\n+\t\tif r.URL.Path == \"/image/img-slow.png\" {\n+\t\t\ttime.Sleep(500 * time.Millisecond)\n+\t\t\tw.WriteHeader(500)\n+\t\t\treturn\n+\t\t}\n \t\tt.Log(\"http img request - not found\", r.URL)\n \t\tw.WriteHeader(404)\n \t}))"
    }
  ]
}
