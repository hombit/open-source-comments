{
  "sha": "4917ba01ec7c84c6fa84143d47e98b0b0a579cea",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjQ5MTdiYTAxZWM3Yzg0YzZmYTg0MTQzZDQ3ZTk4YjBiMGE1NzljZWE=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-02-06T06:45:47Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-02-06T06:45:47Z"
    },
    "message": "update rest lib to fix recoverd panic",
    "tree": {
      "sha": "ca718a9b8de94e6cb52d92bee5462cd2a94bd9ad",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/ca718a9b8de94e6cb52d92bee5462cd2a94bd9ad"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/4917ba01ec7c84c6fa84143d47e98b0b0a579cea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/4917ba01ec7c84c6fa84143d47e98b0b0a579cea",
  "html_url": "https://github.com/umputun/remark/commit/4917ba01ec7c84c6fa84143d47e98b0b0a579cea",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "58acbecf533dcbb479b81231ca7c855767d64fd6",
      "url": "https://api.github.com/repos/umputun/remark/commits/58acbecf533dcbb479b81231ca7c855767d64fd6",
      "html_url": "https://github.com/umputun/remark/commit/58acbecf533dcbb479b81231ca7c855767d64fd6"
    }
  ],
  "stats": {
    "total": 158,
    "additions": 136,
    "deletions": 22
  },
  "files": [
    {
      "sha": "f9a9ced40531adeacb2e86c2771933925e8a22be",
      "filename": "backend/Gopkg.lock",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/Gopkg.lock",
      "raw_url": "https://github.com/umputun/remark/raw/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/Gopkg.lock",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/Gopkg.lock?ref=4917ba01ec7c84c6fa84143d47e98b0b0a579cea",
      "patch": "@@ -162,16 +162,16 @@\n   version = \"v1.1.1\"\n \n [[projects]]\n-  digest = \"1:9aba5c95373481f118e57e9740d9e82f86802d86849809ab89324bcb4f236451\"\n+  digest = \"1:27df73e1f59fffb9aaa2c28ba81561f177710576f18ad602564949355fac3e23\"\n   name = \"github.com/go-pkgz/rest\"\n   packages = [\n     \".\",\n     \"cache\",\n     \"logger\",\n   ]\n   pruneopts = \"UT\"\n-  revision = \"e7d08d0194d613b8854de2e487bf7732500fa153\"\n-  version = \"v1.2.0\"\n+  revision = \"27af5e3ba9439ec0df51c30794f473befe0a0e6d\"\n+  version = \"v1.3.1\"\n \n [[projects]]\n   digest = \"1:92b44856ee15e8a98b91d751a60b512017e0ba227d1ed9d2c02ad13d67062ff8\""
    },
    {
      "sha": "f9f6de4670087658d6091ab9c95327a6871a3671",
      "filename": "backend/vendor/github.com/go-pkgz/rest/.travis.yml",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark/blob/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/vendor/github.com/go-pkgz/rest/.travis.yml",
      "raw_url": "https://github.com/umputun/remark/raw/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/vendor/github.com/go-pkgz/rest/.travis.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/.travis.yml?ref=4917ba01ec7c84c6fa84143d47e98b0b0a579cea",
      "patch": "@@ -7,13 +7,14 @@ install: true\n \n before_install:\n   - export TZ=America/Chicago\n-  - curl -L https://git.io/vp6lP | sh\n+  - curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.13.2\n   - go get github.com/mattn/goveralls\n   - export PATH=$(pwd)/bin:$PATH\n \n+\n script:\n   - GO111MODULE=on go get ./...\n   - GO111MODULE=on go mod vendor\n   - GO111MODULE=on go test -v -mod=vendor -covermode=count -coverprofile=profile.cov ./... || travis_terminate 1\n-  - ./bin/gometalinter --deadline=120s --exclude=test --exclude=mock --exclude=vendor --exclude=_example --disable-all --enable=errcheck --enable=vet --enable=vetshadow --enable=megacheck --enable=ineffassign --enable=varcheck --enable=unconvert --enable=deadcode --enable=interfacer --enable=gotype ./... || travis_terminate 1;\n+  - golangci-lint run  || travis_terminate 1;\n   - $GOPATH/bin/goveralls -coverprofile=profile.cov -service=travis-ci"
    },
    {
      "sha": "62afe8e3e917fe04c37a88c6bea3ca8dc8750c8c",
      "filename": "backend/vendor/github.com/go-pkgz/rest/blackwords.go",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark/blob/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/vendor/github.com/go-pkgz/rest/blackwords.go",
      "raw_url": "https://github.com/umputun/remark/raw/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/vendor/github.com/go-pkgz/rest/blackwords.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/blackwords.go?ref=4917ba01ec7c84c6fa84143d47e98b0b0a579cea",
      "patch": "@@ -32,3 +32,8 @@ func BlackWords(words ...string) func(http.Handler) http.Handler {\n \t\treturn http.HandlerFunc(fn)\n \t}\n }\n+\n+// BlackWordsFn middleware uses func to get the list and doesn't allow some words in the request body\n+func BlackWordsFn(fn func() []string) func(http.Handler) http.Handler {\n+\treturn BlackWords(fn()...)\n+}"
    },
    {
      "sha": "3a9c7bd68482030ab71158d5abfae294b975d3ea",
      "filename": "backend/vendor/github.com/go-pkgz/rest/logger/logger.go",
      "status": "modified",
      "additions": 64,
      "deletions": 17,
      "changes": 81,
      "blob_url": "https://github.com/umputun/remark/blob/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/vendor/github.com/go-pkgz/rest/logger/logger.go",
      "raw_url": "https://github.com/umputun/remark/raw/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/vendor/github.com/go-pkgz/rest/logger/logger.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/logger/logger.go?ref=4917ba01ec7c84c6fa84143d47e98b0b0a579cea",
      "patch": "@@ -10,6 +10,7 @@ import (\n \t\"net/http\"\n \t\"net/url\"\n \t\"regexp\"\n+\t\"sort\"\n \t\"strings\"\n \t\"time\"\n )\n@@ -23,6 +24,7 @@ type Middleware struct {\n \tflags       []Flag\n \tipFn        func(ip string) string\n \tuserFn      func(r *http.Request) (string, error)\n+\tsubjFn      func(r *http.Request) (string, error)\n \tlog         Backend\n }\n \n@@ -99,8 +101,37 @@ func (l *Middleware) Handler(next http.Handler) http.Handler {\n \t\t\t\tremoteIP = l.ipFn(remoteIP)\n \t\t\t}\n \n-\t\t\tl.log.Logf(\"%s %s - %s - %s - %d (%d) - %v %s %s\",\n-\t\t\t\tl.prefix, r.Method, q, remoteIP, ww.status, ww.size, t2.Sub(t1), user, body)\n+\t\t\tvar bld strings.Builder\n+\t\t\tif l.prefix != \"\" {\n+\t\t\t\tbld.WriteString(l.prefix)\n+\t\t\t\tbld.WriteString(\" \")\n+\t\t\t}\n+\n+\t\t\tbld.WriteString(fmt.Sprintf(\"%s - %s - %s - %d (%d) - %v\", r.Method, q, remoteIP, ww.status, ww.size, t2.Sub(t1)))\n+\n+\t\t\tif user != \"\" {\n+\t\t\t\tbld.WriteString(\" - \")\n+\t\t\t\tbld.WriteString(user)\n+\t\t\t}\n+\n+\t\t\tif l.subjFn != nil {\n+\t\t\t\tif subj, err := l.subjFn(r); err == nil {\n+\t\t\t\t\tbld.WriteString(\" - \")\n+\t\t\t\t\tbld.WriteString(subj)\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif traceID := r.Header.Get(\"X-Request-ID\"); traceID != \"\" {\n+\t\t\t\tbld.WriteString(\" - \")\n+\t\t\t\tbld.WriteString(traceID)\n+\t\t\t}\n+\n+\t\t\tif body != \"\" {\n+\t\t\t\tbld.WriteString(\" - \")\n+\t\t\t\tbld.WriteString(body)\n+\t\t\t}\n+\n+\t\t\tl.log.Logf(\"%s\", bld.String())\n \t\t}()\n \n \t\tnext.ServeHTTP(ww, r)\n@@ -133,7 +164,7 @@ func (l *Middleware) getBodyAndUser(r *http.Request) (body string, user string)\n \tif l.inLogFlags(User) && l.userFn != nil {\n \t\tu, err := l.userFn(r)\n \t\tif err == nil && u != \"\" {\n-\t\t\tuser = fmt.Sprintf(\" - %s\", u)\n+\t\t\tuser = u\n \t\t}\n \t}\n \n@@ -149,24 +180,40 @@ func (l *Middleware) inLogFlags(f Flag) bool {\n \treturn false\n }\n \n+var hideWords = []string{\"password\", \"passwd\", \"secret\", \"credentials\", \"token\"}\n+\n+// hide query values for hideWords. May change order of query params\n func (l *Middleware) sanitizeQuery(inp string) string {\n-\tout := []rune(inp)\n-\thide := []string{\"password\", \"passwd\", \"secret\", \"credentials\"}\n-\tfor _, h := range hide {\n-\t\tif strings.Contains(strings.ToLower(inp), h+\"=\") {\n-\t\t\tstPos := strings.Index(strings.ToLower(inp), h+\"=\") + len(h) + 1\n-\t\t\tfnPos := strings.Index(inp[stPos:], \"&\")\n-\t\t\tif fnPos == -1 {\n-\t\t\t\tfnPos = len(inp)\n-\t\t\t} else {\n-\t\t\t\tfnPos = stPos + fnPos\n-\t\t\t}\n-\t\t\tfor i := stPos; i < fnPos; i++ {\n-\t\t\t\tout[i] = rune('*')\n+\n+\tinHiddenWords := func(str string) bool {\n+\t\tfor _, w := range hideWords {\n+\t\t\tif strings.EqualFold(w, str) {\n+\t\t\t\treturn true\n \t\t\t}\n \t\t}\n+\t\treturn false\n+\t}\n+\n+\tparts := strings.SplitN(inp, \"?\", 2)\n+\tif len(parts) < 2 {\n+\t\treturn inp\n+\t}\n+\n+\tq, e := url.ParseQuery(parts[1])\n+\tif e != nil || len(q) == 0 {\n+\t\treturn inp\n+\t}\n+\n+\tres := []string{}\n+\tfor k, v := range q {\n+\t\tif inHiddenWords(k) {\n+\t\t\tres = append(res, fmt.Sprintf(\"%s=********\", k))\n+\t\t} else {\n+\t\t\tres = append(res, fmt.Sprintf(\"%s=%v\", k, v[0]))\n+\t\t}\n \t}\n-\treturn string(out)\n+\tsort.Strings(res) // to make testing persistent\n+\treturn parts[0] + \"?\" + strings.Join(res, \"&\")\n }\n \n // customResponseWriter implements ResponseWriter and keeping status and size"
    },
    {
      "sha": "57f6e0d12520225922c4f061bd1e761458f37ee5",
      "filename": "backend/vendor/github.com/go-pkgz/rest/logger/options.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark/blob/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/vendor/github.com/go-pkgz/rest/logger/options.go",
      "raw_url": "https://github.com/umputun/remark/raw/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/vendor/github.com/go-pkgz/rest/logger/options.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/logger/options.go?ref=4917ba01ec7c84c6fa84143d47e98b0b0a579cea",
      "patch": "@@ -44,6 +44,13 @@ func UserFn(userFn func(r *http.Request) (string, error)) Option {\n \t}\n }\n \n+// SubjFn functional option defines subject function.\n+func SubjFn(userFn func(r *http.Request) (string, error)) Option {\n+\treturn func(l *Middleware) {\n+\t\tl.subjFn = userFn\n+\t}\n+}\n+\n // Log functional option defines loging backend.\n func Log(log Backend) Option {\n \treturn func(l *Middleware) {"
    },
    {
      "sha": "d9701450d451f20e8282808d367bff00eaa14c3b",
      "filename": "backend/vendor/github.com/go-pkgz/rest/trace.go",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/umputun/remark/blob/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/vendor/github.com/go-pkgz/rest/trace.go",
      "raw_url": "https://github.com/umputun/remark/raw/4917ba01ec7c84c6fa84143d47e98b0b0a579cea/backend/vendor/github.com/go-pkgz/rest/trace.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/rest/trace.go?ref=4917ba01ec7c84c6fa84143d47e98b0b0a579cea",
      "patch": "@@ -0,0 +1,54 @@\n+package rest\n+\n+import (\n+\t\"context\"\n+\t\"crypto/rand\"\n+\t\"crypto/sha1\"\n+\t\"fmt\"\n+\t\"net/http\"\n+\t\"time\"\n+)\n+\n+type contextKey string\n+\n+const traceHeader = \"X-Request-ID\"\n+\n+// Trace looks for header X-Request-ID and makes it as random id if not found, then populates it to the result's header\n+// and to request context\n+func Trace(next http.Handler) http.Handler {\n+\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\ttraceID := r.Header.Get(traceHeader)\n+\t\tif traceID == \"\" {\n+\t\t\ttraceID = randToken()\n+\t\t}\n+\t\tw.Header().Set(traceHeader, traceID)\n+\t\tctx := context.WithValue(r.Context(), contextKey(\"requestID\"), traceID)\n+\t\tr = r.WithContext(ctx)\n+\t\tnext.ServeHTTP(w, r)\n+\t}\n+\treturn http.HandlerFunc(fn)\n+}\n+\n+// GetTraceID returns request id from the context\n+func GetTraceID(r *http.Request) string {\n+\tif id, ok := r.Context().Value(contextKey(\"requestID\")).(string); ok {\n+\t\treturn id\n+\t}\n+\treturn \"\"\n+}\n+\n+func randToken() string {\n+\tfallback := func() string {\n+\t\treturn fmt.Sprintf(\"%x\", time.Now().Nanosecond())\n+\t}\n+\n+\tb := make([]byte, 32)\n+\tif _, err := rand.Read(b); err != nil {\n+\t\treturn fallback()\n+\t}\n+\ts := sha1.New()\n+\tif _, err := s.Write(b); err != nil {\n+\t\treturn fallback()\n+\t}\n+\treturn fmt.Sprintf(\"%x\", s.Sum(nil))\n+}"
    }
  ]
}
