{
  "sha": "653125d5258a922ac25f3c655db02cd48e9c0fb6",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjY1MzEyNWQ1MjU4YTkyMmFjMjVmM2M2NTVkYjAyY2Q0OGU5YzBmYjY=",
  "commit": {
    "author": {
      "name": "Andrei Alikov",
      "email": "AnyRoad@users.noreply.github.com",
      "date": "2019-02-12T15:35:14Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-02-12T15:35:14Z"
    },
    "message": "Hanlde limiter rejection on UI side (#275)\n\n- Adds common function to get error message from the http response\r\n- Adds error message for the voting displayed under the voting buttons\r\n- Adds restoring of voting data after voting request failed\r\n\r\nfixed re-writing error message when user tries to vote for the same comment",
    "tree": {
      "sha": "eaf9bb29bd71a1c21c0b8e852b91c24fed6c6f33",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/eaf9bb29bd71a1c21c0b8e852b91c24fed6c6f33"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/653125d5258a922ac25f3c655db02cd48e9c0fb6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/653125d5258a922ac25f3c655db02cd48e9c0fb6",
  "html_url": "https://github.com/umputun/remark/commit/653125d5258a922ac25f3c655db02cd48e9c0fb6",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/653125d5258a922ac25f3c655db02cd48e9c0fb6/comments",
  "author": {
    "login": "AnyRoad",
    "id": 3448822,
    "node_id": "MDQ6VXNlcjM0NDg4MjI=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/3448822?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AnyRoad",
    "html_url": "https://github.com/AnyRoad",
    "followers_url": "https://api.github.com/users/AnyRoad/followers",
    "following_url": "https://api.github.com/users/AnyRoad/following{/other_user}",
    "gists_url": "https://api.github.com/users/AnyRoad/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AnyRoad/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AnyRoad/subscriptions",
    "organizations_url": "https://api.github.com/users/AnyRoad/orgs",
    "repos_url": "https://api.github.com/users/AnyRoad/repos",
    "events_url": "https://api.github.com/users/AnyRoad/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AnyRoad/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "643f255832489cc3ee4df1aff781261d1994bc2c",
      "url": "https://api.github.com/repos/umputun/remark/commits/643f255832489cc3ee4df1aff781261d1994bc2c",
      "html_url": "https://github.com/umputun/remark/commit/643f255832489cc3ee4df1aff781261d1994bc2c"
    }
  ],
  "stats": {
    "total": 109,
    "additions": 88,
    "deletions": 21
  },
  "files": [
    {
      "sha": "60d4bcb81445cd5ce0fdd4f30f62cdd738eab5c3",
      "filename": "backend/app/rest/httperrors.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/653125d5258a922ac25f3c655db02cd48e9c0fb6/backend/app/rest/httperrors.go",
      "raw_url": "https://github.com/umputun/remark/raw/653125d5258a922ac25f3c655db02cd48e9c0fb6/backend/app/rest/httperrors.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/httperrors.go?ref=653125d5258a922ac25f3c655db02cd48e9c0fb6",
      "patch": "@@ -25,7 +25,7 @@ const (\n \tErrReadOnly           = 8  // write failed on read only\n \tErrCommentRejected    = 9  // general error on rejected comment change\n \tErrCommentEditExpired = 10 // too late for edit\n-\tErrCommentEditChanged = 11 // parent commend changed\n+\tErrCommentEditChanged = 11 // parent comment cannot be changed\n \tErrVoteRejected       = 12 // general error on vote rejected\n \tErrVoteSelf           = 13 // vote for own comment\n \tErrVoteDbl            = 14 // already voted for the comment"
    },
    {
      "sha": "813609c67d2842397506a4e4a26a59bf65b172e0",
      "filename": "web/app/components/comment/__vote/comment__vote.scss",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark/blob/653125d5258a922ac25f3c655db02cd48e9c0fb6/web/app/components/comment/__vote/comment__vote.scss",
      "raw_url": "https://github.com/umputun/remark/raw/653125d5258a922ac25f3c655db02cd48e9c0fb6/web/app/components/comment/__vote/comment__vote.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/comment/__vote/comment__vote.scss?ref=653125d5258a922ac25f3c655db02cd48e9c0fb6",
      "patch": "@@ -9,3 +9,11 @@\n   background-size: contain;\n   cursor: pointer;\n }\n+\n+.voting__error {\n+  color: #9a0000;\n+  text-align: right;\n+  font-size: 14px;\n+  line-height: 1;\n+  margin-top: -10px;\n+}"
    },
    {
      "sha": "d7b47b12e69bcaf3e74028106b8c5527683d3eb1",
      "filename": "web/app/components/comment/comment.jsx",
      "status": "modified",
      "additions": 32,
      "deletions": 10,
      "changes": 42,
      "blob_url": "https://github.com/umputun/remark/blob/653125d5258a922ac25f3c655db02cd48e9c0fb6/web/app/components/comment/comment.jsx",
      "raw_url": "https://github.com/umputun/remark/raw/653125d5258a922ac25f3c655db02cd48e9c0fb6/web/app/components/comment/comment.jsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/comment/comment.jsx?ref=653125d5258a922ac25f3c655db02cd48e9c0fb6",
      "patch": "@@ -8,6 +8,7 @@ import { url } from 'common/settings';\n import store from 'common/store';\n import copy from 'common/copy';\n import debounce from 'utils/debounce';\n+import { extractErrorMessageFromResponse } from 'utils/errorUtils';\n \n import Input from 'components/input';\n \n@@ -23,6 +24,7 @@ export default class Comment extends Component {\n       isEditing: false,\n       isUserVerified: false,\n       editTimeLeft: null,\n+      voteErrorMessage: null,\n     };\n \n     this.votingPromise = Promise.resolve();\n@@ -49,6 +51,8 @@ export default class Comment extends Component {\n     this.isGuest = this.isGuest.bind(this);\n     this.getUpvoteDisabledReason = this.getUpvoteDisabledReason.bind(this);\n     this.getDownvoteDisabledReason = this.getDownvoteDisabledReason.bind(this);\n+    this.handleVoteError = this.handleVoteError.bind(this);\n+    this.sendVotingRequest = this.sendVotingRequest.bind(this);\n   }\n \n   componentWillReceiveProps(nextProps) {\n@@ -264,6 +268,23 @@ export default class Comment extends Component {\n     }\n   }\n \n+  handleVoteError(e, originalVotingState) {\n+    this.setState({\n+      ...originalVotingState,\n+      voteErrorMessage: extractErrorMessageFromResponse(e.response),\n+    });\n+  }\n+\n+  sendVotingRequest(id, votingValue, originalVotingState) {\n+    this.votingPromise = this.votingPromise\n+      .then(() => {\n+        return api.putCommentVote({ id, url, value: votingValue }).then(() => {\n+          api.getComment({ id }).then(comment => store.replaceComment(comment));\n+        });\n+      })\n+      .catch(e => this.handleVoteError(e, originalVotingState));\n+  }\n+\n   increaseScore() {\n     const { score, scoreIncreased, scoreDecreased } = this.state;\n     const { id } = this.props.data;\n@@ -274,13 +295,10 @@ export default class Comment extends Component {\n       scoreIncreased: !scoreDecreased,\n       scoreDecreased: false,\n       score: score + 1,\n+      voteErrorMessage: null,\n     });\n \n-    this.votingPromise = this.votingPromise.then(() => {\n-      return api.putCommentVote({ id, url, value: 1 }).then(() => {\n-        api.getComment({ id }).then(comment => store.replaceComment(comment));\n-      });\n-    });\n+    this.sendVotingRequest(id, 1, { score, scoreIncreased, scoreDecreased });\n   }\n \n   decreaseScore() {\n@@ -293,13 +311,10 @@ export default class Comment extends Component {\n       scoreDecreased: !scoreIncreased,\n       scoreIncreased: false,\n       score: score - 1,\n+      voteErrorMessage: null,\n     });\n \n-    this.votingPromise = this.votingPromise.then(() => {\n-      return api.putCommentVote({ id, url, value: -1 }).then(() => {\n-        api.getComment({ id }).then(comment => store.replaceComment(comment));\n-      });\n-    });\n+    this.sendVotingRequest(id, -1, { score, scoreIncreased, scoreDecreased });\n   }\n \n   onReply(...rest) {\n@@ -412,6 +427,7 @@ export default class Comment extends Component {\n       isEditing,\n       isUserVerified,\n       editTimeLeft,\n+      voteErrorMessage,\n     }\n   ) {\n     const { data, mods = {}, isCommentsDisabled } = props;\n@@ -607,6 +623,12 @@ export default class Comment extends Component {\n             </span>\n           </div>\n \n+          {!!voteErrorMessage && (\n+            <div className=\"voting__error\" role=\"alert\">\n+              Voting error: {voteErrorMessage}\n+            </div>\n+          )}\n+\n           <div\n             className={b('comment__text', { mix: b('raw-content', {}, { theme: mods.theme }) })}\n             ref={r => (this.textNode = r)}"
    },
    {
      "sha": "e3b3723450f3caa3248ef1fd959f4e1a21faa000",
      "filename": "web/app/components/input/input.jsx",
      "status": "modified",
      "additions": 3,
      "deletions": 10,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark/blob/653125d5258a922ac25f3c655db02cd48e9c0fb6/web/app/components/input/input.jsx",
      "raw_url": "https://github.com/umputun/remark/raw/653125d5258a922ac25f3c655db02cd48e9c0fb6/web/app/components/input/input.jsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/input/input.jsx?ref=653125d5258a922ac25f3c655db02cd48e9c0fb6",
      "patch": "@@ -6,6 +6,7 @@ import { siteId, url, pageTitle } from 'common/settings';\n \n import api from 'common/api';\n import store from 'common/store';\n+import { extractErrorMessageFromResponse } from 'utils/errorUtils';\n import TextareaAutosize from 'components/input/textarea-autosize';\n \n const RSS_THREAD_URL = `${BASE_URL}${API_BASE}/rss/post?site=${siteId}&url=${url}`;\n@@ -92,16 +93,8 @@ export default class Input extends Component {\n         this.setState({ preview: null, text: '' });\n       })\n       .catch(e => {\n-        if (\n-          e.response &&\n-          e.response.data &&\n-          typeof e.response.data.error === 'string' &&\n-          e.response.data.error.indexOf(\"parent comment with reply can't be edited\") === 0\n-        ) {\n-          this.setState({ isErrorShown: true, errorMessage: 'Comment has reply, editing is not possible' });\n-          return;\n-        }\n-        this.setState({ isErrorShown: true, errorMessage: null });\n+        const errorMessage = extractErrorMessageFromResponse(e.response);\n+        this.setState({ isErrorShown: true, errorMessage });\n       })\n       .finally(() => this.setState({ isDisabled: false }));\n   }"
    },
    {
      "sha": "08f8c0ba108d407075eef0e052e6885be6e490f5",
      "filename": "web/app/utils/errorUtils.js",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/umputun/remark/blob/653125d5258a922ac25f3c655db02cd48e9c0fb6/web/app/utils/errorUtils.js",
      "raw_url": "https://github.com/umputun/remark/raw/653125d5258a922ac25f3c655db02cd48e9c0fb6/web/app/utils/errorUtils.js",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/utils/errorUtils.js?ref=653125d5258a922ac25f3c655db02cd48e9c0fb6",
      "patch": "@@ -0,0 +1,44 @@\n+const errorMessageForCodes = new Map([\n+  [0, 'Something went wrong. Please try again a bit later.'],\n+  [1, 'Comment cannot be found. Please refresh the page and try again.'],\n+  [2, 'Failed to unmarshal incoming request.'],\n+  [3, \"You don't have permission for this operaton.\"],\n+  [4, 'Invalid comment data.'],\n+  [5, 'Comment cannot be found.  Please refresh the page and try again.'],\n+  [6, 'Site cannot be found.  Please refresh the page and try again.'],\n+  [7, 'User has been blocked.'],\n+  [8, 'This post is read only.'],\n+  [9, 'Comment changing failed. Please try again a bit later.'],\n+  [10, 'It is too late to edit the comment.'],\n+  [11, 'Comment already has reply, editing is not possible.'],\n+  [12, 'Cannot save voting result. Please try again a bit later.'],\n+  [13, 'You cannot vote for your own comment.'],\n+  [14, 'You have already voted for the comment.'],\n+  [15, 'Too many votes for the comment.'],\n+  [16, 'Min score reached for the comment.'],\n+  [17, 'Action rejected. Please try again a bit later.'],\n+  [18, 'Requested file cannot be found.'],\n+]);\n+\n+export function extractErrorMessageFromResponse(response) {\n+  const defatulErrorMessage = 'Something went wrong. Please try again a bit later.';\n+  if (!(response && response.data)) {\n+    return defatulErrorMessage;\n+  }\n+\n+  const responseData = response.data;\n+\n+  if (typeof responseData.code === 'number' && errorMessageForCodes.has(responseData.code)) {\n+    return errorMessageForCodes.get(responseData.code);\n+  }\n+\n+  if (typeof responseData.details === 'string') {\n+    return responseData.details;\n+  }\n+\n+  if (typeof responseData === 'string') {\n+    return responseData;\n+  }\n+\n+  return defatulErrorMessage;\n+}"
    }
  ]
}
