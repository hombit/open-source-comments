{
  "sha": "0a708ba0646524f760e8f950e34ac33b4ad1ef5b",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODowYTcwOGJhMDY0NjUyNGY3NjBlOGY5NTBlMzRhYzMzYjRhZDFlZjVi",
  "commit": {
    "author": {
      "name": "Régis Hanol",
      "email": "regis@hanol.fr",
      "date": "2019-02-27T16:00:21Z"
    },
    "committer": {
      "name": "Régis Hanol",
      "email": "regis@hanol.fr",
      "date": "2019-02-27T16:00:21Z"
    },
    "message": "FIX: preload poll voters",
    "tree": {
      "sha": "7c80de1596ab34a51d28160f79f3c54a43ee92c0",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/7c80de1596ab34a51d28160f79f3c54a43ee92c0"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/0a708ba0646524f760e8f950e34ac33b4ad1ef5b",
    "comment_count": 1,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/0a708ba0646524f760e8f950e34ac33b4ad1ef5b",
  "html_url": "https://github.com/discourse/discourse/commit/0a708ba0646524f760e8f950e34ac33b4ad1ef5b",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/0a708ba0646524f760e8f950e34ac33b4ad1ef5b/comments",
  "author": {
    "login": "ZogStriP",
    "id": 362783,
    "node_id": "MDQ6VXNlcjM2Mjc4Mw==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/362783?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZogStriP",
    "html_url": "https://github.com/ZogStriP",
    "followers_url": "https://api.github.com/users/ZogStriP/followers",
    "following_url": "https://api.github.com/users/ZogStriP/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZogStriP/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZogStriP/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZogStriP/subscriptions",
    "organizations_url": "https://api.github.com/users/ZogStriP/orgs",
    "repos_url": "https://api.github.com/users/ZogStriP/repos",
    "events_url": "https://api.github.com/users/ZogStriP/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZogStriP/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ZogStriP",
    "id": 362783,
    "node_id": "MDQ6VXNlcjM2Mjc4Mw==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/362783?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZogStriP",
    "html_url": "https://github.com/ZogStriP",
    "followers_url": "https://api.github.com/users/ZogStriP/followers",
    "following_url": "https://api.github.com/users/ZogStriP/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZogStriP/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZogStriP/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZogStriP/subscriptions",
    "organizations_url": "https://api.github.com/users/ZogStriP/orgs",
    "repos_url": "https://api.github.com/users/ZogStriP/repos",
    "events_url": "https://api.github.com/users/ZogStriP/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZogStriP/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b907924c93bc7d7c84df92176aca126d25a20889",
      "url": "https://api.github.com/repos/discourse/discourse/commits/b907924c93bc7d7c84df92176aca126d25a20889",
      "html_url": "https://github.com/discourse/discourse/commit/b907924c93bc7d7c84df92176aca126d25a20889"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 25,
    "deletions": 11
  },
  "files": [
    {
      "sha": "2048f6bcaa09d44561d2ffb05f36165c7c05d370",
      "filename": "plugins/poll/app/serializers/poll_serializer.rb",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/discourse/discourse/blob/0a708ba0646524f760e8f950e34ac33b4ad1ef5b/plugins/poll/app/serializers/poll_serializer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/0a708ba0646524f760e8f950e34ac33b4ad1ef5b/plugins/poll/app/serializers/poll_serializer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/plugins/poll/app/serializers/poll_serializer.rb?ref=0a708ba0646524f760e8f950e34ac33b4ad1ef5b",
      "patch": "@@ -9,7 +9,8 @@ class PollSerializer < ApplicationSerializer\n              :step,\n              :options,\n              :voters,\n-             :close\n+             :close,\n+             :preloaded_voters\n \n   def public\n     true\n@@ -47,4 +48,12 @@ def include_close?\n     object.close_at.present?\n   end\n \n+  def preloaded_voters\n+    DiscoursePoll::Poll.serialized_voters(object)\n+  end\n+\n+  def include_preloaded_voters?\n+    object.can_see_voters?(scope)\n+  end\n+\n end"
    },
    {
      "sha": "39d4d16049b65690f022af23569498cc0564927e",
      "filename": "plugins/poll/assets/javascripts/widgets/discourse-poll.js.es6",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/0a708ba0646524f760e8f950e34ac33b4ad1ef5b/plugins/poll/assets/javascripts/widgets/discourse-poll.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/0a708ba0646524f760e8f950e34ac33b4ad1ef5b/plugins/poll/assets/javascripts/widgets/discourse-poll.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/plugins/poll/assets/javascripts/widgets/discourse-poll.js.es6?ref=0a708ba0646524f760e8f950e34ac33b4ad1ef5b",
      "patch": "@@ -120,6 +120,7 @@ createWidget(\"discourse-poll-voters\", {\n           : result.voters[attrs.optionId];\n \n       const existingVoters = new Set(state.voters.map(voter => voter.username));\n+\n       newVoters.forEach(voter => {\n         if (!existingVoters.has(voter.username)) {\n           existingVoters.add(voter.username);\n@@ -202,8 +203,8 @@ createWidget(\"discourse-poll-standard-results\", {\n       });\n \n       if (isPublic && !state.loaded) {\n+        state.voters = poll.get(\"preloaded_voters\");\n         state.loaded = true;\n-        this.fetchVoters();\n       }\n \n       const percentages =\n@@ -290,8 +291,8 @@ createWidget(\"discourse-poll-number-results\", {\n \n     if (poll.get(\"public\")) {\n       if (!state.loaded) {\n+        state.voters = poll.get(\"preloaded_voters\");\n         state.loaded = true;\n-        this.fetchVoters();\n       }\n \n       contents.push("
    },
    {
      "sha": "20de8e64b8d8d396573a31da44f0aaad862b34e9",
      "filename": "plugins/poll/plugin.rb",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/discourse/discourse/blob/0a708ba0646524f760e8f950e34ac33b4ad1ef5b/plugins/poll/plugin.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/0a708ba0646524f760e8f950e34ac33b4ad1ef5b/plugins/poll/plugin.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/plugins/poll/plugin.rb?ref=0a708ba0646524f760e8f950e34ac33b4ad1ef5b",
      "patch": "@@ -149,13 +149,7 @@ def toggle_status(post_id, poll_name, status, user, raise_errors = true)\n         end\n       end\n \n-      def voters(post_id, poll_name, user, opts = {})\n-        post = Post.find_by(id: post_id)\n-        raise Discourse::InvalidParameters.new(\"post_id is invalid\") unless post\n-\n-        poll = Poll.find_by(post_id: post_id, name: poll_name)\n-        raise Discourse::InvalidParameters.new(\"poll_name is invalid\") unless poll&.can_see_voters?(user)\n-\n+      def serialized_voters(poll, opts = {})\n         limit = (opts[\"limit\"] || 25).to_i\n         limit = 0  if limit < 0\n         limit = 50 if limit > 50\n@@ -208,7 +202,7 @@ def voters(post_id, poll_name, user, opts = {})\n               WHERE row BETWEEN #{offset} AND #{offset + limit}\n           SQL\n \n-          user_ids = votes.map { |v| v.user_id }.to_set\n+          user_ids = votes.map(&:user_id).uniq\n \n           user_hashes = User\n             .where(id: user_ids)\n@@ -225,6 +219,16 @@ def voters(post_id, poll_name, user, opts = {})\n         result\n       end\n \n+      def voters(post_id, poll_name, user, opts = {})\n+        post = Post.find_by(id: post_id)\n+        raise Discourse::InvalidParameters.new(\"post_id is invalid\") unless post\n+\n+        poll = Poll.find_by(post_id: post_id, name: poll_name)\n+        raise Discourse::InvalidParameters.new(\"poll_name is invalid\") unless poll&.can_see_voters?(user)\n+\n+        serialized_voters(poll, opts)\n+      end\n+\n       def schedule_jobs(post)\n         Poll.where(post: post).find_each do |poll|\n           job_args = {"
    }
  ]
}
