{
  "sha": "cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6Y2QwMWFhZTc2Y2ZhOTVmN2YzN2M5ZWVjMTIwZDZjYTVmM2JmMzMzYw==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2019-03-18T18:06:29Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-03-18T18:06:29Z"
    },
    "message": "fix: fixed incorrect users lookup (#2229)",
    "tree": {
      "sha": "b1d074af30b9e3a9bf3ede571b542be2696b6c66",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/b1d074af30b9e3a9bf3ede571b542be2696b6c66"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcj94lCRBK7hj4Ov3rIwAAdHIIAF5N9JVsxvT/3SpntUtY4JPK\niHD8Y6XXqKZ0/E03Wiph2Kd0OibprANE3J1TxPyMAUH0rvfGuNFvPgKYrg2cylZw\nc1aBff2WZ5MnvilFAtegJEr8NZy/rPIlXptPiLxfw+sv3Waw91fT96uPuBKif/n8\nCec07hg7u8AqA07XH4iT/aSpxNxJwqFrmm0Pdf+WvW9NuBov/etFbIMkyaFLwGj1\nZ7BjZSTvc7lgmMwVobz9ui3+JBy8bq8E9QG6XsCorGXcdq3S5AhC0B+LzX5cTSn6\n0EPAhCyBDeHV2C9PrQ46z0x/JP++HMvkenHTsClnkdLRWM3oXUCaYNL0Zv3aKME=\n=TtPg\n-----END PGP SIGNATURE-----\n",
      "payload": "tree b1d074af30b9e3a9bf3ede571b542be2696b6c66\nparent 53367eeaac1a4c9a3478324dd8e808d2f2c30fd5\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1552932389 -0600\ncommitter GitHub <noreply@github.com> 1552932389 -0600\n\nfix: fixed incorrect users lookup (#2229)\n\n"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c",
  "html_url": "https://github.com/coralproject/talk/commit/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "53367eeaac1a4c9a3478324dd8e808d2f2c30fd5",
      "url": "https://api.github.com/repos/coralproject/talk/commits/53367eeaac1a4c9a3478324dd8e808d2f2c30fd5",
      "html_url": "https://github.com/coralproject/talk/commit/53367eeaac1a4c9a3478324dd8e808d2f2c30fd5"
    }
  ],
  "stats": {
    "total": 105,
    "additions": 92,
    "deletions": 13
  },
  "files": [
    {
      "sha": "6870ad1e570047e282a74d4fe447b9944b231483",
      "filename": "package.json",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c/package.json",
      "raw_url": "https://github.com/coralproject/talk/raw/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c/package.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package.json?ref=cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c",
      "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"talk\",\n-  \"version\": \"4.8.2\",\n+  \"version\": \"4.8.3\",\n   \"description\": \"A better commenting experience from Mozilla, The New York Times, and the Washington Post. https://coralproject.net\",\n   \"main\": \"app.js\",\n   \"private\": true,"
    },
    {
      "sha": "c7040304af1e620c49f0aafb176027b197047faf",
      "filename": "services/users.js",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c/services/users.js",
      "raw_url": "https://github.com/coralproject/talk/raw/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c/services/users.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/services/users.js?ref=cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c",
      "patch": "@@ -60,13 +60,17 @@ async function upsertUser(\n   shouldSetDisplayName = false\n ) {\n   let user = await User.findOne({\n-    id,\n-    profiles: {\n-      $elemMatch: {\n-        id,\n-        provider,\n+    $or: [\n+      { id },\n+      {\n+        profiles: {\n+          $elemMatch: {\n+            id,\n+            provider,\n+          },\n+        },\n       },\n-    },\n+    ],\n   });\n   if (user) {\n     user.wasUpserted = false;"
    },
    {
      "sha": "8915977a21fb2b82665a27f83c00fd48e20c4c06",
      "filename": "test/helpers/mongoose.js",
      "status": "modified",
      "additions": 22,
      "deletions": 6,
      "changes": 28,
      "blob_url": "https://github.com/coralproject/talk/blob/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c/test/helpers/mongoose.js",
      "raw_url": "https://github.com/coralproject/talk/raw/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c/test/helpers/mongoose.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/test/helpers/mongoose.js?ref=cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c",
      "patch": "@@ -1,15 +1,31 @@\n const mongoose = require('../../services/mongoose');\n \n-before(function(done) {\n+const models = [\n+  require('../../models/action'),\n+  require('../../models/asset'),\n+  require('../../models/comment'),\n+  require('../../models/migration'),\n+  require('../../models/setting'),\n+  require('../../models/user'),\n+  require('../../models/migration'),\n+];\n+\n+before(async function() {\n   this.timeout(30000);\n \n-  mongoose.connection.on('open', function(err) {\n-    if (err) {\n-      return done(err);\n-    }\n+  // Ensure we can connect to the database.\n+  await new Promise((resolve, reject) => {\n+    mongoose.connection.on('open', err => {\n+      if (err) {\n+        return reject(err);\n+      }\n \n-    return done();\n+      return resolve();\n+    });\n   });\n+\n+  // Ensure all the models have indexes created.\n+  await Promise.all(models.map(model => model.ensureIndexes()));\n });\n \n beforeEach(async () => {"
    },
    {
      "sha": "449210dd75a5d1feda6d690b9e3373c74c9695b2",
      "filename": "test/server/services/users.js",
      "status": "modified",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/coralproject/talk/blob/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c/test/server/services/users.js",
      "raw_url": "https://github.com/coralproject/talk/raw/cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c/test/server/services/users.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/test/server/services/users.js?ref=cd01aae76cfa95f7f37c9eec120d6ca5f3bf333c",
      "patch": "@@ -4,6 +4,7 @@ const mailer = require('../../../services/mailer');\n const Context = require('../../../graph/context');\n const timekeeper = require('timekeeper');\n const moment = require('moment');\n+const uuid = require('uuid/v1');\n \n const chai = require('chai');\n chai.use(require('chai-as-promised'));\n@@ -387,6 +388,64 @@ describe('services.UsersService', () => {\n       expect(user.wasUpserted).to.be.false;\n     });\n \n+    it('should handle legacy users as well', async () => {\n+      const ctx = Context.forSystem();\n+      let user = await UsersService.upsertExternalUser(\n+        ctx,\n+        'an-id',\n+        'a-provider',\n+        'a-display-name'\n+      );\n+\n+      expect(user).to.be.defined;\n+      expect(user).to.have.property('id', 'an-id');\n+      expect(user.wasUpserted).to.be.true;\n+\n+      // Change the ID to something else, mirroring the legacy behavior.\n+      const id = uuid();\n+      user.id = id;\n+      await user.save();\n+      expect(user).to.have.property('id', id);\n+\n+      // Ensure that the ID has been changed.\n+      user = await UsersService.findById(id);\n+\n+      expect(user).to.be.defined;\n+      expect(user).to.have.property('id', id);\n+\n+      // Test to see that future lookups work.\n+      user = await UsersService.upsertExternalUser(\n+        ctx,\n+        'an-id',\n+        'a-provider',\n+        'a-display-name'\n+      );\n+\n+      expect(user).to.be.defined;\n+      expect(user).to.have.property('id', id);\n+      expect(user.wasUpserted).to.be.false;\n+    });\n+\n+    it('should handle token user lookups created via this method', async () => {\n+      const id = uuid();\n+      const ctx = Context.forSystem();\n+      let user = await UsersService.upsertExternalUser(\n+        ctx,\n+        id,\n+        'a-provider',\n+        'a-display-name'\n+      );\n+\n+      expect(user).to.be.defined;\n+      expect(user).to.have.property('id', id);\n+      expect(user.wasUpserted).to.be.true;\n+\n+      user = await UsersService.findOrCreateByIDToken(id, {});\n+\n+      expect(user).to.be.defined;\n+      expect(user).to.have.property('id', id);\n+    });\n+\n     it('should return a user when the desired user is not found', async () => {\n       const ctx = Context.forSystem();\n       let user = await UsersService.upsertExternalUser("
    }
  ]
}
