{
  "sha": "b2ca9dba400e9bdb633091a58aaae2a7fbcd57f8",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6YjJjYTlkYmE0MDBlOWJkYjYzMzA5MWE1OGFhYWUyYTdmYmNkNTdmOA==",
  "commit": {
    "author": {
      "name": "immber",
      "email": "jessiekrushing@gmail.com",
      "date": "2019-03-20T18:43:16Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-03-20T18:43:16Z"
    },
    "message": "Merge pull request #2227 from coralproject/CORL-308\n\nupdate tokenUserNotFound docs",
    "tree": {
      "sha": "e351082658d1b00af715e6fa7b9bdff6fb7961e9",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/e351082658d1b00af715e6fa7b9bdff6fb7961e9"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/b2ca9dba400e9bdb633091a58aaae2a7fbcd57f8",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJckonECRBK7hj4Ov3rIwAAdHIIAKTWwYwoHMJpJ8USJlIoBky8\nE+SPeMJMqGoJtauXMb87q4dIoxwkfE/6U5brlO0SzqCL/2B8i9Hd+mD7icF35E5Y\nO1IimkMgV9wEmRPCeP/yDrJjozlgAZ28HmShcvmiVeN/SWwNz6WxkWZZCsqCy/Mr\nxEytEZTzJOkn9smGPxTv13+90M2kbEOTSqdC5Xu9gxHzR+M+OS3tlMFmf/WUmT+I\nV+ps+D86JHu7b/e3QCL51ytspBd3KHeu2zG9KC/H5PRO+qg0nt09vnwsi+vwPG9b\nyP9u27+uvJNgHf3mHWGCkXLr2/SXotlNUUv7b5Ur2oaQfXW0ZtEiT+SNzul2RcI=\n=lkty\n-----END PGP SIGNATURE-----\n",
      "payload": "tree e351082658d1b00af715e6fa7b9bdff6fb7961e9\nparent 86d55fa2dee5e4a2c451665400a73c0a775b8262\nparent 9186c73fff11da0d222efa3fb707af345d00f6be\nauthor immber <jessiekrushing@gmail.com> 1553107396 -0700\ncommitter GitHub <noreply@github.com> 1553107396 -0700\n\nMerge pull request #2227 from coralproject/CORL-308\n\nupdate tokenUserNotFound docs"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/b2ca9dba400e9bdb633091a58aaae2a7fbcd57f8",
  "html_url": "https://github.com/coralproject/talk/commit/b2ca9dba400e9bdb633091a58aaae2a7fbcd57f8",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/b2ca9dba400e9bdb633091a58aaae2a7fbcd57f8/comments",
  "author": {
    "login": "immber",
    "id": 7496030,
    "node_id": "MDQ6VXNlcjc0OTYwMzA=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/7496030?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/immber",
    "html_url": "https://github.com/immber",
    "followers_url": "https://api.github.com/users/immber/followers",
    "following_url": "https://api.github.com/users/immber/following{/other_user}",
    "gists_url": "https://api.github.com/users/immber/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/immber/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/immber/subscriptions",
    "organizations_url": "https://api.github.com/users/immber/orgs",
    "repos_url": "https://api.github.com/users/immber/repos",
    "events_url": "https://api.github.com/users/immber/events{/privacy}",
    "received_events_url": "https://api.github.com/users/immber/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "86d55fa2dee5e4a2c451665400a73c0a775b8262",
      "url": "https://api.github.com/repos/coralproject/talk/commits/86d55fa2dee5e4a2c451665400a73c0a775b8262",
      "html_url": "https://github.com/coralproject/talk/commit/86d55fa2dee5e4a2c451665400a73c0a775b8262"
    },
    {
      "sha": "9186c73fff11da0d222efa3fb707af345d00f6be",
      "url": "https://api.github.com/repos/coralproject/talk/commits/9186c73fff11da0d222efa3fb707af345d00f6be",
      "html_url": "https://github.com/coralproject/talk/commit/9186c73fff11da0d222efa3fb707af345d00f6be"
    }
  ],
  "stats": {
    "total": 418,
    "additions": 248,
    "deletions": 170
  },
  "files": [
    {
      "sha": "c38e59aed0553d26278d1bc1b92f318d24df483a",
      "filename": "docs/source/03-06-product-guide-configuring-talk.md",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/b2ca9dba400e9bdb633091a58aaae2a7fbcd57f8/docs/source/03-06-product-guide-configuring-talk.md",
      "raw_url": "https://github.com/coralproject/talk/raw/b2ca9dba400e9bdb633091a58aaae2a7fbcd57f8/docs/source/03-06-product-guide-configuring-talk.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/docs/source/03-06-product-guide-configuring-talk.md?ref=b2ca9dba400e9bdb633091a58aaae2a7fbcd57f8",
      "patch": "@@ -88,8 +88,9 @@ Comments with suspect words will display until a moderator takes action on them.\n \n #### Permitted Domains\n \n-A list of domains where your Talk instance is allowed to be embedded. Typical\n-use is `localhost`, `staging.yourdomain.com`, `yourdomain.com`, etc.\n+A list of domains where your Talk instance is allowed to be embedded. List each domain and subdomain in use\n+separately, for example: `localhost`, `staging.yourdomain.com`, `yourdomain.com`, `www.yourdomain.com`, etc.\n+\n \n #### Embed Script\n "
    },
    {
      "sha": "e9628b23d67c355f53295025cb1a2b2b01cb4f73",
      "filename": "docs/source/api/server.md",
      "status": "modified",
      "additions": 245,
      "deletions": 168,
      "changes": 413,
      "blob_url": "https://github.com/coralproject/talk/blob/b2ca9dba400e9bdb633091a58aaae2a7fbcd57f8/docs/source/api/server.md",
      "raw_url": "https://github.com/coralproject/talk/raw/b2ca9dba400e9bdb633091a58aaae2a7fbcd57f8/docs/source/api/server.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/docs/source/api/server.md?ref=b2ca9dba400e9bdb633091a58aaae2a7fbcd57f8",
      "patch": "@@ -56,16 +56,32 @@ Thanks to [gql-merge](https://www.npmjs.com/package/gql-merge) the contents of\n definitions. `enum`'s will be appended to, types will be appended, and new types\n will be added.\n \n+This can be included as a plugin via:\n+\n+```js\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n+\n+module.exports = {\n+  typeDefs: fs.readFileSync(path.join(__dirname, \"typeDefs.graphql\"), \"utf8\")\n+};\n+```\n+\n+Assuming the above GraphQL schema is located in the plugin folder at\n+`typeDefs.graphql`.\n+\n ### context\n \n ```js\n-{\n-  Slack: (context) => ({\n-    notify: (message) => {\n-      // return a promise after we're done sending notifications.\n-    }\n-  })\n-}\n+module.exports = {\n+  context: {\n+    Slack: context => ({\n+      notify: message => {\n+        // return a promise after we're done sending notifications.\n+      },\n+    });\n+  },\n+};\n ```\n \n Any property provided here will be added to the context parameter available\n@@ -83,41 +99,50 @@ A special context hook, `Sort` will allow plugin authors to provide new\n methods to sort data. An example is as follows:\n \n ```js\n-{\n-  Sort: () => ({\n-    Comments: { // <-- (1)\n-      likes: { // <-- (2)\n-        startCursor(ctx, nodes, {cursor}) { // <-- (3)\n-          return cursor != null ? cursor : 0;\n-        },\n-        endCursor(ctx, nodes, {cursor}) { // <-- (4)\n-          return nodes.length ? (cursor != null ? cursor : 0) + nodes.length : null;\n-        },\n-        sort(ctx, query, {cursor, sort}) { // <-- (5)\n-          if (cursor) {\n-            query = query.skip(cursor);\n+module.exports = {\n+  context: {\n+    Sort: () => ({\n+      Comments: {\n+        // <-- (1)\n+        likes: {\n+          // <-- (2)\n+          startCursor(ctx, nodes, { cursor }) {\n+            // <-- (3)\n+            return cursor != null ? cursor : 0;\n+          },\n+          endCursor(ctx, nodes, { cursor }) {\n+            // <-- (4)\n+            return nodes.length\n+              ? (cursor != null ? cursor : 0) + nodes.length\n+              : null;\n+          },\n+          sort(ctx, query, { cursor, sort }) {\n+            // <-- (5)\n+            if (cursor) {\n+              query = query.skip(cursor);\n+            }\n+\n+            return query.sort({\n+              \"action_counts.like\": sort === \"DESC\" ? -1 : 1,\n+              created_at: sort === \"DESC\" ? -1 : 1\n+            });\n           }\n-\n-          return query.sort({\n-            'action_counts.like': sort === 'DESC' ? -1 : 1,\n-            created_at: sort === 'DESC' ? -1 : 1,\n-          });\n-        },\n-      },\n-    },\n-  }),\n-}\n+        }\n+      }\n+    })\n+  }\n+};\n ```\n \n This has a bunch of special features:\n \n 1. `Comments` is the name of the type being sorted, this is pluralized and\n-    capitalized.\n+   capitalized.\n 2. `likes` is the `sortBy` field in lowercase.\n 3. `startCursor` will retrieve the start cursor based on the current set of\n-    nodes and the current cursor.\n+   nodes and the current cursor.\n 4. `endCursor` will retrieve the end cursor based on the current set of nodes\n-    and the current cursor.\n+   and the current cursor.\n 5. `sort` will mutate the `query` to apply the sort operations.\n \n All the `startCursor`, `endCursor`, and `sort` functions must be provided in\n@@ -126,11 +151,13 @@ order for the sorting to apply properly.\n ### loaders\n \n ```js\n-(context) => ({\n-  People: {\n-    load: () => db.people.find({user: context.user})\n-  }\n-})\n+module.exports = {\n+  context: context => ({\n+    People: {\n+      load: () => db.people.find({ user: context.user })\n+    }\n+  })\n+};\n ```\n \n Loaders should be provided as a function which returns a map which is used in\n@@ -139,13 +166,15 @@ the resolvers function. These must return a promise or a value.\n ### mutators\n \n ```js\n-(context) => ({\n-  People: {\n-    create: (name) => {\n-      return db.people.insert({user: context.user, name});\n+module.exports = {\n+  context: context => ({\n+    People: {\n+      create: name => {\n+        return db.people.insert({ user: context.user, name });\n+      }\n     }\n-  }\n-})\n+  })\n+};\n ```\n \n Mutators should be provided as a function which returns a map which is used in\n@@ -154,27 +183,41 @@ the resolvers function. These must return a promise or a value.\n ### resolvers\n \n ```js\n-{\n-  Person: {\n-    name(obj, args, context) {\n-      return obj.name;\n+module.exports = {\n+  resolvers: {\n+    Person: {\n+      name(obj, args, context) {\n+        return obj.name;\n+      },\n+      colour(obj, args, context) {\n+        // Bill likes the colour red, everyone else likes blue.\n+        return obj.name === \"bill\" ? \"RED\" : \"BLUE\";\n+      }\n     },\n-    colour(obj, args, context) {\n-      // Bill likes the colour red, everyone else likes blue.\n-      return obj.name === 'bill' ? 'RED' : 'BLUE';\n-    }\n-  },\n-  RootQuery: {\n-    people(obj, args, {loaders: {People}}) {\n-      return People.load();\n-    }\n-  },\n-  RootMutation: {\n-    createPerson(obj, {name}, {mutators: {People}}) {\n-      return People.create(name);\n+    RootQuery: {\n+      people(\n+        obj,\n+        args,\n+        {\n+          loaders: { People }\n+        }\n+      ) {\n+        return People.load();\n+      }\n+    },\n+    RootMutation: {\n+      createPerson(\n+        obj,\n+        { name },\n+        {\n+          mutators: { People }\n+        }\n+      ) {\n+        return People.create(name);\n+      }\n     }\n   }\n-}\n+};\n ```\n \n Should return a resolver map as described in the\n@@ -185,40 +228,44 @@ This will merge with the existing resolvers in core and from previous plugins.\n ### hooks\n \n ```js\n-{\n-  RootMutation: {\n-    createPerson: {\n-      post: async (obj, args, {plugins: {Slack}}, info, person) {\n-        if (!person) {\n-          return person;\n-        }\n+module.exports = {\n+  hooks: {\n+    RootMutation: {\n+      createPerson: {\n+        post: async (obj, args, {plugins: {Slack}}, info, person) {\n+          if (!person) {\n+            return person;\n+          }\n \n-        await Slack.notify(`A new person just was created with name ${person.name}`);\n+          await Slack.notify(`A new person just was created with name ${person.name}`);\n \n-        return person;\n+          return person;\n+        }\n       }\n     }\n   }\n-}\n+};\n ```\n \n Hooks here are pretty special, for each resolver field, you can specify a\n pre/post hook that will execute pre and post field resolution.\n \n If your post function accepts four parameters, then it can modify the field\n-result. It is *required* that the function resolves a promise (or returns) with\n+result. It is _required_ that the function resolves a promise (or returns) with\n the modified value or simply the original if you didn't modify it.\n \n ### setupFunctions\n \n ```js\n-setupFunctions: {\n-  leader: (options, args) => ({\n-    leader: {\n-      filter: (person) => person.place === 1\n-    },\n-  }),\n-}\n+module.exports = {\n+  setupFunctions: {\n+    leader: (options, args) => ({\n+      leader: {\n+        filter: person => person.place === 1\n+      }\n+    })\n+  }\n+};\n ```\n \n Setup functions allow you to create filters that control which pubsub.publish() events\n@@ -229,37 +276,48 @@ For more information, see the [Apollo Docs](https://github.com/apollographql/gra\n ### tokenUserNotFound\n \n ```js\n-tokenUserNotFound: async ({jwt, token}) => {\n-  let profile = await someExternalService(token);\n-  if (!profile) {\n-    return null;\n-  }\n+const Users = require(\"services/users\");\n \n-  let user = await UserModel.findOneAndUpdate({\n-    id: profile.id\n-  }, {\n-    id: profile.id,\n-    username: profile.username,\n-    lowercaseUsername: profile.username.toLowerCase(),\n-    roles: [],\n-    profiles: []\n-  }, {\n-    setDefaultsOnInsert: true,\n-    new: true,\n-    upsert: true\n-  });\n-\n-  return user;\n-}\n+module.exports = {\n+  tokenUserNotFound: async ({ jwt }) => {\n+    const user = await Users.upsertExternalUser(\n+      null,\n+      jwt.sub,\n+      jwt.iss,\n+      jwt.username\n+    );\n+\n+    const email = jwt.email.toLowerCase();\n+\n+    //upsertExternalUser will also create a profile with provider:jwt.iss, id:jwt.sub\n+    //add a \"local\" profile to persist email on the user\n+    user.profiles.push({\n+      provider: \"local\",\n+      id: email\n+    });\n+    user.created_at = new Date(jwt.memberSince * 1000);\n+\n+    await user.save();\n+\n+    return user;\n+  }\n+};\n ```\n \n The `tokenUserNotFound` hook allows auth integrations to hook into the event\n when a valid token is provided but a user can't be found in the database that\n matches the provided id.\n \n The function is async, and should return the user object that was created in the\n-database, or null if the user wasn't found. The `jwt` parameter of the object\n-is the unpacked token, while `token` is the original jwt token string.\n+database. The `jwt` parameter of the object is the unpacked token, which has already been validated.\n+\n+More details about the `upsertExternalUser` method can be found at:\n+https://github.com/coralproject/talk/blob/32962aa1e84c09d87141440a1f04cbd1659b3336/services/users.js/#L592\n+\n+In this example, a unix timestamp was included on the jwt with a date that is being persisted on the user. This is optional, but can be used to handle any extra claims you want to include on the jwt. You can use the metadata object on the user to store custom values.\n+\n+Having trouble implementing your own `tokenUserNotFound` hook?\n+Submit a Support ticket ([support@coralproject.net](mailto:support@coralproject.net))\n \n ### tags\n \n@@ -268,18 +326,20 @@ or enabled by code). Below is an example pulled from the core off topic plugin\n on how to create a hook for the `OFF_TOPIC` name:\n \n ```js\n-[\n-  {\n-    name: 'OFF_TOPIC',\n-    permissions: {\n-      public: true,\n-      self: true,\n-      roles: []\n-    },\n-    models: ['COMMENTS'],\n-    created_at: new Date()\n-  }\n-]\n+module.exports = {\n+  tags: [\n+    {\n+      name: \"OFF_TOPIC\",\n+      permissions: {\n+        public: true,\n+        self: true,\n+        roles: []\n+      },\n+      models: [\"COMMENTS\"],\n+      created_at: new Date()\n+    }\n+  ]\n+};\n ```\n \n You can refer to `models/schema/tag.js` for the available schema to match when\n@@ -288,11 +348,13 @@ creating models to enable/disable specific features.\n ### router\n \n ```js\n-(router) => {\n-  router.get('/api/v1/people', (req, res) => {\n-    res.json({people: [{name: 'Bob'}]});\n-  });\n-}\n+module.exports = {\n+  router: router => {\n+    router.get(\"/api/v1/people\", (req, res) => {\n+      res.json({ people: [{ name: \"Bob\" }] });\n+    });\n+  }\n+};\n ```\n \n The Router hook allows you to create a function that accepts the base express\n@@ -302,56 +364,73 @@ action needed by external applications.\n ### passport\n \n ```js\n-const FacebookStrategy = require('passport-facebook').Strategy;\n-const UsersService = require('services/users');\n-const {ValidateUserLogin, HandleAuthPopupCallback} = require('services/passport');\n+const FacebookStrategy = require(\"passport-facebook\").Strategy;\n+const UsersService = require(\"services/users\");\n+const {\n+  ValidateUserLogin,\n+  HandleAuthPopupCallback\n+} = require(\"services/passport\");\n \n module.exports = {\n-  passport(passport) {\n-    passport.use(new FacebookStrategy({\n-      clientID: process.env.TALK_FACEBOOK_APP_ID,\n-      clientSecret: process.env.TALK_FACEBOOK_APP_SECRET,\n-      callbackURL: `${process.env.TALK_ROOT_URL}/api/v1/auth/facebook/callback`,\n-      passReqToCallback: true,\n-      profileFields: ['id', 'displayName', 'picture.type(large)']\n-    }, async (req, accessToken, refreshToken, profile, done) => {\n-\n-      let user;\n-      try {\n-        const { id, provider, displayName } = profile;\n-        user = await UsersService.upsertSocialUser(\n-          req.context,\n-          id,\n-          provider,\n-          displayName\n-        );\n-      } catch (err) {\n-        return done(err);\n-      }\n+  passport: passport => {\n+    passport.use(\n+      new FacebookStrategy(\n+        {\n+          clientID: process.env.TALK_FACEBOOK_APP_ID,\n+          clientSecret: process.env.TALK_FACEBOOK_APP_SECRET,\n+          callbackURL: `${\n+            process.env.TALK_ROOT_URL\n+          }/api/v1/auth/facebook/callback`,\n+          passReqToCallback: true,\n+          profileFields: [\"id\", \"displayName\", \"picture.type(large)\"]\n+        },\n+        async (req, accessToken, refreshToken, profile, done) => {\n+          let user;\n+          try {\n+            const { id, provider, displayName } = profile;\n+            user = await UsersService.upsertSocialUser(\n+              req.context,\n+              id,\n+              provider,\n+              displayName\n+            );\n+          } catch (err) {\n+            return done(err);\n+          }\n \n-      return ValidateUserLogin(profile, user, done);\n-    }));\n+          return ValidateUserLogin(profile, user, done);\n+        }\n+      )\n+    );\n   },\n-  router(router) {\n-\n+  router: router => {\n     // Note that we have to import the passport instance here, it is\n     // instantiated after all the strategies have been mounted.\n-    const {passport} = require('services/passport');\n+    const { passport } = require(\"services/passport\");\n \n     /**\n      * Facebook auth endpoint, this will redirect the user immediately to facebook\n      * for authorization.\n      */\n-    router.get('/facebook', passport.authenticate('facebook', {display: 'popup', authType: 'rerequest', scope: ['public_profile']}));\n+    router.get(\n+      \"/facebook\",\n+      passport.authenticate(\"facebook\", {\n+        display: \"popup\",\n+        authType: \"rerequest\",\n+        scope: [\"public_profile\"]\n+      })\n+    );\n \n     /**\n      * Facebook callback endpoint, this will send the user a html page designed to\n      * send back the user credentials upon successful login.\n      */\n-    router.get('/facebook/callback', (req, res, next) => {\n-\n+    router.get(\"/facebook/callback\", (req, res, next) => {\n       // Perform the facebook login flow and pass the data back through the opener.\n-      passport.authenticate('facebook', HandleAuthPopupCallback(req, res, next))(req, res, next);\n+      passport.authenticate(\n+        \"facebook\",\n+        HandleAuthPopupCallback(req, res, next)\n+      )(req, res, next);\n     });\n   }\n };\n@@ -360,10 +439,10 @@ module.exports = {\n ### translations\n \n ```js\n-const path = require('path');\n+const path = require(\"path\");\n \n module.exports = {\n-  translations: path.join(__dirname, 'translations.yml'),\n+  translations: path.join(__dirname, \"translations.yml\")\n };\n ```\n \n@@ -377,11 +456,11 @@ en:\n \n Which overrides the copy for the `embedlink.copy` template. You can\n also provide other languages as well by using the correct language\n-prefix. \n+prefix.\n \n-When creating a plugin using this `translations` hook to override copy \n+When creating a plugin using this `translations` hook to override copy\n from another plugin, be sure to list it after the plugin it's overriding\n-in the `plugins.json` file. \n+in the `plugins.json` file.\n \n ### websockets\n \n@@ -392,12 +471,12 @@ module.exports = {\n       // Do something with the connection params or connection, like\n       // logging it out, or incrementing a metric.\n     },\n-    onDisconnect: (connection) => {\n+    onDisconnect: connection => {\n       // Do something with the connection params or connection, like\n       // logging it out, or decrementing a metric.\n-    },\n-  },\n-}\n+    }\n+  }\n+};\n ```\n \n This `websockets` hook can be used to attach methods to the\n@@ -411,12 +490,13 @@ connections.\n module.exports = {\n   schemaLevelResolveFunction: (root, args, ctx, info) => {\n     // The GraphQL Operation Name. Example: CoralEmbedStream_Embed\n-    const name = info.operation.name !== null ? info.operation.name.value : null;\n+    const name =\n+      info.operation.name !== null ? info.operation.name.value : null;\n     // Maybe increment a metric based on the operation name...\n \n     // You must _always_ return the root.\n     return root;\n-  },\n+  }\n };\n ```\n \n@@ -431,9 +511,7 @@ Contents of `plugins.json`:\n \n ```json\n {\n-  \"server\": [\n-    \"people\"\n-  ]\n+  \"server\": [\"people\"]\n }\n ```\n \n@@ -527,5 +605,4 @@ module.exports = {\n     }\n   }\n };\n-\n ```"
    }
  ]
}
