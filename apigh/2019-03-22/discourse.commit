{
  "sha": "399e937a38f4b4917e0c44897c308d39d4a844e1",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODozOTllOTM3YTM4ZjRiNDkxN2UwYzQ0ODk3YzMwOGQzOWQ0YTg0NGUx",
  "commit": {
    "author": {
      "name": "Neil Lalonde",
      "email": "neillalonde@gmail.com",
      "date": "2019-03-22T16:33:54Z"
    },
    "committer": {
      "name": "Neil Lalonde",
      "email": "neillalonde@gmail.com",
      "date": "2019-03-22T16:34:34Z"
    },
    "message": "FIX: prevent sending multiple summary emails due to Sidekiq delays",
    "tree": {
      "sha": "062da3578a644bb50f564ad3491f25e02a922f8c",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/062da3578a644bb50f564ad3491f25e02a922f8c"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/399e937a38f4b4917e0c44897c308d39d4a844e1",
    "comment_count": 1,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/399e937a38f4b4917e0c44897c308d39d4a844e1",
  "html_url": "https://github.com/discourse/discourse/commit/399e937a38f4b4917e0c44897c308d39d4a844e1",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/399e937a38f4b4917e0c44897c308d39d4a844e1/comments",
  "author": {
    "login": "nlalonde",
    "id": 151885,
    "node_id": "MDQ6VXNlcjE1MTg4NQ==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/151885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nlalonde",
    "html_url": "https://github.com/nlalonde",
    "followers_url": "https://api.github.com/users/nlalonde/followers",
    "following_url": "https://api.github.com/users/nlalonde/following{/other_user}",
    "gists_url": "https://api.github.com/users/nlalonde/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nlalonde/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nlalonde/subscriptions",
    "organizations_url": "https://api.github.com/users/nlalonde/orgs",
    "repos_url": "https://api.github.com/users/nlalonde/repos",
    "events_url": "https://api.github.com/users/nlalonde/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nlalonde/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nlalonde",
    "id": 151885,
    "node_id": "MDQ6VXNlcjE1MTg4NQ==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/151885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nlalonde",
    "html_url": "https://github.com/nlalonde",
    "followers_url": "https://api.github.com/users/nlalonde/followers",
    "following_url": "https://api.github.com/users/nlalonde/following{/other_user}",
    "gists_url": "https://api.github.com/users/nlalonde/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nlalonde/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nlalonde/subscriptions",
    "organizations_url": "https://api.github.com/users/nlalonde/orgs",
    "repos_url": "https://api.github.com/users/nlalonde/repos",
    "events_url": "https://api.github.com/users/nlalonde/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nlalonde/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "51e08feb7e78e30ab57f70e2b505d6e6385d7054",
      "url": "https://api.github.com/repos/discourse/discourse/commits/51e08feb7e78e30ab57f70e2b505d6e6385d7054",
      "html_url": "https://github.com/discourse/discourse/commit/51e08feb7e78e30ab57f70e2b505d6e6385d7054"
    }
  ],
  "stats": {
    "total": 49,
    "additions": 40,
    "deletions": 9
  },
  "files": [
    {
      "sha": "7e7d8f580908e0f29c3907b8e0a63f19ca21ea75",
      "filename": "app/jobs/regular/user_email.rb",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/399e937a38f4b4917e0c44897c308d39d4a844e1/app/jobs/regular/user_email.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/399e937a38f4b4917e0c44897c308d39d4a844e1/app/jobs/regular/user_email.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/regular/user_email.rb?ref=399e937a38f4b4917e0c44897c308d39d4a844e1",
      "patch": "@@ -97,7 +97,12 @@ def message_for_email(user, post, type, notification, args = nil)\n         return skip_message(SkippedEmailLog.reason_types[:user_email_user_suspended_not_pm])\n       end\n \n-      return if user.staged && type.to_s == \"digest\"\n+      if type.to_s == \"digest\"\n+        return if user.staged\n+        return if user.last_emailed_at &&\n+          user.last_emailed_at >\n+            (user.user_option&.digest_after_minutes || SiteSetting.default_email_digest_frequency.to_i).minutes.ago\n+      end\n \n       seen_recently = (user.last_seen_at.present? && user.last_seen_at > SiteSetting.email_time_window_mins.minutes.ago)\n       seen_recently = false if always_email_regular?(user, type) || always_email_private_message?(user, type) || user.staged"
    },
    {
      "sha": "16d0e6583a892094e8b51d5ffacab8f080d04483",
      "filename": "spec/jobs/user_email_spec.rb",
      "status": "modified",
      "additions": 34,
      "deletions": 8,
      "changes": 42,
      "blob_url": "https://github.com/discourse/discourse/blob/399e937a38f4b4917e0c44897c308d39d4a844e1/spec/jobs/user_email_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/399e937a38f4b4917e0c44897c308d39d4a844e1/spec/jobs/user_email_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/jobs/user_email_spec.rb?ref=399e937a38f4b4917e0c44897c308d39d4a844e1",
      "patch": "@@ -24,16 +24,43 @@\n     expect { Jobs::UserEmail.new.execute(type: :no_method, user_id: user.id) }.to raise_error(Discourse::InvalidParameters)\n   end\n \n-  it \"doesn't call the mailer when the user is missing\" do\n-    Jobs::UserEmail.new.execute(type: :digest, user_id: 1234)\n+  context 'digest can be generated' do\n+    let(:user) { Fabricate(:user, last_seen_at: 8.days.ago, last_emailed_at: 8.days.ago) }\n+    let!(:popular_topic) { Fabricate(:topic, user: Fabricate(:admin), created_at: 1.hour.ago) }\n \n-    expect(ActionMailer::Base.deliveries).to eq([])\n-  end\n+    it \"doesn't call the mailer when the user is missing\" do\n+      Jobs::UserEmail.new.execute(type: :digest, user_id: 1234)\n+      expect(ActionMailer::Base.deliveries).to eq([])\n+    end\n+\n+    it \"doesn't call the mailer when the user is staged\" do\n+      staged.update_attributes!(last_seen_at: 8.days.ago, last_emailed_at: 8.days.ago)\n+      Jobs::UserEmail.new.execute(type: :digest, user_id: staged.id)\n+      expect(ActionMailer::Base.deliveries).to eq([])\n+    end\n+\n+    context 'not emailed recently' do\n+      before do\n+        user.update_attributes!(last_emailed_at: 8.days.ago)\n+      end\n+\n+      it \"calls the mailer when the user exists\" do\n+        Jobs::UserEmail.new.execute(type: :digest, user_id: user.id)\n+        expect(ActionMailer::Base.deliveries).to_not be_empty\n+      end\n+    end\n \n-  it \"doesn't call the mailer when the user is staged\" do\n-    Jobs::UserEmail.new.execute(type: :digest, user_id: staged.id)\n+    context 'recently emailed' do\n+      before do\n+        user.update_attributes!(last_emailed_at: 2.hours.ago)\n+        user.user_option.update_attributes!(digest_after_minutes: 1.day.to_i / 60)\n+      end\n \n-    expect(ActionMailer::Base.deliveries).to eq([])\n+      it 'skips sending digest email' do\n+        Jobs::UserEmail.new.execute(type: :digest, user_id: user.id)\n+        expect(ActionMailer::Base.deliveries).to eq([])\n+      end\n+    end\n   end\n \n   context \"bounce score\" do\n@@ -602,5 +629,4 @@\n     end\n \n   end\n-\n end"
    }
  ]
}
