{
  "sha": "2a03afddc66760b4af2173285ed1df9c61cd7774",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjJhMDNhZmRkYzY2NzYwYjRhZjIxNzMyODVlZDFkZjljNjFjZDc3NzQ=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-03-24T21:35:23Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-03-24T21:35:23Z"
    },
    "message": "update auth to v0.5.0",
    "tree": {
      "sha": "16c4fb06fa9bac4acc1cbba592ac3d3db12d0c8a",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/16c4fb06fa9bac4acc1cbba592ac3d3db12d0c8a"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/2a03afddc66760b4af2173285ed1df9c61cd7774",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/2a03afddc66760b4af2173285ed1df9c61cd7774",
  "html_url": "https://github.com/umputun/remark/commit/2a03afddc66760b4af2173285ed1df9c61cd7774",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/2a03afddc66760b4af2173285ed1df9c61cd7774/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b534991770e37b9e9dd627e140adf9298e19f9d8",
      "url": "https://api.github.com/repos/umputun/remark/commits/b534991770e37b9e9dd627e140adf9298e19f9d8",
      "html_url": "https://github.com/umputun/remark/commit/b534991770e37b9e9dd627e140adf9298e19f9d8"
    }
  ],
  "stats": {
    "total": 119,
    "additions": 77,
    "deletions": 42
  },
  "files": [
    {
      "sha": "e64b70da3f76b7812e921e8878868dde7d597023",
      "filename": ".dockerignore",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/.dockerignore",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/.dockerignore",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/.dockerignore?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -20,3 +20,4 @@ debug.test\n *.prof\n *.test\n remark42\n+/backend/var/\n\\ No newline at end of file"
    },
    {
      "sha": "0f74b4535a255aced57bbffcae7fb4b63b2abf1e",
      "filename": ".gitignore",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/.gitignore",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/.gitignore",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/.gitignore?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -17,4 +17,5 @@ debug.test\n .DS_Store\n .mongo\n remark42\n-/bin/\n\\ No newline at end of file\n+/bin/\n+/backend/var/\n\\ No newline at end of file"
    },
    {
      "sha": "6dc84b44347f5ea56309b48934ca633392ac5f04",
      "filename": "backend/go.mod",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/go.mod",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/go.mod?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -13,7 +13,7 @@ require (\n \tgithub.com/go-chi/chi v3.3.2+incompatible\n \tgithub.com/go-chi/cors v1.0.0\n \tgithub.com/go-chi/render v1.0.0\n-\tgithub.com/go-pkgz/auth v0.4.2\n+\tgithub.com/go-pkgz/auth v0.5.0\n \tgithub.com/go-pkgz/lcw v0.2.0\n \tgithub.com/go-pkgz/lgr v0.4.0\n \tgithub.com/go-pkgz/mongo v1.1.2"
    },
    {
      "sha": "7a21bfa4cdefdfaf3f1548c0524ce642813e7645",
      "filename": "backend/go.sum",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/go.sum",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/go.sum?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -28,6 +28,8 @@ github.com/go-chi/render v1.0.0 h1:cLJlkaTB4xfx5rWhtoB0BSXsXVJKWFqv08Y3cR1bZKA=\n github.com/go-chi/render v1.0.0/go.mod h1:pq4Rr7HbnsdaeHagklXub+p6Wd16Af5l9koip1OvJns=\n github.com/go-pkgz/auth v0.4.2 h1:WY3XzjUieUGxJSjXDU0rLrKt8RcPEaGdtLVRS7M56wU=\n github.com/go-pkgz/auth v0.4.2/go.mod h1:CWtB8dHmOv+TfF3MUzKwk/YwTLepC2TaDL05A+pFVBM=\n+github.com/go-pkgz/auth v0.5.0 h1:+wqppq35x83PchZNZ7SHHYLI/e8WeETFouujDLsklac=\n+github.com/go-pkgz/auth v0.5.0/go.mod h1:CWtB8dHmOv+TfF3MUzKwk/YwTLepC2TaDL05A+pFVBM=\n github.com/go-pkgz/lcw v0.2.0 h1:aFoKUG8q0YybId+ThVRQpDMjjuSG4hkLL1EA2xUtruc=\n github.com/go-pkgz/lcw v0.2.0/go.mod h1:k+PY1CkCMTLXILtFoJOyK65Qqi9rkoTYunFH1vE/C0I=\n github.com/go-pkgz/lgr v0.2.2/go.mod h1:hBM1NM/SoYdlrykgdgJWGrZ/TM/XaZIjRbJfx7NkMm8="
    },
    {
      "sha": "2109af133cdfeb67df2e19db2f5335cdcaca3a05",
      "filename": "backend/vendor/github.com/go-pkgz/auth/README.md",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/README.md",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/auth/README.md?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -10,7 +10,8 @@ This library provides \"social login\" with Github, Google, Facebook and Yandex as\n - Minimal scopes with user name, id and picture (avatar) only\n - Direct authentication with user's provided credential checker\n - Integrated avatar proxy with FS, boltdb and gridfs storages\n-- Support of user-defined storages for avatars\n+- Support of user-defined storage for avatars\n+- Identicon for default avatars  \n - Black list with user-defined validator\n - Multiple aud (audience) supported\n - Secure key with customizable `SecretReader`\n@@ -144,6 +145,8 @@ Such provider acts like any other, i.e. will be registered as `/auth/local/login\n \n The API for this provider - `GET /auth/<name>/login?user=<user>&passwd=<password>&aud=<site_id>&session=[1|0]`\n \n+_note: password parameter doesn't have to be naked/real password and can be any kind of password hash prepared by caller._ \n+  \n ### Customization\n \n There are several ways to adjust functionality of the library:"
    },
    {
      "sha": "3992222ebaf631c59f8197c6b0bf493ac2d51272",
      "filename": "backend/vendor/github.com/go-pkgz/auth/auth.go",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/auth.go",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/auth.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/auth/auth.go?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -1,3 +1,4 @@\n+// Package auth provides \"social login\" with Github, Google, Facebook and Yandex as well as custom auth providers.\n package auth\n \n import (\n@@ -226,6 +227,7 @@ func (s *Service) AddDirectProvider(name string, credChecker provider.CredChecke\n \t\tIssuer:       s.issuer,\n \t\tTokenService: s.jwtService,\n \t\tCredChecker:  credChecker,\n+\t\tAvatarSaver:  s.avatarProxy,\n \t}\n \ts.providers = append(s.providers, provider.NewService(dh))\n \ts.authMiddleware.Providers = s.providers"
    },
    {
      "sha": "8c816a8fded40ed46d3cbdcbae161febae135654",
      "filename": "backend/vendor/github.com/go-pkgz/auth/avatar/avatar.go",
      "status": "modified",
      "additions": 32,
      "deletions": 2,
      "changes": 34,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/avatar/avatar.go",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/avatar/avatar.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/auth/avatar/avatar.go?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -13,6 +13,7 @@ import (\n \t\"time\"\n \n \t\"github.com/go-pkgz/rest\"\n+\t\"github.com/nullrocks/identicon\"\n \t\"github.com/pkg/errors\"\n \t\"golang.org/x/image/draw\"\n \n@@ -33,9 +34,19 @@ type Proxy struct {\n // Put stores retrieved avatar to avatar.Store. Gets image from user info. Returns proxied url\n func (p *Proxy) Put(u token.User) (avatarURL string, err error) {\n \n-\t// no picture for user, try default avatar\n+\t// no picture for user, try to generate identicon avatar\n \tif u.Picture == \"\" {\n-\t\treturn \"\", errors.Errorf(\"no picture for %s\", u.ID)\n+\t\tb, err := GenerateAvatar(u.ID)\n+\t\tif err != nil {\n+\t\t\treturn \"\", errors.Errorf(\"no picture for %s\", u.ID)\n+\t\t}\n+\t\tavatarID, err := p.Store.Put(u.ID, p.resize(bytes.NewBuffer(b), p.ResizeLimit)) // put returns avatar base name, like 123456.image\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\n+\t\tp.Logf(\"[DEBUG] saved identicon avatar to %s, user %q\", avatarID, u.Name)\n+\t\treturn p.URL + p.RoutePath + \"/\" + avatarID, nil\n \t}\n \n \t// load avatar from remote location\n@@ -152,6 +163,25 @@ func (p *Proxy) resize(reader io.Reader, limit int) io.Reader {\n \t}\n \treturn &out\n }\n+\n+// GenerateAvatar for give user with identicon\n+func GenerateAvatar(user string) ([]byte, error) {\n+\n+\ticonGen, err := identicon.New(\"pkgz/auth\", 5, 5)\n+\tif err != nil {\n+\t\treturn nil, errors.Wrap(err, \"can't create identicon service\")\n+\t}\n+\n+\tii, err := iconGen.Draw(user) // generate an IdentIcon\n+\tif err != nil {\n+\t\treturn nil, errors.Wrapf(err, \"failed to draw avatar for %s\", user)\n+\t}\n+\n+\tbuf := &bytes.Buffer{}\n+\terr = ii.Png(300, buf)\n+\treturn buf.Bytes(), err\n+}\n+\n func retry(retries int, delay time.Duration, fn func() error) (err error) {\n \tfor i := 0; i < retries; i++ {\n \t\tif err = fn(); err == nil {"
    },
    {
      "sha": "308c456ee7865105e3406c1f5c5d79ebcb0ec702",
      "filename": "backend/vendor/github.com/go-pkgz/auth/logger/interface.go",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/logger/interface.go",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/logger/interface.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/auth/logger/interface.go?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -1,3 +1,5 @@\n+// Package logger defines interface for logging. Implementation should be passed by user.\n+// Also provides NoOp (do-nothing) and Std (redirect to std log) predefined loggers.\n package logger\n \n import \"log\""
    },
    {
      "sha": "1416bd9bdc82b006a4fc74f7663d937d8e8b135a",
      "filename": "backend/vendor/github.com/go-pkgz/auth/middleware/auth.go",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/middleware/auth.go",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/middleware/auth.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/auth/middleware/auth.go?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -1,4 +1,7 @@\n-// Package middleware provides oauth2 support as well as related middlewares.\n+// Package middleware provides login middlewares:\n+// - Auth: adds auth from session and populates user info\n+// - Trace: populates user info if token presented\n+// - AdminOnly: restrict access to admin users only\n package middleware\n \n import (\n@@ -35,6 +38,7 @@ type TokenService interface {\n \tReset(w http.ResponseWriter)\n }\n \n+// adminUser sets claims for an optional basic auth\n var adminUser = token.User{\n \tID:   \"admin\",\n \tName: \"admin\",\n@@ -120,6 +124,7 @@ func (a *Authenticator) auth(reqAuth bool) func(http.Handler) http.Handler {\n // refreshExpiredToken makes a new token with passed claims\n func (a *Authenticator) refreshExpiredToken(w http.ResponseWriter, claims token.Claims, tkn string) (token.Claims, error) {\n \n+\t// cache refreshed claims for given token in order to eliminate multiple refreshes for concurrent requests\n \tif a.RefreshCache != nil {\n \t\tif c, ok := a.RefreshCache.Get(tkn); ok {\n \t\t\t// already in cache"
    },
    {
      "sha": "e0359245d65ac1f418b2866340194e51fd05a845",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/dev_provider.go",
      "status": "modified",
      "additions": 2,
      "deletions": 24,
      "changes": 26,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/provider/dev_provider.go",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/provider/dev_provider.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/auth/provider/dev_provider.go?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -1,7 +1,6 @@\n package provider\n \n import (\n-\t\"bytes\"\n \t\"context\"\n \t\"fmt\"\n \t\"net/http\"\n@@ -10,9 +9,8 @@ import (\n \t\"text/template\"\n \t\"time\"\n \n+\t\"github.com/go-pkgz/auth/avatar\"\n \t\"github.com/go-pkgz/auth/logger\"\n-\t\"github.com/nullrocks/identicon\"\n-\t\"github.com/pkg/errors\"\n \t\"golang.org/x/oauth2\"\n \n \t\"github.com/go-pkgz/auth/token\"\n@@ -31,7 +29,6 @@ type DevAuthServer struct {\n \tAutomatic bool\n \tusername  string // unsafe, but fine for dev\n \n-\ticonGen    *identicon.Generator\n \thttpServer *http.Server\n \tlock       sync.Mutex\n }\n@@ -42,10 +39,6 @@ func (d *DevAuthServer) Run(ctx context.Context) {\n \td.Logf(\"[INFO] run local oauth2 dev server on %d, redir url=%s\", devAuthPort, d.Provider.redirectURL)\n \td.lock.Lock()\n \tvar err error\n-\td.iconGen, err = identicon.New(\"github\", 5, 3)\n-\tif err != nil {\n-\t\td.Logf(\"[WARN] can't create identicon, %s\", err)\n-\t}\n \n \tuserFormTmpl, err := template.New(\"page\").Parse(devUserFormTmpl)\n \tif err != nil {\n@@ -113,7 +106,7 @@ func (d *DevAuthServer) Run(ctx context.Context) {\n \n \t\t\tcase strings.HasPrefix(r.URL.Path, \"/avatar\"):\n \t\t\t\tuser := r.URL.Query().Get(\"user\")\n-\t\t\t\tb, e := d.genAvatar(user)\n+\t\t\t\tb, e := avatar.GenerateAvatar(user)\n \t\t\t\tif e != nil {\n \t\t\t\t\tw.WriteHeader(http.StatusNotFound)\n \t\t\t\t\treturn\n@@ -177,21 +170,6 @@ func NewDev(p Params) Oauth2Handler {\n \t})\n }\n \n-func (d *DevAuthServer) genAvatar(user string) ([]byte, error) {\n-\tif d.iconGen == nil {\n-\t\treturn nil, errors.Errorf(\"no iconGen, skip avatar generation for %s\", user)\n-\t}\n-\n-\tii, err := d.iconGen.Draw(user) // Generate an IdentIcon\n-\tif err != nil {\n-\t\treturn nil, errors.Wrapf(err, \"failed to draw avatar for %s\", user)\n-\t}\n-\n-\tbuf := &bytes.Buffer{}\n-\terr = ii.Png(300, buf)\n-\treturn buf.Bytes(), err\n-}\n-\n var devUserFormTmpl = `\n <html>\n \t<head>"
    },
    {
      "sha": "d8fd2a80c8cba863bf1de2fd0622f6d9cc3addee",
      "filename": "backend/vendor/github.com/go-pkgz/auth/provider/direct.go",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/provider/direct.go",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/provider/direct.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/auth/provider/direct.go?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -20,6 +20,7 @@ type DirectHandler struct {\n \tProviderName string\n \tTokenService TokenService\n \tIssuer       string\n+\tAvatarSaver  AvatarSaver\n }\n \n // CredChecker defines interface to check credentials\n@@ -45,23 +46,31 @@ func (p DirectHandler) LoginHandler(w http.ResponseWriter, r *http.Request) {\n \taud := r.URL.Query().Get(\"aud\")\n \tsessOnly := r.URL.Query().Get(\"sess\") == \"1\"\n \tif p.CredChecker == nil {\n-\t\trest.SendErrorJSON(w, r, p.L, http.StatusInternalServerError, errors.New(\"empty credential store\"), \"no credential store\")\n+\t\trest.SendErrorJSON(w, r, p.L, http.StatusInternalServerError,\n+\t\t\terrors.New(\"no credential checker\"), \"no credential checker\")\n \t\treturn\n \t}\n \tok, err := p.CredChecker.Check(user, password)\n \tif err != nil {\n-\t\trest.SendErrorJSON(w, r, p.L, http.StatusInternalServerError, err, \"failed to access creds store\")\n+\t\trest.SendErrorJSON(w, r, p.L, http.StatusInternalServerError, err, \"failed to check user credentials\")\n \t\treturn\n \t}\n \tif !ok {\n \t\trest.SendErrorJSON(w, r, p.L, http.StatusForbidden, nil, \"incorrect user or password\")\n \t\treturn\n \t}\n+\tu := token.User{\n+\t\tName: user,\n+\t\tID:   p.ProviderName + \"_\" + token.HashID(sha1.New(), user),\n+\t}\n+\tu, err = setAvatar(p.AvatarSaver, u)\n+\tif err != nil {\n+\t\trest.SendErrorJSON(w, r, p.L, http.StatusInternalServerError, err, \"failed to save avatar to proxy\")\n+\t\treturn\n+\t}\n+\n \tclaims := token.Claims{\n-\t\tUser: &token.User{\n-\t\t\tName: user,\n-\t\t\tID:   p.ProviderName + \"_\" + token.HashID(sha1.New(), user),\n-\t\t},\n+\t\tUser: &u,\n \t\tStandardClaims: jwt.StandardClaims{\n \t\t\tIssuer:   p.Issuer,\n \t\t\tAudience: aud,"
    },
    {
      "sha": "12f180b50bc65fa812a121eda1d6b774f337840c",
      "filename": "backend/vendor/github.com/go-pkgz/auth/token/user.go",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/token/user.go",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/github.com/go-pkgz/auth/token/user.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/github.com/go-pkgz/auth/token/user.go?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -20,12 +20,14 @@ const adminAttr = \"admin\" // predefined attribute key for bool isAdmin status\n \n // User is the basic part of oauth data provided by service\n type User struct {\n+\t// set by service\n \tName    string `json:\"name\"`\n \tID      string `json:\"id\"`\n \tPicture string `json:\"picture\"`\n-\tIP      string `json:\"ip,omitempty\"`\n-\tEmail   string `json:\"email,omitempty\"`\n \n+\t// set by client\n+\tIP         string                 `json:\"ip,omitempty\"`\n+\tEmail      string                 `json:\"email,omitempty\"`\n \tAttributes map[string]interface{} `json:\"attrs,omitempty\"`\n }\n \n@@ -82,7 +84,7 @@ func (u *User) SliceAttr(key string) []string {\n \treturn r\n }\n \n-// SetSliceAttr sets boolean attribute\n+// SetSliceAttr sets slice attribute for given key\n func (u *User) SetSliceAttr(key string, val []string) {\n \tif u.Attributes == nil {\n \t\tu.Attributes = map[string]interface{}{}\n@@ -112,7 +114,7 @@ func HashID(h hash.Hash, val string) string {\n \n type contextKey string\n \n-// MustGetUserInfo fails if can't extract user data from the request.\n+// MustGetUserInfo gets user info and panics if can't extract it from the request.\n // should be called from authenticated controllers only\n func MustGetUserInfo(r *http.Request) User {\n \tuser, err := GetUserInfo(r)\n@@ -122,7 +124,7 @@ func MustGetUserInfo(r *http.Request) User {\n \treturn user\n }\n \n-// GetUserInfo returns user from request context\n+// GetUserInfo returns user info from request context\n func GetUserInfo(r *http.Request) (user User, err error) {\n \n \tctx := r.Context()"
    },
    {
      "sha": "4863c4d0080a943bad9b787be4ff4683133fa78c",
      "filename": "backend/vendor/modules.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/modules.txt",
      "raw_url": "https://github.com/umputun/remark/raw/2a03afddc66760b4af2173285ed1df9c61cd7774/backend/vendor/modules.txt",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/modules.txt?ref=2a03afddc66760b4af2173285ed1df9c61cd7774",
      "patch": "@@ -30,7 +30,7 @@ github.com/go-chi/chi/middleware\n github.com/go-chi/cors\n # github.com/go-chi/render v1.0.0\n github.com/go-chi/render\n-# github.com/go-pkgz/auth v0.4.2\n+# github.com/go-pkgz/auth v0.5.0\n github.com/go-pkgz/auth\n github.com/go-pkgz/auth/avatar\n github.com/go-pkgz/auth/provider"
    }
  ]
}
