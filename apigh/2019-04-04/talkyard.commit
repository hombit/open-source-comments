{
  "sha": "53ec0dfd340f2c56e991fd858c09054baff6456b",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6NTNlYzBkZmQzNDBmMmM1NmU5OTFmZDg1OGMwOTA1NGJhZmY2NDU2Yg==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-04-01T15:16:36Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-04-01T15:16:36Z"
    },
    "message": "Fix bug: Refresh page if post flagged & hidden\n\nAnd move flagPost to its own controller file.",
    "tree": {
      "sha": "1b9eea1387e69ff111909dca9eb4c291649e83b9",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/1b9eea1387e69ff111909dca9eb4c291649e83b9"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/53ec0dfd340f2c56e991fd858c09054baff6456b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/53ec0dfd340f2c56e991fd858c09054baff6456b",
  "html_url": "https://github.com/debiki/talkyard/commit/53ec0dfd340f2c56e991fd858c09054baff6456b",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/53ec0dfd340f2c56e991fd858c09054baff6456b/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bd746208c8223ea332e8020d5e2580f1aa0ceb9b",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/bd746208c8223ea332e8020d5e2580f1aa0ceb9b",
      "html_url": "https://github.com/debiki/talkyard/commit/bd746208c8223ea332e8020d5e2580f1aa0ceb9b"
    }
  ],
  "stats": {
    "total": 144,
    "additions": 33,
    "deletions": 111
  },
  "files": [
    {
      "sha": "85f02a4e77d95e748cc84f442e2534f1aca62da3",
      "filename": "app/controllers/Application.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 54,
      "changes": 55,
      "blob_url": "https://github.com/debiki/talkyard/blob/53ec0dfd340f2c56e991fd858c09054baff6456b/app/controllers/Application.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/53ec0dfd340f2c56e991fd858c09054baff6456b/app/controllers/Application.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/Application.scala?ref=53ec0dfd340f2c56e991fd858c09054baff6456b",
      "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright (C) 2012-2013 Kaj Magnus Lindberg (born 1979)\n+ * Copyright (c) 2012-2013 Kaj Magnus Lindberg\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU Affero General Public License as\n@@ -17,26 +17,16 @@\n \n package controllers\n \n-import com.debiki.core._\n import com.debiki.core.Prelude.unimplemented\n-import debiki._\n-import debiki.EdHttp._\n import ed.server.{EdContext, EdController}\n import javax.inject.Inject\n import play.api.mvc._\n-import ed.server.auth.Authz\n-import play.api.libs.json.JsValue\n \n \n \n-// RENAME to FlagController?\n-// Or add  FlagUser fn, so can flag user with offensive username?\n-// Or move to PostController?, and add flagUser() in UserController?\n class Application @Inject()(cc: ControllerComponents, edContext: EdContext)\n   extends EdController(cc, edContext) {\n \n-  import context.security._\n-\n \n   def mobileAppWebmanifest(): Action[Unit] = GetActionAllowAnyone { _ =>  // [sw]\n     unimplemented(\"TyE7KAESW\")\n@@ -72,47 +62,4 @@ class Application @Inject()(cc: ControllerComponents, edContext: EdContext)\n     //   \"max-age=86400, s-maxage=86400, public\"\n   }\n \n-\n-  def flag: Action[JsValue] = PostJsonAction(RateLimits.FlagPost, maxBytes = 2000) { request =>\n-    import request.{body, dao}\n-    SHOULD // change from page-id + post-nr to post-id.\n-    val pageId = (body \\ \"pageId\").as[PageId]\n-    val postNr = (body \\ \"postNr\").as[PostNr]\n-    val typeStr = (body \\ \"type\").as[String]\n-    //val reason = (body \\ \"reason\").as[String]\n-\n-    val flagType = typeStr match {\n-      case \"Spam\" => PostFlagType.Spam\n-      case \"Inapt\" => PostFlagType.Inapt\n-      case \"Other\" => PostFlagType.Other\n-      case x => throwBadReq(\"DwE7PKTS3\", s\"Bad flag type: '$x'\")\n-    }\n-\n-    // COULD save `reason` somewhere, but where? Where does Discourse save it?\n-\n-    val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdE3FJB8W2\")\n-    val post = dao.loadPost(pageId, postNr) getOrElse throwIndistinguishableNotFound(\"EdE5PJB2R8\")\n-    val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n-\n-    throwNoUnless(Authz.mayFlagPost(\n-      request.theMember, dao.getGroupIds(request.theUser),\n-      post, pageMeta, dao.getAnyPrivateGroupTalkMembers(pageMeta),\n-      inCategoriesRootLast = categoriesRootLast,\n-      permissions = dao.getPermsOnPages(categoriesRootLast)), \"EdEZBXKSM2\")\n-\n-    val postsHidden = try {\n-      dao.flagPost(pageId = pageId, postNr = postNr, flagType,\n-        flaggerId = request.theUser.id)\n-    }\n-    catch {\n-      case DbDao.DuplicateVoteException =>\n-        throwForbidden(\"EdE5PKY02\", \"You have already flagged this post\")\n-    }\n-\n-    // If some posts got hidden, then rerender them as hidden, so the flagger sees they got hidden.\n-    val json = dao.jsonMaker.makeStorePatchForPosts(\n-      postsHidden.map(_.id).toSet, showHidden = false, dao)\n-    OkSafeJson(json)\n-  }\n-\n }"
    },
    {
      "sha": "34493cb1e91f15fda0595ee70fdc28aa9c74370c",
      "filename": "app/controllers/FlagController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 42,
      "changes": 47,
      "blob_url": "https://github.com/debiki/talkyard/blob/53ec0dfd340f2c56e991fd858c09054baff6456b/app/controllers/FlagController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/53ec0dfd340f2c56e991fd858c09054baff6456b/app/controllers/FlagController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/FlagController.scala?ref=53ec0dfd340f2c56e991fd858c09054baff6456b",
      "patch": "@@ -1,5 +1,5 @@\n /**\n- * Copyright (C) 2012-2013 Kaj Magnus Lindberg (born 1979)\n+ * Copyright (C) 2012-2013 Kaj Magnus Lindberg\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU Affero General Public License as\n@@ -18,7 +18,6 @@\n package controllers\n \n import com.debiki.core._\n-import com.debiki.core.Prelude.unimplemented\n import debiki._\n import debiki.EdHttp._\n import ed.server.{EdContext, EdController}\n@@ -29,51 +28,15 @@ import play.api.libs.json.JsValue\n \n \n \n-// RENAME to FlagController?\n-// Or add  FlagUser fn, so can flag user with offensive username?\n-// Or move to PostController?, and add flagUser() in UserController?\n-class Application @Inject()(cc: ControllerComponents, edContext: EdContext)\n+// Add  flagUser() fn, so can flag user with offensive username?\n+//\n+class FlagController @Inject()(cc: ControllerComponents, edContext: EdContext)\n   extends EdController(cc, edContext) {\n \n   import context.security._\n \n \n-  def mobileAppWebmanifest(): Action[Unit] = GetActionAllowAnyone { _ =>  // [sw]\n-    unimplemented(\"TyE7KAESW\")\n-    // See:  https://github.com/discourse/discourse/blob/master/app/controllers/metadata_controller.rb\n-    // or display: browser ?\n-    // But:  Use `display: browser` in webmanifest for iOS devices\n-    //       https://meta.discourse.org/t/back-button-in-responsive-app/93909/5\n-    //       Otherwise, will be no Back button in iOS.\n-    //\n-    // Also compare with: (root)/images/web/ty-media/favicon/site.webmanifest.\n-    //\n-    Ok(s\"\"\"\n-      |{\n-      |  \"name\": \"The Most Awesome Dragon Site\",\n-      |  \"short_name\": \"ððð\",\n-      |  \"display\": \"minimal-ui\",\n-      |  \"start_url\": \"/\",\n-      |  \"theme_color\": \"#673ab6\",\n-      |  \"background_color\": \"#111111\",\n-      |  \"orientation\": \"any\",\n-      |  \"icons\": [\n-      |    {\n-      |      \"src\": \"icon-192.png\",\n-      |      \"sizes\": \"192x192\",\n-      |      \"type\": \"image/png\"\n-      |    }\n-      |  ]\n-      |}\n-    \"\"\".stripMargin) as \"application/manifest+json\"  // TODO cache 1 day only, for now?\n-    // needs to be that content type, see:\n-    // https://github.com/discourse/discourse/commit/8fc08aad09d0db9bc176a9f2376f05b3c9cebc6b#diff-d73ec52fd8b68ed588bf337398eee53d\n-    // cache max 1 day? later, maybe half a week?\n-    //   \"max-age=86400, s-maxage=86400, public\"\n-  }\n-\n-\n-  def flag: Action[JsValue] = PostJsonAction(RateLimits.FlagPost, maxBytes = 2000) { request =>\n+  def flagPost: Action[JsValue] = PostJsonAction(RateLimits.FlagPost, maxBytes = 2000) { request =>\n     import request.{body, dao}\n     SHOULD // change from page-id + post-nr to post-id.\n     val pageId = (body \\ \"pageId\").as[PageId]"
    },
    {
      "sha": "a8583e3bd44f03d42273d58bc62b13dfe1397dfe",
      "filename": "app/debiki/dao/PostsDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/53ec0dfd340f2c56e991fd858c09054baff6456b/app/debiki/dao/PostsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/53ec0dfd340f2c56e991fd858c09054baff6456b/app/debiki/dao/PostsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/PostsDao.scala?ref=53ec0dfd340f2c56e991fd858c09054baff6456b",
      "patch": "@@ -1687,6 +1687,7 @@ trait PostsDao {\n     var postsHidden = ifBadAuthorCensorEverything(postAfter)\n     if (wasHidden) {\n       postsHidden :+= postAfter\n+      refreshPageInMemCache(pageId)\n     }\n     postsHidden\n   }"
    },
    {
      "sha": "5282f089ce8b97c962f1f5793f8d39374483ba16",
      "filename": "app/ed/server/EdAppLoader.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/53ec0dfd340f2c56e991fd858c09054baff6456b/app/ed/server/EdAppLoader.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/53ec0dfd340f2c56e991fd858c09054baff6456b/app/ed/server/EdAppLoader.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/EdAppLoader.scala?ref=53ec0dfd340f2c56e991fd858c09054baff6456b",
      "patch": "@@ -116,7 +116,7 @@ class EdAppComponents(appLoaderContext: ApplicationLoader.Context)\n     new _root_.controllers.CustomFormController(cc, context),\n     new ed.plugins.utx.UsabilityTestingExchangeController(cc, context),\n     new _root_.controllers.VoteController(cc, context),\n-    new _root_.controllers.Application(cc, context),\n+    new _root_.controllers.FlagController(cc, context),\n     new _root_.controllers.EditController(cc, context),\n     new _root_.controllers.PageTitleSettingsController(cc, context),\n     new _root_.controllers.GroupTalkController(cc, context),\n@@ -129,6 +129,7 @@ class EdAppComponents(appLoaderContext: ApplicationLoader.Context)\n     new _root_.controllers.SuperAdminController(cc, context),\n     new _root_.controllers.ApiSecretsController(cc, context),\n     new _root_.controllers.ApiV0Controller(cc, context, backupController),\n+    //new _root_.controllers.Application(cc, context),\n     new _root_.controllers.ViewPageController(cc, context))\n \n }"
    },
    {
      "sha": "3fbd02916d3565f909a3575e7ef7e8bb38cda072",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/53ec0dfd340f2c56e991fd858c09054baff6456b/conf/routes",
      "raw_url": "https://github.com/debiki/talkyard/raw/53ec0dfd340f2c56e991fd858c09054baff6456b/conf/routes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf/routes?ref=53ec0dfd340f2c56e991fd858c09054baff6456b",
      "patch": "@@ -203,7 +203,8 @@ GET   /-/utx-pick-a-task        ed.plugins.utx.UsabilityTestingExchangeControlle\n \n POST  /-/vote                   controllers.VoteController.handleVotes\n GET   /-/load-voters            controllers.VoteController.loadVoters(postId: Int, voteType: Int)\n-POST  /-/flag                   controllers.Application.flag\n+\n+POST  /-/flag                   controllers.FlagController.flagPost\n \n GET   /-/load-draft-and-guidelines controllers.EditController.loadDraftAndGuidelines(writingWhat: Int, draftType: Int, pageRole: Int, categoryId: Option[Int], toUserId: Option[Int], pageId: Option[String], postNr: Option[Int])\n GET   /-/load-draft-and-text    controllers.EditController.loadDraftAndText(pageId, postNr: Int)\n@@ -294,10 +295,10 @@ POST  /-/delete-api-secrets     controllers.ApiSecretsController.deleteApiSecret\n GET   /-/v0/*apiEndpoint        controllers.ApiV0Controller.getFromApi(apiEndpoint)\n POST  /-/v0/*apiEndpoint        controllers.ApiV0Controller.postToApi(apiEndpoint)\n \n-GET   /-/load-post              controllers.ViewPageController.loadPost(pageId: String, postNr: Int)\n-\n #GET   /manifest.webmanifest     controllers.Application.mobileAppWebmanifest\n \n+GET   /-/load-post              controllers.ViewPageController.loadPost(pageId: String, postNr: Int)\n+\n # COULD remove? use only /-/track-reading-activity ?\n POST  /-/mark-as-seen           controllers.ViewPageController.markPageAsSeen(pageId)\n GET   /*path                    controllers.ViewPageController.viewPage(path)"
    },
    {
      "sha": "ce8bf271e65b67908fc78d81a402d86a3b3a4303",
      "filename": "tests/e2e/specs/flag-member-block-agree.2browsers.test.ts",
      "status": "modified",
      "additions": 20,
      "deletions": 11,
      "changes": 31,
      "blob_url": "https://github.com/debiki/talkyard/blob/53ec0dfd340f2c56e991fd858c09054baff6456b/tests/e2e/specs/flag-member-block-agree.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/53ec0dfd340f2c56e991fd858c09054baff6456b/tests/e2e/specs/flag-member-block-agree.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/flag-member-block-agree.2browsers.test.ts?ref=53ec0dfd340f2c56e991fd858c09054baff6456b",
      "patch": "@@ -79,6 +79,8 @@ describe(\"spam test, no external services:\", () => {\n     site.settings.allowGuestLogin = true;\n     site.settings.requireVerifiedEmail = false;\n     site.settings.numFlagsToHidePost = 2;\n+    site.settings.numFlagsToBlockNewUser = 7;\n+    site.settings.numFlaggersToBlockNewUser = 3;\n     //site.members.push(mons);\n     site.members.push(maja);\n     site.members.push(maria);\n@@ -164,15 +166,15 @@ describe(\"spam test, no external services:\", () => {\n \n   it(\"... and, in another topic, flags one reply and the OrigPost\", () => {\n     majasBrowser.go(topics.puppiesOneReplyUrl);\n-    majasBrowser.complex.flagPost(1, 'Inapt');\n-    majasBrowser.complex.flagPost(2, 'Inapt');\n+    majasBrowser.complex.flagPost(1, 'Inapt');   // Mallory now flagged 1 times\n+    majasBrowser.complex.flagPost(2, 'Inapt');   // Mallory now flagged 2 times\n   });\n \n   // Old topic: post 2 flagged\n \n   it(\"... and in the old topic, flags a reply\", () => {\n     majasBrowser.go(topics.oldTopicUrl);\n-    majasBrowser.complex.flagPost(2, 'Inapt');\n+    majasBrowser.complex.flagPost(2, 'Inapt');   // Mallory now flagged 3 times\n   });\n \n \n@@ -187,7 +189,7 @@ describe(\"spam test, no external services:\", () => {\n   // Old page: post 2 gets hidden\n \n   it(\"... flags a reply\", () => {\n-    mariasBrowser.complex.flagPost(2, 'Inapt');\n+    mariasBrowser.complex.flagPost(2, 'Inapt');   // Mallory now flagged 4 times\n   });\n \n   it(\"Now that reply got two flags, and gets hidden\", () => {\n@@ -202,17 +204,18 @@ describe(\"spam test, no external services:\", () => {\n \n   it(\"... but other replies didn't get hidden\", () => {\n     mariasBrowser.topic.assertPostNotHidden(3);\n+    mariasBrowser.topic.assertPostNotHidden(4);\n   });\n \n   // Puppies page: one reply, gets hidden\n \n-  it(\"Maria sees goes to puppy page\", () => {\n+  it(\"Maria goes to the puppy page\", () => {\n     majasBrowser.go('/');\n     majasBrowser.forumTopicList.goToTopic(topics.puppiesOneReplyTitle);\n   });\n \n   it(\"... flags Mallory's reply\", () => {\n-    majasBrowser.complex.flagPost(2, 'Inapt');\n+    majasBrowser.complex.flagPost(2, 'Inapt');   // Mallory now flagged 5 times\n   });\n \n   it(\"... it gets hidden\", () => {\n@@ -227,16 +230,22 @@ describe(\"spam test, no external services:\", () => {\n   // Puppies page: OP & whole page gets hidden\n \n   it(\"Maria flags puppet page orig post\", () => {\n-    majasBrowser.complex.flagPost(1, 'Inapt');\n+    majasBrowser.complex.flagPost(c.BodyNr, 'Inapt');   // Mallory now flagged 6 times\n   });\n \n   it(\"... it also gets hidden\", () => {\n-    mariasBrowser.topic.assertPostHidden(1);\n+    mariasBrowser.topic.assertPostHidden(c.BodyNr);\n   });\n \n-  it(\"... now the whole page got hidden\", () => {\n+  it(\"... the whole page got hidden\", () => {\n     mariasBrowser.refresh();\n-    mariasBrowser.pageTitle.assertPageHidden();\n+    mariasBrowser.assertWholePageHidden();\n+  });\n+\n+  it(\"... Mallory can still access the page. He sees a crossed out eye, meaning, hidden\", () => {\n+    mallorysBrowser.go(topics.puppiesOneReplyUrl);\n+    mallorysBrowser.refresh();\n+    mallorysBrowser.pageTitle.assertPageHidden();\n   });\n \n   it(\"... the page is no longer listed in the topic list\", () => {\n@@ -258,7 +267,7 @@ describe(\"spam test, no external services:\", () => {\n \n   it(\"... and flags one of Mallory's posts — now lots of flags (7), by 3 people\", () => {\n     michaelsBrowser.go(topics.oldTopicUrl);\n-    michaelsBrowser.complex.flagPost(3, 'Inapt');\n+    michaelsBrowser.complex.flagPost(3, 'Inapt');   // Mallory now flagged 7 times\n   });\n \n "
    }
  ]
}
