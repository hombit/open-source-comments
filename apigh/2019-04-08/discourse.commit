{
  "sha": "df1ab9259b70addb54485c1f1dfd622e46f6ef30",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpkZjFhYjkyNTliNzBhZGRiNTQ0ODVjMWYxZGZkNjIyZTQ2ZjZlZjMw",
  "commit": {
    "author": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2019-04-08T16:39:18Z"
    },
    "committer": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2019-04-08T16:39:18Z"
    },
    "message": "FIX: Take action should agree with all pending flags",
    "tree": {
      "sha": "9e3fb39567733322f0f779746b190a4b648f9379",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/9e3fb39567733322f0f779746b190a4b648f9379"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/df1ab9259b70addb54485c1f1dfd622e46f6ef30",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/df1ab9259b70addb54485c1f1dfd622e46f6ef30",
  "html_url": "https://github.com/discourse/discourse/commit/df1ab9259b70addb54485c1f1dfd622e46f6ef30",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/df1ab9259b70addb54485c1f1dfd622e46f6ef30/comments",
  "author": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0fc798c2ef4376f370bd1c8f60875e7d0abd51e3",
      "url": "https://api.github.com/repos/discourse/discourse/commits/0fc798c2ef4376f370bd1c8f60875e7d0abd51e3",
      "html_url": "https://github.com/discourse/discourse/commit/0fc798c2ef4376f370bd1c8f60875e7d0abd51e3"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 25,
    "deletions": 6
  },
  "files": [
    {
      "sha": "0ee475c127495cb2333010fc9b7c0805a8135ff1",
      "filename": "lib/post_action_creator.rb",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/discourse/discourse/blob/df1ab9259b70addb54485c1f1dfd622e46f6ef30/lib/post_action_creator.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/df1ab9259b70addb54485c1f1dfd622e46f6ef30/lib/post_action_creator.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/post_action_creator.rb?ref=df1ab9259b70addb54485c1f1dfd622e46f6ef30",
      "patch": "@@ -89,6 +89,12 @@ def perform\n         PostActionNotifier.post_action_created(post_action)\n         notify_subscribers\n \n+        # agree with other flags\n+        if @take_action && reviewable = @post.reviewable_flag\n+          result.reviewable.perform(@created_by, :agree_and_keep)\n+          post_action.try(:update_counters)\n+        end\n+\n         result.success = true\n         result.post_action = post_action\n \n@@ -211,12 +217,6 @@ def create_post_action\n \n     GivenDailyLike.increment_for(@created_by.id) if @post_action_type_id == PostActionType.types[:like]\n \n-    # agree with other flags\n-    if @take_action && reviewable = @post.reviewable_flag\n-      reviewable.perform(@created_by, :agree_and_keep)\n-      post_action.try(:update_counters)\n-    end\n-\n     post_action\n   rescue ActiveRecord::RecordNotUnique\n     # can happen despite being .create"
    },
    {
      "sha": "e59f85d93fc6af964a3f307c9d32c7ed8548a8fc",
      "filename": "spec/components/post_action_creator_spec.rb",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/discourse/discourse/blob/df1ab9259b70addb54485c1f1dfd622e46f6ef30/spec/components/post_action_creator_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/df1ab9259b70addb54485c1f1dfd622e46f6ef30/spec/components/post_action_creator_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/post_action_creator_spec.rb?ref=df1ab9259b70addb54485c1f1dfd622e46f6ef30",
      "patch": "@@ -101,4 +101,23 @@\n       end\n     end\n   end\n+\n+  context \"take_action\" do\n+    before do\n+      PostActionCreator.create(Fabricate(:user), post, :inappropriate)\n+    end\n+\n+    it \"will agree with the old reviewable\" do\n+      reviewable = PostActionCreator.new(\n+        Fabricate(:moderator),\n+        post,\n+        PostActionType.types[:spam],\n+        take_action: true\n+      ).perform.reviewable\n+      scores = reviewable.reviewable_scores\n+      expect(scores[0]).to be_agreed\n+      expect(scores[1]).to be_agreed\n+      expect(reviewable.reload).to be_approved\n+    end\n+  end\n end"
    }
  ]
}
