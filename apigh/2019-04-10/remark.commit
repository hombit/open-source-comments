{
  "sha": "1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjFjNDE4ZWVkNGNlZjQzYWIzY2MxNDhiNGE5YTQzN2RjYzZmNzEwZjY=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-04-10T05:41:27Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-04-10T05:41:27Z"
    },
    "message": "Merge pull request #303 from umputun/vote\n\nVote",
    "tree": {
      "sha": "84af5054d923c6736d8695204c5dee3aec6056a6",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/84af5054d923c6736d8695204c5dee3aec6056a6"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcrYIHCRBK7hj4Ov3rIwAAdHIIAD3teSX7YMqeD7DKEgE9rLvg\nZ2PgHiSPDyJLULQIKMOoamREKSrmPsX0pAK4itqL2td/4b6/0+jZjOZpEiaGHjcS\nLYoo6PsMajJyB+igGobg3IIswNAIlUQPG8ebEdcdaNiRE384KfTLv/3IQevtQQiL\n6Zc2UQbQnszZdzYdpI/vvhh4YJT9x/h6gtkxEMrUBeOOf2E8Q3028qBoMxK/9lrV\nGV/yyOGZXqof2oGZiTbhIg2gODAeAU24KldeDg6+A9L/dHVh49XNdCZGwU+rHqXC\nb0Hptr3qlLgtyFTgya7CBRrc6+1zVe2ZPMLWAGxs1Mx1wie+dVp9XGIdv5zOwF0=\n=qLF4\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 84af5054d923c6736d8695204c5dee3aec6056a6\nparent af199f46ee52f4232e90b11ff09a8c1ec4378383\nparent 67a5ed6669767daeaa703cfff9fab37236cf6c93\nauthor Umputun <umputun@gmail.com> 1554874887 -0500\ncommitter GitHub <noreply@github.com> 1554874887 -0500\n\nMerge pull request #303 from umputun/vote\n\nVote"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
  "html_url": "https://github.com/umputun/remark/commit/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "af199f46ee52f4232e90b11ff09a8c1ec4378383",
      "url": "https://api.github.com/repos/umputun/remark/commits/af199f46ee52f4232e90b11ff09a8c1ec4378383",
      "html_url": "https://github.com/umputun/remark/commit/af199f46ee52f4232e90b11ff09a8c1ec4378383"
    },
    {
      "sha": "67a5ed6669767daeaa703cfff9fab37236cf6c93",
      "url": "https://api.github.com/repos/umputun/remark/commits/67a5ed6669767daeaa703cfff9fab37236cf6c93",
      "html_url": "https://github.com/umputun/remark/commit/67a5ed6669767daeaa703cfff9fab37236cf6c93"
    }
  ],
  "stats": {
    "total": 296,
    "additions": 243,
    "deletions": 53
  },
  "files": [
    {
      "sha": "9d9c83c9f78b50b640cb76008f4ddf300b0617dd",
      "filename": "README.md",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/README.md",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/README.md?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -507,7 +507,7 @@ type Comment struct {\n     User      User            `json:\"user\"`    // user info, read only\n     Locator   Locator         `json:\"locator\"` // post locator\n     Score     int             `json:\"score\"`   // comment score, read only\n-    Votes     map[string]bool `json:\"votes\"`   // comment votes, read only\n+    Vote      int             `json:\"vote\"`    // vote for the current user, -1/1/0.\n     Controversy float64       `json:\"controversy,omitempty\"` // comment controversy, read only\n     Timestamp time.Time       `json:\"time\"`    // time stamp, read only\n     Edit      *Edit           `json:\"edit,omitempty\" bson:\"edit,omitempty\"` // pointer to have empty default in json response\n@@ -609,11 +609,11 @@ Sort can be `time`, `active` or `score`. Supported sort order with prefix -/+, i\n \n ### Images management\n \n-* `GET /api/v1/picture/{user}/{id}` - load stored image \n+* `GET /api/v1/picture/{user}/{id}` - load stored image\n * `POST /api/v1/picture` - upload and store image, uses post form with `FormFile(\"file\")`. returns `{\"id\": user/imgid}` _auth required_\n \n _returned id should be appended to load image url on caller side_\n-  \n+\n ### Admin\n \n * `DELETE /api/v1/admin/comment/{id}?site=site-id&url=post-url` - delete comment by `id`."
    },
    {
      "sha": "c53f7963cb882fe3501d0563261e423b0ce05b9c",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 56,
      "deletions": 7,
      "changes": 63,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/rest/api/rest.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/rest/api/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest.go?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -305,20 +305,54 @@ func (s *Rest) routes() chi.Router {\n \treturn router\n }\n \n+func (s *Rest) alterComments(comments []store.Comment, r *http.Request) (res []store.Comment) {\n+\n+\tres = s.adminService.alterComments(comments, r) // apply admin's alteration\n+\n+\t// prepare vote info for client view\n+\tvote := func(c store.Comment, r *http.Request) store.Comment {\n+\n+\t\tc.Vote = 0 // default is \"none\" (not voted)\n+\n+\t\tuser, err := rest.GetUserInfo(r)\n+\t\tif err != nil {\n+\t\t\tc.Votes = nil // hide voters list and don't set Vote for non-authed user\n+\t\t\treturn c\n+\t\t}\n+\n+\t\tif v, ok := c.Votes[user.ID]; ok {\n+\t\t\tif v {\n+\t\t\t\tc.Vote = 1\n+\t\t\t} else {\n+\t\t\t\tc.Vote = -1\n+\t\t\t}\n+\t\t}\n+\n+\t\tc.Votes = nil // hide voters list\n+\t\treturn c\n+\t}\n+\n+\tfor i, c := range res {\n+\t\tc = vote(c, r)\n+\t\tres[i] = c\n+\t}\n+\n+\treturn res\n+}\n+\n // serves static files from /web or embedded by statik\n func addFileServer(r chi.Router, path string, root http.FileSystem) {\n \n \tvar webFS http.Handler\n \n \tstatikFS, err := fs.New()\n-\tif err == nil {\n-\t\tlog.Printf(\"[INFO] run file server for %s, embedded\", root)\n-\t\twebFS = http.FileServer(statikFS)\n-\t}\n \tif err != nil {\n \t\tlog.Printf(\"[DEBUG] no embedded assets loaded, %s\", err)\n \t\tlog.Printf(\"[INFO] run file server for %s, path %s\", root, path)\n \t\twebFS = http.FileServer(root)\n+\t} else {\n+\t\tlog.Printf(\"[INFO] run file server for %s, embedded\", root)\n+\t\twebFS = http.FileServer(statikFS)\n \t}\n \n \torigPath := path\n@@ -364,9 +398,24 @@ func filterComments(comments []store.Comment, fn func(c store.Comment) bool) []s\n // admins will have different keys in order to prevent leak of admin-only data to regular users\n func URLKey(r *http.Request) string {\n \tadminPrefix := \"admin!!\"\n-\tkey := strings.TrimPrefix(r.URL.String(), adminPrefix)          // prevents attach with fake url to get admin view\n-\tif user, err := rest.GetUserInfo(r); err == nil && user.Admin { // make separate cache key for admins\n-\t\tkey = adminPrefix + key\n+\tkey := strings.TrimPrefix(r.URL.String(), adminPrefix) // prevents attach with fake url to get admin view\n+\tif user, err := rest.GetUserInfo(r); err == nil && user.Admin {\n+\t\tkey = adminPrefix + key // make separate cache key for admins\n+\t}\n+\treturn key\n+}\n+\n+// URLKeyWithUser gets url from request to use it as cache key and attaching user ID\n+// admins will have different keys in order to prevent leak of admin-only data to regular users\n+func URLKeyWithUser(r *http.Request) string {\n+\tadminPrefix := \"admin!!\"\n+\tkey := strings.TrimPrefix(r.URL.String(), adminPrefix) // prevents attach with fake url to get admin view\n+\tif user, err := rest.GetUserInfo(r); err == nil {\n+\t\tif user.Admin {\n+\t\t\tkey = adminPrefix + user.ID + \"!!\" + key // make separate cache key for admins\n+\t\t} else {\n+\t\t\tkey = user.ID + \"!!\" + key // make separate cache key for authed users\n+\t\t}\n \t}\n \treturn key\n }"
    },
    {
      "sha": "be42276dff37786919558861857b33019697b1cc",
      "filename": "backend/app/rest/api/rest_private_test.go",
      "status": "modified",
      "additions": 48,
      "deletions": 5,
      "changes": 53,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/rest/api/rest_private_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/rest/api/rest_private_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_private_test.go?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -352,30 +352,73 @@ func TestRest_Vote(t *testing.T) {\n \t\treq, err := http.NewRequest(http.MethodPut,\n \t\t\tfmt.Sprintf(\"%s/api/v1/vote/%s?site=radio-t&url=https://radio-t.com/blah&vote=%d\", ts.URL, id1, val), nil)\n \t\tassert.Nil(t, err)\n-\t\treq.SetBasicAuth(\"admin\", \"password\")\n+\t\treq.Header.Add(\"X-JWT\", devToken)\n \t\tresp, err := client.Do(req)\n \t\tassert.Nil(t, err)\n \t\treturn resp.StatusCode\n \t}\n \n \tassert.Equal(t, 200, vote(1), \"first vote allowed\")\n \tassert.Equal(t, 400, vote(1), \"second vote rejected\")\n-\tbody, code := get(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=radio-t&url=https://radio-t.com/blah\", ts.URL, id1))\n+\tbody, code := getWithDevAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=radio-t&url=https://radio-t.com/blah\", ts.URL, id1))\n \tassert.Equal(t, 200, code)\n \tcr := store.Comment{}\n \terr := json.Unmarshal([]byte(body), &cr)\n \tassert.Nil(t, err)\n \tassert.Equal(t, 1, cr.Score)\n-\tassert.Equal(t, map[string]bool{\"admin\": true}, cr.Votes)\n+\tassert.Equal(t, 1, cr.Vote)\n+\tassert.Equal(t, map[string]bool(nil), cr.Votes)\n \n \tassert.Equal(t, 200, vote(-1), \"opposite vote allowed\")\n-\tbody, code = get(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=radio-t&url=https://radio-t.com/blah\", ts.URL, id1))\n+\tbody, code = getWithDevAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=radio-t&url=https://radio-t.com/blah\", ts.URL, id1))\n \tassert.Equal(t, 200, code)\n \tcr = store.Comment{}\n \terr = json.Unmarshal([]byte(body), &cr)\n \tassert.Nil(t, err)\n \tassert.Equal(t, 0, cr.Score)\n-\tassert.Equal(t, map[string]bool{}, cr.Votes)\n+\tassert.Equal(t, 0, cr.Vote)\n+\n+\tassert.Equal(t, 200, vote(-1), \"opposite vote allowed one more time\")\n+\tbody, code = getWithDevAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=radio-t&url=https://radio-t.com/blah\", ts.URL, id1))\n+\tassert.Equal(t, 200, code)\n+\tcr = store.Comment{}\n+\terr = json.Unmarshal([]byte(body), &cr)\n+\tassert.Nil(t, err)\n+\tassert.Equal(t, -1, cr.Score)\n+\tassert.Equal(t, -1, cr.Vote)\n+\n+\tassert.Equal(t, 400, vote(-1), \"dbl vote not allowed\")\n+\tbody, code = getWithDevAuth(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=radio-t&url=https://radio-t.com/blah\", ts.URL, id1))\n+\tassert.Equal(t, 200, code)\n+\tcr = store.Comment{}\n+\terr = json.Unmarshal([]byte(body), &cr)\n+\tassert.Nil(t, err)\n+\tassert.Equal(t, -1, cr.Score)\n+\tassert.Equal(t, -1, cr.Vote)\n+\n+\tbody, code = get(t, fmt.Sprintf(\"%s/api/v1/id/%s?site=radio-t&url=https://radio-t.com/blah\", ts.URL, id1))\n+\tassert.Equal(t, 200, code)\n+\tcr = store.Comment{}\n+\terr = json.Unmarshal([]byte(body), &cr)\n+\tassert.Nil(t, err)\n+\tassert.Equal(t, -1, cr.Score)\n+\tassert.Equal(t, 0, cr.Vote, \"no vote info for not authed user\")\n+\tassert.Equal(t, map[string]bool(nil), cr.Votes)\n+\n+\treq, err := http.NewRequest(\"GET\",\n+\t\tfmt.Sprintf(\"%s/api/v1/id/%s?site=radio-t&url=https://radio-t.com/blah\", ts.URL, id1), nil)\n+\tassert.NoError(t, err)\n+\tresp, err := sendReq(t, req, adminUmputunToken)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, 200, resp.StatusCode)\n+\tcr = store.Comment{}\n+\terr = json.NewDecoder(resp.Body).Decode(&cr)\n+\tassert.Nil(t, err)\n+\tassert.Equal(t, -1, cr.Score)\n+\tassert.Equal(t, 0, cr.Vote, \"no vote info for different user\")\n+\tassert.Equal(t, map[string]bool(nil), cr.Votes)\n+\n+\tassert.Equal(t, map[string]bool(nil), cr.Votes)\n }\n \n func TestRest_UserAllData(t *testing.T) {"
    },
    {
      "sha": "92f26ad52441b7ea21c8f6ec3aea91ac6f3bcce7",
      "filename": "backend/app/rest/api/rest_public.go",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/rest/api/rest_public.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/rest/api/rest_public.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_public.go?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -28,13 +28,13 @@ func (s *Rest) findCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \t}\n \tlog.Printf(\"[DEBUG] get comments for %+v, sort %s, format %s\", locator, sort, r.URL.Query().Get(\"format\"))\n \n-\tkey := cache.NewKey(locator.SiteID).ID(URLKey(r)).Scopes(locator.SiteID, locator.URL)\n+\tkey := cache.NewKey(locator.SiteID).ID(URLKeyWithUser(r)).Scopes(locator.SiteID, locator.URL)\n \tdata, err := s.Cache.Get(key, func() ([]byte, error) {\n \t\tcomments, e := s.DataService.Find(locator, sort)\n \t\tif e != nil {\n \t\t\tcomments = []store.Comment{} // error should clear comments and continue for post info\n \t\t}\n-\t\tmaskedComments := s.adminService.alterComments(comments, r)\n+\t\tmaskedComments := s.alterComments(comments, r)\n \t\tvar b []byte\n \t\tswitch r.URL.Query().Get(\"format\") {\n \t\tcase \"tree\":\n@@ -130,7 +130,7 @@ func (s *Rest) lastCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tif e != nil {\n \t\t\treturn nil, e\n \t\t}\n-\t\tcomments = s.adminService.alterComments(comments, r)\n+\t\tcomments = s.alterComments(comments, r)\n \t\t// filter deleted from last comments view. Blocked marked as deleted and will sneak in without\n \t\tfilterDeleted := filterComments(comments, func(c store.Comment) bool { return !c.Deleted })\n \t\treturn encodeJSONWithHTML(filterDeleted)\n@@ -160,7 +160,7 @@ func (s *Rest) commentByIDCtrl(w http.ResponseWriter, r *http.Request) {\n \t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't get comment by id\", rest.ErrCommentNotFound)\n \t\treturn\n \t}\n-\tcomment = s.adminService.alterComments([]store.Comment{comment}, r)[0]\n+\tcomment = s.alterComments([]store.Comment{comment}, r)[0]\n \trender.Status(r, http.StatusOK)\n \n \tif err = R.RenderJSONWithHTML(w, r, comment); err != nil {\n@@ -186,13 +186,13 @@ func (s *Rest) findUserCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \n \tlog.Printf(\"[DEBUG] get comments for userID %s, %s\", userID, siteID)\n \n-\tkey := cache.NewKey(siteID).ID(URLKey(r)).Scopes(userID, siteID)\n+\tkey := cache.NewKey(siteID).ID(URLKeyWithUser(r)).Scopes(userID, siteID)\n \tdata, err := s.Cache.Get(key, func() ([]byte, error) {\n \t\tcomments, e := s.DataService.User(siteID, userID, limit, 0)\n \t\tif e != nil {\n \t\t\treturn nil, e\n \t\t}\n-\t\tcomments = s.adminService.alterComments(comments, r)\n+\t\tcomments = s.alterComments(comments, r)\n \t\tcomments = filterComments(comments, func(c store.Comment) bool { return !c.Deleted })\n \t\tcount, e := s.DataService.UserCount(siteID, userID)\n \t\tif e != nil {"
    },
    {
      "sha": "276d69aca59b91267e7a2221aae17055dc3ddd42",
      "filename": "backend/app/rest/api/rest_test.go",
      "status": "modified",
      "additions": 60,
      "deletions": 1,
      "changes": 61,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/rest/api/rest_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/rest/api/rest_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_test.go?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -10,6 +10,7 @@ import (\n \t\"net/http\"\n \t\"net/http/httptest\"\n \t\"os\"\n+\t\"strconv\"\n \t\"strings\"\n \t\"testing\"\n \t\"time\"\n@@ -38,6 +39,8 @@ var getStartedHTML = \"/tmp/getstarted.html\"\n \n var devToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJyZW1hcms0MiIsImV4cCI6Mzc4OTE5MTgyMiwianRpIjoicmFuZG9tIGlkIiwiaXNzIjoicmVtYXJrNDIiLCJuYmYiOjE1MjE4ODQyMjIsInVzZXIiOnsibmFtZSI6ImRldmVsb3BlciBvbmUiLCJpZCI6ImRldiIsInBpY3R1cmUiOiJodHRwOi8vZXhhbXBsZS5jb20vcGljLnBuZyIsImlwIjoiMTI3LjAuMC4xIiwiZW1haWwiOiJtZUBleGFtcGxlLmNvbSJ9fQ.aKUAXiZxXypgV7m1wEOgUcyPOvUDXHDi3A06YWKbcLg\"\n \n+var adminUmputunToken = \"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJyYWRpb3QiLCJleHAiOjE5NTQ1OTc5ODAsImp0aSI6Ijk3YTJlMGFjNGRjN2Q1ZjY5MjZkNWU4NjIwYWNlZjlhNDBjMCIsImlhdCI6MTQ1NDU5NzY4MCwiaXNzIjoicmVtYXJrNDIiLCJ1c2VyIjp7Im5hbWUiOiJVbXB1dHVuIiwiaWQiOiJnaXRodWJfZWYwZjcwNmE3IiwicGljdHVyZSI6Imh0dHBzOi8vcmVtYXJrNDIucmFkaW8tdC5jb20vYXBpL3YxL2F2YXRhci9jYjQyZmY0OTNhZGU2OTZkODhhM2E1OTBmMTM2YWU5ZTM0ZGU3YzFiLmltYWdlIiwiYXR0cnMiOnsiYWRtaW4iOnRydWUsImJsb2NrZWQiOmZhbHNlfX19.I5a8EHbUJy8mApuYCPDRThbC-1jP0sbPh1qwNyY1V4E\"\n+\n func TestRest_FileServer(t *testing.T) {\n \tts, _, teardown := startupT(t)\n \tdefer teardown()\n@@ -178,7 +181,7 @@ func TestRest_RunAutocertModeHTTPOnly(t *testing.T) {\n \tsrv.Shutdown()\n }\n \n-func Test_rejectAnonUser(t *testing.T) {\n+func TestRest_rejectAnonUser(t *testing.T) {\n \n \tts := httptest.NewServer(fakeAuth(rejectAnonUser(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\tfmt.Fprintln(w, \"Hello\")\n@@ -198,6 +201,54 @@ func Test_rejectAnonUser(t *testing.T) {\n \tassert.Equal(t, http.StatusOK, resp.StatusCode, \"real user\")\n }\n \n+func Test_URLKey(t *testing.T) {\n+\ttbl := []struct {\n+\t\turl  string\n+\t\tuser store.User\n+\t\tkey  string\n+\t}{\n+\t\t{\"http://example.com/1\", store.User{}, \"http://example.com/1\"},\n+\t\t{\"http://example.com/1\", store.User{ID: \"user\"}, \"http://example.com/1\"},\n+\t\t{\"http://example.com/1\", store.User{ID: \"user\", Admin: true}, \"admin!!http://example.com/1\"},\n+\t}\n+\n+\tfor i, tt := range tbl {\n+\t\tt.Run(strconv.Itoa(i), func(t *testing.T) {\n+\t\t\tr, err := http.NewRequest(\"GET\", tt.url, nil)\n+\t\t\trequire.NoError(t, err)\n+\t\t\tif tt.user.ID != \"\" {\n+\t\t\t\tr = rest.SetUserInfo(r, tt.user)\n+\t\t\t}\n+\t\t\tassert.Equal(t, tt.key, URLKey(r))\n+\t\t})\n+\t}\n+\n+}\n+\n+func Test_URLKeyWithUser(t *testing.T) {\n+\ttbl := []struct {\n+\t\turl  string\n+\t\tuser store.User\n+\t\tkey  string\n+\t}{\n+\t\t{\"http://example.com/1\", store.User{}, \"http://example.com/1\"},\n+\t\t{\"http://example.com/1\", store.User{ID: \"user\"}, \"user!!http://example.com/1\"},\n+\t\t{\"http://example.com/2\", store.User{ID: \"user2\"}, \"user2!!http://example.com/2\"},\n+\t\t{\"http://example.com/1\", store.User{ID: \"user\", Admin: true}, \"admin!!user!!http://example.com/1\"},\n+\t}\n+\n+\tfor i, tt := range tbl {\n+\t\tt.Run(strconv.Itoa(i), func(t *testing.T) {\n+\t\t\tr, err := http.NewRequest(\"GET\", tt.url, nil)\n+\t\t\trequire.NoError(t, err)\n+\t\t\tif tt.user.ID != \"\" {\n+\t\t\t\tr = rest.SetUserInfo(r, tt.user)\n+\t\t\t}\n+\t\t\tassert.Equal(t, tt.key, URLKeyWithUser(r))\n+\t\t})\n+\t}\n+\n+}\n func startupT(t *testing.T) (ts *httptest.Server, srv *Rest, teardown func()) {\n \n \ttestDb := fmt.Sprintf(\"/tmp/test-remark-%d.db\", rand.Int31())\n@@ -296,6 +347,14 @@ func get(t *testing.T, url string) (string, int) {\n \treturn string(body), r.StatusCode\n }\n \n+func sendReq(t *testing.T, r *http.Request, token string) (*http.Response, error) {\n+\tclient := http.Client{Timeout: 5 * time.Second}\n+\tif token != \"\" {\n+\t\tr.Header.Set(\"X-JWT\", token)\n+\t}\n+\treturn client.Do(r)\n+}\n+\n func getWithDevAuth(t *testing.T, url string) (body string, code int) {\n \tclient := &http.Client{Timeout: 5 * time.Second}\n \treq, err := http.NewRequest(\"GET\", url, nil)"
    },
    {
      "sha": "06d4e788b69f6ac0e3aade9840d943bb0b880b60",
      "filename": "backend/app/rest/api/rss.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/rest/api/rss.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/rest/api/rss.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rss.go?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -41,7 +41,7 @@ func (s *Rest) rssPostCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tif e != nil {\n \t\t\treturn nil, e\n \t\t}\n-\t\tcomments = s.adminService.alterComments(comments, r)\n+\t\tcomments = s.alterComments(comments, r)\n \t\trss, e := s.toRssFeed(locator.URL, comments, \"post comments for \"+r.URL.Query().Get(\"url\"))\n \t\tif e != nil {\n \t\t\treturn nil, e\n@@ -73,7 +73,7 @@ func (s *Rest) rssSiteCommentsCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tif e != nil {\n \t\t\treturn nil, e\n \t\t}\n-\t\tcomments = s.adminService.alterComments(comments, r)\n+\t\tcomments = s.alterComments(comments, r)\n \n \t\trss, e := s.toRssFeed(r.URL.Query().Get(\"site\"), comments, \"site comment for \"+siteID)\n \t\tif e != nil {\n@@ -107,7 +107,7 @@ func (s *Rest) rssRepliesCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tif e != nil {\n \t\t\treturn nil, errors.Wrap(e, \"can't get last comments\")\n \t\t}\n-\t\tcomments = s.adminService.alterComments(comments, r)\n+\t\tcomments = s.alterComments(comments, r)\n \t\treplies := []store.Comment{}\n \t\tfor _, c := range comments {\n \t\t\tif len(replies) > maxRssItems || c.Timestamp.Add(maxReplyDuration).Before(time.Now()) {"
    },
    {
      "sha": "a6241184db13b8f8434d14d8b2acb351abdf6180",
      "filename": "backend/app/store/comment.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/store/comment.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/store/comment.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/comment.go?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -17,7 +17,8 @@ type Comment struct {\n \tUser        User            `json:\"user\"`\n \tLocator     Locator         `json:\"locator\"`\n \tScore       int             `json:\"score\"`\n-\tVotes       map[string]bool `json:\"votes\"`\n+\tVotes       map[string]bool `json:\"votes,omitempty\"`\n+\tVote        int             `json:\"vote\"` // vote for the current user, -1/1/0.\n \tControversy float64         `json:\"controversy,omitempty\"`\n \tTimestamp   time.Time       `json:\"time\" bson:\"time\"`\n \tEdit        *Edit           `json:\"edit,omitempty\" bson:\"edit,omitempty\"` // pointer to have empty default in json response"
    },
    {
      "sha": "b2196f434bf15bd8e861b89a64f5186e2e00d2d1",
      "filename": "backend/app/store/engine/bolt_admin_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/store/engine/bolt_admin_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/store/engine/bolt_admin_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/engine/bolt_admin_test.go?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -107,6 +107,7 @@ func TestBoltAdmin_DeleteUser(t *testing.T) {\n \n \tb, teardown := prep(t)\n \tdefer teardown()\n+\n \terr := b.DeleteUser(\"radio-t\", \"user1\")\n \trequire.NoError(t, err)\n \n@@ -157,6 +158,7 @@ func TestBoltAdmin_BlockUserWithTTL(t *testing.T) {\n \n \tb, teardown := prep(t)\n \tdefer teardown()\n+\n \tassert.False(t, b.IsBlocked(\"radio-t\", \"user1\"), \"nothing blocked\")\n \tassert.NoError(t, b.SetBlock(\"radio-t\", \"user1\", true, 50*time.Millisecond))\n \tassert.True(t, b.IsBlocked(\"radio-t\", \"user1\"), \"user1 blocked\")"
    },
    {
      "sha": "43849ee0535a224d0f4e57a999154835a6546ca3",
      "filename": "backend/app/store/service/service.go",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/store/service/service.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/store/service/service.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/service/service.go?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -206,6 +206,15 @@ func (s *DataStore) Vote(locator store.Locator, commentID string, userID string,\n \t\tcomment.Score--\n \t}\n \n+\tcomment.Vote = 0\n+\tif v, ok := comment.Votes[userID]; ok {\n+\t\tif v {\n+\t\t\tcomment.Vote = 1\n+\t\t} else {\n+\t\t\tcomment.Vote = -1\n+\t\t}\n+\t}\n+\n \tcomment.Controversy = s.controversy(s.upsAndDowns(comment))\n \n \treturn comment, s.Put(locator, comment)"
    },
    {
      "sha": "6fbc940195c9404f35e47681eb868d65e7aa513a",
      "filename": "backend/app/store/service/service_test.go",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/store/service/service_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/app/store/service/service_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/service/service_test.go?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -48,7 +48,7 @@ func TestService_CreateFromEmpty(t *testing.T) {\n \tassert.Equal(t, \"user\", res.User.ID)\n \tassert.Equal(t, \"name\", res.User.Name)\n \tassert.Equal(t, \"23f97cf4d5c29ef788ca2bdd1c9e75656c0e4149\", res.User.IP)\n-\tassert.Equal(t, map[string]bool{}, res.Votes)\n+\tassert.Equal(t, map[string]bool(nil), res.Votes)\n }\n \n func TestService_CreateFromPartial(t *testing.T) {\n@@ -179,11 +179,13 @@ func TestService_Vote(t *testing.T) {\n \tassert.Nil(t, err)\n \tassert.Equal(t, 3, len(res))\n \tassert.Equal(t, 0, res[0].Score)\n-\tassert.Equal(t, map[string]bool{}, res[0].Votes, \"no votes initially\")\n+\tassert.Equal(t, 0, res[0].Vote)\n+\tassert.Equal(t, map[string]bool(nil), res[0].Votes, \"no votes initially\")\n \n \tc, err := b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, \"user1\", true)\n \tassert.Nil(t, err)\n \tassert.Equal(t, 1, c.Score)\n+\tassert.Equal(t, 1, c.Vote)\n \tassert.Equal(t, map[string]bool{\"user1\": true}, c.Votes, \"user voted +\")\n \n \tc, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, \"user\", true)\n@@ -197,6 +199,7 @@ func TestService_Vote(t *testing.T) {\n \tassert.Nil(t, err)\n \tassert.Equal(t, 3, len(res))\n \tassert.Equal(t, 1, res[0].Score)\n+\tassert.Equal(t, 1, res[0].Vote)\n \tassert.Equal(t, 0.0, res[0].Controversy)\n \n \t_, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, \"user1\", false)\n@@ -205,7 +208,8 @@ func TestService_Vote(t *testing.T) {\n \tassert.Nil(t, err)\n \tassert.Equal(t, 3, len(res))\n \tassert.Equal(t, 0, res[0].Score)\n-\tassert.Equal(t, map[string]bool{}, res[0].Votes, \"vote reset ok\")\n+\tassert.Equal(t, 0, res[0].Vote)\n+\tassert.Equal(t, map[string]bool(nil), res[0].Votes, \"vote reset ok\")\n }\n \n func TestService_VoteLimit(t *testing.T) {\n@@ -251,7 +255,7 @@ func TestService_VoteAggressive(t *testing.T) {\n \tt.Logf(\"%+v\", res[0])\n \tassert.Equal(t, 3, len(res))\n \tassert.Equal(t, 0, res[0].Score)\n-\tassert.Equal(t, map[string]bool{}, res[0].Votes, \"no votes initially\")\n+\tassert.Equal(t, map[string]bool(nil), res[0].Votes, \"no votes initially\")\n \n \t// add a vote as user2\n \t_, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, \"user2\", true)"
    },
    {
      "sha": "ec6dd3c75dc259a6f886df363aa075701569e23c",
      "filename": "backend/remark.rest",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/remark.rest",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/backend/remark.rest",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/remark.rest?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -5,6 +5,10 @@ GET {{host}}/api/v1/find?site={{site}}&sort=-controversy&format=tree&url={{url}}\n ### find request with plain\n GET {{host}}/api/v1/find?site={{site}}&sort=-controversy&format=plain&url={{url}}\n \n+### find request with plain\n+GET http://127.0.0.1:8080/api/v1/find?site={{site}}&sort=-controversy&format=plain&url={{url}}\n+X-JWT: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJyZW1hcms0MiIsImV4cCI6Mzc4OTE5MTgyMiwianRpIjoicmFuZG9tIGlkIiwiaXNzIjoicmVtYXJrNDIiLCJuYmYiOjE1MjE4ODQyMjIsInVzZXIiOnsibmFtZSI6ImRldmVsb3BlciBvbmUiLCJpZCI6ImRldiIsInBpY3R1cmUiOiJodHRwOi8vZXhhbXBsZS5jb20vcGljLnBuZyIsImlwIjoiMTI3LjAuMC4xIiwiZW1haWwiOiJtZUBleGFtcGxlLmNvbSJ9fQ.aKUAXiZxXypgV7m1wEOgUcyPOvUDXHDi3A06YWKbcLg\n+\n ### last 50 comments\n GET {{host}}/api/v1/last/50?site={{site}}\n \n@@ -53,7 +57,8 @@ Content-Type: application/json\n PUT {{host}}/api/v1/admin/pin/3665976683?site={{site}}&url={{url}}&pin=1\n \n ### vote for comment\n-PUT {{host}}/api/v1/vote/73e346f4-d57d-41a8-8803-6671aa187d8e?site={{site}}&url={{url}}&vote=1\n+PUT http://127.0.0.1:8080/api/v1/vote/8a8c0b80-0d0a-41c3-84ad-f4034704e827?site={{site}}&url={{url}}&vote=-1\n+X-JWT: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJyZW1hcms0MiIsImV4cCI6Mzc4OTE5MTgyMiwianRpIjoicmFuZG9tIGlkIiwiaXNzIjoicmVtYXJrNDIiLCJuYmYiOjE1MjE4ODQyMjIsInVzZXIiOnsibmFtZSI6ImRldmVsb3BlciBvbmUiLCJpZCI6ImRldiIsInBpY3R1cmUiOiJodHRwOi8vZXhhbXBsZS5jb20vcGljLnBuZyIsImlwIjoiMTI3LjAuMC4xIiwiZW1haWwiOiJtZUBleGFtcGxlLmNvbSJ9fQ.aKUAXiZxXypgV7m1wEOgUcyPOvUDXHDi3A06YWKbcLg\n \n ### get user info\n GET {{host}}/api/v1/user"
    },
    {
      "sha": "d99459f5da04dcfbe25d4198cc01d60c66d39e49",
      "filename": "web/.babelrc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/.babelrc",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/.babelrc",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/.babelrc?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -7,7 +7,7 @@\n           \"browsers\": [\"> 1%\", \"android >= 4.4.4\", \"ios >= 9\", \"IE >= 11\"]\n         },\n         \"useBuiltIns\": \"usage\",\n-\t\t\t\t\"corejs\": 3\n+        \"corejs\": 3\n       }\n     ],\n     ["
    },
    {
      "sha": "b5948148435ba51590c2380aaa6e1afdaf6ed1be",
      "filename": "web/app/common/api.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/app/common/api.ts",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/app/common/api.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/common/api.ts?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -52,7 +52,10 @@ export const logOut = (): Promise<void> =>\n export const getConfig = (): Promise<Config> => fetcher.get(`/config`);\n \n export const getPostComments = (sort: Sorting): Promise<Tree> =>\n-  fetcher.get(`/find?site=${siteId}&url=${url}&sort=${sort}&format=tree`);\n+  fetcher.get({\n+    url: `/find?site=${siteId}&url=${url}&sort=${sort}&format=tree`,\n+    withCredentials: true,\n+  });\n \n export const getLastComments = (siteId: string, max: number): Promise<Comment[]> =>\n   fetcher.get(`/last/${max}?site=${siteId}`);\n@@ -63,15 +66,20 @@ export const getCommentsCount = (siteId: string, urls: string[]): Promise<{ url:\n     body: urls,\n   });\n \n-export const getComment = (id: Comment['id']): Promise<Comment> => fetcher.get(`/id/${id}?url=${url}`);\n+export const getComment = (id: Comment['id']): Promise<Comment> =>\n+  fetcher.get({ url: `/id/${id}?url=${url}`, withCredentials: true });\n \n export const getUserComments = (\n   userId: User['id'],\n   limit: number\n ): Promise<{\n   comments: Comment[];\n   count: number;\n-}> => fetcher.get(`/comments?user=${userId}&limit=${limit}`);\n+}> =>\n+  fetcher.get({\n+    url: `/comments?user=${userId}&limit=${limit}`,\n+    withCredentials: true,\n+  });\n \n export const putCommentVote = ({ id, value }: { id: Comment['id']; value: number }): Promise<void> =>\n   fetcher.put({"
    },
    {
      "sha": "d1843789f3c9c76fe8e8a1e18132400a8c924685",
      "filename": "web/app/common/types.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/app/common/types.ts",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/app/common/types.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/common/types.ts?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -44,8 +44,12 @@ export interface Comment {\n   locator: Locator;\n   /** comment score, read only */\n   score: number;\n-  /** comment votes, read only */\n-  votes: { [key: string]: boolean };\n+  /**\n+   * vote delta,\n+   * if user hasn't voted delta will be 0,\n+   * -1/+1 for downvote/upvote\n+   */\n+  vote: number;\n   /** comment controversy, read only */\n   controversy?: number;\n   /** pointer to have empty default in json response */"
    },
    {
      "sha": "cc8a947e61b00b36e759b5effe50bf360b7db71d",
      "filename": "web/app/components/comment/comment.test.tsx",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/app/components/comment/comment.test.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/app/components/comment/comment.test.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/comment/comment.test.tsx?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -12,7 +12,7 @@ const DefaultProps: Partial<Props> = {\n   view: 'main',\n   data: {\n     text: 'test comment',\n-    votes: {},\n+    vote: 0,\n     user: {\n       id: 'someone',\n       picture: 'somepicture-url',\n@@ -121,7 +121,7 @@ describe('<Comment />', () => {\n       const element = (\n         <Comment\n           {...DefaultProps as Props}\n-          data={{ ...DefaultProps.data, votes: { [DefaultProps.user!.id]: true } } as Props['data']}\n+          data={{ ...DefaultProps.data, vote: +1 } as Props['data']}\n           putCommentVote={voteSpy}\n         />\n       );\n@@ -146,7 +146,7 @@ describe('<Comment />', () => {\n       const element = (\n         <Comment\n           {...DefaultProps as Props}\n-          data={{ ...DefaultProps.data, votes: { [DefaultProps.user!.id]: false } } as Props['data']}\n+          data={{ ...DefaultProps.data, vote: -1 } as Props['data']}\n           putCommentVote={voteSpy}\n         />\n       );"
    },
    {
      "sha": "3062f92259b9bc3243e2011dd00a18ae523cbe54",
      "filename": "web/app/components/comment/comment.tsx",
      "status": "modified",
      "additions": 1,
      "deletions": 11,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/app/components/comment/comment.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/app/components/comment/comment.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/comment/comment.tsx?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -104,18 +104,8 @@ export class Comment extends Component<Props, State> {\n   }\n \n   updateState(props: Props) {\n-    let scoreDelta = 0;\n-    if (props.user) {\n-      if (props.data.votes[props.user.id] === true) {\n-        ++scoreDelta;\n-      }\n-      if (props.data.votes[props.user.id] === false) {\n-        --scoreDelta;\n-      }\n-    }\n-\n     this.setState({\n-      scoreDelta,\n+      scoreDelta: props.data.vote,\n       cachedScore: props.data.score,\n     });\n "
    },
    {
      "sha": "c638be64839e903e8bb24a471cebb267647b276d",
      "filename": "web/app/components/root/root.tsx",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/app/components/root/root.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/app/components/root/root.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/root/root.tsx?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -113,6 +113,17 @@ export class Root extends Component<Props, State> {\n     window.addEventListener('message', this.onMessage.bind(this));\n   }\n \n+  logIn = async (p: AuthProvider): Promise<User | null> => {\n+    const user = await this.props.logIn(p);\n+    await this.props.fetchComments(this.props.sort);\n+    return user;\n+  };\n+\n+  logOut = async (): Promise<void> => {\n+    await this.props.logOut();\n+    await this.props.fetchComments(this.props.sort);\n+  };\n+\n   checkUrlHash(\n     e: Event & {\n       newURL?: string;\n@@ -202,8 +213,8 @@ export class Root extends Component<Props, State> {\n             providers={StaticStore.config.auth_providers}\n             isCommentsDisabled={isCommentsDisabled}\n             postInfo={this.props.info}\n-            onSignIn={this.props.logIn}\n-            onSignOut={this.props.logOut}\n+            onSignIn={this.logIn}\n+            onSignOut={this.logOut}\n             onBlockedUsersShow={this.onBlockedUsersShow}\n             onBlockedUsersHide={this.onBlockedUsersHide}\n             onCommentsEnable={this.props.enableComments}"
    },
    {
      "sha": "47aef48c853f5b484270174d8e33d5b06b175307",
      "filename": "web/webpack.config.js",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark/blob/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/webpack.config.js",
      "raw_url": "https://github.com/umputun/remark/raw/1c418eed4cef43ab3cc148b4a9a437dcc6f710f6/web/webpack.config.js",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/webpack.config.js?ref=1c418eed4cef43ab3cc148b4a9a437dcc6f710f6",
      "patch": "@@ -139,6 +139,7 @@ module.exports = () => ({\n   },\n   stats: {\n     children: false,\n+    entrypoints: false,\n   },\n   devServer: {\n     host: 'localhost',\n@@ -157,5 +158,9 @@ module.exports = () => ({\n         changeOrigin: true,\n       },\n     },\n+    stats: {\n+      children: false,\n+      entrypoints: false,\n+    },\n   },\n });"
    }
  ]
}
