{
  "sha": "24606e46bff1e4e06da449ecf149f4702ff9d36a",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjI0NjA2ZTQ2YmZmMWU0ZTA2ZGE0NDllY2YxNDlmNDcwMmZmOWQzNmE=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-04-15T03:58:39Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-04-15T03:58:39Z"
    },
    "message": "Merge pull request #307 from Reeywhaar/image-upload-ui\n\nImage upload ui",
    "tree": {
      "sha": "8e36e3b351ac4c6bb29d51f0452a7a34f31369af",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/8e36e3b351ac4c6bb29d51f0452a7a34f31369af"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/24606e46bff1e4e06da449ecf149f4702ff9d36a",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJctAFvCRBK7hj4Ov3rIwAAdHIIAEC98lwpvZDOdtfSC2mnIyck\n3VeXOqKa8FFrQFrHMvnxWs5g5TQE3YLyi4F9Y67+TLtmB3yAl737imNp8PEJbUGI\nS+tDTM23x0wvMdwNQHICBwvsETCj3AydqEGbNZSRD8zpo09JefBOVdyF6PdouUAa\n42GLOr2cXEi7bG2PckXW976/h0B5eTVxq6ImXZ5Ra1V2gtTERqCUnw2XNrtjJUYl\nyt1fwTUBWncRxbHRfRzwhEEr0v0zbtiiGWdWcvr4s2XrWGpaMeSt3UkdSgI1e8cl\npBmXB79JVfemrVN6WDAOCQOR6oKiI1tgtt3qVHi9yaeV4CTXkZ/k5gPdFIys0HI=\n=fbWs\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 8e36e3b351ac4c6bb29d51f0452a7a34f31369af\nparent 0585c325a4063229e59cbb48d6682b8b54de4023\nparent 1aea8be941ac204e08c5e27c9709d8ae49d5af32\nauthor Umputun <umputun@gmail.com> 1555300719 -0500\ncommitter GitHub <noreply@github.com> 1555300719 -0500\n\nMerge pull request #307 from Reeywhaar/image-upload-ui\n\nImage upload ui"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/24606e46bff1e4e06da449ecf149f4702ff9d36a",
  "html_url": "https://github.com/umputun/remark/commit/24606e46bff1e4e06da449ecf149f4702ff9d36a",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/24606e46bff1e4e06da449ecf149f4702ff9d36a/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0585c325a4063229e59cbb48d6682b8b54de4023",
      "url": "https://api.github.com/repos/umputun/remark/commits/0585c325a4063229e59cbb48d6682b8b54de4023",
      "html_url": "https://github.com/umputun/remark/commit/0585c325a4063229e59cbb48d6682b8b54de4023"
    },
    {
      "sha": "1aea8be941ac204e08c5e27c9709d8ae49d5af32",
      "url": "https://api.github.com/repos/umputun/remark/commits/1aea8be941ac204e08c5e27c9709d8ae49d5af32",
      "html_url": "https://github.com/umputun/remark/commit/1aea8be941ac204e08c5e27c9709d8ae49d5af32"
    }
  ],
  "stats": {
    "total": 336,
    "additions": 311,
    "deletions": 25
  },
  "files": [
    {
      "sha": "68133ad0fac4adc8765e025be0830232ef69a7b8",
      "filename": "web/app/common/api.ts",
      "status": "modified",
      "additions": 22,
      "deletions": 2,
      "changes": 24,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/common/api.ts",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/common/api.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/common/api.ts?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -1,6 +1,6 @@\n import { siteId, url } from './settings';\n-import { BASE_URL } from './constants';\n-import { Config, Comment, Tree, User, BlockedUser, Sorting, AuthProvider, BlockTTL } from './types';\n+import { BASE_URL, API_BASE } from './constants';\n+import { Config, Comment, Tree, User, BlockedUser, Sorting, AuthProvider, BlockTTL, Image } from './types';\n import fetcher from './fetcher';\n \n /* common */\n@@ -234,6 +234,25 @@ export const enableComments = (): Promise<void> =>\n     withCredentials: true,\n   });\n \n+export const uploadImage = (image: File): Promise<Image> => {\n+  const data = new FormData();\n+  data.append('file', image);\n+\n+  return fetcher\n+    .post<{ id: string }>({\n+      url: `/picture`,\n+      withCredentials: true,\n+      contentType: 'multipart/form-data',\n+      body: data,\n+    })\n+    .then(resp => ({\n+      name: image.name,\n+      size: image.size,\n+      type: image.type,\n+      url: BASE_URL + API_BASE + '/picture/' + resp.id,\n+    }));\n+};\n+\n export default {\n   logIn,\n   logOut,\n@@ -260,4 +279,5 @@ export default {\n   getBlocked,\n   disableComments,\n   enableComments,\n+  uploadImage,\n };"
    },
    {
      "sha": "a72c4c0dd36b9c17b1df5ef5ba038e6ac5d2136e",
      "filename": "web/app/common/fetcher.ts",
      "status": "modified",
      "additions": 31,
      "deletions": 12,
      "changes": 43,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/common/fetcher.ts",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/common/fetcher.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/common/fetcher.ts?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -6,29 +6,46 @@ import { getCookie } from './cookies';\n export type FetcherMethod = 'get' | 'post' | 'put' | 'patch' | 'delete' | 'head';\n const methods: FetcherMethod[] = ['get', 'post', 'put', 'patch', 'delete', 'head'];\n \n-type FetcherInit =\n-  | string\n-  | {\n-      url: string;\n-      body?: string | object | Blob | ArrayBuffer;\n-      overriddenApiBase?: string;\n-      withCredentials?: boolean;\n-    };\n+interface FetcherInitBase {\n+  url: string;\n+  overriddenApiBase?: string;\n+  withCredentials?: boolean;\n+}\n+\n+interface FetcherInitJSON extends FetcherInitBase {\n+  contentType?: 'application/json';\n+  body?: string | object | Blob | ArrayBuffer;\n+}\n+\n+interface FetcherInitMultipart extends FetcherInitBase {\n+  contentType: 'multipart/form-data';\n+  body: FormData;\n+}\n+\n+type FetcherInit = string | FetcherInitJSON | FetcherInitMultipart;\n \n type FetcherObject = { [K in FetcherMethod]: <T = unknown>(data: FetcherInit) => Promise<T> };\n \n const fetcher = methods.reduce<Partial<FetcherObject>>((acc, method) => {\n   acc[method] = <T = unknown>(data: FetcherInit): Promise<T> => {\n-    const { url, body = undefined, withCredentials = false, overriddenApiBase = API_BASE } =\n-      typeof data === 'string' ? { url: data } : data;\n+    const {\n+      url,\n+      body = undefined,\n+      withCredentials = false,\n+      overriddenApiBase = API_BASE,\n+      contentType = 'application/json',\n+    } = typeof data === 'string' ? { url: data } : data;\n     const basename = `${BASE_URL}${overriddenApiBase}`;\n \n     const headers = new Headers({\n       Accept: 'application/json',\n-      'Content-Type': 'application/json',\n       'X-XSRF-TOKEN': getCookie('XSRF-TOKEN') || '',\n     });\n \n+    if (contentType !== 'multipart/form-data') {\n+      headers.append('Content-Type', contentType);\n+    }\n+\n     let rurl = `${basename}${url}`;\n \n     const parameters: RequestInit = {\n@@ -39,7 +56,9 @@ const fetcher = methods.reduce<Partial<FetcherObject>>((acc, method) => {\n     };\n \n     if (body) {\n-      if (typeof body === 'object') {\n+      if (contentType === 'multipart/form-data') {\n+        parameters.body = body as FormData;\n+      } else if (typeof body === 'object' && !(body instanceof Blob) && !(body instanceof ArrayBuffer)) {\n         parameters.body = JSON.stringify(body);\n       } else {\n         parameters.body = body;"
    },
    {
      "sha": "ea566b6d7835a7078baec438af76e865a4579f70",
      "filename": "web/app/common/static_store.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/common/static_store.ts",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/common/static_store.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/common/static_store.ts?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -25,6 +25,7 @@ export const StaticStore: StaticStoreType = {\n     low_score: 0,\n     positive_score: false,\n     readonly_age: 0,\n+    max_image_size: 0,\n   },\n   query: querySettings as QuerySettingsType,\n };"
    },
    {
      "sha": "14095f29a68f847b8df11af069ff7f75c9bf365f",
      "filename": "web/app/common/types.ts",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/common/types.ts",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/common/types.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/common/types.ts?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -101,6 +101,7 @@ export interface Config {\n   critical_score: number;\n   positive_score: boolean;\n   readonly_age: number;\n+  max_image_size: number;\n }\n \n export interface RemarkConfig {\n@@ -138,3 +139,23 @@ export enum CommentMode {\n   Reply,\n   Edit,\n }\n+\n+/**\n+ * Used as api.uploadImage response type\n+ */\n+export interface Image {\n+  name: string;\n+  size: number;\n+  /** mime type of an image */\n+  type: string;\n+  url: string;\n+}\n+\n+/** error struct returned in case of api call error */\n+export interface ApiError {\n+  code: number;\n+  /** simple explanation */\n+  details: string;\n+  /** in-depth explanation */\n+  error: string;\n+}"
    },
    {
      "sha": "575d0db852488593f8cc1186723bf323adb1ca22",
      "filename": "web/app/components/comment/comment.tsx",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/comment/comment.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/comment/comment.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/comment/comment.tsx?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -11,7 +11,7 @@ import { API_BASE, BASE_URL, COMMENT_NODE_CLASSNAME_PREFIX, BLOCKING_DURATIONS }\n import { StaticStore } from '@app/common/static_store';\n import debounce from '@app/utils/debounce';\n import copy from '@app/common/copy';\n-import { Theme, BlockTTL, Comment as CommentType, PostInfo, User, CommentMode } from '@app/common/types';\n+import { Theme, BlockTTL, Comment as CommentType, PostInfo, User, CommentMode, Image } from '@app/common/types';\n import { extractErrorMessageFromResponse, FetcherResponse } from '@app/utils/errorUtils';\n \n import { Input } from '@app/components/input';\n@@ -54,6 +54,7 @@ export interface Props {\n   blockUser?(id: User['id'], name: User['name'], ttl: BlockTTL): Promise<void>;\n   unblockUser?(id: User['id']): Promise<void>;\n   setVerifyStatus?(id: User['id'], value: boolean): Promise<void>;\n+  uploadImage?(image: File): Promise<Image>;\n }\n \n export interface State {\n@@ -675,6 +676,7 @@ export class Comment extends Component<Props, State> {\n             onCancel={this.toggleReplying}\n             getPreview={this.props.getPreview!}\n             autofocus={true}\n+            uploadImage={this.props.uploadImage!}\n           />\n         )}\n \n@@ -689,6 +691,7 @@ export class Comment extends Component<Props, State> {\n             getPreview={this.props.getPreview!}\n             errorMessage={state.editDeadline === null ? 'Editing time has expired.' : undefined}\n             autofocus={true}\n+            uploadImage={this.props.uploadImage!}\n           />\n         )}\n       </article>"
    },
    {
      "sha": "daf5f694eb11086d568f8bc82f8c33b06bf06744",
      "filename": "web/app/components/comment/connected-comment.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/comment/connected-comment.ts",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/comment/connected-comment.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/comment/connected-comment.ts?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -21,6 +21,7 @@ import { blockUser, unblockUser, setVirifiedStatus } from '@app/store/user/actio\n \n import { Comment, Props } from './comment';\n import { getCommentMode } from '@app/store/comments/getters';\n+import { uploadImage } from '@app/common/api';\n \n const mapProps = (state: StoreState, cprops: { data: CommentType }) => {\n   const props: Pick<\n@@ -51,6 +52,7 @@ const mapDispatchToProps = (dispatch: StoreDispatch) => {\n     | 'blockUser'\n     | 'unblockUser'\n     | 'setVerifyStatus'\n+    | 'uploadImage'\n   > = {\n     addComment: (text: string, title: string, pid?: CommentType['id']) => dispatch(addComment(text, title, pid)),\n     updateComment: (id: CommentType['id'], text: string) => dispatch(updateComment(id, text)),\n@@ -63,6 +65,8 @@ const mapDispatchToProps = (dispatch: StoreDispatch) => {\n     blockUser: (id: User['id'], name: User['name'], ttl: BlockTTL) => dispatch(blockUser(id, name, ttl)),\n     unblockUser: (id: User['id']) => dispatch(unblockUser(id)),\n     setVerifyStatus: (id: User['id'], value: boolean) => dispatch(setVirifiedStatus(id, value)),\n+    // should i made it as store action?\n+    uploadImage: (image: File) => uploadImage(image),\n   };\n \n   return props;"
    },
    {
      "sha": "ba20e6eaa52839fb15933c886daf2406b7f1c47c",
      "filename": "web/app/components/input/_theme/_dark/input_theme_dark.scss",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/input/_theme/_dark/input_theme_dark.scss",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/input/_theme/_dark/input_theme_dark.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/input/_theme/_dark/input_theme_dark.scss?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -33,7 +33,7 @@\n   }\n \n   .input__preview-wrapper {\n-    background: #eee;\n+    background: #333;\n   }\n \n   .input__toolbar-item {"
    },
    {
      "sha": "e669be048c007cd388b37e71943dcc71bd3350c8",
      "filename": "web/app/components/input/input.tsx",
      "status": "modified",
      "additions": 193,
      "deletions": 9,
      "changes": 202,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/input/input.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/input/input.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/input/input.tsx?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -7,14 +7,16 @@ import './styles';\n import { h, Component, RenderableProps } from 'preact';\n import b, { Mix } from 'bem-react-helper';\n \n-import { User, Theme } from '@app/common/types';\n+import { User, Theme, Image, ApiError } from '@app/common/types';\n import { BASE_URL, API_BASE } from '@app/common/constants';\n import { StaticStore } from '@app/common/static_store';\n import { siteId, url, pageTitle } from '@app/common/settings';\n import { extractErrorMessageFromResponse } from '@app/utils/errorUtils';\n \n import MarkdownToolbar from './markdown-toolbar';\n import TextareaAutosize from './textarea-autosize';\n+import { sleep } from '@app/utils/sleep';\n+import { replaceSelection } from '@app/utils/replaceSelection';\n \n const RSS_THREAD_URL = `${BASE_URL}${API_BASE}/rss/post?site=${siteId}&url=${url}`;\n const RSS_SITE_URL = `${BASE_URL}${API_BASE}/rss/site?site=${siteId}`;\n@@ -36,15 +38,22 @@ interface Props {\n   getPreview(text: string): Promise<string>;\n   /** action on cancel. optional as root input has no cancel option */\n   onCancel?: () => void;\n+  uploadImage: (image: File) => Promise<Image>;\n }\n \n interface State {\n   preview: string | null;\n   isErrorShown: boolean;\n+  /** error message, if contains newlines, it will be splitted to multiple errors */\n   errorMessage: string | null;\n+  /** prevents error hiding on input event */\n+  errorLock: boolean;\n   isDisabled: boolean;\n   maxLength: number;\n+  /** main input value */\n   text: string;\n+  /** override main button text */\n+  buttonText: null | string;\n }\n \n const Labels = {\n@@ -53,7 +62,10 @@ const Labels = {\n   reply: 'Reply',\n };\n \n+const ImageMimeRegex = /image\\//i;\n+\n export class Input extends Component<Props, State> {\n+  /** reference to textarea element */\n   textAreaRef?: TextareaAutosize;\n   textareaId: string;\n   constructor(props: Props) {\n@@ -64,15 +76,22 @@ export class Input extends Component<Props, State> {\n       preview: null,\n       isErrorShown: false,\n       errorMessage: null,\n+      errorLock: false,\n       isDisabled: false,\n       maxLength: StaticStore.config.max_comment_size,\n       text: props.value || '',\n+      buttonText: null,\n     };\n \n     this.send = this.send.bind(this);\n     this.getPreview = this.getPreview.bind(this);\n     this.onInput = this.onInput.bind(this);\n     this.onKeyDown = this.onKeyDown.bind(this);\n+    this.onDragOver = this.onDragOver.bind(this);\n+    this.onDrop = this.onDrop.bind(this);\n+    this.appendError = this.appendError.bind(this);\n+    this.uploadImage = this.uploadImage.bind(this);\n+    this.uploadImages = this.uploadImages.bind(this);\n   }\n \n   componentWillReceiveProps(nextProps: Props) {\n@@ -101,10 +120,17 @@ export class Input extends Component<Props, State> {\n   }\n \n   onInput(e: Event) {\n+    if (this.state.errorLock) {\n+      this.setState({\n+        preview: null,\n+        text: (e.target as HTMLInputElement).value,\n+      });\n+      return;\n+    }\n     this.setState({\n-      preview: null,\n       isErrorShown: false,\n       errorMessage: null,\n+      preview: null,\n       text: (e.target as HTMLInputElement).value,\n     });\n   }\n@@ -152,10 +178,165 @@ export class Input extends Component<Props, State> {\n       });\n   }\n \n-  render(props: RenderableProps<Props>, { isDisabled, isErrorShown, errorMessage, preview, maxLength, text }: State) {\n+  /** appends error to input's error block */\n+  appendError(...errors: string[]) {\n+    if (!this.state.errorMessage) {\n+      this.setState({\n+        errorMessage: errors.join('\\n'),\n+        isErrorShown: true,\n+      });\n+      return;\n+    }\n+    this.setState({\n+      errorMessage: this.state.errorMessage + '\\n' + errors.join('\\n'),\n+      isErrorShown: true,\n+    });\n+  }\n+\n+  onDragOver(e: DragEvent) {\n+    if (StaticStore.config.max_image_size === 0) return;\n+    if (!this.textAreaRef) return;\n+    if (!e.dataTransfer) return;\n+    const items = Array.from(e.dataTransfer.items);\n+    if (Array.from(items).filter(i => i.kind === 'file' && ImageMimeRegex.test(i.type)).length === 0) return;\n+    e.preventDefault();\n+    e.dataTransfer.dropEffect = 'copy';\n+  }\n+\n+  onDrop(e: DragEvent) {\n+    if (StaticStore.config.max_image_size === 0) return;\n+    if (!e.dataTransfer) return;\n+\n+    const data = Array.from(e.dataTransfer.files).filter(f => ImageMimeRegex.test(f.type));\n+    if (data.length === 0) return;\n+\n+    e.preventDefault();\n+\n+    this.uploadImages(data);\n+  }\n+\n+  /** wrapper with error handling for props.uploadImage */\n+  uploadImage(file: File): Promise<Image | Error> {\n+    return this.props\n+      .uploadImage(file)\n+      .catch(\n+        (e: ApiError | string) =>\n+          new Error(\n+            typeof e === 'string'\n+              ? `${file.name} upload failed with \"${e}\"`\n+              : `${file.name} upload failed with \"${e.error}\"`\n+          )\n+      );\n+  }\n+\n+  /** performs upload process */\n+  async uploadImages(files: File[]) {\n+    if (!this.textAreaRef) return;\n+\n+    /** Human readable image size limit, i.e 5MB */\n+    const maxImageSizeString = (StaticStore.config.max_image_size / 1024 / 1024).toFixed(2) + 'MB';\n+    /** upload delay to avoid server rate limiter */\n+    const uploadDelay = 5000;\n+\n+    const isSelectionSupported = this.textAreaRef.isSelectionSupported();\n+\n+    this.setState({\n+      errorLock: true,\n+      errorMessage: null,\n+      isErrorShown: false,\n+      isDisabled: true,\n+      buttonText: 'Uploading...',\n+    });\n+\n+    // fallback for ie < 9\n+    if (!isSelectionSupported) {\n+      for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+        const isFirst = i === 0;\n+        const placeholderStart = this.state.text.length === 0 ? '' : '\\n';\n+\n+        if (file.size > StaticStore.config.max_image_size) {\n+          this.appendError(`${file.name} exceeds size limit of ${maxImageSizeString}`);\n+          continue;\n+        }\n+\n+        !isFirst && (await sleep(uploadDelay));\n+\n+        const result = await this.uploadImage(file);\n+\n+        if (result instanceof Error) {\n+          this.appendError(result.message);\n+          continue;\n+        }\n+\n+        const markdownString = `${placeholderStart}![${result.name}](${result.url})`;\n+        this.setState({\n+          text: this.state.text + markdownString,\n+        });\n+      }\n+\n+      this.setState({ errorLock: false, isDisabled: false, buttonText: null });\n+      return;\n+    }\n+\n+    for (let i = 0; i < files.length; i++) {\n+      const file = files[i];\n+      const isFirst = i === 0;\n+      const placeholderStart = this.state.text.length === 0 ? '' : '\\n';\n+\n+      const uploadPlaceholder = `${placeholderStart}![uploading ${file.name}...]()`;\n+      const uploadPlaceholderLength = uploadPlaceholder.length;\n+      const selection = this.textAreaRef.getSelection();\n+      /** saved selection in case of error */\n+      const originalText = this.state.text;\n+      const restoreSelection = async () => {\n+        this.setState({\n+          text: originalText,\n+        });\n+        /** sleeping awhile so textarea catch state change and its selection */\n+        await sleep(100);\n+        this.textAreaRef!.setSelection(selection);\n+      };\n+\n+      if (file.size > StaticStore.config.max_image_size) {\n+        this.appendError(`${file.name} exceeds size limit of ${maxImageSizeString}`);\n+        continue;\n+      }\n+\n+      this.setState({\n+        text: replaceSelection(this.state.text, selection, uploadPlaceholder),\n+      });\n+\n+      !isFirst && (await sleep(uploadDelay));\n+\n+      const result = await this.uploadImage(file);\n+\n+      if (result instanceof Error) {\n+        this.appendError(result.message);\n+        await restoreSelection();\n+        continue;\n+      }\n+\n+      const markdownString = `${placeholderStart}![${result.name}](${result.url})`;\n+      this.setState({\n+        text: replaceSelection(this.state.text, [selection[0], selection[0] + uploadPlaceholderLength], markdownString),\n+      });\n+      /** sleeping awhile so textarea catch state change and its selection */\n+      await sleep(100);\n+      const selectionPointer = selection[0] + markdownString.length;\n+      this.textAreaRef.setSelection([selectionPointer, selectionPointer]);\n+    }\n+\n+    this.setState({ errorLock: false, isDisabled: false, buttonText: null });\n+  }\n+\n+  render(\n+    props: RenderableProps<Props>,\n+    { isDisabled, isErrorShown, errorMessage, preview, maxLength, text, buttonText }: State\n+  ) {\n     const charactersLeft = maxLength - text.length;\n     errorMessage = props.errorMessage || errorMessage;\n-    const label = Labels[props.mode || 'main'];\n+    const label = buttonText || Labels[props.mode || 'main'];\n \n     return (\n       <form\n@@ -168,6 +349,8 @@ export class Input extends Component<Props, State> {\n         })}\n         onSubmit={this.send}\n         aria-label=\"New comment\"\n+        onDragOver={this.onDragOver}\n+        onDrop={this.onDrop}\n       >\n         <div className=\"input__control-panel\">\n           <MarkdownToolbar textareaId={this.textareaId} />\n@@ -189,11 +372,12 @@ export class Input extends Component<Props, State> {\n           {charactersLeft < 100 && <span className=\"input__counter\">{charactersLeft}</span>}\n         </div>\n \n-        {(isErrorShown || !!errorMessage) && (\n-          <p className=\"input__error\" role=\"alert\">\n-            {errorMessage || 'Something went wrong. Please try again a bit later.'}\n-          </p>\n-        )}\n+        {(isErrorShown || !!errorMessage) &&\n+          (errorMessage || 'Something went wrong. Please try again a bit later.').split('\\n').map(e => (\n+            <p className=\"input__error\" role=\"alert\" key={e}>\n+              {e}\n+            </p>\n+          ))}\n \n         <div className=\"input__actions\">\n           <button"
    },
    {
      "sha": "ab98257ce2ce9a66865c6ba2d1e08a436c888fa2",
      "filename": "web/app/components/input/textarea-autosize.tsx",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/input/textarea-autosize.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/input/textarea-autosize.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/input/textarea-autosize.tsx?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -13,11 +13,13 @@ export default class TextareaAutosize extends Component<Props> {\n \n     this.onRef = this.onRef.bind(this);\n   }\n+\n   componentDidMount() {\n     this.autoResize();\n \n     if (this.props.autofocus) this.focus();\n   }\n+\n   componentDidUpdate(prevProps: Props) {\n     if (prevProps.value !== this.props.value) {\n       this.autoResize();\n@@ -33,9 +35,30 @@ export default class TextareaAutosize extends Component<Props> {\n     }, 100);\n   }\n \n+  /** returns whether selectionStart api supported */\n+  isSelectionSupported(): boolean {\n+    if (!this.textareaRef) throw new Error('No textarea element reference exists');\n+    return 'selectionStart' in this.textareaRef;\n+  }\n+\n+  /** returns selection range of a textarea */\n+  getSelection(): [number, number] {\n+    if (!this.textareaRef) throw new Error('No textarea element reference exists');\n+\n+    return [this.textareaRef.selectionStart, this.textareaRef.selectionEnd];\n+  }\n+\n+  /** sets selection range of a textarea */\n+  setSelection(selection: [number, number]) {\n+    if (!this.textareaRef) throw new Error('No textarea element reference exists');\n+    this.textareaRef.selectionStart = selection[0];\n+    this.textareaRef.selectionEnd = selection[1];\n+  }\n+\n   onRef(node: HTMLTextAreaElement) {\n     this.textareaRef = node;\n   }\n+\n   autoResize() {\n     if (this.textareaRef) {\n       this.textareaRef.style.height = '';"
    },
    {
      "sha": "568822bb76812664b5a7c8a7836e7ffbcb458264",
      "filename": "web/app/components/root/root.tsx",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/root/root.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/components/root/root.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/components/root/root.tsx?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -14,6 +14,7 @@ import {\n   Theme,\n   AuthProvider,\n   BlockTTL,\n+  Image,\n } from '@app/common/types';\n import {\n   NODE_ID,\n@@ -47,6 +48,7 @@ import { ConnectedComment as Comment } from '@app/components/comment/connected-c\n import { Input } from '@app/components/input';\n import Preloader from '@app/components/preloader';\n import { Thread } from '@app/components/thread';\n+import { uploadImage } from '@app/common/api';\n \n interface Props {\n   user: User | null;\n@@ -73,6 +75,7 @@ interface Props {\n   unblockUser(id: User['id']): Promise<void>;\n   addComment(text: string, title: string, pid?: CommentType['id']): Promise<void>;\n   updateComment(id: string, text: string): Promise<void>;\n+  uploadImage(image: File): Promise<Image>;\n }\n \n interface State {\n@@ -232,6 +235,7 @@ export class Root extends Component<Props, State> {\n                   userId={this.props.user!.id}\n                   onSubmit={(text, title) => this.props.addComment(text, title)}\n                   getPreview={this.props.getPreview}\n+                  uploadImage={this.props.uploadImage}\n                 />\n               )}\n \n@@ -311,6 +315,7 @@ const mapDispatchToProps = (dispatch: StoreDispatch) => {\n     addComment: (text: string, pageTitle: string, pid?: CommentType['id']) =>\n       dispatch(addComment(text, pageTitle, pid)),\n     updateComment: (id: CommentType['id'], text: string) => dispatch(updateComment(id, text)),\n+    uploadImage: (image: File) => uploadImage(image),\n   };\n };\n "
    },
    {
      "sha": "e7ebc86c622b83f69687796e5dda1253e92d6f1b",
      "filename": "web/app/utils/replaceSelection.ts",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/utils/replaceSelection.ts",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/utils/replaceSelection.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/utils/replaceSelection.ts?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -0,0 +1,3 @@\n+export function replaceSelection(text: string, selection: [number, number], replacement: string): string {\n+  return text.substr(0, selection[0]) + replacement + text.substr(selection[1]);\n+}"
    },
    {
      "sha": "6a6a98a5abf9a9af8d87842bb990d2cb1aff96be",
      "filename": "web/app/utils/sleep.ts",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/utils/sleep.ts",
      "raw_url": "https://github.com/umputun/remark/raw/24606e46bff1e4e06da449ecf149f4702ff9d36a/web/app/utils/sleep.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/web/app/utils/sleep.ts?ref=24606e46bff1e4e06da449ecf149f4702ff9d36a",
      "patch": "@@ -0,0 +1,3 @@\n+export function sleep(ms: number = 1000): Promise<void> {\n+  return new Promise(resolve => setTimeout(resolve, ms));\n+}"
    }
  ]
}
