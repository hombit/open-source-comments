{
  "sha": "6f56fba01666d3f157aa1307a95af3e440c237c3",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo2ZjU2ZmJhMDE2NjZkM2YxNTdhYTEzMDdhOTVhZjNlNDQwYzIzN2Mz",
  "commit": {
    "author": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2019-04-23T16:18:39Z"
    },
    "committer": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2019-04-23T16:19:11Z"
    },
    "message": "UX: Update post actions to \"Approve Post\" and \"Reject Post\"\n\nThis should be more clear.",
    "tree": {
      "sha": "94a699245c2f8b76414bf99d800777879d0656da",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/94a699245c2f8b76414bf99d800777879d0656da"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/6f56fba01666d3f157aa1307a95af3e440c237c3",
    "comment_count": 1,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/6f56fba01666d3f157aa1307a95af3e440c237c3",
  "html_url": "https://github.com/discourse/discourse/commit/6f56fba01666d3f157aa1307a95af3e440c237c3",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/6f56fba01666d3f157aa1307a95af3e440c237c3/comments",
  "author": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c99faa6b25a7621a60262ca4897cf0bd53512930",
      "url": "https://api.github.com/repos/discourse/discourse/commits/c99faa6b25a7621a60262ca4897cf0bd53512930",
      "html_url": "https://github.com/discourse/discourse/commit/c99faa6b25a7621a60262ca4897cf0bd53512930"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 44,
    "deletions": 28
  },
  "files": [
    {
      "sha": "d3ef8d2b9e86ebf5988a2e15c0a92585725ba1d2",
      "filename": "app/controllers/queued_posts_controller.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/6f56fba01666d3f157aa1307a95af3e440c237c3/app/controllers/queued_posts_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f56fba01666d3f157aa1307a95af3e440c237c3/app/controllers/queued_posts_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/queued_posts_controller.rb?ref=6f56fba01666d3f157aa1307a95af3e440c237c3",
      "patch": "@@ -37,9 +37,9 @@ def update\n     state = update_params[:state]\n     begin\n       if state == 'approved'\n-        reviewable.perform(current_user, :approve)\n+        reviewable.perform(current_user, :approve_post)\n       elsif state == 'rejected'\n-        reviewable.perform(current_user, :reject)\n+        reviewable.perform(current_user, :reject_post)\n         if update_params[:delete_user] == 'true' && guardian.can_delete_user?(reviewable.created_by)\n           UserDestroyer.new(current_user).destroy(reviewable.created_by, user_deletion_opts)\n         end"
    },
    {
      "sha": "78d8a8af9571bf242c28c3ec80a35ca82654ed50",
      "filename": "app/jobs/scheduled/auto_queue_handler.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/6f56fba01666d3f157aa1307a95af3e440c237c3/app/jobs/scheduled/auto_queue_handler.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f56fba01666d3f157aa1307a95af3e440c237c3/app/jobs/scheduled/auto_queue_handler.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/scheduled/auto_queue_handler.rb?ref=6f56fba01666d3f157aa1307a95af3e440c237c3",
      "patch": "@@ -16,7 +16,7 @@ def execute(args)\n         if reviewable.is_a?(ReviewableFlaggedPost)\n           reviewable.perform(Discourse.system_user, :ignore)\n         elsif reviewable.is_a?(ReviewableQueuedPost)\n-          reviewable.perform(Discourse.system_user, :reject)\n+          reviewable.perform(Discourse.system_user, :reject_post)\n         elsif reviewable.is_a?(ReviewableUser)\n           reviewable.perform(Discourse.system_user, :reject_user_delete)\n         end"
    },
    {
      "sha": "1ab4dc2a5bff29b402cbeb5a94b42a59363e0af1",
      "filename": "app/models/reviewable_queued_post.rb",
      "status": "modified",
      "additions": 16,
      "deletions": 4,
      "changes": 20,
      "blob_url": "https://github.com/discourse/discourse/blob/6f56fba01666d3f157aa1307a95af3e440c237c3/app/models/reviewable_queued_post.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f56fba01666d3f157aa1307a95af3e440c237c3/app/models/reviewable_queued_post.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/reviewable_queued_post.rb?ref=6f56fba01666d3f157aa1307a95af3e440c237c3",
      "patch": "@@ -10,8 +10,20 @@ class ReviewableQueuedPost < Reviewable\n \n   def build_actions(actions, guardian, args)\n     if guardian.is_staff?\n-      actions.add(:approve) unless approved?\n-      actions.add(:reject) unless rejected?\n+\n+      unless approved?\n+        actions.add(:approve_post) do |a|\n+          a.icon = 'check'\n+          a.label = \"reviewables.actions.approve_post.title\"\n+        end\n+      end\n+\n+      unless rejected?\n+        actions.add(:reject_post) do |a|\n+          a.icon = 'times'\n+          a.label = \"reviewables.actions.reject_post.title\"\n+        end\n+      end\n \n       if pending? && guardian.can_delete_user?(created_by)\n         actions.add(:delete_user) do |action|\n@@ -46,7 +58,7 @@ def create_options\n     result\n   end\n \n-  def perform_approve(performed_by, args)\n+  def perform_approve_post(performed_by, args)\n     created_post = nil\n \n     creator = PostCreator.new(created_by, create_options.merge(\n@@ -83,7 +95,7 @@ def perform_approve(performed_by, args)\n     create_result(:success, :approved) { |result| result.created_post = created_post }\n   end\n \n-  def perform_reject(performed_by, args)\n+  def perform_reject_post(performed_by, args)\n     # Backwards compatibility, new code should listen for `reviewable_transitioned_to`\n     DiscourseEvent.trigger(:rejected_post, self)\n "
    },
    {
      "sha": "c433b7fce7ec12ce4a86383eeabd2db49d852341",
      "filename": "config/locales/server.en.yml",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/6f56fba01666d3f157aa1307a95af3e440c237c3/config/locales/server.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/6f56fba01666d3f157aa1307a95af3e440c237c3/config/locales/server.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/server.en.yml?ref=6f56fba01666d3f157aa1307a95af3e440c237c3",
      "patch": "@@ -4477,6 +4477,10 @@ en:\n         title: \"Ignore\"\n       approve:\n         title: \"Approve\"\n+      approve_post:\n+        title: \"Approve Post\"\n+      reject_post:\n+        title: \"Reject Post\"\n       approve_user:\n         title: \"Approve User\"\n       reject_user:"
    },
    {
      "sha": "dd78f1831bd877ae12687a18bc771dbeeb4a1448",
      "filename": "spec/components/new_post_manager_spec.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/components/new_post_manager_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/components/new_post_manager_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/new_post_manager_spec.rb?ref=6f56fba01666d3f157aa1307a95af3e440c237c3",
      "patch": "@@ -294,7 +294,7 @@\n       expect(Reviewable.list_for(Discourse.system_user).count).to eq(1)\n       expect(@counter).to be(0)\n \n-      reviewable.perform(Discourse.system_user, :approve)\n+      reviewable.perform(Discourse.system_user, :approve_post)\n \n       manager = NewPostManager.new(\n         topic.user,"
    },
    {
      "sha": "1ab47bdea4efafe9a3f2751a13cc7cbad7b7f4de",
      "filename": "spec/models/reviewable_queued_post_spec.rb",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/discourse/discourse/blob/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/models/reviewable_queued_post_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/models/reviewable_queued_post_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/reviewable_queued_post_spec.rb?ref=6f56fba01666d3f157aa1307a95af3e440c237c3",
      "patch": "@@ -35,16 +35,16 @@\n \n     context \"actions\" do\n \n-      context \"approve\" do\n+      context \"approve_post\" do\n         it 'triggers an extensibility event' do\n-          event = DiscourseEvent.track(:approved_post) { reviewable.perform(moderator, :approve) }\n+          event = DiscourseEvent.track(:approved_post) { reviewable.perform(moderator, :approve_post) }\n           expect(event).to be_present\n           expect(event[:params].first).to eq(reviewable)\n         end\n \n         it \"creates a post\" do\n           topic_count, post_count = Topic.count, Post.count\n-          result = reviewable.perform(moderator, :approve)\n+          result = reviewable.perform(moderator, :approve_post)\n           expect(result.success?).to eq(true)\n           expect(result.created_post).to be_present\n           expect(result.created_post).to be_valid\n@@ -64,12 +64,12 @@\n           expect(notifications).to be_present\n \n           # We can't approve twice\n-          expect(-> { reviewable.perform(moderator, :approve) }).to raise_error(Reviewable::InvalidAction)\n+          expect(-> { reviewable.perform(moderator, :approve_post) }).to raise_error(Reviewable::InvalidAction)\n         end\n \n         it \"skips validations\" do\n           reviewable.payload['raw'] = 'x'\n-          result = reviewable.perform(moderator, :approve)\n+          result = reviewable.perform(moderator, :approve_post)\n           expect(result.created_post).to be_present\n         end\n \n@@ -82,28 +82,28 @@\n           SiteSetting.num_users_to_silence_new_user = 1\n           expect(Guardian.new(newuser).can_create_post?(topic)).to eq(false)\n \n-          result = reviewable.perform(moderator, :approve)\n+          result = reviewable.perform(moderator, :approve_post)\n           expect(result.success?).to eq(true)\n         end\n \n       end\n \n-      context \"reject\" do\n+      context \"reject_post\" do\n         it 'triggers an extensibility event' do\n-          event = DiscourseEvent.track(:rejected_post) { reviewable.perform(moderator, :reject) }\n+          event = DiscourseEvent.track(:rejected_post) { reviewable.perform(moderator, :reject_post) }\n           expect(event).to be_present\n           expect(event[:params].first).to eq(reviewable)\n         end\n \n         it \"doesn't create a post\" do\n           post_count = Post.count\n-          result = reviewable.perform(moderator, :reject)\n+          result = reviewable.perform(moderator, :reject_post)\n           expect(result.success?).to eq(true)\n           expect(result.created_post).to be_nil\n           expect(Post.count).to eq(post_count)\n \n           # We can't reject twice\n-          expect(-> { reviewable.perform(moderator, :reject) }).to raise_error(Reviewable::InvalidAction)\n+          expect(-> { reviewable.perform(moderator, :reject_post) }).to raise_error(Reviewable::InvalidAction)\n         end\n       end\n \n@@ -147,7 +147,7 @@\n \n     it \"creates the post and topic when approved\" do\n       topic_count, post_count = Topic.count, Post.count\n-      result = reviewable.perform(moderator, :approve)\n+      result = reviewable.perform(moderator, :approve_post)\n \n       expect(result.success?).to eq(true)\n       expect(result.created_post).to be_present\n@@ -163,7 +163,7 @@\n \n     it \"creates the post and topic when rejected\" do\n       topic_count, post_count = Topic.count, Post.count\n-      result = reviewable.perform(moderator, :reject)\n+      result = reviewable.perform(moderator, :reject_post)\n \n       expect(result.success?).to eq(true)\n       expect(result.created_post).to be_blank"
    },
    {
      "sha": "9155f8cf9a9ec70f6f9af0214ac316a701440a61",
      "filename": "spec/models/reviewable_spec.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/models/reviewable_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/models/reviewable_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/reviewable_spec.rb?ref=6f56fba01666d3f157aa1307a95af3e440c237c3",
      "patch": "@@ -204,25 +204,25 @@\n     it \"triggers a notification on pending -> approve\" do\n       reviewable = Fabricate(:reviewable_queued_post)\n       Jobs.expects(:enqueue).with(:notify_reviewable, has_key(:reviewable_id))\n-      reviewable.perform(moderator, :approve)\n+      reviewable.perform(moderator, :approve_post)\n     end\n \n     it \"triggers a notification on pending -> reject\" do\n       reviewable = Fabricate(:reviewable_queued_post)\n       Jobs.expects(:enqueue).with(:notify_reviewable, has_key(:reviewable_id))\n-      reviewable.perform(moderator, :reject)\n+      reviewable.perform(moderator, :reject_post)\n     end\n \n     it \"doesn't trigger a notification on approve -> reject\" do\n       reviewable = Fabricate(:reviewable_queued_post, status: Reviewable.statuses[:approved])\n       Jobs.expects(:enqueue).with(:notify_reviewable, has_key(:reviewable_id)).never\n-      reviewable.perform(moderator, :reject)\n+      reviewable.perform(moderator, :reject_post)\n     end\n \n     it \"doesn't trigger a notification on reject -> approve\" do\n       reviewable = Fabricate(:reviewable_queued_post, status: Reviewable.statuses[:approved])\n       Jobs.expects(:enqueue).with(:notify_reviewable, has_key(:reviewable_id)).never\n-      reviewable.perform(moderator, :reject)\n+      reviewable.perform(moderator, :reject_post)\n     end\n   end\n "
    },
    {
      "sha": "7444616e59af90766bb721d4ede3a94ce018363c",
      "filename": "spec/models/web_hook_spec.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/models/web_hook_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/models/web_hook_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/web_hook_spec.rb?ref=6f56fba01666d3f157aa1307a95af3e440c237c3",
      "patch": "@@ -491,14 +491,14 @@\n       payload = JSON.parse(job_args[\"payload\"])\n       expect(payload[\"id\"]).to eq(reviewable.id)\n \n-      reviewable.perform(Discourse.system_user, :approve)\n+      reviewable.perform(Discourse.system_user, :approve_post)\n       job_args = Jobs::EmitWebHookEvent.jobs.last[\"args\"].first\n \n       expect(job_args[\"event_name\"]).to eq(\"approved_post\")\n       payload = JSON.parse(job_args[\"payload\"])\n       expect(payload[\"id\"]).to eq(reviewable.id)\n \n-      reviewable.perform(Discourse.system_user, :reject)\n+      reviewable.perform(Discourse.system_user, :reject_post)\n       job_args = Jobs::EmitWebHookEvent.jobs.last[\"args\"].first\n \n       expect(job_args[\"event_name\"]).to eq(\"rejected_post\")"
    },
    {
      "sha": "d8e8b82e040bd008554521d81727636b9ef61e59",
      "filename": "spec/requests/posts_controller_spec.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/requests/posts_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/requests/posts_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/posts_controller_spec.rb?ref=6f56fba01666d3f157aa1307a95af3e440c237c3",
      "patch": "@@ -808,7 +808,7 @@\n           expect(parsed['pending_post']['raw']).to eq(\"this is the test content\")\n \n           mod = Fabricate(:moderator)\n-          rp.perform(mod, :approve)\n+          rp.perform(mod, :approve_post)\n \n           user.reload\n           expect(user).not_to be_silenced"
    },
    {
      "sha": "186c525a8e2ca5ac8b0dac6d478b72117161994d",
      "filename": "spec/requests/reviewables_controller_spec.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/requests/reviewables_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f56fba01666d3f157aa1307a95af3e440c237c3/spec/requests/reviewables_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/reviewables_controller_spec.rb?ref=6f56fba01666d3f157aa1307a95af3e440c237c3",
      "patch": "@@ -258,7 +258,7 @@\n \n       it \"can properly return errors\" do\n         qp = Fabricate(:reviewable_queued_post_topic, topic_id: -100)\n-        put \"/review/#{qp.id}/perform/approve.json?version=#{qp.version}\"\n+        put \"/review/#{qp.id}/perform/approve_post.json?version=#{qp.version}\"\n         expect(response.code).to eq(\"422\")\n         result = ::JSON.parse(response.body)\n         expect(result['errors']).to be_present"
    }
  ]
}
