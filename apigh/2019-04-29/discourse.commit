{
  "sha": "f8f7091e5716305adfb9d45cd625b8d8d82b48ed",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpmOGY3MDkxZTU3MTYzMDVhZGZiOWQ0NWNkNjI1YjhkOGQ4MmI0OGVk",
  "commit": {
    "author": {
      "name": "Neil Lalonde",
      "email": "neillalonde@gmail.com",
      "date": "2019-04-29T16:38:28Z"
    },
    "committer": {
      "name": "Neil Lalonde",
      "email": "neillalonde@gmail.com",
      "date": "2019-04-29T16:38:28Z"
    },
    "message": "FIX: staff-only tags visible on /tags page when restricted to a category\n\nIf a tag group is set to only be visible to staff, and is restricted\nto a category that is visible by everyone, the tags in the group were\nbeing shown on the /tags page. They weren't visible anywhere else.\nThis commit fixes it so they don't show on the /tags page.",
    "tree": {
      "sha": "86463906236fc894eb728f432f594ec7f9538fc8",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/86463906236fc894eb728f432f594ec7f9538fc8"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/f8f7091e5716305adfb9d45cd625b8d8d82b48ed",
    "comment_count": 1,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/f8f7091e5716305adfb9d45cd625b8d8d82b48ed",
  "html_url": "https://github.com/discourse/discourse/commit/f8f7091e5716305adfb9d45cd625b8d8d82b48ed",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/f8f7091e5716305adfb9d45cd625b8d8d82b48ed/comments",
  "author": {
    "login": "nlalonde",
    "id": 151885,
    "node_id": "MDQ6VXNlcjE1MTg4NQ==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/151885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nlalonde",
    "html_url": "https://github.com/nlalonde",
    "followers_url": "https://api.github.com/users/nlalonde/followers",
    "following_url": "https://api.github.com/users/nlalonde/following{/other_user}",
    "gists_url": "https://api.github.com/users/nlalonde/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nlalonde/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nlalonde/subscriptions",
    "organizations_url": "https://api.github.com/users/nlalonde/orgs",
    "repos_url": "https://api.github.com/users/nlalonde/repos",
    "events_url": "https://api.github.com/users/nlalonde/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nlalonde/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nlalonde",
    "id": 151885,
    "node_id": "MDQ6VXNlcjE1MTg4NQ==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/151885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nlalonde",
    "html_url": "https://github.com/nlalonde",
    "followers_url": "https://api.github.com/users/nlalonde/followers",
    "following_url": "https://api.github.com/users/nlalonde/following{/other_user}",
    "gists_url": "https://api.github.com/users/nlalonde/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nlalonde/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nlalonde/subscriptions",
    "organizations_url": "https://api.github.com/users/nlalonde/orgs",
    "repos_url": "https://api.github.com/users/nlalonde/repos",
    "events_url": "https://api.github.com/users/nlalonde/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nlalonde/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "56f60653931c7aa87a8137bb2e67d093c0828fa6",
      "url": "https://api.github.com/repos/discourse/discourse/commits/56f60653931c7aa87a8137bb2e67d093c0828fa6",
      "html_url": "https://github.com/discourse/discourse/commit/56f60653931c7aa87a8137bb2e67d093c0828fa6"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 39,
    "deletions": 21
  },
  "files": [
    {
      "sha": "124a487f9e356e366a55af12209d576ec7f84103",
      "filename": "app/models/tag_group.rb",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/discourse/discourse/blob/f8f7091e5716305adfb9d45cd625b8d8d82b48ed/app/models/tag_group.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/f8f7091e5716305adfb9d45cd625b8d8d82b48ed/app/models/tag_group.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/tag_group.rb?ref=f8f7091e5716305adfb9d45cd625b8d8d82b48ed",
      "patch": "@@ -68,14 +68,19 @@ def self.visible(guardian)\n     if guardian.is_staff?\n       TagGroup\n     else\n+      # (\n+      #   tag group is restricted to a category you can see\n+      #   OR\n+      #   tag group is not restricted to any categories\n+      # )\n+      # AND tag group can be seen by everyone\n       filter_sql = <<~SQL\n         (\n           id IN (SELECT tag_group_id FROM category_tag_groups WHERE category_id IN (?))\n-        ) OR (\n+          OR\n           id NOT IN (SELECT tag_group_id FROM category_tag_groups)\n-          AND\n-          id IN (SELECT tag_group_id FROM tag_group_permissions WHERE group_id = ?)\n         )\n+        AND id IN (SELECT tag_group_id FROM tag_group_permissions WHERE group_id = ?)\n       SQL\n \n       TagGroup.where(filter_sql, guardian.allowed_category_ids, Group::AUTO_GROUPS[:everyone])"
    },
    {
      "sha": "a5f1e57893f62e6662d7ab1d7266c21628dada72",
      "filename": "spec/models/tag_group_spec.rb",
      "status": "modified",
      "additions": 31,
      "deletions": 18,
      "changes": 49,
      "blob_url": "https://github.com/discourse/discourse/blob/f8f7091e5716305adfb9d45cd625b8d8d82b48ed/spec/models/tag_group_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/f8f7091e5716305adfb9d45cd625b8d8d82b48ed/spec/models/tag_group_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/tag_group_spec.rb?ref=f8f7091e5716305adfb9d45cd625b8d8d82b48ed",
      "patch": "@@ -52,24 +52,37 @@\n       staff_only_tag_group.save!\n     end\n \n-    it \"returns correct groups based on category & tag group permissions\" do\n-      expect(TagGroup.visible(Guardian.new(admin)).pluck(:name)).to match_array(TagGroup.pluck(:name))\n-      expect(TagGroup.visible(Guardian.new(moderator)).pluck(:name)).to match_array(TagGroup.pluck(:name))\n-\n-      expect(TagGroup.visible(Guardian.new(user2)).pluck(:name)).to match_array([\n-        public_tag_group.name, unrestricted_tag_group.name, private_tag_group.name,\n-        everyone_tag_group.name, visible_tag_group.name,\n-      ])\n-\n-      expect(TagGroup.visible(Guardian.new(user1)).pluck(:name)).to match_array([\n-        public_tag_group.name, unrestricted_tag_group.name, everyone_tag_group.name,\n-        visible_tag_group.name,\n-      ])\n-\n-      expect(TagGroup.visible(Guardian.new(nil)).pluck(:name)).to match_array([\n-        public_tag_group.name, unrestricted_tag_group.name, everyone_tag_group.name,\n-        visible_tag_group.name,\n-      ])\n+    shared_examples \"correct visible tag groups\" do\n+      it \"returns correct groups based on category & tag group permissions\" do\n+        expect(TagGroup.visible(Guardian.new(admin)).pluck(:name)).to match_array(TagGroup.pluck(:name))\n+        expect(TagGroup.visible(Guardian.new(moderator)).pluck(:name)).to match_array(TagGroup.pluck(:name))\n+\n+        expect(TagGroup.visible(Guardian.new(user2)).pluck(:name)).to match_array([\n+          public_tag_group.name, unrestricted_tag_group.name, private_tag_group.name,\n+          everyone_tag_group.name, visible_tag_group.name,\n+        ])\n+\n+        expect(TagGroup.visible(Guardian.new(user1)).pluck(:name)).to match_array([\n+          public_tag_group.name, unrestricted_tag_group.name, everyone_tag_group.name,\n+          visible_tag_group.name,\n+        ])\n+\n+        expect(TagGroup.visible(Guardian.new(nil)).pluck(:name)).to match_array([\n+          public_tag_group.name, unrestricted_tag_group.name, everyone_tag_group.name,\n+          visible_tag_group.name,\n+        ])\n+      end\n+    end\n+\n+    include_examples \"correct visible tag groups\"\n+\n+    context \"staff-only tag group restricted to a public category\" do\n+      before do\n+        public_category.allowed_tag_groups = [public_tag_group.name, staff_only_tag_group.name]\n+        private_category.allowed_tag_groups = [private_tag_group.name, staff_only_tag_group.name]\n+      end\n+\n+      include_examples \"correct visible tag groups\"\n     end\n   end\n end"
    }
  ]
}
