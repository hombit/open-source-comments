{
  "sha": "d82da69c2c1bcca1aabef563416e881f59195561",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpkODJkYTY5YzJjMWJjY2ExYWFiZWY1NjM0MTZlODgxZjU5MTk1NTYx",
  "commit": {
    "author": {
      "name": "David Taylor",
      "email": "david@taylorhq.com",
      "date": "2019-05-03T16:17:06Z"
    },
    "committer": {
      "name": "David Taylor",
      "email": "david@taylorhq.com",
      "date": "2019-05-03T16:17:06Z"
    },
    "message": "FIX: Fail gracefully if username parameter is missing when creating user",
    "tree": {
      "sha": "f2f20461e5c484508b3569029f49df95e376ef74",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/f2f20461e5c484508b3569029f49df95e376ef74"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/d82da69c2c1bcca1aabef563416e881f59195561",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/d82da69c2c1bcca1aabef563416e881f59195561",
  "html_url": "https://github.com/discourse/discourse/commit/d82da69c2c1bcca1aabef563416e881f59195561",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/d82da69c2c1bcca1aabef563416e881f59195561/comments",
  "author": {
    "login": "davidtaylorhq",
    "id": 6270921,
    "node_id": "MDQ6VXNlcjYyNzA5MjE=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/6270921?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davidtaylorhq",
    "html_url": "https://github.com/davidtaylorhq",
    "followers_url": "https://api.github.com/users/davidtaylorhq/followers",
    "following_url": "https://api.github.com/users/davidtaylorhq/following{/other_user}",
    "gists_url": "https://api.github.com/users/davidtaylorhq/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davidtaylorhq/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davidtaylorhq/subscriptions",
    "organizations_url": "https://api.github.com/users/davidtaylorhq/orgs",
    "repos_url": "https://api.github.com/users/davidtaylorhq/repos",
    "events_url": "https://api.github.com/users/davidtaylorhq/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davidtaylorhq/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "davidtaylorhq",
    "id": 6270921,
    "node_id": "MDQ6VXNlcjYyNzA5MjE=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/6270921?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davidtaylorhq",
    "html_url": "https://github.com/davidtaylorhq",
    "followers_url": "https://api.github.com/users/davidtaylorhq/followers",
    "following_url": "https://api.github.com/users/davidtaylorhq/following{/other_user}",
    "gists_url": "https://api.github.com/users/davidtaylorhq/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davidtaylorhq/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davidtaylorhq/subscriptions",
    "organizations_url": "https://api.github.com/users/davidtaylorhq/orgs",
    "repos_url": "https://api.github.com/users/davidtaylorhq/repos",
    "events_url": "https://api.github.com/users/davidtaylorhq/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davidtaylorhq/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "15c9b003073bcdab6268c84c63c4a0c22398e6d7",
      "url": "https://api.github.com/repos/discourse/discourse/commits/15c9b003073bcdab6268c84c63c4a0c22398e6d7",
      "html_url": "https://github.com/discourse/discourse/commit/15c9b003073bcdab6268c84c63c4a0c22398e6d7"
    }
  ],
  "stats": {
    "total": 11,
    "additions": 11,
    "deletions": 0
  },
  "files": [
    {
      "sha": "adcb3b9d517fa4ec347dfd60e8f265fc85170712",
      "filename": "app/controllers/users_controller.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/d82da69c2c1bcca1aabef563416e881f59195561/app/controllers/users_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/d82da69c2c1bcca1aabef563416e881f59195561/app/controllers/users_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/users_controller.rb?ref=d82da69c2c1bcca1aabef563416e881f59195561",
      "patch": "@@ -331,6 +331,7 @@ def user_from_params_or_current_user\n \n   def create\n     params.require(:email)\n+    params.require(:username)\n     params.permit(:user_fields)\n \n     unless SiteSetting.allow_new_registrations"
    },
    {
      "sha": "ffd6f75941e4bab19f76793b19a97a2f1fb8aed2",
      "filename": "spec/requests/users_controller_spec.rb",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/d82da69c2c1bcca1aabef563416e881f59195561/spec/requests/users_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/d82da69c2c1bcca1aabef563416e881f59195561/spec/requests/users_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/users_controller_spec.rb?ref=d82da69c2c1bcca1aabef563416e881f59195561",
      "patch": "@@ -963,6 +963,7 @@ def post_user\n     shared_examples 'failed signup' do\n       it 'should not create a new User' do\n         expect { post \"/u.json\", params: create_params }.to_not change { User.count }\n+        expect(response.status).to eq(200)\n       end\n \n       it 'should report failed' do\n@@ -997,6 +998,15 @@ def post_user\n       include_examples 'failed signup'\n     end\n \n+    context 'with a missing username' do\n+      let(:create_params) { { name: @user.name, email: @user.email, password: \"x\" * 20 } }\n+\n+      it 'should not create a new User' do\n+        expect { post \"/u.json\", params: create_params }.to_not change { User.count }\n+        expect(response.status).to eq(400)\n+      end\n+    end\n+\n     context 'when an Exception is raised' do\n       before { User.any_instance.stubs(:save).raises(ActiveRecord::StatementInvalid.new('Oh no')) }\n "
    }
  ]
}
