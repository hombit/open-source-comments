{
  "sha": "0142a6544175f880efaefb3a38bc78c9679f78ac",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjAxNDJhNjU0NDE3NWY4ODBlZmFlZmIzYTM4YmM3OGM5Njc5Zjc4YWM=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-05-18T06:48:11Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-05-18T06:48:11Z"
    },
    "message": "consolidate engine interfaces",
    "tree": {
      "sha": "fbdd93720566a056b7f29b2335060bdb9c2f75dc",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/fbdd93720566a056b7f29b2335060bdb9c2f75dc"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/0142a6544175f880efaefb3a38bc78c9679f78ac",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/0142a6544175f880efaefb3a38bc78c9679f78ac",
  "html_url": "https://github.com/umputun/remark/commit/0142a6544175f880efaefb3a38bc78c9679f78ac",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/0142a6544175f880efaefb3a38bc78c9679f78ac/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e8e335d104afcda97203519259f4e3d7c3f007f8",
      "url": "https://api.github.com/repos/umputun/remark/commits/e8e335d104afcda97203519259f4e3d7c3f007f8",
      "html_url": "https://github.com/umputun/remark/commit/e8e335d104afcda97203519259f4e3d7c3f007f8"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 13,
    "deletions": 23
  },
  "files": [
    {
      "sha": "fb6b25139ef1d989dc079a0b58c62612854814fa",
      "filename": "backend/app/store/engine/engine.go",
      "status": "modified",
      "additions": 13,
      "deletions": 23,
      "changes": 36,
      "blob_url": "https://github.com/umputun/remark/blob/0142a6544175f880efaefb3a38bc78c9679f78ac/backend/app/store/engine/engine.go",
      "raw_url": "https://github.com/umputun/remark/raw/0142a6544175f880efaefb3a38bc78c9679f78ac/backend/app/store/engine/engine.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/engine/engine.go?ref=0142a6544175f880efaefb3a38bc78c9679f78ac",
      "patch": "@@ -13,12 +13,6 @@ import (\n // NOTE: mockery works from linked to go-path and with GOFLAGS='-mod=vendor' go generate\n //go:generate sh -c \"mockery -inpkg -name Interface -print > /tmp/engine-mock.tmp && mv /tmp/engine-mock.tmp engine_mock.go\"\n \n-// Interface combines all store interfaces\n-type Interface interface {\n-\tAccessor\n-\tAdmin\n-}\n-\n // UserRequest is the request send to get comments by user\n type UserRequest struct {\n \tSiteID string\n@@ -27,23 +21,18 @@ type UserRequest struct {\n \tSkip   int\n }\n \n-// Accessor defines all usual access ops avail for regular user\n-type Accessor interface {\n-\tCreate(comment store.Comment) (commentID string, err error)              // create new comment, avoid dups by id\n-\tGet(locator store.Locator, commentID string) (store.Comment, error)      // get comment by id\n-\tPut(locator store.Locator, comment store.Comment) error                  // update comment, mutable parts only\n-\tFind(locator store.Locator, sort string) ([]store.Comment, error)        // find comments for locator\n-\tLast(siteID string, limit int, since time.Time) ([]store.Comment, error) // last comments for given site, sorted by time\n-\tUser(siteID, userID string, limit, skip int) ([]store.Comment, error)    // comments by user, sorted by time\n-\tUserCount(siteID, userID string) (int, error)                            // comments count by user\n-\tCount(locator store.Locator) (int, error)                                // number of comments for the post\n-\tList(siteID string, limit int, skip int) ([]store.PostInfo, error)       // list of commented posts\n-\tInfo(locator store.Locator, readonlyAge int) (store.PostInfo, error)     // get post info\n-\tClose() error                                                            // close/stop engine\n-}\n-\n-// Admin defines all store ops avail for admin only\n-type Admin interface {\n+// Interface defines methods provided by low-level storage engine\n+type Interface interface {\n+\tCreate(comment store.Comment) (commentID string, err error)                  // create new comment, avoid dups by id\n+\tGet(locator store.Locator, commentID string) (store.Comment, error)          // get comment by id\n+\tPut(locator store.Locator, comment store.Comment) error                      // update comment, mutable parts only\n+\tFind(locator store.Locator, sort string) ([]store.Comment, error)            // find comments for locator\n+\tLast(siteID string, limit int, since time.Time) ([]store.Comment, error)     // last comments for given site, sorted by time\n+\tUser(siteID, userID string, limit, skip int) ([]store.Comment, error)        // comments by user, sorted by time\n+\tUserCount(siteID, userID string) (int, error)                                // comments count by user\n+\tCount(locator store.Locator) (int, error)                                    // number of comments for the post\n+\tList(siteID string, limit int, skip int) ([]store.PostInfo, error)           // list of commented posts\n+\tInfo(locator store.Locator, readonlyAge int) (store.PostInfo, error)         // get post info\n \tDelete(locator store.Locator, commentID string, mode store.DeleteMode) error // delete comment by id\n \tDeleteAll(siteID string) error                                               // delete all data from site\n \tDeleteUser(siteID string, userID string) error                               // remove all comments from user\n@@ -55,6 +44,7 @@ type Admin interface {\n \tSetVerified(siteID string, userID string, status bool) error                 // set/reset verified flag\n \tIsVerified(siteID string, userID string) bool                                // check verified status\n \tVerified(siteID string) ([]string, error)                                    // list of verified user ids\n+\tClose() error                                                                // close/stop engine\n }\n \n const ("
    }
  ]
}
