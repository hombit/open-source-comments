{
  "sha": "b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpiMWQzYzY3OGNhMzljZjdmMDlhYzNlYjI1N2M3MTUzZDQ4NjNhMmE5",
  "commit": {
    "author": {
      "name": "Guo Xiang Tan",
      "email": "tgx_world@hotmail.com",
      "date": "2019-05-28T15:18:21Z"
    },
    "committer": {
      "name": "Penar Musaraj",
      "email": "pmusaraj@gmail.com",
      "date": "2019-05-28T15:18:21Z"
    },
    "message": "FEATURE: Support `[description|attachment](upload://<short-sha>)` in MD. (#7603)",
    "tree": {
      "sha": "c79eae40b462f4c268eae3e009779cdc61791faf",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/c79eae40b462f4c268eae3e009779cdc61791faf"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
  "html_url": "https://github.com/discourse/discourse/commit/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/comments",
  "author": {
    "login": "tgxworld",
    "id": 4335742,
    "node_id": "MDQ6VXNlcjQzMzU3NDI=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4335742?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tgxworld",
    "html_url": "https://github.com/tgxworld",
    "followers_url": "https://api.github.com/users/tgxworld/followers",
    "following_url": "https://api.github.com/users/tgxworld/following{/other_user}",
    "gists_url": "https://api.github.com/users/tgxworld/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tgxworld/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tgxworld/subscriptions",
    "organizations_url": "https://api.github.com/users/tgxworld/orgs",
    "repos_url": "https://api.github.com/users/tgxworld/repos",
    "events_url": "https://api.github.com/users/tgxworld/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tgxworld/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "pmusaraj",
    "id": 368961,
    "node_id": "MDQ6VXNlcjM2ODk2MQ==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/368961?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pmusaraj",
    "html_url": "https://github.com/pmusaraj",
    "followers_url": "https://api.github.com/users/pmusaraj/followers",
    "following_url": "https://api.github.com/users/pmusaraj/following{/other_user}",
    "gists_url": "https://api.github.com/users/pmusaraj/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pmusaraj/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pmusaraj/subscriptions",
    "organizations_url": "https://api.github.com/users/pmusaraj/orgs",
    "repos_url": "https://api.github.com/users/pmusaraj/repos",
    "events_url": "https://api.github.com/users/pmusaraj/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pmusaraj/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "42818b810eba33f27f6706b10273e4bd78d08e83",
      "url": "https://api.github.com/repos/discourse/discourse/commits/42818b810eba33f27f6706b10273e4bd78d08e83",
      "html_url": "https://github.com/discourse/discourse/commit/42818b810eba33f27f6706b10273e4bd78d08e83"
    }
  ],
  "stats": {
    "total": 852,
    "additions": 572,
    "deletions": 280
  },
  "files": [
    {
      "sha": "b637219cd0676a0a7b6d7905176792389e1e329f",
      "filename": "app/assets/javascripts/discourse/components/composer-editor.js.es6",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/discourse/components/composer-editor.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/discourse/components/composer-editor.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/components/composer-editor.js.es6?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -36,7 +36,7 @@ import {\n import {\n   cacheShortUploadUrl,\n   resolveAllShortUrls\n-} from \"pretty-text/image-short-url\";\n+} from \"pretty-text/upload-short-url\";\n \n import {\n   INLINE_ONEBOX_LOADING_CSS_CLASS,"
    },
    {
      "sha": "3e345df0540353dd062bced256a0343783679ad2",
      "filename": "app/assets/javascripts/discourse/components/cook-text.js.es6",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/discourse/components/cook-text.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/discourse/components/cook-text.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/components/cook-text.js.es6?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -13,7 +13,7 @@ const CookText = Ember.Component.extend({\n       // pretty text may only be loaded now\n       Ember.run.next(() =>\n         window\n-          .requireModule(\"pretty-text/image-short-url\")\n+          .requireModule(\"pretty-text/upload-short-url\")\n           .resolveAllShortUrls(ajax)\n       );\n     });"
    },
    {
      "sha": "7c1e9a38c911c04dab34e343cac89c03e711a966",
      "filename": "app/assets/javascripts/discourse/lib/utilities.js.es6",
      "status": "modified",
      "additions": 3,
      "deletions": 9,
      "changes": 12,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/discourse/lib/utilities.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/discourse/lib/utilities.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/lib/utilities.js.es6?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -444,15 +444,9 @@ export function getUploadMarkdown(upload) {\n   ) {\n     return uploadLocation(upload.url);\n   } else {\n-    return (\n-      '<a class=\"attachment\" href=\"' +\n-      upload.url +\n-      '\">' +\n-      upload.original_filename +\n-      \"</a> (\" +\n-      I18n.toHumanSize(upload.filesize) +\n-      \")\\n\"\n-    );\n+    return `[${upload.original_filename} (${I18n.toHumanSize(\n+      upload.filesize\n+    )})|attachment](${upload.short_url})`;\n   }\n }\n "
    },
    {
      "sha": "2d0ec14ee5223c5acf8a910d4f735077360153a1",
      "filename": "app/assets/javascripts/markdown-it-bundle.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/markdown-it-bundle.js",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/markdown-it-bundle.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/markdown-it-bundle.js?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -14,6 +14,6 @@\n //= require ./pretty-text/engines/discourse-markdown/newline\n //= require ./pretty-text/engines/discourse-markdown/html-img\n //= require ./pretty-text/engines/discourse-markdown/text-post-process\n-//= require ./pretty-text/engines/discourse-markdown/image-protocol\n+//= require ./pretty-text/engines/discourse-markdown/upload-protocol\n //= require ./pretty-text/engines/discourse-markdown/inject-line-number\n //= require ./pretty-text/engines/discourse-markdown/d-wrap"
    },
    {
      "sha": "23dc0122c3a7984fcdd4288bdb849b7c4593a7d3",
      "filename": "app/assets/javascripts/pretty-text-bundle.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/pretty-text-bundle.js",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/pretty-text-bundle.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text-bundle.js?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -11,4 +11,4 @@\n //= require ./pretty-text/sanitizer\n //= require ./pretty-text/oneboxer\n //= require ./pretty-text/inline-oneboxer\n-//= require ./pretty-text/image-short-url\n+//= require ./pretty-text/upload-short-url"
    },
    {
      "sha": "3c91bf034528b080dbd27499e3eab148e6b69147",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown-it.js.es6",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/pretty-text/engines/discourse-markdown-it.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/pretty-text/engines/discourse-markdown-it.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown-it.js.es6?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -1,6 +1,7 @@\n import { default as WhiteLister } from \"pretty-text/white-lister\";\n import { sanitize } from \"pretty-text/sanitizer\";\n import guid from \"pretty-text/guid\";\n+import { ATTACHMENT_CSS_CLASS } from \"pretty-text/upload-short-url\";\n \n function deprecate(feature, name) {\n   return function() {\n@@ -187,6 +188,26 @@ function setupImageDimensions(md) {\n   md.renderer.rules.image = renderImage;\n }\n \n+function renderAttachment(tokens, idx, options, env, slf) {\n+  const linkOpenToken = tokens[idx];\n+  const linkTextToken = tokens[idx + 1];\n+  const split = linkTextToken.content.split(\"|\");\n+  const isValid = !linkOpenToken.attrs[\n+    linkOpenToken.attrIndex(\"data-orig-href\")\n+  ];\n+\n+  if (isValid && split.length === 2 && split[1] === ATTACHMENT_CSS_CLASS) {\n+    linkOpenToken.attrs.unshift([\"class\", split[1]]);\n+    linkTextToken.content = split[0];\n+  }\n+\n+  return slf.renderToken(tokens, idx, options);\n+}\n+\n+function setupAttachments(md) {\n+  md.renderer.rules.link_open = renderAttachment;\n+}\n+\n let Helpers;\n \n export function setup(opts, siteSettings, state) {\n@@ -276,6 +297,7 @@ export function setup(opts, siteSettings, state) {\n   setupUrlDecoding(opts.engine);\n   setupHoister(opts.engine);\n   setupImageDimensions(opts.engine);\n+  setupAttachments(opts.engine);\n   setupBlockBBCode(opts.engine);\n   setupInlineBBCode(opts.engine);\n   setupTextPostProcessRuler(opts.engine);"
    },
    {
      "sha": "bdcfba414e9a813d0fe2d5baeb120b43810f2e23",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/image-protocol.js.es6",
      "status": "removed",
      "additions": 0,
      "deletions": 62,
      "changes": 62,
      "blob_url": "https://github.com/discourse/discourse/blob/42818b810eba33f27f6706b10273e4bd78d08e83/app/assets/javascripts/pretty-text/engines/discourse-markdown/image-protocol.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/42818b810eba33f27f6706b10273e4bd78d08e83/app/assets/javascripts/pretty-text/engines/discourse-markdown/image-protocol.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/image-protocol.js.es6?ref=42818b810eba33f27f6706b10273e4bd78d08e83",
      "patch": "@@ -1,62 +0,0 @@\n-// add image to array if src has an upload\n-function addImage(images, token) {\n-  if (token.attrs) {\n-    for (let i = 0; i < token.attrs.length; i++) {\n-      if (token.attrs[i][1].indexOf(\"upload://\") === 0) {\n-        images.push([token, i]);\n-        break;\n-      }\n-    }\n-  }\n-}\n-\n-function rule(state) {\n-  let images = [];\n-\n-  for (let i = 0; i < state.tokens.length; i++) {\n-    let blockToken = state.tokens[i];\n-\n-    if (blockToken.tag === \"img\") {\n-      addImage(images, blockToken);\n-    }\n-\n-    if (!blockToken.children) {\n-      continue;\n-    }\n-\n-    for (let j = 0; j < blockToken.children.length; j++) {\n-      let token = blockToken.children[j];\n-      if (token.tag === \"img\") {\n-        addImage(images, token);\n-      }\n-    }\n-  }\n-\n-  if (images.length > 0) {\n-    let srcList = images.map(([token, srcIndex]) => token.attrs[srcIndex][1]);\n-    let lookup = state.md.options.discourse.lookupImageUrls;\n-    let longUrls = (lookup && lookup(srcList)) || {};\n-\n-    images.forEach(([token, srcIndex]) => {\n-      let origSrc = token.attrs[srcIndex][1];\n-      let mapped = longUrls[origSrc];\n-      if (mapped) {\n-        token.attrs[srcIndex][1] = mapped;\n-      } else {\n-        token.attrs[srcIndex][1] = state.md.options.discourse.getURL(\n-          \"/images/transparent.png\"\n-        );\n-        token.attrs.push([\"data-orig-src\", origSrc]);\n-      }\n-    });\n-  }\n-}\n-\n-export function setup(helper) {\n-  const opts = helper.getOptions();\n-  if (opts.previewing) helper.whiteList([\"img.resizable\"]);\n-  helper.whiteList([\"img[data-orig-src]\"]);\n-  helper.registerPlugin(md => {\n-    md.core.ruler.push(\"image-protocol\", rule);\n-  });\n-}"
    },
    {
      "sha": "27cfb918600662de226c2425e823873154f7d236",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/upload-protocol.js.es6",
      "status": "added",
      "additions": 81,
      "deletions": 0,
      "changes": 81,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/pretty-text/engines/discourse-markdown/upload-protocol.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/pretty-text/engines/discourse-markdown/upload-protocol.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/upload-protocol.js.es6?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -0,0 +1,81 @@\n+// add image to array if src has an upload\n+function addImage(uploads, token) {\n+  if (token.attrs) {\n+    for (let i = 0; i < token.attrs.length; i++) {\n+      if (token.attrs[i][1].indexOf(\"upload://\") === 0) {\n+        uploads.push([token, i]);\n+        break;\n+      }\n+    }\n+  }\n+}\n+\n+function rule(state) {\n+  let uploads = [];\n+\n+  for (let i = 0; i < state.tokens.length; i++) {\n+    let blockToken = state.tokens[i];\n+\n+    if (blockToken.tag === \"img\" || blockToken.tag === \"a\") {\n+      addImage(uploads, blockToken);\n+    }\n+\n+    if (!blockToken.children) {\n+      continue;\n+    }\n+\n+    for (let j = 0; j < blockToken.children.length; j++) {\n+      let token = blockToken.children[j];\n+      if (token.tag === \"img\" || token.tag === \"a\") {\n+        addImage(uploads, token);\n+      }\n+    }\n+  }\n+\n+  if (uploads.length > 0) {\n+    let srcList = uploads.map(([token, srcIndex]) => token.attrs[srcIndex][1]);\n+    let lookup = state.md.options.discourse.lookupUploadUrls;\n+    let longUrls = (lookup && lookup(srcList)) || {};\n+\n+    uploads.forEach(([token, srcIndex]) => {\n+      let origSrc = token.attrs[srcIndex][1];\n+      let mapped = longUrls[origSrc];\n+\n+      switch (token.tag) {\n+        case \"img\":\n+          if (mapped) {\n+            token.attrs[srcIndex][1] = mapped.url;\n+          } else {\n+            token.attrs[srcIndex][1] = state.md.options.discourse.getURL(\n+              \"/images/transparent.png\"\n+            );\n+\n+            token.attrs.push([\"data-orig-src\", origSrc]);\n+          }\n+          break;\n+        case \"a\":\n+          if (mapped) {\n+            token.attrs[srcIndex][1] = mapped.short_path;\n+          } else {\n+            token.attrs[srcIndex][1] = state.md.options.discourse.getURL(\n+              \"/404\"\n+            );\n+\n+            token.attrs.push([\"data-orig-href\", origSrc]);\n+          }\n+\n+          break;\n+      }\n+    });\n+  }\n+}\n+\n+export function setup(helper) {\n+  const opts = helper.getOptions();\n+  if (opts.previewing) helper.whiteList([\"img.resizable\"]);\n+  helper.whiteList([\"img[data-orig-src]\", \"a[data-orig-href]\"]);\n+\n+  helper.registerPlugin(md => {\n+    md.core.ruler.push(\"upload-protocol\", rule);\n+  });\n+}"
    },
    {
      "sha": "e457210dd76cf6d8a39d40159a744f11623dd3c7",
      "filename": "app/assets/javascripts/pretty-text/image-short-url.js.es6",
      "status": "removed",
      "additions": 0,
      "deletions": 68,
      "changes": 68,
      "blob_url": "https://github.com/discourse/discourse/blob/42818b810eba33f27f6706b10273e4bd78d08e83/app/assets/javascripts/pretty-text/image-short-url.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/42818b810eba33f27f6706b10273e4bd78d08e83/app/assets/javascripts/pretty-text/image-short-url.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/image-short-url.js.es6?ref=42818b810eba33f27f6706b10273e4bd78d08e83",
      "patch": "@@ -1,68 +0,0 @@\n-let _cache = {};\n-\n-export function lookupCachedUploadUrl(shortUrl) {\n-  return _cache[shortUrl];\n-}\n-\n-export function lookupUncachedUploadUrls(urls, ajax) {\n-  return ajax(\"/uploads/lookup-urls\", {\n-    method: \"POST\",\n-    data: { short_urls: urls }\n-  }).then(uploads => {\n-    uploads.forEach(upload =>\n-      cacheShortUploadUrl(upload.short_url, upload.url)\n-    );\n-    urls.forEach(url =>\n-      cacheShortUploadUrl(url, lookupCachedUploadUrl(url) || \"missing\")\n-    );\n-    return uploads;\n-  });\n-}\n-\n-export function cacheShortUploadUrl(shortUrl, url) {\n-  _cache[shortUrl] = url;\n-}\n-\n-export function resetCache() {\n-  _cache = {};\n-}\n-\n-function _loadCachedShortUrls($images) {\n-  $images.each((idx, image) => {\n-    const $image = $(image);\n-    const url = lookupCachedUploadUrl($image.data(\"orig-src\"));\n-\n-    if (url) {\n-      $image.removeAttr(\"data-orig-src\");\n-      if (url !== \"missing\") {\n-        $image.attr(\"src\", url);\n-      }\n-    }\n-  });\n-}\n-\n-function _loadShortUrls($images, ajax) {\n-  const urls = $images.toArray().map(img => $(img).data(\"orig-src\"));\n-  return lookupUncachedUploadUrls(urls, ajax).then(() =>\n-    _loadCachedShortUrls($images)\n-  );\n-}\n-\n-export function resolveAllShortUrls(ajax) {\n-  let $shortUploadUrls = $(\"img[data-orig-src]\");\n-\n-  if ($shortUploadUrls.length > 0) {\n-    _loadCachedShortUrls($shortUploadUrls);\n-\n-    $shortUploadUrls = $(\"img[data-orig-src]\");\n-    if ($shortUploadUrls.length > 0) {\n-      // this is carefully batched so we can do a leading debounce (trigger right away)\n-      return Ember.run.debounce(\n-        null,\n-        () => _loadShortUrls($shortUploadUrls, ajax),\n-        450,\n-        true\n-      );\n-    }\n-  }\n-}"
    },
    {
      "sha": "33836cddd3f488c569cf39cfb34a09f10551cabc",
      "filename": "app/assets/javascripts/pretty-text/pretty-text.js.es6",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/pretty-text/pretty-text.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/pretty-text/pretty-text.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/pretty-text.js.es6?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -26,7 +26,7 @@ export function buildOptions(state) {\n     lookupPrimaryUserGroupByPostNumber,\n     formatUsername,\n     emojiUnicodeReplacer,\n-    lookupImageUrls,\n+    lookupUploadUrls,\n     previewing,\n     linkify,\n     censoredWords\n@@ -65,7 +65,7 @@ export function buildOptions(state) {\n     lookupPrimaryUserGroupByPostNumber,\n     formatUsername,\n     emojiUnicodeReplacer,\n-    lookupImageUrls,\n+    lookupUploadUrls,\n     censoredWords,\n     allowedHrefSchemes: siteSettings.allowed_href_schemes\n       ? siteSettings.allowed_href_schemes.split(\"|\")"
    },
    {
      "sha": "8b0b4db2b4da57351dd805939a206b6f506287c2",
      "filename": "app/assets/javascripts/pretty-text/upload-short-url.js.es6",
      "status": "added",
      "additions": 111,
      "deletions": 0,
      "changes": 111,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/pretty-text/upload-short-url.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/assets/javascripts/pretty-text/upload-short-url.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/upload-short-url.js.es6?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -0,0 +1,111 @@\n+let _cache = {};\n+\n+export function lookupCachedUploadUrl(shortUrl) {\n+  return _cache[shortUrl] || {};\n+}\n+\n+const MISSING = \"missing\";\n+\n+export function lookupUncachedUploadUrls(urls, ajax) {\n+  return ajax(\"/uploads/lookup-urls\", {\n+    method: \"POST\",\n+    data: { short_urls: urls }\n+  }).then(uploads => {\n+    uploads.forEach(upload => {\n+      cacheShortUploadUrl(upload.short_url, {\n+        url: upload.url,\n+        short_path: upload.short_path\n+      });\n+    });\n+\n+    urls.forEach(url =>\n+      cacheShortUploadUrl(url, {\n+        url: lookupCachedUploadUrl(url).url || MISSING,\n+        short_path: lookupCachedUploadUrl(url).short_path || MISSING\n+      })\n+    );\n+\n+    return uploads;\n+  });\n+}\n+\n+export function cacheShortUploadUrl(shortUrl, value) {\n+  _cache[shortUrl] = value;\n+}\n+\n+export function resetCache() {\n+  _cache = {};\n+}\n+\n+export const ATTACHMENT_CSS_CLASS = \"attachment\";\n+\n+function _loadCachedShortUrls($uploads) {\n+  $uploads.each((idx, upload) => {\n+    const $upload = $(upload);\n+    let url;\n+\n+    switch (upload.tagName) {\n+      case \"A\":\n+        url = lookupCachedUploadUrl($upload.data(\"orig-href\")).short_path;\n+\n+        if (url) {\n+          $upload.removeAttr(\"data-orig-href\");\n+\n+          if (url !== MISSING) {\n+            $upload.attr(\"href\", url);\n+            const content = $upload.text().split(\"|\");\n+\n+            if (content[1] === ATTACHMENT_CSS_CLASS) {\n+              $upload.addClass(ATTACHMENT_CSS_CLASS);\n+              $upload.text(content[0]);\n+            }\n+          }\n+        }\n+\n+        break;\n+      case \"IMG\":\n+        url = lookupCachedUploadUrl($upload.data(\"orig-src\")).url;\n+\n+        if (url) {\n+          $upload.removeAttr(\"data-orig-src\");\n+\n+          if (url !== MISSING) {\n+            $upload.attr(\"src\", url);\n+          }\n+        }\n+\n+        break;\n+    }\n+  });\n+}\n+\n+function _loadShortUrls($uploads, ajax) {\n+  const urls = $uploads.toArray().map(upload => {\n+    const $upload = $(upload);\n+    return $upload.data(\"orig-src\") || $upload.data(\"orig-href\");\n+  });\n+\n+  return lookupUncachedUploadUrls(urls, ajax).then(() =>\n+    _loadCachedShortUrls($uploads)\n+  );\n+}\n+\n+export function resolveAllShortUrls(ajax) {\n+  const attributes = \"img[data-orig-src], a[data-orig-href]\";\n+  let $shortUploadUrls = $(attributes);\n+\n+  if ($shortUploadUrls.length > 0) {\n+    _loadCachedShortUrls($shortUploadUrls);\n+\n+    $shortUploadUrls = $(attributes);\n+    if ($shortUploadUrls.length > 0) {\n+      // this is carefully batched so we can do a leading debounce (trigger right away)\n+      return Ember.run.debounce(\n+        null,\n+        () => _loadShortUrls($shortUploadUrls, ajax),\n+        450,\n+        true\n+      );\n+    }\n+  }\n+}"
    },
    {
      "sha": "64852af01607c48b19f3b798c015145c9483e6e3",
      "filename": "app/controllers/uploads_controller.rb",
      "status": "modified",
      "additions": 46,
      "deletions": 14,
      "changes": 60,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/controllers/uploads_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/controllers/uploads_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/uploads_controller.rb?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -5,9 +5,9 @@\n require_dependency \"file_store/local_store\"\n \n class UploadsController < ApplicationController\n-  requires_login except: [:show]\n+  requires_login except: [:show, :show_short]\n \n-  skip_before_action :preload_json, :check_xhr, :redirect_to_login_if_required, only: [:show]\n+  skip_before_action :preload_json, :check_xhr, :redirect_to_login_if_required, only: [:show, :show_short]\n \n   def create\n     # capture current user for block later on\n@@ -56,8 +56,12 @@ def lookup_urls\n     uploads = []\n \n     if (params[:short_urls] && params[:short_urls].length > 0)\n-      PrettyText::Helpers.lookup_image_urls(params[:short_urls]).each do |short_url, url|\n-        uploads << { short_url: short_url, url: url }\n+      PrettyText::Helpers.lookup_upload_urls(params[:short_urls]).each do |short_url, paths|\n+        uploads << {\n+          short_url: short_url,\n+          url: paths[:url],\n+          short_path: paths[:short_path]\n+        }\n       end\n     end\n \n@@ -76,20 +80,28 @@ def show\n           return render_404 unless local_store.has_been_uploaded?(upload.url)\n         end\n \n-        opts = {\n-          filename: upload.original_filename,\n-          content_type: MiniMime.lookup_by_filename(upload.original_filename)&.content_type,\n-        }\n-        opts[:disposition]   = \"inline\" if params[:inline]\n-        opts[:disposition] ||= \"attachment\" unless FileHelper.is_supported_image?(upload.original_filename)\n+        send_file_local_upload(upload)\n+      else\n+        render_404\n+      end\n+    end\n+  end\n \n-        file_path = Discourse.store.path_for(upload)\n-        return render_404 unless file_path\n+  def show_short\n+    if SiteSetting.prevent_anons_from_downloading_files && current_user.nil?\n+      return render_404\n+    end\n \n-        send_file(file_path, opts)\n+    sha1 = Upload.sha1_from_base62_encoded(params[:base62])\n+\n+    if upload = Upload.find_by(sha1: sha1)\n+      if Discourse.store.internal?\n+        send_file_local_upload(upload)\n       else\n-        render_404\n+        redirect_to Discourse.store.path_for(upload)\n       end\n+    else\n+      render_404\n     end\n   end\n \n@@ -165,4 +177,24 @@ def self.create_upload(current_user:,\n     tempfile&.close!\n   end\n \n+  private\n+\n+  def send_file_local_upload(upload)\n+    opts = {\n+      filename: upload.original_filename,\n+      content_type: MiniMime.lookup_by_filename(upload.original_filename)&.content_type\n+    }\n+\n+    if params[:inline]\n+      opts[:disposition] = \"inline\"\n+    elsif !FileHelper.is_supported_image?(upload.original_filename)\n+      opts[:disposition] = \"attachment\"\n+    end\n+\n+    file_path = Discourse.store.path_for(upload)\n+    return render_404 unless file_path\n+\n+    send_file(file_path, opts)\n+  end\n+\n end"
    },
    {
      "sha": "eaa322976c032464eccda442d319145be3f6b44b",
      "filename": "app/models/upload.rb",
      "status": "modified",
      "additions": 38,
      "deletions": 7,
      "changes": 45,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/models/upload.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/app/models/upload.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/upload.rb?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -117,7 +117,28 @@ def destroy\n   end\n \n   def short_url\n-    \"upload://#{Base62.encode(sha1.hex)}.#{extension}\"\n+    \"upload://#{short_url_basename}\"\n+  end\n+\n+  def short_path\n+    self.class.short_path(sha1: self.sha1, extension: self.extension)\n+  end\n+\n+  def self.short_path(sha1:, extension:)\n+    @url_helpers ||= Rails.application.routes.url_helpers\n+\n+    @url_helpers.upload_short_path(\n+      base62: self.base62_sha1(sha1),\n+      extension: extension\n+    )\n+  end\n+\n+  def self.base62_sha1(sha1)\n+    Base62.encode(sha1.hex)\n+  end\n+\n+  def base62_sha1\n+    Upload.base62_sha1(upload.sha1)\n   end\n \n   def local?\n@@ -182,13 +203,17 @@ def thumbnail_height\n \n   def self.sha1_from_short_url(url)\n     if url =~ /(upload:\\/\\/)?([a-zA-Z0-9]+)(\\..*)?/\n-      sha1 = Base62.decode($2).to_s(16)\n+      self.sha1_from_base62_encoded($2)\n+    end\n+  end\n \n-      if sha1.length > SHA1_LENGTH\n-        nil\n-      else\n-        sha1.rjust(SHA1_LENGTH, '0')\n-      end\n+  def self.sha1_from_base62_encoded(encoded_sha1)\n+    sha1 = Base62.decode(encoded_sha1).to_s(16)\n+\n+    if sha1.length > SHA1_LENGTH\n+      nil\n+    else\n+      sha1.rjust(SHA1_LENGTH, '0')\n     end\n   end\n \n@@ -322,6 +347,12 @@ def self.migrate_to_new_scheme(limit: nil)\n     problems\n   end\n \n+  private\n+\n+  def short_url_basename\n+    \"#{Upload.base62_sha1(sha1)}.#{extension}\"\n+  end\n+\n end\n \n # == Schema Information"
    },
    {
      "sha": "c996544c2e050c204086e5751151d12846e4d80f",
      "filename": "config/routes.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/config/routes.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/config/routes.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/routes.rb?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -486,6 +486,7 @@\n \n   # used to download original images\n   get \"uploads/:site/:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, sha: /\\h{40}/, extension: /[a-z0-9\\.]+/i }\n+  get \"uploads/short-url/:base62(.:extension)\" => \"uploads#show_short\", constraints: { site: /\\w+/, base62: /[a-zA-Z0-9]+/, extension: /[a-z0-9\\.]+/i }, as: :upload_short\n   # used to download attachments\n   get \"uploads/:site/original/:tree:sha(.:extension)\" => \"uploads#show\", constraints: { site: /\\w+/, tree: /([a-z0-9]+\\/)+/i, sha: /\\h{40}/, extension: /[a-z0-9\\.]+/i }\n   # used to download attachments (old route)"
    },
    {
      "sha": "df3296f7abd293e44b8eacfd406e189501cd2358",
      "filename": "lib/file_store/s3_store.rb",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/lib/file_store/s3_store.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/lib/file_store/s3_store.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/file_store/s3_store.rb?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -101,8 +101,13 @@ def multisite_tombstone_prefix\n     end\n \n     def path_for(upload)\n-      url = upload.try(:url)\n-      FileStore::LocalStore.new.path_for(upload) if url && url[/^\\/[^\\/]/]\n+      url = upload&.url\n+\n+      if url && url[/^\\/[^\\/]/]\n+        FileStore::LocalStore.new.path_for(upload)\n+      else\n+        url\n+      end\n     end\n \n     def cdn_url(url)"
    },
    {
      "sha": "79b6e66a4d7463fbeabfab13e6939f44fd580f95",
      "filename": "lib/pretty_text.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/lib/pretty_text.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/lib/pretty_text.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/pretty_text.rb?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -159,7 +159,7 @@ def self.markdown(text, opts = {})\n         __optInput.categoryHashtagLookup = __categoryLookup;\n         __optInput.customEmoji = #{custom_emoji.to_json};\n         __optInput.emojiUnicodeReplacer = __emojiUnicodeReplacer;\n-        __optInput.lookupImageUrls = __lookupImageUrls;\n+        __optInput.lookupUploadUrls = __lookupUploadUrls;\n         __optInput.censoredWords = #{WordWatcher.words_for_action(:censor).join('|').to_json};\n       JS\n "
    },
    {
      "sha": "d42ba3749bc399937393e94dbde0d247efdb7e48",
      "filename": "lib/pretty_text/helpers.rb",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/lib/pretty_text/helpers.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/lib/pretty_text/helpers.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/pretty_text/helpers.rb?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -49,7 +49,7 @@ def category_hashtag_lookup(category_slug)\n       end\n     end\n \n-    def lookup_image_urls(urls)\n+    def lookup_upload_urls(urls)\n       map = {}\n       result = {}\n \n@@ -66,11 +66,16 @@ def lookup_image_urls(urls)\n           reverse_map[value] << key\n         end\n \n-        Upload.where(sha1: map.values).pluck(:sha1, :url).each do |row|\n-          sha1, url = row\n+        Upload.where(sha1: map.values).pluck(:sha1, :url, :extension).each do |row|\n+          sha1, url, extension = row\n \n           if short_urls = reverse_map[sha1]\n-            short_urls.each { |short_url| result[short_url] = url }\n+            short_urls.each do |short_url|\n+              result[short_url] = {\n+                url: url,\n+                short_path: Upload.short_path(sha1: sha1, extension: extension)\n+              }\n+            end\n           end\n         end\n       end"
    },
    {
      "sha": "44f806907200f42742efb7d200ed3ed3177cd346",
      "filename": "lib/pretty_text/shims.js",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/lib/pretty_text/shims.js",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/lib/pretty_text/shims.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/pretty_text/shims.js?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -65,8 +65,8 @@ function __getURL(url) {\n   return url;\n }\n \n-function __lookupImageUrls(urls) {\n-  return __helpers.lookup_image_urls(urls);\n+function __lookupUploadUrls(urls) {\n+  return __helpers.lookup_upload_urls(urls);\n }\n \n function __getTopicInfo(i) {"
    },
    {
      "sha": "4474613c50da203de3ea2d66b6bf5d2a5e8a7b7c",
      "filename": "spec/components/file_store/s3_store_spec.rb",
      "status": "modified",
      "additions": 5,
      "deletions": 14,
      "changes": 19,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/spec/components/file_store/s3_store_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/spec/components/file_store/s3_store_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/file_store/s3_store_spec.rb?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -303,21 +303,12 @@\n   end\n \n   describe \".path_for\" do\n-\n-    def assert_path(path, expected)\n-      upload = Upload.new(url: path)\n-\n-      path = store.path_for(upload)\n-      expected = FileStore::LocalStore.new.path_for(upload) if expected\n-\n-      expect(path).to eq(expected)\n-    end\n-\n     it \"correctly falls back to local\" do\n-      assert_path(\"/hello\", \"/hello\")\n-      assert_path(\"//hello\", nil)\n-      assert_path(\"http://hello\", nil)\n-      assert_path(\"https://hello\", nil)\n+      local_upload = Fabricate(:upload)\n+      s3_upload =  Fabricate(:upload_s3)\n+\n+      expect(Discourse.store.path_for(local_upload)).to eq(local_upload.url)\n+      expect(Discourse.store.path_for(s3_upload)).to eq(s3_upload.url)\n     end\n   end\n "
    },
    {
      "sha": "71da86ead13a1d30955edcb325ec7cd119956faf",
      "filename": "spec/components/pretty_text_spec.rb",
      "status": "modified",
      "additions": 19,
      "deletions": 3,
      "changes": 22,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/spec/components/pretty_text_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/spec/components/pretty_text_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/pretty_text_spec.rb?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -1260,9 +1260,11 @@ def strip_image_wrapping(html)\n \n   end\n \n-  describe \"image decoding\" do\n+  describe \"upload decoding\" do\n \n     it \"can decode upload:// for default setup\" do\n+      set_cdn_url('https://cdn.com')\n+\n       upload = Fabricate(:upload)\n \n       raw = <<~RAW\n@@ -1274,6 +1276,12 @@ def strip_image_wrapping(html)\n           - ![upload](#{upload.short_url})\n \n       ![upload](#{upload.short_url.gsub(\".png\", \"\")})\n+\n+      [some attachment](#{upload.short_url})\n+\n+      [some attachment|attachment](#{upload.short_url})\n+\n+      [some attachment|random](#{upload.short_url})\n       RAW\n \n       cooked = <<~HTML\n@@ -1290,17 +1298,25 @@ def strip_image_wrapping(html)\n         </li>\n         </ul>\n         <p><img src=\"#{upload.url}\" alt=\"upload\"></p>\n+        <p><a href=\"#{upload.short_path}\">some attachment</a></p>\n+        <p><a class=\"attachment\" href=\"#{upload.short_path}\">some attachment</a></p>\n+        <p><a href=\"#{upload.short_path}\">some attachment|random</a></p>\n       HTML\n \n       expect(PrettyText.cook(raw)).to eq(cooked.strip)\n     end\n \n     it \"can place a blank image if we can not find the upload\" do\n \n-      raw = \"![upload](upload://abcABC.png)\"\n+      raw = <<~MD\n+      ![upload](upload://abcABC.png)\n+\n+      [some attachment|attachment](upload://abcdefg.png)\n+      MD\n \n       cooked = <<~HTML\n-        <p><img src=\"/images/transparent.png\" alt=\"upload\" data-orig-src=\"upload://abcABC.png\"></p>\n+      <p><img src=\"/images/transparent.png\" alt=\"upload\" data-orig-src=\"upload://abcABC.png\"></p>\n+      <p><a href=\"/404\" data-orig-href=\"upload://abcdefg.png\">some attachment|attachment</a></p>\n       HTML\n \n       expect(PrettyText.cook(raw)).to eq(cooked.strip)"
    },
    {
      "sha": "b1d605221870c1e6a6921a17cc22a93e2c202925",
      "filename": "spec/requests/uploads_controller_spec.rb",
      "status": "modified",
      "additions": 82,
      "deletions": 21,
      "changes": 103,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/spec/requests/uploads_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/spec/requests/uploads_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/uploads_controller_spec.rb?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -3,14 +3,18 @@\n require 'rails_helper'\n \n describe UploadsController do\n+  fab!(:user) { Fabricate(:user) }\n+\n   describe '#create' do\n     it 'requires you to be logged in' do\n       post \"/uploads.json\"\n       expect(response.status).to eq(403)\n     end\n \n     context 'logged in' do\n-      let!(:user) { sign_in(Fabricate(:user)) }\n+      before do\n+        sign_in(user)\n+      end\n \n       let(:logo) do\n         Rack::Test::UploadedFile.new(file_from_fixtures(\"logo.png\"))\n@@ -195,27 +199,26 @@\n     end\n   end\n \n-  describe '#show' do\n-    let(:site) { \"default\" }\n-    let(:sha) { Digest::SHA1.hexdigest(\"discourse\") }\n-    fab!(:user) { Fabricate(:user) }\n+  def upload_file(file, folder = \"images\")\n+    fake_logo = Rack::Test::UploadedFile.new(file_from_fixtures(file, folder))\n+    SiteSetting.authorized_extensions = \"*\"\n+    sign_in(user)\n \n-    def upload_file(file, folder = \"images\")\n-      fake_logo = Rack::Test::UploadedFile.new(file_from_fixtures(file, folder))\n-      SiteSetting.authorized_extensions = \"*\"\n-      sign_in(user)\n+    post \"/uploads.json\", params: {\n+      file: fake_logo,\n+      type: \"composer\",\n+    }\n \n-      post \"/uploads.json\", params: {\n-        file: fake_logo,\n-        type: \"composer\",\n-      }\n+    expect(response.status).to eq(200)\n \n-      expect(response.status).to eq(200)\n+    url = JSON.parse(response.body)[\"url\"]\n+    upload = Upload.get_from_url(url)\n+    upload\n+  end\n \n-      url = JSON.parse(response.body)[\"url\"]\n-      upload = Upload.where(url: url).first\n-      upload\n-    end\n+  describe '#show' do\n+    let(:site) { \"default\" }\n+    let(:sha) { Digest::SHA1.hexdigest(\"discourse\") }\n \n     context \"when using external storage\" do\n       fab!(:upload) { upload_file(\"small.pdf\", \"pdf\") }\n@@ -284,7 +287,7 @@ def upload_file(file, folder = \"images\")\n       it \"returns 404 when an anonymous user tries to download a file\" do\n         skip(\"this only works when nginx/apache is asset server\") if Discourse::Application.config.public_file_server.enabled\n         upload = upload_file(\"small.pdf\", \"pdf\")\n-        delete \"/session/#{user.username}.json\" # upload a file, then sign out\n+        delete \"/session/#{user.username}.json\"\n \n         SiteSetting.prevent_anons_from_downloading_files = true\n         get upload.url\n@@ -293,16 +296,74 @@ def upload_file(file, folder = \"images\")\n     end\n   end\n \n+  describe \"#show_short\" do\n+    describe \"local store\" do\n+      fab!(:image_upload) { upload_file(\"smallest.png\") }\n+\n+      it \"returns the right response\" do\n+        get image_upload.short_path\n+\n+        expect(response.status).to eq(200)\n+\n+        expect(response.headers[\"Content-Disposition\"])\n+          .to include(\"attachment; filename=\\\"#{image_upload.original_filename}\\\"\")\n+      end\n+\n+      it \"returns the right response when `inline` param is given\" do\n+        get \"#{image_upload.short_path}?inline=1\"\n+\n+        expect(response.status).to eq(200)\n+\n+        expect(response.headers[\"Content-Disposition\"])\n+          .to include(\"inline; filename=\\\"#{image_upload.original_filename}\\\"\")\n+      end\n+\n+      it \"returns the right response when base62 param is invalid \" do\n+        get \"/uploads/short-url/12345.png\"\n+\n+        expect(response.status).to eq(404)\n+      end\n+\n+      it \"returns the right response when anon tries to download a file \" \\\n+         \"when prevent_anons_from_downloading_files is true\" do\n+\n+        delete \"/session/#{user.username}.json\"\n+        SiteSetting.prevent_anons_from_downloading_files = true\n+\n+        get image_upload.short_path\n+\n+        expect(response.status).to eq(404)\n+      end\n+    end\n+\n+    describe \"s3 store\" do\n+      let(:upload) { Fabricate(:upload_s3) }\n+\n+      before do\n+        SiteSetting.enable_s3_uploads = true\n+        SiteSetting.s3_access_key_id = \"fakeid7974664\"\n+        SiteSetting.s3_secret_access_key = \"fakesecretid7974664\"\n+      end\n+\n+      it \"should redirect to the s3 URL\" do\n+        get upload.short_path\n+\n+        expect(response).to redirect_to(upload.url)\n+      end\n+    end\n+  end\n+\n   describe '#lookup_urls' do\n     it 'can look up long urls' do\n-      sign_in(Fabricate(:user))\n+      sign_in(user)\n       upload = Fabricate(:upload)\n \n       post \"/uploads/lookup-urls.json\", params: { short_urls: [upload.short_url] }\n       expect(response.status).to eq(200)\n \n       result = JSON.parse(response.body)\n       expect(result[0][\"url\"]).to eq(upload.url)\n+      expect(result[0][\"short_path\"]).to eq(upload.short_path)\n     end\n   end\n \n@@ -327,7 +388,7 @@ def upload_file(file, folder = \"images\")\n \n     describe 'when signed in' do\n       before do\n-        sign_in(Fabricate(:user))\n+        sign_in(user)\n       end\n \n       describe 'when url is invalid' do"
    },
    {
      "sha": "fa16a62cf85d33e32ebb2c46c34550694ab4676a",
      "filename": "test/javascripts/acceptance/composer-attachment-test.js.es6",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/test/javascripts/acceptance/composer-attachment-test.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/test/javascripts/acceptance/composer-attachment-test.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/acceptance/composer-attachment-test.js.es6?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -0,0 +1,39 @@\n+import { acceptance } from \"helpers/qunit-helpers\";\n+\n+acceptance(\"Composer Attachment\", {\n+  loggedIn: true,\n+  pretend(server, helper) {\n+    server.post(\"/uploads/lookup-urls\", () => {\n+      return helper.response([\n+        {\n+          short_url: \"upload://asdsad.png\",\n+          url: \"/uploads/default/3X/1/asjdiasjdiasida.png\",\n+          short_path: \"/uploads/short-url/asdsad.png\"\n+        }\n+      ]);\n+    });\n+  }\n+});\n+\n+QUnit.test(\"attachments are cooked properly\", async assert => {\n+  await visit(\"/t/internationalization-localization/280\");\n+  await click(\"#topic-footer-buttons .btn.create\");\n+\n+  await fillIn(\".d-editor-input\", \"[test](upload://abcdefg.png)\");\n+\n+  assert.equal(\n+    find(\".d-editor-preview:visible\")\n+      .html()\n+      .trim(),\n+    '<p><a href=\"/404\">test</a></p>'\n+  );\n+\n+  await fillIn(\".d-editor-input\", \"[test|attachment](upload://asdsad.png)\");\n+\n+  assert.equal(\n+    find(\".d-editor-preview:visible\")\n+      .html()\n+      .trim(),\n+    '<p><a href=\"/uploads/short-url/asdsad.png\" class=\"attachment\">test</a></p>'\n+  );\n+});"
    },
    {
      "sha": "d7b2c53e8570b17aaa8ac0cf4d4b9a263ffa8df2",
      "filename": "test/javascripts/lib/image-short-url-test.js.es6",
      "status": "removed",
      "additions": 0,
      "deletions": 56,
      "changes": 56,
      "blob_url": "https://github.com/discourse/discourse/blob/42818b810eba33f27f6706b10273e4bd78d08e83/test/javascripts/lib/image-short-url-test.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/42818b810eba33f27f6706b10273e4bd78d08e83/test/javascripts/lib/image-short-url-test.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/lib/image-short-url-test.js.es6?ref=42818b810eba33f27f6706b10273e4bd78d08e83",
      "patch": "@@ -1,56 +0,0 @@\n-import {\n-  lookupCachedUploadUrl,\n-  resolveAllShortUrls,\n-  resetCache\n-} from \"pretty-text/image-short-url\";\n-import { ajax } from \"discourse/lib/ajax\";\n-\n-QUnit.module(\"lib:pretty-text/image-short-url\", {\n-  beforeEach() {\n-    const response = object => {\n-      return [200, { \"Content-Type\": \"application/json\" }, object];\n-    };\n-\n-    const srcs = [\n-      {\n-        short_url: \"upload://a.jpeg\",\n-        url: \"/uploads/default/original/3X/c/b/1.jpeg\"\n-      },\n-      {\n-        short_url: \"upload://b.jpeg\",\n-        url: \"/uploads/default/original/3X/c/b/2.jpeg\"\n-      }\n-    ];\n-\n-    // prettier-ignore\n-    server.post(\"/uploads/lookup-urls\", () => { //eslint-disable-line\n-      return response(srcs);\n-    });\n-\n-    fixture().html(\n-      srcs.map(src => `<img data-orig-src=\"${src.url}\">`).join(\"\")\n-    );\n-  },\n-\n-  afterEach() {\n-    resetCache();\n-  }\n-});\n-\n-QUnit.test(\"resolveAllShortUrls\", async assert => {\n-  let lookup;\n-\n-  lookup = lookupCachedUploadUrl(\"upload://a.jpeg\");\n-  assert.notOk(lookup);\n-\n-  await resolveAllShortUrls(ajax);\n-\n-  lookup = lookupCachedUploadUrl(\"upload://a.jpeg\");\n-  assert.equal(lookup, \"/uploads/default/original/3X/c/b/1.jpeg\");\n-\n-  lookup = lookupCachedUploadUrl(\"upload://b.jpeg\");\n-  assert.equal(lookup, \"/uploads/default/original/3X/c/b/2.jpeg\");\n-\n-  lookup = lookupCachedUploadUrl(\"upload://c.jpeg\");\n-  assert.notOk(lookup);\n-});"
    },
    {
      "sha": "ae0434cd0283491567505ab0c0559ad1e17d5ee8",
      "filename": "test/javascripts/lib/upload-short-url-test.js.es6",
      "status": "added",
      "additions": 81,
      "deletions": 0,
      "changes": 81,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/test/javascripts/lib/upload-short-url-test.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/test/javascripts/lib/upload-short-url-test.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/lib/upload-short-url-test.js.es6?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -0,0 +1,81 @@\n+import {\n+  lookupCachedUploadUrl,\n+  resolveAllShortUrls,\n+  resetCache\n+} from \"pretty-text/upload-short-url\";\n+import { ajax } from \"discourse/lib/ajax\";\n+\n+QUnit.module(\"lib:pretty-text/upload-short-url\", {\n+  beforeEach() {\n+    const response = object => {\n+      return [200, { \"Content-Type\": \"application/json\" }, object];\n+    };\n+\n+    const imageSrcs = [\n+      {\n+        short_url: \"upload://a.jpeg\",\n+        url: \"/uploads/default/original/3X/c/b/1.jpeg\",\n+        short_path: \"/uploads/short-url/a.jpeg\"\n+      },\n+      {\n+        short_url: \"upload://b.jpeg\",\n+        url: \"/uploads/default/original/3X/c/b/2.jpeg\",\n+        short_path: \"/uploads/short-url/b.jpeg\"\n+      }\n+    ];\n+\n+    const attachmentSrcs = [\n+      {\n+        short_url: \"upload://c.pdf\",\n+        url: \"/uploads/default/original/3X/c/b/3.pdf\",\n+        short_path: \"/uploads/short-url/c.pdf\"\n+      }\n+    ];\n+\n+    // prettier-ignore\n+    server.post(\"/uploads/lookup-urls\", () => { //eslint-disable-line\n+      return response(imageSrcs.concat(attachmentSrcs));\n+    });\n+\n+    fixture().html(\n+      imageSrcs.map(src => `<img data-orig-src=\"${src.url}\">`).join(\"\") +\n+        attachmentSrcs.map(src => `<a data-orig-href=\"${src.url}\">`).join(\"\")\n+    );\n+  },\n+\n+  afterEach() {\n+    resetCache();\n+  }\n+});\n+\n+QUnit.test(\"resolveAllShortUrls\", async assert => {\n+  let lookup;\n+\n+  lookup = lookupCachedUploadUrl(\"upload://a.jpeg\");\n+  assert.deepEqual(lookup, {});\n+\n+  await resolveAllShortUrls(ajax);\n+\n+  lookup = lookupCachedUploadUrl(\"upload://a.jpeg\");\n+\n+  assert.deepEqual(lookup, {\n+    url: \"/uploads/default/original/3X/c/b/1.jpeg\",\n+    short_path: \"/uploads/short-url/a.jpeg\"\n+  });\n+\n+  lookup = lookupCachedUploadUrl(\"upload://b.jpeg\");\n+\n+  assert.deepEqual(lookup, {\n+    url: \"/uploads/default/original/3X/c/b/2.jpeg\",\n+    short_path: \"/uploads/short-url/b.jpeg\"\n+  });\n+\n+  lookup = lookupCachedUploadUrl(\"upload://c.jpeg\");\n+  assert.deepEqual(lookup, {});\n+\n+  lookup = lookupCachedUploadUrl(\"upload://c.pdf\");\n+  assert.deepEqual(lookup, {\n+    url: \"/uploads/default/original/3X/c/b/3.pdf\",\n+    short_path: \"/uploads/short-url/c.pdf\"\n+  });\n+});"
    },
    {
      "sha": "f01b0c72e736279e72a4a096ba82f45a82fbe991",
      "filename": "test/javascripts/lib/utilities-test.js.es6",
      "status": "modified",
      "additions": 19,
      "deletions": 11,
      "changes": 30,
      "blob_url": "https://github.com/discourse/discourse/blob/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/test/javascripts/lib/utilities-test.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9/test/javascripts/lib/utilities-test.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/lib/utilities-test.js.es6?ref=b1d3c678ca39cf7f09ac3eb257c7153d4863a2a9",
      "patch": "@@ -165,14 +165,19 @@ QUnit.test(\"allows valid uploads to go through\", assert => {\n   assert.not(bootbox.alert.calledOnce);\n });\n \n-var testUploadMarkdown = function(filename) {\n-  return getUploadMarkdown({\n-    original_filename: filename,\n-    filesize: 42,\n-    thumbnail_width: 100,\n-    thumbnail_height: 200,\n-    url: \"/uploads/123/abcdef.ext\"\n-  });\n+var testUploadMarkdown = function(filename, opts = {}) {\n+  return getUploadMarkdown(\n+    Object.assign(\n+      {\n+        original_filename: filename,\n+        filesize: 42,\n+        thumbnail_width: 100,\n+        thumbnail_height: 200,\n+        url: \"/uploads/123/abcdef.ext\"\n+      },\n+      opts\n+    )\n+  );\n };\n \n QUnit.test(\"getUploadMarkdown\", assert => {\n@@ -184,9 +189,12 @@ QUnit.test(\"getUploadMarkdown\", assert => {\n     testUploadMarkdown(\"[foo|bar].png\"),\n     \"![%5Bfoo%7Cbar%5D|100x200](/uploads/123/abcdef.ext)\"\n   );\n-  assert.ok(\n-    testUploadMarkdown(\"important.txt\") ===\n-      '<a class=\"attachment\" href=\"/uploads/123/abcdef.ext\">important.txt</a> (42 Bytes)\\n'\n+\n+  const short_url = \"uploads://asdaasd.ext\";\n+\n+  assert.equal(\n+    testUploadMarkdown(\"important.txt\", { short_url }),\n+    `[important.txt (42 Bytes)|attachment](${short_url})`\n   );\n });\n "
    }
  ]
}
