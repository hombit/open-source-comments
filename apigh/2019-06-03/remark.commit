{
  "sha": "ca083f451ee11042548fc779c6d31be5a408ecd2",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmNhMDgzZjQ1MWVlMTEwNDI1NDhmYzc3OWM2ZDMxYmU1YTQwOGVjZDI=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-06-03T16:34:00Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-06-03T16:34:00Z"
    },
    "message": "Info stream (#336)\n\n* add /stream/info as a cheap way to subscribe to comment updates #253\r\n\r\n* add check for lastTS change to allow proper info streams in no-cache mode\r\n\r\n* check write error in info stream and terminate\r\n\r\n* flaky info stream test\r\n\r\n* add stream info to readme\r\n\r\n* separate timeout middleware foe each route's group\r\n\r\n* debug info on stream close\r\n\r\n* fix test for streams\r\n\r\n* stream timeout on inactivity only\r\n\r\n* throttle streams to 500\r\n\r\n* restore common throttle",
    "tree": {
      "sha": "a093e7b24b20d4748cc049a070758d00383f9915",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/a093e7b24b20d4748cc049a070758d00383f9915"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/ca083f451ee11042548fc779c6d31be5a408ecd2",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc9Uv4CRBK7hj4Ov3rIwAAdHIIAJij37iigycZSK8RCgf9VX8g\nU7+0ceTSZLMaSt4DewvNvDcH2ZGu+JkExgOsAnX62UXfz+OWwojZ3K5Gmy85qp7h\nL/C8dief5rZJNqeaAeoANb5dRejTzRzC0q1eCR7O2tcGuVL3TJh+dbBeDytCVG0r\nEb5M1SB9aMnfIJxG/MEc5AKhdp9SpODqgQA+kBaWi13XM9Ees0Ra4auQBPAEv0Er\nva/WY4DuS/pzS9y1r5nCu43eIB0L8vOygdpFiCuMA3hVhfTIdzSvNLFkUXoMPd9T\nlELyjI0g6RKZoeCrc+w/eKx5DB5cpQ7JXgKuSD3YZBrFgq8I9A6hAtubpMAuFY8=\n=ocZ7\n-----END PGP SIGNATURE-----\n",
      "payload": "tree a093e7b24b20d4748cc049a070758d00383f9915\nparent bccf716a8dd039c0eb23e2de6c747cfe269d97bc\nauthor Umputun <umputun@gmail.com> 1559579640 -0500\ncommitter GitHub <noreply@github.com> 1559579640 -0500\n\nInfo stream (#336)\n\n* add /stream/info as a cheap way to subscribe to comment updates #253\r\n\r\n* add check for lastTS change to allow proper info streams in no-cache mode\r\n\r\n* check write error in info stream and terminate\r\n\r\n* flaky info stream test\r\n\r\n* add stream info to readme\r\n\r\n* separate timeout middleware foe each route's group\r\n\r\n* debug info on stream close\r\n\r\n* fix test for streams\r\n\r\n* stream timeout on inactivity only\r\n\r\n* throttle streams to 500\r\n\r\n* restore common throttle\r\n"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/ca083f451ee11042548fc779c6d31be5a408ecd2",
  "html_url": "https://github.com/umputun/remark/commit/ca083f451ee11042548fc779c6d31be5a408ecd2",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/ca083f451ee11042548fc779c6d31be5a408ecd2/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bccf716a8dd039c0eb23e2de6c747cfe269d97bc",
      "url": "https://api.github.com/repos/umputun/remark/commits/bccf716a8dd039c0eb23e2de6c747cfe269d97bc",
      "html_url": "https://github.com/umputun/remark/commit/bccf716a8dd039c0eb23e2de6c747cfe269d97bc"
    }
  ],
  "stats": {
    "total": 215,
    "additions": 209,
    "deletions": 6
  },
  "files": [
    {
      "sha": "19b8b937c34f9312def1cf7979969ad4e7649111",
      "filename": "README.md",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/ca083f451ee11042548fc779c6d31be5a408ecd2/README.md",
      "raw_url": "https://github.com/umputun/remark/raw/ca083f451ee11042548fc779c6d31be5a408ecd2/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/README.md?ref=ca083f451ee11042548fc779c6d31be5a408ecd2",
      "patch": "@@ -624,7 +624,8 @@ Sort can be `time`, `active` or `score`. Supported sort order with prefix -/+, i\n   }\n   ```\n \n-* `GET /api/v1/info?site=site-idd&url=post-ur` - returns `PostInfo` for site and url\n+* `GET /api/v1/info?site=site-idd&url=post-url` - returns `PostInfo` for site and url\n+* `GET /api/v1/stream/info?site=site-idd&url=post-url` - returns stream with `PostInfo` records (\"\\n\" separated) for site and url`\n \n ### RSS feeds\n "
    },
    {
      "sha": "7e8ad8709edc972c6f705e76a8c2fa6d7b85bd10",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/ca083f451ee11042548fc779c6d31be5a408ecd2/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark/raw/ca083f451ee11042548fc779c6d31be5a408ecd2/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/server.go?ref=ca083f451ee11042548fc779c6d31be5a408ecd2",
      "patch": "@@ -304,6 +304,8 @@ func (s *ServerCommand) newServerApp() (*serverApp, error) {\n \t\tSSLConfig:        sslConfig,\n \t\tUpdateLimiter:    s.UpdateLimit,\n \t\tImageService:     imageService,\n+\t\tStreamTimeOut:    time.Minute * 15,\n+\t\tStreamRefresh:    time.Second,\n \t}\n \n \tsrv.ScoreThresholds.Low, srv.ScoreThresholds.Critical = s.LowScore, s.CriticalScore"
    },
    {
      "sha": "85955a4d005c8fcc7c61624d3b01b99fac7b33e9",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 27,
      "deletions": 4,
      "changes": 31,
      "blob_url": "https://github.com/umputun/remark/blob/ca083f451ee11042548fc779c6d31be5a408ecd2/backend/app/rest/api/rest.go",
      "raw_url": "https://github.com/umputun/remark/raw/ca083f451ee11042548fc779c6d31be5a408ecd2/backend/app/rest/api/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest.go?ref=ca083f451ee11042548fc779c6d31be5a408ecd2",
      "patch": "@@ -55,6 +55,9 @@ type Rest struct {\n \t}\n \tUpdateLimiter float64\n \n+\tStreamTimeOut time.Duration\n+\tStreamRefresh time.Duration\n+\n \tSSLConfig   SSLConfig\n \thttpsServer *http.Server\n \thttpServer  *http.Server\n@@ -167,8 +170,7 @@ func (s *Rest) makeHTTPServer(port int, router http.Handler) *http.Server {\n \n func (s *Rest) routes() chi.Router {\n \trouter := chi.NewRouter()\n-\trouter.Use(middleware.RealIP, R.Recoverer(log.Default()))\n-\trouter.Use(middleware.Throttle(1000), middleware.Timeout(60*time.Second))\n+\trouter.Use(middleware.Throttle(1000), middleware.RealIP, R.Recoverer(log.Default()))\n \trouter.Use(R.AppInfo(\"remark42\", \"umputun\", s.Version), R.Ping)\n \n \ts.pubRest, s.privRest, s.adminRest, s.rssRest = s.controllerGroups() // assign controllers for groups\n@@ -189,11 +191,13 @@ func (s *Rest) routes() chi.Router {\n \tauthHandler, avatarHandler := s.Authenticator.Handlers()\n \n \trouter.Group(func(r chi.Router) {\n+\t\tr.Use(middleware.Timeout(5 * time.Second))\n \t\tr.Use(logInfoWithBody, tollbooth_chi.LimitHandler(tollbooth.NewLimiter(5, nil)), middleware.NoCache)\n \t\tr.Mount(\"/auth\", authHandler)\n \t})\n \n \trouter.Group(func(r chi.Router) {\n+\t\tr.Use(middleware.Timeout(5 * time.Second))\n \t\tr.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(100, nil)), middleware.NoCache)\n \t\tr.Mount(\"/avatar\", avatarHandler)\n \t})\n@@ -204,13 +208,15 @@ func (s *Rest) routes() chi.Router {\n \trouter.Route(\"/api/v1\", func(rapi chi.Router) {\n \n \t\trapi.Group(func(rava chi.Router) {\n+\t\t\trava.Use(middleware.Timeout(5 * time.Second))\n \t\t\trava.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(100, nil)))\n \t\t\trava.Use(middleware.NoCache)\n \t\t\trava.Mount(\"/avatar\", avatarHandler)\n \t\t})\n \n \t\t// open routes\n \t\trapi.Group(func(ropen chi.Router) {\n+\t\t\tropen.Use(middleware.Timeout(30 * time.Second))\n \t\t\tropen.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(10, nil)))\n \t\t\tropen.Use(authMiddleware.Trace, middleware.NoCache, logInfoWithBody)\n \t\t\tropen.Get(\"/config\", s.configCtrl)\n@@ -230,17 +236,27 @@ func (s *Rest) routes() chi.Router {\n \t\t\t\trrss.Get(\"/site\", s.rssRest.siteCommentsCtrl)\n \t\t\t\trrss.Get(\"/reply\", s.rssRest.repliesCtrl)\n \t\t\t})\n+\n+\t\t})\n+\n+\t\t// open routes, streams, no send timeout\n+\t\trapi.Route(\"/stream\", func(rstream chi.Router) {\n+\t\t\trstream.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(10, nil)))\n+\t\t\trstream.Use(authMiddleware.Trace, middleware.NoCache, logInfoWithBody)\n+\t\t\trstream.Get(\"/info\", s.pubRest.infoStreamCtrl)\n \t\t})\n \n \t\t// open routes, cached\n \t\trapi.Group(func(ropen chi.Router) {\n+\t\t\tropen.Use(middleware.Timeout(30 * time.Second))\n \t\t\tropen.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(10, nil)))\n \t\t\tropen.Use(authMiddleware.Trace, logInfoWithBody)\n \t\t\tropen.Get(\"/picture/{user}/{id}\", s.pubRest.loadPictureCtrl)\n \t\t})\n \n \t\t// protected routes, require auth\n \t\trapi.Group(func(rauth chi.Router) {\n+\t\t\trauth.Use(middleware.Timeout(30 * time.Second))\n \t\t\trauth.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(10, nil)))\n \t\t\trauth.Use(authMiddleware.Auth, middleware.NoCache, logInfoWithBody)\n \t\t\trauth.Get(\"/user\", s.privRest.userInfoCtrl)\n@@ -249,6 +265,7 @@ func (s *Rest) routes() chi.Router {\n \n \t\t// admin routes, require auth and admin users only\n \t\trapi.Route(\"/admin\", func(radmin chi.Router) {\n+\t\t\tradmin.Use(middleware.Timeout(30 * time.Second))\n \t\t\tradmin.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(10, nil)))\n \t\t\tradmin.Use(authMiddleware.Auth, authMiddleware.AdminOnly)\n \t\t\tradmin.Use(middleware.NoCache, logInfoWithBody)\n@@ -273,6 +290,7 @@ func (s *Rest) routes() chi.Router {\n \n \t\t// protected routes, throttled to 10/s by default, controlled by external UpdateLimiter param\n \t\trapi.Group(func(rauth chi.Router) {\n+\t\t\trauth.Use(middleware.Timeout(10 * time.Second))\n \t\t\trauth.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(s.updateLimiter(), nil)))\n \t\t\trauth.Use(authMiddleware.Auth)\n \t\t\trauth.Use(middleware.NoCache)\n@@ -284,7 +302,9 @@ func (s *Rest) routes() chi.Router {\n \t\t\trauth.With(rejectAnonUser).Post(\"/deleteme\", s.privRest.deleteMeCtrl)\n \t\t})\n \n+\t\t// protected routes, anonymous rejected\n \t\trapi.Group(func(rauth chi.Router) {\n+\t\t\trauth.Use(middleware.Timeout(10 * time.Second))\n \t\t\trauth.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(s.updateLimiter(), nil)))\n \t\t\trauth.Use(authMiddleware.Auth, rejectAnonUser)\n \t\t\trauth.Use(logger.New(logger.Log(log.Default()), logger.Prefix(\"[DEBUG]\"), logger.IPfn(ipFn)).Handler)\n@@ -295,7 +315,8 @@ func (s *Rest) routes() chi.Router {\n \n \t// open routes on root level\n \trouter.Group(func(rroot chi.Router) {\n-\t\ttollbooth_chi.LimitHandler(tollbooth.NewLimiter(50, nil))\n+\t\trroot.Use(middleware.Timeout(10 * time.Second))\n+\t\trroot.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(50, nil)))\n \t\trroot.Get(\"/index.html\", s.pubRest.getStartedCtrl)\n \t\trroot.Get(\"/robots.txt\", s.pubRest.robotsCtrl)\n \t})\n@@ -314,6 +335,8 @@ func (s *Rest) controllerGroups() (public, private, admin, rss) {\n \t\tcommentFormatter: s.CommentFormatter,\n \t\treadOnlyAge:      s.ReadOnlyAge,\n \t\twebRoot:          s.WebRoot,\n+\t\tstreamTimeOut:    s.StreamTimeOut,\n+\t\tstreamRefresh:    s.StreamRefresh,\n \t}\n \n \tprivGrp := private{\n@@ -416,7 +439,7 @@ func addFileServer(r chi.Router, path string, root http.FileSystem) {\n \t}\n \tpath += \"*\"\n \n-\tr.With(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(20, nil))).\n+\tr.With(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(20, nil)), middleware.Timeout(10*time.Second)).\n \t\tGet(path, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n \t\t\t// don't show dirs, just serve files\n \t\t\tif strings.HasSuffix(r.URL.Path, \"/\") && len(r.URL.Path) > 1 && r.URL.Path != (origPath+\"/\") {"
    },
    {
      "sha": "00902cf75da3f43b2ed1427ae4e24f3411bff060",
      "filename": "backend/app/rest/api/rest_public.go",
      "status": "modified",
      "additions": 81,
      "deletions": 1,
      "changes": 82,
      "blob_url": "https://github.com/umputun/remark/blob/ca083f451ee11042548fc779c6d31be5a408ecd2/backend/app/rest/api/rest_public.go",
      "raw_url": "https://github.com/umputun/remark/raw/ca083f451ee11042548fc779c6d31be5a408ecd2/backend/app/rest/api/rest_public.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_public.go?ref=ca083f451ee11042548fc779c6d31be5a408ecd2",
      "patch": "@@ -16,7 +16,6 @@ import (\n \tlog \"github.com/go-pkgz/lgr\"\n \tR \"github.com/go-pkgz/rest\"\n \t\"github.com/go-pkgz/rest/cache\"\n-\n \t\"github.com/umputun/remark/backend/app/rest\"\n \t\"github.com/umputun/remark/backend/app/store\"\n \t\"github.com/umputun/remark/backend/app/store/image\"\n@@ -30,6 +29,8 @@ type public struct {\n \tcommentFormatter *store.CommentFormatter\n \timageService     *image.Service\n \twebRoot          string\n+\tstreamTimeOut    time.Duration\n+\tstreamRefresh    time.Duration\n }\n \n type pubStore interface {\n@@ -146,6 +147,85 @@ func (s *public) infoCtrl(w http.ResponseWriter, r *http.Request) {\n \t}\n }\n \n+// GET /stream/info?site=siteID&url=post-url - get info stream about the post\n+func (s *public) infoStreamCtrl(w http.ResponseWriter, r *http.Request) {\n+\tlocator := store.Locator{SiteID: r.URL.Query().Get(\"site\"), URL: r.URL.Query().Get(\"url\")}\n+\tlog.Printf(\"[DEBUG] start stream for %+v, timeout=%v, refresh=%v\", locator, s.streamTimeOut, s.streamRefresh)\n+\n+\tkey := cache.NewKey(locator.SiteID).ID(URLKey(r)).Scopes(locator.SiteID, locator.URL)\n+\tlastTS := time.Time{}\n+\tlastCount := 0\n+\tinfo := func() (data []byte, upd bool, err error) {\n+\t\tdata, err = s.cache.Get(key, func() ([]byte, error) {\n+\t\t\tinfo, e := s.dataService.Info(locator, s.readOnlyAge)\n+\t\t\tif e != nil {\n+\t\t\t\treturn nil, e\n+\t\t\t}\n+\t\t\tif info.LastTS != lastTS || info.Count != lastCount {\n+\t\t\t\tlastTS = info.LastTS\n+\t\t\t\tlastCount = info.Count // removal won't update lastTS\n+\t\t\t\tupd = true             // cache update used as indication of post update. comparing lastTS for no-cache\n+\t\t\t}\n+\t\t\treturn encodeJSONWithHTML(info)\n+\t\t})\n+\t\tif err != nil {\n+\t\t\treturn data, false, err\n+\t\t}\n+\n+\t\treturn data, upd, nil\n+\t}\n+\n+\t// populate updates to chan, break on remote close\n+\tupdCh := func() <-chan []byte {\n+\t\tch := make(chan []byte)\n+\t\tgo func() {\n+\t\t\ttick := time.NewTicker(s.streamRefresh)\n+\t\t\tdefer func() {\n+\t\t\t\tclose(ch)\n+\t\t\t\ttick.Stop()\n+\t\t\t}()\n+\t\t\tfor {\n+\t\t\t\tselect {\n+\t\t\t\tcase <-r.Context().Done(): // request closed by remote client\n+\t\t\t\t\tlog.Printf(\"[DEBUG] info stream closed by remote client, %v\", r.Context().Err())\n+\t\t\t\t\treturn\n+\t\t\t\tcase <-tick.C:\n+\t\t\t\t\tresp, upd, err := info()\n+\t\t\t\t\tif err != nil {\n+\t\t\t\t\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't get post info\", rest.ErrPostNotFound)\n+\t\t\t\t\t\treturn\n+\t\t\t\t\t}\n+\t\t\t\t\tif upd {\n+\t\t\t\t\t\tch <- resp\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}()\n+\t\treturn ch\n+\t}()\n+\n+\tfor {\n+\t\tselect {\n+\t\tcase <-r.Context().Done(): // request closed by remote client\n+\t\t\treturn\n+\t\tcase <-time.After(s.streamTimeOut): // request closed by timeout\n+\t\t\tlog.Printf(\"[DEBUG] info stream closed due to timeout\")\n+\t\t\treturn\n+\t\tcase resp, ok := <-updCh: // new update\n+\t\t\tif !ok { // closed\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tif _, e := w.Write(resp); e != nil {\n+\t\t\t\tlog.Printf(\"[WARN] failed to send stream, %v\", e)\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tif fw, ok := w.(http.Flusher); ok {\n+\t\t\t\tfw.Flush()\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n // GET /last/{limit}?site=siteID&since=unix_ts_msec - last comments for the siteID, across all posts, sorted by time, optionally\n // limited with \"since\" param\n func (s *public) lastCommentsCtrl(w http.ResponseWriter, r *http.Request) {"
    },
    {
      "sha": "0e3f00134a677edeb6e6318ed5da5dc36b580c17",
      "filename": "backend/app/rest/api/rest_public_test.go",
      "status": "modified",
      "additions": 97,
      "deletions": 0,
      "changes": 97,
      "blob_url": "https://github.com/umputun/remark/blob/ca083f451ee11042548fc779c6d31be5a408ecd2/backend/app/rest/api/rest_public_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/ca083f451ee11042548fc779c6d31be5a408ecd2/backend/app/rest/api/rest_public_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_public_test.go?ref=ca083f451ee11042548fc779c6d31be5a408ecd2",
      "patch": "@@ -1,11 +1,13 @@\n package api\n \n import (\n+\t\"context\"\n \t\"encoding/json\"\n \t\"fmt\"\n \t\"io/ioutil\"\n \t\"net/http\"\n \t\"strings\"\n+\t\"sync\"\n \t\"testing\"\n \t\"time\"\n \n@@ -524,6 +526,92 @@ func TestRest_Info(t *testing.T) {\n \tassert.Equal(t, 400, code)\n }\n \n+func TestRest_InfoStream(t *testing.T) {\n+\tts, srv, teardown := startupT(t)\n+\tsrv.pubRest.readOnlyAge = 10000000 // make sure we don't hit read-only\n+\tsrv.pubRest.streamRefresh = 1 * time.Millisecond\n+\tsrv.pubRest.streamTimeOut = 300 * time.Millisecond\n+\n+\tpostComment(t, ts.URL)\n+\n+\tdefer teardown()\n+\twg := sync.WaitGroup{}\n+\twg.Add(1)\n+\tgo func() {\n+\t\tdefer wg.Done()\n+\t\tfor i := 1; i < 10; i++ {\n+\t\t\ttime.Sleep(10 * time.Millisecond)\n+\t\t\tpostComment(t, ts.URL)\n+\t\t}\n+\t}()\n+\n+\tbody, code := get(t, ts.URL+\"/api/v1/stream/info?site=radio-t&url=https://radio-t.com/blah1\")\n+\tassert.Equal(t, 200, code)\n+\twg.Wait()\n+\n+\trecs := strings.Split(strings.TrimSuffix(string(body), \"\\n\"), \"\\n\")\n+\trequire.Equal(t, 10, len(recs), \"10 records\")\n+\tassert.True(t, strings.Contains(recs[0], `\"count\":1`), recs[0])\n+\tassert.True(t, strings.Contains(recs[9], `\"count\":10`), recs[9])\n+}\n+\n+func TestRest_InfoStreamTimeout(t *testing.T) {\n+\tts, srv, teardown := startupT(t)\n+\tdefer teardown()\n+\tsrv.pubRest.readOnlyAge = 10000000 // make sure we don't hit read-only\n+\tsrv.pubRest.streamRefresh = 10 * time.Millisecond\n+\tsrv.pubRest.streamTimeOut = 450 * time.Millisecond\n+\n+\tpostComment(t, ts.URL)\n+\n+\tst := time.Now()\n+\tbody, code := get(t, ts.URL+\"/api/v1/stream/info?site=radio-t&url=https://radio-t.com/blah1\")\n+\tassert.Equal(t, 200, code)\n+\tassert.True(t, time.Since(st) > time.Millisecond*450 && time.Since(st) < time.Millisecond*500, time.Since(st))\n+\trecs := strings.Split(strings.TrimSuffix(string(body), \"\\n\"), \"\\n\")\n+\trequire.True(t, len(recs) < 10, \"not all for 10 streamed, only %d\", len(recs))\n+}\n+\n+func TestRest_InfoStreamCancel(t *testing.T) {\n+\tts, srv, teardown := startupT(t)\n+\tsrv.pubRest.readOnlyAge = 10000000 // make sure we don't hit read-only\n+\tsrv.pubRest.streamRefresh = 10 * time.Millisecond\n+\tsrv.pubRest.streamTimeOut = 500 * time.Millisecond\n+\n+\tpostComment(t, ts.URL)\n+\n+\tdefer teardown()\n+\twg := sync.WaitGroup{}\n+\twg.Add(1)\n+\tgo func() {\n+\t\tdefer wg.Done()\n+\t\tfor i := 1; i < 10; i++ {\n+\t\t\ttime.Sleep(100 * time.Millisecond)\n+\t\t\tpostComment(t, ts.URL)\n+\t\t}\n+\t}()\n+\n+\tclient := http.Client{}\n+\treq, err := http.NewRequest(\"GET\", ts.URL+\"/api/v1/stream/info?site=radio-t&url=https://radio-t.com/blah1\", nil)\n+\trequire.Nil(t, err)\n+\tctx, cancel := context.WithTimeout(context.Background(), 150*time.Millisecond)\n+\tdefer cancel()\n+\treq = req.WithContext(ctx)\n+\tr, err := client.Do(req)\n+\trequire.Nil(t, err)\n+\tdefer r.Body.Close()\n+\tbody, err := ioutil.ReadAll(r.Body)\n+\trequire.EqualError(t, err, \"context deadline exceeded\")\n+\tassert.Equal(t, 200, r.StatusCode)\n+\n+\twg.Wait()\n+\n+\trecs := strings.Split(strings.TrimSuffix(string(body), \"\\n\"), \"\\n\")\n+\trequire.Equal(t, 2, len(recs), \"2 records\")\n+\tassert.True(t, strings.Contains(recs[0], `\"count\":1`), recs[0])\n+\tassert.True(t, strings.Contains(recs[1], `\"count\":2`), recs[1])\n+}\n+\n func TestRest_Robots(t *testing.T) {\n \tts, _, teardown := startupT(t)\n \tdefer teardown()\n@@ -534,3 +622,12 @@ func TestRest_Robots(t *testing.T) {\n \t\t\"Allow: /api/v1/last\\nAllow: /api/v1/id\\nAllow: /api/v1/count\\nAllow: /api/v1/counts\\n\"+\n \t\t\"Allow: /api/v1/list\\nAllow: /api/v1/config\\nAllow: /api/v1/img\\nAllow: /api/v1/avatar\\nAllow: /api/v1/picture\\n\", string(body))\n }\n+\n+func postComment(t *testing.T, url string) {\n+\tresp, e := post(t, url+\"/api/v1/comment\",\n+\t\t`{\"text\": \"test 123\", \"locator\":{\"url\": \"https://radio-t.com/blah1\", \"site\": \"radio-t\"}}`)\n+\trequire.Nil(t, e)\n+\tb, e := ioutil.ReadAll(resp.Body)\n+\trequire.Nil(t, e)\n+\trequire.Equal(t, http.StatusCreated, resp.StatusCode, string(b))\n+}"
    }
  ]
}
