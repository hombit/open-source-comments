{
  "sha": "debffa17aa37a77fd0a3f11469d80929642679e1",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6ZGViZmZhMTdhYTM3YTc3ZmQwYTNmMTE0NjlkODA5Mjk2NDI2NzllMQ==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-05-26T10:36:12Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-05-31T04:45:15Z"
    },
    "message": "Code review, add e2e tests, finish things, fix bugs\n\n- Make it possible to change a group's username.\n- Add delete-one's-account e2e test, fix query: don't load deleted pps.\n- Add custom group mentions e2e test.\n- Fix `isGone = false` bug, should be `useRef(me.id)`.\n- E2e test: set conf-not-prefs before emb cmts page exists, + fix bug.",
    "tree": {
      "sha": "5bb7c247ddb6e21517ee4951d1827ae5841b3190",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/5bb7c247ddb6e21517ee4951d1827ae5841b3190"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/debffa17aa37a77fd0a3f11469d80929642679e1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/debffa17aa37a77fd0a3f11469d80929642679e1",
  "html_url": "https://github.com/debiki/talkyard/commit/debffa17aa37a77fd0a3f11469d80929642679e1",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/debffa17aa37a77fd0a3f11469d80929642679e1/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ae386b963aeaf7af931f22a7d0ab9bc777837661",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/ae386b963aeaf7af931f22a7d0ab9bc777837661",
      "html_url": "https://github.com/debiki/talkyard/commit/ae386b963aeaf7af931f22a7d0ab9bc777837661"
    }
  ],
  "stats": {
    "total": 1680,
    "additions": 1274,
    "deletions": 406
  },
  "files": [
    {
      "sha": "6f07b3e250842fd3b94cc265feb1e167a6884277",
      "filename": "app/controllers/ApiV0Controller.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/ApiV0Controller.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/ApiV0Controller.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/ApiV0Controller.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -169,7 +169,7 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext,\n             The email address ${extUser.primaryEmailAddress} of external user '${extUser.externalId}'\n             hasn't been verified.\"\"\")\n \n-        val user = request.dao.readWriteTransaction { tx =>\n+        val (user, isNew) = request.dao.readWriteTransaction { tx =>\n           // Look up by external id. If found, login.\n           // Look up by email. If found, reuse account, set external id, and login.\n           // Else, create new user with specified external id and email.\n@@ -197,7 +197,7 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext,\n             // mod / admin:  UserDao:  editMember\n             // name etc:  UserDao:  saveAboutMemberPrefs\n             // For now, just generate a login secret; don't sync users:\n-            user\n+            (user, false)\n           }) orElse\n               // TODO what about looking up by secondary email addresses, or not?\n               // Don't do that? They aren't supposed to be used for login. And do require\n@@ -231,7 +231,7 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext,\n             val updatedUser = user.copyWithExternalData(extUser)\n             dieIf(updatedUser == user, \"TyE4AKBRE2\")\n             tx.updateUserInclDetails(updatedUser)\n-            updatedUser\n+            (updatedUser, false)\n           }) getOrElse {\n             // Create a new Talkyard user account, for this external user.\n             // (There's no mirror account with a matching external id or email address.)\n@@ -261,10 +261,19 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext,\n                 case Bad(errorMessage) =>\n                   throwUnprocessableEntity(\"TyE4BKR03J\", s\"$errorMessage, please try again.\")\n               }\n-            dao.createUserForExternalSsoUser(userData, request.theBrowserIdData, tx)\n+            val newUser = dao.createUserForExternalSsoUser(userData, request.theBrowserIdData, tx)\n+            (newUser, true)\n           }\n         }\n \n+        if (isNew) {\n+          // COULD make these Dao methods protected/private — then need to move this\n+          // ApiV0Controller code to inside the Dao.\n+          dao.uncacheBuiltInGroups()\n+          // Plus uncache any custom groups, if can sso-login user and auto add to group. [inv2groups]\n+          dao.memCache.fireUserCreated(user.briefUser)\n+        }\n+\n         val secret = nextRandomString()\n         dao.redisCache.saveOneTimeLoginSecret(secret, user.id)\n         OkApiJson(Json.obj("
    },
    {
      "sha": "88924fac2b838992c51672886757c759ee91a3cb",
      "filename": "app/controllers/CustomFormController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/CustomFormController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/CustomFormController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/CustomFormController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -50,7 +50,7 @@ class CustomFormController @Inject()(cc: ControllerComponents, edContext: EdCont\n     val pageMeta = dao.getPageMeta(pageId) getOrElse\n       throwIndistinguishableNotFound(\"EdE2WK0F\")\n \n-    val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n+    val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n \n     // (A bit weird, here we authz with Authz.maySubmitCustomForm(), but later in\n     // PostsDao.insertReply via Authz.mayPostReply() — but works okay.)\n@@ -80,7 +80,7 @@ class CustomFormController @Inject()(cc: ControllerComponents, edContext: EdCont\n \n     // BUG (need not fix now) if there are many sub communities with the same category slug. [4GWRQA28]\n     val categorySlug = (request.body \\ \"categorySlug\").as[String]\n-    val category = request.dao.loadCategoryBySlug(categorySlug).getOrThrowBadArgument(\n+    val category = request.dao.getCategoryBySlug(categorySlug).getOrThrowBadArgument(\n         \"EsE0FYK42\", s\"No category with slug: $categorySlug\")\n \n     val pagePath = request.dao.createPage(pageType, PageStatus.Published, Some(category.id),"
    },
    {
      "sha": "2bfd0dcffdb1dcd3b686e32e1daae9674d5a0a83",
      "filename": "app/controllers/DraftsController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/DraftsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/DraftsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/DraftsController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -131,7 +131,7 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n       val post = anyPost orElse dao.loadPostByUniqueId(  // (7RWBJ3)\n         draftLocator.postId.get) getOrElse throwIndistinguishableNotFound(\"TyE0DK9WRR\")\n       val pageMeta = dao.getPageMeta(post.pageId) getOrElse throwIndistinguishableNotFound(\"TyE2AKBRE5\")\n-      val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n+      val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n \n       if (draft.isReply) {\n         val postType = draft.postType getOrDie \"TyER35SKS02GU\""
    },
    {
      "sha": "1438c617ee01995d4f0d603ff791ab77a754d3e1",
      "filename": "app/controllers/EditController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/EditController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/EditController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/EditController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -132,7 +132,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n     val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdE4JBR01\")\n     val post = dao.loadPost(pageId, postNr) getOrElse throwIndistinguishableNotFound(\"EdE0DK9WY3\")\n-    val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n+    val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n \n     throwNoUnless(Authz.mayEditPost(\n       request.theUserAndLevels, dao.getOnesGroupIds(request.theUser),\n@@ -184,7 +184,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n     val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdEZWBR81\")\n     val post = dao.loadPost(pageId, postNr) getOrElse throwIndistinguishableNotFound(\"EdEBKWRWY9\")\n-    val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n+    val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n \n     throwNoUnless(Authz.mayEditPost(\n       request.theUserAndLevels, dao.getOnesGroupIds(request.theUser),"
    },
    {
      "sha": "0a6308c49891597a899e5a5642b7b32045710fa8",
      "filename": "app/controllers/FlagController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/FlagController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/FlagController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/FlagController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -55,7 +55,7 @@ class FlagController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n     val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdE3FJB8W2\")\n     val post = dao.loadPost(pageId, postNr) getOrElse throwIndistinguishableNotFound(\"EdE5PJB2R8\")\n-    val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n+    val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n \n     throwNoUnless(Authz.mayFlagPost(\n       request.theMember, dao.getOnesGroupIds(request.theUser),"
    },
    {
      "sha": "e2c639c1224841c9fdf062b09194e3b4193c9fe6",
      "filename": "app/controllers/ForumController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/ForumController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/ForumController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/ForumController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -75,7 +75,7 @@ class ForumController @Inject()(cc: ControllerComponents, edContext: EdContext)\n   def listForums: Action[Unit] = GetAction { request =>\n     import request.dao\n     SECURITY // Later, not now: Set permissions on site sections, load only those the requester may see.\n-    val sectionPageIds = dao.loadSectionPageIdsAsSeq()\n+    val sectionPageIds = dao.getSectionPageIdsAsSeq()\n     val pageStuffById = dao.getPageStuffById(sectionPageIds)\n     val forumJsObjs = for {\n       pageId <- sectionPageIds\n@@ -97,7 +97,7 @@ class ForumController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n   def loadCategoryToEdit(categoryId: CategoryId): Action[Unit] = AdminGetAction { request =>\n     import request.dao\n-    val (category, isDefault) = dao.loadTheCategory(categoryId)\n+    val (category, isDefault) = dao.getTheCategoryAndIsDefault(categoryId)\n     val catJson = categoryToJson(category, isDefault, recentTopics = Nil, pageStuffById = Map.empty)\n     val (allPerms, groups) = dao.readOnlyTransaction { tx =>\n       (tx.loadPermsOnPages(), tx.loadAllGroupsAsSeq())\n@@ -265,7 +265,7 @@ class ForumController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n     // If category deleted, load deleted topics too. Otherwise rather confusing, if one\n     // navigates to the deleted category, and sees its name, but no topics.\n-    val showDeletedTopicsAnyway = dao.loadCategory(categoryId) exists { case (category, _) =>\n+    val showDeletedTopicsAnyway = dao.getCategory(categoryId) exists { category =>\n       category.isDeleted\n     }\n     if (showDeletedTopicsAnyway) {"
    },
    {
      "sha": "9433c6f4ae1959a42d9c8121a181c27b967062f5",
      "filename": "app/controllers/PageController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/PageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/PageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/PageController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -75,7 +75,7 @@ class PageController @Inject()(cc: ControllerComponents, edContext: EdContext)\n       throwForbidden(\"DwE8GKE4\", \"No category specified\")\n     }\n \n-    val categoriesRootLast = dao.loadAncestorCategoriesRootLast(anyCategoryId)\n+    val categoriesRootLast = dao.getAncestorCategoriesRootLast(anyCategoryId)\n \n     throwNoUnless(Authz.mayCreatePage(\n       request.theUserAndLevels, dao.getOnesGroupIds(request.theUser),"
    },
    {
      "sha": "76f6b85c633f4e622396cb4b4b8b817a5ac7a8b8",
      "filename": "app/controllers/PageTitleSettingsController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/PageTitleSettingsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/PageTitleSettingsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/PageTitleSettingsController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -160,7 +160,7 @@ class PageTitleSettingsController @Inject()(cc: ControllerComponents, edContext:\n     }}\n \n     // Load old section page id before changing it.\n-    val oldSectionPageId: Option[PageId] = oldMeta.categoryId map request.dao.loadTheSectionPageId\n+    val oldSectionPageId: Option[PageId] = oldMeta.categoryId map request.dao.getTheSectionPageId\n \n     // Update page settings.\n     var newMeta = oldMeta\n@@ -220,7 +220,7 @@ class PageTitleSettingsController @Inject()(cc: ControllerComponents, edContext:\n     else {\n       // Refresh cache, plus any forum page if this page is a forum topic.\n       // (Forum pages cache category JSON and a latest topics list, includes titles.)\n-      val newSectionPageId = newMeta.categoryId map request.dao.loadTheSectionPageId\n+      val newSectionPageId = newMeta.categoryId map request.dao.getTheSectionPageId\n       val idsToRefresh = (pageId :: oldSectionPageId.toList ::: newSectionPageId.toList).distinct\n       idsToRefresh.foreach(request.dao.refreshPageInMemCache)\n     }"
    },
    {
      "sha": "612719e294110da028b7d452d9f85e7a46b0d590",
      "filename": "app/controllers/ReplyController.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/ReplyController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/ReplyController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/ReplyController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -66,7 +66,7 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     val replyToPosts = dao.loadPostsAllOrError(pageId, replyToPostNrs) getOrIfBad { missingPostNr =>\n       throwNotFound(s\"Post nr $missingPostNr not found\", \"EdEW3HPY08\")\n     }\n-    val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n+    val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n \n     throwNoUnless(Authz.mayPostReply(\n       request.theUserAndLevels, dao.getOnesGroupIds(request.theUser),\n@@ -107,7 +107,7 @@ class ReplyController @Inject()(cc: ControllerComponents, edContext: EdContext)\n       throwIndistinguishableNotFound(\"EdE7JS2\")\n     }\n     val replyToPosts = Nil  // currently cannot reply to specific posts, in the chat [7YKDW3]\n-    val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n+    val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n \n     throwNoUnless(Authz.mayPostReply(\n       request.theUserAndLevels, dao.getOnesGroupIds(request.theMember),\n@@ -179,7 +179,7 @@ object EmbeddedCommentsPageCreator {\n       if (id != NoCategoryId) id\n       else dao.getDefaultCategoryId()\n     }\n-    val categoriesRootLast = dao.loadAncestorCategoriesRootLast(categoryId)\n+    val categoriesRootLast = dao.getAncestorCategoriesRootLast(categoryId)\n     val pageRole = PageType.EmbeddedComments\n \n     context.security.throwNoUnless(Authz.mayCreatePage("
    },
    {
      "sha": "028188a3515ec731a94eac07f791165fca1e6f45",
      "filename": "app/controllers/SearchController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/SearchController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/SearchController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/SearchController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -53,7 +53,7 @@ class SearchController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     val rawQuery = (request.body \\ \"rawQuery\").as[String]\n     val searchQuery = parseRawSearchQueryString(rawQuery, categorySlug => {\n       // BUG (need not fix now): What if many sub communities, with the same cat slug? [4GWRQA28]\n-      request.dao.loadCategoryBySlug(categorySlug).map(_.id)\n+      request.dao.getCategoryBySlug(categorySlug).map(_.id)\n     })\n     request.dao.fullTextSearch(searchQuery, None, request.user) map {\n       searchResults: Seq[PageAndHits] =>"
    },
    {
      "sha": "a04503fa70260af065a57679be1586400a44bc57",
      "filename": "app/controllers/UserController.scala",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/UserController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/UserController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/UserController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -1138,7 +1138,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     // (Sometimes people subscribe to comments for embedded blog comments discussions,\n     // before any comments or Like votes have been submitted — then this is where the\n     // emb page needs to get lazy-created, so the notf prefs has a page id to refer to.)\n-    val (anyPageIdx, isNewEmbCmtsPage) =\n+    val (anyPageId: Option[PageId], isNewEmbCmtsPage: Boolean) =\n       if (anyPageIdMaybeEmptyPage is EmptyPageId) {\n         val (newPageId: PageId, newPagePath) = EmbeddedCommentsPageCreator.getOrCreatePageId(\n           anyPageId = Some(EmptyPageId), anyAltPageId = anyAltPageId,\n@@ -1151,7 +1151,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n     val newPref = Try(\n       PageNotfPref(\n-        memberId, pageId = anyPageIdx, wholeSite = wholeSite.getOrElse(false),\n+        memberId, pageId = anyPageId, wholeSite = wholeSite.getOrElse(false),\n         pagesInCategoryId = pagesInCategoryId,\n         notfLevel = newNotfLevel.getOrElse(NotfLevel.DoesNotMatterHere)))\n           .getOrIfFailure(ex => throwBadRequest(\"TyE2ABKRP0\", ex.getMessage))\n@@ -1164,12 +1164,12 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     }\n \n     OkSafeJson(Json.obj(\n-      \"newlyCreatedPageId\" -> (if (isNewEmbCmtsPage) JsString(anyPageIdx.get) else JsNull)))\n+      \"newlyCreatedPageId\" -> (if (isNewEmbCmtsPage) JsString(anyPageId.get) else JsNull)))\n   }\n \n \n   def loadGroups: Action[Unit] = GetActionRateLimited(RateLimits.ReadsFromDb) { request =>\n-    val groups = request.dao.getGroupsAndStats(forWho = request.whoOrUnknown)\n+    val groups = request.dao.getGroupsAndStatsReqrMaySee(request.requesterOrUnknown)\n     OkSafeJson(JsArray(groups map JsGroupAndStats))\n   }\n \n@@ -1180,7 +1180,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n     throwForbiddenIf(username.isEmpty, \"TyE205MA6\", \"No username specified\")\n \n-    request.dao.createGroup(username, fullName) match {\n+    request.dao.createGroup(username, fullName = fullName, request.reqrId) match {\n       case Bad(errorMessage) =>\n         throwForbidden(\"TyE603MRST\", errorMessage)\n       case Good(group) =>\n@@ -1191,14 +1191,14 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n   def deleteGroup: Action[JsValue] = AdminPostJsonAction(maxBytes = 2000) { request =>\n     val groupIdToDelete: UserId = (request.body \\ \"groupIdToDelete\").as[UserId]\n-    request.dao.deleteGroup(groupIdToDelete)\n+    request.dao.deleteGroup(groupIdToDelete, request.reqrId)\n     Ok\n   }\n \n \n   def listGroupMembers(groupId: UserId): Action[Unit] =\n         GetActionRateLimited(RateLimits.ReadsFromDb) { request =>\n-    val maybeMembers = request.dao.listGroupMembers(groupId, request.requesterOrUnknown)\n+    val maybeMembers = request.dao.listGroupMembersIfReqrMaySee(groupId, request.requesterOrUnknown)\n     val membersJson: JsValue = maybeMembers.map(ms => JsArray(ms map JsUser)).getOrElse(JsFalse)\n     OkSafeJson(membersJson)\n   }\n@@ -1207,15 +1207,15 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n   def addGroupMembers: Action[JsValue] = StaffPostJsonAction(maxBytes = 5000) { request =>\n     val groupId = (request.body \\ \"groupId\").as[UserId]\n     val memberIds = (request.body \\ \"memberIds\").as[Set[UserId]]\n-    request.dao.addGroupMembers(groupId, memberIds)\n+    request.dao.addGroupMembers(groupId, memberIds, request.reqrId)\n     Ok\n   }\n \n \n   def removeGroupMembers: Action[JsValue] = StaffPostJsonAction(maxBytes = 5000) { request =>\n     val groupId = (request.body \\ \"groupId\").as[UserId]\n     val memberIds = (request.body \\ \"memberIds\").as[Set[UserId]]\n-    request.dao.removeGroupMembers(groupId, memberIds)\n+    request.dao.removeGroupMembers(groupId, memberIds, request.reqrId)\n     Ok\n   }\n \n@@ -1245,7 +1245,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     import request.dao\n \n     val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdE4Z0B8P5\")\n-    val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n+    val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n \n     SECURITY // Later: shouldn't list authors of hidden / deleted / whisper posts.\n     throwNoUnless(Authz.maySeePage(\n@@ -1335,7 +1335,7 @@ class UserController @Inject()(cc: ControllerComponents, edContext: EdContext)\n       categoriesOnlyRequesterMaySee: Seq[Category]) =\n           categoriesRequesterMaySee.partition(c => categoryIdsMemberMaySee.contains(c.id))\n \n-    val groups = dao.getGroups(requester)\n+    val groups = dao.getGroupsReqrMaySee(requester)\n \n     OkSafeJson(Json.obj(  // OwnPageNotfPrefs\n       \"id\" -> memberId,"
    },
    {
      "sha": "1a59a1d0e60c588c60d662e3564c53a57b2faf3d",
      "filename": "app/controllers/VoteController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/VoteController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/controllers/VoteController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/VoteController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -116,7 +116,7 @@ class VoteController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     import request.{dao, requester}\n \n     val pageMeta: PageMeta = dao.getThePageMetaForPostId(postId)\n-    val categoriesRootLast = dao.loadAncestorCategoriesRootLast(pageMeta.categoryId)\n+    val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n \n     throwNoUnless(Authz.maySeePage(\n       pageMeta, requester,"
    },
    {
      "sha": "ae8f208e94d61fda9f89fcefcc03f8dcaa96e623",
      "filename": "app/debiki/RateLimits.scala",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/RateLimits.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/RateLimits.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/RateLimits.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -20,6 +20,34 @@ package debiki\n import RateLimits._\n \n \n+/** There should be a Max-X-per-site restriction for each X that can be saved in\n+  * the database — or X should count against the allowed disc quota.\n+  * Otherwise it'd be possible to out-of-disk DoS attack the database,\n+  * or DoS attack the CPUs by giving O(n^2) algorithms too many items.\n+  *\n+  * In the distant future, these limits will be configurable in the Play config\n+  * file — that'll be the default limits, for all sites on this server.\n+  * And via an admin web interface — that'll be dynamic per site limits.\n+  *\n+  * Maybe should be two default limits? One for blog comments sites —\n+  * they shouldn't need any custom categories or permissions. And another for\n+  * forums.\n+  */\n+object LengthLimits {\n+\n+  // Lowercase — late on, won't be a constant, but loaded from the database.\n+  val maxPermsPerSite = 200\n+\n+  val maxCustomGroups = 21\n+  val maxGroupsMemberCanJoin = 25\n+  val maxMembersPerCustomGroup = 1000\n+\n+  // There are many other limits but they're hardcoded here and there ...\n+  // COULD move them all to here. A nice first step, to later on making it\n+  // possible to bump the restrictions, per site.\n+}\n+\n+\n \n abstract class RateLimits {\n   def key: String"
    },
    {
      "sha": "48d43e37f0b0f101ecc961430f3b086409b955bb",
      "filename": "app/debiki/ReactJson.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/ReactJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/ReactJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/ReactJson.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -429,7 +429,7 @@ class JsonMaker(dao: SiteDao) {\n     val categoryId = pageMeta.categoryId getOrElse {\n       return (None, Nil)\n     }\n-    val categoriesRootFirst = dao.loadAncestorCategoriesRootLast(categoryId).reverse\n+    val categoriesRootFirst = dao.getAncestorCategoriesRootLast(categoryId).reverse\n     if (categoriesRootFirst.isEmpty) {\n       return (None, Nil)\n     }\n@@ -452,7 +452,7 @@ class JsonMaker(dao: SiteDao) {\n     if (settings.userMustBeAuthenticated)\n       return JsArray() */\n \n-    val sectionPageIds = dao.loadSectionPageIdsAsSeq()\n+    val sectionPageIds = dao.getSectionPageIdsAsSeq()\n     val jsonObjs = for {\n       pageId <- sectionPageIds\n       // (We're not in a transaction, the page might be gone [transaction])"
    },
    {
      "sha": "f729e1c0352128ea49c397c539f6e4fe56c8adbf",
      "filename": "app/debiki/dao/CategoriesDao.scala",
      "status": "modified",
      "additions": 58,
      "deletions": 55,
      "changes": 113,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/dao/CategoriesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/dao/CategoriesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/CategoriesDao.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -113,20 +113,14 @@ trait CategoriesDao {\n     */\n   def getDefaultCategoryId(): CategoryId = {\n     COULD_OPTIMIZE // remember default category, refresh when saving a root category?\n-    if (rootCategories eq null) {\n-      loadBuildRememberCategoryMaps()\n-      dieIf(rootCategories eq null, \"TyE2PK50\")\n-    }\n+    getAndRememberCategories()\n     dieIf(rootCategories.isEmpty, \"TyE2FWBK5\")\n     rootCategories.head.defaultSubCatId getOrDie \"TyE2KQBP6\"\n   }\n \n \n   def getCategory(categoryId: CategoryId): Option[Category] = {\n-    COULD_OPTIMIZE // cache category, don't forget to clear when editing any About page,\n-                    // or editing any category (then, clear all cats, in case later on will\n-                    // cache parent—>child-cat relationships.\n-    loadCategory(categoryId).map(_._1)\n+    getCategoryAndIsDefault(categoryId).map(_._1)\n   }\n \n \n@@ -136,7 +130,7 @@ trait CategoriesDao {\n   def listMaySeeCategoriesInSection(sectionPageId: PageId, includeDeleted: Boolean,\n         authzCtx: ForumAuthzContext): Option[SectionCategories] = {\n     // A bit dupl code (7UKWTW1)\n-    loadRootCategoryForSectionPageId(sectionPageId) map { rootCategory =>\n+    getRootCategoryForSectionPageId(sectionPageId) map { rootCategory =>\n       val categories = listDescendantMaySeeCategories(rootCategory.id, includeRoot = false,\n         includeDeleted = includeDeleted, includeUnlistTopics = true, authzCtx).sortBy(_.position)\n       SectionCategories(\n@@ -149,13 +143,8 @@ trait CategoriesDao {\n \n   def listMaySeeCategoriesAllSections(includeDeleted: Boolean, authzCtx: ForumAuthzContext)\n         : Seq[SectionCategories] = {\n-    if (rootCategories eq null) {\n-      loadBuildRememberCategoryMaps()\n-      dieIf(rootCategories eq null, \"TyE5PB20A\")\n-    }\n-\n+    getAndRememberCategories()\n     val result = ArrayBuffer[SectionCategories]()\n-\n     for (rootCategory <- rootCategories) {\n       val categories = listDescendantMaySeeCategories(rootCategory.id, includeRoot = false,\n         includeDeleted = includeDeleted, includeUnlistTopics = true, authzCtx).sortBy(_.position)\n@@ -164,7 +153,6 @@ trait CategoriesDao {\n         categories = categories,\n         defaultCategoryId = rootCategory.defaultSubCatId getOrDie \"TyEWKB201\"))\n     }\n-\n     result\n   }\n \n@@ -173,16 +161,12 @@ trait CategoriesDao {\n     */\n   def listMaySeeCategoriesInSameSectionAs(categoryId: CategoryId, authzCtx: ForumAuthzContext)\n         : (Seq[Category], Option[CategoryId]) = {\n-    if (rootCategories eq null) {\n-      loadBuildRememberCategoryMaps()\n-      dieIf(rootCategories eq null, \"EsE4KG0W2\")\n-    }\n-\n+    getAndRememberCategories()\n     if (rootCategories.isEmpty)\n       return (Nil, None)\n \n     // A bit dupl code (7UKWTW1)\n-    val rootCategory = loadRootCategoryForCategoryId(categoryId) getOrDie \"TyEPKDRW0\"\n+    val rootCategory = getRootCategoryForCategoryId(categoryId) getOrDie \"TyEPKDRW0\"\n     val categories = listDescendantMaySeeCategories(rootCategory.id, includeRoot = false,\n       includeDeleted = authzCtx.isStaff, includeUnlistTopics = true, authzCtx).sortBy(_.position)\n     (categories, Some(rootCategory.defaultSubCatId getOrDie \"TyE5JKF2\"))\n@@ -247,7 +231,7 @@ trait CategoriesDao {\n     // For now. COULD do some of filtering in the db query instead, so won't find 0 pages\n     // just because all most-recent-pages are e.g. hidden.\n     val filteredPages = pagesInclForbidden filter { page =>\n-      val categories = loadAncestorCategoriesRootLast(page.categoryId)\n+      val categories = getAncestorCategoriesRootLast(page.categoryId)\n       val may = ed.server.auth.Authz.maySeePage(\n         page.meta,\n         user = authzCtx.requester,\n@@ -298,63 +282,68 @@ trait CategoriesDao {\n   }\n \n \n-  def loadAncestorCategoriesRootLast(anyCategoryId: Option[CategoryId]): immutable.Seq[Category] = {\n+  def getAncestorCategoriesRootLast(anyCategoryId: Option[CategoryId]): Vector[Category] = {\n     val id = anyCategoryId getOrElse {\n-      return Nil\n+      return Vector.empty\n     }\n-    loadAncestorCategoriesRootLast(id)\n+    getAncestorCategoriesRootLast(id)\n   }\n \n \n-  def loadAncestorCategoriesRootLast(categoryId: CategoryId): immutable.Seq[Category] = {\n-    val categoriesById = loadBuildRememberCategoryMaps()._1\n+  def getAncestorCategoriesRootLast(categoryId: CategoryId): Vector[Category] = {\n+    val categoriesById = getAndRememberCategories()._1\n     val categories = ArrayBuffer[Category]()\n     var current = categoriesById.get(categoryId)\n+    var lapNr = 0\n     while (current.isDefined) {\n+      dieIf(lapNr > categoriesById.size,\n+        \"TyECATLOOP\", s\"s$siteId: Category ancestors loop involving category id $categoryId\")\n+      lapNr += 1\n       categories.append(current.get)\n       current = current.get.parentId flatMap categoriesById.get\n     }\n-    categories.to[immutable.Seq]\n+    categories.toVector\n   }\n \n \n   /** Returns (category, is-default).\n     */\n-  def loadCategory(id: CategoryId): Option[(Category, Boolean)] = {\n-    val catsStuff = loadBuildRememberCategoryMaps()\n-    val anyCategory = catsStuff._1.get(id)\n+  def getCategoryAndIsDefault(id: CategoryId): Option[(Category, Boolean)] = {\n+    val catsStuff = getAndRememberCategories()\n+    val catsById = catsStuff._1\n+    val anyCategory = catsById.get(id)\n     anyCategory map { category =>\n-      val rootCategory: Option[Category] = category.parentId.flatMap(catsStuff._1.get)\n+      val rootCategory: Option[Category] = category.parentId.flatMap(catsById.get)\n       (category, rootCategory.flatMap(_.defaultSubCatId) is category.id)\n     }\n   }\n \n \n   // Some time later: Add a site section page id? So will load the correct category, also\n   // if there're many sub communities with the same category slug.\n-  def loadCategoryBySlug(slug: String): Option[Category] = {\n-    val catsStuff = loadBuildRememberCategoryMaps()\n+  def getCategoryBySlug(slug: String): Option[Category] = {\n+    val catsStuff = getAndRememberCategories()\n     catsStuff._1.values.find(_.slug == slug)\n   }\n \n \n-  def loadTheCategory(id: CategoryId): (Category, Boolean) =\n-    loadCategory(id) getOrElse throwNotFound(\"DwE8YUF0\", s\"No category with id $id\")\n+  def getTheCategoryAndIsDefault(id: CategoryId): (Category, Boolean) =\n+    getCategoryAndIsDefault(id) getOrElse throwNotFound(\"DwE8YUF0\", s\"No category with id $id\")\n \n \n-  private def loadRootCategoryForCategoryId(categoryId: CategoryId): Option[Category] =\n-    loadAncestorCategoriesRootLast(categoryId).lastOption\n+  private def getRootCategoryForCategoryId(categoryId: CategoryId): Option[Category] =\n+    getAncestorCategoriesRootLast(categoryId).lastOption\n \n \n-  def loadSectionPageId(categoryId: CategoryId): Option[PageId] =\n-    loadRootCategoryForCategoryId(categoryId).map(_.sectionPageId)\n+  def getSectionPageId(categoryId: CategoryId): Option[PageId] =\n+    getRootCategoryForCategoryId(categoryId).map(_.sectionPageId)\n \n \n-  def loadTheSectionPageId(categoryId: CategoryId): PageId =\n-    loadRootCategoryForCategoryId(categoryId).map(_.sectionPageId) getOrDie \"DwE804K2\"\n+  def getTheSectionPageId(categoryId: CategoryId): PageId =\n+    getRootCategoryForCategoryId(categoryId).map(_.sectionPageId) getOrDie \"DwE804K2\"\n \n-  def loadSectionPageIdsAsSeq(): Seq[PageId] = {\n-    loadBuildRememberCategoryMaps()\n+  def getSectionPageIdsAsSeq(): Seq[PageId] = {\n+    getAndRememberCategories()\n     categoriesById.values.filter(_.parentId.isEmpty).map(_.sectionPageId).toSeq\n   }\n \n@@ -364,8 +353,8 @@ trait CategoriesDao {\n   }\n \n \n-  private def loadRootCategoryForSectionPageId(sectionPageId: PageId): Option[Category] = {\n-    val categoriesById = loadBuildRememberCategoryMaps()._1\n+  private def getRootCategoryForSectionPageId(sectionPageId: PageId): Option[Category] = {\n+    val categoriesById = getAndRememberCategories()._1\n     for ((_, category) <- categoriesById) {\n       if (category.sectionPageId == sectionPageId && category.parentId.isEmpty)\n         return Some(category)\n@@ -383,12 +372,12 @@ trait CategoriesDao {\n       return\n     }\n \n-    val (categoriesById, categoriesByParentId) = loadBuildRememberCategoryMaps()\n+    val (categoriesById, categoriesByParentId) = getAndRememberCategories()\n     val startCategory = categoriesById.getOrElse(rootCategoryId, {\n       return\n     })\n \n-    val categories = loadAncestorCategoriesRootLast(rootCategoryId)\n+    val categories = getAncestorCategoriesRootLast(rootCategoryId)\n \n     // (Skip the root category in this check; cannot set permissions on it. [0YWKG21])\n     if (!categories.head.isRoot) {\n@@ -418,17 +407,22 @@ trait CategoriesDao {\n   }\n \n \n-  private def loadBuildRememberCategoryMaps()   // RENAME to getAndRememberCategories?\n+  /** Returns (categoriesById, childCatsByParentId).\n+    */\n+  private def getAndRememberCategories()\n         : (Map[CategoryId, Category], Map[CategoryId, Vector[Category]]) = {\n     // We already remember?\n-    if (categoriesById ne null)\n+    if (categoriesById ne null) {\n+      dieIf(rootCategories eq null, \"TyE046DMR2\")\n+      dieIf(categoriesByParentId eq null, \"TyE046DMR3\")\n       return (categoriesById, categoriesByParentId)\n+    }\n \n-    // Didn't remember. Load.\n+    // Didn't remember. Get from cache.\n     val result = memCache.lookup(\n       allCategoriesKey,\n       orCacheAndReturn = Some({\n-        loadBuildRememberCategoryMaps_impl()\n+        loadCategories()\n       })).get\n \n     // Remember.\n@@ -439,7 +433,7 @@ trait CategoriesDao {\n   }\n \n \n-  private def loadBuildRememberCategoryMaps_impl()\n+  private def loadCategories()\n         : (Map[CategoryId, Category], Map[CategoryId, Vector[Category]]) = {\n     val catsById: Map[CategoryId, Category] = readOnlyTransaction(tx => {\n       tx.loadCategoryMap()\n@@ -457,7 +451,7 @@ trait CategoriesDao {\n   }\n \n \n-  private def uncacheAllCategories() {\n+  def uncacheAllCategories() {\n     memCache.remove(allCategoriesKey)\n   }\n \n@@ -614,6 +608,7 @@ trait CategoriesDao {\n         permissions: immutable.Seq[PermsOnPages])(tx: SiteTransaction)\n         : (immutable.Seq[PermsOnPages], Boolean) = {\n     dieIf(permissions.exists(_.onCategoryId.isNot(categoryId)), \"EdE2FK0YU5\")\n+\n     val permsWithIds = ArrayBuffer[PermsOnPages]()\n     val oldPermissionsById: mutable.Map[PermissionId, PermsOnPages] =\n       tx.loadPermsOnCategory(categoryId).map(p => (p.id, p))(collection.breakOut)\n@@ -646,6 +641,14 @@ trait CategoriesDao {\n     tx.deletePermsOnPages(oldPermissionsById.keys)\n     wasChangesMade ||= oldPermissionsById.nonEmpty\n \n+    // Too many permission settings, afterwards?\n+    // (COULD add a check in the request handlers that throws client-error directly.)\n+    val permsAfter = tx.loadPermsOnPages()\n+    val maxPerms = getLengthLimits().maxPermsPerSite\n+    dieIf(permsAfter.length > maxPerms,\n+      \"TyEMNYPERMS\", s\"Cannot save ${permissions.length} permissions, \" +\n+        s\"would result in ${permsAfter.length} permissions in total, but $maxPerms is max\")\n+\n     (permsWithIds.toVector, wasChangesMade)\n   }\n "
    },
    {
      "sha": "d82ca04d4f4f66992a897954e97a72b25de8ad2b",
      "filename": "app/debiki/dao/PostsDao.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/dao/PostsDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/dao/PostsDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/PostsDao.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -715,7 +715,7 @@ trait PostsDao {\n \n     quickCheckIfSpamThenThrow(who, newTextAndHtml, spamRelReqStuff)\n \n-    readWriteTransaction { tx =>\n+    val anyEditedCategory = readWriteTransaction { tx =>\n       val editorAndLevels = loadUserAndLevels(who, tx)\n       val editor = editorAndLevels.user\n       val page = PageDao(pageId, tx)\n@@ -993,6 +993,13 @@ trait PostsDao {\n         makesSectionPageHtmlStale = true\n       }\n       tx.updatePageMeta(newMeta, oldMeta = oldMeta, makesSectionPageHtmlStale)\n+      anyEditedCategory\n+    }\n+\n+    if (anyEditedCategory.isDefined) {\n+      // The cached categories remember their category description — one of which we\n+      // have now edited.\n+      uncacheAllCategories()\n     }\n \n     refreshPageInMemCache(pageId)"
    },
    {
      "sha": "992ccff5f891c802848e607ad7fed4da61db269d",
      "filename": "app/debiki/dao/SiteDao.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/dao/SiteDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/dao/SiteDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/SiteDao.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -102,14 +102,18 @@ class SiteDao(\n   with FeedsDao\n   with AuditDao {\n \n-  protected lazy val memCache = new MemCache(siteId, cache, globals.mostMetrics)\n+  // Could be protected instead? Then need to move parts of ApiV0Controller to inside the Dao.\n+  lazy val memCache = new MemCache(siteId, cache, globals.mostMetrics)\n+\n   lazy val redisCache = new RedisCache(siteId, redisClient, context.globals.now)\n+\n   protected lazy val searchEngine = new SearchEngine(siteId, elasticSearchClient)\n \n   def globals: debiki.Globals = context.globals\n   def jsonMaker = new JsonMaker(this)\n   def textAndHtmlMaker = new TextAndHtmlMaker(this.thePubSiteId(), context.nashorn)\n   def notfGenerator(tx: SiteTransaction) = NotificationGenerator(tx, context.nashorn, globals.config)\n+  def getLengthLimits(): debiki.LengthLimits.type = debiki.LengthLimits\n \n   import context.security.throwIndistinguishableNotFound\n "
    },
    {
      "sha": "8a3b89e74853a778739a7ebab3df821c153c3fa3",
      "filename": "app/debiki/dao/UserDao.scala",
      "status": "modified",
      "additions": 170,
      "deletions": 98,
      "changes": 268,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/dao/UserDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/debiki/dao/UserDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/UserDao.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -152,9 +152,7 @@ trait UserDao {\n       (newUser, invite, false)\n     }\n \n-    uncacheBuiltInGroups()\n-    // + other groups this new member might auto join.\n-    // + uncache, when deleting / anonymizing member.\n+    uncacheBuiltInGroups()  // later: uncache any groups this new member auto joined. [inv2groups]\n \n     result\n   }\n@@ -341,19 +339,22 @@ trait UserDao {\n \n \n   def blockGuest(postId: PostId, numDays: Int, threatLevel: ThreatLevel, blockerId: UserId) {\n-    readWriteTransaction { tx =>\n+    val anyChangedGuest: Option[Guest] = readWriteTransaction { tx =>\n       val auditLogEntry: AuditLogEntry = tx.loadCreatePostAuditLogEntry(postId) getOrElse {\n         throwForbidden(\"DwE2WKF5\", \"Cannot block user: No audit log entry, so no ip and id cookie\")\n       }\n \n       blockGuestImpl(auditLogEntry.browserIdData, auditLogEntry.doerId,\n           numDays, threatLevel, blockerId)(tx)\n     }\n+    anyChangedGuest.foreach(g => removeUserFromMemCache(g.id))\n   }\n \n \n+  /** Returns any guest whose threat level got changed and should be uncached.\n+    */\n   def blockGuestImpl(browserIdData: BrowserIdData, guestId: UserId, numDays: Int,\n-        threatLevel: ThreatLevel, blockerId: UserId)(tx: SiteTransaction) {\n+        threatLevel: ThreatLevel, blockerId: UserId)(tx: SiteTransaction): Option[Guest] = {\n \n       if (!Participant.isGuestId(guestId))\n         throwForbidden(\"DwE4WKQ2\", \"Cannot block authenticated users. Suspend them instead\")\n@@ -393,27 +394,34 @@ trait UserDao {\n \n       // Also set the user's threat level, if the new level is worse.\n       tx.loadGuest(guestId) foreach { guest =>\n-        if (!guest.lockedThreatLevel.exists(_.toInt > threatLevel.toInt)) {\n+        if (!guest.lockedThreatLevel.exists(_.toInt >= threatLevel.toInt)) {\n+          // The new threat level is worse than the previous (if any).\n           tx.updateGuest(\n             guest.copy(lockedThreatLevel = Some(threatLevel)))\n+          return Some(guest)\n         }\n       }\n+      None\n   }\n \n \n   def unblockGuest(postNr: PostNr, unblockerId: UserId) {\n-    readWriteTransaction { tx =>\n+    val anyChangedGuest = readWriteTransaction { tx =>\n       val auditLogEntry: AuditLogEntry = tx.loadCreatePostAuditLogEntry(postNr) getOrElse {\n         throwForbidden(\"DwE5FK83\", \"Cannot unblock guest: No audit log entry, IP unknown\")\n       }\n       tx.unblockIp(auditLogEntry.browserIdData.inetAddress)\n       auditLogEntry.browserIdData.idCookie foreach tx.unblockBrowser\n-      tx.loadGuest(auditLogEntry.doerId) foreach { guest =>\n-        if (guest.lockedThreatLevel.isDefined) {\n+      val anyGuest = tx.loadGuest(auditLogEntry.doerId)\n+      anyGuest flatMap { guest =>\n+        if (guest.lockedThreatLevel.isEmpty) None\n+        else {\n           tx.updateGuest(guest.copy(lockedThreatLevel = None))\n+          Some(guest)\n         }\n       }\n     }\n+    anyChangedGuest.foreach(g => removeUserFromMemCache(g.id))\n   }\n \n \n@@ -496,8 +504,7 @@ trait UserDao {\n     }\n \n     uncacheBuiltInGroups()\n-    // Also uncache any custom groups, if auto-joins any such groups here.\n-\n+    // Also uncache any custom groups, if auto-joins any such groups here.  [inv2groups]\n     memCache.fireUserCreated(loginGrant.user)\n     loginGrant\n   }\n@@ -544,10 +551,7 @@ trait UserDao {\n   def createUserForExternalSsoUser(userData: NewPasswordUserData, botIdData: BrowserIdData,\n         tx: SiteTransaction): UserInclDetails = {\n     dieIf(userData.password.isDefined, \"TyE7KHW2G\")\n-    val member = createPasswordUserImpl(userData, botIdData, tx)\n-    uncacheBuiltInGroups()\n-    memCache.fireUserCreated(member.briefUser)\n-    member\n+    createPasswordUserImpl(userData, botIdData, tx)\n   }\n \n \n@@ -576,12 +580,11 @@ trait UserDao {\n \n     tx.insertAuditLogEntry(makeCreateUserAuditEntry(user, browserIdData, tx.now))\n     user\n-    // uncache the Everyone and All Members groups. From the caller?\n   }\n \n \n   private def makeCreateUserAuditEntry(member: UserInclDetails, browserIdData: BrowserIdData,\n-                                       now: When): AuditLogEntry = {\n+      now: When): AuditLogEntry = {\n     AuditLogEntry(\n       siteId = siteId,\n       id = AuditLogEntry.UnassignedId,\n@@ -719,7 +722,7 @@ trait UserDao {\n   }\n \n \n-  def loadUsersWithPrefix(prefix: String): immutable.Seq[User] = {\n+  def loadUsersWithPrefix(prefix: String): immutable.Seq[User] = {  RENAME // to ...WithUsernamePrefix\n     readOnlyTransaction(_.loadUsersWithPrefix(prefix))\n   }\n \n@@ -740,7 +743,8 @@ trait UserDao {\n \n \n   def getTheGroupOrThrowClientError(groupId: UserId): Group = {\n-    throwBadRequestIf(groupId <= MaxGuestId, \"TyE30KMRAK\", s\"User $groupId is a guest\")\n+    COULD // instead lookup all groups: allGroupsKey  [LDALGRPS]\n+    throwBadRequestIf(groupId <= MaxGuestId, \"TyE30KMRAK\", s\"User id $groupId is a guest id\")\n     getParticipant(groupId) match {\n       case Some(g: Group) => g\n       case Some(x) => throwForbidden(\"TyE20JMRA5\", s\"Not a group, but a ${classNameOf(x)}\")\n@@ -755,6 +759,8 @@ trait UserDao {\n \n \n   def getGroup(groupId: UserId): Option[Group] = {\n+    COULD // instead lookup all groups, using: allGroupsKey, insert into the cache,  [LDALGRPS]\n+    // and then return. Instead of loading just one group?\n     require(groupId >= Participant.LowestMemberId, \"EsE4GKX24\")\n     getParticipant(groupId) map {\n       case _: User => throw GotANotGroupException(groupId)\n@@ -847,7 +853,9 @@ trait UserDao {\n   }\n \n \n-  def getGroups(requester: Participant): Vector[Group] = {\n+  def getGroupsReqrMaySee(requester: Participant): Vector[Group] = {\n+    BUG // risk: ?? Maybe shouldn't cache Group:s, but group ids ??  [LDALGRPS]\n+    // So cannot get different results if loading groups via  allGroupsKey, or via  pptKey\n     val tooManyGroups = memCache.lookup[Vector[Group]](\n       allGroupsKey,\n       orCacheAndReturn = {\n@@ -862,25 +870,26 @@ trait UserDao {\n     val groups =\n       if (requester.isStaff) tooManyGroups\n       else tooManyGroups\n-        // Later: .filter(g => g.isVisibleFor(forWho) || requestersGroupIds.contains(g.id))\n+        // Later: .filter(g => g.isVisibleFor(requester) || requestersGroupIds.contains(g.id))\n+        // but start with the names of all custom groups visible (although one might not\n+        // be allowed to see their members)\n \n     groups\n   }\n \n \n-  def getGroupsAndStats(forWho: Who): Vector[GroupAndStats] = {\n-    val requester = getParticipantOrUnknown(forWho.id)\n-    val groups = getGroups(requester)\n+  def getGroupsAndStatsReqrMaySee(requester: Participant): Vector[GroupAndStats] = {\n+    val groups = getGroupsReqrMaySee(requester)\n     val groupsAndStats = groups map { group =>\n-      GroupAndStats(group, getGroupStatsIfMaySee(group, requester))\n+      GroupAndStats(group, getGroupStatsIfReqrMaySee(group, requester))\n     }\n     groupsAndStats\n   }\n \n \n-  private def getGroupStatsIfMaySee(group: Group, requester: Participant): Option[GroupStats] = {\n+  private def getGroupStatsIfReqrMaySee(group: Group, requester: Participant): Option[GroupStats] = {\n     // Hmm this counts not only users, but child groups too. [NESTDGRPS]\n-    val members = listGroupMembers(group.id, requester) getOrElse {\n+    val members = listGroupMembersIfReqrMaySee(group.id, requester) getOrElse {\n       return None\n     }\n     Some(GroupStats(numMembers = members.length))\n@@ -889,13 +898,21 @@ trait UserDao {\n \n   /** Returns Some(the members), or, if one isn't allowed to know who they are, None.\n     */\n-  def listGroupMembers(groupId: UserId, requester: Participant): Option[Vector[Participant]] = {\n+  def listGroupMembersIfReqrMaySee(groupId: UserId, requester: Participant)\n+        : Option[Vector[Participant]] = {\n+    // For now, don't allow \"anyone\" to list almost all members in the whole forum, by looking\n+    // at built-in groups like Everyone or All Members.\n     if (groupId == Group.EveryoneId)\n       return None\n \n     val group: Group = getTheGroupOrThrowClientError(groupId)\n     val requestersGroupIds = getOnesGroupIds(requester)\n-    if (!requester.isStaff && !requestersGroupIds.contains(groupId))  // or if is manager [GRPMAN]\n+\n+    // Let everyone see who the staff members are. That's important so one knows whom\n+    // to trust about how the community functions?\n+    // Later: configurable count/view-members per group settings.\n+    // Later: or if is manager [GRPMAN]\n+    if (!requester.isStaff && !requestersGroupIds.contains(groupId) && !Group.isStaffGroupId(groupId))\n       return None\n \n     lazy val members = memCache.lookup[Vector[Participant]](\n@@ -906,17 +923,12 @@ trait UserDao {\n         }\n       }).get\n \n-    if (requester.isStaff) {\n+    if (requester.isStaffOrCoreMember) {\n       Some(members)\n     }\n-    else if (group.id == Group.EveryoneId) {\n-      // For now, don't allow \"anyone\" to list almost all members in the whole forum, by looking\n-      // at built-in groups like Everyone or All Members.\n-      None\n-    }\n     else if (group.isBuiltIn && requester.effectiveTrustLevel.isBelow(TrustLevel.TrustedMember)) {\n-      // For now, don't allow \"anyone\" to list almost all members in the whole forum, by looking\n-      // at built-in groups like Everyone or All Members.\n+      // For now, don't let not-yet-trusted members list all members in the whole forum\n+      // (by looking at the All Members group members).\n       None\n     }\n     else {\n@@ -925,10 +937,13 @@ trait UserDao {\n   }\n \n \n-  def addGroupMembers(groupId: UserId, memberIdsToAdd: Set[UserId]) {\n+  def addGroupMembers(groupId: UserId, memberIdsToAdd: Set[UserId], reqrId: ReqrId) {\n     throwForbiddenIf(groupId < Participant.LowestAuthenticatedUserId,\n       \"TyE206JKDT2\", \"Cannot add members to built-in automatic groups\")\n     readWriteTransaction { tx =>\n+      throwForbiddenIf(memberIdsToAdd.contains(groupId),\n+        \"TyEGR2SELF\", s\"Cannot make group $groupId a member of itself\")\n+\n       val newMembers = tx.loadParticipants(memberIdsToAdd)\n       newMembers.find(_.isGroup) foreach { group =>\n         // Currently trust level groups are already nested in each other — but let's\n@@ -938,23 +953,50 @@ trait UserDao {\n       newMembers.find(_.isGuest) foreach { guest =>\n         throwForbidden(\"TyEGSTINGR\", s\"Cannot add guests to groups. Is a guest: ${guest.nameParaId}\")\n       }\n+\n+      // For now. Don't let a group become too large.\n+      val oldMemberIds = tx.loadGroupMembers(groupId).map(_.id).toSet\n+      val allMemberIdsAfter = oldMemberIds ++ memberIdsToAdd\n+      val maxMembers = getLengthLimits().maxMembersPerCustomGroup\n+      throwForbiddenIf(allMemberIdsAfter.size > maxMembers,\n+        \"TyE2MNYMBRS\", s\"Group $groupId would get more than $maxMembers members\")\n+\n+      // Don't allow adding someone to very many groups — that could be a DoS attack.\n+      val maxGroups = getLengthLimits().maxGroupsMemberCanJoin\n+      val anyMemberInManyGroups = newMembers.find(member => {\n+        if (oldMemberIds.contains(member.id)) false\n+        else {\n+          val membersCurrentGroupIds = tx.loadGroupIdsMemberIdFirst(member)\n+          membersCurrentGroupIds.length >= maxGroups\n+        }\n+      })\n+      anyMemberInManyGroups foreach { m =>\n+        throwForbidden(\"TyEMBRIN2MNY\", s\"Member ${m.nameParaId} is in $maxGroups groups already, \" +\n+          \"cannot add to more groups\")\n+      }\n+\n+      AUDIT_LOG\n       tx.addGroupMembers(groupId, memberIdsToAdd)\n     }\n+    // Might need to uncache all pages where the members' names occur — if an is-member-of-group\n+    // title will be shown, next to the members' names. [grp-mbr-title]\n+\n     uncacheOnesGroupIds(memberIdsToAdd)\n     memCache.remove(groupMembersKey(groupId))\n-    memCache.remove(allGroupsKey)  // why? not needed, remove?  (320505)\n   }\n \n \n-  def removeGroupMembers(groupId: UserId, memberIdsToRemove: Set[UserId]) {\n+  def removeGroupMembers(groupId: UserId, memberIdsToRemove: Set[UserId], reqrId: ReqrId) {\n     throwForbiddenIf(groupId < Participant.LowestAuthenticatedUserId,\n       \"TyE8WKD2T0\", \"Cannot remove members from built-in automatic groups\")\n     readWriteTransaction { tx =>\n+      AUDIT_LOG\n       tx.removeGroupMembers(groupId, memberIdsToRemove)\n     }\n+    // Might need to uncache pages. [grp-mbr-title]\n+\n     uncacheOnesGroupIds(memberIdsToRemove)\n     memCache.remove(groupMembersKey(groupId))\n-    memCache.remove(allGroupsKey)  // why? not needed, remove?  (320505)\n   }\n \n \n@@ -965,7 +1007,7 @@ trait UserDao {\n   }\n \n \n-  private def uncacheBuiltInGroups() {\n+  def uncacheBuiltInGroups() {\n     import Group._\n     uncacheGroupsMemberLists(\n       Vector(EveryoneId, AllMembersId, BasicMembersId, FullMembersId,\n@@ -981,15 +1023,15 @@ trait UserDao {\n   }\n \n \n-  def getOnesGroupIds(user: Participant): Vector[UserId] = {\n-    user match {\n+  def getOnesGroupIds(ppt: Participant): Vector[UserId] = {\n+    ppt match {\n       case _: Guest | UnknownParticipant => Vector(Group.EveryoneId)\n       case _: User | _: Group =>\n         memCache.lookup[Vector[UserId]](\n-          onesGroupIdsKey(user.id),\n+          onesGroupIdsKey(ppt.id),\n           orCacheAndReturn = {\n             readOnlyTransaction { tx =>\n-              Some(tx.loadGroupIdsMemberIdFirst(user))\n+              Some(tx.loadGroupIdsMemberIdFirst(ppt))\n             }\n           }).get\n     }\n@@ -1197,7 +1239,7 @@ trait UserDao {\n \n     // Don't track system, superadmins, deleted users — they aren't real members.\n     if (user.id < LowestTalkToMemberId)\n-      return ReadMoreResult(0, false)\n+      return ReadMoreResult(0, gotPromoted = false)\n \n     COULD_OPTIMIZE // use Dao instead, so won't touch db. Also: (5ABKR20L)\n     val result = readWriteTransaction { tx =>\n@@ -1484,6 +1526,7 @@ trait UserDao {\n     // Similar to saveAboutGroupPrefs below. (0QE15TW93)\n     SECURITY // should create audit log entry. Should allow staff to change usernames.\n     BUG // the lost update bug (if staff + user henself changes the user's prefs at the same time)\n+    var clearMemCacheAfterTx = false\n \n     editMemberThrowUnlessSelfStaff2(preferences.userId, byWho, \"TyE2WK7G4\", \"configure about prefs\") {\n         (tx, _, me) =>\n@@ -1503,18 +1546,60 @@ trait UserDao {\n \n       // Don't let people change their usernames too often.\n       if (user.username != preferences.username) {\n-        throwForbiddenIfBadUsername(preferences.username)\n+        addUsernameUsageOrThrowClientError(user.id, newUsername = preferences.username, me = me, tx)\n+      }\n \n-        val usersOldUsernames: Seq[UsernameUsage] = tx.loadUsersOldUsernames(user.id)\n+      // Changing address is done via UserController.setPrimaryEmailAddresses instead, not here\n+      if (user.primaryEmailAddress != preferences.emailAddress)\n+        throwForbidden(\"DwE44ELK9\", \"Shouldn't modify one's email here\")\n+\n+      val userAfter = user.copyWithNewAboutPrefs(preferences)\n+      try tx.updateUserInclDetails(userAfter)\n+      catch {\n+        case _: DuplicateUsernameException =>\n+          throwForbidden(\"EdE2WK8Y4_\", s\"Username '${preferences.username}' already in use\")\n+      }\n+\n+      if (userAfter.summaryEmailIntervalMins != user.summaryEmailIntervalMins ||\n+        userAfter.summaryEmailIfActive != user.summaryEmailIfActive) {\n+        tx.reconsiderSendingSummaryEmailsTo(user.id)  // related: [5KRDUQ0]\n+      }\n+\n+      // Clear the page cache (by clearing all caches), if we changed the user's name.\n+      // COULD have above markPagesWithUserAvatarAsStale() return a page id list and\n+      // uncache only those pages.\n+      if (preferences.changesStuffIncludedEverywhere(user)) {\n+        // COULD_OPTIMIZE bump only page versions for the pages on which the user has posted something.\n+        // Use markPagesWithUserAvatarAsStale ?\n+        emptyCacheImpl(tx)\n+        clearMemCacheAfterTx = true\n+      }\n+    }\n+\n+    if (clearMemCacheAfterTx) {\n+      memCache.clearSingleSite(siteId)\n+    }\n+    removeUserFromMemCache(preferences.userId)\n+  }\n+\n+\n+  def addUsernameUsageOrThrowClientError(memberId: UserId, newUsername: String,\n+          me: User, tx: SiteTransaction) {\n+        dieIf(Participant.isGuestId(memberId), \"TyE04MSR245\")\n+        throwForbiddenIf(Participant.isBuiltInParticipant(memberId),\n+          \"TyE3HMSTUG563\", \"Cannot rename built-in members\")\n+        throwForbiddenIfBadUsername(newUsername)\n+\n+        val usersOldUsernames: Seq[UsernameUsage] = tx.loadUsersOldUsernames(memberId)\n \n         // [CANONUN] load both exact & canonical username, any match —> not allowed (unless one's own).\n-        val previousUsages = tx.loadUsernameUsages(preferences.username)\n+        val previousUsages = tx.loadUsernameUsages(newUsername)\n \n         // For now: (later, could allow, if never mentioned, after a grace period. Docs [8KFUT20])\n-        val usagesByOthers = previousUsages.filter(_.userId != user.id)\n+        val usagesByOthers = previousUsages.filter(_.userId != memberId)\n         if (usagesByOthers.nonEmpty)\n           throwForbidden(\"EdE5D0Y29_\",\n-            \"That username is, or has been, in use by someone else. You cannot use it.\")\n+            s\"The username '$newUsername' is, or has been, in use by someone else. You cannot use it.\")\n \n         val maxPerYearTotal = me.isStaff ? 20 | 9\n         val maxPerYearDistinct = me.isStaff ? 8 | 3\n@@ -1523,10 +1608,10 @@ trait UserDao {\n             _.inUseFrom.daysBetween(tx.now) < 365)\n         if (recentUsernames.length >= maxPerYearTotal)\n           throwForbidden(\"DwE5FKW02\",\n-            \"You have changed your username too many times the past year\")\n+            \"You have changed the username too many times the past year\")\n \n         val recentDistinct = recentUsernames.map(_.usernameLowercase).toSet\n-        def yetAnotherNewName = !recentDistinct.contains(preferences.username.toLowerCase)\n+        def yetAnotherNewName = !recentDistinct.contains(newUsername.toLowerCase)\n         if (recentDistinct.size >= maxPerYearDistinct && yetAnotherNewName)\n           throwForbidden(\"EdE7KP4ZZ_\",\n             \"You have changed to different usernames too many times the past year\")\n@@ -1538,40 +1623,11 @@ trait UserDao {\n         }\n \n         tx.insertUsernameUsage(UsernameUsage(\n-          usernameLowercase = preferences.username.toLowerCase, // [CANONUN]\n+          usernameLowercase = newUsername.toLowerCase, // [CANONUN]\n           inUseFrom = tx.now,\n           inUseTo = None,\n-          userId = user.id,\n+          userId = memberId,\n           firstMentionAt = None))\n-      }\n-\n-      // Changing address is done via UserController.setPrimaryEmailAddresses instead, not here\n-      if (user.primaryEmailAddress != preferences.emailAddress)\n-        throwForbidden(\"DwE44ELK9\", \"Shouldn't modify one's email here\")\n-\n-      val userAfter = user.copyWithNewAboutPrefs(preferences)\n-      try tx.updateUserInclDetails(userAfter)\n-      catch {\n-        case _: DuplicateUsernameException =>\n-          throwForbidden(\"EdE2WK8Y4_\", \"Username already in use\")\n-      }\n-\n-      if (userAfter.summaryEmailIntervalMins != user.summaryEmailIntervalMins ||\n-          userAfter.summaryEmailIfActive != user.summaryEmailIfActive) {\n-        tx.reconsiderSendingSummaryEmailsTo(user.id)  // related: [5KRDUQ0]\n-      }\n-\n-      // Clear the page cache (by clearing all caches), if we changed the user's name.\n-      // COULD have above markPagesWithUserAvatarAsStale() return a page id list and\n-      // uncache only those pages.\n-      if (preferences.changesStuffIncludedEverywhere(user)) {\n-        // COULD_OPTIMIZE bump only page versions for the pages on which the user has posted something.\n-        // Use markPagesWithUserAvatarAsStale ?\n-        emptyCacheImpl(tx)\n-      }\n-    }\n-\n-    removeUserFromMemCache(preferences.userId)\n   }\n \n \n@@ -1584,6 +1640,7 @@ trait UserDao {\n       val group = tx.loadTheGroupInclDetails(preferences.groupId)\n       val me = tx.loadTheUser(byWho.id)\n       require(me.isStaff, \"EdE5LKWV0\")\n+      dieIf(group.id == Group.AdminsId && !me.isAdmin, \"TyE30HMTR24\")\n \n       val groupAfter = group.copyWithNewAboutPrefs(preferences)\n \n@@ -1592,17 +1649,13 @@ trait UserDao {\n       }\n \n       if (groupAfter.theUsername != group.theUsername) {\n-        throwForbiddenIfBadUsername(preferences.username)\n-        unimplemented(\"Changing a group's username\", \"TyE2KBFU50\")  // SHOULD fix now\n-        // Need to: tx.updateUsernameUsage(usageStopped) — stop using current\n-        // And: tx.insertUsernameUsage(UsernameUsage(   [CANONUN]\n-        // See saveAboutMemberPrefs.\n+        addUsernameUsageOrThrowClientError(group.id, groupAfter.theUsername, me = me, tx)\n       }\n \n       try tx.updateGroup(groupAfter)\n       catch {\n         case _: DuplicateUsernameException =>\n-          throwForbidden(\"EdE2WK8Y4_\", \"Username already in use\")\n+          throwForbidden(\"EdED3ABLW2\", s\"Username '${groupAfter.theUsername}' already in use\")\n       }\n \n       // If summary-email-settings were changed, hard to know which people were affected.\n@@ -1620,7 +1673,7 @@ trait UserDao {\n \n   def saveUiPrefs(memberId: UserId, prefs: JsObject, byWho: Who) {\n     editMemberThrowUnlessSelfStaff2(memberId, byWho, \"TyE3ASHW67\", \"change UI prefs\") {\n-        (tx, memberInclDetails, byWho) =>\n+        (tx, memberInclDetails, _) =>\n       tx.updateMemberInclDetails(memberInclDetails.copyTrait(uiPrefs = Some(prefs)))\n     }\n     removeUserFromMemCache(memberId)\n@@ -1656,11 +1709,17 @@ trait UserDao {\n   }\n \n \n-  def createGroup(username: String, fullName: Option[String]): Group Or ErrorMessage = {\n+  def createGroup(username: String, fullName: Option[String], reqrId: ReqrId): Group Or ErrorMessage = {\n     throwForbiddenIfBadFullName(fullName)\n     throwForbiddenIfBadUsername(username)\n \n     val result = readWriteTransaction { tx =>\n+      // Too many groups could be a DoS attack.\n+      val currentGroups = tx.loadAllGroupsAsSeq()\n+      val maxCustomGroups = getLengthLimits().maxCustomGroups\n+      throwForbiddenIf(currentGroups.length >= maxCustomGroups + Group.NumBuiltInGroups,\n+        \"TyE2MNYGRPS\", s\"Cannot create more than $maxCustomGroups custom groups\")\n+\n       tx.loadUsernameUsages(username) foreach { usage =>\n         return Bad(o\"\"\"There is, or was, already a member with username\n           '$username', member id: ${usage.userId} [TyE204KMFG]\"\"\")\n@@ -1675,26 +1734,33 @@ trait UserDao {\n       tx.insertUsernameUsage(UsernameUsage(\n         usernameLowercase = group.theUsername,\n         tx.now, userId = group.id))\n+      AUDIT_LOG // that reqrId created group\n       Good(group)\n     }\n     memCache.remove(allGroupsKey)\n     result\n   }\n \n \n-  def deleteGroup(groupId: UserId) {\n+  def deleteGroup(groupId: UserId, reqrId: ReqrId) {\n     throwForbiddenIf(groupId < Participant.LowestAuthenticatedUserId,\n       \"TyE307DMAT2\", \"Cannot delete built-in groups\")\n+\n+    // If doesn't exist, fail with a client error instead of a server error inside the tx.\n+    getTheGroupOrThrowClientError(groupId)\n+\n     val formerMembers = readWriteTransaction { tx =>\n-      val group = tx.loadTheGroupInclDetails(groupId)\n+      tx.loadTheGroupInclDetails(groupId) ; RACE // might fail (harmless)\n       val members = tx.loadGroupMembers(groupId)\n       tx.deleteUsernameUsagesForMemberId(groupId)\n       tx.removeAllGroupParticipants(groupId)\n       tx.deleteGroup(groupId)\n+      AUDIT_LOG // that reqrId deleted group\n       members\n     }\n     RACE // not impossible that a member just loaded hens group ids from the database,\n     // and inserts into the mem cache just after we've uncached, here?\n+    removeUserFromMemCache(groupId)\n     uncacheOnesGroupIds(formerMembers.map(_.id))\n     memCache.remove(groupMembersKey(groupId))\n     memCache.remove(allGroupsKey)\n@@ -1848,6 +1914,10 @@ trait UserDao {\n       (memberDeleted, groupIds)\n     }\n \n+    // To uncache pages where the user's name appears: (now changed to anonNNN)\n+    memCache.clearSingleSite(siteId)\n+    COULD // instead uncache only the pages on which hens name appears, plus this:\n+    // (this not needed, since cleared the site cache just above. Do anyway.)\n     uncacheOnesGroupIds(Seq(userId))\n     uncacheGroupsMemberLists(usersGroupIds)\n     removeUserFromMemCache(userId)\n@@ -1888,9 +1958,11 @@ trait UserDao {\n     * If isn't the same preson, or isn't staff, then, throws 403 Forbidden.\n     * Plus, staff users who are moderators only, may not edit admin users — that also\n     * results in 403 Forbidden.\n+    *\n+    * block = (tx, member-to-edit, me) => side effects...  .\n     */\n   private def editMemberThrowUnlessSelfStaff2[R](userId: UserId, byWho: Who, errorCode: String,\n-        mayNotWhat: String)(block: (SiteTransaction, MemberInclDetails, Participant) => R): R = {\n+        mayNotWhat: String)(block: (SiteTransaction, MemberInclDetails, User) => R): R = {\n     SECURITY // review all fns in UserDao, and in UserController, and use this helper fn?\n     // Also create a helper fn:  readMemberThrowUnlessSelfStaff2 ...\n \n@@ -1902,7 +1974,7 @@ trait UserDao {\n       errorCode + \"-ISBTI\", s\"May not $mayNotWhat for special built-in users\")\n \n     readWriteTransaction { tx =>\n-      val me = tx.loadTheParticipant(byWho.id) // [2ABKF057]  later: tx.loadTheMember(byWho.id)\n+      val me = tx.loadTheUser(byWho.id)\n       throwForbiddenIf(me.id != userId && !me.isStaff,\n           errorCode + \"-ISOTR\", s\"May not $mayNotWhat for others\")\n \n@@ -1921,7 +1993,7 @@ trait UserDao {\n     memCache.remove(key(userId))\n   }\n \n-  private def key(userId: UserId) = MemCacheKey(siteId, s\"$userId|PptById\")\n+  private def key(userId: UserId) = MemCacheKey(siteId, s\"$userId|PptById\") ; RENAME // to pptKey?\n \n   private def allGroupsKey = MemCacheKey(siteId, \"AlGrps\")\n   private def groupMembersKey(groupId: UserId) = MemCacheKey(siteId, s\"$groupId|GrMbrs\")"
    },
    {
      "sha": "c39c59f4de7396ce94c8529b53c650ffa0e8e3f5",
      "filename": "app/ed/plugins/utx/UsabilityTestingExchangeController.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/ed/plugins/utx/UsabilityTestingExchangeController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/ed/plugins/utx/UsabilityTestingExchangeController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/plugins/utx/UsabilityTestingExchangeController.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -67,7 +67,7 @@ class UsabilityTestingExchangeController @Inject()(cc: ControllerComponents, edC\n     val bodyTextAndHtml = dao.textAndHtmlMaker.forBodyOrCommentAsPlainTextWithLinks(bodyText)\n \n     val categorySlug = (request.body \\ \"categorySlug\").as[String]\n-    val category = request.dao.loadCategoryBySlug(categorySlug).getOrThrowBadArgument(\n+    val category = request.dao.getCategoryBySlug(categorySlug).getOrThrowBadArgument(\n       \"EsE0FYK42\", s\"No category with slug: $categorySlug\")\n \n     val pagePath = request.dao.createPage(pageType, PageStatus.Published, Some(category.id),\n@@ -117,7 +117,7 @@ class UsabilityTestingExchangeController @Inject()(cc: ControllerComponents, edC\n     */\n   private def doPickTask(categorySlug: String, request: http.GetRequest): Result = {\n     import request.{dao, theRequester}\n-    val category = dao.loadCategoryBySlug(categorySlug).getOrThrowBadArgument(\n+    val category = dao.getCategoryBySlug(categorySlug).getOrThrowBadArgument(\n       \"EsE0FYK42\", s\"No category with slug: $categorySlug\")\n \n     val topicIdsToSkip: Set[PageId] = urlDecodeCookie(\"edCoUtxSkip\", request.underlying) match {"
    },
    {
      "sha": "035c1b336442f576cab757a718270451c8d12db2",
      "filename": "app/ed/server/auth/AuthzSiteDaoMixin.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/ed/server/auth/AuthzSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/ed/server/auth/AuthzSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/auth/AuthzSiteDaoMixin.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -141,7 +141,7 @@ trait AuthzSiteDaoMixin {\n     val categories: immutable.Seq[Category] =\n       pageMeta.categoryId map { categoryId =>\n         anyTransaction.map(_.loadCategoryPathRootLast(categoryId)) getOrElse {\n-          loadAncestorCategoriesRootLast(categoryId)\n+          getAncestorCategoriesRootLast(categoryId)\n         }\n       } getOrElse Nil\n \n@@ -270,6 +270,9 @@ trait AuthzSiteDaoMixin {\n   }\n \n \n+  // There typicaly aren't many permissinos — let's say 20 custom groups (unusually many)\n+  // with 10 permissions each (unusually many). 200 perms in total — that's not much,\n+  // better load all at once.\n   private val allPermsKey: MemCacheKey = MemCacheKey(siteId, \"AllPemrs\")\n \n }"
    },
    {
      "sha": "b8a9eb92ea2a0012eaa118e5f7a728428faa1b68",
      "filename": "app/ed/server/http/DebikiRequest.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/ed/server/http/DebikiRequest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/ed/server/http/DebikiRequest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/http/DebikiRequest.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -74,7 +74,8 @@ abstract class DebikiRequest[A] {\n   // about another user — then, does 'user' refer to the requester or that other user?\n   // Instead, use 'requester' always, to refer to the requester.\n   def requester: Option[Participant] = user\n-  def requesterOrUnknown = user getOrElse UnknownParticipant\n+  def requesterOrUnknown: Participant = user getOrElse UnknownParticipant\n+  def requesterIdOrUnknown: UserId = user.map(_.id) getOrElse UnknownUserId\n   def theRequester: Participant = theUser\n \n   def tenantId: SiteId = dao.siteId\n@@ -84,12 +85,11 @@ abstract class DebikiRequest[A] {\n \n   lazy val siteSettings: EffectiveSettings = dao.getWholeSiteSettings()\n \n+  def reqrId: ReqrId = who\n+  @deprecated(\"use reqrId: ReqrId instead\", \"now\")\n   def who = Who(theUserId, theBrowserIdData)\n \n-  def whoOrUnknown: Who = {\n-    val id = user.map(_.id) getOrElse UnknownUserId\n-    Who(id, theBrowserIdData)\n-  }\n+  def whoOrUnknown: Who = Who(requesterIdOrUnknown, theBrowserIdData)\n \n   lazy val authzContext: ForumAuthzContext = dao.getForumAuthzContext(requester)\n "
    },
    {
      "sha": "4c233de80ecf0f3bd55a30bcbe8a1a89f7f53ca7",
      "filename": "app/ed/server/notf/NotificationGenerator.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/app/ed/server/notf/NotificationGenerator.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/app/ed/server/notf/NotificationGenerator.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/ed/server/notf/NotificationGenerator.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -148,7 +148,7 @@ case class NotificationGenerator(tx: SiteTransaction, nashorn: Nashorn, config:\n         // Then would have to remove a db constraint. Could do later. Right now feels best\n         // to keep it so it'll catch bugs.\n         // If mentioning a group that one is a member of, one shouldn't and won't be notified (5ABKRW2).\n-        if userOrGroup.id != newPost.createdById  // poster mentions him/herself?\n+        if userOrGroup.id != newPost.createdById  // poster mentions henself?\n         if !notfCreatedAlreadyTo(userOrGroup.id)\n       } {\n         makeNewPostNotfs(\n@@ -253,6 +253,8 @@ case class NotificationGenerator(tx: SiteTransaction, nashorn: Nashorn, config:\n         (Set(toUserMaybeGroup.id), notfType)\n       }\n       else {\n+        // Is a group mention / a reply to a post by a group.\n+\n         val isMention = notfType == NotificationType.Mention\n         val groupId = toUserMaybeGroup.id\n "
    },
    {
      "sha": "05c40c7efb4f2e182132d9f478445943873b203e",
      "filename": "client/app-more/forum/create-category-dialog.more.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-more/forum/create-category-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-more/forum/create-category-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/forum/create-category-dialog.more.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -567,12 +567,12 @@ const SelectGroupDropdown = createClassAndFactory({\n   render: function() {\n     const props = this.props;\n     const state = this.state;\n-    const groups: Group[] = props.groups;\n+    const groupsUnsorted: Group[] = props.groups;\n     const selectedGroup: Group = props.selectedGroup;\n \n     // The 'selectedGroup' should be in 'groups'.\n     // @ifdef DEBUG\n-    dieIf(selectedGroup && !_.find(groups, g => g.id === selectedGroup.id), 'EdE2WCPA40');\n+    dieIf(selectedGroup && !_.find(groupsUnsorted, g => g.id === selectedGroup.id), 'EdE2WCPA40');\n     // @endif\n \n     function nameOf(group) {\n@@ -587,9 +587,9 @@ const SelectGroupDropdown = createClassAndFactory({\n     // Sort by id, so will always appear in the same order, and also, so built-in groups\n     // like \"Everyone\" appear first (it's typically interesting to know what permissions\n     // Everyone has).\n-    const groupsById = [...groups].sort((a, b) => a.id - b.id);\n+    const groupsSorted = _.sortBy(groupsUnsorted, g => g.id);\n \n-    const listItems = groupsById.map((group: Group) => {\n+    const listItems = groupsSorted.map((group: Group) => {\n       return ExplainingListItem({ onSelect: this.onSelect,\n         activeEventKey: selectedGroup ? selectedGroup.id : NoId, eventKey: group.id, key: group.id,\n         title: nameOf(group) });"
    },
    {
      "sha": "b2d4d0f89e689172496053003690dc84213955c9",
      "filename": "client/app-more/users/group-members.more.ts",
      "status": "modified",
      "additions": 19,
      "deletions": 9,
      "changes": 28,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-more/users/group-members.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-more/users/group-members.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/users/group-members.more.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -24,25 +24,34 @@\n \n const r = ReactDOMFactories;\n \n+interface GroupMembersProps {\n+  user: Group;\n+  store: Store;\n+}\n \n-export const GroupMembers = React.createFactory<any>(function(props) {\n+\n+export const GroupMembers = React.createFactory<GroupMembersProps>(function(props) {\n   //displayName: 'GroupMembers',\n \n   const group: Group = props.user; // werid name, could fix\n   const store: Store = props.store;\n   const me = store.me;\n+  const myId = React.useRef(me.id);\n   const builtInOrNotStaff = member_isBuiltIn(group) || !isStaff(me);\n-  let isGone;  // BUG should be useState instead, right.\n \n   const [membersNullOrFalse, setMembers] = React.useState<Participant[] | null | false>(null);\n \n   React.useEffect(() => {\n+    myId.current = me.id;\n     listAndSetMembers();\n-    return () => { isGone = true };\n+    return () => myId.current = null;\n   }, [me.id]);\n \n   function listAndSetMembers() {\n-    Server.listGroupMembers(group.id, setMembers);\n+    Server.listGroupMembers(group.id, (members) => {\n+      if (myId.current !== me.id) return;\n+      setMembers(members);\n+    });\n   }\n \n   if (membersNullOrFalse === null)\n@@ -56,7 +65,7 @@ export const GroupMembers = React.createFactory<any>(function(props) {\n   function showAddMembersDialog() {\n     const currentMemberIds = members.map(m => m.id);\n     pagedialogs.openAddPeopleDialog(currentMemberIds, (newIds: UserId[]) => {\n-      if (isGone) return;\n+      if (myId.current !== me.id) return;\n       Server.addGroupMembers(group.id, newIds, listAndSetMembers);\n     });\n   }\n@@ -65,17 +74,18 @@ export const GroupMembers = React.createFactory<any>(function(props) {\n     Server.removeGroupMembers(group.id, [memberId], listAndSetMembers);\n   }\n \n-  const addMembersButton = builtInOrNotStaff || member_isBuiltIn(group) ? null :\n+  const addMembersButton = builtInOrNotStaff ? null :\n       Button({ className: 'e_AddMbrsB', onClick: () => showAddMembersDialog() },\n         \"Add Members\");  // I18N\n \n   const memberElems = members.map((m: Participant) => {\n      return r.li({ key: m.id, className: 's_G_Mbrs_Mbr' },\n         LinkUnstyled({ to: UsersRoot + m.username, className: 's_G_Mbrs_Mbr_L' },\n           UserName({ user: m, store, makeLink: false, onClick: null })),\n-        builtInOrNotStaff ? null : utils.ModalDropdownButton({ title: \"Manage ...\", className: 'e_MngMbr' },  // I18N\n-          Button({ className: 'e_RmMbr', onClick: () => removeMember(m.id) },\n-            \"Remove\")));   // I18N\n+        builtInOrNotStaff ? null :\n+          utils.ModalDropdownButton({ title: \"Manage ...\", className: 'e_MngMbr' },  // I18N\n+            Button({ className: 'e_RmMbr', onClick: () => removeMember(m.id) },\n+              \"Remove\")));   // I18N\n   });\n \n   const cannotModifyInfo = !member_isBuiltIn(group) ? null :"
    },
    {
      "sha": "0bd3b408d32600ab595b98b1ea3233bdf3ebdd4d",
      "filename": "client/app-more/users/groups-page.more.ts",
      "status": "modified",
      "additions": 21,
      "deletions": 21,
      "changes": 42,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-more/users/groups-page.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-more/users/groups-page.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/users/groups-page.more.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -34,43 +34,43 @@ const ModalTitle = rb.ModalTitle;\n export const ListGroupsComponent = React.createFactory<RouteChildProps>(function(props) {\n   const store: Store = useStoreState()[0];\n   const me: Myself = store.me;\n-  const notStaff = !isStaff(me);\n-\n-  const [groupsOrNull, setGroups] = React.useState(null);\n+  const myId = React.useRef(me.id);\n+  const [groupsOrNull, setGroups] = React.useState<Group[]>(null);\n \n   React.useEffect(() => {\n-    Server.loadGroups(setGroups);\n-  },\n-    // Reload the groups, if we logout/in as a different user — then, which groups\n-    // we can seee, might change.\n-    [me.id]);\n+    myId.current = me.id;\n+    Server.loadGroups((groups) => {\n+      if (myId.current !== me.id) return;\n+      setGroups(groups);\n+    });\n+    return () => myId.current = null;\n+  }, [me.id]);\n \n   if (!groupsOrNull)\n     return (\n         r.p({ className: 'container' },\n           t.Loading));\n \n-  //const groupsSortedById: Group[] = [...groupsOrNull].sort((a, b) => a.id - b.id);\n-  const [builtInGroupsUnsorted, customGroupsUnsorted] =\n+  const [builtInGroupsUnsorted, customGroupsUnsorted] = <[Group[], Group[]]>\n       _.partition(groupsOrNull, member_isBuiltIn);\n \n-  // Place interesting groups like Admin, Moderators first.\n-  const builtInGroups = _.sortBy(builtInGroupsUnsorted, (g: Group) => -g.id);\n+  // Place interesting groups like Admins and Moderators first.\n+  const builtInGroups = _.sortBy(builtInGroupsUnsorted, g => -g.id);\n \n-  // Sort by name.\n-  const customGroups = _.sortBy(customGroupsUnsorted, (g: Group) => g.fullName || g.username);\n+  // Sort custom groups by name.\n+  const customGroups = _.sortBy(customGroupsUnsorted, g => g.fullName || g.username);\n \n   function makeGroupRows(groups: GroupAndStats[]) {\n-    return groups.map((g: GroupAndStats) => {\n-      const numMembers = !g.stats ? null :\n-        r.span({}, g.stats.numMembers + \" members. \");  // I18N\n-      const youreAMember = !_.includes(me.myGroupIds, g.id) ? null :\n+    return groups.map((gs: GroupAndStats) => {\n+      const numMembers = !gs.stats ? null :\n+        r.span({}, gs.stats.numMembers + \" members. \");  // I18N\n+      const youreAMember = !_.includes(me.myGroupIds, gs.id) ? null :\n         r.span({}, \"You're a member.\"); // I18N\n \n       return (\n-        r.li({ key: g.id, className: 's_Gs_G' },\n-          LinkUnstyled({ to: GroupsRoot + g.username, className: 's_Gs_G_L' },\n-            UserName({ user: g, store, makeLink: false, onClick: null })),\n+        r.li({ key: gs.id, className: 's_Gs_G' },\n+          LinkUnstyled({ to: GroupsRoot + gs.username, className: 's_Gs_G_L' },\n+            UserName({ user: gs, store, makeLink: false, onClick: null })),\n           r.p({ className: 's_Gs_G_Stats' },\n             numMembers, youreAMember)));\n     });"
    },
    {
      "sha": "3aa46de1ff4de2b66290d9a9cc2552e2b0ee13e8",
      "filename": "client/app-more/users/user-preferences.more.ts",
      "status": "modified",
      "additions": 20,
      "deletions": 11,
      "changes": 31,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-more/users/user-preferences.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-more/users/user-preferences.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/users/user-preferences.more.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -509,27 +509,27 @@ const NotfPrefsTab = createFactory({\n     // and notification settings per category?\n     // Then there's space for adding text like \"Inherited from <group name>\"\n     // next to a category name and notf level. So it'll be clear\n-    // to people why their notf settings might be differetn from\n+    // to people why their notf settings might be different from\n     // the defaults.\n     //\n-    // And, is this list-categories-first approch more user friendly?\n+    // Also, this list-categories-first approch is more user friendly?\n+    // (Instead of notf levels first.)\n     // Because then, if the staff wants to subscribe a group or a user\n     // to a category, they need to just click the per category notf\n     // settings dropdown. Rather than (the Discourse approach) remembering\n-    // and starting typing the category name in a multi select.\n+    // and starting typing the category name in a multi select. ...\n     //\n-    // (Later: If a site has surprisingly many categories, then, can add\n-    // a filter-categories-by-name filter. Or if many sub categories,\n-    // collapse/open them.)\n+    // (...Later: In the rare cases when a site has surprisingly many\n+    // categories, then, can add a filter-categories-by-name filter. Or if\n+    // many sub categories, collapse/open them.)\n \n     const categories: Category[] = membersPrefs.categoriesMaySee;\n     const perCategoryNotfLevels =\n         r.ul({},\n           categories.map((category: Category) => {\n-            const target = { pagesInCategoryId: category.id };\n+            const target: PageNotfPrefTarget = { pagesInCategoryId: category.id };\n             const effPref = pageNotfPrefTarget_findEffPref(target, store, membersPrefs);\n             const isUsingInheritedLevel = !effPref.notfLevel;\n-              //effPref.inheritedNotfPref && effPref.inheritedNotfPref.notfLevel === effPref.notfLevel;\n             const inheritedWhy = !isUsingInheritedLevel ? null :\n                 makeWhyNotfLvlInheritedExpl(effPref, ppsById);\n             return r.li({ key: category.id, className: 's_UP_Prfs_Ntfs_Cs_C e_CId-' + category.id },\n@@ -692,7 +692,7 @@ const AccountTabForGroup = React.createFactory<any>(function(props: { member: Gr\n     });\n   }\n \n-  const dangerZone = !me.isAdmin ? null : (    // +  || group.isDeleted\n+  const dangerZone = !me.isAdmin ? null : (\n     rFragment({},\n       r.h3({ style: { marginBottom: '1.3em' }}, t.upp.DangerZone),\n       Button({ onClick: deleteGroup, className: 'e_DlAcct' }, \"Delete this group\"))); //  I18N  t.upp.DeleteAccount)));\n@@ -929,7 +929,7 @@ const AccountTab = createFactory({\n     const dangerZone = user.deletedAt || (me.id !== user.id && !me.isAdmin) ? null : (\n       rFragment({},\n         r.h3({ style: { marginBottom: '1.3em' }}, t.upp.DangerZone),\n-        Button({ onClick: this.deleteUser }, t.upp.DeleteAccount)));\n+        Button({ onClick: this.deleteUser, className: 'e_DlAcct' }, t.upp.DeleteAccount)));\n \n     return (\n       r.div({ className: 's_UP_EmLg' },\n@@ -960,6 +960,12 @@ const UiPrefsTab = React.createFactory(\n   const me: Myself = props.store.me;\n   const user: UserInclDetails = props.user;\n \n+  const myId = React.useRef(me.id);  // COULD break out this + useEffect to  useMyId ? Hmm\n+  React.useEffect(() => {\n+    myId.current = me.id;\n+    return () => myId.current = null;\n+  }, [me.id]);\n+\n   if (user_isGuest(user))\n     return r.p({}, \"Cannot set UI preferences for guests.\");\n \n@@ -982,7 +988,10 @@ const UiPrefsTab = React.createFactory(\n     try {\n       prefsJson = JSON.parse(prefsText)\n       setSavingStatus(1);\n-      Server.saveUiPrefs(user.id, prefsJson, () => setSavingStatus(2));\n+      Server.saveUiPrefs(user.id, prefsJson, () => {\n+        if (myId.current !== me.id) return;\n+        setSavingStatus(2);\n+      });\n     }\n     catch (ex) {\n       setBadJsonError(true);"
    },
    {
      "sha": "feb8c073d19daeaf40de54a5e35adfccedccc27f",
      "filename": "client/app-more/users/users-page.more.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-more/users/users-page.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-more/users/users-page.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/users/users-page.more.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -190,7 +190,7 @@ const UserPageComponent = createReactClass(<any> {\n     const linkStart = pathToUser + '/';\n \n     const membersNavItem = !user.isGroup ? null :\n-      LiNavLink({ to: linkStart + 'members', className: 'e_UP_MembrsB' }, \"Members\"); // I18N\n+      LiNavLink({ to: linkStart + 'members', className: 'e_UP_MbrsB' }, \"Members\"); // I18N\n \n     const activityNavItem = user.isGroup ? null :\n       LiNavLink({ to: linkStart + 'activity', className: 'e_UP_ActivityB' }, t.Activity);\n@@ -350,7 +350,7 @@ const AvatarAboutAndButtons = createComponent({\n     }\n \n     const deletedInfo = !isGone ? null :\n-      r.p({}, t.upp.DeactOrDeld);\n+      r.p({ className: 'e_ActDd' }, t.upp.DeactOrDeld);\n \n     const isMe = me.id === user.id;\n "
    },
    {
      "sha": "ea0fedc9e01aa64c15d6d8e70483afe40a172aaf",
      "filename": "client/app-slim/ReactStore.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/ReactStore.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/ReactStore.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/ReactStore.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -55,11 +55,17 @@ export function useStoreState(): [Store, () => void] {\n   // Remember the setter, so we can call it whenever the store changes.\n   // Also, forget it, when unmounting.\n   React.useEffect(function() {\n-    if (useStoreStateSetters.indexOf(setState) === -1) {\n-      useStoreStateSetters.push(setState);\n-    }\n+    // @ifdef DEBUG\n+    const index = useStoreStateSetters.indexOf(setState);\n+    dieIf(index !== -1, 'TyE506MRS24');\n+    // @endif\n+    useStoreStateSetters.push(setState);\n+\n     return function() {\n       const index = useStoreStateSetters.indexOf(setState);\n+      // @ifdef DEBUG\n+      dieIf(index === -1, 'TyE03HMAD24');\n+      // @endif\n       if (index >= 0) {\n         useStoreStateSetters.splice(index, 1);\n       }\n@@ -397,10 +403,10 @@ ReactDispatcher.register(function(payload) {\n   ReactStore.emitChange();   // old, for non-hooks based code ...\n \n   // Ensure new hooks based code cannot 'cheat' by updating things in-place:\n-  // (Also, apparently React.useEffect sometimes won't run, unless `setStore()`\n-  // below gets a new object — if reusing the same obj, the useEffect aren't called.)\n-  // COULD clone more nested objs (not only `me`), to ensure no hooks code relies\n-  // on in-place updates.\n+  // (COULD clone more nested objs (not only `me`), to ensure no hooks code relies\n+  // on in-place updates.)\n+  // Also, apparently React.useEffect:s sometimes won't run, unless setStore()\n+  // below gets a new object. If reusing the same obj, the useEffect fn:s aren't called.\n   const meCopy: Myself = { ...store.me };\n   const storeCopy: Store = { ...store, me: meCopy };\n "
    },
    {
      "sha": "b30ebf76a4c8af9c6590e128deafda3c62350d09",
      "filename": "client/app-slim/Server.ts",
      "status": "modified",
      "additions": 17,
      "deletions": 11,
      "changes": 28,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/Server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/Server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/Server.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -151,7 +151,8 @@ function trySendBeacon(url, data) {\n \n // If needed later:\n // loadCss: use https://github.com/filamentgroup/loadCSS/blob/master/src/loadCSS.js\n-\n+// SMALLER_BUNDLE use Bliss.load() instead? Works for both js and css.\n+//\n export function loadJs(src: string, onOk?: () => void, onError?: () => void): any {  // : Promise, but compilation error\n   const promise = new Promise(function (resolve, reject) {\n     const scriptElem = document.createElement('script');\n@@ -288,8 +289,8 @@ function get(uri: string, successFn: GetSuccessFn, errorFn?: GetErrorFn, options\n \n   addAnyNoCookieHeaders(headers);\n \n-  const promiseWithXhr = <any> Bliss.fetch(origin() + uri, {  // hack [7FKRPQ2T0]\n-    method: 'GET',\n+  const promiseWithXhr = <any> Bliss.fetch(origin() + uri, {  // hack, search for \"Hack\" in fetch()\n+    method: 'GET',                                            // in client/third-party/bliss.shy.js\n     headers: headers,\n     timeout: options.timeout,\n   });\n@@ -735,22 +736,22 @@ export function stopImpersonatingReloadPage() {\n \n \n export function loadGroups(onDone: (_: Group[]) => void) {\n-  get('/-/load-groups', r => onDone(r));\n+  get('/-/load-groups', onDone);\n }\n \n \n export function createGroup(newGroup: Group, onDone: (newGroup: Group) => void) {\n-  postJsonSuccess('/-/create-group', r => onDone(r), newGroup);\n+  postJsonSuccess('/-/create-group', onDone, newGroup);\n }\n \n \n export function deleteGroup(groupIdToDelete: UserId, onDone: (deletedGroup: Group) => void) {\n-  postJsonSuccess('/-/delete-group', r => onDone(r), { groupIdToDelete });\n+  postJsonSuccess('/-/delete-group', onDone, { groupIdToDelete });\n }\n \n \n export function listGroupMembers(groupId: UserId, onDone: (_: Participant[]) => void) {\n-  get(`/-/list-group-members?groupId=${groupId}`, r => onDone(r));\n+  get(`/-/list-group-members?groupId=${groupId}`, onDone);\n }\n \n \n@@ -918,7 +919,14 @@ export function savePageNotfPrefUpdStoreIfSelf(memberId: UserId, target: PageNot\n     const store: Store = ReactStore.allData();\n     const me: Myself = store.me;\n     if (memberId === me.id) {\n-      const pageData: MyPageData = me.myDataByPageId[target.pageId];\n+      let pageData: MyPageData = me.myDataByPageId[target.pageId];\n+      if (!pageData && response.newlyCreatedPageId) {\n+        // Add page data for the new page, so it's there if we need to e.g. render a\n+        // notf pref button title (then, need to know our page notf level) [TyT305MHRTDP23].\n+        // The id will remain EmptyPageId = '0', not newlyCreatedPageId, until page reload.\n+        pageData = makeNoPageData();\n+      }\n+\n       let newMe: Myself;\n       if (pageData) {\n         newMe = me_copyWithNewPageData(me, { ...pageData, myPageNotfPref: notfPref })\n@@ -927,9 +935,7 @@ export function savePageNotfPrefUpdStoreIfSelf(memberId: UserId, target: PageNot\n         const updPrefs = pageNotfPrefs_copyWithUpdatedPref(me.myCatsTagsSiteNotfPrefs, notfPref);\n         newMe = { ...me, myCatsTagsSiteNotfPrefs: updPrefs };\n       }\n-      if (newMe) {\n-        ReactActions.patchTheStore({ me: newMe });\n-      }\n+      ReactActions.patchTheStore({ me: newMe });\n     }\n     if (onDone) {\n       onDone();"
    },
    {
      "sha": "4e0e1e12766fd818fe51bd439e149ffc5c349bd4",
      "filename": "client/app-slim/if-in-iframe.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/if-in-iframe.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/if-in-iframe.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/if-in-iframe.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -126,9 +126,9 @@ function syncDocSizeWithIframeSize() {\n     // Make space for any notf prefs dialog — it can be taller than the emb cmts\n     // iframe height, before there're any comments. [IFRRESIZE]\n     const anyDialog = $first('.esDropModal_content');\n-    const dialogHeight = anyDialog ? anyDialog.clientHeight + 30 : 0;\n+    const dialogHeightPlusPadding = anyDialog ? anyDialog.clientHeight + 30 : 0;\n \n-    const currentHeight = Math.max(currentDiscussionHeight, dialogHeight);\n+    const currentHeight = Math.max(currentDiscussionHeight, dialogHeightPlusPadding);\n \n     if (lastWidth === currentWidth && lastHeight === currentHeight)\n       return;"
    },
    {
      "sha": "a58b2b9d666e562db76acf0be065d2cb1e80fc86",
      "filename": "client/app-slim/model.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/model.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/model.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/model.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -378,7 +378,7 @@ interface MyPageData {\n }\n \n \n-interface OwnPageNotfPrefs {\n+interface OwnPageNotfPrefs {  // RENAME to MembersPageNotfPrefs?\n   id?: UserId;\n   myDataByPageId?: { [id: string]: MyPageData };\n   myCatsTagsSiteNotfPrefs: PageNotfPref[];\n@@ -471,10 +471,11 @@ interface PageNotfPrefTarget {\n \n interface EffPageNotfPref extends PageNotfPrefTarget {\n   // Will be different from the user one is logged in as, if one is a staff member,\n-  // and edits another member's (e.g. a group's) notfs settings.\n+  // and edits another member's (e.g. a group's) notf settings.\n   forMemberId: UserId;\n \n   // Defined, if the member has specified a notf level directly for the PageNotfPrefTarget.\n+  // If undefined, `inheritedNotfPref` instead determines the notf level.\n   notfLevel?: PageNotfLevel;\n \n   // Notf prefs are inherited structure wise: pages inherit from sub categories, and\n@@ -1171,7 +1172,7 @@ interface Group extends Member {\n \n interface GroupAndStats extends Group {\n   // Some people (like strangers and new members) might not get to know details\n-  // about a group, only its name.\n+  // about a group, only its name. Then no stats here.\n   stats?: GroupStats;\n }\n \n@@ -1761,10 +1762,18 @@ interface ListDraftsResponse {\n }\n \n interface PageNotfPrefsResponse extends OwnPageNotfPrefs {\n+  // Categories the member whose profile you're looking at, may see. Assuming you're\n+  // a staff user looking at another user's profile.\n   categoriesMaySee: Category[];\n+\n+  // Categories you may see but that the member whose profile you're looking at, may not see.\n+  // If you're looking at your own profle, this'll be empty.\n   categoriesMayNotSee: Category[];\n+\n+  // Only for displaying names of groups whose notf prefs are being inherited.\n   groups: Group[];\n-  // Later: Category and group names, so can lookup ther names, for display.\n+\n+  // Later: Category names too, so can display their names (not only group names).\n }\n \n "
    },
    {
      "sha": "9ce807244a16d34657234acbcb3c4091eb14fc42",
      "filename": "client/app-slim/notification/notf-prefs-button.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/notification/notf-prefs-button.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/notification/notf-prefs-button.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/notification/notf-prefs-button.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -24,7 +24,9 @@\n \n \n export function PageNotfPrefButton(props: {\n-      target: PageNotfPrefTarget, store: Store, ownPrefs: OwnPageNotfPrefs, ppsById?: PpsById,\n+      target: PageNotfPrefTarget, store: Store,\n+      ownPrefs: OwnPageNotfPrefs,  // RENAME to membersPrefs\n+      ppsById?: PpsById,\n       saveFn?: (notfLevel: PageNotfLevel) => void }) {\n   const effPref = pageNotfPrefTarget_findEffPref(props.target, props.store, props.ownPrefs);\n   return ("
    },
    {
      "sha": "308136a4ec70b343c67beb1de2f39b7fd08866dc",
      "filename": "client/app-slim/oop-methods.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/oop-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/oop-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/oop-methods.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -137,8 +137,8 @@ export function pageNotfPrefTarget_findEffPref(\n     if (myPageData.myPageNotfPref) {\n       result.notfLevel = myPageData.myPageNotfPref.notfLevel;\n       // Continue below to find out if we're also inheriting a notf level\n-      // from a category or group (although then it's not in use, since we've\n-      // explicitly specified a notf level for this page).\n+      // from a category or group. (If so, then it's not in use — since we've\n+      // now found a notf level explicitly for this page, on the line above).\n     }\n \n     const maxGroupsPref = maxPref(myPageData.groupsPageNotfPrefs);"
    },
    {
      "sha": "207ed630595e9fbf00b3df750bbfe5453dc9053d",
      "filename": "client/app-slim/page/hacks.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/page/hacks.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/page/hacks.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/hacks.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -63,7 +63,7 @@ export const ExtReactRootNavComponent = createReactClass({\n \n \n export function reactRouterLinkifyTopHeaderLinks() {\n-  Bliss.delegate(document, 'click', '.esPageHeader a[href]', function(event) {\n+  Bliss.delegate(document.body, 'click', '.esPageHeader a[href]', function(event) {\n     const elem = <HTMLLinkElement> event.target;\n     if (!elem || !elem.href || !elem.href.length) return;\n     // Try internal single-page-app navigation, if it's a link to a page here on the same site."
    },
    {
      "sha": "325633510f7e269a39c4173d748841292501255f",
      "filename": "client/app-slim/prelude.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/prelude.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/prelude.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/prelude.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -319,12 +319,14 @@ export function parsePostNr(postElem: HTMLElement): number {\n \n \n /**\n+ * Calls the callback if the event happens on the selector, unless on the skipSelector.\n+ *\n  * elem.matches('...:not(.aaa, .bbb)') doesn't work, because of the ','. Can use this\n  * fn instead: set skipSelector to '.aaa, .bbb'.\n  */\n export function ifEventOnNotThen(event: string, selector: string,\n       skipSelector: string, callback?: (elem: HTMLElement, event) => void) {\n-  Bliss.delegate(document, event, selector, function(event) {\n+  Bliss.delegate(document.body, event, selector, function(event) {\n     const elem: HTMLElement = <HTMLElement> event.target;\n     if (!elem) return;\n     if (skipSelector) {"
    },
    {
      "sha": "32166e8d5f3bd8c2f2e49e9a7c1ae8e27df04867",
      "filename": "client/app-slim/sidebar/sidebar.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/sidebar/sidebar.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/sidebar/sidebar.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/sidebar/sidebar.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -553,7 +553,6 @@ export var Sidebar = createComponent({  // RENAME to ContextBar\n \n     const addMorePeopleButton = !page_isGroupTalk(page.pageRole) || !isStaffOrMyPage ? null :\n         r.button({ className: 'btn btn-default', onClick: () => {\n-              const page: Page = store.currentPage;\n               morebundle.openAddPeopleDialog(page.pageMemberIds, (newIds: UserId[]) => {\n                 Server.addUsersToPage(newIds, () => {\n                   util.openDefaultStupidDialog({ body: \"Now I've added him/her/them. Currently you need \" +"
    },
    {
      "sha": "b6efdc4070f335b17695203f69627dd819d6252d",
      "filename": "client/app-slim/topbar/topbar.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/topbar/topbar.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/topbar/topbar.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/topbar/topbar.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -302,7 +302,7 @@ export const TopBar = createComponent({\n         backToSiteButton = t.tb.BackFromUsr;\n         customTitle = path === GroupsRoot\n             ? \"Groups:\" // I18N t.Groups;\n-            : (path.search(GroupsRoot) === 0\n+            : (path.startsWith(GroupsRoot)\n                 ? LinkUnstyled({ to: GroupsRoot }, \"Groups:\") // I18N t.Groups;\n                 : t.tb.AbtUsr);\n       }"
    },
    {
      "sha": "8d3af50db9f112da3b14e18d6c363ab74c7aeefa",
      "filename": "client/app-slim/utils/DropdownModal.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/utils/DropdownModal.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/utils/DropdownModal.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/utils/DropdownModal.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -145,8 +145,8 @@ export const DropdownModal = createComponent({\n       rect.bottom -= winOfsSize.top;\n \n       const rectHeight = rect.bottom - rect.top;\n-      const visibleHeight = winOfsSize.iframeVisibleHeight || winOfsSize.height;\n-      if (rectHeight >= visibleHeight) {\n+      const winVisibleHeight = winOfsSize.iframeVisibleHeight || winOfsSize.height;\n+      if (rectHeight >= winVisibleHeight) {\n         // The dialog is larger than the window. Place it at the top, so if resizing the window\n         // (it'll expand downwards), the hidden part of the dialog becomes visible.\n         // Important for blog comments, if one opens the notf prefs dialog before there're\n@@ -156,6 +156,7 @@ export const DropdownModal = createComponent({\n       else if (rect.bottom > winOfsSize.height) {\n         this.fitInWindowVertically(winOfsSize);\n       }\n+\n       // (This right-&-left stuff works also in iframes.)\n       if (rect.right > window.innerWidth) {\n         this.moveLeftwardsSoFitsInWindow();\n@@ -165,6 +166,7 @@ export const DropdownModal = createComponent({\n         // to the left, so 6px not 0px here:\n         content.style.left = '6px';\n       }\n+\n       this.setState({ fitsInDisplay: true });\n     }, 0);\n   },"
    },
    {
      "sha": "fbb1aa0d1f608021e83b15dba328460f5c070146",
      "filename": "client/app-slim/widgets.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/widgets.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-slim/widgets.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/widgets.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -143,7 +143,7 @@ function makeWidget(what, spaceWidgetClasses: string, extraProps?) {\n     // in a different React root. The admin app is it's own SPA [6TKQ20] so, when in the admin area,\n     // links to user profiles and discussions, are external. And vice versa.\n     if (what === r.a && !newProps.onClick) {\n-      let isExternal = newProps.ext || eds.isInEmbeddedCommentsIframe;   // CLEAN_UP remove isInEmbeddedCommentsIframe? not set server side, works anyway, so cannot be needed? [2KBFU4]\n+      let isExternal = newProps.ext || eds.isInEmbeddedCommentsIframe;\n       // @ifdef DEBUG\n       dieIf(isServerSide() && eds.isInEmbeddedCommentsIframe, 'TyE2KWT05');\n       // @endif"
    },
    {
      "sha": "21ec13e8daada1dbf316a216c4c02a50a54a6272",
      "filename": "client/app-staff/admin/admin-app.staff.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 13,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-staff/admin/admin-app.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/app-staff/admin/admin-app.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-staff/admin/admin-app.staff.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -333,19 +333,7 @@ const AdminAppComponent = createReactClass(<any> {\n \n \n \n-/*\n-function GroupsTab(childProps) {\n-  const bp = '/-/admin/groups/';  // groups base path\n-  return (\n-      r.div({},\n-        r.div({ className: 'dw-sub-nav' },\n-          r.ul({ className: 'nav nav-pills' },\n-            LiNavLink({ to: bp + 'built-in', className: 'e_BltInL' }, \"Built-In\"))),\n-        r.div({ className: 's_A_Gs' },\n-          Switch({},\n-            Route({ path: bp + 'built-in', render: () => BuiltInGroupsPanel(childProps) }),\n-            ))));\n-}\n+/*  Old groups tab\n \n // Keep this for now. Can copy-paste these descriptions into built-in groups'\n // about texts?"
    },
    {
      "sha": "17f31987ae0a24bd7114664d3aca494106ce0dbc",
      "filename": "client/third-party/bliss.shy.js",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/client/third-party/bliss.shy.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/client/third-party/bliss.shy.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/third-party/bliss.shy.js?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -4,7 +4,7 @@\n // The MIT License (MIT)\n // Copyright (c) 2015 Lea Verou.\n //\n--// Parts Copyright (c) 2019 Kaj Magnus Lindberg, search for [BLISSTY] to find my change.\n+// Parts Copyright (c) 2019 Kaj Magnus Lindberg, search for [BLISSTY] to find my change.\n \n (function() {\n \"use strict\";"
    },
    {
      "sha": "80f96f569383d694b29a2c0e97743b8298916b30",
      "filename": "docs/e2e-tests-map.txt",
      "status": "modified",
      "additions": 26,
      "deletions": 4,
      "changes": 30,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/docs/e2e-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/docs/e2e-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-map.txt?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -99,7 +99,7 @@ unapproved comments -\n     staff can approve:  (2WY0)\n     staff can delete:\n \n-profile page -\n+profile page, user:\n   upload photo:  (8PK2)\n   edit full name:\n   change username:\n@@ -118,20 +118,40 @@ profile page -\n     won't list posts from pages one may not see:\n \n   list login methods:\n-          - create-site-github-oauth-uppercase-email.test.ts  [TyT4AR8GFAH]\n+          - create-site-github-oauth-uppercase-email.test.ts  TyT4AR8GFAH\n+\n+  self delete, gdpr:\n+          - user-self-delete-upd-groups.2browsers.test.ts  TyT6DMSNW3560\n+\n+\n+profile page, a group:\n+  edit username:\n+          - group-profile-change-things.2browsers.test.ts  TyT5MS5TWV0\n+  notf prefs for groups:\n+          - notf-prefs-custom-groups.2browsers.test.ts  TyT60MRAT24\n \n-  notf prefs for groups,\n   add/remove group members:\n           - notf-prefs-custom-groups.2browsers.test.ts  TyT60MRAT24\n+          - group-mentions-custom-group.2browsers.test.ts  TyT5BMRP2058\n+          - user-self-delete-upd-groups.2browsers.test.ts  TyT6DMSNW3560\n \n groups:\n   list/create/delete groups,\n-  add/remove members,\n   conf group cat notf prefs,\n   inherit group's notf prefs,\n   override group's notf prefs:\n           - notf-prefs-custom-groups.2browsers.test.ts  TyT60MRAT24\n \n+  add/remove members:\n+          - notf-prefs-custom-groups.2browsers.test.ts  TyT60MRAT24\n+          - user-self-delete-upd-groups.2browsers.test.ts  TyT6DMSNW3560\n+\n+  update when user deleted:\n+          - user-self-delete-upd-groups.2browsers.test.ts  TyT6DMSNW3560\n+  @mention:\n+          - group-mentions-built-in-groups.2browsers.test.ts  TyT4AWJL208R\n+          - group-mentions-custom-group.2browsers.test.ts  TyT5BMRP2058\n+\n invites -\n   before accepts:\n     signs up:\n@@ -374,6 +394,8 @@ embedded comments:\n           - \"all\" e2e emb cmts tests\n   start with Like vote:\n           - embedded-comments-vote-first.test.ts  TyT2AKBS056\n+  start with configuring one's notf prefs:\n+          - embedded-comments-conf-notf-pref-first.test.ts  TyT502HMSJP3\n   login via metabar:\n           - embedded-comments-vote-first.test.ts  TyT2AKBS056\n   click login:"
    },
    {
      "sha": "e561a372a57ee8b545b0fcc4fdf1437ca9026c50",
      "filename": "docs/maybe-do-later.txt",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/docs/maybe-do-later.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/docs/maybe-do-later.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/maybe-do-later.txt?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -176,6 +176,14 @@ wouldn't result in unexpected weird things. And who should be notified about rep\n a test comment made when impersonating a group?\n (Everyone in the group? No, they'd get annoyed. Only the group then?)\n \n+[inv2groups]\n+Invite people to groups and custom landing pages.\n+\n+[grp-mbr-title]\n+Show a title, like \"Team\" or \"Support\" or \"Volunteer\" or \"Students 2019\",\n+depending on which custom group one is in.  Need clear caches after?\n+That is, both: emptyCacheImpl(tx)  and  memCache.clearSingleSite(siteId).\n+\n [group-feats]\n Add group visibility settings. And who-may-join feautre, and Join/Leave group buttons.\n + other features, look at Discourse."
    },
    {
      "sha": "624a28a214418cef4fc31da8023f082e9d8b8972",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 85,
      "changes": 91,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ed-core/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ed-core/src/main/scala/com/debiki/core/SiteTransaction.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/SiteTransaction.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -479,10 +479,11 @@ trait SiteTransaction {\n   def loadOwner(): Option[UserInclDetails]\n \n   def loadGroupMembers(groupId: UserId): Vector[Participant]\n+  /** Returns the ids of the members that got added (i.e. who were not already members). */\n   def addGroupMembers(groupId: UserId, memberIdsToAdd: Set[UserId]): Set[UserId]\n   def removeGroupMembers(groupId: UserId, memberIdsToRemove: Set[UserId])\n   def removeAllGroupParticipants(groupId: UserId)\n-  def removeDeletedMemberFromAllGroups(memberId: UserId)  /// ctn here\n+  def removeDeletedMemberFromAllGroups(memberId: UserId)\n \n   def insertGroup(group: Group)\n   def deleteGroup(groupId: UserId)\n@@ -495,98 +496,18 @@ trait SiteTransaction {\n   }\n \n   def loadGroupIdsMemberIdFirst(memberOrGroupInclDetails: MemberInclDetails): Vector[UserId] = {\n-    val user = memberOrGroupInclDetails match {\n+    val memberNoDetails = memberOrGroupInclDetails match {\n       case m: UserInclDetails => m.briefUser\n       case g: Group => g\n     }\n-    loadGroupIdsMemberIdFirst(user)\n+    loadGroupIdsMemberIdFirst(memberNoDetails)\n   }\n \n   /** Loads ids of groups the member is in. Returns them, prefixed with\n     * the members own id, first (guests aren't members; for them,\n-    * only the EveryoneId is returned).\n+    * only Vector(EveryoneId) is returned).\n     */\n-  def loadGroupIdsMemberIdFirst(ppt: Participant): Vector[UserId] = {\n-    val builtInGroups = ppt match {\n-      case _: Guest | UnknownParticipant => return Vector(Group.EveryoneId)\n-      case u: User => getBuiltInGroupIdsForUser(u)\n-      case g: Group => getBuiltInGroupIdsForGroup(g)\n-    }\n-\n-    val customGroups = loadCustomGroupsFor_impl(ppt)\n-    ppt.id +: (builtInGroups ++ customGroups)\n-  }\n-\n-\n-  def loadCustomGroupsFor_impl(user: Participant): Vector[UserId]  // CLEAN_UP move to UserSiteDaoMixin [50BAD25]\n-\n-\n-    // For now. Later, also do db request and add custom groups.  [7JKC1104]\n-  private def getBuiltInGroupIdsForUser(member: User): Vector[UserId] = {  // move to UserSiteDaoMixin [50BAD25]\n-    val G = Group\n-\n-    if (member.isAdmin)\n-      return Vector(G.AdminsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n-        G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-\n-    if (member.isModerator)\n-      return Vector(G.ModeratorsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n-        G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-\n-    member.effectiveTrustLevel match {\n-      case TrustLevel.NewMember =>\n-        Vector(G.AllMembersId, G.EveryoneId)\n-      case TrustLevel.BasicMember =>\n-        Vector(G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case TrustLevel.FullMember =>\n-        Vector(G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case TrustLevel.TrustedMember =>\n-        Vector(G.TrustedMembersId,\n-          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case TrustLevel.RegularMember =>\n-        Vector(G.RegularMembersId, G.TrustedMembersId,\n-          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case TrustLevel.CoreMember =>\n-        Vector(G.CoreMembersId, G.RegularMembersId, G.TrustedMembersId,\n-          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-    }\n-  }\n-\n-\n-  private def getBuiltInGroupIdsForGroup(group: Group): Vector[UserId] = {  // move to UserSiteDaoMixin [50BAD25]\n-    // For now. Later, also do db request and add custom groups.  [7JKC1104]\n-    val G = Group\n-    group.id match {\n-      case G.EveryoneId =>\n-        Vector(G.EveryoneId)\n-      case G.AllMembersId =>\n-        Vector(G.AllMembersId, G.EveryoneId)\n-      case G.BasicMembersId =>\n-        Vector(G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.FullMembersId =>\n-        Vector(G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.TrustedMembersId =>\n-        Vector(G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.RegularMembersId =>\n-        Vector(G.RegularMembersId, G.TrustedMembersId,\n-          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.CoreMembersId =>\n-        Vector(G.CoreMembersId, G.RegularMembersId, G.TrustedMembersId,\n-          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.StaffId =>\n-        Vector(G.StaffId, G.CoreMembersId, G.RegularMembersId,\n-          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.ModeratorsId =>\n-        Vector(G.ModeratorsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n-          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case G.AdminsId =>\n-        Vector(G.AdminsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n-          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n-      case _ =>\n-        // Custom groups are members, so should be in the all-members group, right.\n-        Vector(G.AllMembersId, G.EveryoneId)\n-    }\n-  }\n+  def loadGroupIdsMemberIdFirst(ppt: Participant): Vector[UserId]\n \n \n   def upsertPageNotfPref(notfPref: PageNotfPref)"
    },
    {
      "sha": "e232e7ec25b970766558d2aff942eaeb0101d7c0",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/package.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -224,6 +224,11 @@ package object core {\n   }\n \n \n+  type ReqrId = Who // RENAME to ReqrIds? (with an ...s)\n+                    // ... because is more than one id (user id, ip, bowser id cookie, etc)\n+\n+  RENAME // to ReqrId? = \"Requester id\" and that's what it is: the user id plus hens browser id data.\n+  // I find \"who\" being confusing as to whom it refers to.\n   case class Who(id: UserId, browserIdData: BrowserIdData) {\n     def ip: String = browserIdData.ip\n     def idCookie: Option[String] = browserIdData.idCookie\n@@ -915,6 +920,7 @@ package object core {\n   def COULD = ()          // Could do this, but not important right now, can wait a year or two.\n   def ANNOYING = ()       // Something annoying that would be good to fix, not important though\n   def SHOULD_LOG_STH = () // If an info/debug message ought to be logged here.\n+  def AUDIT_LOG = ()      // Should add audit log entry\n   def REFACTOR = ()       // The code can be refactored. Also search for \"[refactor]\".\n   def RENAME = ()         // Something ought to be renamed.\n   def OPTIMIZE = ()"
    },
    {
      "sha": "5172c3f3dfcd15c5dbf56eb3845731b2311e6233",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/user.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ed-core/src/main/scala/com/debiki/core/user.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ed-core/src/main/scala/com/debiki/core/user.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/user.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -348,6 +348,8 @@ case object Participant {\n   def isBuiltInGroup(id: UserId): Boolean =\n     Group.AllMembersId <= id && id <= Group.AdminsId\n \n+  def isBuiltInParticipant(id: UserId): Boolean = MaxCustomGuestId < id && id < LowestAuthenticatedUserId\n+\n   def isOkayGuestId(id: UserId): Boolean =\n     id == UnknownUserId || id <= MaxCustomGuestId\n \n@@ -1201,7 +1203,7 @@ case class Group(  // [exp] missing: createdAt, add to MemberInclDetails & Parti\n   override def effectiveTrustLevel: TrustLevel = grantsTrustLevel getOrElse TrustLevel.NewMember\n \n   override def usernameOrGuestName: String = theUsername\n-  override def nameOrUsername: String = if (name.isEmpty) theUsername else name.get\n+  override def nameOrUsername: String = name getOrElse theUsername\n \n   //def canonicalUsername: String = User.makeUsernameCanonical(theUsername)   [CANONUN]\n \n@@ -1249,7 +1251,7 @@ object Group {\n   val BasicMembersId = 12\n   val FullMembersId = 13\n   val TrustedMembersId = 14\n-  val RegularMembersId = 15\n+  val RegularMembersId = 15  ; RENAME // to TrustedRegulars. In typescript  model.ts  too\n   val CoreMembersId = 16\n \n   /** Includes all admins and all moderators. */\n@@ -1261,6 +1263,10 @@ object Group {\n \n   val AdminsId = 19\n \n+  val NumBuiltInGroups: Int = AdminsId - EveryoneId + 1\n+\n+  def isBuiltInGroupId(groupId: UserId): Boolean = EveryoneId <= groupId && groupId <= AdminsId\n+  def isStaffGroupId(groupId: UserId): Boolean = StaffId <= groupId && groupId <= AdminsId\n \n   dieUnless(AllMembersId == TrustLevel.NewMember.toInt + 10, \"EdE7LPKW20\")\n   dieUnless(CoreMembersId == TrustLevel.CoreMember.toInt + 10, \"EdE7LPKW21\")"
    },
    {
      "sha": "10ebf14a1efbcfaf4587d859acc3b710e5951583",
      "filename": "modules/ty-dao-rdb/src/main/resources/db/migration/y2019/v382__group_members.sql",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ty-dao-rdb/src/main/resources/db/migration/y2019/v382__group_members.sql",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ty-dao-rdb/src/main/resources/db/migration/y2019/v382__group_members.sql",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ty-dao-rdb/src/main/resources/db/migration/y2019/v382__group_members.sql?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -62,7 +62,7 @@ create table group_participants3 (\n \n   constraint groupparticipants_groupid_ppid_p primary key (site_id, group_id, participant_id),\n \n-  -- ix: groupparticipants_p\n+  -- ix: groupparticipants_groupid_ppid_p\n   constraint groupparticipants_group_r_pps foreign key (\n       site_id, group_id) references users3 (site_id, user_id) deferrable,\n "
    },
    {
      "sha": "36acbf479eac8bb2e1e705c4371149d3b94a5d4b",
      "filename": "modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/LoginSiteDaoMixin.scala",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/LoginSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/LoginSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/LoginSiteDaoMixin.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -160,8 +160,8 @@ trait LoginSiteDaoMixin extends SiteTransaction {\n       case None =>\n         throw new QuickMessageException(\"Email hasn't been sent [TyEPWRST0SNT]\")\n       case Some(emailSentDate) =>\n-        if (emailSentDate.getTime + OneDayInMillis < loginAttempt.date.getTime)\n-          throw new QuickMessageException(\"Reset password link expired (after 24 hours) [TyEPWRSTEXP_]\")\n+        if (emailSentDate.getTime + 36 * OneHourInMillis < loginAttempt.date.getTime)\n+          throw new QuickMessageException(\"Reset password link expired (after 36 hours) [TyEPWRSTEXP_]\")\n     }\n \n     val user = loadUser(email.toUserId.get) getOrElse {\n@@ -173,7 +173,8 @@ trait LoginSiteDaoMixin extends SiteTransaction {\n       throw EmailAddressChangedException(email, user)\n \n \n-    updateSentEmail(email.copy(canLoginAgain = Some(loginAttempt.mayLoginAgain)))\n+    if (!loginAttempt.mayLoginAgain)\n+      updateSentEmail(email.copy(canLoginAgain = Some(false)))\n \n     val idtyWithId = IdentityEmailId(id = emailId, userId = user.id, emailSent = Some(email))\n     MemberLoginGrant(Some(idtyWithId), user, isNewIdentity = false, isNewMember = false)"
    },
    {
      "sha": "88cfb342abb0752ade3c6b4bc701155c2cef8dc1",
      "filename": "modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/UserSiteDaoMixin.scala",
      "status": "modified",
      "additions": 87,
      "deletions": 4,
      "changes": 91,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/UserSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/UserSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/UserSiteDaoMixin.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -153,6 +153,8 @@ trait UserSiteDaoMixin extends SiteTransaction {\n         loadMembersOfBuiltInGroup(modsOnly = true)\n       case Group.StaffId =>\n         loadMembersOfBuiltInGroup(staffOnly = true)\n+      case Group.EveryoneId =>\n+        loadMembersOfBuiltInGroup(everyone = true)\n       case trustLevelGroupId if trustLevelGroupId >= Group.AllMembersId\n                               && trustLevelGroupId <= Group.CoreMembersId =>\n         loadMembersOfBuiltInGroup(builtInGroup = Some(trustLevelGroupId))\n@@ -164,12 +166,13 @@ trait UserSiteDaoMixin extends SiteTransaction {\n \n   private def loadMembersOfBuiltInGroup(\n         adminsOnly: Boolean = false, modsOnly: Boolean = false, staffOnly: Boolean = false,\n+        everyone: Boolean = false,\n         builtInGroup: Option[UserId] = None): Vector[Participant] = {\n \n     import Group.{AdminsId, ModeratorsId => ModsId}\n \n     // Currently no good reason to load everyone incl *guests*.\n-    unimplementedIf(builtInGroup is Group.EveryoneId,\n+    unimplementedIf(everyone || builtInGroup.is(Group.EveryoneId),\n       \"Loading Everyone group members [TyE2ABKR05]\")\n \n     val values = ArrayBuffer[AnyRef](siteId.asAnyRef)\n@@ -198,6 +201,7 @@ trait UserSiteDaoMixin extends SiteTransaction {\n       from users3 u\n       where u.site_id = ?\n         and user_id >= ${Participant.LowestNormalMemberId}\n+        and deleted_at is null\n         and ($conditions)\"\"\"\n \n     runQueryFindMany(query, values.toList, rs => {\n@@ -298,6 +302,7 @@ trait UserSiteDaoMixin extends SiteTransaction {\n     runUpdateExactlyOneRow(sql, values)\n   }\n \n+\n   def deleteGroup(groupId: UserId) {\n     dieIf(groupId < LowestAuthenticatedUserId, \"TyE205ARGN3\")\n     val randomNumber = Prelude.nextRandomLong().toString.take(10)\n@@ -348,9 +353,21 @@ trait UserSiteDaoMixin extends SiteTransaction {\n   }\n \n \n-  // + move more stuff to here, [50BAD25].\n-  //\n-  def loadCustomGroupsFor_impl(ppt: Participant): Vector[UserId] = {\n+  def loadGroupIdsMemberIdFirst(ppt: Participant): Vector[UserId] = {\n+    val builtInGroups = ppt match {\n+      case _: Guest | UnknownParticipant => return Vector(Group.EveryoneId)\n+      case u: User => getBuiltInGroupIdsForUser(u)\n+      case g: Group => getBuiltInGroupIdsForGroup(g)\n+    }\n+\n+    val customGroups = loadCustomGroupsFor(ppt)\n+    // More specific first: the user henself, then custom groups. And AllMembers and Everyone\n+    // last — the least specific groups.\n+    ppt.id +: (customGroups ++ builtInGroups)\n+  }\n+\n+\n+  private def loadCustomGroupsFor(ppt: Participant): Vector[UserId] = {\n     val query = s\"\"\"\n         select group_id\n         from group_participants3\n@@ -364,6 +381,72 @@ trait UserSiteDaoMixin extends SiteTransaction {\n   }\n \n \n+  private def getBuiltInGroupIdsForUser(member: User): Vector[UserId] = {\n+    val G = Group\n+\n+    if (member.isAdmin)\n+      return Vector(G.AdminsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n+        G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+\n+    if (member.isModerator)\n+      return Vector(G.ModeratorsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n+        G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+\n+    member.effectiveTrustLevel match {\n+      case TrustLevel.NewMember =>\n+        Vector(G.AllMembersId, G.EveryoneId)\n+      case TrustLevel.BasicMember =>\n+        Vector(G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case TrustLevel.FullMember =>\n+        Vector(G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case TrustLevel.TrustedMember =>\n+        Vector(G.TrustedMembersId,\n+          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case TrustLevel.RegularMember =>\n+        Vector(G.RegularMembersId, G.TrustedMembersId,\n+          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case TrustLevel.CoreMember =>\n+        Vector(G.CoreMembersId, G.RegularMembersId, G.TrustedMembersId,\n+          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+    }\n+  }\n+\n+\n+  private def getBuiltInGroupIdsForGroup(group: Group): Vector[UserId] = {\n+    val G = Group\n+    group.id match {\n+      case G.EveryoneId =>\n+        Vector(G.EveryoneId)\n+      case G.AllMembersId =>\n+        Vector(G.AllMembersId, G.EveryoneId)\n+      case G.BasicMembersId =>\n+        Vector(G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.FullMembersId =>\n+        Vector(G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.TrustedMembersId =>\n+        Vector(G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.RegularMembersId =>\n+        Vector(G.RegularMembersId, G.TrustedMembersId,\n+          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.CoreMembersId =>\n+        Vector(G.CoreMembersId, G.RegularMembersId, G.TrustedMembersId,\n+          G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.StaffId =>\n+        Vector(G.StaffId, G.CoreMembersId, G.RegularMembersId,\n+          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.ModeratorsId =>\n+        Vector(G.ModeratorsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n+          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case G.AdminsId =>\n+        Vector(G.AdminsId, G.StaffId, G.CoreMembersId, G.RegularMembersId,\n+          G.TrustedMembersId, G.FullMembersId, G.BasicMembersId, G.AllMembersId, G.EveryoneId)\n+      case _ =>\n+        // Custom groups are members, so should be in the all-members group, right.\n+        Vector(G.AllMembersId, G.EveryoneId)\n+    }\n+  }\n+\n+\n   def nextMemberId: UserId = {\n     val query = s\"\"\"\n       select max(user_id) max_id from users3"
    },
    {
      "sha": "c0a02d1bab891f47afc813d40a77960053ab0003",
      "filename": "modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/UsernamesSiteDaoMixin.scala",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/UsernamesSiteDaoMixin.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/UsernamesSiteDaoMixin.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ty-dao-rdb/src/main/scala/com/debiki/dao/rdb/UsernamesSiteDaoMixin.scala?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -56,7 +56,6 @@ trait UsernamesSiteDaoMixin extends SiteTransaction {\n \n \n   def deleteUsernameUsagesForMemberId(memberId: UserId): Int = {\n-    TESTS_MISSING\n     val statement = s\"\"\"\n       delete from usernames3\n       where site_id = ?"
    },
    {
      "sha": "140e594f1a1c0cf54fdbca323e2864c8fc2b5897",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -263,6 +263,9 @@ function runAllE2eTests {\n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only user-profile-change-password.2browsers $args\n   runE2eTest s/wdio target/e2e/wdio.conf.js            --only user-profile-cannot-delete-openauth-email $args\n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only user-profile-activity-private.2browsers $args\n+  runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only user-self-delete-upd-groups.2browsers $args\n+\n+  runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only group-profile-change-things.2browsers $args\n \n   runE2eTest s/wdio target/e2e/wdio.3chrome.conf.js    --only custom-forms.3browsers $args\n \n@@ -323,7 +326,8 @@ function runAllE2eTests {\n \n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only weird-usernames.2browsers $args\n \n-  runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only group-mentions.2browsers $args\n+  runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only group-mentions-built-in-groups.2browsers $args\n+  runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only group-mentions-custom-groups.2browsers $args\n \n   # wip:\n   # settings-allow-local-signup\n@@ -381,6 +385,7 @@ function runAllE2eTests {\n   runE2eTest s/wdio target/e2e/wdio.conf.js            --only embedded-comments-edit-and-vote $args\n   runE2eTest s/wdio target/e2e/wdio.conf.js            --only embedded-comments-edit-and-vote-old-name $args\n   runE2eTest s/wdio target/e2e/wdio.conf.js            --only embedded-comments-vote-first $args\n+  runE2eTest s/wdio target/e2e/wdio.conf.js            --only embedded-comments-conf-notf-pref-first $args\n   runE2eTest s/wdio target/e2e/wdio.conf.js            --only embedded-comments-short-script-cache-time $args\n   # (all names included in short-cache-time already)\n "
    },
    {
      "sha": "9ec97dbc0e4ee98b6262d30b0421b731cba12065",
      "filename": "tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -186,13 +186,13 @@ describe(\"drafts-chat-adv-ed  TyT7JKMW24\", () => {\n   });\n \n   it(\"Maria clicks the most recent draft: the direct message to Michael\", () => {\n-    mariasBrowser.userProfilePage.waitForName(maria.username);\n+    mariasBrowser.userProfilePage.waitUntilUsernameIs(maria.username);\n     mariasBrowser.userProfilePage.draftsEtc.waitUntilNumDraftsListed(3);\n     mariasBrowser.userProfilePage.draftsEtc.openDraftIndex(1);\n   });\n \n   it(\"... the browser goes to Michael's profile page\", () => {\n-    mariasBrowser.userProfilePage.waitForName(michael.username);\n+    mariasBrowser.userProfilePage.waitUntilUsernameIs(michael.username);\n   });\n \n   it(\"... and the draft text for the message to him, loads\", () => {"
    },
    {
      "sha": "ea873064ea88a0ae8d41a4ae3a0e81846341fb6c",
      "filename": "tests/e2e/specs/embedded-comments-conf-notf-pref-first.test.ts",
      "status": "added",
      "additions": 103,
      "deletions": 0,
      "changes": 103,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/embedded-comments-conf-notf-pref-first.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/embedded-comments-conf-notf-pref-first.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-comments-conf-notf-pref-first.test.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -0,0 +1,103 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('assert');\n+import fs = require('fs');\n+import server = require('../utils/server');\n+import pagesFor = require('../utils/pages-for');\n+import utils = require('../utils/utils');\n+import make = require('../utils/make');\n+import c = require('../test-constants');\n+\n+declare let browser: any;\n+\n+let everyonesBrowsers;\n+let owen;\n+let owensBrowser;\n+let michael;\n+let michaelsBrowser;\n+\n+let idAddress: IdAddress;\n+let siteId: any;\n+\n+const owensComment = 'owensComment';\n+\n+const localHostname = 'comments-for-e2e-test-embnprf1st-localhost-8080';\n+const embeddingOrigin = 'http://e2e-test-embnprf1st.localhost:8080';\n+const pageSlug = 'emb-cmts-notf-prefs-first.html';\n+const pageUrl = embeddingOrigin + '/' + pageSlug;\n+const pageName = \"The Page Name\";\n+const bgColor = \"#270\";\n+\n+\n+describe(\"embedded-comments-conf-notf-pref-first  TyT502HMSJP3\", () => {\n+\n+  it(\"initialize people\", () => {\n+    everyonesBrowsers = _.assign(browser, pagesFor(browser));\n+    owen = make.memberOwenOwner();\n+    owensBrowser = everyonesBrowsers;\n+    michael = make.memberMichael();\n+    michaelsBrowser = everyonesBrowsers;\n+  });\n+\n+  it(\"import a site\", () => {\n+    const site: SiteData = make.forumOwnedByOwen('embnprf1st', { title: \"Emb Cmts Notf Prefs First Test\" });\n+    site.meta.localHostname = localHostname;\n+    site.settings.allowEmbeddingFrom = embeddingOrigin;\n+    site.settings.requireVerifiedEmail = false;\n+    site.settings.mayPostBeforeEmailVerified = true;\n+    site.members.push(michael);\n+    idAddress = server.importSiteData(site);\n+    siteId = idAddress.id;\n+  });\n+\n+  it(\"create embedding page\", () => {\n+    const html = utils.makeEmbeddedCommentsHtml({ pageName, discussionId: '', localHostname, bgColor });\n+    fs.writeFileSync(`target/${pageSlug}`, html);\n+  });\n+\n+  it(\"Michael opens the embedding page\", () => {\n+    michaelsBrowser.go(pageUrl);\n+    michaelsBrowser.switchToEmbeddedCommentsIrame();\n+    michaelsBrowser.disableRateLimits();\n+  });\n+\n+  it(\"... logs in\", () => {\n+    michaelsBrowser.complex.loginWithPasswordViaMetabar(michael);\n+  });\n+\n+  it(\"... configs notf prefs = EveryPost, the very first thing, before page created\", () => {\n+    // This previously resulted in a \"Page not found, id: `0'\" error, because the page had\n+    // not yet been created. Plus, the notf prefs dropdown was too large to fit in the\n+    // viewport.\n+    michaelsBrowser.switchToEmbeddedCommentsIrame();\n+    michaelsBrowser.metabar.setPageNotfLevel(c.TestPageNotfLevel.EveryPost);\n+  });\n+\n+  it(\"... the notf prefs button now reads 'Every Post'  TyT305MHRTDP23\", () => {\n+    michaelsBrowser.waitAndAssertVisibleTextMatches(\n+        '.dw-cmts-tlbr-details .dw-notf-level', \"Every Post\");\n+  });\n+\n+  it(\"Michael leaves, Owen arrives\", () => {\n+    michaelsBrowser.metabar.clickLogout();\n+    michaelsBrowser.complex.loginWithPasswordViaMetabar(owen);\n+  });\n+\n+  it(\"Owen posts a comment\", () => {\n+    michaelsBrowser.complex.replyToEmbeddingBlogPost(owensComment);\n+  });\n+\n+  it(\"... Michael gets a notf email\", () => {\n+    server.waitUntilLastEmailMatches(siteId, michael.emailAddress, owensComment, michaelsBrowser);\n+  });\n+\n+  it(\"After page reload, the reply is still there\", () => {\n+    owensBrowser.refresh();\n+    owensBrowser.switchToEmbeddedCommentsIrame();\n+    owensBrowser.topic.waitForPostNrVisible(c.FirstReplyNr);\n+    owensBrowser.topic.assertPostTextMatches(c.FirstReplyNr, owensComment);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "f6f55d9215ed2714a6507b2c5a7e8ebf41c43516",
      "filename": "tests/e2e/specs/group-mentions-built-in-groups.2browsers.test.ts",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/group-mentions-built-in-groups.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/group-mentions-built-in-groups.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/group-mentions-built-in-groups.2browsers.test.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -46,7 +46,7 @@ let forum: EmptyTestForum;\n const topicTitle = 'topicTitle';\n \n \n-describe(\"group-mentions.2browsers  TyT4AWJL208R\", () => {\n+describe(\"group-mentions-built-in.2browsers  TyT4AWJL208R\", () => {\n \n   it(\"import a site\", () => {\n     const builder = buildSite();",
      "previous_filename": "tests/e2e/specs/group-mentions.2browsers.test.ts"
    },
    {
      "sha": "eeaf04d47031b1fe9b7608860707c1280a5c7c8d",
      "filename": "tests/e2e/specs/group-mentions-custom-groups.2browsers.test.ts",
      "status": "added",
      "additions": 147,
      "deletions": 0,
      "changes": 147,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/group-mentions-custom-groups.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/group-mentions-custom-groups.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/group-mentions-custom-groups.2browsers.test.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -0,0 +1,147 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('assert');\n+import server = require('../utils/server');\n+import utils = require('../utils/utils');\n+import { buildSite } from '../utils/site-builder';\n+import pagesFor = require('../utils/pages-for');\n+import settings = require('../utils/settings');\n+import logAndDie = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+declare var browser: any;\n+declare var browserA: any;\n+declare var browserB: any;\n+\n+let everyonesBrowsers;\n+let richBrowserA;\n+let richBrowserB;\n+let owen: Member;\n+let owensBrowser;\n+let michael;\n+let maria;\n+let maja;\n+let majasBrowser;\n+\n+let siteIdAddress: IdAddress;\n+let siteId;\n+\n+let forum: EmptyTestForum;\n+\n+const BasicGroupFullName = 'BasicGroupFullName';\n+const BasicGroupUsername = 'BasicGroupUsername';\n+const GroupTwoFullName = 'GroupTwoFullName';\n+const GroupTwoUsername = 'GroupTwoUsername';\n+\n+const OwensTopicMentionsBasicGroup =\n+    { title: 'OwensTopicTitle', body: 'OwensTopicBody, Hi @' + BasicGroupUsername };\n+\n+const majasReplyMentionsBasicGroup = 'majasReplyMentionsBasicGroup @' + BasicGroupUsername;\n+\n+let discussionPageUrl: string;\n+\n+\n+describe(\"group-mentions-custom-group  TyT5BMRP2058\", () => {\n+\n+  it(\"import a site\", () => {\n+    const builder = buildSite();\n+    forum = builder.addEmptyForum({\n+      title: \"Some E2E Test\",\n+      members: ['owen', 'maja', 'maria', 'michael']\n+    });\n+    assert(builder.getSite() === forum.siteData);\n+    siteIdAddress = server.importSiteData(forum.siteData);\n+    siteId = siteIdAddress.id;\n+  });\n+\n+  it(\"initialize people\", () => {\n+    everyonesBrowsers = _.assign(browser, pagesFor(browser));\n+    richBrowserA = _.assign(browserA, pagesFor(browserA));\n+    richBrowserB = _.assign(browserB, pagesFor(browserB));\n+\n+    owen = forum.members.owen;\n+    owensBrowser = richBrowserA;\n+\n+    michael = forum.members.michael;\n+    maria = forum.members.maria;\n+    maja = forum.members.maja;\n+    majasBrowser = richBrowserB;\n+  });\n+\n+  it(\"Owen logs in to the groups page\", () => {\n+    owensBrowser.groupListPage.goHere(siteIdAddress.origin);\n+    owensBrowser.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+\n+  it(\"... creates Basic Group\", () => {\n+    owensBrowser.groupListPage.createGroup(\n+        { username: BasicGroupUsername, fullName: BasicGroupFullName });\n+  });\n+\n+  it(\"... adds Maja and Michael\", () => {\n+    owensBrowser.userProfilePage.groupMembers.addOneMember(maria.username);\n+    owensBrowser.userProfilePage.groupMembers.addOneMember(maja.username);\n+  });\n+\n+  it(\"Owen creates Group Two\", () => {\n+    owensBrowser.userProfilePage.navigateBackToUsersOrGroupsList();\n+    owensBrowser.groupListPage.createGroup(\n+        { username: GroupTwoUsername, fullName: GroupTwoFullName });\n+  });\n+\n+  it(\"... adds Michael\", () => {\n+    owensBrowser.userProfilePage.groupMembers.addOneMember(michael.username);\n+  });\n+\n+  it(\"Owen posts a topic, mentions @\" + BasicGroupUsername, () => {\n+    owensBrowser.topbar.clickBack();\n+    owensBrowser.complex.createAndSaveTopic(OwensTopicMentionsBasicGroup);\n+    discussionPageUrl = owensBrowser.url().value;\n+  });\n+\n+  it(\"Maja logs in\", () => {\n+    majasBrowser.go(siteIdAddress.origin);\n+    majasBrowser.complex.loginWithPasswordViaTopbar(maja);\n+  });\n+\n+  it(\"... sees a new-post-to-you notification\", () => {\n+    majasBrowser.topbar.waitForNumDirectNotfs(1);\n+  });\n+\n+  it(\"... Maja and Maria get a notification email\", () => {\n+    const titleBody = [OwensTopicMentionsBasicGroup.title, OwensTopicMentionsBasicGroup.body];\n+    server.waitUntilLastEmailMatches(siteId, maria.emailAddress, titleBody, richBrowserA);\n+    server.waitUntilLastEmailMatches(siteId, maja.emailAddress, titleBody, richBrowserA);\n+  });\n+\n+  it(\"... those were the only emails sent\", () => {\n+    const { num, addrsByTimeAsc } = server.getEmailsSentToAddrs(siteId);\n+    assert.equal(num, 2, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+  it(\"Maja opens the new topic, via the topbar\", () => {\n+    majasBrowser.topbar.openNotfToMe({ waitForNewUrl: true });\n+  });\n+\n+  it(\"Maja replies, also mentions @\" + BasicGroupUsername, () => {\n+    majasBrowser.complex.replyToOrigPost(majasReplyMentionsBasicGroup);\n+  });\n+\n+  it(\"... Maria gets a notf email — not Maja, she's the reply author\", () => {\n+    server.waitUntilLastEmailMatches(\n+          siteId, maria.emailAddress, majasReplyMentionsBasicGroup, richBrowserA);\n+  });\n+\n+  it(\"... Owen also get notified, since Maja replied to him\", () => {\n+    server.waitUntilLastEmailMatches(\n+          siteId, owen.emailAddress, majasReplyMentionsBasicGroup, richBrowserA);\n+  });\n+\n+  it(\"... no one else got an email\", () => {\n+    const { num, addrsByTimeAsc } = server.getEmailsSentToAddrs(siteId);\n+    assert.equal(num, 4, `Emails sent to: ${addrsByTimeAsc}`);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "f2bdac0102be26b2fd20c516f8fa31bcd5612d10",
      "filename": "tests/e2e/specs/group-profile-change-things.2browsers.test.ts",
      "status": "added",
      "additions": 154,
      "deletions": 0,
      "changes": 154,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/group-profile-change-things.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/group-profile-change-things.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/group-profile-change-things.2browsers.test.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -0,0 +1,154 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('assert');\n+import server = require('../utils/server');\n+import utils = require('../utils/utils');\n+import { buildSite } from '../utils/site-builder';\n+import pagesFor = require('../utils/pages-for');\n+import settings = require('../utils/settings');\n+import logAndDie = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+declare var browser: any;\n+declare var browserA: any;\n+declare var browserB: any;\n+\n+let everyonesBrowsers;\n+let richBrowserA;\n+let richBrowserB;\n+let owen: Member;\n+let owensBrowser;\n+let maria: Member;\n+let mariasBrowser;\n+let strangersBrowser;\n+\n+let siteIdAddress: IdAddress;\n+let siteId;\n+\n+let forum: TwoPagesTestForum;\n+\n+let discussionPageUrl: string;\n+\n+const DummyGroupUsername = \"dummy_ignore_group\";\n+const DummyGroupFullName = \"Dummy Ignore Group\";\n+const GroupsFirstFullName = 'GroupsFirstFullName';\n+const GroupsFirstUsername = 'groups_1st_username';\n+const GroupsSecondFullName = 'GroupsSecondFullName';\n+const GroupsSecondUsername = 'groups_2nd_username';\n+\n+const DummyGroupNames = { username: DummyGroupUsername, fullName: DummyGroupFullName };\n+const GroupsFirstNames = { username: GroupsFirstUsername, fullName: GroupsFirstFullName };\n+const GroupsSecondNames = { username: GroupsSecondUsername, fullName: GroupsSecondFullName };\n+\n+\n+describe(\"group-profile-change-things  TyT5MS5TWV0\", () => {\n+\n+  it(\"import a site\", () => {\n+    const builder = buildSite();\n+    forum = builder.addTwoPagesForum({\n+      title: \"Group Profile Change Things\",\n+      members: undefined, // default = everyone\n+    });\n+    assert(builder.getSite() === forum.siteData);\n+    siteIdAddress = server.importSiteData(forum.siteData);\n+    siteId = siteIdAddress.id;\n+  });\n+\n+  it(\"initialize people\", () => {\n+    everyonesBrowsers = _.assign(browser, pagesFor(browser));\n+    richBrowserA = _.assign(browserA, pagesFor(browserA));\n+    richBrowserB = _.assign(browserB, pagesFor(browserB));\n+\n+    owen = forum.members.owen;\n+    owensBrowser = richBrowserA;\n+\n+    maria = forum.members.maria;\n+    mariasBrowser = richBrowserB;\n+\n+    strangersBrowser = richBrowserB;\n+  });\n+\n+  it(\"Owen logs in to the groups page\", () => {\n+    owensBrowser.groupListPage.goHere(siteIdAddress.origin);\n+    owensBrowser.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+\n+  it(\"... creates a dummy won't-be-used group\", () => {\n+    // Just so can verify the server won't edit the wrong custom group.\n+    owensBrowser.groupListPage.createGroup(\n+        { username: DummyGroupUsername, fullName: DummyGroupFullName });\n+  });\n+\n+  it(\"... navigates back to the groups list page\", () => {\n+    owensBrowser.userProfilePage.navigateBackToUsersOrGroupsList();\n+  });\n+\n+  it(\"... creates a group to edit\", () => {\n+    owensBrowser.groupListPage.createGroup(\n+        { username: GroupsFirstUsername, fullName: GroupsFirstFullName });\n+  });\n+\n+  it(\"... adds Maria\", () => {\n+    owensBrowser.userProfilePage.groupMembers.addOneMember(maria.username);\n+  });\n+\n+  it(\"Maria logs in\", () => {\n+    mariasBrowser.go(siteIdAddress.origin + '/' + forum.topics.byMichaelCategoryA.slug);\n+    mariasBrowser.complex.loginWithPasswordViaTopbar(maria);\n+  });\n+\n+  it(\"... goes to the groups page, via her username menu\", () => {\n+    mariasBrowser.topbar.navigateToGroups();\n+  });\n+\n+  it(\"There're two custom groups\", () => {\n+    assert.equal(mariasBrowser.groupListPage.countCustomGroups(), 2);\n+  });\n+\n+  it(\"... with the correct names\", () => {\n+    mariasBrowser.groupListPage.waitUntilGroupPresent(DummyGroupNames);\n+    mariasBrowser.groupListPage.waitUntilGroupPresent(GroupsFirstNames);\n+  });\n+\n+  it(\"Owen goes to the group's prefs | about page\", () => {\n+    owensBrowser.userProfilePage.goToPreferences();\n+  });\n+\n+  it(\"... the group's name is in the about box\", () => {\n+    owensBrowser.userProfilePage.waitUntilUsernameIs(GroupsFirstUsername);\n+  });\n+\n+  it(\"He renames the group: changes the username\", () => {\n+    owensBrowser.userProfilePage.preferences.startChangingUsername();\n+    owensBrowser.userProfilePage.preferences.setUsername(GroupsSecondUsername);\n+  });\n+\n+  it(\"... and the full name\", () => {\n+    owensBrowser.userProfilePage.preferences.setFullName(GroupsSecondFullName);\n+  });\n+\n+  it(\"... saves\", () => {\n+    owensBrowser.userProfilePage.preferences.save();\n+  });\n+\n+  it(\"The group's new username is now in the about box\", () => {\n+    owensBrowser.userProfilePage.waitUntilUsernameIs(GroupsSecondUsername);\n+  });\n+\n+  it(\"Maria refreshes the page, and there're still two custom groups\", () => {\n+    mariasBrowser.refresh();\n+    mariasBrowser.groupListPage.waitUntilLoaded();\n+    assert.equal(mariasBrowser.groupListPage.countCustomGroups(), 2);\n+  });\n+\n+  it(\"... with the correct names\", () => {\n+    mariasBrowser.groupListPage.waitUntilGroupPresent(DummyGroupNames);\n+    mariasBrowser.groupListPage.waitUntilGroupPresent(GroupsSecondNames);\n+  });\n+\n+  // Later: edit title, verify member's title (dispalyed next to hens username,\n+  // at hens posts) gets refreshed.\n+\n+});\n+"
    },
    {
      "sha": "b2e2fc2d401df9d1d96994e1e01c4ceeb6e9ace1",
      "filename": "tests/e2e/specs/impersonate.2browsers.test.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/impersonate.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/impersonate.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/impersonate.2browsers.test.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -99,7 +99,7 @@ describe(\"impersonate\", () => {\n     owen.userProfilePage.preferences.setFullName(marilonFullName);\n     owen.userProfilePage.preferences.save();\n     owen.refresh();\n-    owen.userProfilePage.waitForName();\n+    owen.userProfilePage.waitUntilUsernameVisible();\n     owen.userProfilePage.assertUsernameIs(maria.username);\n     owen.userProfilePage.assertFullNameIs(marilonFullName);\n     owen.userProfilePage.assertFullNameIsNot(maria.fullName);"
    },
    {
      "sha": "d566db2a4ae3e342408c6189004bed8661b8df86",
      "filename": "tests/e2e/specs/navigation-as-impl.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/navigation-as-impl.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/navigation-as-impl.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/navigation-as-impl.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -198,7 +198,7 @@ function makeWholeSpec(initFn) {\n         usersBrowser.go('/-/users/michael');\n       });\n       it(\"... it looks ok\", () => {\n-        usersBrowser.userProfilePage.waitForName();\n+        usersBrowser.userProfilePage.waitUntilUsernameVisible();\n         usersBrowser.userProfilePage.assertUsernameIs('michael');\n       });\n       it(\"... go to Maria's profile page\", () => {\n@@ -367,7 +367,7 @@ function addMariasProfileTets(testPrefix) {\n   const numTopicsAndPosts = memberIsAdmin ? 4 + 3 : 4;\n \n   it(pfx + \"check username\", () => {\n-    usersBrowser.userProfilePage.waitForName();\n+    usersBrowser.userProfilePage.waitUntilUsernameVisible();\n     usersBrowser.userProfilePage.assertUsernameIs('maria');\n   });\n "
    },
    {
      "sha": "30a229c6631810fdc69e722f367f2f7534685090",
      "filename": "tests/e2e/specs/user-profile-change-username.test.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/user-profile-change-username.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/user-profile-change-username.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/user-profile-change-username.test.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -144,7 +144,7 @@ describe(\"user profile access:\", () => {\n \n   it(\"She reloads the page, sees her username is now \" + mariasUsername2, () => {\n     mariasBrowser.refresh();\n-    mariasBrowser.userProfilePage.waitForName();\n+    mariasBrowser.userProfilePage.waitUntilUsernameVisible();\n     mariasBrowser.userProfilePage.assertUsernameIs(mariasUsername2);\n   });\n \n@@ -162,7 +162,7 @@ describe(\"user profile access:\", () => {\n   it(\"She reloads the page, sees her username is now \" + mariasUsername2b, () => {\n     mariasBrowser.refresh();\n     mariasBrowser.debug();\n-    mariasBrowser.userProfilePage.waitForName();\n+    mariasBrowser.userProfilePage.waitUntilUsernameVisible();\n     mariasBrowser.userProfilePage.assertUsernameIs(mariasUsername2b);\n   });  */\n "
    },
    {
      "sha": "2e33bd823d2114b93a2188e8c51113cf5f21568b",
      "filename": "tests/e2e/specs/user-self-delete-upd-groups.2browsers.test.ts",
      "status": "added",
      "additions": 207,
      "deletions": 0,
      "changes": 207,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/user-self-delete-upd-groups.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/user-self-delete-upd-groups.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/user-self-delete-upd-groups.2browsers.test.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -0,0 +1,207 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import * as _ from 'lodash';\n+import assert = require('assert');\n+import server = require('../utils/server');\n+import utils = require('../utils/utils');\n+import { buildSite } from '../utils/site-builder';\n+import pagesFor = require('../utils/pages-for');\n+import settings = require('../utils/settings');\n+import logAndDie = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+declare var browser: any;\n+declare var browserA: any;\n+declare var browserB: any;\n+\n+let everyonesBrowsers;\n+let richBrowserA;\n+let richBrowserB;\n+let owen: Member;\n+let owensBrowser;\n+let parinia = { username: 'parinia', emailAddress: 'e2e-test-parinia@x.co',\n+                  fullName: 'Parinia Safiti', password: 'publ-pa020' };\n+let pariniasBrowser;\n+let strangersBrowser;\n+\n+let siteIdAddress: IdAddress;\n+let siteId;\n+\n+let forum: EmptyTestForum;\n+\n+const GroupFullName = 'GroupFullName';\n+const GroupUsername = 'GroupUsername';\n+\n+const pariniasTopic = { title: 'PariniasTopicTitle', body: 'PariniasTopicBody' };\n+let discussionPageUrl: string;\n+\n+\n+describe(\"user-self-delete-upd-groups  TyT6DMSNW3560\", () => {\n+\n+  it(\"import a site\", () => {\n+    const builder = buildSite();\n+    forum = builder.addEmptyForum({\n+      title: \"Some E2E Test\",\n+      members: ['owen', 'maria', 'michael']\n+    });\n+    assert(builder.getSite() === forum.siteData);\n+    siteIdAddress = server.importSiteData(forum.siteData);\n+    siteId = siteIdAddress.id;\n+  });\n+\n+  it(\"initialize people\", () => {\n+    everyonesBrowsers = _.assign(browser, pagesFor(browser));\n+    richBrowserA = _.assign(browserA, pagesFor(browserA));\n+    richBrowserB = _.assign(browserB, pagesFor(browserB));\n+\n+    owen = forum.members.owen;\n+    owensBrowser = richBrowserA;\n+    strangersBrowser = richBrowserA;\n+\n+    pariniasBrowser = richBrowserB;\n+  });\n+\n+  it(\"Parinia creates an account\", () => {\n+    pariniasBrowser.go(siteIdAddress.origin);\n+    pariniasBrowser.complex.signUpAsMemberViaTopbar(parinia);\n+  });\n+\n+  it(\"... verifies her email\", () => {\n+    var link = server.getLastVerifyEmailAddressLinkEmailedTo(\n+        siteId, parinia.emailAddress, pariniasBrowser);\n+    pariniasBrowser.go(link);\n+    pariniasBrowser.waitAndClick('#e2eContinue');\n+    pariniasBrowser.disableRateLimits();\n+  });\n+\n+  it(\"Owen logs in to the groups page\", () => {\n+    owensBrowser.groupListPage.goHere(siteIdAddress.origin);\n+    owensBrowser.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+\n+  it(\"... creates a group\", () => {\n+    owensBrowser.groupListPage.createGroup({ username: GroupUsername, fullName: GroupFullName });\n+  });\n+\n+  it(\"... adds Maria and Parinia\", () => {\n+    owensBrowser.userProfilePage.groupMembers.addOneMember(forum.members.maria.username);\n+    owensBrowser.userProfilePage.groupMembers.addOneMember(parinia.username);\n+  });\n+\n+  it(\"... so there're two members\", () => {\n+    assert.equal(owensBrowser.userProfilePage.groupMembers.getNumMembers(), 2);\n+  });\n+\n+  it(\"... Parinia and Maria\", () => {\n+    owensBrowser.userProfilePage.groupMembers.waitUntilMemberPresent(parinia.username);\n+    owensBrowser.userProfilePage.groupMembers.waitUntilMemberPresent(forum.members.maria.username);\n+  });\n+\n+  it(\"... there're more members in the All Members group\", () => {\n+    owensBrowser.userProfilePage.groupMembers.goHere(c.AllMembersUsername);\n+    assert.equal(owensBrowser.userProfilePage.groupMembers.getNumMembers(), 4);\n+  });\n+\n+  it(\"... namely Parinia\", () => {\n+    owensBrowser.userProfilePage.groupMembers.waitUntilMemberPresent(parinia.username);\n+  });\n+\n+  it(\"... and Maria, Owen and Michael\", () => {\n+    owensBrowser.userProfilePage.groupMembers.waitUntilMemberPresent(forum.members.maria.username);\n+    owensBrowser.userProfilePage.groupMembers.waitUntilMemberPresent(forum.members.owen.username);\n+    owensBrowser.userProfilePage.groupMembers.waitUntilMemberPresent(forum.members.michael.username);\n+  });\n+\n+  it(\"Owen leaves\", () => {\n+    owensBrowser.topbar.clickLogout();\n+  });\n+\n+  it(\"Parinia posts a topic\", () => {\n+    pariniasBrowser.complex.createAndSaveTopic(pariniasTopic);\n+    discussionPageUrl = pariniasBrowser.url().value;\n+  });\n+\n+  it(\"A stranger can see Parinia's name, as the topic author\", () => {\n+    strangersBrowser.go(discussionPageUrl);\n+    strangersBrowser.topic.waitForLoaded();\n+    assert.equal(strangersBrowser.topic.getTopicAuthorUsernameInclAt(), '@' + parinia.username);\n+  });\n+\n+  it(\"Parinia realizes they're out there to get her. She goes to her user profile page\", () => {\n+    pariniasBrowser.topbar.clickGoToProfile();\n+  });\n+\n+  it(\"... to the Preferencet | Account tab \", () => {\n+    pariniasBrowser.userProfilePage.goToPreferences();\n+    pariniasBrowser.userProfilePage.preferences.switchToEmailsLogins();\n+  });\n+\n+  it(\"Parinia deletes her account\", () => {\n+    pariniasBrowser.userProfilePage.preferences.emailsLogins.deleteAccount();\n+  });\n+\n+  it(\"... gets logged out\", () => {\n+    pariniasBrowser.topbar.waitUntilLoginButtonVisible();\n+  });\n+\n+  it(\"... the username changed to anonNNNN\", () => {\n+    const username = pariniasBrowser.userProfilePage.waitAndGetUsername();\n+    assert.equal(username.substr(0, 'anon'.length), 'anon');\n+  });\n+\n+  it(\"... the account says it's deleted or deactivated\", () => {\n+    pariniasBrowser.userProfilePage.waitUntilDeletedOrDeactivated();\n+  });\n+\n+  it(\"The stranger, who is in fact a secret agent, reloads the page\", () => {\n+    strangersBrowser.refresh();\n+    strangersBrowser.topic.waitForLoaded();\n+  });\n+\n+  it(\"... Parinia's username is gone — it changed to anonNNNN\", () => {\n+    const username = strangersBrowser.topic.getTopicAuthorUsernameInclAt();\n+    assert.equal(username.substr(0, '@anon'.length), '@anon');\n+  });\n+\n+  it(\"The secret agent clicks anonNNNN, goes to the account page\", () => {\n+    strangersBrowser.complex.openPageAuthorProfilePage();\n+  });\n+\n+  it(\"... the user profile page username is  anonNNNNN\", () => {\n+    const username = strangersBrowser.userProfilePage.waitAndGetUsername();\n+    assert.equal(username.substr(0, 'anon'.length), 'anon');\n+  });\n+\n+  it(\"... and deleted or deactivated\", () => {\n+    strangersBrowser.userProfilePage.waitUntilDeletedOrDeactivated();\n+  });\n+\n+  it(\"Owen returns to the group members page\", () => {\n+    owensBrowser.userProfilePage.groupMembers.goHere(GroupUsername);\n+    owensBrowser.complex.loginWithPasswordViaTopbar(owen);\n+  });\n+\n+  it(\"... now only one member — Parinia is gone\", () => {\n+    assert.equal(owensBrowser.userProfilePage.groupMembers.getNumMembers(), 1);\n+  });\n+\n+  it(\"... Maria is there\", () => {\n+    owensBrowser.userProfilePage.groupMembers.waitUntilMemberPresent(forum.members.maria.username);\n+  });\n+\n+  it(\"... and in the All Members group, there're now 3 members instead of 4\", () => {\n+    owensBrowser.userProfilePage.groupMembers.goHere(c.AllMembersUsername);\n+    assert.equal(owensBrowser.userProfilePage.groupMembers.getNumMembers(), 3);\n+  });\n+\n+  it(\"... they are Maria, Owen and Michael\", () => {\n+    owensBrowser.userProfilePage.groupMembers.waitUntilMemberPresent(forum.members.maria.username);\n+    owensBrowser.userProfilePage.groupMembers.waitUntilMemberPresent(forum.members.owen.username);\n+    owensBrowser.userProfilePage.groupMembers.waitUntilMemberPresent(forum.members.michael.username);\n+  });\n+\n+  it(\"The secret agent doesn't remember Parina's real name\", () => {\n+  });\n+\n+});\n+"
    },
    {
      "sha": "1dc9e8017e8c2518fd18a5c38635b4d29ff996cc",
      "filename": "tests/e2e/specs/utx-impl.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/utx-impl.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/utx-impl.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/utx-impl.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -97,7 +97,7 @@ const utxImpl = {\n   javascript: `\n debiki.scriptLoad.done(function() {\n \n-Bliss.delegate(document, 'click', '#utxSubmitAddrForm input[type=\"submit\"]', function(event) {\n+Bliss.delegate(document.body, 'click', '#utxSubmitAddrForm input[type=\"submit\"]', function(event) {\n   event.preventDefault();\n   event.stopPropagation();\n   var addrInp = document.getElementById('utxWebsiteAddr');"
    },
    {
      "sha": "7bd94e2facc2f596bc0f9f9ddf4e7495c8b85f40",
      "filename": "tests/e2e/specs/weird-usernames.2browsers.test.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/weird-usernames.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/specs/weird-usernames.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/weird-usernames.2browsers.test.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -147,7 +147,7 @@ describe(\"weird-usernames.2browsers  TyT5ABKPUW2\", () => {\n \n   it(\"The View Profile link really opens the user's profile page\", () => {\n     mariasBrowser.aboutUserDialog.clickViewProfile();\n-    mariasBrowser.userProfilePage.waitForName();\n+    mariasBrowser.userProfilePage.waitUntilUsernameVisible();\n     mariasBrowser.userProfilePage.assertUsernameIs(corax.username);\n   });\n "
    },
    {
      "sha": "58a6b440379c906c60209e0ea2a1e524123c5c3a",
      "filename": "tests/e2e/test-constants.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/test-constants.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/test-constants.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/test-constants.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -86,6 +86,7 @@ export = {\n   SysbotUserId: 2,\n   EveryoneId: 10,\n   AllMembersId: 11,\n+  AllMembersUsername: 'all_members',\n   BasicMembersId: 12,\n   FullMembersId: 13,\n   TrustedMembersId: 14,"
    },
    {
      "sha": "c156114df8aec8e010e963fedb0c55c92c04089d",
      "filename": "tests/e2e/test-types2.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/test-types2.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/test-types2.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/test-types2.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -375,6 +375,7 @@ interface EmptyTestForum {\n     regina?: Member;\n     trillian?: Member;\n     maria?: Member;\n+    maja?: Member;\n     michael?: Member;\n     mallory?: Member;\n   };"
    },
    {
      "sha": "0bdc1cbf24da7542c0de0b6bc7fab393eb2bd934",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 43,
      "deletions": 2,
      "changes": 45,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/pages-for.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -1330,6 +1330,14 @@ function pagesFor(browser) {\n         api.waitUntilLoadingOverlayGone();\n       },\n \n+      navigateToGroups: () => {\n+        api.rememberCurrentUrl();\n+        api.topbar.openMyMenu();\n+        api.waitAndClick('#te_VwGrps');\n+        api.waitForNewUrl();\n+        api.groupListPage.waitUntilLoaded();\n+      },\n+\n       clickGoToProfile: function() {\n         api.rememberCurrentUrl();\n         api.topbar.openMyMenu();\n@@ -3556,6 +3564,11 @@ function pagesFor(browser) {\n         api.waitForVisible('.e_AddMbrsB');\n       },\n \n+      waitUntilGroupPresent: (ps: { username: string, fullName: string }) => {\n+        api.waitAndGetElemIdWithText('.s_Gs_G_L .esP_By_U', ps.username);\n+        api.waitAndGetElemIdWithText('.s_Gs_G_L .esP_By_F', ps.fullName);\n+      },\n+\n       openGroupWithUsername: (username: string) => {\n         api.waitForThenClickText('.s_Gs_G .esP_By_U', username);\n         api.userProfilePage.groupMembers.waitUntilLoaded();\n@@ -3566,10 +3579,34 @@ function pagesFor(browser) {\n     userProfilePage: {\n       avatarAboutButtonsSelector: '.s_UP_AvtrAboutBtns',\n \n-      waitForName: function() {\n+      waitUntilUsernameVisible: function() {\n         api.waitForVisible('.esUP_Un');\n       },\n \n+      waitUntilUsernameIs: (username) => {\n+        api.waitAndGetElemIdWithText('.esUP_Un', username);\n+      },\n+\n+      waitAndGetUsername: () => {\n+        return api.waitAndGetVisibleText('.esUP_Un');\n+      },\n+\n+      waitUntilDeletedOrDeactivated: () => {\n+        browser.waitForVisible('.e_ActDd');\n+      },\n+\n+      navigateBackToUsersOrGroupsList: () => {\n+        api.rememberCurrentUrl();\n+        api.waitAndClick('.esTopbar_custom_title a');\n+        api.waitForNewUrl();\n+        if (api.urlPath().startsWith(c.GroupsUrlPrefix)) {\n+          api.groupListPage.waitUntilLoaded();\n+        }\n+        else {\n+          // /-/users/ all users list not yet impl\n+        }\n+      },\n+\n       openActivityFor: function(who: string, origin?: string) {\n         api.go((origin || '') + `/-/users/${who}/activity/posts`);\n         api.waitUntilLoadingOverlayGone();\n@@ -3679,6 +3716,10 @@ function pagesFor(browser) {\n           api.waitUntilTextMatches('.s_G_Mbrs .esP_By_U', username);\n         },\n \n+        getNumMembers: (): number => {\n+          return api.count('.s_G_Mbrs .esP_By_U');\n+        },\n+\n         addOneMember: (username: string) => {\n           api.waitAndClick('.e_AddMbrsB');\n           api.addUsersToPageDialog.addOneUser(username);\n@@ -3882,7 +3923,7 @@ function pagesFor(browser) {\n           api.waitAndSetValue('.e_UP_Prefs_FN input', fullName);\n         },\n \n-        startChangingUsername: function(username: string) {\n+        startChangingUsername: function() {\n           api.waitAndClick('.s_UP_Prefs_ChangeUNB');\n           api.stupidDialog.close();\n         },"
    },
    {
      "sha": "34473a98d21be877587c0cd32b660568a23adcfa",
      "filename": "tests/e2e/utils/site-builder.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/utils/site-builder.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/debffa17aa37a77fd0a3f11469d80929642679e1/tests/e2e/utils/site-builder.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/site-builder.ts?ref=debffa17aa37a77fd0a3f11469d80929642679e1",
      "patch": "@@ -170,6 +170,7 @@ function buildSite(site?: SiteData) {\n           regina: _.includes(members, 'regina') ? make.memberRegina() : undefined,\n           trillian: _.includes(members, 'trillian') ? make.memberTrillian() : undefined,\n           maria: _.includes(members, 'maria') ? make.memberMaria() : undefined,\n+          maja: _.includes(members, 'maja') ? make.memberMaja() : undefined,\n           michael: _.includes(members, 'michael') ? make.memberMichael() : undefined,\n           mallory: _.includes(members, 'mallory') ? make.memberMallory() : undefined,\n         },\n@@ -187,6 +188,7 @@ function buildSite(site?: SiteData) {\n       if (forum.members.regina) site.members.push(forum.members.regina);\n       if (forum.members.trillian) site.members.push(forum.members.trillian);\n       if (forum.members.maria) site.members.push(forum.members.maria);\n+      if (forum.members.maja) site.members.push(forum.members.maja);\n       if (forum.members.michael) site.members.push(forum.members.michael);\n       if (forum.members.mallory) site.members.push(forum.members.mallory);\n "
    }
  ]
}
