{
  "sha": "0f2298d1930f3b2538b622ac92e3333cf9c972d2",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjBmMjI5OGQxOTMwZjNiMjUzOGI2MjJhYzkyZTMzMzNjZjljOTcyZDI=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-06-04T03:48:28Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-06-04T03:48:28Z"
    },
    "message": "externalize all stream params",
    "tree": {
      "sha": "e773f240a555a0062618feb156e1f3182dbf4934",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/e773f240a555a0062618feb156e1f3182dbf4934"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/0f2298d1930f3b2538b622ac92e3333cf9c972d2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/0f2298d1930f3b2538b622ac92e3333cf9c972d2",
  "html_url": "https://github.com/umputun/remark/commit/0f2298d1930f3b2538b622ac92e3333cf9c972d2",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/0f2298d1930f3b2538b622ac92e3333cf9c972d2/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f4d346c25a8d6f7df86fb25b2baa08256c24accf",
      "url": "https://api.github.com/repos/umputun/remark/commits/f4d346c25a8d6f7df86fb25b2baa08256c24accf",
      "html_url": "https://github.com/umputun/remark/commit/f4d346c25a8d6f7df86fb25b2baa08256c24accf"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 25,
    "deletions": 6
  },
  "files": [
    {
      "sha": "b1c4d06ae79edb9d7fda865a857691797e0399fb",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/umputun/remark/blob/0f2298d1930f3b2538b622ac92e3333cf9c972d2/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark/raw/0f2298d1930f3b2538b622ac92e3333cf9c972d2/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/server.go?ref=0f2298d1930f3b2538b622ac92e3333cf9c972d2",
      "patch": "@@ -46,6 +46,7 @@ type ServerCommand struct {\n \tNotify NotifyGroup `group:\"notify\" namespace:\"notify\" env-namespace:\"NOTIFY\"`\n \tImage  ImageGroup  `group:\"image\" namespace:\"image\" env-namespace:\"IMAGE\"`\n \tSSL    SSLGroup    `group:\"ssl\" namespace:\"ssl\" env-namespace:\"SSL\"`\n+\tStream StreamGroup `group:\"stream\" namespace:\"stream\" env-namespace:\"STREAM\"`\n \n \tSites           []string      `long:\"site\" env:\"SITE\" default:\"remark\" description:\"site names\" env-delim:\",\"`\n \tAdminPasswd     string        `long:\"admin-passwd\" env:\"ADMIN_PASSWD\" default:\"\" description:\"admin basic auth password\"`\n@@ -170,6 +171,13 @@ type SSLGroup struct {\n \tACMEEmail    string `long:\"acme-email\" env:\"ACME_EMAIL\" description:\"admin email for certificate notifications\"`\n }\n \n+// StreamGroup define options for streaming apis\n+type StreamGroup struct {\n+\tRefreshInterval time.Duration `long:\"refresh\" env:\"REFRESH\" default:\"5s\" description:\"refresh interval for streams\"`\n+\tTimeOut         time.Duration `long:\"timeout\" env:\"TIMEOUT\" default:\"15m\" description:\"timeout to close streams on inactivity\"`\n+\tMaxActive       int           `long:\"max\" env:\"MAX\" default:\"500\" description:\"max number of parallel streams\"`\n+}\n+\n // serverApp holds all active objects\n type serverApp struct {\n \t*ServerCommand\n@@ -304,8 +312,9 @@ func (s *ServerCommand) newServerApp() (*serverApp, error) {\n \t\tSSLConfig:        sslConfig,\n \t\tUpdateLimiter:    s.UpdateLimit,\n \t\tImageService:     imageService,\n-\t\tStreamTimeOut:    time.Minute * 15,\n-\t\tStreamRefresh:    time.Second * 5,\n+\t\tStreamTimeOut:    s.Stream.TimeOut,\n+\t\tStreamRefresh:    s.Stream.RefreshInterval,\n+\t\tStreamMaxActive:  s.Stream.MaxActive,\n \t}\n \n \tsrv.ScoreThresholds.Low, srv.ScoreThresholds.Critical = s.LowScore, s.CriticalScore"
    },
    {
      "sha": "5029ba861a0754c05d50a37f352eece0e1cb962a",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark/blob/0f2298d1930f3b2538b622ac92e3333cf9c972d2/backend/app/rest/api/rest.go",
      "raw_url": "https://github.com/umputun/remark/raw/0f2298d1930f3b2538b622ac92e3333cf9c972d2/backend/app/rest/api/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest.go?ref=0f2298d1930f3b2538b622ac92e3333cf9c972d2",
      "patch": "@@ -55,8 +55,9 @@ type Rest struct {\n \t}\n \tUpdateLimiter float64\n \n-\tStreamTimeOut time.Duration\n-\tStreamRefresh time.Duration\n+\tStreamTimeOut   time.Duration\n+\tStreamRefresh   time.Duration\n+\tStreamMaxActive int\n \n \tSSLConfig   SSLConfig\n \thttpsServer *http.Server\n@@ -338,7 +339,7 @@ func (s *Rest) controllerGroups() (public, private, admin, rss) {\n \t\twebRoot:          s.WebRoot,\n \t\tstreamTimeOut:    s.StreamTimeOut,\n \t\tstreamRefresh:    s.StreamRefresh,\n-\t\tmaxActiveStreams: 500,\n+\t\tmaxActiveStreams: int32(s.StreamMaxActive),\n \t}\n \n \tprivGrp := private{"
    },
    {
      "sha": "8e9611dc314e041e65a57e74cd1fb7628c81edb8",
      "filename": "backend/app/rest/api/rest_public.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/0f2298d1930f3b2538b622ac92e3333cf9c972d2/backend/app/rest/api/rest_public.go",
      "raw_url": "https://github.com/umputun/remark/raw/0f2298d1930f3b2538b622ac92e3333cf9c972d2/backend/app/rest/api/rest_public.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_public.go?ref=0f2298d1930f3b2538b622ac92e3333cf9c972d2",
      "patch": "@@ -562,7 +562,7 @@ func (s *public) eventsCh(ctx context.Context, fn eventFn) <-chan eventResp {\n \t\tfor {\n \t\t\tselect {\n \t\t\tcase <-ctx.Done(): // request closed by remote client\n-\t\t\t\tlog.Printf(\"[DEBUG] info stream closed by remote client, %v\", ctx.Err())\n+\t\t\t\tlog.Printf(\"[DEBUG] stream closed by remote client, %v\", ctx.Err())\n \t\t\t\treturn\n \t\t\tcase <-tick.C:\n \t\t\t\tresp, upd, err := fn()"
    },
    {
      "sha": "82c3c965b7d9cfe064d90ccb3bcb8f066d1a0870",
      "filename": "backend/app/rest/api/rest_public_test.go",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark/blob/0f2298d1930f3b2538b622ac92e3333cf9c972d2/backend/app/rest/api/rest_public_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/0f2298d1930f3b2538b622ac92e3333cf9c972d2/backend/app/rest/api/rest_public_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_public_test.go?ref=0f2298d1930f3b2538b622ac92e3333cf9c972d2",
      "patch": "@@ -533,6 +533,7 @@ func TestRest_InfoStream(t *testing.T) {\n \tsrv.pubRest.readOnlyAge = 10000000 // make sure we don't hit read-only\n \tsrv.pubRest.streamRefresh = 1 * time.Millisecond\n \tsrv.pubRest.streamTimeOut = 300 * time.Millisecond\n+\tsrv.pubRest.maxActiveStreams = 100\n \n \tpostComment(t, ts.URL)\n \n@@ -588,6 +589,7 @@ func TestRest_InfoStreamTimeout(t *testing.T) {\n \tsrv.pubRest.readOnlyAge = 10000000 // make sure we don't hit read-only\n \tsrv.pubRest.streamRefresh = 10 * time.Millisecond\n \tsrv.pubRest.streamTimeOut = 450 * time.Millisecond\n+\tsrv.pubRest.maxActiveStreams = 100\n \n \tpostComment(t, ts.URL)\n \n@@ -602,6 +604,7 @@ func TestRest_InfoStreamCancel(t *testing.T) {\n \tsrv.pubRest.readOnlyAge = 10000000 // make sure we don't hit read-only\n \tsrv.pubRest.streamRefresh = 10 * time.Millisecond\n \tsrv.pubRest.streamTimeOut = 500 * time.Millisecond\n+\tsrv.pubRest.maxActiveStreams = 100\n \n \tpostComment(t, ts.URL)\n \n@@ -653,6 +656,7 @@ func TestRest_LastCommentsStream(t *testing.T) {\n \tsrv.pubRest.readOnlyAge = 10000000 // make sure we don't hit read-only\n \tsrv.pubRest.streamRefresh = 10 * time.Millisecond\n \tsrv.pubRest.streamTimeOut = 500 * time.Millisecond\n+\tsrv.pubRest.maxActiveStreams = 100\n \n \tpostComment(t, ts.URL)\n \n@@ -691,6 +695,7 @@ func TestRest_LastCommentsStreamTimeout(t *testing.T) {\n \tsrv.pubRest.readOnlyAge = 10000000 // make sure we don't hit read-only\n \tsrv.pubRest.streamRefresh = 10 * time.Millisecond\n \tsrv.pubRest.streamTimeOut = 450 * time.Millisecond\n+\tsrv.pubRest.maxActiveStreams = 100\n \n \tpostComment(t, ts.URL)\n \n@@ -705,6 +710,7 @@ func TestRest_LastCommentsStreamCancel(t *testing.T) {\n \tsrv.pubRest.readOnlyAge = 10000000 // make sure we don't hit read-only\n \tsrv.pubRest.streamRefresh = 10 * time.Millisecond\n \tsrv.pubRest.streamTimeOut = 500 * time.Millisecond\n+\tsrv.pubRest.maxActiveStreams = 100\n \n \tpostComment(t, ts.URL)\n \n@@ -763,6 +769,9 @@ func TestRest_LastCommentsStreamTooMany(t *testing.T) {\n \t}\n \twg.Wait()\n \tassert.Equal(t, int32(10), atomic.LoadInt32(&errsCount), \"10 streams rejected\")\n+\n+\t_, code := get(t, ts.URL+\"/api/v1/stream/last?site=radio-t\")\n+\tassert.Equal(t, 200, code, \"all streams closed, good to go again\")\n }\n \n func postComment(t *testing.T, url string) {"
    }
  ]
}
