{
  "sha": "ace7f00ec74411523794c5c5430a24c28a44ccb9",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6YWNlN2YwMGVjNzQ0MTE1MjM3OTRjNWM1NDMwYTI0YzI4YTQ0Y2NiOQ==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-06-09T06:07:55Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-06-09T06:07:55Z"
    },
    "message": "Fix login-required OpenAuth login bug, add e2e test\n\nAnd prevent accidentally closing the create-user dialog, if it's\nthe only thing shown on the page.",
    "tree": {
      "sha": "d91e3b7ed1c8c53d2adb4afff647b2be81bba14c",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/d91e3b7ed1c8c53d2adb4afff647b2be81bba14c"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/ace7f00ec74411523794c5c5430a24c28a44ccb9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/ace7f00ec74411523794c5c5430a24c28a44ccb9",
  "html_url": "https://github.com/debiki/talkyard/commit/ace7f00ec74411523794c5c5430a24c28a44ccb9",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/ace7f00ec74411523794c5c5430a24c28a44ccb9/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e07dc967bbc0cd8748984c85b41d39ffbaf5833c",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/e07dc967bbc0cd8748984c85b41d39ffbaf5833c",
      "html_url": "https://github.com/debiki/talkyard/commit/e07dc967bbc0cd8748984c85b41d39ffbaf5833c"
    }
  ],
  "stats": {
    "total": 308,
    "additions": 236,
    "deletions": 72
  },
  "files": [
    {
      "sha": "21ac72f59653c24249b1d67ebc0efe8fc6e686de",
      "filename": "app/controllers/LoginWithOpenAuthController.scala",
      "status": "modified",
      "additions": 37,
      "deletions": 13,
      "changes": 50,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/app/controllers/LoginWithOpenAuthController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/app/controllers/LoginWithOpenAuthController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/LoginWithOpenAuthController.scala?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -107,7 +107,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n       throwInternalError(\"DwE5WKU3\", message)\n     }\n \n-    var futureResult = authenticate(provider, request)\n+    var futureResult = startOrFinishAuthenticationWithSilhouette(provider, request)\n     if (returnToUrl.nonEmpty) {\n       futureResult = futureResult map { result =>\n         result.withCookies(\n@@ -131,17 +131,21 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n \n \n   def finishAuthentication(provider: String): Action[Unit] = AsyncGetActionIsLogin { request =>\n-    authenticate(provider, request)\n+    startOrFinishAuthenticationWithSilhouette(provider, request)\n   }\n \n \n   /** Authenticates a user against e.g. Facebook or Google or Twitter, using OAuth 1 or 2.\n+    *\n+    * Confusingly enough (?), Silhouette uses the same method both for starting\n+    * and finishing authentication. (529JZ24)\n     *\n     * Based on:\n     *   https://github.com/mohiva/play-silhouette-seed/blob/master/\n     *                     app/controllers/SocialAuthController.scala#L32\n     */\n-  private def authenticate(providerName: String, request: GetRequest): Future[Result] = {\n+  private def startOrFinishAuthenticationWithSilhouette(\n+        providerName: String, request: GetRequest): Future[Result] = {\n     context.rateLimiter.rateLimit(RateLimits.Login, request)\n \n     val settings = request.siteSettings\n@@ -190,10 +194,12 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n         return Future.successful(Results.Forbidden(s\"Bad provider: `$providerName' [DwE2F0D6]\"))\n     }\n \n-    provider.authenticate()(request.underlying) flatMap {\n+    provider.authenticate()(request.underlying) flatMap {  // (529JZ24)\n       case Left(result) =>\n+        // We're starting authentication.\n         Future.successful(result)\n       case Right(authInfo) =>\n+        // We're finishing authentication.\n         val futureProfile: Future[SocialProfile] = provider.retrieveProfile(authInfo)\n         futureProfile flatMap { profile: SocialProfile =>   // TalkyardSocialProfile?  (TYSOCPROF)\n           handleAuthenticationData(request, profile)\n@@ -317,6 +323,9 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n         case Some(value) =>\n           // Remove to prevent another login with the same key, in case it gets leaked,\n           // e.g. via a log file.\n+          // (Hmm, we remove the OpenAuthDetails entry here, and then add it back again here: (406BM5).\n+          // Maybe could avoid removing it here. Still, good to do here, so it gets\n+          // deleted for all code paths below that throws a client error back to the browser.)\n           cache.invalidate(cacheKey)\n           value.asInstanceOf[OpenAuthDetails]\n       })\n@@ -328,6 +337,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     val mayCreateNewUser = !mayCreateNewUserCookie.map(_.value).contains(\"false\")\n \n     // COULD let tryLogin() return a LoginResult and use pattern matching, not exceptions.\n+    //var showsCreateUserDialog = false\n     val result =\n       try {\n         val loginGrant = dao.tryLoginAsMember(loginAttempt)\n@@ -407,6 +417,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n                   \"TyEBADEMLDMN_-OAUTH_\", \"You cannot sign up using that email address\")\n               }\n               else if (mayCreateNewUser) {\n+                //showsCreateUserDialog = true\n                 showCreateUserDialog(request, oauthDetails)\n               }\n               else {\n@@ -418,6 +429,12 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n           }\n       }\n \n+    // COULD avoid deleting cookeis if we have now logged in (which we haven't, if\n+    // the create-user dialog is shown: showsCreateUserDialog == true). Otherwise,\n+    // accidentally reloading the page, results in weird errors, like the xsrf token\n+    // missing. But supporting page reload here requires fairly many mini fixes,\n+    // and maybe is mariginally worse for security? since then someone else,\n+    // e.g. an \"evil\" tech support person, can ask for and resuse the url?\n     result.discardingCookies(CookiesToDiscardAfterLogin: _*)\n   }\n \n@@ -433,6 +450,7 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     // (I'm fairly sure Google knows that each Gmail address is owned by the correct user.)\n     oauthDetails.providerId == GoogleProvider.ID &&\n       oauthDetails.email.exists(_ endsWith \"@gmail.com\")\n+    // + known all-email-addrs-have-been-verified email domains from site settings?\n   }\n \n \n@@ -503,16 +521,19 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n \n \n   private def showCreateUserDialog(request: GetRequest, oauthDetails: OpenAuthDetails): Result = {\n+    // Re-insert the  OpenAuthDetails, we just removed it (406BM5). A bit double work?\n     val cacheKey = nextRandomString()\n     cache.put(cacheKey, oauthDetails)\n+\n     val anyIsInLoginWindowCookieValue = request.cookies.get(IsInLoginWindowCookieName).map(_.value)\n     val anyReturnToUrlCookieValue = request.cookies.get(ReturnToUrlCookieName).map(_.value)\n \n     val result = if (anyIsInLoginWindowCookieValue.isDefined) {\n       // Continue running in the login window, by returning a complete HTML page that\n-      // shows a create-user dialog. (( This happens for example if 1) we're in a create\n+      // shows a create-user dialog. (( This happens if 1) we're in a create\n       // site wizard, then there's a dedicated login step in a login window, or 2)\n-      // we're logging in to the admin pages, or 3) we're visiting an embedded comments\n+      // we're logging in to the admin pages, or 3) when logging in to a login required site,\n+      // or 4) we're visiting an embedded comments\n       // site and attempted to login, then a login popup window opens (better than\n       // showing a login dialog somewhere inside the iframe). ))\n       Ok(views.html.login.showCreateUserDialog(\n@@ -526,8 +547,8 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     }\n     else {\n       // The request is from an OAuth provider login popup. Run some Javascript in the\n-      // popup that closes the popup and continues execution in the main window (the popup's\n-      // window.opener).\n+      // popup that continues execution in the main window (the popup's window.opener)\n+      // and closes the popup.\n       Ok(views.html.login.closePopupShowCreateUserDialog(\n         providerId = oauthDetails.providerId,\n         newUserUsername = oauthDetails.username getOrElse \"\",\n@@ -706,8 +727,8 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     val newXsrfToken = nextRandomString()\n     val newCookieValue = newXsrfToken + Separator + oldTokens.getOrElse(\"\")\n     val loginEndpoint =\n-      globals.anyLoginOrigin.getOrDie(\"DwE830bF1\") +\n-        routes.LoginWithOpenAuthController.loginThenReturnToOriginalSite(\n+      globals.anyLoginOrigin.getOrDie(\"TyE830bF1\") +\n+        routes.LoginWithOpenAuthController.loginAtLoginOriginThenReturnToOriginalSite(\n           providerName, returnToOrigin = originOf(request), newXsrfToken)\n     Future.successful(Redirect(loginEndpoint).withCookies(\n       SecureCookie(name = ReturnToThisSiteXsrfTokenCookieName, value = newCookieValue,\n@@ -721,15 +742,15 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n     * The request origin must be the anyLoginOrigin, because that's the origin that the\n     * OAuth 1 and 2 providers supposedly have been configured to use.\n     */\n-  def loginThenReturnToOriginalSite(provider: String, returnToOrigin: String, xsrfToken: String)\n-        : Action[Unit] = AsyncGetActionIsLogin { request =>\n+  def loginAtLoginOriginThenReturnToOriginalSite(provider: String, returnToOrigin: String,\n+        xsrfToken: String): Action[Unit] = AsyncGetActionIsLogin { request =>\n     // The actual redirection back to the returnToOrigin happens in handleAuthenticationData()\n     // — it checks the value of the return-to-origin cookie.\n     if (globals.anyLoginOrigin isNot originOf(request))\n       throwForbidden(\n         \"DwE50U2\", s\"You need to login via the login origin, which is: `${globals.anyLoginOrigin}'\")\n \n-    val futureResponse = authenticate(provider, request)\n+    val futureResponse = startOrFinishAuthenticationWithSilhouette(provider, request)\n     futureResponse map { response =>\n       response.withCookies(\n         SecureCookie(name = ReturnToSiteOriginTokenCookieName, value = s\"$returnToOrigin$Separator$xsrfToken\",\n@@ -740,6 +761,9 @@ class LoginWithOpenAuthController @Inject()(cc: ControllerComponents, edContext:\n \n   def continueAtOriginalSite(oauthDetailsCacheKey: String, xsrfToken: String): Action[Unit] =\n         GetActionIsLogin { request =>\n+    // oauthDetailsCacheKey might be a chache key Mallory generated, when starting a login\n+    // flow on his laptop — and now he might have made the current requester click a link\n+    // with that cache key, in the url. So, we also check an xsrf token here.\n     val anyXsrfTokenInSession = request.cookies.get(ReturnToThisSiteXsrfTokenCookieName)\n     anyXsrfTokenInSession match {\n       case Some(xsrfCookie) =>"
    },
    {
      "sha": "0262866ba3a1a273161b3461773bfa9a77206ecc",
      "filename": "app/views/login/closePopupShowCreateUserDialog.scala.html",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/app/views/login/closePopupShowCreateUserDialog.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/app/views/login/closePopupShowCreateUserDialog.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/login/closePopupShowCreateUserDialog.scala.html?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -1,5 +1,5 @@\n @**\n- * Copyright (c) 2014, 2018 Kaj Magnus Lindberg\n+ * Copyright (c) 2014, 2018-2019 Kaj Magnus Lindberg\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU Affero General Public License as\n@@ -21,7 +21,8 @@\n @* Closes the OpenAuth or OpenID login popup window, and opens a create user dialog\n  * in the window.opener (which should be the main page where e.g. a forum topic and all\n  * replies are shown).\n- *   Not for embedded comments logins, because then we'll continue running inside\n+ *\n+ * Not for embedded comments logins, because then we'll continue running inside\n  * the popup, see showCreateUserDialog.scala.html.\n  *@\n \n@@ -39,8 +40,9 @@\n       username: '@newUserUsername',\n       fullName: '@newUserFullName',\n       email: '@newUserEmail',\n-      authDataCacheKey: '@authDataCacheKey'\n-    }, '@continueToUrlOrEmpty');\n+      authDataCacheKey: '@authDataCacheKey',\n+      anyReturnToUrl: '@continueToUrlOrEmpty'\n+    });\n     window.close();\n </script>\n <p>"
    },
    {
      "sha": "ec3b79aa43cd03304d2db4e9148eaba5b75f8391",
      "filename": "app/views/login/showCreateUserDialog.scala.html",
      "status": "modified",
      "additions": 12,
      "deletions": 7,
      "changes": 19,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/app/views/login/showCreateUserDialog.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/app/views/login/showCreateUserDialog.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/login/showCreateUserDialog.scala.html?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -1,5 +1,5 @@\n @**\n- * Copyright (c) 2014 Kaj Magnus Lindberg\n+ * Copyright (c) 2014, 2019 Kaj Magnus Lindberg\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU Affero General Public License as\n@@ -17,27 +17,32 @@\n \n @(tpi: debiki.SiteTpi, serverAddress: String, newUserUsername: String, newUserFullName: String, newUserEmail: String, authDataCacheKey: String, anyContinueToUrl: Option[String])\n \n-@* After OpenAuth or OpenID login authentication has been completed in this login popup window,\n- * we here continue by showing a create user dialog. This is for embedded comments pages —\n+@* After OpenAuth or OpenID login authentication has been completed in this login (popup) window,\n+ * we here continue by showing a create user dialog. This is 1) for embedded comments pages —\n  * then, login and user creation always happens in a login popup window (this window).\n- * — So don't call window.close() here. But in closePopupShowCreateUserDialog.scala.html we do the\n+ * And 2) for logging in in the whole main window, to e.g. the admin area, or if the\n+ * site requires login.\n+ *\n+ * So don't call window.close() here. But in closePopupShowCreateUserDialog.scala.html we do the\n  * same things, except that we also call window.close(), and continue in the opener instead.\n  *@\n \n @continueToUrlOrEmpty = @{\n   anyContinueToUrl getOrElse \"\"\n }\n \n-@popupMain(tpi, serverAddress) {\n+@popupMain(tpi, serverAddress) {@* COULD RENAME popupMain to loginDialogMain (might not be a popup) *@\n   <!-- views/login/showCreateUserDialog.scala.html -->\n   <script>\n     debiki.internal.showCreateUserDialog({\n       @* Why no providerId here? But in closePopupShowCreateUserDialog.scala.html *@\n       username: '@newUserUsername',\n       fullName: '@newUserFullName',\n       email: '@newUserEmail',\n-      authDataCacheKey: '@authDataCacheKey'\n-    }, '@continueToUrlOrEmpty');\n+      authDataCacheKey: '@authDataCacheKey',\n+      anyReturnToUrl: '@continueToUrlOrEmpty',\n+      preventClose: true\n+    });\n   </script>\n }\n "
    },
    {
      "sha": "cac7746b278be4b05f36dbb648899ca060e52205",
      "filename": "client/app-more/login/create-user-dialog.more.ts",
      "status": "modified",
      "additions": 41,
      "deletions": 29,
      "changes": 70,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/client/app-more/login/create-user-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/client/app-more/login/create-user-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/login/create-user-dialog.more.ts?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -80,16 +80,21 @@ function getAddressVerificationEmailSentDialog() {\n }\n \n \n-interface NewUserData {\n+interface CreateUserParams {\n   username: string;\n   fullName: string;\n   email: string;\n   authDataCacheKey?: string;\n+  anyReturnToUrl?: string;\n+  preventClose?: true;\n }\n \n-interface CreateUserPostData extends NewUserData {\n+interface CreateUserPostData extends CreateUserParams {\n+  username: string;\n+  fullName: string;\n+  email: string;\n   password?: string;\n-  returnToUrl: string;\n+  returnToUrl?: string;\n }\n \n \n@@ -99,45 +104,45 @@ interface CreateUserPostData extends NewUserData {\n  * the redirect should happen only if an email address verification email is sent,\n  * and via a link in that email.\n  */\n-debiki.internal.showCreateUserDialog = function(userData: NewUserData, anyReturnToUrl) {\n-  getCreateUserDialog().open(userData, anyReturnToUrl);\n+debiki.internal.showCreateUserDialog = function(params: CreateUserParams) {\n+  getCreateUserDialog().open(params);\n };\n \n \n const CreateUserDialog = createClassAndFactory({\n   displayName: 'CreateUserDialog',\n \n   getInitialState: function () {\n-    return { isOpen: false, userData: undefined, store: {} };\n+    return { isOpen: false, params: undefined, store: {} };\n   },\n \n-  open: function(userData: NewUserData, anyReturnToUrl: string) {\n+  open: function(params: CreateUserParams) {\n     const loginDialog = login.getLoginDialog();\n     this.setState({\n       isOpen: true,\n-      userData: userData,\n+      params,\n       afterLoginCallback: loginDialog.getAfterLoginCallback(),\n-      anyReturnToUrl: anyReturnToUrl,\n       store: ReactStore.allData(),\n     });\n     // In case any login dialog is still open: (this resets the after-login-callback copied above)\n     loginDialog.close();\n   },\n \n   close: function() {\n-    this.setState({ isOpen: false, userData: undefined });\n+    this.setState({ isOpen: false, params: undefined });\n   },\n \n   render: function () {\n     const store: Store = this.state.store;\n+    const params: CreateUserParams | undefined = this.state.params;\n+    const preventClose = params && params.preventClose;\n \n     let content;\n     if (this.state.isOpen) {\n       const childProps = {\n-        ...this.state.userData,\n+        ...this.state.params,\n         store,\n         afterLoginCallback: this.state.afterLoginCallback,\n-        anyReturnToUrl: this.state.anyReturnToUrl,\n         closeDialog: this.close,\n       };\n       if (store.siteStatus === SiteStatus.NoAdmin) {\n@@ -147,8 +152,8 @@ const CreateUserDialog = createClassAndFactory({\n     }\n \n     return (\n-      Modal({ show: this.state.isOpen, onHide: this.close, keyboard: false,\n-          dialogClassName: 'esCreateUserDlg' },\n+      Modal({ show: this.state.isOpen, onHide: preventClose ? undefined : this.close,\n+          keyboard: false, dialogClassName: 'esCreateUserDlg' },\n         ModalHeader({}, ModalTitle({}, t.cud.CreateUser)),\n         ModalBody({}, content)));\n   }\n@@ -204,28 +209,29 @@ export var CreateUserDialogContent = createClassAndFactory({\n   },\n \n   doCreateUser: function() {\n-    const data: CreateUserPostData = this.state.userData;\n-    data.returnToUrl = this.props.anyReturnToUrl;\n+    const returnToUrl = this.props.anyReturnToUrl;\n+    const postData: CreateUserPostData = { ...this.state.userData, returnToUrl };\n     waitUntilAcceptsTerms(this.props.store, this.props.loginReason === LoginReason.BecomeAdmin, () => {\n       if (this.props.authDataCacheKey) { // [4WHKTP06]\n-        data.authDataCacheKey = this.props.authDataCacheKey;\n-        Server.createOauthUser(data, this.handleCreateUserResponse, this.handleErrorResponse);\n+        postData.authDataCacheKey = this.props.authDataCacheKey;\n+        Server.createOauthUser(postData, this.handleCreateUserResponse, this.handleErrorResponse);\n       }\n       else if (this.props.isForPasswordUser) {\n-        data.password = this.refs.password.getValue();\n-        Server.createPasswordUser(data, this.handleCreateUserResponse, this.handleErrorResponse);\n+        postData.password = this.refs.password.getValue();\n+        Server.createPasswordUser(postData, this.handleCreateUserResponse, this.handleErrorResponse);\n       }\n       else if (this.props.isForGuest) {\n         Server.loginAsGuest(\n-            data.fullName, data.email, this.handleCreateUserResponse, this.handleErrorResponse);\n+            postData.fullName, postData.email, this.handleCreateUserResponse, this.handleErrorResponse);\n       }\n       else {\n-        console.error('DwE7KFEW2');\n+        console.error('TyE7KFEW2');\n       }\n     });\n   },\n \n   handleCreateUserResponse: function(response: GuestLoginResponse) {\n+    const anyReturnToUrl = this.props.anyReturnToUrl;\n     if (!response.userCreatedAndLoggedIn) {\n       dieIf(response.emailVerifiedAndLoggedIn, 'EdE2TSBZ2');\n       ReactActions.newUserAccountCreated();\n@@ -237,16 +243,17 @@ export var CreateUserDialogContent = createClassAndFactory({\n       const mayCloseDialog = this.props.loginReason !== LoginReason.BecomeAdmin;\n       getAddressVerificationEmailSentDialog().sayVerifEmailSent(mayCloseDialog);\n     }\n-    else if (this.props.anyReturnToUrl && !eds.isInLoginPopup &&\n-        this.props.anyReturnToUrl.search('_RedirFromVerifEmailOnly_') === -1) {\n-      const returnToUrl = this.props.anyReturnToUrl.replace(/__dwHash__/, '#');\n+    else if (anyReturnToUrl && !eds.isInLoginPopup &&\n+        anyReturnToUrl.search('_RedirFromVerifEmailOnly_') === -1) {\n+      const returnToUrl = anyReturnToUrl.replace(/__dwHash__/, '#');\n       const currentUrl = window.location.toString();\n+      // old comment: /*\n       // Previously, only:\n       //   if (returnToUrl === currentUrl) ...\n       // but was never used?\n       // Now, instead, for Usability Testing Exchange [plugin]: (and perhaps better, always?)\n       // (afterLoginCallback = always called after signup if logged in, and the return-to-url\n-      // is included in the continue-link via the email.)\n+      // is included in the continue-link via the email.)  */\n       if (returnToUrl === currentUrl || this.props.afterLoginCallback) {\n         const afterLoginCallback = this.props.afterLoginCallback; // gets nulled when dialogs closed\n         debiki2.ReactActions.loadMyself(() => {\n@@ -259,8 +266,13 @@ export var CreateUserDialogContent = createClassAndFactory({\n       else {\n         window.location.assign(returnToUrl);\n         // In case the location didn't change, reload the page, otherwise user specific things\n-        // won't appear.  [redux] This reload() won't be needed later?\n-        window.location.reload();\n+        // won't appear.\n+        // However, Chrome surprisingly does reload() here before above location.assign(),\n+        // which result in reloading  /-/login-oauth-continue, if logging in with OpenAuth\n+        // to a login-required site, instead of navigating to the returnToUrl.\n+        // That doesn't work (weird errors, e.g. the dwCoReturnToSiteXsrfToken cookie missing,\n+        // if reloading). Postpone reload(), so Chrome will handle assign() first.\n+        setTimeout(window.location.reload, 1);\n       }\n     }\n     else {\n@@ -458,7 +470,7 @@ const CreateUserResultDialog = createComponent({\n         ModalFooter({},\n           PrimaryButton({ onClick: this.close }, t.Okay));\n     return (\n-      Modal({ show: this.state.isOpen, onHide: this.state.mayClose ? this.close : null, id },\n+      Modal({ show: this.state.isOpen, onHide: this.state.mayClose ? this.close : undefined, id },\n         // People don't read the dialog body, so let the title be \"Check your email\".\n         ModalHeader({}, ModalTitle({}, this.state.checkEmail ? t.CheckYourEmail : t.Welcome)),\n         ModalBody({}, r.p({}, text)),"
    },
    {
      "sha": "994a3b2d6a47a462634c7e0467b7703c3c7e77b2",
      "filename": "client/app-more/util/stupid-dialog.more.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/client/app-more/util/stupid-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/client/app-more/util/stupid-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/util/stupid-dialog.more.ts?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -99,7 +99,7 @@ export const StupidDialog = createComponent({\n             (stuff.dialogClassName || '');\n \n     const maybeClose =\n-      preventClose || (stuff.closeOnClickOutside === false) ? null : makeCloseFn(0);\n+      preventClose || (stuff.closeOnClickOutside === false) ? undefined : makeCloseFn(0);\n \n     // CLEAN_UP, SMALLER_BUNDLE: use the same type of dialog for both non-iframe and iframe.\n     let result;"
    },
    {
      "sha": "f83ed5b7487881c75a983978993ac9ddce2ea88c",
      "filename": "conf/routes",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/conf/routes",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/conf/routes",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/conf/routes?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -36,7 +36,7 @@ GET   /-/login-password-confirm-email controllers.LoginWithPasswordController.co\n \n GET   /-/login-openauth/:provider controllers.LoginWithOpenAuthController.startAuthentication(provider, returnToUrl)\n GET   /-/login-auth-callback/:provider  controllers.LoginWithOpenAuthController.finishAuthentication(provider)\n-GET   /-/login-oauth-then-return/:provider controllers.LoginWithOpenAuthController.loginThenReturnToOriginalSite(provider, returnToOrigin, xsrfToken)\n+GET   /-/login-oauth-then-return/:provider controllers.LoginWithOpenAuthController.loginAtLoginOriginThenReturnToOriginalSite(provider, returnToOrigin, xsrfToken)\n GET   /-/login-oauth-continue           controllers.LoginWithOpenAuthController.continueAtOriginalSite(oauthDetailsCacheKey, xsrfToken)\n POST  /-/login-oauth-create-user  controllers.LoginWithOpenAuthController.handleCreateUserDialog\n "
    },
    {
      "sha": "8b1ee2f590a439d817b62b51d56ab4382fbc5d94",
      "filename": "docs/e2e-tests-map.txt",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/docs/e2e-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/docs/e2e-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-map.txt?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -80,6 +80,10 @@ login -\n     github:\n     twitter:\n   via invite email: (7JK2)\n+  login-required site, with password:\n+          - settings-toggle-login-required.3browsers.test.ts  TyT4GKBW20\n+  login-required site, with openauth:\n+          - login-required-oauth-signup-login.test.ts  TyT406MRTJW2\n \n different users -\n   login, logout, switch user:  almost all tests\n@@ -484,8 +488,9 @@ site settings:\n     allowed email domains:\n           - settings-allowed-email-domains.2browsers.test.ts  TyT5AKRD04\n     login required:\n-          - settings-toggle-login-required.3browsers.test.ts  [TyT4GKBW20]\n-          - admin-user-approve-reject.2browsers.test.ts [TyT5KHEWQ2]\n+          - settings-toggle-login-required.3browsers.test.ts  TyT4GKBW20\n+          - login-required-oauth-signup-login.test.ts  TyT406MRTJW2\n+          - admin-user-approve-reject.2browsers.test.ts  TyT5KHEWQ2\n     invites only:\n     approve members:\n           - settings-approve-members.2browsers.test.ts  [TyT2HUWX8]"
    },
    {
      "sha": "d4019a6f21b8ddf764acde7c86378dd36a12ed00",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/modules/ed-core/src/main/scala/com/debiki/core/package.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/package.scala?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -909,6 +909,7 @@ package object core {\n     */\n   def UNTESTED = ()       // If the code might not work, e.g. has never been run.\n   def TESTS_MISSING = ()  // It'd be nice with unit/integration/whatever tests.\n+  def FASTER_E2E_TESTS = () // An opportunity to speed up the e2e tests (maybe just marginally)\n   def FLAKY = ()          // If an e2e test has races, can fail (ought to fix ... well ... later)\n   def SECURITY = ()       // Some security issue, not necessarily so very important\n   def ASTROTURFING = ()   // Someone creates many accounts and pretends to be many people"
    },
    {
      "sha": "5ea711ee3b133b2933432d8a814664885dc71d9a",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -244,6 +244,7 @@ function runAllE2eTests {\n \n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only settings-allowed-email-domains.2browsers $args\n   runE2eTest s/wdio target/e2e/wdio.3chrome.conf.js    --only settings-toggle-login-required.3browsers $args\n+  runE2eTest s/wdio target/e2e/wdio.conf.js            --only login-required-oauth-signup-login $args\n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only settings-approve-members.2browsers $args\n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only admin-user-approve-reject.2browsers $args\n   runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js    --only admin-user-staff.2browsers $args"
    },
    {
      "sha": "017d4bdca4df92b8ceaa4dd7dacc34d4df18a57a",
      "filename": "tests/e2e/specs/login-required-oauth-signup-login.test.ts",
      "status": "added",
      "additions": 93,
      "deletions": 0,
      "changes": 93,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/tests/e2e/specs/login-required-oauth-signup-login.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/tests/e2e/specs/login-required-oauth-signup-login.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/login-required-oauth-signup-login.test.ts?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -0,0 +1,93 @@\n+/// <reference path=\"../test-types.ts\"/>\n+\n+import _ = require('lodash');\n+import assert = require('assert');\n+import server = require('../utils/server');\n+import utils = require('../utils/utils');\n+import pagesFor = require('../utils/pages-for');\n+import settings = require('../utils/settings');\n+import make = require('../utils/make');\n+import lad = require('../utils/log-and-die');\n+import c = require('../test-constants');\n+\n+let idAddress: IdAddress;\n+declare let browser: any;\n+\n+const googleUSersTopic =\n+    { title: \"I am the Goog of Email\", body: \"Faster than snails I send mails\" };\n+\n+const testName = 'login-required-oauth-signup-login.test.ts';\n+\n+\n+describe(`${testName}  TyT406MRTJW2`, () => {\n+\n+  if (!settings.include3rdPartyDependentTests) {\n+    lad.logMessage(`Skipping test '${testName}' because 3rd party related tests not enabled.`);\n+    return;\n+  }\n+\n+  it(\"create site\", () => {\n+    browser = _.assign(browser, pagesFor(browser));\n+    const site: SiteData2 = make.forumOwnedByOwen('oauth-login', { title: \"OAuth Login Forum\" });\n+    site.settings.userMustBeAuthenticated = true;\n+    idAddress = server.importSiteData(site);\n+  });\n+\n+\n+  // ---------- Signup with OpenAuth, when wesite requires login\n+\n+  // This loads the /-/login-oauth-continue endpoint full screen, instead of in a\n+  // popup — which triggers slightly different code paths.\n+\n+  it(\"Can sign up with Gmail @login @gmail @google\", () => {\n+    browser.go(idAddress.origin);\n+    browser.disableRateLimits();\n+    browser.loginDialog.createGmailAccount({\n+      username: 'gmail_user',\n+      email: settings.gmailEmail,\n+      password: settings.gmailPassword,\n+    }, {\n+      isInFullScreenLogin: true,\n+      anyWelcomeDialog: 'THERE_WILL_BE_NO_WELCOME_DIALOG',\n+    });\n+  });\n+\n+  it(\"... the topbar updates to show the username\", () => {\n+    browser.topbar.assertMyUsernameMatches('gmail_user');\n+    browser.disableRateLimits();\n+  });\n+\n+  it(\"The Gmail user can create a topic  @gmail @google\", () => {\n+    browser.complex.createAndSaveTopic(googleUSersTopic);\n+  });\n+\n+  it(\"Logs out\", () => {\n+    browser.topbar.clickLogout({ waitForLoginButton: false });\n+  });\n+\n+\n+  // ---------- Login with OpenAuth, when wesite requires login\n+\n+\n+  it(\"Can log in with Gmail @login @gmail @google\", () => {\n+    browser.refresh();\n+    browser.loginDialog.loginWithGmail({\n+      email: settings.gmailEmail,\n+      password: settings.gmailPassword,\n+    }, {\n+      isInFullScreenLogin: true,\n+      anyWelcomeDialog: 'THERE_WILL_BE_NO_WELCOME_DIALOG',\n+    });\n+  });\n+\n+  it(\"... gets logged in with the correct username\", () => {\n+    browser.topbar.assertMyUsernameMatches('gmail_user');\n+  });\n+\n+\n+  it(\"The topic is visible @gmail @google\", () => {\n+    browser.topic.waitForPostAssertTextMatches(c.BodyNr, googleUSersTopic.body);\n+  });\n+\n+});\n+"
    },
    {
      "sha": "eb96f23f846883e8b82e341d2703fbf1c8897186",
      "filename": "tests/e2e/test-types2.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/tests/e2e/test-types2.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/tests/e2e/test-types2.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/test-types2.ts?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -48,8 +48,8 @@ interface TestCounters {\n }\n \n \n-/*\n-interface SiteData {   [3SD5PB7]\n+\n+interface SiteData2 {   // [3SD5PB7]\n   meta: SiteMeta;\n   settings: {\n     companyFullName: string,\n@@ -58,7 +58,7 @@ interface SiteData {   [3SD5PB7]\n     allowSignup?: boolean;\n     // allowLocalSignup?: boolean;\n     allowGuestLogin?: boolean;\n-    userMustBeAuthenticated?: boolean;\n+    userMustBeAuthenticated?: boolean;  // = loginRequired\n     requireVerifiedEmail?: boolean;\n     emailDomainBlacklist?: string;\n     emailDomainWhitelist?: string;\n@@ -89,7 +89,7 @@ interface SiteData {   [3SD5PB7]\n   uploads: any;\n   auditLog: any;\n   reviewTasks: any;\n-} */\n+}\n \n \n interface GroupInclDetails {"
    },
    {
      "sha": "08062b6c3a77e03a30faeb1db9b38dbcbf8a8f20",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 32,
      "deletions": 11,
      "changes": 43,
      "blob_url": "https://github.com/debiki/talkyard/blob/ace7f00ec74411523794c5c5430a24c28a44ccb9/tests/e2e/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/ace7f00ec74411523794c5c5430a24c28a44ccb9/tests/e2e/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/pages-for.ts?ref=ace7f00ec74411523794c5c5430a24c28a44ccb9",
      "patch": "@@ -1267,7 +1267,11 @@ function pagesFor(browser) {\n         api.waitForNewUrl();\n       },\n \n-      assertMyUsernameMatches: function(username: string) {\n+      // COULD FASTER_E2E_TESTS can set  wait:false at most places\n+      assertMyUsernameMatches: function(username: string, ps: { wait?: boolean } = {}) {\n+        if (ps.wait !== false) {\n+          browser.waitForVisible('.esMyMenu .esAvtrName_name');\n+        }\n         api.assertTextMatches('.esMyMenu .esAvtrName_name', username);\n       },\n \n@@ -1876,8 +1880,9 @@ function pagesFor(browser) {\n \n       createGmailAccount: function(data: { email: string, password: string, username: string },\n             ps: { isInPopupAlready?: true, shallBecomeOwner?: boolean,\n-                anyWelcomeDialog?: string } = {}) {\n-        api.loginDialog.loginWithGmail(data, ps.isInPopupAlready);\n+                anyWelcomeDialog?: string, isInFullScreenLogin?: boolean } = {}) {\n+        api.loginDialog.loginWithGmail(\n+              data, ps.isInPopupAlready, { isInFullScreenLogin: ps.isInFullScreenLogin });\n         // This should be the first time we login with Gmail at this site, so we'll be asked\n         // to choose a username.\n         // Not just #e2eUsername, then might try to fill in the username in the create-password-\n@@ -1895,6 +1900,11 @@ function pagesFor(browser) {\n           // Then the whole popup will close, now. Don't wait for any dialogs in it to\n           // close — that'd result in a 'window was already closed' error.\n         }\n+        else if (ps.isInFullScreenLogin) {\n+          // Then, could wait for our username to appear in my-menu — but the other if\n+          // branches here don't do that (and shouldn't always do that, in case we're\n+          // in an embedded something). So don't do here too, for consistency?\n+        }\n         else {\n           logMessage(\"waiting for login dialogs to close ...\");\n           api.waitUntilModalGone();\n@@ -1904,37 +1914,48 @@ function pagesFor(browser) {\n       },\n \n       loginWithGmail: function(data: { email: string, password: string },\n-            isInPopupAlready?: boolean, ps?: { stayInPopup: boolean }) {\n+            isInPopupAlready?: boolean,\n+            ps?: { stayInPopup?: boolean, isInFullScreenLogin?: boolean }) {\n         // Pause or sometimes the click misses the button. Is the browser doing some re-layout?\n         browser.pause(150);\n         api.waitAndClick('#e2eLoginGoogle');\n+        ps = ps || {};\n \n         // Switch to a login popup window that got opened, for Google:\n-        if (!isInPopupAlready)\n+        if (!isInPopupAlready && !ps.isInFullScreenLogin)\n           api.swithToOtherTabOrWindow();\n \n         const emailInputSelector = 'input[type=\"email\"]';\n         const emailNext = '#identifierNext';\n         const passwordInputSelector = 'input[type=\"password\"]';\n         const passwordNext = '#passwordNext';\n \n-        // We'll get logged in immediately, if we're already logged in to one\n-        // (and only one) Gmail account in the current browser. Wait for a short while\n-        // to find out what'll happen.\n+        // We'll get logged in immediately via Gmail, if we're already logged in to\n+        // one (and only one) Gmail account in the current browser. Wait for either\n+        // the Gmail login widgets to load, or for us to be back in Talkyard again.\n         while (true) {\n-          if (api.loginDialog.loginPopupClosedBecauseAlreadyLoggedIn()) {\n+          if (ps.isInFullScreenLogin) {\n+            if (browser.isExisting('.dw-login-modal')) {\n+              // We're back in Talkyard.\n+              return;\n+            }\n+          }\n+          else if (api.loginDialog.loginPopupClosedBecauseAlreadyLoggedIn()) {\n+            // We're back in Talkyard.\n             api.switchBackToFirstTabOrWindow();\n             return;\n           }\n           try {\n-            if (browser.isExisting(emailInputSelector))\n+            if (browser.isExisting(emailInputSelector)) {\n+              // That's a Gmail login widget. Continue with Gmail login.\n               break;\n+            }\n           }\n           catch (dummy) {\n             logMessage(`didn't find ${emailInputSelector}, ` +\n                 \"tab closed? already logged in? [EdM5PKWT0B]\");\n           }\n-          browser.pause(500);\n+          browser.pause(PollMs);\n         }\n \n         browser.pause(250);"
    }
  ]
}
