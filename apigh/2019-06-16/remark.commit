{
  "sha": "a302bdbe5d8446933f01a67f89d0467fb500874f",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmEzMDJiZGJlNWQ4NDQ2OTMzZjAxYTY3Zjg5ZDA0NjdmYjUwMDg3NGY=",
  "commit": {
    "author": {
      "name": "Misha Vyrtsev",
      "email": "reeywhaar@gmail.com",
      "date": "2019-06-11T00:20:39Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-06-11T00:20:39Z"
    },
    "message": "Hide user comments (#334)\n\n* add ability to hide user via localstorage\r\n\r\n* remove closures to avoid reconcilation\r\n\r\n* add actionBinder utilities\r\n\r\n* add user hide/show feature\r\n\r\n* remove unused type\r\n\r\n* fix css for settings user id\r\n\r\n* remove pointless confirmation for hide/show user in settings\r\n\r\n* add redux-dev-tools support",
    "tree": {
      "sha": "ac343f59147e32ff75a283c988460ce9b8c0bd2d",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/ac343f59147e32ff75a283c988460ce9b8c0bd2d"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/a302bdbe5d8446933f01a67f89d0467fb500874f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/a302bdbe5d8446933f01a67f89d0467fb500874f",
  "html_url": "https://github.com/umputun/remark/commit/a302bdbe5d8446933f01a67f89d0467fb500874f",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/a302bdbe5d8446933f01a67f89d0467fb500874f/comments",
  "author": {
    "login": "Reeywhaar",
    "id": 884649,
    "node_id": "MDQ6VXNlcjg4NDY0OQ==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/884649?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Reeywhaar",
    "html_url": "https://github.com/Reeywhaar",
    "followers_url": "https://api.github.com/users/Reeywhaar/followers",
    "following_url": "https://api.github.com/users/Reeywhaar/following{/other_user}",
    "gists_url": "https://api.github.com/users/Reeywhaar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Reeywhaar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Reeywhaar/subscriptions",
    "organizations_url": "https://api.github.com/users/Reeywhaar/orgs",
    "repos_url": "https://api.github.com/users/Reeywhaar/repos",
    "events_url": "https://api.github.com/users/Reeywhaar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Reeywhaar/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "133f5fc3f2fb61b95edd342ebf3de61843c6ea6d",
      "url": "https://api.github.com/repos/umputun/remark/commits/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d",
      "html_url": "https://github.com/umputun/remark/commit/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d"
    }
  ],
  "stats": {
    "total": 1220,
    "additions": 754,
    "deletions": 466
  },
  "files": [
    {
      "sha": "217cbd27d285d1ec3b024ef36096c07a5c202ccf",
      "filename": "frontend/app/common/constants.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/common/constants.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/common/constants.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/common/constants.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -27,6 +27,9 @@ export const PROVIDER_NAMES: { [P in AuthProvider['name']]: string } = {\n /** locastorage key for collapsed comments */\n export const LS_COLLAPSE_KEY = '__remarkCollapsed';\n \n+/** locastorage key for hidden users */\n+export const LS_HIDDEN_USERS_KEY = '__remarkHiddenUsers';\n+\n /** cookie key under which sort preference resides */\n export const COOKIE_SORT_KEY = 'remarkSort';\n "
    },
    {
      "sha": "92e4f53dbfe431da0e84ce90c19993c1ace8b14d",
      "filename": "frontend/app/components/auth-panel/auth-panel.test.tsx",
      "status": "modified",
      "additions": 35,
      "deletions": 1,
      "changes": 36,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/auth-panel/auth-panel.test.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/auth-panel/auth-panel.test.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/auth-panel/auth-panel.test.tsx?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -12,6 +12,7 @@ const DefaultProps: Partial<Props> = {\n     url: 'https://example.com',\n     count: 3,\n   },\n+  hiddenUsers: {},\n };\n \n describe('<AuthPanel />', () => {\n@@ -65,6 +66,39 @@ describe('<AuthPanel />', () => {\n       expect(providerLinks[0].textContent).toEqual('Google');\n       expect(providerLinks[1].textContent).toEqual('GitHub');\n     });\n+\n+    it('should not render settings if there is no hidden users', () => {\n+      const element = (\n+        <AuthPanel\n+          {...DefaultProps as Props}\n+          user={null}\n+          postInfo={{ ...DefaultProps.postInfo, read_only: true } as PostInfo}\n+        />\n+      );\n+\n+      render(element, container);\n+\n+      const adminAction = container.querySelector('.auth-panel__admin-action')!;\n+\n+      expect(adminAction).toBe(null);\n+    });\n+\n+    it('should render settings if there is some hidden users', () => {\n+      const element = (\n+        <AuthPanel\n+          {...DefaultProps as Props}\n+          user={null}\n+          postInfo={{ ...DefaultProps.postInfo, read_only: true } as PostInfo}\n+          hiddenUsers={{ hidden_joe: {} as any }}\n+        />\n+      );\n+\n+      render(element, container);\n+\n+      const adminAction = container.querySelector('.auth-panel__admin-action')!;\n+\n+      expect(adminAction.textContent).toEqual('Show settings');\n+    });\n   });\n   describe('For authorized user', () => {\n     let container: HTMLElement;\n@@ -101,7 +135,7 @@ describe('<AuthPanel />', () => {\n \n       const adminAction = container.querySelector('.auth-panel__admin-action')!;\n \n-      expect(adminAction.textContent).toEqual('Show blocked users');\n+      expect(adminAction.textContent).toEqual('Show settings');\n     });\n   });\n });"
    },
    {
      "sha": "0e8b1e39e8e407e4d9d74a35570709766a4526d2",
      "filename": "frontend/app/components/auth-panel/auth-panel.tsx",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/auth-panel/auth-panel.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/auth-panel/auth-panel.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/auth-panel/auth-panel.tsx?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -11,9 +11,11 @@ import Dropdown, { DropdownItem } from '@app/components/dropdown';\n import { Button } from '@app/components/button';\n import { UserID } from './__user-id';\n import { AnonymousLoginForm } from './__anonymous-login-form';\n+import { StoreState } from '@app/store';\n \n export interface Props {\n   user: User | null;\n+  hiddenUsers: StoreState['hiddenUsers'];\n   providers: (AuthProvider['name'])[];\n   sort: Sorting;\n   isCommentsDisabled: boolean;\n@@ -108,6 +110,8 @@ export class AuthPanel extends Component<Props, State> {\n     const loggedIn = !!user;\n     const signInMessage = props.postInfo.read_only ? 'Sign in using ' : 'Sign in to comment using ';\n     const isUserAnonymous = user && user.id.substr(0, 10) === 'anonymous_';\n+    const isSettingsLabelVisible =\n+      Object.keys(this.props.hiddenUsers).length > 0 || (user && user.admin) || this.state.isBlockedVisible;\n \n     return (\n       <div className={b('auth-panel', {}, { theme: props.theme, loggedIn })}>\n@@ -205,17 +209,17 @@ export class AuthPanel extends Component<Props, State> {\n         )}\n \n         <div className=\"auth-panel__column\">\n-          {user && user.admin && (\n+          {isSettingsLabelVisible && (\n             <span\n               className=\"auth-panel__pseudo-link auth-panel__admin-action\"\n               {...getHandleClickProps(() => this.toggleBlockedVisibility())}\n               role=\"link\"\n             >\n-              {isBlockedVisible ? 'Hide' : 'Show'} blocked users\n+              {isBlockedVisible ? 'Hide' : 'Show'} settings\n             </span>\n           )}\n \n-          {user && user.admin && ' • '}\n+          {isSettingsLabelVisible && ' • '}\n \n           {user && user.admin && (\n             <span"
    },
    {
      "sha": "de4dcbaac4c39b0074b84e162c5ce83430f90932",
      "filename": "frontend/app/components/blocked-users/__list-item/_view/_invisible/blocked-users__list-item_view_invisible.scss",
      "status": "removed",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/__list-item/_view/_invisible/blocked-users__list-item_view_invisible.scss",
      "raw_url": "https://github.com/umputun/remark/raw/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/__list-item/_view/_invisible/blocked-users__list-item_view_invisible.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/blocked-users/__list-item/_view/_invisible/blocked-users__list-item_view_invisible.scss?ref=133f5fc3f2fb61b95edd342ebf3de61843c6ea6d",
      "patch": "@@ -1,6 +0,0 @@\n-.blocked-users__list-item_view_invisible {\n-  .blocked-users__username {\n-    opacity: 0.5;\n-    text-decoration: line-through;\n-  }\n-}"
    },
    {
      "sha": "4b5de484aae34161649155361174c1d6771009b6",
      "filename": "frontend/app/components/blocked-users/__list-item/blocked-users__list-item.scss",
      "status": "removed",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark/blob/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/__list-item/blocked-users__list-item.scss",
      "raw_url": "https://github.com/umputun/remark/raw/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/__list-item/blocked-users__list-item.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/blocked-users/__list-item/blocked-users__list-item.scss?ref=133f5fc3f2fb61b95edd342ebf3de61843c6ea6d",
      "patch": "@@ -1,11 +0,0 @@\n-.blocked-users__list-item {\n-  cursor: default;\n-\n-  @media (hover: hover) {\n-    &:hover {\n-      .blocked-users__action {\n-        opacity: 1;\n-      }\n-    }\n-  }\n-}"
    },
    {
      "sha": "3dd9cc705bc4d48db0fe52dd168307e79db63c0c",
      "filename": "frontend/app/components/blocked-users/__list/blocked-users__list.scss",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/__list/blocked-users__list.scss",
      "raw_url": "https://github.com/umputun/remark/raw/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/__list/blocked-users__list.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/blocked-users/__list/blocked-users__list.scss?ref=133f5fc3f2fb61b95edd342ebf3de61843c6ea6d",
      "patch": "@@ -1,3 +0,0 @@\n-.blocked-users__list {\n-  padding: 0 0 0 20px;\n-}"
    },
    {
      "sha": "713a9e964f57f3ca4aa44d0e495ccbd4f1d839ce",
      "filename": "frontend/app/components/blocked-users/__username/blocked-users__username.scss",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/__username/blocked-users__username.scss",
      "raw_url": "https://github.com/umputun/remark/raw/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/__username/blocked-users__username.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/blocked-users/__username/blocked-users__username.scss?ref=133f5fc3f2fb61b95edd342ebf3de61843c6ea6d",
      "patch": "@@ -1,3 +0,0 @@\n-.blocked-users__username {\n-  font-weight: 700;\n-}"
    },
    {
      "sha": "aea5583a8a980fe6aa064b02c23e64d9bef8a505",
      "filename": "frontend/app/components/blocked-users/_theme/_dark/blocked-users_theme_dark.scss",
      "status": "removed",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark/blob/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/_theme/_dark/blocked-users_theme_dark.scss",
      "raw_url": "https://github.com/umputun/remark/raw/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/_theme/_dark/blocked-users_theme_dark.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/blocked-users/_theme/_dark/blocked-users_theme_dark.scss?ref=133f5fc3f2fb61b95edd342ebf3de61843c6ea6d",
      "patch": "@@ -1,11 +0,0 @@\n-.blocked-users_theme_dark {\n-  .blocked-users__action {\n-    &::before {\n-      color: #ddd;\n-    }\n-  }\n-\n-  .blocked-users__user-id {\n-    color: #eee;\n-  }\n-}"
    },
    {
      "sha": "e176c75e638a9dda9652ed0c5b42a0dfcaa8f626",
      "filename": "frontend/app/components/blocked-users/_theme/_light/blocked-users_theme_light.scss",
      "status": "removed",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark/blob/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/_theme/_light/blocked-users_theme_light.scss",
      "raw_url": "https://github.com/umputun/remark/raw/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/_theme/_light/blocked-users_theme_light.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/blocked-users/_theme/_light/blocked-users_theme_light.scss?ref=133f5fc3f2fb61b95edd342ebf3de61843c6ea6d",
      "patch": "@@ -1,11 +0,0 @@\n-.blocked-users_theme_light {\n-  .blocked-users__action {\n-    &::before {\n-      color: #777;\n-    }\n-  }\n-\n-  .blocked-users__user-id {\n-    color: #888;\n-  }\n-}"
    },
    {
      "sha": "7031d0dde0bf5a67626c02ba110c02bff1d4494a",
      "filename": "frontend/app/components/blocked-users/blocked-users.tsx",
      "status": "removed",
      "additions": 0,
      "deletions": 103,
      "changes": 103,
      "blob_url": "https://github.com/umputun/remark/blob/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/blocked-users.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/blocked-users.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/blocked-users/blocked-users.tsx?ref=133f5fc3f2fb61b95edd342ebf3de61843c6ea6d",
      "patch": "@@ -1,103 +0,0 @@\n-/** @jsx h */\n-import { h, Component, RenderableProps } from 'preact';\n-import b from 'bem-react-helper';\n-\n-import { User, BlockedUser, Theme, BlockTTL } from '@app/common/types';\n-import { getHandleClickProps } from '@app/common/accessibility';\n-\n-interface Props {\n-  theme: Theme;\n-  users: BlockedUser[];\n-  blockUser(id: User['id'], name: string, ttl: BlockTTL): Promise<void>;\n-  unblockUser(id: User['id']): Promise<void>;\n-  onUnblockSomeone(): void;\n-}\n-\n-interface State {\n-  /**\n-   * cached copy so we can\n-   * reapply block on unblocked user\n-   */\n-  users: BlockedUser[];\n-  unblockedUsers: (User['id'])[];\n-}\n-\n-export default class BlockedUsers extends Component<Props, State> {\n-  constructor(props: Props) {\n-    super(props);\n-\n-    this.state = {\n-      users: props.users.slice(),\n-      unblockedUsers: [],\n-    };\n-  }\n-\n-  block(user: BlockedUser) {\n-    if (confirm(`Do you want to block ${user.name}?`)) {\n-      this.setState({\n-        unblockedUsers: this.state.unblockedUsers.filter(x => x !== user.id),\n-      });\n-      this.props.blockUser(user.id, user.name, 'permanently');\n-    }\n-  }\n-\n-  unblock(user: BlockedUser) {\n-    if (confirm(`Do you want to unblock ${user.name}?`)) {\n-      this.setState({ unblockedUsers: this.state.unblockedUsers.concat([user.id]) });\n-      this.props.unblockUser(user.id);\n-      this.props.onUnblockSomeone();\n-    }\n-  }\n-\n-  render({ theme }: RenderableProps<Props>, { users, unblockedUsers }: State) {\n-    return (\n-      <div className={b('blocked-users', {}, { theme })} role=\"region\" aria-label=\"Blocked users\">\n-        {!users.length && <p>There are no blocked users.</p>}\n-\n-        {!!users.length && <p>List of blocked users:</p>}\n-\n-        {!!users.length && (\n-          <ul className=\"blocked-users__list\">\n-            {users.map(user => {\n-              const isUserUnblocked = unblockedUsers.includes(user.id);\n-\n-              return (\n-                <li className={b('blocked-users__list-item', {}, { view: isUserUnblocked ? 'invisible' : null })}>\n-                  <span className=\"blocked-users__username\">{user.name}</span>{' '}\n-                  <span className=\"blocked-users__user-id\">({user.id})</span>\n-                  <span className=\"blocked-users__user-block-ttl\"> {formatTime(new Date(user.time))}</span>\n-                  {isUserUnblocked && (\n-                    <span {...getHandleClickProps(() => this.block(user))} className=\"blocked-users__action\">\n-                      block\n-                    </span>\n-                  )}\n-                  {!isUserUnblocked && (\n-                    <span {...getHandleClickProps(() => this.unblock(user))} className=\"blocked-users__action\">\n-                      unblock\n-                    </span>\n-                  )}\n-                </li>\n-              );\n-            })}\n-          </ul>\n-        )}\n-      </div>\n-    );\n-  }\n-}\n-\n-const currentYear = new Date().getFullYear();\n-\n-function formatTime(time: Date): string {\n-  // let's assume that if block ttl is more than 50 years then user blocked permanently\n-  if (time.getFullYear() - currentYear >= 50) return 'permanently';\n-\n-  // 'ru-RU' adds a dot as a separator\n-  const date = time.toLocaleDateString(['ru-RU'], { day: '2-digit', month: '2-digit', year: '2-digit' });\n-\n-  // do it manually because Intl API doesn't add leading zeros to hours; idk why\n-  const hours = `0${time.getHours()}`.slice(-2);\n-  const mins = `0${time.getMinutes()}`.slice(-2);\n-\n-  return `until ${date} at ${hours}:${mins}`;\n-}"
    },
    {
      "sha": "3754548b77e8a727e64d6f71cd1613a0325eff0c",
      "filename": "frontend/app/components/blocked-users/index.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 17,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/index.ts",
      "raw_url": "https://github.com/umputun/remark/raw/133f5fc3f2fb61b95edd342ebf3de61843c6ea6d/frontend/app/components/blocked-users/index.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/blocked-users/index.ts?ref=133f5fc3f2fb61b95edd342ebf3de61843c6ea6d",
      "patch": "@@ -1,17 +0,0 @@\n-import withTheme from '../../components/with-theme';\n-import BlockedUsers from './blocked-users';\n-\n-export default withTheme(BlockedUsers);\n-\n-require('./blocked-users.scss');\n-\n-require('./__action/blocked-users__action.scss');\n-require('./__list/blocked-users__list.scss');\n-\n-require('./__list-item/blocked-users__list-item.scss');\n-require('./__list-item/_view/_invisible/blocked-users__list-item_view_invisible.scss');\n-\n-require('./__username/blocked-users__username.scss');\n-\n-require('./_theme/_dark/blocked-users_theme_dark.scss');\n-require('./_theme/_light/blocked-users_theme_light.scss');"
    },
    {
      "sha": "14a26ebdf675421c52203d66742676c275bd9170",
      "filename": "frontend/app/components/comment/comment.test.tsx",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/comment/comment.test.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/comment/comment.test.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/comment/comment.test.tsx?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -174,20 +174,26 @@ describe('<Comment />', () => {\n       container = domContainer;\n     });\n \n-    it('visible for admin', () => {\n+    it('for admin if shows admin controls', () => {\n       const element = <Comment {...{ ...DefaultProps, user: { ...DefaultProps.user, admin: true } } as Props} />;\n       render(element, container);\n \n-      const controls = container.querySelector('.comment__controls');\n-      expect(controls).not.toBe(null);\n+      const controls = container.querySelectorAll('.comment__controls > span');\n+      expect(controls!.length).toBe(5);\n+      expect(controls![0].textContent).toBe('Copy');\n+      expect(controls![1].textContent).toBe('Pin');\n+      expect(controls![2].textContent).toBe('Hide');\n+      expect(controls![3].childNodes[0].textContent).toBe('Block');\n+      expect(controls![4].textContent).toBe('Delete');\n     });\n \n-    it('not visible for regular user', () => {\n+    it('for regular user it shows only \"hide\"', () => {\n       const element = <Comment {...{ ...DefaultProps, user: { ...DefaultProps.user, admin: false } } as Props} />;\n       render(element, container);\n \n-      const controls = container.querySelector('.comment__controls');\n-      expect(controls).toBe(null);\n+      const controls = container.querySelectorAll('.comment__controls > span');\n+      expect(controls!.length).toBe(1);\n+      expect(controls![0].textContent).toBe('Hide');\n     });\n \n     it('verification badge clickable for admin', () => {"
    },
    {
      "sha": "817666e534ba3d036581e6478227344419a23631",
      "filename": "frontend/app/components/comment/comment.tsx",
      "status": "modified",
      "additions": 158,
      "deletions": 135,
      "changes": 293,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/comment/comment.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/comment/comment.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/comment/comment.tsx?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -11,15 +11,16 @@ import { API_BASE, BASE_URL, COMMENT_NODE_CLASSNAME_PREFIX, BLOCKING_DURATIONS }\n import { StaticStore } from '@app/common/static_store';\n import debounce from '@app/utils/debounce';\n import copy from '@app/common/copy';\n-import { Theme, BlockTTL, Comment as CommentType, PostInfo, User, CommentMode, Image } from '@app/common/types';\n+import { Theme, BlockTTL, Comment as CommentType, PostInfo, User, CommentMode } from '@app/common/types';\n import { extractErrorMessageFromResponse, FetcherError } from '@app/utils/errorUtils';\n import { isUserAnonymous } from '@app/utils/isUserAnonymous';\n \n import { Input } from '@app/components/input';\n import { AvatarIcon } from '@app/components/avatar-icon';\n import Countdown from '../countdown';\n+import { boundActions } from './connected-comment';\n \n-export interface Props {\n+export type Props = {\n   user: User | null;\n   data: CommentType;\n   repliesCount?: number;\n@@ -42,21 +43,7 @@ export interface Props {\n   theme: Theme;\n   level?: number;\n   mix?: string;\n-\n-  // actions are optional, as component has read-only mode, such as in last comments\n-  addComment?: (text: string, title: string, pid?: CommentType['id']) => Promise<void>;\n-  updateComment?: (id: CommentType['id'], text: string) => Promise<void>;\n-  removeComment?(id: CommentType['id']): Promise<void>;\n-  setReplyEditState?(id: CommentType['id'], mode: CommentMode): void;\n-  getPreview?: (text: string) => Promise<string>;\n-  putCommentVote?(id: CommentType['id'], value: number): Promise<void>;\n-  setCollapse?: (id: CommentType['id'], value: boolean) => void;\n-  setPinState?(id: CommentType['id'], value: boolean): Promise<void>;\n-  blockUser?(id: User['id'], name: User['name'], ttl: BlockTTL): Promise<void>;\n-  unblockUser?(id: User['id']): Promise<void>;\n-  setVerifyStatus?(id: User['id'], value: boolean): Promise<void>;\n-  uploadImage?(image: File): Promise<Image>;\n-}\n+} & Partial<typeof boundActions>;\n \n export interface State {\n   isCopied: boolean;\n@@ -105,7 +92,7 @@ export class Comment extends Component<Props, State> {\n     this.updateState(nextProps);\n   }\n \n-  updateState(props: Props) {\n+  updateState = (props: Props) => {\n     this.setState({\n       scoreDelta: props.data.vote,\n       cachedScore: props.data.score,\n@@ -125,52 +112,54 @@ export class Comment extends Component<Props, State> {\n         });\n       }\n     }\n-  }\n+  };\n \n-  toggleReplying() {\n+  toggleReplying = () => {\n     const { editMode } = this.props;\n     if (editMode === CommentMode.Reply) {\n-      this.props.setReplyEditState!(this.props.data.id, CommentMode.None);\n+      this.props.setReplyEditState!({ id: this.props.data.id, state: CommentMode.None });\n     } else {\n-      this.props.setReplyEditState!(this.props.data.id, CommentMode.Reply);\n+      this.props.setReplyEditState!({ id: this.props.data.id, state: CommentMode.Reply });\n     }\n-  }\n+  };\n \n-  toggleEditing() {\n+  toggleEditing = () => {\n     const { editMode } = this.props;\n     if (editMode === CommentMode.Edit) {\n-      this.props.setReplyEditState!(this.props.data.id, CommentMode.None);\n+      this.props.setReplyEditState!({ id: this.props.data.id, state: CommentMode.None });\n     } else {\n-      this.props.setReplyEditState!(this.props.data.id, CommentMode.Edit);\n+      this.props.setReplyEditState!({ id: this.props.data.id, state: CommentMode.Edit });\n     }\n-  }\n+  };\n \n-  toggleUserInfoVisibility() {\n+  toggleUserInfoVisibility = () => {\n     if (window.parent) {\n       const { user } = this.props.data;\n       const data = JSON.stringify({ isUserInfoShown: true, user });\n       window.parent.postMessage(data, '*');\n     }\n-  }\n+  };\n \n-  setPin(value: boolean) {\n+  togglePin = () => {\n+    const value = !this.props.data.pin;\n     const promptMessage = `Do you want to ${value ? 'pin' : 'unpin'} this comment?`;\n \n     if (confirm(promptMessage)) {\n       this.props.setPinState!(this.props.data.id, value);\n     }\n-  }\n+  };\n \n-  setVerify(value: boolean) {\n+  toggleVerify = () => {\n+    const value = !this.props.data.user.verified;\n     const userId = this.props.data.user.id;\n-    const promptMessage = `Do you want to ${value ? 'verify' : 'unverify'} this user?`;\n+    const promptMessage = `Do you want to ${value ? 'verify' : 'unverify'} ${this.props.data.user.name}?`;\n \n     if (confirm(promptMessage)) {\n       this.props.setVerifyStatus!(userId, value);\n     }\n-  }\n+  };\n \n-  onBlockUserClick(e: Event) {\n+  onBlockUserClick = (e: Event) => {\n     // blur event will be triggered by the confirm pop-up which will start\n     // infinite loop of blur -> confirm -> blur -> ...\n     // so we trigger the blur event manually and have debounce mechanism to prevent it\n@@ -180,9 +169,9 @@ export class Comment extends Component<Props, State> {\n     // we have to debounce the blockUser function calls otherwise it will be\n     // called 2 times (by change event and by blur event)\n     this.blockUser((e.target as HTMLOptionElement).value as BlockTTL);\n-  }\n+  };\n \n-  blockUser(ttl: BlockTTL) {\n+  blockUser = (ttl: BlockTTL) => {\n     const { user } = this.props.data;\n \n     const block_duration = BLOCKING_DURATIONS.find(el => el.value === ttl);\n@@ -194,41 +183,46 @@ export class Comment extends Component<Props, State> {\n     if (confirm(`Do you want to block ${user.name} ${duration.toLowerCase()}?`)) {\n       this.props.blockUser!(user.id, user.name, ttl);\n     }\n-  }\n+  };\n \n-  onUnblockUserClick() {\n+  onUnblockUserClick = () => {\n     const { user } = this.props.data;\n \n     const promptMessage = `Do you want to unblock this user?`;\n \n     if (confirm(promptMessage)) {\n       this.props.unblockUser!(user.id);\n     }\n-  }\n+  };\n \n-  deleteComment() {\n+  deleteComment = () => {\n     if (confirm('Do you want to delete this comment?')) {\n-      this.props.setReplyEditState!(this.props.data.id, CommentMode.None);\n+      this.props.setReplyEditState!({ id: this.props.data.id, state: CommentMode.None });\n \n       this.props.removeComment!(this.props.data.id);\n     }\n-  }\n+  };\n+\n+  hideUser = () => {\n+    if (!confirm(`Do you want to hide comments of ${this.props.data.user.name}?`)) return;\n+    this.props.hideUser!(this.props.data.user);\n+  };\n \n-  handleVoteError(e: FetcherError, originalScore: number, originalDelta: number) {\n+  handleVoteError = (e: FetcherError, originalScore: number, originalDelta: number) => {\n     this.setState({\n       scoreDelta: originalDelta,\n       cachedScore: originalScore,\n       voteErrorMessage: extractErrorMessageFromResponse(e),\n     });\n-  }\n+  };\n \n-  sendVotingRequest(votingValue: number, originalScore: number, originalDelta: number) {\n+  sendVotingRequest = (votingValue: number, originalScore: number, originalDelta: number) => {\n     this.votingPromise = this.votingPromise\n       .then(() => this.props.putCommentVote!(this.props.data.id, votingValue))\n       .catch(e => this.handleVoteError(e, originalScore, originalDelta));\n-  }\n+  };\n \n-  increaseScore() {\n+  increaseScore = () => {\n     const { cachedScore, scoreDelta } = this.state;\n \n     if (scoreDelta === 1) return;\n@@ -240,9 +234,9 @@ export class Comment extends Component<Props, State> {\n     });\n \n     this.sendVotingRequest(1, cachedScore, scoreDelta);\n-  }\n+  };\n \n-  decreaseScore() {\n+  decreaseScore = () => {\n     const { cachedScore, scoreDelta } = this.state;\n \n     if (scoreDelta === -1) return;\n@@ -254,21 +248,21 @@ export class Comment extends Component<Props, State> {\n     });\n \n     this.sendVotingRequest(-1, cachedScore, scoreDelta);\n-  }\n+  };\n \n-  async addComment(text: string, title: string, pid?: CommentType['id']) {\n+  addComment = async (text: string, title: string, pid?: CommentType['id']) => {\n     await this.props.addComment!(text, title, pid);\n \n-    this.props.setReplyEditState!(this.props.data.id, CommentMode.None);\n-  }\n+    this.props.setReplyEditState!({ id: this.props.data.id, state: CommentMode.None });\n+  };\n \n-  async updateComment(id: CommentType['id'], text: string) {\n+  updateComment = async (id: CommentType['id'], text: string) => {\n     await this.props.updateComment!(id, text);\n \n-    this.props.setReplyEditState!(this.props.data.id, CommentMode.None);\n-  }\n+    this.props.setReplyEditState!({ id: this.props.data.id, state: CommentMode.None });\n+  };\n \n-  scrollToParent(e: Event) {\n+  scrollToParent = (e: Event) => {\n     const {\n       data: { pid },\n     } = this.props;\n@@ -280,58 +274,60 @@ export class Comment extends Component<Props, State> {\n     if (parentCommentNode) {\n       parentCommentNode.scrollIntoView();\n     }\n-  }\n+  };\n \n-  toggleCollapse() {\n-    this.props.setReplyEditState!(this.props.data.id, CommentMode.None);\n+  toggleCollapse = () => {\n+    this.props.setReplyEditState!({ id: this.props.data.id, state: CommentMode.None });\n \n     this.props.setCollapse!(this.props.data.id, !this.props.collapsed);\n-  }\n+  };\n \n-  copyComment({ username, time }: { username: string; time: string }) {\n+  copyComment = () => {\n+    const username = this.props.data.user.name;\n+    const time = this.props.data.time;\n     const text = this.textNode!.textContent || '';\n \n     copy(`<b>${username}</b>&nbsp;${time}<br>${text.replace(/\\n+/g, '<br>')}`);\n \n     this.setState({ isCopied: true }, () => {\n       setTimeout(() => this.setState({ isCopied: false }), 3000);\n     });\n-  }\n+  };\n \n   /**\n    * Defines whether current client is admin\n    */\n-  isAdmin(): boolean {\n+  isAdmin = (): boolean => {\n     return !!this.props.user && this.props.user.admin;\n-  }\n+  };\n \n   /**\n    * Defines whether current client is not logged in\n    */\n-  isGuest(): boolean {\n+  isGuest = (): boolean => {\n     return !this.props.user;\n-  }\n+  };\n \n   /**\n    * Defines whether current client is logged in via `Anonymous provider`\n    */\n-  isAnonymous(): boolean {\n+  isAnonymous = (): boolean => {\n     return isUserAnonymous(this.props.user);\n-  }\n+  };\n \n   /**\n    * Defines whether comment made by logged in user\n    */\n-  isCurrentUser(): boolean {\n+  isCurrentUser = (): boolean => {\n     if (this.isGuest()) return false;\n \n     return this.props.data.user.id === this.props.user!.id;\n-  }\n+  };\n \n   /**\n    * returns reason for disabled downvoting\n    */\n-  getDownvoteDisabledReason(): string | null {\n+  getDownvoteDisabledReason = (): string | null => {\n     if (!(this.props.view === 'main' || this.props.view === 'pinned')) return \"Voting allowed only on post's page\";\n     if (this.props.post_info!.read_only) return \"Can't vote on read-only topics\";\n     if (this.props.data.delete) return \"Can't vote for deleted comment\";\n@@ -340,20 +336,96 @@ export class Comment extends Component<Props, State> {\n     if (this.isGuest()) return 'Sign in to vote';\n     if (this.isAnonymous()) return \"Anonymous users can't vote\";\n     return null;\n-  }\n+  };\n \n   /**\n    * returns reason for disabled upvoting\n    */\n-  getUpvoteDisabledReason(): string | null {\n+  getUpvoteDisabledReason = (): string | null => {\n     if (!(this.props.view === 'main' || this.props.view === 'pinned')) return \"Voting allowed only on post's page\";\n     if (this.props.post_info!.read_only) return \"Can't vote on read-only topics\";\n     if (this.props.data.delete) return \"Can't vote for deleted comment\";\n     if (this.isCurrentUser()) return \"Can't vote for your own comment\";\n     if (this.isGuest()) return 'Sign in to vote';\n     if (this.isAnonymous()) return \"Anonymous users can't vote\";\n     return null;\n-  }\n+  };\n+\n+  getCommentControls = (): JSX.Element[] => {\n+    const isAdmin = this.isAdmin();\n+    const isCurrentUser = this.isCurrentUser();\n+    const controls: JSX.Element[] = [];\n+\n+    if (this.props.data.delete) {\n+      return controls;\n+    }\n+\n+    if (!(this.props.view === 'main' || this.props.view === 'pinned')) {\n+      return controls;\n+    }\n+\n+    if (isAdmin) {\n+      controls.push(\n+        this.state.isCopied ? (\n+          <span className=\"comment__control comment__control_view_inactive\">Copied!</span>\n+        ) : (\n+          <span {...getHandleClickProps(this.copyComment)} className=\"comment__control\">\n+            Copy\n+          </span>\n+        )\n+      );\n+\n+      controls.push(\n+        <span {...getHandleClickProps(this.togglePin)} className=\"comment__control\">\n+          {this.props.data.pin ? 'Unpin' : 'Pin'}\n+        </span>\n+      );\n+    }\n+\n+    if (!isCurrentUser) {\n+      controls.push(\n+        <span {...getHandleClickProps(this.hideUser)} className=\"comment__control\">\n+          Hide\n+        </span>\n+      );\n+    }\n+\n+    if (isAdmin) {\n+      if (this.props.isUserBanned) {\n+        controls.push(\n+          <span {...getHandleClickProps(this.onUnblockUserClick)} className=\"comment__control\">\n+            Unblock\n+          </span>\n+        );\n+      }\n+\n+      if (this.props.user!.id !== this.props.data.user.id && !this.props.isUserBanned) {\n+        controls.push(\n+          <span className=\"comment__control comment__control_select-label\">\n+            Block\n+            <select className=\"comment__control_select\" onBlur={this.onBlockUserClick} onChange={this.onBlockUserClick}>\n+              <option disabled selected value={undefined}>\n+                {' '}\n+                Blocking period{' '}\n+              </option>\n+              {BLOCKING_DURATIONS.map(block => (\n+                <option value={block.value}>{block.label}</option>\n+              ))}\n+            </select>\n+          </span>\n+        );\n+      }\n+\n+      if (!this.props.data.delete) {\n+        controls.push(\n+          <span {...getHandleClickProps(this.deleteComment)} className=\"comment__control\">\n+            Delete\n+          </span>\n+        );\n+      }\n+    }\n+    return controls;\n+  };\n \n   render(props: RenderableProps<Props>, state: State) {\n     const isAdmin = this.isAdmin();\n@@ -371,6 +443,7 @@ export class Comment extends Component<Props, State> {\n     const editable = props.repliesCount === 0 && state.editDeadline;\n     const scoreSignEnabled = !StaticStore.config.positive_score;\n     const uploadImageHandler = this.isAnonymous() ? undefined : this.props.uploadImage;\n+    const commentControls = this.getCommentControls();\n \n     /**\n      * CommentType adapted for rendering\n@@ -474,7 +547,7 @@ export class Comment extends Component<Props, State> {\n \n             {props.view !== 'user' && (\n               <span\n-                {...getHandleClickProps(() => this.toggleUserInfoVisibility())}\n+                {...getHandleClickProps(this.toggleUserInfoVisibility)}\n                 className=\"comment__username\"\n                 title={o.user.id}\n               >\n@@ -484,7 +557,7 @@ export class Comment extends Component<Props, State> {\n \n             {isAdmin && props.view !== 'user' && (\n               <span\n-                {...getHandleClickProps(() => this.setVerify(!o.user.verified))}\n+                {...getHandleClickProps(this.toggleVerify)}\n                 aria-label=\"Toggle verification\"\n                 title={o.user.verified ? 'Verified user' : 'Unverified user'}\n                 className={b('comment__verification', {}, { active: o.user.verified, clickable: true })}\n@@ -517,7 +590,7 @@ export class Comment extends Component<Props, State> {\n \n             {!props.disabled && props.view === 'main' && (\n               <span\n-                {...getHandleClickProps(() => this.toggleCollapse())}\n+                {...getHandleClickProps(this.toggleCollapse)}\n                 className={b('comment__action', {}, { type: 'collapse', selected: props.collapsed })}\n               >\n                 {props.collapsed ? '+' : '−'}\n@@ -532,7 +605,7 @@ export class Comment extends Component<Props, State> {\n                   { type: 'up', selected: state.scoreDelta === 1, disabled: isUpvotingDisabled }\n                 )}\n                 aria-disabled={state.scoreDelta === 1 || isUpvotingDisabled ? 'true' : 'false'}\n-                {...getHandleClickProps(isUpvotingDisabled ? undefined : () => this.increaseScore())}\n+                {...getHandleClickProps(isUpvotingDisabled ? undefined : this.increaseScore)}\n                 title={upvotingDisabledReason || undefined}\n               >\n                 Vote up\n@@ -550,7 +623,7 @@ export class Comment extends Component<Props, State> {\n                   { type: 'down', selected: state.scoreDelta === -1, disabled: isDownvotingDisabled }\n                 )}\n                 aria-disabled={state.scoreDelta === -1 || isUpvotingDisabled ? 'true' : 'false'}\n-                {...getHandleClickProps(isDownvotingDisabled ? undefined : () => this.decreaseScore())}\n+                {...getHandleClickProps(isDownvotingDisabled ? undefined : this.decreaseScore)}\n                 title={downvotingDisabledReason || undefined}\n               >\n                 Vote down\n@@ -575,7 +648,7 @@ export class Comment extends Component<Props, State> {\n           {(!props.collapsed || props.view === 'pinned') && (\n             <div className=\"comment__actions\">\n               {!props.data.delete && !props.isCommentsDisabled && !props.disabled && !isGuest && props.view === 'main' && (\n-                <span {...getHandleClickProps(() => this.toggleReplying())} className=\"comment__action\">\n+                <span {...getHandleClickProps(this.toggleReplying)} className=\"comment__action\">\n                   {isReplying ? 'Cancel' : 'Reply'}\n                 </span>\n               )}\n@@ -587,14 +660,14 @@ export class Comment extends Component<Props, State> {\n                 (editable || isEditing) &&\n                 props.view === 'main' && [\n                   <span\n-                    {...getHandleClickProps(() => this.toggleEditing())}\n+                    {...getHandleClickProps(this.toggleEditing)}\n                     className=\"comment__action comment__action_type_edit\"\n                   >\n                     {isEditing ? 'Cancel' : 'Edit'}\n                   </span>,\n                   !isAdmin && (\n                     <span\n-                      {...getHandleClickProps(() => this.deleteComment())}\n+                      {...getHandleClickProps(this.deleteComment)}\n                       className=\"comment__action comment__action_type_delete\"\n                     >\n                       Delete\n@@ -613,57 +686,7 @@ export class Comment extends Component<Props, State> {\n                   ),\n                 ]}\n \n-              {!props.data.delete && isAdmin && (\n-                <span className=\"comment__controls\">\n-                  {!state.isCopied && (\n-                    <span\n-                      {...getHandleClickProps(() => this.copyComment({ username: o.user.name, time: o.time }))}\n-                      className=\"comment__control\"\n-                    >\n-                      Copy\n-                    </span>\n-                  )}\n-\n-                  {state.isCopied && <span className=\"comment__control comment__control_view_inactive\">Copied!</span>}\n-\n-                  {(props.view === 'main' || props.view === 'pinned') && (\n-                    <span {...getHandleClickProps(() => this.setPin(!props.data.pin))} className=\"comment__control\">\n-                      {props.data.pin ? 'Unpin' : 'Pin'}\n-                    </span>\n-                  )}\n-\n-                  {props.isUserBanned && (\n-                    <span {...getHandleClickProps(() => this.onUnblockUserClick())} className=\"comment__control\">\n-                      Unblock\n-                    </span>\n-                  )}\n-\n-                  {props.user!.id !== props.data.user.id && !props.isUserBanned && (\n-                    <span className=\"comment__control comment__control_select-label\">\n-                      Block\n-                      <select\n-                        className=\"comment__control_select\"\n-                        onBlur={e => this.onBlockUserClick(e)}\n-                        onChange={e => this.onBlockUserClick(e)}\n-                      >\n-                        <option disabled selected value={undefined}>\n-                          {' '}\n-                          Blocking period{' '}\n-                        </option>\n-                        {BLOCKING_DURATIONS.map(block => (\n-                          <option value={block.value}>{block.label}</option>\n-                        ))}\n-                      </select>\n-                    </span>\n-                  )}\n-\n-                  {!props.data.delete && (\n-                    <span {...getHandleClickProps(() => this.deleteComment())} className=\"comment__control\">\n-                      Delete\n-                    </span>\n-                  )}\n-                </span>\n-              )}\n+              {commentControls.length > 0 && <span className=\"comment__controls\">{commentControls}</span>}\n             </div>\n           )}\n         </div>"
    },
    {
      "sha": "06fa5d2a97ba33cf4a79e07a1ffec95a40453cd6",
      "filename": "frontend/app/components/comment/connected-comment.ts",
      "status": "modified",
      "additions": 23,
      "deletions": 39,
      "changes": 62,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/comment/connected-comment.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/comment/connected-comment.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/comment/connected-comment.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -3,11 +3,11 @@\n  * and should be importded explicitly\n  */\n \n-import { Comment as CommentType, User, BlockTTL, CommentMode } from '@app/common/types';\n+import { Comment as CommentType } from '@app/common/types';\n \n import { connect } from 'preact-redux';\n \n-import { StoreState, StoreDispatch } from '@app/store';\n+import { StoreState } from '@app/store';\n import {\n   addComment,\n   removeComment,\n@@ -17,14 +17,15 @@ import {\n   setCommentMode,\n } from '@app/store/comments/actions';\n import { setCollapse } from '@app/store/thread/actions';\n-import { blockUser, unblockUser, setVirifiedStatus } from '@app/store/user/actions';\n+import { blockUser, unblockUser, hideUser, setVerifiedStatus } from '@app/store/user/actions';\n \n import { Comment, Props } from './comment';\n import { getCommentMode } from '@app/store/comments/getters';\n-import { uploadImage } from '@app/common/api';\n+import { uploadImage, getPreview } from '@app/common/api';\n import { getThreadIsCollapsed } from '@app/store/thread/getters';\n+import { bindActions } from '@app/utils/actionBinder';\n \n-const mapProps = (state: StoreState, cprops: { data: CommentType }) => {\n+const mapStateToProps = (state: StoreState, cprops: { data: CommentType }) => {\n   const props: Pick<\n     Props,\n     'editMode' | 'user' | 'isUserBanned' | 'post_info' | 'isCommentsDisabled' | 'theme' | 'collapsed'\n@@ -40,41 +41,24 @@ const mapProps = (state: StoreState, cprops: { data: CommentType }) => {\n   return props;\n };\n \n-const mapDispatchToProps = (dispatch: StoreDispatch) => {\n-  const props: Pick<\n-    Props,\n-    | 'addComment'\n-    | 'updateComment'\n-    | 'removeComment'\n-    | 'setReplyEditState'\n-    | 'setCollapse'\n-    | 'setPinState'\n-    | 'putCommentVote'\n-    | 'blockUser'\n-    | 'unblockUser'\n-    | 'setVerifyStatus'\n-    | 'uploadImage'\n-  > = {\n-    addComment: (text: string, title: string, pid?: CommentType['id']) => dispatch(addComment(text, title, pid)),\n-    updateComment: (id: CommentType['id'], text: string) => dispatch(updateComment(id, text)),\n-    removeComment: (id: CommentType['id']) => dispatch(removeComment(id)),\n-    setReplyEditState: (id: CommentType['id'], mode: CommentMode) => dispatch(setCommentMode({ id, state: mode })),\n-    setCollapse: (id: CommentType['id'], value: boolean) => dispatch(setCollapse(id, value)),\n-    setPinState: (id: CommentType['id'], value: boolean) => dispatch(setPinState(id, value)),\n-    putCommentVote: (id: CommentType['id'], value: number) => dispatch(putVote(id, value)),\n-\n-    blockUser: (id: User['id'], name: User['name'], ttl: BlockTTL) => dispatch(blockUser(id, name, ttl)),\n-    unblockUser: (id: User['id']) => dispatch(unblockUser(id)),\n-    setVerifyStatus: (id: User['id'], value: boolean) => dispatch(setVirifiedStatus(id, value)),\n-    // should i made it as store action?\n-    uploadImage: (image: File) => uploadImage(image),\n-  };\n-\n-  return props;\n-};\n+export const boundActions = bindActions({\n+  addComment,\n+  updateComment,\n+  removeComment,\n+  setReplyEditState: setCommentMode,\n+  setCollapse,\n+  setPinState,\n+  putCommentVote: putVote,\n+  blockUser,\n+  unblockUser,\n+  hideUser,\n+  setVerifyStatus: setVerifiedStatus,\n+  uploadImage,\n+  getPreview,\n+});\n \n /** Comment component connected to redux */\n export const ConnectedComment = connect(\n-  mapProps,\n-  mapDispatchToProps\n+  mapStateToProps,\n+  boundActions as Partial<typeof boundActions>\n )(Comment);"
    },
    {
      "sha": "e9f48fa203b70747814f8b69967b6e259cf2bc94",
      "filename": "frontend/app/components/root/root.tsx",
      "status": "modified",
      "additions": 56,
      "deletions": 65,
      "changes": 121,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/root/root.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/root/root.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/root/root.tsx?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -9,12 +9,9 @@ import {\n   PostInfo,\n   BlockedUser,\n   Comment as CommentType,\n-  Tree,\n   Sorting,\n   Theme,\n   AuthProvider,\n-  BlockTTL,\n-  Image,\n } from '@app/common/types';\n import {\n   NODE_ID,\n@@ -26,15 +23,17 @@ import {\n import { maxShownComments } from '@app/common/settings';\n \n import { StaticStore } from '@app/common/static_store';\n-import { StoreState, StoreDispatch } from '@app/store';\n+import { StoreState } from '@app/store';\n import {\n   fetchUser,\n   logout,\n   logIn,\n   blockUser,\n   unblockUser,\n   fetchBlockedUsers,\n-  setBlockedVisibleState,\n+  setSettingsVisibleState,\n+  hideUser,\n+  unhideUser,\n } from '@app/store/user/actions';\n import { fetchComments } from '@app/store/comments/actions';\n import { setCommentsReadOnlyState } from '@app/store/post_info/actions';\n@@ -43,41 +42,47 @@ import { setSort } from '@app/store/sort/actions';\n import { addComment, updateComment } from '@app/store/comments/actions';\n \n import { AuthPanel } from '@app/components/auth-panel';\n-import BlockedUsers from '@app/components/blocked-users';\n+import Settings from '@app/components/settings';\n import { ConnectedComment as Comment } from '@app/components/comment/connected-comment';\n import { Input } from '@app/components/input';\n import Preloader from '@app/components/preloader';\n import { Thread } from '@app/components/thread';\n-import { uploadImage } from '@app/common/api';\n+import { uploadImage, getPreview } from '@app/common/api';\n import { isUserAnonymous } from '@app/utils/isUserAnonymous';\n+import { bindActions } from '@app/utils/actionBinder';\n \n-interface Props {\n+const boundActions = bindActions({\n+  fetchComments,\n+  fetchUser,\n+  fetchBlockedUsers,\n+  setSettingsVisible: setSettingsVisibleState,\n+  logIn,\n+  logOut: logout,\n+  setTheme,\n+  getPreview,\n+  enableComments: () => setCommentsReadOnlyState(false),\n+  disableComments: () => setCommentsReadOnlyState(true),\n+  changeSort: setSort,\n+  blockUser,\n+  unblockUser,\n+  hideUser,\n+  unhideUser,\n+  addComment,\n+  updateComment,\n+  uploadImage,\n+});\n+\n+type Props = {\n   user: User | null;\n   sort: Sorting;\n   comments: Node[];\n   pinnedComments: CommentType[];\n   theme: Theme;\n   info: PostInfo;\n-  bannedUsers: BlockedUser[];\n-  isBlockedVisible: boolean;\n-\n-  fetchComments(sort: Sorting): Promise<Tree>;\n-  fetchUser(): Promise<User | null>;\n-  fetchBlockedUsers(): Promise<BlockedUser[]>;\n-  logIn(p: AuthProvider): Promise<User | null>;\n-  logOut(): Promise<void>;\n-  setTheme: (theme: Theme) => void;\n-  setBlockedVisible: (value: boolean) => boolean;\n-  changeSort(sort: Sorting): Promise<void>;\n-  enableComments(): Promise<boolean>;\n-  disableComments(): Promise<boolean>;\n-  getPreview(text: string): Promise<string>;\n-  blockUser(id: User['id'], name: User['name'], ttl: BlockTTL): Promise<void>;\n-  unblockUser(id: User['id']): Promise<void>;\n-  addComment(text: string, title: string, pid?: CommentType['id']): Promise<void>;\n-  updateComment(id: string, text: string): Promise<void>;\n-  uploadImage(image: File): Promise<Image>;\n-}\n+  hiddenUsers: StoreState['hiddenUsers'];\n+  blockedUsers: BlockedUser[];\n+  isSettingsVisible: boolean;\n+} & typeof boundActions;\n \n interface State {\n   isLoaded: boolean;\n@@ -159,21 +164,22 @@ export class Root extends Component<Props, State> {\n     }\n   }\n \n-  onBlockedUsersShow() {\n-    this.props.fetchBlockedUsers().then(() => {\n-      this.props.setBlockedVisible(true);\n-    });\n+  async onBlockedUsersShow() {\n+    if (this.props.user && this.props.user.admin) {\n+      await this.props.fetchBlockedUsers();\n+    }\n+    this.props.setSettingsVisible(true);\n   }\n \n-  onBlockedUsersHide() {\n+  async onBlockedUsersHide() {\n     // if someone was unblocked let's reload comments\n     if (this.state.wasSomeoneUnblocked) {\n       this.props.fetchComments(this.props.sort);\n     }\n-    this.props.setBlockedVisible(false),\n-      this.setState({\n-        wasSomeoneUnblocked: false,\n-      });\n+    this.props.setSettingsVisible(false);\n+    this.setState({\n+      wasSomeoneUnblocked: false,\n+    });\n   }\n \n   async changeSort(sort: Sorting) {\n@@ -221,6 +227,7 @@ export class Root extends Component<Props, State> {\n           <AuthPanel\n             theme={this.props.theme}\n             user={this.props.user}\n+            hiddenUsers={this.props.hiddenUsers}\n             sort={this.props.sort}\n             providers={StaticStore.config.auth_providers}\n             isCommentsDisabled={isCommentsDisabled}\n@@ -234,7 +241,7 @@ export class Root extends Component<Props, State> {\n             onSortChange={this.props.changeSort}\n           />\n \n-          {!this.props.isBlockedVisible && (\n+          {!this.props.isSettingsVisible && (\n             <div className=\"root__main\">\n               {!isGuest && !isCommentsDisabled && (\n                 <Input\n@@ -284,12 +291,16 @@ export class Root extends Component<Props, State> {\n             </div>\n           )}\n \n-          {this.props.isBlockedVisible && (\n+          {this.props.isSettingsVisible && (\n             <div className=\"root__main\">\n-              <BlockedUsers\n-                users={this.props.bannedUsers}\n+              <Settings\n+                user={this.props.user}\n+                hiddenUsers={this.props.hiddenUsers}\n+                blockedUsers={this.props.blockedUsers}\n                 blockUser={this.props.blockUser}\n                 unblockUser={this.props.unblockUser}\n+                hideUser={this.props.hideUser}\n+                unhideUser={this.props.unhideUser}\n                 onUnblockSomeone={this.onUnblockSomeone}\n               />\n             </div>\n@@ -307,38 +318,18 @@ export class Root extends Component<Props, State> {\n   }\n }\n \n-const mapDispatchToProps = (dispatch: StoreDispatch) => {\n-  return {\n-    fetchComments: (sort: Sorting) => dispatch(fetchComments(sort)),\n-    fetchUser: () => dispatch(fetchUser()),\n-    fetchBlockedUsers: () => dispatch(fetchBlockedUsers()),\n-    setBlockedVisible: (value: boolean) => dispatch(setBlockedVisibleState(value)),\n-    logIn: (provider: AuthProvider) => dispatch(logIn(provider)),\n-    logOut: () => dispatch(logout()),\n-    setTheme: (theme: Theme) => dispatch(setTheme(theme)),\n-    enableComments: () => dispatch(setCommentsReadOnlyState(false)),\n-    disableComments: () => dispatch(setCommentsReadOnlyState(true)),\n-    changeSort: (sort: Sorting) => dispatch(setSort(sort)),\n-    blockUser: (id: User['id'], name: User['name'], ttl: BlockTTL) => dispatch(blockUser(id, name, ttl)),\n-    unblockUser: (id: User['id']) => dispatch(unblockUser(id)),\n-    addComment: (text: string, pageTitle: string, pid?: CommentType['id']) =>\n-      dispatch(addComment(text, pageTitle, pid)),\n-    updateComment: (id: CommentType['id'], text: string) => dispatch(updateComment(id, text)),\n-    uploadImage: (image: File) => uploadImage(image),\n-  };\n-};\n-\n /** Root component connected to redux */\n export const ConnectedRoot = connect(\n   (state: StoreState) => ({\n     user: state.user,\n     sort: state.sort,\n-    isBlockedVisible: state.isBlockedVisible,\n+    isSettingsVisible: state.isSettingsVisible,\n     comments: state.comments,\n     pinnedComments: state.pinnedComments,\n     theme: state.theme,\n     info: state.info,\n-    bannedUsers: state.bannedUsers,\n+    hiddenUsers: state.hiddenUsers,\n+    blockedUsers: state.bannedUsers,\n   }),\n-  mapDispatchToProps\n+  boundActions\n )(Root);"
    },
    {
      "sha": "2e256e1432d9d38e8e9ae8f4c8b8058d19ce9539",
      "filename": "frontend/app/components/settings/__action/settings__action.scss",
      "status": "renamed",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__action/settings__action.scss",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__action/settings__action.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/__action/settings__action.scss?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -1,13 +1,9 @@\n-.blocked-users__action {\n+.settings__action {\n   margin-left: 8px;\n   font-weight: 700;\n   color: #0aa;\n   cursor: pointer;\n \n-  @media (hover: hover) {\n-    opacity: 0;\n-  }\n-\n   &:hover {\n     color: #06c5c5;\n   }",
      "previous_filename": "frontend/app/components/blocked-users/__action/blocked-users__action.scss"
    },
    {
      "sha": "6761c7235fc5a805ba47c2e122fe01957464a223",
      "filename": "frontend/app/components/settings/__dimmed/settings__dimmed.scss",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__dimmed/settings__dimmed.scss",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__dimmed/settings__dimmed.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/__dimmed/settings__dimmed.scss?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -0,0 +1,3 @@\n+.settings__dimmed {\n+  opacity: 0.5;\n+}"
    },
    {
      "sha": "1565ce7efe07e24ee93c88deb45e917df6232515",
      "filename": "frontend/app/components/settings/__invisible/settings__invisible.scss",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__invisible/settings__invisible.scss",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__invisible/settings__invisible.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/__invisible/settings__invisible.scss?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -0,0 +1,3 @@\n+.settings__invisible {\n+  opacity: 0.4;\n+}"
    },
    {
      "sha": "55e55b27fe923c28263cd157c1b9d2e97c1a35ec",
      "filename": "frontend/app/components/settings/__list/settings__list.scss",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__list/settings__list.scss",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__list/settings__list.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/__list/settings__list.scss?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -0,0 +1,21 @@\n+.settings__list {\n+  padding: 0 0 0 20px;\n+}\n+\n+.settings__list-item {\n+  cursor: default;\n+  position: relative;\n+  margin-bottom: 0.5em;\n+\n+  @media (hover: hover) {\n+    .settings__action {\n+      opacity: 0;\n+    }\n+\n+    &:hover {\n+      .settings__action {\n+        opacity: 1;\n+      }\n+    }\n+  }\n+}"
    },
    {
      "sha": "3d02754ff595000b5fa71056213e4338ddc8bfdf",
      "filename": "frontend/app/components/settings/__section/settings__section.scss",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__section/settings__section.scss",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__section/settings__section.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/__section/settings__section.scss?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -0,0 +1,3 @@\n+.settings__section + .settings__section {\n+  margin-top: 2em;\n+}"
    },
    {
      "sha": "bcd5124eed30528c0c42dd578e7b36bc3469f82d",
      "filename": "frontend/app/components/settings/__user-id/settings__user-id.scss",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__user-id/settings__user-id.scss",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__user-id/settings__user-id.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/__user-id/settings__user-id.scss?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -0,0 +1,5 @@\n+.settings__user-id {\n+  font-style: italic;\n+  font-size: 0.8em;\n+  word-break: break-all;\n+}"
    },
    {
      "sha": "be4fbd36f8a5207c1b041bc5e4c3a97f7c9c2083",
      "filename": "frontend/app/components/settings/__username/settings__username.scss",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__username/settings__username.scss",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/__username/settings__username.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/__username/settings__username.scss?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -0,0 +1,3 @@\n+.settings__username {\n+  font-weight: 700;\n+}"
    },
    {
      "sha": "f818ffeb19e9e9e06074de30b6c733ca6baf370d",
      "filename": "frontend/app/components/settings/_theme/_dark/settings_theme_dark.scss",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/_theme/_dark/settings_theme_dark.scss",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/_theme/_dark/settings_theme_dark.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/_theme/_dark/settings_theme_dark.scss?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -0,0 +1,11 @@\n+.settings_theme_dark {\n+  .settings__action {\n+    &::before {\n+      color: #ddd;\n+    }\n+  }\n+\n+  .settings__blocked-users-username {\n+    color: #eee;\n+  }\n+}"
    },
    {
      "sha": "f9540ebda30606bea52c4585520933d25235426e",
      "filename": "frontend/app/components/settings/_theme/_light/settings_theme_light.scss",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/_theme/_light/settings_theme_light.scss",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/_theme/_light/settings_theme_light.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/_theme/_light/settings_theme_light.scss?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -0,0 +1,11 @@\n+.settings_theme_light {\n+  .settings__action {\n+    &::before {\n+      color: #777;\n+    }\n+  }\n+\n+  .settings__blocked-users-username {\n+    color: #888;\n+  }\n+}"
    },
    {
      "sha": "085058aa886578adf34e851f2c48f25794081c9b",
      "filename": "frontend/app/components/settings/index.ts",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/index.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/index.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/index.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -0,0 +1,16 @@\n+import withTheme from '../../components/with-theme';\n+import Settings from './settings';\n+\n+export default withTheme(Settings);\n+\n+require('./settings.scss');\n+\n+require('./__action/settings__action.scss');\n+require('./__section/settings__section.scss');\n+require('./__list/settings__list.scss');\n+require('./__invisible/settings__invisible.scss');\n+require('./__dimmed/settings__dimmed.scss');\n+require('./__username/settings__username.scss');\n+require('./__user-id/settings__user-id.scss');\n+require('./_theme/_dark/settings_theme_dark.scss');\n+require('./_theme/_light/settings_theme_light.scss');"
    },
    {
      "sha": "dc479a86b7ef1210bbbe54ccba2ff1c8c924e9cd",
      "filename": "frontend/app/components/settings/settings.scss",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/settings.scss",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/settings.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/settings.scss?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -1,3 +1,3 @@\n-.blocked-users {\n+.settings {\n   padding: 10px 0;\n }",
      "previous_filename": "frontend/app/components/blocked-users/blocked-users.scss"
    },
    {
      "sha": "1ced460ae634361c3691a139843db961ece3d187",
      "filename": "frontend/app/components/settings/settings.tsx",
      "status": "added",
      "additions": 178,
      "deletions": 0,
      "changes": 178,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/settings.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/settings/settings.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/settings/settings.tsx?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -0,0 +1,178 @@\n+/** @jsx h */\n+import { h, Component, RenderableProps } from 'preact';\n+import b from 'bem-react-helper';\n+\n+import { User, BlockedUser, Theme, BlockTTL } from '@app/common/types';\n+import { getHandleClickProps } from '@app/common/accessibility';\n+import { StoreState } from '@app/store';\n+\n+interface Props {\n+  theme: Theme;\n+  user: StoreState['user'];\n+  blockedUsers: BlockedUser[];\n+  hiddenUsers: StoreState['hiddenUsers'];\n+  blockUser(id: User['id'], name: string, ttl: BlockTTL): Promise<void>;\n+  unblockUser(id: User['id']): Promise<void>;\n+  hideUser(user: User): void;\n+  unhideUser(userid: User['id']): void;\n+  onUnblockSomeone(): void;\n+}\n+\n+interface State {\n+  /**\n+   * cached copy so we can\n+   * reapply block on unblocked user\n+   */\n+  blockedUsers: BlockedUser[];\n+  unblockedUsers: (User['id'])[];\n+  hiddenUsers: { [id: string]: User };\n+  unhiddenUsers: (User['id'])[];\n+}\n+\n+export default class BlockedUsers extends Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+\n+    this.state = {\n+      blockedUsers: props.blockedUsers.slice(),\n+      unblockedUsers: [],\n+      hiddenUsers: { ...props.hiddenUsers },\n+      unhiddenUsers: [],\n+    };\n+  }\n+\n+  block = (user: BlockedUser) => {\n+    if (!confirm(`Do you want to block ${user.name}?`)) return;\n+    this.setState({\n+      unblockedUsers: this.state.unblockedUsers.filter(x => x !== user.id),\n+    });\n+    this.props.blockUser(user.id, user.name, 'permanently');\n+  };\n+\n+  unblock = (user: BlockedUser) => {\n+    if (!confirm(`Do you want to unblock ${user.name}?`)) return;\n+    this.setState({ unblockedUsers: this.state.unblockedUsers.concat([user.id]) });\n+    this.props.unblockUser(user.id);\n+    this.props.onUnblockSomeone();\n+  };\n+\n+  hide = (user: User) => {\n+    this.setState({\n+      unhiddenUsers: this.state.unhiddenUsers.filter(x => x !== user.id),\n+    });\n+    this.props.hideUser(user);\n+  };\n+\n+  unhide = (user: User) => {\n+    this.setState({ unhiddenUsers: this.state.unhiddenUsers.concat([user.id]) });\n+    this.props.unhideUser(user.id);\n+    this.props.onUnblockSomeone();\n+  };\n+\n+  __isUserHidden = (user: User): boolean => {\n+    if (this.state.unhiddenUsers.indexOf(user.id) === -1) return true;\n+    return false;\n+  };\n+\n+  render({ user, theme }: RenderableProps<Props>, { blockedUsers, unblockedUsers, unhiddenUsers }: State) {\n+    const hiddenUsersList = Object.values(this.state.hiddenUsers);\n+    return (\n+      <div className={b('settings', {}, { theme })}>\n+        <div className=\"settings__section settings__hidden-users\" role=\"region\" aria-label=\"Hidden users\">\n+          <h3>Hidden users:</h3>\n+          {!hiddenUsersList.length && <h4 className=\"settings__dimmed\">There are no hidden users.</h4>}\n+          {!!hiddenUsersList.length && (\n+            <ul className=\"settings__list\">\n+              {hiddenUsersList.map(user => {\n+                const isUserUnhidden = unhiddenUsers.includes(user.id);\n+\n+                return (\n+                  <li className=\"settings__list-item\">\n+                    <span\n+                      className={['settings__username', isUserUnhidden ? 'settings__invisible' : null].join(' ')}\n+                      title={user.id}\n+                    >\n+                      {user.name || 'unknown'}\n+                    </span>\n+                    {this.__isUserHidden(user) ? (\n+                      <span className=\"settings__action\" {...getHandleClickProps(() => this.unhide(user))}>\n+                        show\n+                      </span>\n+                    ) : (\n+                      <span className=\"settings__action\" {...getHandleClickProps(() => this.hide(user))}>\n+                        hide\n+                      </span>\n+                    )}\n+                    <div>\n+                      <span className=\"settings__user-id\">\n+                        id: <span>{user.id}</span>\n+                      </span>\n+                    </div>\n+                  </li>\n+                );\n+              })}\n+            </ul>\n+          )}\n+        </div>\n+        {user && user.admin && (\n+          <div className=\"settings__section settings__blocked-users\" role=\"region\" aria-label=\"Blocked users\">\n+            <h3>Blocked users:</h3>\n+\n+            {!blockedUsers.length && <h4 className=\"settings__dimmed\">There are no blocked users.</h4>}\n+\n+            {!!blockedUsers.length && (\n+              <ul className=\"settings__list settings__blocked-users-list\">\n+                {blockedUsers.map(user => {\n+                  const isUserUnblocked = unblockedUsers.includes(user.id);\n+\n+                  return (\n+                    <li className=\"settings__list-item\">\n+                      <span\n+                        className={['settings__username', isUserUnblocked ? 'settings__invisible' : null].join(' ')}\n+                        title={user.id}\n+                      >\n+                        {user.name || 'unknown'}\n+                      </span>\n+                      <span className=\"settings__blocked-users-user-block-ttl\"> {formatTime(new Date(user.time))}</span>\n+                      {isUserUnblocked && (\n+                        <span {...getHandleClickProps(() => this.block(user))} className=\"blocked-users__action\">\n+                          block\n+                        </span>\n+                      )}\n+                      {!isUserUnblocked && (\n+                        <span {...getHandleClickProps(() => this.unblock(user))} className=\"settings__action\">\n+                          unblock\n+                        </span>\n+                      )}\n+                      <div>\n+                        <span className=\"settings__user-id\">\n+                          id: <span>{user.id}</span>\n+                        </span>\n+                      </div>\n+                    </li>\n+                  );\n+                })}\n+              </ul>\n+            )}\n+          </div>\n+        )}\n+      </div>\n+    );\n+  }\n+}\n+\n+const currentYear = new Date().getFullYear();\n+\n+function formatTime(time: Date): string {\n+  // let's assume that if block ttl is more than 50 years then user blocked permanently\n+  if (time.getFullYear() - currentYear >= 50) return 'permanently';\n+\n+  // 'ru-RU' adds a dot as a separator\n+  const date = time.toLocaleDateString(['ru-RU'], { day: '2-digit', month: '2-digit', year: '2-digit' });\n+\n+  // do it manually because Intl API doesn't add leading zeros to hours; idk why\n+  const hours = `0${time.getHours()}`.slice(-2);\n+  const mins = `0${time.getMinutes()}`.slice(-2);\n+\n+  return `until ${date} at ${hours}:${mins}`;\n+}"
    },
    {
      "sha": "5d37127fadd4df4159f373df72b20faf203c65d7",
      "filename": "frontend/app/components/thread/thread.tsx",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/thread/thread.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/components/thread/thread.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/thread/thread.tsx?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -31,7 +31,7 @@ function Thread(props: RenderableProps<Props>) {\n       role={['listitem'].concat(!collapsed && replies.length ? 'list' : []).join(' ')}\n       aria-expanded={!collapsed}\n     >\n-      <Comment view=\"main\" data={comment} repliesCount={replies.length} level={level} getPreview={props.getPreview} />\n+      <Comment view=\"main\" data={comment} repliesCount={replies.length} level={level} />\n \n       {!collapsed &&\n         !!replies.length &&"
    },
    {
      "sha": "9eaa17e9d45f1ae01999f06f6b65a4e0565c973d",
      "filename": "frontend/app/remark.tsx",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/remark.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/remark.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/remark.tsx?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -16,6 +16,8 @@ import '@app/components/list-comments';\n import { NODE_ID, BASE_URL } from '@app/common/constants';\n import { StaticStore } from '@app/common/static_store';\n import api from '@app/common/api';\n+import { bindActionCreators } from 'redux';\n+import { fetchHiddenUsers } from './store/user/actions';\n \n if (document.readyState === 'loading') {\n   document.addEventListener('DOMContentLoaded', init);\n@@ -35,6 +37,9 @@ async function init(): Promise<void> {\n     return;\n   }\n \n+  const boundFetchHiddenUsers = bindActionCreators(fetchHiddenUsers, reduxStore.dispatch);\n+  boundFetchHiddenUsers();\n+\n   const params = window.location.search\n     .replace(/^\\?/, '')\n     .split('&')\n@@ -63,7 +68,7 @@ async function init(): Promise<void> {\n   } else {\n     render(\n       <Provider store={reduxStore}>\n-        <ConnectedRoot getPreview={api.getPreview} />\n+        <ConnectedRoot />\n       </Provider>,\n       node.parentElement!,\n       node"
    },
    {
      "sha": "5fbeb4bdd5c42052c82a947d193d858d86feaab4",
      "filename": "frontend/app/store/comments/actions.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/comments/actions.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/comments/actions.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/store/comments/actions.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -9,6 +9,7 @@ import {\n   replaceComment as uReplaceComment,\n   removeComment as uRemoveComment,\n   setCommentPin as uSetCommentPin,\n+  filterTree,\n } from './utils';\n import { COMMENTS_SET, PINNED_COMMENTS_SET, COMMENT_MODE_SET } from './types';\n \n@@ -80,8 +81,11 @@ export const removeComment = (id: Comment['id']): StoreAction<Promise<void>> =>\n };\n \n /** fetches comments from server */\n-export const fetchComments = (sort: Sorting): StoreAction<Promise<Tree>> => async dispatch => {\n+export const fetchComments = (sort: Sorting): StoreAction<Promise<Tree>> => async (dispatch, getState) => {\n   const data = await api.getPostComments(sort);\n+  const hiddenUsersIds = Object.keys(getState().hiddenUsers);\n+  if (hiddenUsersIds.length > 0)\n+    data.comments = filterTree(data.comments, node => hiddenUsersIds.indexOf(node.comment.user.id) === -1);\n   dispatch(setComments(data.comments));\n   dispatch({\n     type: POST_INFO_SET,"
    },
    {
      "sha": "689add16b93f62a9aeaf4361986f9fd1769856f9",
      "filename": "frontend/app/store/comments/utils.ts",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/comments/utils.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/comments/utils.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/store/comments/utils.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -37,6 +37,27 @@ function mapTreeIfID(tree: Node[], id: Comment['id'], fn: (c: Node) => Node): No\n   return treeClone;\n }\n \n+/**\n+ * Filters tree node\n+ */\n+export function filterTree(tree: Node[], fn: (node: Node) => boolean): Node[] {\n+  let filtered = false;\n+  const newTree = tree.reduce<Node[]>((tree, node) => {\n+    if (!fn(node)) {\n+      filtered = true;\n+      return tree;\n+    }\n+    const newNode: Node = !node.replies ? node : { ...node, replies: filterTree(node.replies, fn) };\n+    if (newNode !== node) {\n+      filtered = true;\n+    }\n+    tree.push(newNode);\n+    return tree;\n+  }, []);\n+  if (!filtered) return tree;\n+  return newTree;\n+}\n+\n /**\n  * Traverses through tree and applies function to comment on which function passed.\n  * Note that function must not mutate comment"
    },
    {
      "sha": "3800808a82b377a9243033f544820e77bd82071f",
      "filename": "frontend/app/store/index.ts",
      "status": "modified",
      "additions": 18,
      "deletions": 4,
      "changes": 22,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/index.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/index.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/store/index.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -1,4 +1,4 @@\n-import { createStore, applyMiddleware } from 'redux';\n+import { createStore, applyMiddleware, AnyAction, compose } from 'redux';\n import { combineReducers } from 'redux';\n import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';\n import { Comment, User, PostInfo, Node, BlockedUser, Theme, Sorting, CommentMode } from '@app/common/types';\n@@ -23,8 +23,10 @@ export interface StoreState {\n   info: PostInfo;\n   /** List of banned users */\n   bannedUsers: BlockedUser[];\n+  /** List of hidden users */\n+  hiddenUsers: { [id: string]: User };\n   /** Whether list of blocked users should be visible */\n-  isBlockedVisible: boolean;\n+  isSettingsVisible: boolean;\n   /** Map of collapsed threads */\n   collapsedThreads: {\n     [key: string]: boolean;\n@@ -41,11 +43,23 @@ const middleware = applyMiddleware(thunk);\n /**\n  * Thunk Action shortcut\n  */\n-export type StoreAction<R> = ThunkAction<R, StoreState, undefined, ACTIONS>;\n+export type StoreAction<R, A extends AnyAction = ACTIONS> = ThunkAction<R, StoreState, undefined, A>;\n \n /**\n  * Thunk Dispatch shortcut\n  */\n export type StoreDispatch = ThunkDispatch<StoreState, undefined, ACTIONS>;\n \n-export default createStore(reducers, middleware);\n+// eslint-disable-next-line @typescript-eslint/no-explicit-any\n+const composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n+  ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n+  : compose;\n+const store = createStore(reducers, composeEnhancers(middleware));\n+\n+if (process.env.NODE_ENV === 'development') {\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  (window as any).ReduxStore = store;\n+}\n+\n+export default store;"
    },
    {
      "sha": "2c7a30db40361fd5b05604b7eda675f1c0cd0f59",
      "filename": "frontend/app/store/reducers.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/reducers.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/reducers.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/store/reducers.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -1,16 +1,16 @@\n import comments from './comments/reducers';\n import postinfo from './post_info/reducers';\n+import sort from './sort/reducers';\n import theme from './theme/reducers';\n import user from './user/reducers';\n import userInfo from './user-info/reducers';\n import thread from './thread/reducers';\n-import sort from './sort/reducers';\n \n /** Merged store reducers */\n export default {\n-  ...sort,\n   ...comments,\n   ...postinfo,\n+  ...sort,\n   ...theme,\n   ...user,\n   ...userInfo,"
    },
    {
      "sha": "ed384fcb989833c6719bd20d393e57bb01259bd4",
      "filename": "frontend/app/store/user/actions.ts",
      "status": "modified",
      "additions": 50,
      "deletions": 5,
      "changes": 55,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/user/actions.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/user/actions.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/store/user/actions.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -3,9 +3,24 @@ import { User, BlockedUser, AuthProvider, BlockTTL } from '@app/common/types';\n import { ttlToTime } from '@app/utils/ttl-to-time';\n \n import { StoreAction } from '../index';\n-import { USER_BAN, USER_SET, USER_UNBAN, BLOCKED_VISIBLE_SET, USER_BANLIST_SET } from './types';\n+import {\n+  USER_BAN,\n+  USER_SET,\n+  USER_UNBAN,\n+  USER_BANLIST_SET,\n+  USER_HIDELIST_SET_ACTION,\n+  USER_HIDELIST_SET,\n+  USER_HIDE_ACTION,\n+  USER_HIDE,\n+  USER_UNHIDE_ACTION,\n+  USER_UNHIDE,\n+  SETTINGS_VISIBLE_SET,\n+} from './types';\n import { setComments, unsetCommentMode } from '../comments/actions';\n-import { setUserVerified as uSetUserVerified } from '../comments/utils';\n+import { setUserVerified as uSetUserVerified, filterTree } from '../comments/utils';\n+import { IS_STORAGE_AVAILABLE, LS_HIDDEN_USERS_KEY } from '@app/common/constants';\n+import { getItem } from '@app/common/local-storage';\n+import { Dispatch } from 'redux';\n \n export const fetchUser = (): StoreAction<Promise<User | null>> => async dispatch => {\n   const user = await api.getUser();\n@@ -67,7 +82,37 @@ export const unblockUser = (id: User['id']): StoreAction<Promise<void>> => async\n   });\n };\n \n-export const setVirifiedStatus = (id: User['id'], status: boolean): StoreAction<Promise<void>> => async (\n+export const fetchHiddenUsers = (): StoreAction<void> => dispatch => {\n+  if (!IS_STORAGE_AVAILABLE) return;\n+\n+  const hiddenUsers = JSON.parse(getItem(LS_HIDDEN_USERS_KEY) || '{}');\n+  return (dispatch as Dispatch<USER_HIDELIST_SET_ACTION>)({ type: USER_HIDELIST_SET, payload: hiddenUsers });\n+};\n+\n+export const hideUser = (user: User): StoreAction<void> => (dispatch, getState) => {\n+  if (IS_STORAGE_AVAILABLE) {\n+    const hiddenUsers = JSON.parse(getItem(LS_HIDDEN_USERS_KEY) || '{}');\n+    hiddenUsers[user.id] = user;\n+    localStorage.setItem(LS_HIDDEN_USERS_KEY, JSON.stringify(hiddenUsers));\n+  }\n+  (dispatch as Dispatch<USER_HIDE_ACTION>)({ type: USER_HIDE, user });\n+\n+  const comments = getState().comments;\n+  return dispatch(setComments(filterTree(comments, node => node.comment.user.id !== user.id)));\n+};\n+\n+export const unhideUser = (userId: string): StoreAction<void> => dispatch => {\n+  if (IS_STORAGE_AVAILABLE) {\n+    const hiddenUsers = JSON.parse(getItem(LS_HIDDEN_USERS_KEY) || '{}');\n+    if (hiddenUsers.hasOwnProperty(userId)) {\n+      delete hiddenUsers[userId];\n+    }\n+    localStorage.setItem(LS_HIDDEN_USERS_KEY, JSON.stringify(hiddenUsers));\n+  }\n+  return (dispatch as Dispatch<USER_UNHIDE_ACTION>)({ type: USER_UNHIDE, id: userId });\n+};\n+\n+export const setVerifiedStatus = (id: User['id'], status: boolean): StoreAction<Promise<void>> => async (\n   dispatch,\n   getState\n ) => {\n@@ -80,9 +125,9 @@ export const setVirifiedStatus = (id: User['id'], status: boolean): StoreAction<\n   dispatch(setComments(uSetUserVerified(comments, id, status)));\n };\n \n-export const setBlockedVisibleState = (state: boolean): StoreAction<boolean> => dispatch => {\n+export const setSettingsVisibleState = (state: boolean): StoreAction<boolean> => dispatch => {\n   dispatch({\n-    type: BLOCKED_VISIBLE_SET,\n+    type: SETTINGS_VISIBLE_SET,\n     state,\n   });\n   return state;"
    },
    {
      "sha": "fe3affff8189bf3c1f9102d221ab3312e825851a",
      "filename": "frontend/app/store/user/reducers.ts",
      "status": "modified",
      "additions": 29,
      "deletions": 7,
      "changes": 36,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/user/reducers.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/user/reducers.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/store/user/reducers.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -6,9 +6,12 @@ import {\n   USER_BAN,\n   USER_UNBAN,\n   USER_ACTIONS,\n-  BLOCKED_VISIBLE_SET_ACTION,\n-  BLOCKED_VISIBLE_SET,\n+  SETTINGS_VISIBLE_SET_ACTION,\n+  SETTINGS_VISIBLE_SET,\n   USER_BANLIST_SET,\n+  USER_HIDELIST_SET,\n+  USER_HIDE,\n+  USER_UNHIDE,\n } from './types';\n \n export const user = (state: StoreState['user'] = null, action: USER_ACTIONS): User | null => {\n@@ -44,17 +47,36 @@ export const bannedUsers = (state: StoreState['bannedUsers'] = [], action: USER_\n   }\n };\n \n-export const isBlockedVisible = (\n-  state: StoreState['isBlockedVisible'] = false,\n-  action: BLOCKED_VISIBLE_SET_ACTION\n+export const hiddenUsers = (state: StoreState['hiddenUsers'] = {}, action: USER_ACTIONS): StoreState['hiddenUsers'] => {\n+  switch (action.type) {\n+    case USER_HIDELIST_SET: {\n+      return action.payload;\n+    }\n+    case USER_HIDE: {\n+      return { ...state, [action.user.id]: action.user };\n+    }\n+    case USER_UNHIDE: {\n+      if (!state.hasOwnProperty(action.id)) return state;\n+      const newState = { ...state };\n+      delete newState[action.id];\n+      return newState;\n+    }\n+    default:\n+      return state;\n+  }\n+};\n+\n+export const isSettingsVisible = (\n+  state: StoreState['isSettingsVisible'] = false,\n+  action: SETTINGS_VISIBLE_SET_ACTION\n ): boolean => {\n   switch (action.type) {\n-    case BLOCKED_VISIBLE_SET: {\n+    case SETTINGS_VISIBLE_SET: {\n       return action.state;\n     }\n     default:\n       return state;\n   }\n };\n \n-export default { user, bannedUsers, isBlockedVisible };\n+export default { user, bannedUsers, hiddenUsers, isSettingsVisible };"
    },
    {
      "sha": "96fb6b2bbbf0314d41d07af51c758839b2146483",
      "filename": "frontend/app/store/user/types.ts",
      "status": "modified",
      "additions": 28,
      "deletions": 7,
      "changes": 35,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/user/types.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/store/user/types.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/store/user/types.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -11,30 +11,48 @@ export interface USER_SET_ACTION {\n  * Set list of banned users\n  */\n export const USER_BANLIST_SET = 'USER/BANLIST_SET';\n-\n export interface USER_BANLIST_SET_ACTION {\n   type: typeof USER_BANLIST_SET;\n   list: BlockedUser[];\n }\n \n export const USER_BAN = 'USER/BAN';\n-\n export interface USER_BAN_ACTION {\n   type: typeof USER_BAN;\n   user: BlockedUser;\n }\n \n export const USER_UNBAN = 'USER/UNBAN';\n-\n export interface USER_UNBAN_ACTION {\n   type: typeof USER_UNBAN;\n   id: User['id'];\n }\n \n-export const BLOCKED_VISIBLE_SET = 'BLOCKED_VISIBLE/SET';\n+/**\n+ * Set list of hidden users\n+ */\n+export const USER_HIDELIST_SET = 'USER/HIDELIST_SET';\n+export interface USER_HIDELIST_SET_ACTION {\n+  type: typeof USER_HIDELIST_SET;\n+  payload: { [id: string]: User };\n+}\n+\n+export const USER_HIDE = 'USER/HIDE';\n+export interface USER_HIDE_ACTION {\n+  type: typeof USER_HIDE;\n+  user: User;\n+}\n+\n+export const USER_UNHIDE = 'USER/UNHIDE';\n+export interface USER_UNHIDE_ACTION {\n+  type: typeof USER_UNHIDE;\n+  id: User['id'];\n+}\n+\n+export const SETTINGS_VISIBLE_SET = 'SETTINGS_VISIBLE/SET';\n \n-export interface BLOCKED_VISIBLE_SET_ACTION {\n-  type: typeof BLOCKED_VISIBLE_SET;\n+export interface SETTINGS_VISIBLE_SET_ACTION {\n+  type: typeof SETTINGS_VISIBLE_SET;\n   state: boolean;\n }\n \n@@ -43,4 +61,7 @@ export type USER_ACTIONS =\n   | USER_BANLIST_SET_ACTION\n   | USER_BAN_ACTION\n   | USER_UNBAN_ACTION\n-  | BLOCKED_VISIBLE_SET_ACTION;\n+  | USER_HIDELIST_SET_ACTION\n+  | USER_HIDE_ACTION\n+  | USER_UNHIDE_ACTION\n+  | SETTINGS_VISIBLE_SET_ACTION;"
    },
    {
      "sha": "145bb8dd3bf34242711b091f8dbec64118f2c04f",
      "filename": "frontend/app/utils/actionBinder.ts",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/utils/actionBinder.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/utils/actionBinder.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/utils/actionBinder.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -0,0 +1,23 @@\n+import { StoreAction } from '@app/store';\n+import { Action } from 'redux';\n+\n+/** Helper type which is used to convert actionCreator to redux `connect` bound prop */\n+export type BoundActionCreator<A> = A extends (...args: infer U) => StoreAction<infer R>\n+  ? (...args: U) => R\n+  : A extends (...args: infer U) => Action<infer R>\n+  ? (...args: U) => Action<R>\n+  : A extends (...args: infer U) => Promise<infer R>\n+  ? (...args: U) => Promise<R>\n+  : never;\n+\n+/** Helper type which is used to convert actionCreators map to redux `connect` bound props */\n+export type BoundActionCreators<T extends object> = { [K in keyof T]: BoundActionCreator<T[K]> };\n+\n+/**\n+ * no-op function that is used for type conversion for action creators connected\n+ * through mapDispatchToProps\n+ */\n+export function bindActions<A extends object>(obj: A): BoundActionCreators<A> {\n+  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n+  return obj as any;\n+}"
    },
    {
      "sha": "425f4988bf4a9d9d00092b2d8fdd8c3df1b382fa",
      "filename": "frontend/app/utils/ttl-to-time.ts",
      "status": "modified",
      "additions": 21,
      "deletions": 18,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/utils/ttl-to-time.ts",
      "raw_url": "https://github.com/umputun/remark/raw/a302bdbe5d8446933f01a67f89d0467fb500874f/frontend/app/utils/ttl-to-time.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/utils/ttl-to-time.ts?ref=a302bdbe5d8446933f01a67f89d0467fb500874f",
      "patch": "@@ -1,22 +1,25 @@\n import { BlockTTL } from '@app/common/types';\n \n-export function ttlToTime(ttl: BlockTTL): string {\n-  const now = new Date();\n-  if (ttl === 'permanently') {\n-    now.setFullYear(now.getFullYear() + 100);\n-    return now.toISOString();\n-  }\n-  if (ttl === '43200m') {\n-    now.setMonth(now.getMonth() + 1);\n-    return now.toISOString();\n-  }\n-  if (ttl === '10080m') {\n-    now.setDate(now.getDate() + 7);\n-    return now.toISOString();\n-  }\n-  if (ttl === '1440m') {\n-    now.setDate(now.getDate() + 1);\n-    return now.toISOString();\n+export function ttlToDate(ttl: BlockTTL): Date {\n+  const date = new Date();\n+  switch (ttl) {\n+    case 'permanently':\n+      date.setFullYear(date.getFullYear() + 100);\n+      return date;\n+    case '43200m':\n+      date.setMonth(date.getMonth() + 1);\n+      return date;\n+    case '10080m':\n+      date.setDate(date.getDate() + 7);\n+      return date;\n+    case '1440m':\n+      date.setDate(date.getDate() + 1);\n+      return date;\n+    default:\n+      throw new Error('unknown block ttl');\n   }\n-  throw new Error('unknown block ttl');\n+}\n+\n+export function ttlToTime(ttl: BlockTTL): string {\n+  return ttlToDate(ttl).toISOString();\n }"
    }
  ]
}
