{
  "sha": "af67ec0fc8caee132491a22a6ce0c136abcee3d6",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmFmNjdlYzBmYzhjYWVlMTMyNDkxYTIyYTZjZTBjMTM2YWJjZWUzZDY=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-07-01T19:04:01Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-07-01T19:04:01Z"
    },
    "message": "revendor bf to v 2.0.1",
    "tree": {
      "sha": "82dddb37489673d1eb402c469b3c819aa7312fca",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/82dddb37489673d1eb402c469b3c819aa7312fca"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/af67ec0fc8caee132491a22a6ce0c136abcee3d6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/af67ec0fc8caee132491a22a6ce0c136abcee3d6",
  "html_url": "https://github.com/umputun/remark/commit/af67ec0fc8caee132491a22a6ce0c136abcee3d6",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/af67ec0fc8caee132491a22a6ce0c136abcee3d6/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e63ccdd18d3c0746ac59a0346f3490b471926ddc",
      "url": "https://api.github.com/repos/umputun/remark/commits/e63ccdd18d3c0746ac59a0346f3490b471926ddc",
      "html_url": "https://github.com/umputun/remark/commit/e63ccdd18d3c0746ac59a0346f3490b471926ddc"
    }
  ],
  "stats": {
    "total": 2518,
    "additions": 2178,
    "deletions": 340
  },
  "files": [
    {
      "sha": "b1fcf8e739dd37a3ec36c9c74add19b22444f271",
      "filename": "backend/go.mod",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/go.mod",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/go.mod?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -36,13 +36,13 @@ require (\n \tgithub.com/stretchr/objx v0.2.0 // indirect\n \tgithub.com/stretchr/testify v1.3.0\n \tgo.etcd.io/bbolt v1.3.2 // indirect\n-\tgolang.org/x/crypto v0.0.0-20190530122614-20be4c3c3ed5\n+\tgolang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4\n \tgolang.org/x/image v0.0.0-20190523035834-f03afa92d3ff\n-\tgolang.org/x/net v0.0.0-20190603091049-60506f45cf65\n+\tgolang.org/x/net v0.0.0-20190628185345-da137c7871d7\n \tgolang.org/x/oauth2 v0.0.0-20190604053449-0f29369cfe45 // indirect\n-\tgolang.org/x/sys v0.0.0-20190602015325-4c4f7f33c9ed // indirect\n+\tgolang.org/x/sys v0.0.0-20190626221950-04f50cda93cb // indirect\n \tgolang.org/x/text v0.3.2 // indirect\n \tgolang.org/x/time v0.0.0-20190308202827-9d24e82272b4 // indirect\n \tgoogle.golang.org/appengine v1.6.0 // indirect\n-\tgopkg.in/russross/blackfriday.v2 v2.0.0-00010101000000-000000000000\n+\tgopkg.in/russross/blackfriday.v2 v2.0.1\n )"
    },
    {
      "sha": "0e6cb952c23c30871d2dd8db4e946cbf0d693a96",
      "filename": "backend/go.sum",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/go.sum",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/go.sum",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/go.sum?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -114,8 +114,8 @@ go.etcd.io/bbolt v1.3.2/go.mod h1:IbVyRI1SCnLcuJnV2u8VeU0CEYM7e686BmAb1XKL+uU=\n go.opencensus.io v0.21.0/go.mod h1:mSImk1erAIZhrmZN+AvHh14ztQfjbGwt4TtuofqLduU=\n golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2 h1:VklqNMn3ovrHsnt90PveolxSbWFaJdECFbxSq0Mqo2M=\n golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\n-golang.org/x/crypto v0.0.0-20190530122614-20be4c3c3ed5 h1:8dUaAV7K4uHsF56JQWkprecIQKdPHtR9jCHF5nB8uzc=\n-golang.org/x/crypto v0.0.0-20190530122614-20be4c3c3ed5/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\n+golang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4 h1:HuIa8hRrWRSrqYzx1qI49NNxhdi2PrY7gxVSq1JjLDc=\n+golang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\n golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\n golang.org/x/image v0.0.0-20181116024801-cd38e8056d9b h1:VHyIDlv3XkfCa5/a81uzaoDkHH4rr81Z62g+xlnO8uM=\n golang.org/x/image v0.0.0-20181116024801-cd38e8056d9b/go.mod h1:ux5Hcp/YLpHSI86hEcLt0YII63i6oz57MZXIpbrjZUs=\n@@ -135,8 +135,8 @@ golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73r\n golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\n golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\n golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\n-golang.org/x/net v0.0.0-20190603091049-60506f45cf65 h1:+rhAzEzT3f4JtomfC371qB+0Ola2caSKcY69NUBZrRQ=\n-golang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\n+golang.org/x/net v0.0.0-20190628185345-da137c7871d7 h1:rTIdg5QFRR7XCaK4LCjBiPbx8j4DQRpdYMnGn/bJUEU=\n+golang.org/x/net v0.0.0-20190628185345-da137c7871d7/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\n golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\n golang.org/x/oauth2 v0.0.0-20181203162652-d668ce993890 h1:uESlIz09WIHT2I+pasSXcpLYqYK8wHcdCetU3VuMBJE=\n golang.org/x/oauth2 v0.0.0-20181203162652-d668ce993890/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\n@@ -154,8 +154,8 @@ golang.org/x/sys v0.0.0-20190109145017-48ac38b7c8cb/go.mod h1:STP8DvDyc/dI5b8T5h\n golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a h1:1BGLXjeY4akVXGgbC9HugT3Jv3hCI0z56oJR5vAMgBU=\n golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\n golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n-golang.org/x/sys v0.0.0-20190602015325-4c4f7f33c9ed h1:uPxWBzB3+mlnjy9W58qY1j/cjyFjutgw/Vhan2zLy/A=\n-golang.org/x/sys v0.0.0-20190602015325-4c4f7f33c9ed/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n+golang.org/x/sys v0.0.0-20190626221950-04f50cda93cb h1:fgwFCsaw9buMuxNd6+DQfAuSFqbNiQZpcgJQAgJsK6k=\n+golang.org/x/sys v0.0.0-20190626221950-04f50cda93cb/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\n golang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=\n golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\n golang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ="
    },
    {
      "sha": "fa365b7b6adf869fcbae4adaf45c4354cc7a00b0",
      "filename": "backend/vendor/golang.org/x/crypto/acme/acme.go",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/crypto/acme/acme.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/crypto/acme/acme.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/crypto/acme/acme.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -109,6 +109,13 @@ type Client struct {\n \t// The jitter is a random value up to 1 second.\n \tRetryBackoff func(n int, r *http.Request, resp *http.Response) time.Duration\n \n+\t// UserAgent is prepended to the User-Agent header sent to the ACME server,\n+\t// which by default is this package's name and version.\n+\t//\n+\t// Reusable libraries and tools in particular should set this value to be\n+\t// identifiable by the server, in case they are causing issues.\n+\tUserAgent string\n+\n \tdirMu sync.Mutex // guards writes to dir\n \tdir   *Directory // cached result of Client's Discover method\n "
    },
    {
      "sha": "70ab355f373c6fc7b123ab7ac7eaed7e22293746",
      "filename": "backend/vendor/golang.org/x/crypto/acme/autocert/autocert.go",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/crypto/acme/autocert/autocert.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/crypto/acme/autocert/autocert.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/crypto/acme/autocert/autocert.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -980,6 +980,9 @@ func (m *Manager) acmeClient(ctx context.Context) (*acme.Client, error) {\n \t\t\treturn nil, err\n \t\t}\n \t}\n+\tif client.UserAgent == \"\" {\n+\t\tclient.UserAgent = \"autocert\"\n+\t}\n \tvar contact []string\n \tif m.Email != \"\" {\n \t\tcontact = []string{\"mailto:\" + m.Email}"
    },
    {
      "sha": "600d5798b86ce664347e39e57389f744bf72fc62",
      "filename": "backend/vendor/golang.org/x/crypto/acme/http.go",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/crypto/acme/http.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/crypto/acme/http.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/crypto/acme/http.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -219,6 +219,7 @@ func (c *Client) postNoRetry(ctx context.Context, key crypto.Signer, url string,\n \n // doNoRetry issues a request req, replacing its context (if any) with ctx.\n func (c *Client) doNoRetry(ctx context.Context, req *http.Request) (*http.Response, error) {\n+\treq.Header.Set(\"User-Agent\", c.userAgent())\n \tres, err := c.httpClient().Do(req.WithContext(ctx))\n \tif err != nil {\n \t\tselect {\n@@ -243,6 +244,23 @@ func (c *Client) httpClient() *http.Client {\n \treturn http.DefaultClient\n }\n \n+// packageVersion is the version of the module that contains this package, for\n+// sending as part of the User-Agent header. It's set in version_go112.go.\n+var packageVersion string\n+\n+// userAgent returns the User-Agent header value. It includes the package name,\n+// the module version (if available), and the c.UserAgent value (if set).\n+func (c *Client) userAgent() string {\n+\tua := \"golang.org/x/crypto/acme\"\n+\tif packageVersion != \"\" {\n+\t\tua += \"@\" + packageVersion\n+\t}\n+\tif c.UserAgent != \"\" {\n+\t\tua = c.UserAgent + \" \" + ua\n+\t}\n+\treturn ua\n+}\n+\n // isBadNonce reports whether err is an ACME \"badnonce\" error.\n func isBadNonce(err error) bool {\n \t// According to the spec badNonce is urn:ietf:params:acme:error:badNonce."
    },
    {
      "sha": "b58f2456bea89071111d3fbb87902aaaa31d4e64",
      "filename": "backend/vendor/golang.org/x/crypto/acme/version_go112.go",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/crypto/acme/version_go112.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/crypto/acme/version_go112.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/crypto/acme/version_go112.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build go1.12\n+\n+package acme\n+\n+import \"runtime/debug\"\n+\n+func init() {\n+\t// Set packageVersion if the binary was built in modules mode and x/crypto\n+\t// was not replaced with a different module.\n+\tinfo, ok := debug.ReadBuildInfo()\n+\tif !ok {\n+\t\treturn\n+\t}\n+\tfor _, m := range info.Deps {\n+\t\tif m.Path != \"golang.org/x/crypto\" {\n+\t\t\tcontinue\n+\t\t}\n+\t\tif m.Replace == nil {\n+\t\t\tpackageVersion = m.Version\n+\t\t}\n+\t\tbreak\n+\t}\n+}"
    },
    {
      "sha": "6f3460e69c0b5cf8df3548d4c9d57322e8ba5022",
      "filename": "backend/vendor/golang.org/x/sys/unix/dirent.go",
      "status": "modified",
      "additions": 87,
      "deletions": 2,
      "changes": 89,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/dirent.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/dirent.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/dirent.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -6,12 +6,97 @@\n \n package unix\n \n-import \"syscall\"\n+import \"unsafe\"\n+\n+// readInt returns the size-bytes unsigned integer in native byte order at offset off.\n+func readInt(b []byte, off, size uintptr) (u uint64, ok bool) {\n+\tif len(b) < int(off+size) {\n+\t\treturn 0, false\n+\t}\n+\tif isBigEndian {\n+\t\treturn readIntBE(b[off:], size), true\n+\t}\n+\treturn readIntLE(b[off:], size), true\n+}\n+\n+func readIntBE(b []byte, size uintptr) uint64 {\n+\tswitch size {\n+\tcase 1:\n+\t\treturn uint64(b[0])\n+\tcase 2:\n+\t\t_ = b[1] // bounds check hint to compiler; see golang.org/issue/14808\n+\t\treturn uint64(b[1]) | uint64(b[0])<<8\n+\tcase 4:\n+\t\t_ = b[3] // bounds check hint to compiler; see golang.org/issue/14808\n+\t\treturn uint64(b[3]) | uint64(b[2])<<8 | uint64(b[1])<<16 | uint64(b[0])<<24\n+\tcase 8:\n+\t\t_ = b[7] // bounds check hint to compiler; see golang.org/issue/14808\n+\t\treturn uint64(b[7]) | uint64(b[6])<<8 | uint64(b[5])<<16 | uint64(b[4])<<24 |\n+\t\t\tuint64(b[3])<<32 | uint64(b[2])<<40 | uint64(b[1])<<48 | uint64(b[0])<<56\n+\tdefault:\n+\t\tpanic(\"syscall: readInt with unsupported size\")\n+\t}\n+}\n+\n+func readIntLE(b []byte, size uintptr) uint64 {\n+\tswitch size {\n+\tcase 1:\n+\t\treturn uint64(b[0])\n+\tcase 2:\n+\t\t_ = b[1] // bounds check hint to compiler; see golang.org/issue/14808\n+\t\treturn uint64(b[0]) | uint64(b[1])<<8\n+\tcase 4:\n+\t\t_ = b[3] // bounds check hint to compiler; see golang.org/issue/14808\n+\t\treturn uint64(b[0]) | uint64(b[1])<<8 | uint64(b[2])<<16 | uint64(b[3])<<24\n+\tcase 8:\n+\t\t_ = b[7] // bounds check hint to compiler; see golang.org/issue/14808\n+\t\treturn uint64(b[0]) | uint64(b[1])<<8 | uint64(b[2])<<16 | uint64(b[3])<<24 |\n+\t\t\tuint64(b[4])<<32 | uint64(b[5])<<40 | uint64(b[6])<<48 | uint64(b[7])<<56\n+\tdefault:\n+\t\tpanic(\"syscall: readInt with unsupported size\")\n+\t}\n+}\n \n // ParseDirent parses up to max directory entries in buf,\n // appending the names to names. It returns the number of\n // bytes consumed from buf, the number of entries added\n // to names, and the new names slice.\n func ParseDirent(buf []byte, max int, names []string) (consumed int, count int, newnames []string) {\n-\treturn syscall.ParseDirent(buf, max, names)\n+\toriglen := len(buf)\n+\tcount = 0\n+\tfor max != 0 && len(buf) > 0 {\n+\t\treclen, ok := direntReclen(buf)\n+\t\tif !ok || reclen > uint64(len(buf)) {\n+\t\t\treturn origlen, count, names\n+\t\t}\n+\t\trec := buf[:reclen]\n+\t\tbuf = buf[reclen:]\n+\t\tino, ok := direntIno(rec)\n+\t\tif !ok {\n+\t\t\tbreak\n+\t\t}\n+\t\tif ino == 0 { // File absent in directory.\n+\t\t\tcontinue\n+\t\t}\n+\t\tconst namoff = uint64(unsafe.Offsetof(Dirent{}.Name))\n+\t\tnamlen, ok := direntNamlen(rec)\n+\t\tif !ok || namoff+namlen > uint64(len(rec)) {\n+\t\t\tbreak\n+\t\t}\n+\t\tname := rec[namoff : namoff+namlen]\n+\t\tfor i, c := range name {\n+\t\t\tif c == 0 {\n+\t\t\t\tname = name[:i]\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t\t// Check for useless names before allocating a string.\n+\t\tif string(name) == \".\" || string(name) == \"..\" {\n+\t\t\tcontinue\n+\t\t}\n+\t\tmax--\n+\t\tcount++\n+\t\tnames = append(names, string(name))\n+\t}\n+\treturn origlen - len(buf), count, names\n }"
    },
    {
      "sha": "5a22eca96761284a760ad2d3648a0a659ef9e3c2",
      "filename": "backend/vendor/golang.org/x/sys/unix/mkall.sh",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/mkall.sh",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/mkall.sh",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/mkall.sh?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -105,25 +105,25 @@ dragonfly_amd64)\n freebsd_386)\n \tmkerrors=\"$mkerrors -m32\"\n \tmksyscall=\"go run mksyscall.go -l32\"\n-\tmksysnum=\"go run mksysnum.go 'https://svn.freebsd.org/base/stable/10/sys/kern/syscalls.master'\"\n+\tmksysnum=\"go run mksysnum.go 'https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master'\"\n \tmktypes=\"GOARCH=$GOARCH go tool cgo -godefs\"\n \t;;\n freebsd_amd64)\n \tmkerrors=\"$mkerrors -m64\"\n-\tmksysnum=\"go run mksysnum.go 'https://svn.freebsd.org/base/stable/10/sys/kern/syscalls.master'\"\n+\tmksysnum=\"go run mksysnum.go 'https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master'\"\n \tmktypes=\"GOARCH=$GOARCH go tool cgo -godefs\"\n \t;;\n freebsd_arm)\n \tmkerrors=\"$mkerrors\"\n \tmksyscall=\"go run mksyscall.go -l32 -arm\"\n-\tmksysnum=\"go run mksysnum.go 'https://svn.freebsd.org/base/stable/10/sys/kern/syscalls.master'\"\n+\tmksysnum=\"go run mksysnum.go 'https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master'\"\n \t# Let the type of C char be signed for making the bare syscall\n \t# API consistent across platforms.\n \tmktypes=\"GOARCH=$GOARCH go tool cgo -godefs -- -fsigned-char\"\n \t;;\n freebsd_arm64)\n \tmkerrors=\"$mkerrors -m64\"\n-\tmksysnum=\"go run mksysnum.go 'https://svn.freebsd.org/base/stable/10/sys/kern/syscalls.master'\"\n+\tmksysnum=\"go run mksysnum.go 'https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master'\"\n \tmktypes=\"GOARCH=$GOARCH go tool cgo -godefs\"\n \t;;\n netbsd_386)"
    },
    {
      "sha": "3d85f2795e24192c188098b8d621c0de4e547e08",
      "filename": "backend/vendor/golang.org/x/sys/unix/mkerrors.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/mkerrors.sh",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/mkerrors.sh",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/mkerrors.sh?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -183,6 +183,7 @@ struct ltchars {\n #include <sys/socket.h>\n #include <sys/xattr.h>\n #include <linux/bpf.h>\n+#include <linux/capability.h>\n #include <linux/errqueue.h>\n #include <linux/if.h>\n #include <linux/if_alg.h>"
    },
    {
      "sha": "eb4332059aefda2ccc029a8a8115fe307d690c71",
      "filename": "backend/vendor/golang.org/x/sys/unix/mkpost.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/mkpost.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/mkpost.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/mkpost.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -50,8 +50,8 @@ func main() {\n \t}\n \n \t// Intentionally export __val fields in Fsid and Sigset_t\n-\tvalRegex := regexp.MustCompile(`type (Fsid|Sigset_t) struct {(\\s+)X__val(\\s+\\S+\\s+)}`)\n-\tb = valRegex.ReplaceAll(b, []byte(\"type $1 struct {${2}Val$3}\"))\n+\tvalRegex := regexp.MustCompile(`type (Fsid|Sigset_t) struct {(\\s+)X__(bits|val)(\\s+\\S+\\s+)}`)\n+\tb = valRegex.ReplaceAll(b, []byte(\"type $1 struct {${2}Val$4}\"))\n \n \t// Intentionally export __fds_bits field in FdSet\n \tfdSetRegex := regexp.MustCompile(`type (FdSet) struct {(\\s+)X__fds_bits(\\s+\\S+\\s+)}`)"
    },
    {
      "sha": "baa6ecd85065d3c008958a73c0483427b3966dfe",
      "filename": "backend/vendor/golang.org/x/sys/unix/mksysnum.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/mksysnum.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/mksysnum.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/mksysnum.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -139,7 +139,7 @@ func main() {\n \t\t\t\ttext += format(name, num, proto)\n \t\t\t}\n \t\tcase \"freebsd\":\n-\t\t\tif t.Match(`^([0-9]+)\\s+\\S+\\s+(?:NO)?STD\\s+({ \\S+\\s+(\\w+).*)$`) {\n+\t\t\tif t.Match(`^([0-9]+)\\s+\\S+\\s+(?:(?:NO)?STD|COMPAT10)\\s+({ \\S+\\s+(\\w+).*)$`) {\n \t\t\t\tnum, proto := t.sub[1], t.sub[2]\n \t\t\t\tname := fmt.Sprintf(\"SYS_%s\", t.sub[3])\n \t\t\t\ttext += format(name, num, proto)"
    },
    {
      "sha": "3a90aa6dfaeb37802361f37ad80efc848e6ab490",
      "filename": "backend/vendor/golang.org/x/sys/unix/readdirent_getdents.go",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/readdirent_getdents.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/readdirent_getdents.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/readdirent_getdents.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build aix dragonfly freebsd linux netbsd openbsd\n+\n+package unix\n+\n+// ReadDirent reads directory entries from fd and writes them into buf.\n+func ReadDirent(fd int, buf []byte) (n int, err error) {\n+\treturn Getdents(fd, buf)\n+}"
    },
    {
      "sha": "5fdae40b3a8ec3818f987869caa83c81350831a5",
      "filename": "backend/vendor/golang.org/x/sys/unix/readdirent_getdirentries.go",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/readdirent_getdirentries.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/readdirent_getdirentries.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/readdirent_getdirentries.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2019 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// +build darwin\n+\n+package unix\n+\n+import \"unsafe\"\n+\n+// ReadDirent reads directory entries from fd and writes them into buf.\n+func ReadDirent(fd int, buf []byte) (n int, err error) {\n+\t// Final argument is (basep *uintptr) and the syscall doesn't take nil.\n+\t// 64 bits should be enough. (32 bits isn't even on 386). Since the\n+\t// actual system call is getdirentries64, 64 is a good guess.\n+\t// TODO(rsc): Can we use a single global basep for all calls?\n+\tvar base = (*uintptr)(unsafe.Pointer(new(uint64)))\n+\treturn Getdirentries(fd, buf, base)\n+}"
    },
    {
      "sha": "1aa065f9c95a7f8b2d84b83f4c15f27db7edbbf1",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_aix.go",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_aix.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_aix.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/syscall_aix.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -280,8 +280,24 @@ func sendfile(outfd int, infd int, offset *int64, count int) (written int, err e\n \treturn -1, ENOSYS\n }\n \n+func direntIno(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Ino), unsafe.Sizeof(Dirent{}.Ino))\n+}\n+\n+func direntReclen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Reclen), unsafe.Sizeof(Dirent{}.Reclen))\n+}\n+\n+func direntNamlen(buf []byte) (uint64, bool) {\n+\treclen, ok := direntReclen(buf)\n+\tif !ok {\n+\t\treturn 0, false\n+\t}\n+\treturn reclen - uint64(unsafe.Offsetof(Dirent{}.Name)), true\n+}\n+\n //sys\tgetdirent(fd int, buf []byte) (n int, err error)\n-func ReadDirent(fd int, buf []byte) (n int, err error) {\n+func Getdents(fd int, buf []byte) (n int, err error) {\n \treturn getdirent(fd, buf)\n }\n "
    },
    {
      "sha": "97a8eef6fae7917e2da768e4f89492ec035633ec",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_bsd.go",
      "status": "modified",
      "additions": 3,
      "deletions": 9,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_bsd.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_bsd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/syscall_bsd.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -63,15 +63,6 @@ func Setgroups(gids []int) (err error) {\n \treturn setgroups(len(a), &a[0])\n }\n \n-func ReadDirent(fd int, buf []byte) (n int, err error) {\n-\t// Final argument is (basep *uintptr) and the syscall doesn't take nil.\n-\t// 64 bits should be enough. (32 bits isn't even on 386). Since the\n-\t// actual system call is getdirentries64, 64 is a good guess.\n-\t// TODO(rsc): Can we use a single global basep for all calls?\n-\tvar base = (*uintptr)(unsafe.Pointer(new(uint64)))\n-\treturn Getdirentries(fd, buf, base)\n-}\n-\n // Wait status is 7 bits at bottom, either 0 (exited),\n // 0x7F (stopped), or a signal number that caused an exit.\n // The 0x80 bit is whether there was a core dump.\n@@ -86,6 +77,7 @@ const (\n \tshift = 8\n \n \texited  = 0\n+\tkilled  = 9\n \tstopped = 0x7F\n )\n \n@@ -112,6 +104,8 @@ func (w WaitStatus) CoreDump() bool { return w.Signaled() && w&core != 0 }\n \n func (w WaitStatus) Stopped() bool { return w&mask == stopped && syscall.Signal(w>>shift) != SIGSTOP }\n \n+func (w WaitStatus) Killed() bool { return w&mask == killed && syscall.Signal(w>>shift) != SIGKILL }\n+\n func (w WaitStatus) Continued() bool { return w&mask == stopped && syscall.Signal(w>>shift) == SIGSTOP }\n \n func (w WaitStatus) StopSignal() syscall.Signal {"
    },
    {
      "sha": "216b4ac9e8f5a74df0f1d97ec2bd81075dcba92a",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_darwin.go",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_darwin.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_darwin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/syscall_darwin.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -77,6 +77,18 @@ func nametomib(name string) (mib []_C_int, err error) {\n \treturn buf[0 : n/siz], nil\n }\n \n+func direntIno(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Ino), unsafe.Sizeof(Dirent{}.Ino))\n+}\n+\n+func direntReclen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Reclen), unsafe.Sizeof(Dirent{}.Reclen))\n+}\n+\n+func direntNamlen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Namlen), unsafe.Sizeof(Dirent{}.Namlen))\n+}\n+\n //sys   ptrace(request int, pid int, addr uintptr, data uintptr) (err error)\n func PtraceAttach(pid int) (err error) { return ptrace(PT_ATTACH, pid, 0, 0) }\n func PtraceDetach(pid int) (err error) { return ptrace(PT_DETACH, pid, 0, 0) }"
    },
    {
      "sha": "260a400f91df61345b6304d4e2eaa7e6c2396223",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_dragonfly.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/syscall_dragonfly.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -57,6 +57,22 @@ func nametomib(name string) (mib []_C_int, err error) {\n \treturn buf[0 : n/siz], nil\n }\n \n+func direntIno(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Fileno), unsafe.Sizeof(Dirent{}.Fileno))\n+}\n+\n+func direntReclen(buf []byte) (uint64, bool) {\n+\tnamlen, ok := direntNamlen(buf)\n+\tif !ok {\n+\t\treturn 0, false\n+\t}\n+\treturn (16 + namlen + 1 + 7) &^ 7, true\n+}\n+\n+func direntNamlen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Namlen), unsafe.Sizeof(Dirent{}.Namlen))\n+}\n+\n //sysnb pipe() (r int, w int, err error)\n \n func Pipe(p []int) (err error) {\n@@ -269,6 +285,7 @@ func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err e\n //sys\tFstatfs(fd int, stat *Statfs_t) (err error)\n //sys\tFsync(fd int) (err error)\n //sys\tFtruncate(fd int, length int64) (err error)\n+//sys\tGetdents(fd int, buf []byte) (n int, err error)\n //sys\tGetdirentries(fd int, buf []byte, basep *uintptr) (n int, err error)\n //sys\tGetdtablesize() (size int)\n //sysnb\tGetegid() (egid int)"
    },
    {
      "sha": "329d240b907e0247bca4d5e4ec548cfffa9f737f",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_freebsd.go",
      "status": "modified",
      "additions": 92,
      "deletions": 2,
      "changes": 94,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_freebsd.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_freebsd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/syscall_freebsd.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -82,6 +82,18 @@ func nametomib(name string) (mib []_C_int, err error) {\n \treturn buf[0 : n/siz], nil\n }\n \n+func direntIno(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Fileno), unsafe.Sizeof(Dirent{}.Fileno))\n+}\n+\n+func direntReclen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Reclen), unsafe.Sizeof(Dirent{}.Reclen))\n+}\n+\n+func direntNamlen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Namlen), unsafe.Sizeof(Dirent{}.Namlen))\n+}\n+\n func Pipe(p []int) (err error) {\n \treturn Pipe2(p, 0)\n }\n@@ -362,7 +374,21 @@ func Getdents(fd int, buf []byte) (n int, err error) {\n \n func Getdirentries(fd int, buf []byte, basep *uintptr) (n int, err error) {\n \tif supportsABI(_ino64First) {\n-\t\treturn getdirentries_freebsd12(fd, buf, basep)\n+\t\tif basep == nil || unsafe.Sizeof(*basep) == 8 {\n+\t\t\treturn getdirentries_freebsd12(fd, buf, (*uint64)(unsafe.Pointer(basep)))\n+\t\t}\n+\t\t// The freebsd12 syscall needs a 64-bit base. On 32-bit machines\n+\t\t// we can't just use the basep passed in. See #32498.\n+\t\tvar base uint64 = uint64(*basep)\n+\t\tn, err = getdirentries_freebsd12(fd, buf, &base)\n+\t\t*basep = uintptr(base)\n+\t\tif base>>32 != 0 {\n+\t\t\t// We can't stuff the base back into a uintptr, so any\n+\t\t\t// future calls would be suspect. Generate an error.\n+\t\t\t// EIO is allowed by getdirentries.\n+\t\t\terr = EIO\n+\t\t}\n+\t\treturn\n \t}\n \n \t// The old syscall entries are smaller than the new. Use 1/4 of the original\n@@ -507,6 +533,70 @@ func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err e\n \treturn sendfile(outfd, infd, offset, count)\n }\n \n+//sys\tptrace(request int, pid int, addr uintptr, data int) (err error)\n+\n+func PtraceAttach(pid int) (err error) {\n+\treturn ptrace(PTRACE_ATTACH, pid, 0, 0)\n+}\n+\n+func PtraceCont(pid int, signal int) (err error) {\n+\treturn ptrace(PTRACE_CONT, pid, 1, signal)\n+}\n+\n+func PtraceDetach(pid int) (err error) {\n+\treturn ptrace(PTRACE_DETACH, pid, 1, 0)\n+}\n+\n+func PtraceGetFpRegs(pid int, fpregsout *FpReg) (err error) {\n+\treturn ptrace(PTRACE_GETFPREGS, pid, uintptr(unsafe.Pointer(fpregsout)), 0)\n+}\n+\n+func PtraceGetFsBase(pid int, fsbase *int64) (err error) {\n+\treturn ptrace(PTRACE_GETFSBASE, pid, uintptr(unsafe.Pointer(fsbase)), 0)\n+}\n+\n+func PtraceGetRegs(pid int, regsout *Reg) (err error) {\n+\treturn ptrace(PTRACE_GETREGS, pid, uintptr(unsafe.Pointer(regsout)), 0)\n+}\n+\n+func PtraceIO(req int, pid int, addr uintptr, out []byte, countin int) (count int, err error) {\n+\tioDesc := PtraceIoDesc{Op: int32(req), Offs: (*byte)(unsafe.Pointer(addr)), Addr: (*byte)(unsafe.Pointer(&out[0])), Len: uint(countin)}\n+\terr = ptrace(PTRACE_IO, pid, uintptr(unsafe.Pointer(&ioDesc)), 0)\n+\treturn int(ioDesc.Len), err\n+}\n+\n+func PtraceLwpEvents(pid int, enable int) (err error) {\n+\treturn ptrace(PTRACE_LWPEVENTS, pid, 0, enable)\n+}\n+\n+func PtraceLwpInfo(pid int, info uintptr) (err error) {\n+\treturn ptrace(PTRACE_LWPINFO, pid, info, int(unsafe.Sizeof(PtraceLwpInfoStruct{})))\n+}\n+\n+func PtracePeekData(pid int, addr uintptr, out []byte) (count int, err error) {\n+\treturn PtraceIO(PIOD_READ_D, pid, addr, out, SizeofLong)\n+}\n+\n+func PtracePeekText(pid int, addr uintptr, out []byte) (count int, err error) {\n+\treturn PtraceIO(PIOD_READ_I, pid, addr, out, SizeofLong)\n+}\n+\n+func PtracePokeData(pid int, addr uintptr, data []byte) (count int, err error) {\n+\treturn PtraceIO(PIOD_WRITE_D, pid, addr, data, SizeofLong)\n+}\n+\n+func PtracePokeText(pid int, addr uintptr, data []byte) (count int, err error) {\n+\treturn PtraceIO(PIOD_WRITE_I, pid, addr, data, SizeofLong)\n+}\n+\n+func PtraceSetRegs(pid int, regs *Reg) (err error) {\n+\treturn ptrace(PTRACE_SETREGS, pid, uintptr(unsafe.Pointer(regs)), 0)\n+}\n+\n+func PtraceSingleStep(pid int) (err error) {\n+\treturn ptrace(PTRACE_SINGLESTEP, pid, 1, 0)\n+}\n+\n /*\n  * Exposed directly\n  */\n@@ -555,7 +645,7 @@ func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err e\n //sys\tFsync(fd int) (err error)\n //sys\tFtruncate(fd int, length int64) (err error)\n //sys\tgetdirentries(fd int, buf []byte, basep *uintptr) (n int, err error)\n-//sys\tgetdirentries_freebsd12(fd int, buf []byte, basep *uintptr) (n int, err error)\n+//sys\tgetdirentries_freebsd12(fd int, buf []byte, basep *uint64) (n int, err error)\n //sys\tGetdtablesize() (size int)\n //sysnb\tGetegid() (egid int)\n //sysnb\tGeteuid() (uid int)"
    },
    {
      "sha": "637b5017b8b68b42371bc5552821127b77277c7b",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_linux.go",
      "status": "modified",
      "additions": 18,
      "deletions": 7,
      "changes": 25,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_linux.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_linux.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/syscall_linux.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -13,7 +13,6 @@ package unix\n \n import (\n \t\"encoding/binary\"\n-\t\"net\"\n \t\"runtime\"\n \t\"syscall\"\n \t\"unsafe\"\n@@ -765,7 +764,7 @@ const px_proto_oe = 0\n \n type SockaddrPPPoE struct {\n \tSID    uint16\n-\tRemote net.HardwareAddr\n+\tRemote []byte\n \tDev    string\n \traw    RawSockaddrPPPoX\n }\n@@ -916,7 +915,7 @@ func anyToSockaddr(fd int, rsa *RawSockaddrAny) (Sockaddr, error) {\n \t\t}\n \t\tsa := &SockaddrPPPoE{\n \t\t\tSID:    binary.BigEndian.Uint16(pp[6:8]),\n-\t\t\tRemote: net.HardwareAddr(pp[8:14]),\n+\t\t\tRemote: pp[8:14],\n \t\t}\n \t\tfor i := 14; i < 14+IFNAMSIZ; i++ {\n \t\t\tif pp[i] == 0 {\n@@ -1414,8 +1413,20 @@ func Reboot(cmd int) (err error) {\n \treturn reboot(LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, cmd, \"\")\n }\n \n-func ReadDirent(fd int, buf []byte) (n int, err error) {\n-\treturn Getdents(fd, buf)\n+func direntIno(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Ino), unsafe.Sizeof(Dirent{}.Ino))\n+}\n+\n+func direntReclen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Reclen), unsafe.Sizeof(Dirent{}.Reclen))\n+}\n+\n+func direntNamlen(buf []byte) (uint64, bool) {\n+\treclen, ok := direntReclen(buf)\n+\tif !ok {\n+\t\treturn 0, false\n+\t}\n+\treturn reclen - uint64(unsafe.Offsetof(Dirent{}.Name)), true\n }\n \n //sys\tmount(source string, target string, fstype string, flags uintptr, data *byte) (err error)\n@@ -1450,6 +1461,8 @@ func Sendfile(outfd int, infd int, offset *int64, count int) (written int, err e\n //sys\tAcct(path string) (err error)\n //sys\tAddKey(keyType string, description string, payload []byte, ringid int) (id int, err error)\n //sys\tAdjtimex(buf *Timex) (state int, err error)\n+//sys\tCapget(hdr *CapUserHeader, data *CapUserData) (err error)\n+//sys\tCapset(hdr *CapUserHeader, data *CapUserData) (err error)\n //sys\tChdir(path string) (err error)\n //sys\tChroot(path string) (err error)\n //sys\tClockGetres(clockid int32, res *Timespec) (err error)\n@@ -1755,8 +1768,6 @@ func OpenByHandleAt(mountFD int, handle FileHandle, flags int) (fd int, err erro\n // Alarm\n // ArchPrctl\n // Brk\n-// Capget\n-// Capset\n // ClockNanosleep\n // ClockSettime\n // Clone"
    },
    {
      "sha": "5ef3090401294a7728f02e36679680f7a4482525",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_netbsd.go",
      "status": "modified",
      "additions": 35,
      "deletions": 2,
      "changes": 37,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_netbsd.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_netbsd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/syscall_netbsd.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -94,6 +94,18 @@ func nametomib(name string) (mib []_C_int, err error) {\n \treturn mib, nil\n }\n \n+func direntIno(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Fileno), unsafe.Sizeof(Dirent{}.Fileno))\n+}\n+\n+func direntReclen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Reclen), unsafe.Sizeof(Dirent{}.Reclen))\n+}\n+\n+func direntNamlen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Namlen), unsafe.Sizeof(Dirent{}.Namlen))\n+}\n+\n func SysctlClockinfo(name string) (*Clockinfo, error) {\n \tmib, err := sysctlmib(name)\n \tif err != nil {\n@@ -120,9 +132,30 @@ func Pipe(p []int) (err error) {\n \treturn\n }\n \n-//sys getdents(fd int, buf []byte) (n int, err error)\n+//sys Getdents(fd int, buf []byte) (n int, err error)\n func Getdirentries(fd int, buf []byte, basep *uintptr) (n int, err error) {\n-\treturn getdents(fd, buf)\n+\tn, err = Getdents(fd, buf)\n+\tif err != nil || basep == nil {\n+\t\treturn\n+\t}\n+\n+\tvar off int64\n+\toff, err = Seek(fd, 0, 1 /* SEEK_CUR */)\n+\tif err != nil {\n+\t\t*basep = ^uintptr(0)\n+\t\treturn\n+\t}\n+\t*basep = uintptr(off)\n+\tif unsafe.Sizeof(*basep) == 8 {\n+\t\treturn\n+\t}\n+\tif off>>32 != 0 {\n+\t\t// We can't stuff the offset back into a uintptr, so any\n+\t\t// future calls would be suspect. Generate an error.\n+\t\t// EIO is allowed by getdirentries.\n+\t\terr = EIO\n+\t}\n+\treturn\n }\n \n const ImplementsGetwd = true"
    },
    {
      "sha": "1a074b2fe10f32074e3378bf04efc9faaf6d5afe",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_openbsd.go",
      "status": "modified",
      "additions": 35,
      "deletions": 2,
      "changes": 37,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_openbsd.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_openbsd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/syscall_openbsd.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -43,6 +43,18 @@ func nametomib(name string) (mib []_C_int, err error) {\n \treturn nil, EINVAL\n }\n \n+func direntIno(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Fileno), unsafe.Sizeof(Dirent{}.Fileno))\n+}\n+\n+func direntReclen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Reclen), unsafe.Sizeof(Dirent{}.Reclen))\n+}\n+\n+func direntNamlen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Namlen), unsafe.Sizeof(Dirent{}.Namlen))\n+}\n+\n func SysctlClockinfo(name string) (*Clockinfo, error) {\n \tmib, err := sysctlmib(name)\n \tif err != nil {\n@@ -89,9 +101,30 @@ func Pipe(p []int) (err error) {\n \treturn\n }\n \n-//sys getdents(fd int, buf []byte) (n int, err error)\n+//sys Getdents(fd int, buf []byte) (n int, err error)\n func Getdirentries(fd int, buf []byte, basep *uintptr) (n int, err error) {\n-\treturn getdents(fd, buf)\n+\tn, err = Getdents(fd, buf)\n+\tif err != nil || basep == nil {\n+\t\treturn\n+\t}\n+\n+\tvar off int64\n+\toff, err = Seek(fd, 0, 1 /* SEEK_CUR */)\n+\tif err != nil {\n+\t\t*basep = ^uintptr(0)\n+\t\treturn\n+\t}\n+\t*basep = uintptr(off)\n+\tif unsafe.Sizeof(*basep) == 8 {\n+\t\treturn\n+\t}\n+\tif off>>32 != 0 {\n+\t\t// We can't stuff the offset back into a uintptr, so any\n+\t\t// future calls would be suspect. Generate an error.\n+\t\t// EIO was allowed by getdirentries.\n+\t\terr = EIO\n+\t}\n+\treturn\n }\n \n const ImplementsGetwd = true"
    },
    {
      "sha": "0153a316dd907d42529d39423f0609ba47474d0a",
      "filename": "backend/vendor/golang.org/x/sys/unix/syscall_solaris.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_solaris.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/syscall_solaris.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/syscall_solaris.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -35,6 +35,22 @@ type SockaddrDatalink struct {\n \traw    RawSockaddrDatalink\n }\n \n+func direntIno(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Ino), unsafe.Sizeof(Dirent{}.Ino))\n+}\n+\n+func direntReclen(buf []byte) (uint64, bool) {\n+\treturn readInt(buf, unsafe.Offsetof(Dirent{}.Reclen), unsafe.Sizeof(Dirent{}.Reclen))\n+}\n+\n+func direntNamlen(buf []byte) (uint64, bool) {\n+\treclen, ok := direntReclen(buf)\n+\tif !ok {\n+\t\treturn 0, false\n+\t}\n+\treturn reclen - uint64(unsafe.Offsetof(Dirent{}.Name)), true\n+}\n+\n //sysnb\tpipe(p *[2]_C_int) (n int, err error)\n \n func Pipe(p []int) (err error) {\n@@ -189,6 +205,7 @@ func Setgroups(gids []int) (err error) {\n \treturn setgroups(len(a), &a[0])\n }\n \n+// ReadDirent reads directory entries from fd and writes them into buf.\n func ReadDirent(fd int, buf []byte) (n int, err error) {\n \t// Final argument is (basep *uintptr) and the syscall doesn't take nil.\n \t// TODO(rsc): Can we use a single global basep for all calls?"
    },
    {
      "sha": "a121dc3368f92e624671b1211437c181b5883226",
      "filename": "backend/vendor/golang.org/x/sys/unix/types_freebsd.go",
      "status": "modified",
      "additions": 47,
      "deletions": 3,
      "changes": 50,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/types_freebsd.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/types_freebsd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/types_freebsd.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -243,11 +243,55 @@ const (\n // Ptrace requests\n \n const (\n-\tPTRACE_TRACEME = C.PT_TRACE_ME\n-\tPTRACE_CONT    = C.PT_CONTINUE\n-\tPTRACE_KILL    = C.PT_KILL\n+\tPTRACE_ATTACH     = C.PT_ATTACH\n+\tPTRACE_CONT       = C.PT_CONTINUE\n+\tPTRACE_DETACH     = C.PT_DETACH\n+\tPTRACE_GETFPREGS  = C.PT_GETFPREGS\n+\tPTRACE_GETFSBASE  = C.PT_GETFSBASE\n+\tPTRACE_GETLWPLIST = C.PT_GETLWPLIST\n+\tPTRACE_GETNUMLWPS = C.PT_GETNUMLWPS\n+\tPTRACE_GETREGS    = C.PT_GETREGS\n+\tPTRACE_GETXSTATE  = C.PT_GETXSTATE\n+\tPTRACE_IO         = C.PT_IO\n+\tPTRACE_KILL       = C.PT_KILL\n+\tPTRACE_LWPEVENTS  = C.PT_LWP_EVENTS\n+\tPTRACE_LWPINFO    = C.PT_LWPINFO\n+\tPTRACE_SETFPREGS  = C.PT_SETFPREGS\n+\tPTRACE_SETREGS    = C.PT_SETREGS\n+\tPTRACE_SINGLESTEP = C.PT_STEP\n+\tPTRACE_TRACEME    = C.PT_TRACE_ME\n )\n \n+const (\n+\tPIOD_READ_D  = C.PIOD_READ_D\n+\tPIOD_WRITE_D = C.PIOD_WRITE_D\n+\tPIOD_READ_I  = C.PIOD_READ_I\n+\tPIOD_WRITE_I = C.PIOD_WRITE_I\n+)\n+\n+const (\n+\tPL_FLAG_BORN   = C.PL_FLAG_BORN\n+\tPL_FLAG_EXITED = C.PL_FLAG_EXITED\n+\tPL_FLAG_SI     = C.PL_FLAG_SI\n+)\n+\n+const (\n+\tTRAP_BRKPT = C.TRAP_BRKPT\n+\tTRAP_TRACE = C.TRAP_TRACE\n+)\n+\n+type PtraceLwpInfoStruct C.struct_ptrace_lwpinfo\n+\n+type __Siginfo C.struct___siginfo\n+\n+type Sigset_t C.sigset_t\n+\n+type Reg C.struct_reg\n+\n+type FpReg C.struct_fpreg\n+\n+type PtraceIoDesc C.struct_ptrace_io_desc\n+\n // Events (kqueue, kevent)\n \n type Kevent_t C.struct_kevent_freebsd11"
    },
    {
      "sha": "4a96d72c37d185dea1b319b17a5d6420ebf0eb70",
      "filename": "backend/vendor/golang.org/x/sys/unix/types_netbsd.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/types_netbsd.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/types_netbsd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/types_netbsd.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -254,6 +254,7 @@ type Ptmget C.struct_ptmget\n \n const (\n \tAT_FDCWD            = C.AT_FDCWD\n+\tAT_SYMLINK_FOLLOW   = C.AT_SYMLINK_FOLLOW\n \tAT_SYMLINK_NOFOLLOW = C.AT_SYMLINK_NOFOLLOW\n )\n "
    },
    {
      "sha": "775cb57dc8a8831ee31b21f1d4bacaf1c459f3ef",
      "filename": "backend/vendor/golang.org/x/sys/unix/types_openbsd.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/types_openbsd.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/types_openbsd.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/types_openbsd.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -241,6 +241,7 @@ type Winsize C.struct_winsize\n \n const (\n \tAT_FDCWD            = C.AT_FDCWD\n+\tAT_SYMLINK_FOLLOW   = C.AT_SYMLINK_FOLLOW\n \tAT_SYMLINK_NOFOLLOW = C.AT_SYMLINK_NOFOLLOW\n )\n "
    },
    {
      "sha": "1db2f00dea1f3315f2521641ea0847322dcfd870",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_386.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_386.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_386.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_386.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0x100f\n \tCBAUDEX                              = 0x1000\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "8a9d2eadf4acbba75b27b35e5dd700f078224a5b",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_amd64.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_amd64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_amd64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0x100f\n \tCBAUDEX                              = 0x1000\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "2e7455814af13ff53677cb2b8190909b06f4e313",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_arm.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_arm.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_arm.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0x100f\n \tCBAUDEX                              = 0x1000\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "b1dc633a2678776ac42ea5607707104772d2d79d",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_arm64.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_arm64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_arm64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0x100f\n \tCBAUDEX                              = 0x1000\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "ad4d9afb6b1b432311963b8adde23f4b2e23bced",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0x100f\n \tCBAUDEX                              = 0x1000\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "fe2965028098f1eb3c785ca9b97ada9b3b16c899",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips64.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0x100f\n \tCBAUDEX                              = 0x1000\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "6088783038e819fdf1555feebb15dcd4ff1c8cb1",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips64le.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips64le.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips64le.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mips64le.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0x100f\n \tCBAUDEX                              = 0x1000\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "4cf9ddfad26e580770b445abc0bc855edecf5e90",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_mipsle.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mipsle.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mipsle.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_mipsle.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0x100f\n \tCBAUDEX                              = 0x1000\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "374e3007fccddb67680e8d318712a9a40d1caccf",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc64.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0xff\n \tCBAUDEX                              = 0x0\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "badf14102fbe00c054d6e1b09f9add065bb135d2",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc64le.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc64le.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc64le.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_ppc64le.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0xff\n \tCBAUDEX                              = 0x0\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "0ce8c7eff3fd82615d0f8d19b3f3d0823bc7ed36",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_riscv64.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_riscv64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_riscv64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_riscv64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0x100f\n \tCBAUDEX                              = 0x1000\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "47675125a183ce1f92c6aa831fef7422c8d5574a",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_s390x.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_s390x.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_s390x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_s390x.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -334,6 +334,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0x100f\n \tCBAUDEX                              = 0x1000\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "a46fc9b43983206081a6a928782d7fc19af47752",
      "filename": "backend/vendor/golang.org/x/sys/unix/zerrors_linux_sparc64.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_sparc64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zerrors_linux_sparc64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zerrors_linux_sparc64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -337,6 +337,45 @@ const (\n \tCAN_SFF_MASK                         = 0x7ff\n \tCAN_TP16                             = 0x3\n \tCAN_TP20                             = 0x4\n+\tCAP_AUDIT_CONTROL                    = 0x1e\n+\tCAP_AUDIT_READ                       = 0x25\n+\tCAP_AUDIT_WRITE                      = 0x1d\n+\tCAP_BLOCK_SUSPEND                    = 0x24\n+\tCAP_CHOWN                            = 0x0\n+\tCAP_DAC_OVERRIDE                     = 0x1\n+\tCAP_DAC_READ_SEARCH                  = 0x2\n+\tCAP_FOWNER                           = 0x3\n+\tCAP_FSETID                           = 0x4\n+\tCAP_IPC_LOCK                         = 0xe\n+\tCAP_IPC_OWNER                        = 0xf\n+\tCAP_KILL                             = 0x5\n+\tCAP_LAST_CAP                         = 0x25\n+\tCAP_LEASE                            = 0x1c\n+\tCAP_LINUX_IMMUTABLE                  = 0x9\n+\tCAP_MAC_ADMIN                        = 0x21\n+\tCAP_MAC_OVERRIDE                     = 0x20\n+\tCAP_MKNOD                            = 0x1b\n+\tCAP_NET_ADMIN                        = 0xc\n+\tCAP_NET_BIND_SERVICE                 = 0xa\n+\tCAP_NET_BROADCAST                    = 0xb\n+\tCAP_NET_RAW                          = 0xd\n+\tCAP_SETFCAP                          = 0x1f\n+\tCAP_SETGID                           = 0x6\n+\tCAP_SETPCAP                          = 0x8\n+\tCAP_SETUID                           = 0x7\n+\tCAP_SYSLOG                           = 0x22\n+\tCAP_SYS_ADMIN                        = 0x15\n+\tCAP_SYS_BOOT                         = 0x16\n+\tCAP_SYS_CHROOT                       = 0x12\n+\tCAP_SYS_MODULE                       = 0x10\n+\tCAP_SYS_NICE                         = 0x17\n+\tCAP_SYS_PACCT                        = 0x14\n+\tCAP_SYS_PTRACE                       = 0x13\n+\tCAP_SYS_RAWIO                        = 0x11\n+\tCAP_SYS_RESOURCE                     = 0x18\n+\tCAP_SYS_TIME                         = 0x19\n+\tCAP_SYS_TTY_CONFIG                   = 0x1a\n+\tCAP_WAKE_ALARM                       = 0x23\n \tCBAUD                                = 0x100f\n \tCBAUDEX                              = 0x1000\n \tCFLUSH                               = 0xf"
    },
    {
      "sha": "cdfe9318ba0247ad207e24a5d4c52e453996bf56",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_dragonfly_amd64.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_dragonfly_amd64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_dragonfly_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_dragonfly_amd64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -749,6 +749,23 @@ func Ftruncate(fd int, length int64) (err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Getdents(fd int, buf []byte) (n int, err error) {\n+\tvar _p0 unsafe.Pointer\n+\tif len(buf) > 0 {\n+\t\t_p0 = unsafe.Pointer(&buf[0])\n+\t} else {\n+\t\t_p0 = unsafe.Pointer(&_zero)\n+\t}\n+\tr0, _, e1 := Syscall(SYS_GETDENTS, uintptr(fd), uintptr(_p0), uintptr(len(buf)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Getdirentries(fd int, buf []byte, basep *uintptr) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {"
    },
    {
      "sha": "a783306b2ad1c90096b449769d4e0a423e2b0e7d",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_386.go",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_386.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_386.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_386.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -387,6 +387,16 @@ func pipe2(p *[2]_C_int, flags int) (err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func ptrace(request int, pid int, addr uintptr, data int) (err error) {\n+\t_, _, e1 := Syscall6(SYS_PTRACE, uintptr(request), uintptr(pid), uintptr(addr), uintptr(data), 0, 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Getcwd(buf []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n@@ -1019,7 +1029,7 @@ func getdirentries(fd int, buf []byte, basep *uintptr) (n int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdirentries_freebsd12(fd int, buf []byte, basep *uintptr) (n int, err error) {\n+func getdirentries_freebsd12(fd int, buf []byte, basep *uint64) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "f995520d38dec74d0b4b77e05e4378e823b831eb",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_amd64.go",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_amd64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_amd64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -387,6 +387,16 @@ func pipe2(p *[2]_C_int, flags int) (err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func ptrace(request int, pid int, addr uintptr, data int) (err error) {\n+\t_, _, e1 := Syscall6(SYS_PTRACE, uintptr(request), uintptr(pid), uintptr(addr), uintptr(data), 0, 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Getcwd(buf []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n@@ -1019,7 +1029,7 @@ func getdirentries(fd int, buf []byte, basep *uintptr) (n int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdirentries_freebsd12(fd int, buf []byte, basep *uintptr) (n int, err error) {\n+func getdirentries_freebsd12(fd int, buf []byte, basep *uint64) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "d681acd43006de7a6bfa6014c4e248d6c7df17d9",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_arm.go",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_arm.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_arm.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -387,6 +387,16 @@ func pipe2(p *[2]_C_int, flags int) (err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func ptrace(request int, pid int, addr uintptr, data int) (err error) {\n+\t_, _, e1 := Syscall6(SYS_PTRACE, uintptr(request), uintptr(pid), uintptr(addr), uintptr(data), 0, 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Getcwd(buf []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n@@ -1019,7 +1029,7 @@ func getdirentries(fd int, buf []byte, basep *uintptr) (n int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdirentries_freebsd12(fd int, buf []byte, basep *uintptr) (n int, err error) {\n+func getdirentries_freebsd12(fd int, buf []byte, basep *uint64) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "5049b2ede451835a289820f527bc542d338acc12",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_arm64.go",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_arm64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_freebsd_arm64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -404,6 +404,16 @@ func Getcwd(buf []byte) (n int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func ptrace(request int, pid int, addr uintptr, data int) (err error) {\n+\t_, _, e1 := Syscall6(SYS_PTRACE, uintptr(request), uintptr(pid), uintptr(addr), uintptr(data), 0, 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func ioctl(fd int, req uint, arg uintptr) (err error) {\n \t_, _, e1 := Syscall(SYS_IOCTL, uintptr(fd), uintptr(req), uintptr(arg))\n \tif e1 != 0 {\n@@ -1019,7 +1029,7 @@ func getdirentries(fd int, buf []byte, basep *uintptr) (n int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdirentries_freebsd12(fd int, buf []byte, basep *uintptr) (n int, err error) {\n+func getdirentries_freebsd12(fd int, buf []byte, basep *uint64) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "c5e46e4cf666e04a8dbb896851434e8d3bec613b",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_386.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_386.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_386.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_386.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "da8819e480d95d80a89c0e19711dc17d29eff248",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_amd64.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_amd64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_amd64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "6ad9be6dd484501d878ec3366756bd57a1745a21",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_arm.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_arm.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_arm.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "f88331782b39ea1be8011d333af75a5881b8b271",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_arm64.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_arm64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_arm64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "8eebc6c77c040758ad711d5daf7ce2d405710047",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "ecf62a677d8405705d8775edfb3231ce3c6e17f2",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips64.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "1ba0f7b6f4e0393ebcbce0aab0c8d7bbca48d049",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips64le.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips64le.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips64le.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mips64le.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "20012b2f0ec7e001e54ba2246964a2fe1e9b8265",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "2b520deaa2f199fc618a647538d37cccbdd4c590",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "d9f044c95347e9d1e4df2422fd89ce043493e036",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64le.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64le.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64le.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_ppc64le.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "9feed65eb0bec1b4253c588e2b13390baf77a268",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_riscv64.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_riscv64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_riscv64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_riscv64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "0a65150881419586ea3b1dac3bce3df9439857c2",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_s390x.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_s390x.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_s390x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_s390x.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "e27f66930c00564cec4da9a46d015b1cdbf0590b",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_linux_sparc64.go",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_sparc64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_sparc64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_linux_sparc64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -408,6 +408,26 @@ func Adjtimex(buf *Timex) (state int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Capget(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPGET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n+func Capset(hdr *CapUserHeader, data *CapUserData) (err error) {\n+\t_, _, e1 := Syscall(SYS_CAPSET, uintptr(unsafe.Pointer(hdr)), uintptr(unsafe.Pointer(data)), 0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func Chdir(path string) (err error) {\n \tvar _p0 *byte\n \t_p0, err = BytePtrFromString(path)"
    },
    {
      "sha": "7e05826647e4ec883874701816d48b4439672f8b",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_386.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_386.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_386.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_386.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -389,7 +389,7 @@ func pipe() (fd1 int, fd2 int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdents(fd int, buf []byte) (n int, err error) {\n+func Getdents(fd int, buf []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "d94d076aa019ebdb024596cffd88c6a2b496c4ed",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_amd64.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_amd64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_amd64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -389,7 +389,7 @@ func pipe() (fd1 int, fd2 int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdents(fd int, buf []byte) (n int, err error) {\n+func Getdents(fd int, buf []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "cf5bf3d05467c9b04aa2edc4daf703f6f81f01e7",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_arm.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_arm.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_arm.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -389,7 +389,7 @@ func pipe() (fd1 int, fd2 int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdents(fd int, buf []byte) (n int, err error) {\n+func Getdents(fd int, buf []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "243a9317cf2876d96b30ae5e41a84adfd709c5c1",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_arm64.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_arm64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_netbsd_arm64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -389,7 +389,7 @@ func pipe() (fd1 int, fd2 int, err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdents(fd int, buf []byte) (n int, err error) {\n+func Getdents(fd int, buf []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "a9532d07870b12bb48eff402e5effbb1b67194e2",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_386.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_386.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_386.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_386.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -387,7 +387,7 @@ func pipe(p *[2]_C_int) (err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdents(fd int, buf []byte) (n int, err error) {\n+func Getdents(fd int, buf []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "0cb9f01774b1c02e953f99433b993647c649a16a",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_amd64.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_amd64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_amd64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -387,7 +387,7 @@ func pipe(p *[2]_C_int) (err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdents(fd int, buf []byte) (n int, err error) {\n+func Getdents(fd int, buf []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "6fc99b54947de0baf832df9b2ca213af2fdc4922",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_arm.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_arm.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_arm.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -387,7 +387,7 @@ func pipe(p *[2]_C_int) (err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdents(fd int, buf []byte) (n int, err error) {\n+func Getdents(fd int, buf []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "27878a72b83c0f053513e2253cf7eb87a64b293b",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_arm64.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_arm64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsyscall_openbsd_arm64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -387,7 +387,7 @@ func pipe(p *[2]_C_int) (err error) {\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n-func getdents(fd int, buf []byte) (n int, err error) {\n+func Getdents(fd int, buf []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(buf) > 0 {\n \t\t_p0 = unsafe.Pointer(&buf[0])"
    },
    {
      "sha": "9474974b657d7e8e31b6d4be13a6051a214c64cb",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
      "status": "modified",
      "additions": 8,
      "deletions": 15,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_386.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -1,4 +1,4 @@\n-// go run mksysnum.go https://svn.freebsd.org/base/stable/10/sys/kern/syscalls.master\n+// go run mksysnum.go https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master\n // Code generated by the command above; see README.md. DO NOT EDIT.\n \n // +build 386,freebsd\n@@ -118,8 +118,6 @@ const (\n \tSYS_SEMSYS                   = 169 // { int semsys(int which, int a2, int a3, int a4, int a5); }\n \tSYS_MSGSYS                   = 170 // { int msgsys(int which, int a2, int a3, int a4, int a5, int a6); }\n \tSYS_SHMSYS                   = 171 // { int shmsys(int which, int a2, int a3, int a4); }\n-\tSYS_FREEBSD6_PREAD           = 173 // { ssize_t freebsd6_pread(int fd, void *buf, size_t nbyte, int pad, off_t offset); }\n-\tSYS_FREEBSD6_PWRITE          = 174 // { ssize_t freebsd6_pwrite(int fd, const void *buf, size_t nbyte, int pad, off_t offset); }\n \tSYS_SETFIB                   = 175 // { int setfib(int fibnum); }\n \tSYS_NTP_ADJTIME              = 176 // { int ntp_adjtime(struct timex *tp); }\n \tSYS_SETGID                   = 181 // { int setgid(gid_t gid); }\n@@ -133,10 +131,6 @@ const (\n \tSYS_GETRLIMIT                = 194 // { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int\n \tSYS_SETRLIMIT                = 195 // { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int\n \tSYS_GETDIRENTRIES            = 196 // { int getdirentries(int fd, char *buf, u_int count, long *basep); }\n-\tSYS_FREEBSD6_MMAP            = 197 // { caddr_t freebsd6_mmap(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos); }\n-\tSYS_FREEBSD6_LSEEK           = 199 // { off_t freebsd6_lseek(int fd, int pad, off_t offset, int whence); }\n-\tSYS_FREEBSD6_TRUNCATE        = 200 // { int freebsd6_truncate(char *path, int pad, off_t length); }\n-\tSYS_FREEBSD6_FTRUNCATE       = 201 // { int freebsd6_ftruncate(int fd, int pad, off_t length); }\n \tSYS___SYSCTL                 = 202 // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); } __sysctl sysctl_args int\n \tSYS_MLOCK                    = 203 // { int mlock(const void *addr, size_t len); }\n \tSYS_MUNLOCK                  = 204 // { int munlock(const void *addr, size_t len); }\n@@ -164,6 +158,7 @@ const (\n \tSYS_FFCLOCK_GETCOUNTER       = 241 // { int ffclock_getcounter(ffcounter *ffcount); }\n \tSYS_FFCLOCK_SETESTIMATE      = 242 // { int ffclock_setestimate( struct ffclock_estimate *cest); }\n \tSYS_FFCLOCK_GETESTIMATE      = 243 // { int ffclock_getestimate( struct ffclock_estimate *cest); }\n+\tSYS_CLOCK_NANOSLEEP          = 244 // { int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp); }\n \tSYS_CLOCK_GETCPUCLOCKID2     = 247 // { int clock_getcpuclockid2(id_t id,int which, clockid_t *clock_id); }\n \tSYS_NTP_GETTIME              = 248 // { int ntp_gettime(struct ntptimeval *ntvp); }\n \tSYS_MINHERIT                 = 250 // { int minherit(void *addr, size_t len, int inherit); }\n@@ -197,13 +192,10 @@ const (\n \tSYS_GETSID                   = 310 // { int getsid(pid_t pid); }\n \tSYS_SETRESUID                = 311 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }\n \tSYS_SETRESGID                = 312 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }\n-\tSYS_AIO_RETURN               = 314 // { int aio_return(struct aiocb *aiocbp); }\n+\tSYS_AIO_RETURN               = 314 // { ssize_t aio_return(struct aiocb *aiocbp); }\n \tSYS_AIO_SUSPEND              = 315 // { int aio_suspend( struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }\n \tSYS_AIO_CANCEL               = 316 // { int aio_cancel(int fd, struct aiocb *aiocbp); }\n \tSYS_AIO_ERROR                = 317 // { int aio_error(struct aiocb *aiocbp); }\n-\tSYS_OAIO_READ                = 318 // { int oaio_read(struct oaiocb *aiocbp); }\n-\tSYS_OAIO_WRITE               = 319 // { int oaio_write(struct oaiocb *aiocbp); }\n-\tSYS_OLIO_LISTIO              = 320 // { int olio_listio(int mode, struct oaiocb * const *acb_list, int nent, struct osigevent *sig); }\n \tSYS_YIELD                    = 321 // { int yield(void); }\n \tSYS_MLOCKALL                 = 324 // { int mlockall(int how); }\n \tSYS_MUNLOCKALL               = 325 // { int munlockall(void); }\n@@ -236,7 +228,7 @@ const (\n \tSYS_EXTATTR_SET_FILE         = 356 // { ssize_t extattr_set_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n \tSYS_EXTATTR_GET_FILE         = 357 // { ssize_t extattr_get_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n \tSYS_EXTATTR_DELETE_FILE      = 358 // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n-\tSYS_AIO_WAITCOMPLETE         = 359 // { int aio_waitcomplete( struct aiocb **aiocbp, struct timespec *timeout); }\n+\tSYS_AIO_WAITCOMPLETE         = 359 // { ssize_t aio_waitcomplete( struct aiocb **aiocbp, struct timespec *timeout); }\n \tSYS_GETRESUID                = 360 // { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }\n \tSYS_GETRESGID                = 361 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }\n \tSYS_KQUEUE                   = 362 // { int kqueue(void); }\n@@ -258,7 +250,7 @@ const (\n \tSYS_UUIDGEN                  = 392 // { int uuidgen(struct uuid *store, int count); }\n \tSYS_SENDFILE                 = 393 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }\n \tSYS_MAC_SYSCALL              = 394 // { int mac_syscall(const char *policy, int call, void *arg); }\n-\tSYS_GETFSSTAT                = 395 // { int getfsstat(struct statfs *buf, long bufsize, int flags); }\n+\tSYS_GETFSSTAT                = 395 // { int getfsstat(struct statfs *buf, long bufsize, int mode); }\n \tSYS_STATFS                   = 396 // { int statfs(char *path, struct statfs *buf); }\n \tSYS_FSTATFS                  = 397 // { int fstatfs(int fd, struct statfs *buf); }\n \tSYS_FHSTATFS                 = 398 // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }\n@@ -293,8 +285,6 @@ const (\n \tSYS_THR_EXIT                 = 431 // { void thr_exit(long *state); }\n \tSYS_THR_SELF                 = 432 // { int thr_self(long *id); }\n \tSYS_THR_KILL                 = 433 // { int thr_kill(long id, int sig); }\n-\tSYS__UMTX_LOCK               = 434 // { int _umtx_lock(struct umtx *umtx); }\n-\tSYS__UMTX_UNLOCK             = 435 // { int _umtx_unlock(struct umtx *umtx); }\n \tSYS_JAIL_ATTACH              = 436 // { int jail_attach(int jid); }\n \tSYS_EXTATTR_LIST_FD          = 437 // { ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n \tSYS_EXTATTR_LIST_FILE        = 438 // { ssize_t extattr_list_file( const char *path, int attrnamespace, void *data, size_t nbytes); }\n@@ -400,4 +390,7 @@ const (\n \tSYS_PPOLL                    = 545 // { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set); }\n \tSYS_FUTIMENS                 = 546 // { int futimens(int fd, struct timespec *times); }\n \tSYS_UTIMENSAT                = 547 // { int utimensat(int fd, char *path, struct timespec *times, int flag); }\n+\tSYS_NUMA_GETAFFINITY         = 548 // { int numa_getaffinity(cpuwhich_t which, id_t id, struct vm_domain_policy_entry *policy); }\n+\tSYS_NUMA_SETAFFINITY         = 549 // { int numa_setaffinity(cpuwhich_t which, id_t id, const struct vm_domain_policy_entry *policy); }\n+\tSYS_FDATASYNC                = 550 // { int fdatasync(int fd); }\n )"
    },
    {
      "sha": "48a7beae7bb506129785e32e41563ad7a7d1a756",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
      "status": "modified",
      "additions": 8,
      "deletions": 15,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_amd64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -1,4 +1,4 @@\n-// go run mksysnum.go https://svn.freebsd.org/base/stable/10/sys/kern/syscalls.master\n+// go run mksysnum.go https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master\n // Code generated by the command above; see README.md. DO NOT EDIT.\n \n // +build amd64,freebsd\n@@ -118,8 +118,6 @@ const (\n \tSYS_SEMSYS                   = 169 // { int semsys(int which, int a2, int a3, int a4, int a5); }\n \tSYS_MSGSYS                   = 170 // { int msgsys(int which, int a2, int a3, int a4, int a5, int a6); }\n \tSYS_SHMSYS                   = 171 // { int shmsys(int which, int a2, int a3, int a4); }\n-\tSYS_FREEBSD6_PREAD           = 173 // { ssize_t freebsd6_pread(int fd, void *buf, size_t nbyte, int pad, off_t offset); }\n-\tSYS_FREEBSD6_PWRITE          = 174 // { ssize_t freebsd6_pwrite(int fd, const void *buf, size_t nbyte, int pad, off_t offset); }\n \tSYS_SETFIB                   = 175 // { int setfib(int fibnum); }\n \tSYS_NTP_ADJTIME              = 176 // { int ntp_adjtime(struct timex *tp); }\n \tSYS_SETGID                   = 181 // { int setgid(gid_t gid); }\n@@ -133,10 +131,6 @@ const (\n \tSYS_GETRLIMIT                = 194 // { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int\n \tSYS_SETRLIMIT                = 195 // { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int\n \tSYS_GETDIRENTRIES            = 196 // { int getdirentries(int fd, char *buf, u_int count, long *basep); }\n-\tSYS_FREEBSD6_MMAP            = 197 // { caddr_t freebsd6_mmap(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos); }\n-\tSYS_FREEBSD6_LSEEK           = 199 // { off_t freebsd6_lseek(int fd, int pad, off_t offset, int whence); }\n-\tSYS_FREEBSD6_TRUNCATE        = 200 // { int freebsd6_truncate(char *path, int pad, off_t length); }\n-\tSYS_FREEBSD6_FTRUNCATE       = 201 // { int freebsd6_ftruncate(int fd, int pad, off_t length); }\n \tSYS___SYSCTL                 = 202 // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); } __sysctl sysctl_args int\n \tSYS_MLOCK                    = 203 // { int mlock(const void *addr, size_t len); }\n \tSYS_MUNLOCK                  = 204 // { int munlock(const void *addr, size_t len); }\n@@ -164,6 +158,7 @@ const (\n \tSYS_FFCLOCK_GETCOUNTER       = 241 // { int ffclock_getcounter(ffcounter *ffcount); }\n \tSYS_FFCLOCK_SETESTIMATE      = 242 // { int ffclock_setestimate( struct ffclock_estimate *cest); }\n \tSYS_FFCLOCK_GETESTIMATE      = 243 // { int ffclock_getestimate( struct ffclock_estimate *cest); }\n+\tSYS_CLOCK_NANOSLEEP          = 244 // { int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp); }\n \tSYS_CLOCK_GETCPUCLOCKID2     = 247 // { int clock_getcpuclockid2(id_t id,int which, clockid_t *clock_id); }\n \tSYS_NTP_GETTIME              = 248 // { int ntp_gettime(struct ntptimeval *ntvp); }\n \tSYS_MINHERIT                 = 250 // { int minherit(void *addr, size_t len, int inherit); }\n@@ -197,13 +192,10 @@ const (\n \tSYS_GETSID                   = 310 // { int getsid(pid_t pid); }\n \tSYS_SETRESUID                = 311 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }\n \tSYS_SETRESGID                = 312 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }\n-\tSYS_AIO_RETURN               = 314 // { int aio_return(struct aiocb *aiocbp); }\n+\tSYS_AIO_RETURN               = 314 // { ssize_t aio_return(struct aiocb *aiocbp); }\n \tSYS_AIO_SUSPEND              = 315 // { int aio_suspend( struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }\n \tSYS_AIO_CANCEL               = 316 // { int aio_cancel(int fd, struct aiocb *aiocbp); }\n \tSYS_AIO_ERROR                = 317 // { int aio_error(struct aiocb *aiocbp); }\n-\tSYS_OAIO_READ                = 318 // { int oaio_read(struct oaiocb *aiocbp); }\n-\tSYS_OAIO_WRITE               = 319 // { int oaio_write(struct oaiocb *aiocbp); }\n-\tSYS_OLIO_LISTIO              = 320 // { int olio_listio(int mode, struct oaiocb * const *acb_list, int nent, struct osigevent *sig); }\n \tSYS_YIELD                    = 321 // { int yield(void); }\n \tSYS_MLOCKALL                 = 324 // { int mlockall(int how); }\n \tSYS_MUNLOCKALL               = 325 // { int munlockall(void); }\n@@ -236,7 +228,7 @@ const (\n \tSYS_EXTATTR_SET_FILE         = 356 // { ssize_t extattr_set_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n \tSYS_EXTATTR_GET_FILE         = 357 // { ssize_t extattr_get_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n \tSYS_EXTATTR_DELETE_FILE      = 358 // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n-\tSYS_AIO_WAITCOMPLETE         = 359 // { int aio_waitcomplete( struct aiocb **aiocbp, struct timespec *timeout); }\n+\tSYS_AIO_WAITCOMPLETE         = 359 // { ssize_t aio_waitcomplete( struct aiocb **aiocbp, struct timespec *timeout); }\n \tSYS_GETRESUID                = 360 // { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }\n \tSYS_GETRESGID                = 361 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }\n \tSYS_KQUEUE                   = 362 // { int kqueue(void); }\n@@ -258,7 +250,7 @@ const (\n \tSYS_UUIDGEN                  = 392 // { int uuidgen(struct uuid *store, int count); }\n \tSYS_SENDFILE                 = 393 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }\n \tSYS_MAC_SYSCALL              = 394 // { int mac_syscall(const char *policy, int call, void *arg); }\n-\tSYS_GETFSSTAT                = 395 // { int getfsstat(struct statfs *buf, long bufsize, int flags); }\n+\tSYS_GETFSSTAT                = 395 // { int getfsstat(struct statfs *buf, long bufsize, int mode); }\n \tSYS_STATFS                   = 396 // { int statfs(char *path, struct statfs *buf); }\n \tSYS_FSTATFS                  = 397 // { int fstatfs(int fd, struct statfs *buf); }\n \tSYS_FHSTATFS                 = 398 // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }\n@@ -293,8 +285,6 @@ const (\n \tSYS_THR_EXIT                 = 431 // { void thr_exit(long *state); }\n \tSYS_THR_SELF                 = 432 // { int thr_self(long *id); }\n \tSYS_THR_KILL                 = 433 // { int thr_kill(long id, int sig); }\n-\tSYS__UMTX_LOCK               = 434 // { int _umtx_lock(struct umtx *umtx); }\n-\tSYS__UMTX_UNLOCK             = 435 // { int _umtx_unlock(struct umtx *umtx); }\n \tSYS_JAIL_ATTACH              = 436 // { int jail_attach(int jid); }\n \tSYS_EXTATTR_LIST_FD          = 437 // { ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n \tSYS_EXTATTR_LIST_FILE        = 438 // { ssize_t extattr_list_file( const char *path, int attrnamespace, void *data, size_t nbytes); }\n@@ -400,4 +390,7 @@ const (\n \tSYS_PPOLL                    = 545 // { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set); }\n \tSYS_FUTIMENS                 = 546 // { int futimens(int fd, struct timespec *times); }\n \tSYS_UTIMENSAT                = 547 // { int utimensat(int fd, char *path, struct timespec *times, int flag); }\n+\tSYS_NUMA_GETAFFINITY         = 548 // { int numa_getaffinity(cpuwhich_t which, id_t id, struct vm_domain_policy_entry *policy); }\n+\tSYS_NUMA_SETAFFINITY         = 549 // { int numa_setaffinity(cpuwhich_t which, id_t id, const struct vm_domain_policy_entry *policy); }\n+\tSYS_FDATASYNC                = 550 // { int fdatasync(int fd); }\n )"
    },
    {
      "sha": "4a6dfd4a74594fecf9c28e46484e06c887497a68",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
      "status": "modified",
      "additions": 8,
      "deletions": 15,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -1,4 +1,4 @@\n-// go run mksysnum.go https://svn.freebsd.org/base/stable/10/sys/kern/syscalls.master\n+// go run mksysnum.go https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master\n // Code generated by the command above; see README.md. DO NOT EDIT.\n \n // +build arm,freebsd\n@@ -118,8 +118,6 @@ const (\n \tSYS_SEMSYS                   = 169 // { int semsys(int which, int a2, int a3, int a4, int a5); }\n \tSYS_MSGSYS                   = 170 // { int msgsys(int which, int a2, int a3, int a4, int a5, int a6); }\n \tSYS_SHMSYS                   = 171 // { int shmsys(int which, int a2, int a3, int a4); }\n-\tSYS_FREEBSD6_PREAD           = 173 // { ssize_t freebsd6_pread(int fd, void *buf, size_t nbyte, int pad, off_t offset); }\n-\tSYS_FREEBSD6_PWRITE          = 174 // { ssize_t freebsd6_pwrite(int fd, const void *buf, size_t nbyte, int pad, off_t offset); }\n \tSYS_SETFIB                   = 175 // { int setfib(int fibnum); }\n \tSYS_NTP_ADJTIME              = 176 // { int ntp_adjtime(struct timex *tp); }\n \tSYS_SETGID                   = 181 // { int setgid(gid_t gid); }\n@@ -133,10 +131,6 @@ const (\n \tSYS_GETRLIMIT                = 194 // { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int\n \tSYS_SETRLIMIT                = 195 // { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int\n \tSYS_GETDIRENTRIES            = 196 // { int getdirentries(int fd, char *buf, u_int count, long *basep); }\n-\tSYS_FREEBSD6_MMAP            = 197 // { caddr_t freebsd6_mmap(caddr_t addr, size_t len, int prot, int flags, int fd, int pad, off_t pos); }\n-\tSYS_FREEBSD6_LSEEK           = 199 // { off_t freebsd6_lseek(int fd, int pad, off_t offset, int whence); }\n-\tSYS_FREEBSD6_TRUNCATE        = 200 // { int freebsd6_truncate(char *path, int pad, off_t length); }\n-\tSYS_FREEBSD6_FTRUNCATE       = 201 // { int freebsd6_ftruncate(int fd, int pad, off_t length); }\n \tSYS___SYSCTL                 = 202 // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); } __sysctl sysctl_args int\n \tSYS_MLOCK                    = 203 // { int mlock(const void *addr, size_t len); }\n \tSYS_MUNLOCK                  = 204 // { int munlock(const void *addr, size_t len); }\n@@ -164,6 +158,7 @@ const (\n \tSYS_FFCLOCK_GETCOUNTER       = 241 // { int ffclock_getcounter(ffcounter *ffcount); }\n \tSYS_FFCLOCK_SETESTIMATE      = 242 // { int ffclock_setestimate( struct ffclock_estimate *cest); }\n \tSYS_FFCLOCK_GETESTIMATE      = 243 // { int ffclock_getestimate( struct ffclock_estimate *cest); }\n+\tSYS_CLOCK_NANOSLEEP          = 244 // { int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp); }\n \tSYS_CLOCK_GETCPUCLOCKID2     = 247 // { int clock_getcpuclockid2(id_t id,int which, clockid_t *clock_id); }\n \tSYS_NTP_GETTIME              = 248 // { int ntp_gettime(struct ntptimeval *ntvp); }\n \tSYS_MINHERIT                 = 250 // { int minherit(void *addr, size_t len, int inherit); }\n@@ -197,13 +192,10 @@ const (\n \tSYS_GETSID                   = 310 // { int getsid(pid_t pid); }\n \tSYS_SETRESUID                = 311 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }\n \tSYS_SETRESGID                = 312 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }\n-\tSYS_AIO_RETURN               = 314 // { int aio_return(struct aiocb *aiocbp); }\n+\tSYS_AIO_RETURN               = 314 // { ssize_t aio_return(struct aiocb *aiocbp); }\n \tSYS_AIO_SUSPEND              = 315 // { int aio_suspend( struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }\n \tSYS_AIO_CANCEL               = 316 // { int aio_cancel(int fd, struct aiocb *aiocbp); }\n \tSYS_AIO_ERROR                = 317 // { int aio_error(struct aiocb *aiocbp); }\n-\tSYS_OAIO_READ                = 318 // { int oaio_read(struct oaiocb *aiocbp); }\n-\tSYS_OAIO_WRITE               = 319 // { int oaio_write(struct oaiocb *aiocbp); }\n-\tSYS_OLIO_LISTIO              = 320 // { int olio_listio(int mode, struct oaiocb * const *acb_list, int nent, struct osigevent *sig); }\n \tSYS_YIELD                    = 321 // { int yield(void); }\n \tSYS_MLOCKALL                 = 324 // { int mlockall(int how); }\n \tSYS_MUNLOCKALL               = 325 // { int munlockall(void); }\n@@ -236,7 +228,7 @@ const (\n \tSYS_EXTATTR_SET_FILE         = 356 // { ssize_t extattr_set_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n \tSYS_EXTATTR_GET_FILE         = 357 // { ssize_t extattr_get_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n \tSYS_EXTATTR_DELETE_FILE      = 358 // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n-\tSYS_AIO_WAITCOMPLETE         = 359 // { int aio_waitcomplete( struct aiocb **aiocbp, struct timespec *timeout); }\n+\tSYS_AIO_WAITCOMPLETE         = 359 // { ssize_t aio_waitcomplete( struct aiocb **aiocbp, struct timespec *timeout); }\n \tSYS_GETRESUID                = 360 // { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }\n \tSYS_GETRESGID                = 361 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }\n \tSYS_KQUEUE                   = 362 // { int kqueue(void); }\n@@ -258,7 +250,7 @@ const (\n \tSYS_UUIDGEN                  = 392 // { int uuidgen(struct uuid *store, int count); }\n \tSYS_SENDFILE                 = 393 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }\n \tSYS_MAC_SYSCALL              = 394 // { int mac_syscall(const char *policy, int call, void *arg); }\n-\tSYS_GETFSSTAT                = 395 // { int getfsstat(struct statfs *buf, long bufsize, int flags); }\n+\tSYS_GETFSSTAT                = 395 // { int getfsstat(struct statfs *buf, long bufsize, int mode); }\n \tSYS_STATFS                   = 396 // { int statfs(char *path, struct statfs *buf); }\n \tSYS_FSTATFS                  = 397 // { int fstatfs(int fd, struct statfs *buf); }\n \tSYS_FHSTATFS                 = 398 // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }\n@@ -293,8 +285,6 @@ const (\n \tSYS_THR_EXIT                 = 431 // { void thr_exit(long *state); }\n \tSYS_THR_SELF                 = 432 // { int thr_self(long *id); }\n \tSYS_THR_KILL                 = 433 // { int thr_kill(long id, int sig); }\n-\tSYS__UMTX_LOCK               = 434 // { int _umtx_lock(struct umtx *umtx); }\n-\tSYS__UMTX_UNLOCK             = 435 // { int _umtx_unlock(struct umtx *umtx); }\n \tSYS_JAIL_ATTACH              = 436 // { int jail_attach(int jid); }\n \tSYS_EXTATTR_LIST_FD          = 437 // { ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n \tSYS_EXTATTR_LIST_FILE        = 438 // { ssize_t extattr_list_file( const char *path, int attrnamespace, void *data, size_t nbytes); }\n@@ -400,4 +390,7 @@ const (\n \tSYS_PPOLL                    = 545 // { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set); }\n \tSYS_FUTIMENS                 = 546 // { int futimens(int fd, struct timespec *times); }\n \tSYS_UTIMENSAT                = 547 // { int utimensat(int fd, char *path, struct timespec *times, int flag); }\n+\tSYS_NUMA_GETAFFINITY         = 548 // { int numa_getaffinity(cpuwhich_t which, id_t id, struct vm_domain_policy_entry *policy); }\n+\tSYS_NUMA_SETAFFINITY         = 549 // { int numa_setaffinity(cpuwhich_t which, id_t id, const struct vm_domain_policy_entry *policy); }\n+\tSYS_FDATASYNC                = 550 // { int fdatasync(int fd); }\n )"
    },
    {
      "sha": "3e51af8edd210dff3dd1ff9ef4fcdb3be2645a15",
      "filename": "backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm64.go",
      "status": "modified",
      "additions": 223,
      "deletions": 222,
      "changes": 445,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/zsysnum_freebsd_arm64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -1,4 +1,4 @@\n-// go run mksysnum.go https://svn.freebsd.org/base/stable/10/sys/kern/syscalls.master\n+// go run mksysnum.go https://svn.freebsd.org/base/stable/11/sys/kern/syscalls.master\n // Code generated by the command above; see README.md. DO NOT EDIT.\n \n // +build arm64,freebsd\n@@ -7,116 +7,117 @@ package unix\n \n const (\n \t// SYS_NOSYS = 0;  // { int nosys(void); } syscall nosys_args int\n-\tSYS_EXIT                     = 1   // { void sys_exit(int rval); } exit \\\n+\tSYS_EXIT                     = 1   // { void sys_exit(int rval); } exit sys_exit_args void\n \tSYS_FORK                     = 2   // { int fork(void); }\n-\tSYS_READ                     = 3   // { ssize_t read(int fd, void *buf, \\\n-\tSYS_WRITE                    = 4   // { ssize_t write(int fd, const void *buf, \\\n+\tSYS_READ                     = 3   // { ssize_t read(int fd, void *buf, size_t nbyte); }\n+\tSYS_WRITE                    = 4   // { ssize_t write(int fd, const void *buf, size_t nbyte); }\n \tSYS_OPEN                     = 5   // { int open(char *path, int flags, int mode); }\n \tSYS_CLOSE                    = 6   // { int close(int fd); }\n-\tSYS_WAIT4                    = 7   // { int wait4(int pid, int *status, \\\n+\tSYS_WAIT4                    = 7   // { int wait4(int pid, int *status, int options, struct rusage *rusage); }\n \tSYS_LINK                     = 9   // { int link(char *path, char *link); }\n \tSYS_UNLINK                   = 10  // { int unlink(char *path); }\n \tSYS_CHDIR                    = 12  // { int chdir(char *path); }\n \tSYS_FCHDIR                   = 13  // { int fchdir(int fd); }\n \tSYS_MKNOD                    = 14  // { int mknod(char *path, int mode, int dev); }\n \tSYS_CHMOD                    = 15  // { int chmod(char *path, int mode); }\n \tSYS_CHOWN                    = 16  // { int chown(char *path, int uid, int gid); }\n-\tSYS_OBREAK                   = 17  // { int obreak(char *nsize); } break \\\n+\tSYS_OBREAK                   = 17  // { int obreak(char *nsize); } break obreak_args int\n \tSYS_GETPID                   = 20  // { pid_t getpid(void); }\n-\tSYS_MOUNT                    = 21  // { int mount(char *type, char *path, \\\n+\tSYS_MOUNT                    = 21  // { int mount(char *type, char *path, int flags, caddr_t data); }\n \tSYS_UNMOUNT                  = 22  // { int unmount(char *path, int flags); }\n \tSYS_SETUID                   = 23  // { int setuid(uid_t uid); }\n \tSYS_GETUID                   = 24  // { uid_t getuid(void); }\n \tSYS_GETEUID                  = 25  // { uid_t geteuid(void); }\n-\tSYS_PTRACE                   = 26  // { int ptrace(int req, pid_t pid, \\\n-\tSYS_RECVMSG                  = 27  // { int recvmsg(int s, struct msghdr *msg, \\\n-\tSYS_SENDMSG                  = 28  // { int sendmsg(int s, struct msghdr *msg, \\\n-\tSYS_RECVFROM                 = 29  // { int recvfrom(int s, caddr_t buf, \\\n-\tSYS_ACCEPT                   = 30  // { int accept(int s, \\\n-\tSYS_GETPEERNAME              = 31  // { int getpeername(int fdes, \\\n-\tSYS_GETSOCKNAME              = 32  // { int getsockname(int fdes, \\\n+\tSYS_PTRACE                   = 26  // { int ptrace(int req, pid_t pid, caddr_t addr, int data); }\n+\tSYS_RECVMSG                  = 27  // { int recvmsg(int s, struct msghdr *msg, int flags); }\n+\tSYS_SENDMSG                  = 28  // { int sendmsg(int s, struct msghdr *msg, int flags); }\n+\tSYS_RECVFROM                 = 29  // { int recvfrom(int s, caddr_t buf, size_t len, int flags, struct sockaddr * __restrict from, __socklen_t * __restrict fromlenaddr); }\n+\tSYS_ACCEPT                   = 30  // { int accept(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen); }\n+\tSYS_GETPEERNAME              = 31  // { int getpeername(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }\n+\tSYS_GETSOCKNAME              = 32  // { int getsockname(int fdes, struct sockaddr * __restrict asa, __socklen_t * __restrict alen); }\n \tSYS_ACCESS                   = 33  // { int access(char *path, int amode); }\n \tSYS_CHFLAGS                  = 34  // { int chflags(const char *path, u_long flags); }\n \tSYS_FCHFLAGS                 = 35  // { int fchflags(int fd, u_long flags); }\n \tSYS_SYNC                     = 36  // { int sync(void); }\n \tSYS_KILL                     = 37  // { int kill(int pid, int signum); }\n \tSYS_GETPPID                  = 39  // { pid_t getppid(void); }\n \tSYS_DUP                      = 41  // { int dup(u_int fd); }\n+\tSYS_PIPE                     = 42  // { int pipe(void); }\n \tSYS_GETEGID                  = 43  // { gid_t getegid(void); }\n-\tSYS_PROFIL                   = 44  // { int profil(caddr_t samples, size_t size, \\\n-\tSYS_KTRACE                   = 45  // { int ktrace(const char *fname, int ops, \\\n+\tSYS_PROFIL                   = 44  // { int profil(caddr_t samples, size_t size, size_t offset, u_int scale); }\n+\tSYS_KTRACE                   = 45  // { int ktrace(const char *fname, int ops, int facs, int pid); }\n \tSYS_GETGID                   = 47  // { gid_t getgid(void); }\n-\tSYS_GETLOGIN                 = 49  // { int getlogin(char *namebuf, u_int \\\n+\tSYS_GETLOGIN                 = 49  // { int getlogin(char *namebuf, u_int namelen); }\n \tSYS_SETLOGIN                 = 50  // { int setlogin(char *namebuf); }\n \tSYS_ACCT                     = 51  // { int acct(char *path); }\n-\tSYS_SIGALTSTACK              = 53  // { int sigaltstack(stack_t *ss, \\\n-\tSYS_IOCTL                    = 54  // { int ioctl(int fd, u_long com, \\\n+\tSYS_SIGALTSTACK              = 53  // { int sigaltstack(stack_t *ss, stack_t *oss); }\n+\tSYS_IOCTL                    = 54  // { int ioctl(int fd, u_long com, caddr_t data); }\n \tSYS_REBOOT                   = 55  // { int reboot(int opt); }\n \tSYS_REVOKE                   = 56  // { int revoke(char *path); }\n \tSYS_SYMLINK                  = 57  // { int symlink(char *path, char *link); }\n-\tSYS_READLINK                 = 58  // { ssize_t readlink(char *path, char *buf, \\\n-\tSYS_EXECVE                   = 59  // { int execve(char *fname, char **argv, \\\n-\tSYS_UMASK                    = 60  // { int umask(int newmask); } umask umask_args \\\n+\tSYS_READLINK                 = 58  // { ssize_t readlink(char *path, char *buf, size_t count); }\n+\tSYS_EXECVE                   = 59  // { int execve(char *fname, char **argv, char **envv); }\n+\tSYS_UMASK                    = 60  // { int umask(int newmask); } umask umask_args int\n \tSYS_CHROOT                   = 61  // { int chroot(char *path); }\n-\tSYS_MSYNC                    = 65  // { int msync(void *addr, size_t len, \\\n+\tSYS_MSYNC                    = 65  // { int msync(void *addr, size_t len, int flags); }\n \tSYS_VFORK                    = 66  // { int vfork(void); }\n \tSYS_SBRK                     = 69  // { int sbrk(int incr); }\n \tSYS_SSTK                     = 70  // { int sstk(int incr); }\n-\tSYS_OVADVISE                 = 72  // { int ovadvise(int anom); } vadvise \\\n+\tSYS_OVADVISE                 = 72  // { int ovadvise(int anom); } vadvise ovadvise_args int\n \tSYS_MUNMAP                   = 73  // { int munmap(void *addr, size_t len); }\n-\tSYS_MPROTECT                 = 74  // { int mprotect(const void *addr, size_t len, \\\n-\tSYS_MADVISE                  = 75  // { int madvise(void *addr, size_t len, \\\n-\tSYS_MINCORE                  = 78  // { int mincore(const void *addr, size_t len, \\\n-\tSYS_GETGROUPS                = 79  // { int getgroups(u_int gidsetsize, \\\n-\tSYS_SETGROUPS                = 80  // { int setgroups(u_int gidsetsize, \\\n+\tSYS_MPROTECT                 = 74  // { int mprotect(const void *addr, size_t len, int prot); }\n+\tSYS_MADVISE                  = 75  // { int madvise(void *addr, size_t len, int behav); }\n+\tSYS_MINCORE                  = 78  // { int mincore(const void *addr, size_t len, char *vec); }\n+\tSYS_GETGROUPS                = 79  // { int getgroups(u_int gidsetsize, gid_t *gidset); }\n+\tSYS_SETGROUPS                = 80  // { int setgroups(u_int gidsetsize, gid_t *gidset); }\n \tSYS_GETPGRP                  = 81  // { int getpgrp(void); }\n \tSYS_SETPGID                  = 82  // { int setpgid(int pid, int pgid); }\n-\tSYS_SETITIMER                = 83  // { int setitimer(u_int which, struct \\\n+\tSYS_SETITIMER                = 83  // { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }\n \tSYS_SWAPON                   = 85  // { int swapon(char *name); }\n-\tSYS_GETITIMER                = 86  // { int getitimer(u_int which, \\\n+\tSYS_GETITIMER                = 86  // { int getitimer(u_int which, struct itimerval *itv); }\n \tSYS_GETDTABLESIZE            = 89  // { int getdtablesize(void); }\n \tSYS_DUP2                     = 90  // { int dup2(u_int from, u_int to); }\n \tSYS_FCNTL                    = 92  // { int fcntl(int fd, int cmd, long arg); }\n-\tSYS_SELECT                   = 93  // { int select(int nd, fd_set *in, fd_set *ou, \\\n+\tSYS_SELECT                   = 93  // { int select(int nd, fd_set *in, fd_set *ou, fd_set *ex, struct timeval *tv); }\n \tSYS_FSYNC                    = 95  // { int fsync(int fd); }\n-\tSYS_SETPRIORITY              = 96  // { int setpriority(int which, int who, \\\n-\tSYS_SOCKET                   = 97  // { int socket(int domain, int type, \\\n-\tSYS_CONNECT                  = 98  // { int connect(int s, caddr_t name, \\\n+\tSYS_SETPRIORITY              = 96  // { int setpriority(int which, int who, int prio); }\n+\tSYS_SOCKET                   = 97  // { int socket(int domain, int type, int protocol); }\n+\tSYS_CONNECT                  = 98  // { int connect(int s, caddr_t name, int namelen); }\n \tSYS_GETPRIORITY              = 100 // { int getpriority(int which, int who); }\n-\tSYS_BIND                     = 104 // { int bind(int s, caddr_t name, \\\n-\tSYS_SETSOCKOPT               = 105 // { int setsockopt(int s, int level, int name, \\\n+\tSYS_BIND                     = 104 // { int bind(int s, caddr_t name, int namelen); }\n+\tSYS_SETSOCKOPT               = 105 // { int setsockopt(int s, int level, int name, caddr_t val, int valsize); }\n \tSYS_LISTEN                   = 106 // { int listen(int s, int backlog); }\n-\tSYS_GETTIMEOFDAY             = 116 // { int gettimeofday(struct timeval *tp, \\\n-\tSYS_GETRUSAGE                = 117 // { int getrusage(int who, \\\n-\tSYS_GETSOCKOPT               = 118 // { int getsockopt(int s, int level, int name, \\\n-\tSYS_READV                    = 120 // { int readv(int fd, struct iovec *iovp, \\\n-\tSYS_WRITEV                   = 121 // { int writev(int fd, struct iovec *iovp, \\\n-\tSYS_SETTIMEOFDAY             = 122 // { int settimeofday(struct timeval *tv, \\\n+\tSYS_GETTIMEOFDAY             = 116 // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }\n+\tSYS_GETRUSAGE                = 117 // { int getrusage(int who, struct rusage *rusage); }\n+\tSYS_GETSOCKOPT               = 118 // { int getsockopt(int s, int level, int name, caddr_t val, int *avalsize); }\n+\tSYS_READV                    = 120 // { int readv(int fd, struct iovec *iovp, u_int iovcnt); }\n+\tSYS_WRITEV                   = 121 // { int writev(int fd, struct iovec *iovp, u_int iovcnt); }\n+\tSYS_SETTIMEOFDAY             = 122 // { int settimeofday(struct timeval *tv, struct timezone *tzp); }\n \tSYS_FCHOWN                   = 123 // { int fchown(int fd, int uid, int gid); }\n \tSYS_FCHMOD                   = 124 // { int fchmod(int fd, int mode); }\n \tSYS_SETREUID                 = 126 // { int setreuid(int ruid, int euid); }\n \tSYS_SETREGID                 = 127 // { int setregid(int rgid, int egid); }\n \tSYS_RENAME                   = 128 // { int rename(char *from, char *to); }\n \tSYS_FLOCK                    = 131 // { int flock(int fd, int how); }\n \tSYS_MKFIFO                   = 132 // { int mkfifo(char *path, int mode); }\n-\tSYS_SENDTO                   = 133 // { int sendto(int s, caddr_t buf, size_t len, \\\n+\tSYS_SENDTO                   = 133 // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, int tolen); }\n \tSYS_SHUTDOWN                 = 134 // { int shutdown(int s, int how); }\n-\tSYS_SOCKETPAIR               = 135 // { int socketpair(int domain, int type, \\\n+\tSYS_SOCKETPAIR               = 135 // { int socketpair(int domain, int type, int protocol, int *rsv); }\n \tSYS_MKDIR                    = 136 // { int mkdir(char *path, int mode); }\n \tSYS_RMDIR                    = 137 // { int rmdir(char *path); }\n-\tSYS_UTIMES                   = 138 // { int utimes(char *path, \\\n-\tSYS_ADJTIME                  = 140 // { int adjtime(struct timeval *delta, \\\n+\tSYS_UTIMES                   = 138 // { int utimes(char *path, struct timeval *tptr); }\n+\tSYS_ADJTIME                  = 140 // { int adjtime(struct timeval *delta, struct timeval *olddelta); }\n \tSYS_SETSID                   = 147 // { int setsid(void); }\n-\tSYS_QUOTACTL                 = 148 // { int quotactl(char *path, int cmd, int uid, \\\n+\tSYS_QUOTACTL                 = 148 // { int quotactl(char *path, int cmd, int uid, caddr_t arg); }\n \tSYS_NLM_SYSCALL              = 154 // { int nlm_syscall(int debug_level, int grace_period, int addr_count, char **addrs); }\n \tSYS_NFSSVC                   = 155 // { int nfssvc(int flag, caddr_t argp); }\n-\tSYS_LGETFH                   = 160 // { int lgetfh(char *fname, \\\n-\tSYS_GETFH                    = 161 // { int getfh(char *fname, \\\n+\tSYS_LGETFH                   = 160 // { int lgetfh(char *fname, struct fhandle *fhp); }\n+\tSYS_GETFH                    = 161 // { int getfh(char *fname, struct fhandle *fhp); }\n \tSYS_SYSARCH                  = 165 // { int sysarch(int op, char *parms); }\n-\tSYS_RTPRIO                   = 166 // { int rtprio(int function, pid_t pid, \\\n-\tSYS_SEMSYS                   = 169 // { int semsys(int which, int a2, int a3, \\\n-\tSYS_MSGSYS                   = 170 // { int msgsys(int which, int a2, int a3, \\\n-\tSYS_SHMSYS                   = 171 // { int shmsys(int which, int a2, int a3, \\\n+\tSYS_RTPRIO                   = 166 // { int rtprio(int function, pid_t pid, struct rtprio *rtp); }\n+\tSYS_SEMSYS                   = 169 // { int semsys(int which, int a2, int a3, int a4, int a5); }\n+\tSYS_MSGSYS                   = 170 // { int msgsys(int which, int a2, int a3, int a4, int a5, int a6); }\n+\tSYS_SHMSYS                   = 171 // { int shmsys(int which, int a2, int a3, int a4); }\n \tSYS_SETFIB                   = 175 // { int setfib(int fibnum); }\n \tSYS_NTP_ADJTIME              = 176 // { int ntp_adjtime(struct timex *tp); }\n \tSYS_SETGID                   = 181 // { int setgid(gid_t gid); }\n@@ -127,269 +128,269 @@ const (\n \tSYS_LSTAT                    = 190 // { int lstat(char *path, struct stat *ub); }\n \tSYS_PATHCONF                 = 191 // { int pathconf(char *path, int name); }\n \tSYS_FPATHCONF                = 192 // { int fpathconf(int fd, int name); }\n-\tSYS_GETRLIMIT                = 194 // { int getrlimit(u_int which, \\\n-\tSYS_SETRLIMIT                = 195 // { int setrlimit(u_int which, \\\n-\tSYS_GETDIRENTRIES            = 196 // { int getdirentries(int fd, char *buf, \\\n-\tSYS___SYSCTL                 = 202 // { int __sysctl(int *name, u_int namelen, \\\n+\tSYS_GETRLIMIT                = 194 // { int getrlimit(u_int which, struct rlimit *rlp); } getrlimit __getrlimit_args int\n+\tSYS_SETRLIMIT                = 195 // { int setrlimit(u_int which, struct rlimit *rlp); } setrlimit __setrlimit_args int\n+\tSYS_GETDIRENTRIES            = 196 // { int getdirentries(int fd, char *buf, u_int count, long *basep); }\n+\tSYS___SYSCTL                 = 202 // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); } __sysctl sysctl_args int\n \tSYS_MLOCK                    = 203 // { int mlock(const void *addr, size_t len); }\n \tSYS_MUNLOCK                  = 204 // { int munlock(const void *addr, size_t len); }\n \tSYS_UNDELETE                 = 205 // { int undelete(char *path); }\n \tSYS_FUTIMES                  = 206 // { int futimes(int fd, struct timeval *tptr); }\n \tSYS_GETPGID                  = 207 // { int getpgid(pid_t pid); }\n-\tSYS_POLL                     = 209 // { int poll(struct pollfd *fds, u_int nfds, \\\n-\tSYS_SEMGET                   = 221 // { int semget(key_t key, int nsems, \\\n-\tSYS_SEMOP                    = 222 // { int semop(int semid, struct sembuf *sops, \\\n+\tSYS_POLL                     = 209 // { int poll(struct pollfd *fds, u_int nfds, int timeout); }\n+\tSYS_SEMGET                   = 221 // { int semget(key_t key, int nsems, int semflg); }\n+\tSYS_SEMOP                    = 222 // { int semop(int semid, struct sembuf *sops, size_t nsops); }\n \tSYS_MSGGET                   = 225 // { int msgget(key_t key, int msgflg); }\n-\tSYS_MSGSND                   = 226 // { int msgsnd(int msqid, const void *msgp, \\\n-\tSYS_MSGRCV                   = 227 // { int msgrcv(int msqid, void *msgp, \\\n-\tSYS_SHMAT                    = 228 // { int shmat(int shmid, const void *shmaddr, \\\n+\tSYS_MSGSND                   = 226 // { int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); }\n+\tSYS_MSGRCV                   = 227 // { int msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }\n+\tSYS_SHMAT                    = 228 // { int shmat(int shmid, const void *shmaddr, int shmflg); }\n \tSYS_SHMDT                    = 230 // { int shmdt(const void *shmaddr); }\n-\tSYS_SHMGET                   = 231 // { int shmget(key_t key, size_t size, \\\n-\tSYS_CLOCK_GETTIME            = 232 // { int clock_gettime(clockid_t clock_id, \\\n-\tSYS_CLOCK_SETTIME            = 233 // { int clock_settime( \\\n-\tSYS_CLOCK_GETRES             = 234 // { int clock_getres(clockid_t clock_id, \\\n-\tSYS_KTIMER_CREATE            = 235 // { int ktimer_create(clockid_t clock_id, \\\n+\tSYS_SHMGET                   = 231 // { int shmget(key_t key, size_t size, int shmflg); }\n+\tSYS_CLOCK_GETTIME            = 232 // { int clock_gettime(clockid_t clock_id, struct timespec *tp); }\n+\tSYS_CLOCK_SETTIME            = 233 // { int clock_settime( clockid_t clock_id, const struct timespec *tp); }\n+\tSYS_CLOCK_GETRES             = 234 // { int clock_getres(clockid_t clock_id, struct timespec *tp); }\n+\tSYS_KTIMER_CREATE            = 235 // { int ktimer_create(clockid_t clock_id, struct sigevent *evp, int *timerid); }\n \tSYS_KTIMER_DELETE            = 236 // { int ktimer_delete(int timerid); }\n-\tSYS_KTIMER_SETTIME           = 237 // { int ktimer_settime(int timerid, int flags, \\\n-\tSYS_KTIMER_GETTIME           = 238 // { int ktimer_gettime(int timerid, struct \\\n+\tSYS_KTIMER_SETTIME           = 237 // { int ktimer_settime(int timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue); }\n+\tSYS_KTIMER_GETTIME           = 238 // { int ktimer_gettime(int timerid, struct itimerspec *value); }\n \tSYS_KTIMER_GETOVERRUN        = 239 // { int ktimer_getoverrun(int timerid); }\n-\tSYS_NANOSLEEP                = 240 // { int nanosleep(const struct timespec *rqtp, \\\n+\tSYS_NANOSLEEP                = 240 // { int nanosleep(const struct timespec *rqtp, struct timespec *rmtp); }\n \tSYS_FFCLOCK_GETCOUNTER       = 241 // { int ffclock_getcounter(ffcounter *ffcount); }\n-\tSYS_FFCLOCK_SETESTIMATE      = 242 // { int ffclock_setestimate( \\\n-\tSYS_FFCLOCK_GETESTIMATE      = 243 // { int ffclock_getestimate( \\\n-\tSYS_CLOCK_NANOSLEEP          = 244 // { int clock_nanosleep(clockid_t clock_id, \\\n-\tSYS_CLOCK_GETCPUCLOCKID2     = 247 // { int clock_getcpuclockid2(id_t id,\\\n+\tSYS_FFCLOCK_SETESTIMATE      = 242 // { int ffclock_setestimate( struct ffclock_estimate *cest); }\n+\tSYS_FFCLOCK_GETESTIMATE      = 243 // { int ffclock_getestimate( struct ffclock_estimate *cest); }\n+\tSYS_CLOCK_NANOSLEEP          = 244 // { int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *rqtp, struct timespec *rmtp); }\n+\tSYS_CLOCK_GETCPUCLOCKID2     = 247 // { int clock_getcpuclockid2(id_t id,int which, clockid_t *clock_id); }\n \tSYS_NTP_GETTIME              = 248 // { int ntp_gettime(struct ntptimeval *ntvp); }\n-\tSYS_MINHERIT                 = 250 // { int minherit(void *addr, size_t len, \\\n+\tSYS_MINHERIT                 = 250 // { int minherit(void *addr, size_t len, int inherit); }\n \tSYS_RFORK                    = 251 // { int rfork(int flags); }\n-\tSYS_OPENBSD_POLL             = 252 // { int openbsd_poll(struct pollfd *fds, \\\n+\tSYS_OPENBSD_POLL             = 252 // { int openbsd_poll(struct pollfd *fds, u_int nfds, int timeout); }\n \tSYS_ISSETUGID                = 253 // { int issetugid(void); }\n \tSYS_LCHOWN                   = 254 // { int lchown(char *path, int uid, int gid); }\n \tSYS_AIO_READ                 = 255 // { int aio_read(struct aiocb *aiocbp); }\n \tSYS_AIO_WRITE                = 256 // { int aio_write(struct aiocb *aiocbp); }\n-\tSYS_LIO_LISTIO               = 257 // { int lio_listio(int mode, \\\n-\tSYS_GETDENTS                 = 272 // { int getdents(int fd, char *buf, \\\n+\tSYS_LIO_LISTIO               = 257 // { int lio_listio(int mode, struct aiocb * const *acb_list, int nent, struct sigevent *sig); }\n+\tSYS_GETDENTS                 = 272 // { int getdents(int fd, char *buf, size_t count); }\n \tSYS_LCHMOD                   = 274 // { int lchmod(char *path, mode_t mode); }\n-\tSYS_LUTIMES                  = 276 // { int lutimes(char *path, \\\n+\tSYS_LUTIMES                  = 276 // { int lutimes(char *path, struct timeval *tptr); }\n \tSYS_NSTAT                    = 278 // { int nstat(char *path, struct nstat *ub); }\n \tSYS_NFSTAT                   = 279 // { int nfstat(int fd, struct nstat *sb); }\n \tSYS_NLSTAT                   = 280 // { int nlstat(char *path, struct nstat *ub); }\n-\tSYS_PREADV                   = 289 // { ssize_t preadv(int fd, struct iovec *iovp, \\\n-\tSYS_PWRITEV                  = 290 // { ssize_t pwritev(int fd, struct iovec *iovp, \\\n-\tSYS_FHOPEN                   = 298 // { int fhopen(const struct fhandle *u_fhp, \\\n-\tSYS_FHSTAT                   = 299 // { int fhstat(const struct fhandle *u_fhp, \\\n+\tSYS_PREADV                   = 289 // { ssize_t preadv(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); }\n+\tSYS_PWRITEV                  = 290 // { ssize_t pwritev(int fd, struct iovec *iovp, u_int iovcnt, off_t offset); }\n+\tSYS_FHOPEN                   = 298 // { int fhopen(const struct fhandle *u_fhp, int flags); }\n+\tSYS_FHSTAT                   = 299 // { int fhstat(const struct fhandle *u_fhp, struct stat *sb); }\n \tSYS_MODNEXT                  = 300 // { int modnext(int modid); }\n-\tSYS_MODSTAT                  = 301 // { int modstat(int modid, \\\n+\tSYS_MODSTAT                  = 301 // { int modstat(int modid, struct module_stat *stat); }\n \tSYS_MODFNEXT                 = 302 // { int modfnext(int modid); }\n \tSYS_MODFIND                  = 303 // { int modfind(const char *name); }\n \tSYS_KLDLOAD                  = 304 // { int kldload(const char *file); }\n \tSYS_KLDUNLOAD                = 305 // { int kldunload(int fileid); }\n \tSYS_KLDFIND                  = 306 // { int kldfind(const char *file); }\n \tSYS_KLDNEXT                  = 307 // { int kldnext(int fileid); }\n-\tSYS_KLDSTAT                  = 308 // { int kldstat(int fileid, struct \\\n+\tSYS_KLDSTAT                  = 308 // { int kldstat(int fileid, struct kld_file_stat* stat); }\n \tSYS_KLDFIRSTMOD              = 309 // { int kldfirstmod(int fileid); }\n \tSYS_GETSID                   = 310 // { int getsid(pid_t pid); }\n-\tSYS_SETRESUID                = 311 // { int setresuid(uid_t ruid, uid_t euid, \\\n-\tSYS_SETRESGID                = 312 // { int setresgid(gid_t rgid, gid_t egid, \\\n+\tSYS_SETRESUID                = 311 // { int setresuid(uid_t ruid, uid_t euid, uid_t suid); }\n+\tSYS_SETRESGID                = 312 // { int setresgid(gid_t rgid, gid_t egid, gid_t sgid); }\n \tSYS_AIO_RETURN               = 314 // { ssize_t aio_return(struct aiocb *aiocbp); }\n-\tSYS_AIO_SUSPEND              = 315 // { int aio_suspend( \\\n-\tSYS_AIO_CANCEL               = 316 // { int aio_cancel(int fd, \\\n+\tSYS_AIO_SUSPEND              = 315 // { int aio_suspend( struct aiocb * const * aiocbp, int nent, const struct timespec *timeout); }\n+\tSYS_AIO_CANCEL               = 316 // { int aio_cancel(int fd, struct aiocb *aiocbp); }\n \tSYS_AIO_ERROR                = 317 // { int aio_error(struct aiocb *aiocbp); }\n \tSYS_YIELD                    = 321 // { int yield(void); }\n \tSYS_MLOCKALL                 = 324 // { int mlockall(int how); }\n \tSYS_MUNLOCKALL               = 325 // { int munlockall(void); }\n \tSYS___GETCWD                 = 326 // { int __getcwd(char *buf, u_int buflen); }\n-\tSYS_SCHED_SETPARAM           = 327 // { int sched_setparam (pid_t pid, \\\n-\tSYS_SCHED_GETPARAM           = 328 // { int sched_getparam (pid_t pid, struct \\\n-\tSYS_SCHED_SETSCHEDULER       = 329 // { int sched_setscheduler (pid_t pid, int \\\n+\tSYS_SCHED_SETPARAM           = 327 // { int sched_setparam (pid_t pid, const struct sched_param *param); }\n+\tSYS_SCHED_GETPARAM           = 328 // { int sched_getparam (pid_t pid, struct sched_param *param); }\n+\tSYS_SCHED_SETSCHEDULER       = 329 // { int sched_setscheduler (pid_t pid, int policy, const struct sched_param *param); }\n \tSYS_SCHED_GETSCHEDULER       = 330 // { int sched_getscheduler (pid_t pid); }\n \tSYS_SCHED_YIELD              = 331 // { int sched_yield (void); }\n \tSYS_SCHED_GET_PRIORITY_MAX   = 332 // { int sched_get_priority_max (int policy); }\n \tSYS_SCHED_GET_PRIORITY_MIN   = 333 // { int sched_get_priority_min (int policy); }\n-\tSYS_SCHED_RR_GET_INTERVAL    = 334 // { int sched_rr_get_interval (pid_t pid, \\\n+\tSYS_SCHED_RR_GET_INTERVAL    = 334 // { int sched_rr_get_interval (pid_t pid, struct timespec *interval); }\n \tSYS_UTRACE                   = 335 // { int utrace(const void *addr, size_t len); }\n-\tSYS_KLDSYM                   = 337 // { int kldsym(int fileid, int cmd, \\\n+\tSYS_KLDSYM                   = 337 // { int kldsym(int fileid, int cmd, void *data); }\n \tSYS_JAIL                     = 338 // { int jail(struct jail *jail); }\n-\tSYS_SIGPROCMASK              = 340 // { int sigprocmask(int how, \\\n+\tSYS_SIGPROCMASK              = 340 // { int sigprocmask(int how, const sigset_t *set, sigset_t *oset); }\n \tSYS_SIGSUSPEND               = 341 // { int sigsuspend(const sigset_t *sigmask); }\n \tSYS_SIGPENDING               = 343 // { int sigpending(sigset_t *set); }\n-\tSYS_SIGTIMEDWAIT             = 345 // { int sigtimedwait(const sigset_t *set, \\\n-\tSYS_SIGWAITINFO              = 346 // { int sigwaitinfo(const sigset_t *set, \\\n-\tSYS___ACL_GET_FILE           = 347 // { int __acl_get_file(const char *path, \\\n-\tSYS___ACL_SET_FILE           = 348 // { int __acl_set_file(const char *path, \\\n-\tSYS___ACL_GET_FD             = 349 // { int __acl_get_fd(int filedes, \\\n-\tSYS___ACL_SET_FD             = 350 // { int __acl_set_fd(int filedes, \\\n-\tSYS___ACL_DELETE_FILE        = 351 // { int __acl_delete_file(const char *path, \\\n-\tSYS___ACL_DELETE_FD          = 352 // { int __acl_delete_fd(int filedes, \\\n-\tSYS___ACL_ACLCHECK_FILE      = 353 // { int __acl_aclcheck_file(const char *path, \\\n-\tSYS___ACL_ACLCHECK_FD        = 354 // { int __acl_aclcheck_fd(int filedes, \\\n-\tSYS_EXTATTRCTL               = 355 // { int extattrctl(const char *path, int cmd, \\\n-\tSYS_EXTATTR_SET_FILE         = 356 // { ssize_t extattr_set_file( \\\n-\tSYS_EXTATTR_GET_FILE         = 357 // { ssize_t extattr_get_file( \\\n-\tSYS_EXTATTR_DELETE_FILE      = 358 // { int extattr_delete_file(const char *path, \\\n-\tSYS_AIO_WAITCOMPLETE         = 359 // { ssize_t aio_waitcomplete( \\\n-\tSYS_GETRESUID                = 360 // { int getresuid(uid_t *ruid, uid_t *euid, \\\n-\tSYS_GETRESGID                = 361 // { int getresgid(gid_t *rgid, gid_t *egid, \\\n+\tSYS_SIGTIMEDWAIT             = 345 // { int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout); }\n+\tSYS_SIGWAITINFO              = 346 // { int sigwaitinfo(const sigset_t *set, siginfo_t *info); }\n+\tSYS___ACL_GET_FILE           = 347 // { int __acl_get_file(const char *path, acl_type_t type, struct acl *aclp); }\n+\tSYS___ACL_SET_FILE           = 348 // { int __acl_set_file(const char *path, acl_type_t type, struct acl *aclp); }\n+\tSYS___ACL_GET_FD             = 349 // { int __acl_get_fd(int filedes, acl_type_t type, struct acl *aclp); }\n+\tSYS___ACL_SET_FD             = 350 // { int __acl_set_fd(int filedes, acl_type_t type, struct acl *aclp); }\n+\tSYS___ACL_DELETE_FILE        = 351 // { int __acl_delete_file(const char *path, acl_type_t type); }\n+\tSYS___ACL_DELETE_FD          = 352 // { int __acl_delete_fd(int filedes, acl_type_t type); }\n+\tSYS___ACL_ACLCHECK_FILE      = 353 // { int __acl_aclcheck_file(const char *path, acl_type_t type, struct acl *aclp); }\n+\tSYS___ACL_ACLCHECK_FD        = 354 // { int __acl_aclcheck_fd(int filedes, acl_type_t type, struct acl *aclp); }\n+\tSYS_EXTATTRCTL               = 355 // { int extattrctl(const char *path, int cmd, const char *filename, int attrnamespace, const char *attrname); }\n+\tSYS_EXTATTR_SET_FILE         = 356 // { ssize_t extattr_set_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n+\tSYS_EXTATTR_GET_FILE         = 357 // { ssize_t extattr_get_file( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n+\tSYS_EXTATTR_DELETE_FILE      = 358 // { int extattr_delete_file(const char *path, int attrnamespace, const char *attrname); }\n+\tSYS_AIO_WAITCOMPLETE         = 359 // { ssize_t aio_waitcomplete( struct aiocb **aiocbp, struct timespec *timeout); }\n+\tSYS_GETRESUID                = 360 // { int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid); }\n+\tSYS_GETRESGID                = 361 // { int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid); }\n \tSYS_KQUEUE                   = 362 // { int kqueue(void); }\n-\tSYS_KEVENT                   = 363 // { int kevent(int fd, \\\n-\tSYS_EXTATTR_SET_FD           = 371 // { ssize_t extattr_set_fd(int fd, \\\n-\tSYS_EXTATTR_GET_FD           = 372 // { ssize_t extattr_get_fd(int fd, \\\n-\tSYS_EXTATTR_DELETE_FD        = 373 // { int extattr_delete_fd(int fd, \\\n+\tSYS_KEVENT                   = 363 // { int kevent(int fd, struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }\n+\tSYS_EXTATTR_SET_FD           = 371 // { ssize_t extattr_set_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n+\tSYS_EXTATTR_GET_FD           = 372 // { ssize_t extattr_get_fd(int fd, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n+\tSYS_EXTATTR_DELETE_FD        = 373 // { int extattr_delete_fd(int fd, int attrnamespace, const char *attrname); }\n \tSYS___SETUGID                = 374 // { int __setugid(int flag); }\n \tSYS_EACCESS                  = 376 // { int eaccess(char *path, int amode); }\n-\tSYS_NMOUNT                   = 378 // { int nmount(struct iovec *iovp, \\\n+\tSYS_NMOUNT                   = 378 // { int nmount(struct iovec *iovp, unsigned int iovcnt, int flags); }\n \tSYS___MAC_GET_PROC           = 384 // { int __mac_get_proc(struct mac *mac_p); }\n \tSYS___MAC_SET_PROC           = 385 // { int __mac_set_proc(struct mac *mac_p); }\n-\tSYS___MAC_GET_FD             = 386 // { int __mac_get_fd(int fd, \\\n-\tSYS___MAC_GET_FILE           = 387 // { int __mac_get_file(const char *path_p, \\\n-\tSYS___MAC_SET_FD             = 388 // { int __mac_set_fd(int fd, \\\n-\tSYS___MAC_SET_FILE           = 389 // { int __mac_set_file(const char *path_p, \\\n-\tSYS_KENV                     = 390 // { int kenv(int what, const char *name, \\\n-\tSYS_LCHFLAGS                 = 391 // { int lchflags(const char *path, \\\n-\tSYS_UUIDGEN                  = 392 // { int uuidgen(struct uuid *store, \\\n-\tSYS_SENDFILE                 = 393 // { int sendfile(int fd, int s, off_t offset, \\\n-\tSYS_MAC_SYSCALL              = 394 // { int mac_syscall(const char *policy, \\\n-\tSYS_GETFSSTAT                = 395 // { int getfsstat(struct statfs *buf, \\\n-\tSYS_STATFS                   = 396 // { int statfs(char *path, \\\n+\tSYS___MAC_GET_FD             = 386 // { int __mac_get_fd(int fd, struct mac *mac_p); }\n+\tSYS___MAC_GET_FILE           = 387 // { int __mac_get_file(const char *path_p, struct mac *mac_p); }\n+\tSYS___MAC_SET_FD             = 388 // { int __mac_set_fd(int fd, struct mac *mac_p); }\n+\tSYS___MAC_SET_FILE           = 389 // { int __mac_set_file(const char *path_p, struct mac *mac_p); }\n+\tSYS_KENV                     = 390 // { int kenv(int what, const char *name, char *value, int len); }\n+\tSYS_LCHFLAGS                 = 391 // { int lchflags(const char *path, u_long flags); }\n+\tSYS_UUIDGEN                  = 392 // { int uuidgen(struct uuid *store, int count); }\n+\tSYS_SENDFILE                 = 393 // { int sendfile(int fd, int s, off_t offset, size_t nbytes, struct sf_hdtr *hdtr, off_t *sbytes, int flags); }\n+\tSYS_MAC_SYSCALL              = 394 // { int mac_syscall(const char *policy, int call, void *arg); }\n+\tSYS_GETFSSTAT                = 395 // { int getfsstat(struct statfs *buf, long bufsize, int mode); }\n+\tSYS_STATFS                   = 396 // { int statfs(char *path, struct statfs *buf); }\n \tSYS_FSTATFS                  = 397 // { int fstatfs(int fd, struct statfs *buf); }\n-\tSYS_FHSTATFS                 = 398 // { int fhstatfs(const struct fhandle *u_fhp, \\\n+\tSYS_FHSTATFS                 = 398 // { int fhstatfs(const struct fhandle *u_fhp, struct statfs *buf); }\n \tSYS_KSEM_CLOSE               = 400 // { int ksem_close(semid_t id); }\n \tSYS_KSEM_POST                = 401 // { int ksem_post(semid_t id); }\n \tSYS_KSEM_WAIT                = 402 // { int ksem_wait(semid_t id); }\n \tSYS_KSEM_TRYWAIT             = 403 // { int ksem_trywait(semid_t id); }\n-\tSYS_KSEM_INIT                = 404 // { int ksem_init(semid_t *idp, \\\n-\tSYS_KSEM_OPEN                = 405 // { int ksem_open(semid_t *idp, \\\n+\tSYS_KSEM_INIT                = 404 // { int ksem_init(semid_t *idp, unsigned int value); }\n+\tSYS_KSEM_OPEN                = 405 // { int ksem_open(semid_t *idp, const char *name, int oflag, mode_t mode, unsigned int value); }\n \tSYS_KSEM_UNLINK              = 406 // { int ksem_unlink(const char *name); }\n \tSYS_KSEM_GETVALUE            = 407 // { int ksem_getvalue(semid_t id, int *val); }\n \tSYS_KSEM_DESTROY             = 408 // { int ksem_destroy(semid_t id); }\n-\tSYS___MAC_GET_PID            = 409 // { int __mac_get_pid(pid_t pid, \\\n-\tSYS___MAC_GET_LINK           = 410 // { int __mac_get_link(const char *path_p, \\\n-\tSYS___MAC_SET_LINK           = 411 // { int __mac_set_link(const char *path_p, \\\n-\tSYS_EXTATTR_SET_LINK         = 412 // { ssize_t extattr_set_link( \\\n-\tSYS_EXTATTR_GET_LINK         = 413 // { ssize_t extattr_get_link( \\\n-\tSYS_EXTATTR_DELETE_LINK      = 414 // { int extattr_delete_link( \\\n-\tSYS___MAC_EXECVE             = 415 // { int __mac_execve(char *fname, char **argv, \\\n-\tSYS_SIGACTION                = 416 // { int sigaction(int sig, \\\n-\tSYS_SIGRETURN                = 417 // { int sigreturn( \\\n+\tSYS___MAC_GET_PID            = 409 // { int __mac_get_pid(pid_t pid, struct mac *mac_p); }\n+\tSYS___MAC_GET_LINK           = 410 // { int __mac_get_link(const char *path_p, struct mac *mac_p); }\n+\tSYS___MAC_SET_LINK           = 411 // { int __mac_set_link(const char *path_p, struct mac *mac_p); }\n+\tSYS_EXTATTR_SET_LINK         = 412 // { ssize_t extattr_set_link( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n+\tSYS_EXTATTR_GET_LINK         = 413 // { ssize_t extattr_get_link( const char *path, int attrnamespace, const char *attrname, void *data, size_t nbytes); }\n+\tSYS_EXTATTR_DELETE_LINK      = 414 // { int extattr_delete_link( const char *path, int attrnamespace, const char *attrname); }\n+\tSYS___MAC_EXECVE             = 415 // { int __mac_execve(char *fname, char **argv, char **envv, struct mac *mac_p); }\n+\tSYS_SIGACTION                = 416 // { int sigaction(int sig, const struct sigaction *act, struct sigaction *oact); }\n+\tSYS_SIGRETURN                = 417 // { int sigreturn( const struct __ucontext *sigcntxp); }\n \tSYS_GETCONTEXT               = 421 // { int getcontext(struct __ucontext *ucp); }\n-\tSYS_SETCONTEXT               = 422 // { int setcontext( \\\n-\tSYS_SWAPCONTEXT              = 423 // { int swapcontext(struct __ucontext *oucp, \\\n+\tSYS_SETCONTEXT               = 422 // { int setcontext( const struct __ucontext *ucp); }\n+\tSYS_SWAPCONTEXT              = 423 // { int swapcontext(struct __ucontext *oucp, const struct __ucontext *ucp); }\n \tSYS_SWAPOFF                  = 424 // { int swapoff(const char *name); }\n-\tSYS___ACL_GET_LINK           = 425 // { int __acl_get_link(const char *path, \\\n-\tSYS___ACL_SET_LINK           = 426 // { int __acl_set_link(const char *path, \\\n-\tSYS___ACL_DELETE_LINK        = 427 // { int __acl_delete_link(const char *path, \\\n-\tSYS___ACL_ACLCHECK_LINK      = 428 // { int __acl_aclcheck_link(const char *path, \\\n-\tSYS_SIGWAIT                  = 429 // { int sigwait(const sigset_t *set, \\\n-\tSYS_THR_CREATE               = 430 // { int thr_create(ucontext_t *ctx, long *id, \\\n+\tSYS___ACL_GET_LINK           = 425 // { int __acl_get_link(const char *path, acl_type_t type, struct acl *aclp); }\n+\tSYS___ACL_SET_LINK           = 426 // { int __acl_set_link(const char *path, acl_type_t type, struct acl *aclp); }\n+\tSYS___ACL_DELETE_LINK        = 427 // { int __acl_delete_link(const char *path, acl_type_t type); }\n+\tSYS___ACL_ACLCHECK_LINK      = 428 // { int __acl_aclcheck_link(const char *path, acl_type_t type, struct acl *aclp); }\n+\tSYS_SIGWAIT                  = 429 // { int sigwait(const sigset_t *set, int *sig); }\n+\tSYS_THR_CREATE               = 430 // { int thr_create(ucontext_t *ctx, long *id, int flags); }\n \tSYS_THR_EXIT                 = 431 // { void thr_exit(long *state); }\n \tSYS_THR_SELF                 = 432 // { int thr_self(long *id); }\n \tSYS_THR_KILL                 = 433 // { int thr_kill(long id, int sig); }\n \tSYS_JAIL_ATTACH              = 436 // { int jail_attach(int jid); }\n-\tSYS_EXTATTR_LIST_FD          = 437 // { ssize_t extattr_list_fd(int fd, \\\n-\tSYS_EXTATTR_LIST_FILE        = 438 // { ssize_t extattr_list_file( \\\n-\tSYS_EXTATTR_LIST_LINK        = 439 // { ssize_t extattr_list_link( \\\n-\tSYS_KSEM_TIMEDWAIT           = 441 // { int ksem_timedwait(semid_t id, \\\n-\tSYS_THR_SUSPEND              = 442 // { int thr_suspend( \\\n+\tSYS_EXTATTR_LIST_FD          = 437 // { ssize_t extattr_list_fd(int fd, int attrnamespace, void *data, size_t nbytes); }\n+\tSYS_EXTATTR_LIST_FILE        = 438 // { ssize_t extattr_list_file( const char *path, int attrnamespace, void *data, size_t nbytes); }\n+\tSYS_EXTATTR_LIST_LINK        = 439 // { ssize_t extattr_list_link( const char *path, int attrnamespace, void *data, size_t nbytes); }\n+\tSYS_KSEM_TIMEDWAIT           = 441 // { int ksem_timedwait(semid_t id, const struct timespec *abstime); }\n+\tSYS_THR_SUSPEND              = 442 // { int thr_suspend( const struct timespec *timeout); }\n \tSYS_THR_WAKE                 = 443 // { int thr_wake(long id); }\n \tSYS_KLDUNLOADF               = 444 // { int kldunloadf(int fileid, int flags); }\n-\tSYS_AUDIT                    = 445 // { int audit(const void *record, \\\n-\tSYS_AUDITON                  = 446 // { int auditon(int cmd, void *data, \\\n+\tSYS_AUDIT                    = 445 // { int audit(const void *record, u_int length); }\n+\tSYS_AUDITON                  = 446 // { int auditon(int cmd, void *data, u_int length); }\n \tSYS_GETAUID                  = 447 // { int getauid(uid_t *auid); }\n \tSYS_SETAUID                  = 448 // { int setauid(uid_t *auid); }\n \tSYS_GETAUDIT                 = 449 // { int getaudit(struct auditinfo *auditinfo); }\n \tSYS_SETAUDIT                 = 450 // { int setaudit(struct auditinfo *auditinfo); }\n-\tSYS_GETAUDIT_ADDR            = 451 // { int getaudit_addr( \\\n-\tSYS_SETAUDIT_ADDR            = 452 // { int setaudit_addr( \\\n+\tSYS_GETAUDIT_ADDR            = 451 // { int getaudit_addr( struct auditinfo_addr *auditinfo_addr, u_int length); }\n+\tSYS_SETAUDIT_ADDR            = 452 // { int setaudit_addr( struct auditinfo_addr *auditinfo_addr, u_int length); }\n \tSYS_AUDITCTL                 = 453 // { int auditctl(char *path); }\n-\tSYS__UMTX_OP                 = 454 // { int _umtx_op(void *obj, int op, \\\n-\tSYS_THR_NEW                  = 455 // { int thr_new(struct thr_param *param, \\\n+\tSYS__UMTX_OP                 = 454 // { int _umtx_op(void *obj, int op, u_long val, void *uaddr1, void *uaddr2); }\n+\tSYS_THR_NEW                  = 455 // { int thr_new(struct thr_param *param, int param_size); }\n \tSYS_SIGQUEUE                 = 456 // { int sigqueue(pid_t pid, int signum, void *value); }\n-\tSYS_KMQ_OPEN                 = 457 // { int kmq_open(const char *path, int flags, \\\n-\tSYS_KMQ_SETATTR              = 458 // { int kmq_setattr(int mqd,\t\t\\\n-\tSYS_KMQ_TIMEDRECEIVE         = 459 // { int kmq_timedreceive(int mqd,\t\\\n-\tSYS_KMQ_TIMEDSEND            = 460 // { int kmq_timedsend(int mqd,\t\t\\\n-\tSYS_KMQ_NOTIFY               = 461 // { int kmq_notify(int mqd,\t\t\\\n+\tSYS_KMQ_OPEN                 = 457 // { int kmq_open(const char *path, int flags, mode_t mode, const struct mq_attr *attr); }\n+\tSYS_KMQ_SETATTR              = 458 // { int kmq_setattr(int mqd,\t\tconst struct mq_attr *attr,\t\tstruct mq_attr *oattr); }\n+\tSYS_KMQ_TIMEDRECEIVE         = 459 // { int kmq_timedreceive(int mqd,\tchar *msg_ptr, size_t msg_len,\tunsigned *msg_prio,\t\t\tconst struct timespec *abs_timeout); }\n+\tSYS_KMQ_TIMEDSEND            = 460 // { int kmq_timedsend(int mqd,\t\tconst char *msg_ptr, size_t msg_len,unsigned msg_prio,\t\t\tconst struct timespec *abs_timeout);}\n+\tSYS_KMQ_NOTIFY               = 461 // { int kmq_notify(int mqd,\t\tconst struct sigevent *sigev); }\n \tSYS_KMQ_UNLINK               = 462 // { int kmq_unlink(const char *path); }\n \tSYS_ABORT2                   = 463 // { int abort2(const char *why, int nargs, void **args); }\n \tSYS_THR_SET_NAME             = 464 // { int thr_set_name(long id, const char *name); }\n \tSYS_AIO_FSYNC                = 465 // { int aio_fsync(int op, struct aiocb *aiocbp); }\n-\tSYS_RTPRIO_THREAD            = 466 // { int rtprio_thread(int function, \\\n+\tSYS_RTPRIO_THREAD            = 466 // { int rtprio_thread(int function, lwpid_t lwpid, struct rtprio *rtp); }\n \tSYS_SCTP_PEELOFF             = 471 // { int sctp_peeloff(int sd, uint32_t name); }\n-\tSYS_SCTP_GENERIC_SENDMSG     = 472 // { int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, \\\n-\tSYS_SCTP_GENERIC_SENDMSG_IOV = 473 // { int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, \\\n-\tSYS_SCTP_GENERIC_RECVMSG     = 474 // { int sctp_generic_recvmsg(int sd, struct iovec *iov, int iovlen, \\\n-\tSYS_PREAD                    = 475 // { ssize_t pread(int fd, void *buf, \\\n-\tSYS_PWRITE                   = 476 // { ssize_t pwrite(int fd, const void *buf, \\\n-\tSYS_MMAP                     = 477 // { caddr_t mmap(caddr_t addr, size_t len, \\\n-\tSYS_LSEEK                    = 478 // { off_t lseek(int fd, off_t offset, \\\n+\tSYS_SCTP_GENERIC_SENDMSG     = 472 // { int sctp_generic_sendmsg(int sd, caddr_t msg, int mlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }\n+\tSYS_SCTP_GENERIC_SENDMSG_IOV = 473 // { int sctp_generic_sendmsg_iov(int sd, struct iovec *iov, int iovlen, caddr_t to, __socklen_t tolen, struct sctp_sndrcvinfo *sinfo, int flags); }\n+\tSYS_SCTP_GENERIC_RECVMSG     = 474 // { int sctp_generic_recvmsg(int sd, struct iovec *iov, int iovlen, struct sockaddr * from, __socklen_t *fromlenaddr, struct sctp_sndrcvinfo *sinfo, int *msg_flags); }\n+\tSYS_PREAD                    = 475 // { ssize_t pread(int fd, void *buf, size_t nbyte, off_t offset); }\n+\tSYS_PWRITE                   = 476 // { ssize_t pwrite(int fd, const void *buf, size_t nbyte, off_t offset); }\n+\tSYS_MMAP                     = 477 // { caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }\n+\tSYS_LSEEK                    = 478 // { off_t lseek(int fd, off_t offset, int whence); }\n \tSYS_TRUNCATE                 = 479 // { int truncate(char *path, off_t length); }\n \tSYS_FTRUNCATE                = 480 // { int ftruncate(int fd, off_t length); }\n \tSYS_THR_KILL2                = 481 // { int thr_kill2(pid_t pid, long id, int sig); }\n-\tSYS_SHM_OPEN                 = 482 // { int shm_open(const char *path, int flags, \\\n+\tSYS_SHM_OPEN                 = 482 // { int shm_open(const char *path, int flags, mode_t mode); }\n \tSYS_SHM_UNLINK               = 483 // { int shm_unlink(const char *path); }\n \tSYS_CPUSET                   = 484 // { int cpuset(cpusetid_t *setid); }\n-\tSYS_CPUSET_SETID             = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, \\\n-\tSYS_CPUSET_GETID             = 486 // { int cpuset_getid(cpulevel_t level, \\\n-\tSYS_CPUSET_GETAFFINITY       = 487 // { int cpuset_getaffinity(cpulevel_t level, \\\n-\tSYS_CPUSET_SETAFFINITY       = 488 // { int cpuset_setaffinity(cpulevel_t level, \\\n-\tSYS_FACCESSAT                = 489 // { int faccessat(int fd, char *path, int amode, \\\n-\tSYS_FCHMODAT                 = 490 // { int fchmodat(int fd, char *path, mode_t mode, \\\n-\tSYS_FCHOWNAT                 = 491 // { int fchownat(int fd, char *path, uid_t uid, \\\n-\tSYS_FEXECVE                  = 492 // { int fexecve(int fd, char **argv, \\\n-\tSYS_FSTATAT                  = 493 // { int fstatat(int fd, char *path, \\\n-\tSYS_FUTIMESAT                = 494 // { int futimesat(int fd, char *path, \\\n-\tSYS_LINKAT                   = 495 // { int linkat(int fd1, char *path1, int fd2, \\\n+\tSYS_CPUSET_SETID             = 485 // { int cpuset_setid(cpuwhich_t which, id_t id, cpusetid_t setid); }\n+\tSYS_CPUSET_GETID             = 486 // { int cpuset_getid(cpulevel_t level, cpuwhich_t which, id_t id, cpusetid_t *setid); }\n+\tSYS_CPUSET_GETAFFINITY       = 487 // { int cpuset_getaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, cpuset_t *mask); }\n+\tSYS_CPUSET_SETAFFINITY       = 488 // { int cpuset_setaffinity(cpulevel_t level, cpuwhich_t which, id_t id, size_t cpusetsize, const cpuset_t *mask); }\n+\tSYS_FACCESSAT                = 489 // { int faccessat(int fd, char *path, int amode, int flag); }\n+\tSYS_FCHMODAT                 = 490 // { int fchmodat(int fd, char *path, mode_t mode, int flag); }\n+\tSYS_FCHOWNAT                 = 491 // { int fchownat(int fd, char *path, uid_t uid, gid_t gid, int flag); }\n+\tSYS_FEXECVE                  = 492 // { int fexecve(int fd, char **argv, char **envv); }\n+\tSYS_FSTATAT                  = 493 // { int fstatat(int fd, char *path, struct stat *buf, int flag); }\n+\tSYS_FUTIMESAT                = 494 // { int futimesat(int fd, char *path, struct timeval *times); }\n+\tSYS_LINKAT                   = 495 // { int linkat(int fd1, char *path1, int fd2, char *path2, int flag); }\n \tSYS_MKDIRAT                  = 496 // { int mkdirat(int fd, char *path, mode_t mode); }\n \tSYS_MKFIFOAT                 = 497 // { int mkfifoat(int fd, char *path, mode_t mode); }\n-\tSYS_MKNODAT                  = 498 // { int mknodat(int fd, char *path, mode_t mode, \\\n-\tSYS_OPENAT                   = 499 // { int openat(int fd, char *path, int flag, \\\n-\tSYS_READLINKAT               = 500 // { int readlinkat(int fd, char *path, char *buf, \\\n-\tSYS_RENAMEAT                 = 501 // { int renameat(int oldfd, char *old, int newfd, \\\n-\tSYS_SYMLINKAT                = 502 // { int symlinkat(char *path1, int fd, \\\n+\tSYS_MKNODAT                  = 498 // { int mknodat(int fd, char *path, mode_t mode, dev_t dev); }\n+\tSYS_OPENAT                   = 499 // { int openat(int fd, char *path, int flag, mode_t mode); }\n+\tSYS_READLINKAT               = 500 // { int readlinkat(int fd, char *path, char *buf, size_t bufsize); }\n+\tSYS_RENAMEAT                 = 501 // { int renameat(int oldfd, char *old, int newfd, char *new); }\n+\tSYS_SYMLINKAT                = 502 // { int symlinkat(char *path1, int fd, char *path2); }\n \tSYS_UNLINKAT                 = 503 // { int unlinkat(int fd, char *path, int flag); }\n \tSYS_POSIX_OPENPT             = 504 // { int posix_openpt(int flags); }\n \tSYS_GSSD_SYSCALL             = 505 // { int gssd_syscall(char *path); }\n-\tSYS_JAIL_GET                 = 506 // { int jail_get(struct iovec *iovp, \\\n-\tSYS_JAIL_SET                 = 507 // { int jail_set(struct iovec *iovp, \\\n+\tSYS_JAIL_GET                 = 506 // { int jail_get(struct iovec *iovp, unsigned int iovcnt, int flags); }\n+\tSYS_JAIL_SET                 = 507 // { int jail_set(struct iovec *iovp, unsigned int iovcnt, int flags); }\n \tSYS_JAIL_REMOVE              = 508 // { int jail_remove(int jid); }\n \tSYS_CLOSEFROM                = 509 // { int closefrom(int lowfd); }\n-\tSYS___SEMCTL                 = 510 // { int __semctl(int semid, int semnum, \\\n-\tSYS_MSGCTL                   = 511 // { int msgctl(int msqid, int cmd, \\\n-\tSYS_SHMCTL                   = 512 // { int shmctl(int shmid, int cmd, \\\n+\tSYS___SEMCTL                 = 510 // { int __semctl(int semid, int semnum, int cmd, union semun *arg); }\n+\tSYS_MSGCTL                   = 511 // { int msgctl(int msqid, int cmd, struct msqid_ds *buf); }\n+\tSYS_SHMCTL                   = 512 // { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }\n \tSYS_LPATHCONF                = 513 // { int lpathconf(char *path, int name); }\n-\tSYS___CAP_RIGHTS_GET         = 515 // { int __cap_rights_get(int version, \\\n+\tSYS___CAP_RIGHTS_GET         = 515 // { int __cap_rights_get(int version, int fd, cap_rights_t *rightsp); }\n \tSYS_CAP_ENTER                = 516 // { int cap_enter(void); }\n \tSYS_CAP_GETMODE              = 517 // { int cap_getmode(u_int *modep); }\n \tSYS_PDFORK                   = 518 // { int pdfork(int *fdp, int flags); }\n \tSYS_PDKILL                   = 519 // { int pdkill(int fd, int signum); }\n \tSYS_PDGETPID                 = 520 // { int pdgetpid(int fd, pid_t *pidp); }\n-\tSYS_PSELECT                  = 522 // { int pselect(int nd, fd_set *in, \\\n-\tSYS_GETLOGINCLASS            = 523 // { int getloginclass(char *namebuf, \\\n+\tSYS_PSELECT                  = 522 // { int pselect(int nd, fd_set *in, fd_set *ou, fd_set *ex, const struct timespec *ts, const sigset_t *sm); }\n+\tSYS_GETLOGINCLASS            = 523 // { int getloginclass(char *namebuf, size_t namelen); }\n \tSYS_SETLOGINCLASS            = 524 // { int setloginclass(const char *namebuf); }\n-\tSYS_RCTL_GET_RACCT           = 525 // { int rctl_get_racct(const void *inbufp, \\\n-\tSYS_RCTL_GET_RULES           = 526 // { int rctl_get_rules(const void *inbufp, \\\n-\tSYS_RCTL_GET_LIMITS          = 527 // { int rctl_get_limits(const void *inbufp, \\\n-\tSYS_RCTL_ADD_RULE            = 528 // { int rctl_add_rule(const void *inbufp, \\\n-\tSYS_RCTL_REMOVE_RULE         = 529 // { int rctl_remove_rule(const void *inbufp, \\\n-\tSYS_POSIX_FALLOCATE          = 530 // { int posix_fallocate(int fd, \\\n-\tSYS_POSIX_FADVISE            = 531 // { int posix_fadvise(int fd, off_t offset, \\\n-\tSYS_WAIT6                    = 532 // { int wait6(idtype_t idtype, id_t id, \\\n-\tSYS_CAP_RIGHTS_LIMIT         = 533 // { int cap_rights_limit(int fd, \\\n-\tSYS_CAP_IOCTLS_LIMIT         = 534 // { int cap_ioctls_limit(int fd, \\\n-\tSYS_CAP_IOCTLS_GET           = 535 // { ssize_t cap_ioctls_get(int fd, \\\n-\tSYS_CAP_FCNTLS_LIMIT         = 536 // { int cap_fcntls_limit(int fd, \\\n-\tSYS_CAP_FCNTLS_GET           = 537 // { int cap_fcntls_get(int fd, \\\n-\tSYS_BINDAT                   = 538 // { int bindat(int fd, int s, caddr_t name, \\\n-\tSYS_CONNECTAT                = 539 // { int connectat(int fd, int s, caddr_t name, \\\n-\tSYS_CHFLAGSAT                = 540 // { int chflagsat(int fd, const char *path, \\\n-\tSYS_ACCEPT4                  = 541 // { int accept4(int s, \\\n+\tSYS_RCTL_GET_RACCT           = 525 // { int rctl_get_racct(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }\n+\tSYS_RCTL_GET_RULES           = 526 // { int rctl_get_rules(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }\n+\tSYS_RCTL_GET_LIMITS          = 527 // { int rctl_get_limits(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }\n+\tSYS_RCTL_ADD_RULE            = 528 // { int rctl_add_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }\n+\tSYS_RCTL_REMOVE_RULE         = 529 // { int rctl_remove_rule(const void *inbufp, size_t inbuflen, void *outbufp, size_t outbuflen); }\n+\tSYS_POSIX_FALLOCATE          = 530 // { int posix_fallocate(int fd, off_t offset, off_t len); }\n+\tSYS_POSIX_FADVISE            = 531 // { int posix_fadvise(int fd, off_t offset, off_t len, int advice); }\n+\tSYS_WAIT6                    = 532 // { int wait6(idtype_t idtype, id_t id, int *status, int options, struct __wrusage *wrusage, siginfo_t *info); }\n+\tSYS_CAP_RIGHTS_LIMIT         = 533 // { int cap_rights_limit(int fd, cap_rights_t *rightsp); }\n+\tSYS_CAP_IOCTLS_LIMIT         = 534 // { int cap_ioctls_limit(int fd, const u_long *cmds, size_t ncmds); }\n+\tSYS_CAP_IOCTLS_GET           = 535 // { ssize_t cap_ioctls_get(int fd, u_long *cmds, size_t maxcmds); }\n+\tSYS_CAP_FCNTLS_LIMIT         = 536 // { int cap_fcntls_limit(int fd, uint32_t fcntlrights); }\n+\tSYS_CAP_FCNTLS_GET           = 537 // { int cap_fcntls_get(int fd, uint32_t *fcntlrightsp); }\n+\tSYS_BINDAT                   = 538 // { int bindat(int fd, int s, caddr_t name, int namelen); }\n+\tSYS_CONNECTAT                = 539 // { int connectat(int fd, int s, caddr_t name, int namelen); }\n+\tSYS_CHFLAGSAT                = 540 // { int chflagsat(int fd, const char *path, u_long flags, int atflag); }\n+\tSYS_ACCEPT4                  = 541 // { int accept4(int s, struct sockaddr * __restrict name, __socklen_t * __restrict anamelen, int flags); }\n \tSYS_PIPE2                    = 542 // { int pipe2(int *fildes, int flags); }\n \tSYS_AIO_MLOCK                = 543 // { int aio_mlock(struct aiocb *aiocbp); }\n-\tSYS_PROCCTL                  = 544 // { int procctl(idtype_t idtype, id_t id, \\\n-\tSYS_PPOLL                    = 545 // { int ppoll(struct pollfd *fds, u_int nfds, \\\n-\tSYS_FUTIMENS                 = 546 // { int futimens(int fd, \\\n-\tSYS_UTIMENSAT                = 547 // { int utimensat(int fd, \\\n-\tSYS_NUMA_GETAFFINITY         = 548 // { int numa_getaffinity(cpuwhich_t which, \\\n-\tSYS_NUMA_SETAFFINITY         = 549 // { int numa_setaffinity(cpuwhich_t which, \\\n+\tSYS_PROCCTL                  = 544 // { int procctl(idtype_t idtype, id_t id, int com, void *data); }\n+\tSYS_PPOLL                    = 545 // { int ppoll(struct pollfd *fds, u_int nfds, const struct timespec *ts, const sigset_t *set); }\n+\tSYS_FUTIMENS                 = 546 // { int futimens(int fd, struct timespec *times); }\n+\tSYS_UTIMENSAT                = 547 // { int utimensat(int fd, char *path, struct timespec *times, int flag); }\n+\tSYS_NUMA_GETAFFINITY         = 548 // { int numa_getaffinity(cpuwhich_t which, id_t id, struct vm_domain_policy_entry *policy); }\n+\tSYS_NUMA_SETAFFINITY         = 549 // { int numa_setaffinity(cpuwhich_t which, id_t id, const struct vm_domain_policy_entry *policy); }\n \tSYS_FDATASYNC                = 550 // { int fdatasync(int fd); }\n )"
    },
    {
      "sha": "7312e95ff424d700de0e3058ef35d61c4b7faebe",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_386.go",
      "status": "modified",
      "additions": 100,
      "deletions": 3,
      "changes": 103,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_386.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_386.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_386.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -324,11 +324,108 @@ const (\n )\n \n const (\n-\tPTRACE_TRACEME = 0x0\n-\tPTRACE_CONT    = 0x7\n-\tPTRACE_KILL    = 0x8\n+\tPTRACE_ATTACH     = 0xa\n+\tPTRACE_CONT       = 0x7\n+\tPTRACE_DETACH     = 0xb\n+\tPTRACE_GETFPREGS  = 0x23\n+\tPTRACE_GETFSBASE  = 0x47\n+\tPTRACE_GETLWPLIST = 0xf\n+\tPTRACE_GETNUMLWPS = 0xe\n+\tPTRACE_GETREGS    = 0x21\n+\tPTRACE_GETXSTATE  = 0x45\n+\tPTRACE_IO         = 0xc\n+\tPTRACE_KILL       = 0x8\n+\tPTRACE_LWPEVENTS  = 0x18\n+\tPTRACE_LWPINFO    = 0xd\n+\tPTRACE_SETFPREGS  = 0x24\n+\tPTRACE_SETREGS    = 0x22\n+\tPTRACE_SINGLESTEP = 0x9\n+\tPTRACE_TRACEME    = 0x0\n )\n \n+const (\n+\tPIOD_READ_D  = 0x1\n+\tPIOD_WRITE_D = 0x2\n+\tPIOD_READ_I  = 0x3\n+\tPIOD_WRITE_I = 0x4\n+)\n+\n+const (\n+\tPL_FLAG_BORN   = 0x100\n+\tPL_FLAG_EXITED = 0x200\n+\tPL_FLAG_SI     = 0x20\n+)\n+\n+const (\n+\tTRAP_BRKPT = 0x1\n+\tTRAP_TRACE = 0x2\n+)\n+\n+type PtraceLwpInfoStruct struct {\n+\tLwpid        int32\n+\tEvent        int32\n+\tFlags        int32\n+\tSigmask      Sigset_t\n+\tSiglist      Sigset_t\n+\tSiginfo      __Siginfo\n+\tTdname       [20]int8\n+\tChild_pid    int32\n+\tSyscall_code uint32\n+\tSyscall_narg uint32\n+}\n+\n+type __Siginfo struct {\n+\tSigno    int32\n+\tErrno    int32\n+\tCode     int32\n+\tPid      int32\n+\tUid      uint32\n+\tStatus   int32\n+\tAddr     *byte\n+\tValue    [4]byte\n+\tX_reason [32]byte\n+}\n+\n+type Sigset_t struct {\n+\tVal [4]uint32\n+}\n+\n+type Reg struct {\n+\tFs     uint32\n+\tEs     uint32\n+\tDs     uint32\n+\tEdi    uint32\n+\tEsi    uint32\n+\tEbp    uint32\n+\tIsp    uint32\n+\tEbx    uint32\n+\tEdx    uint32\n+\tEcx    uint32\n+\tEax    uint32\n+\tTrapno uint32\n+\tErr    uint32\n+\tEip    uint32\n+\tCs     uint32\n+\tEflags uint32\n+\tEsp    uint32\n+\tSs     uint32\n+\tGs     uint32\n+}\n+\n+type FpReg struct {\n+\tEnv   [7]uint32\n+\tAcc   [8][10]uint8\n+\tEx_sw uint32\n+\tPad   [64]uint8\n+}\n+\n+type PtraceIoDesc struct {\n+\tOp   int32\n+\tOffs *byte\n+\tAddr *byte\n+\tLen  uint\n+}\n+\n type Kevent_t struct {\n \tIdent  uint32\n \tFilter int16"
    },
    {
      "sha": "29ba2f5bf74adb9e87af75745f8ec79f84786170",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_amd64.go",
      "status": "modified",
      "additions": 107,
      "deletions": 3,
      "changes": 110,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_amd64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_amd64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -322,11 +322,115 @@ const (\n )\n \n const (\n-\tPTRACE_TRACEME = 0x0\n-\tPTRACE_CONT    = 0x7\n-\tPTRACE_KILL    = 0x8\n+\tPTRACE_ATTACH     = 0xa\n+\tPTRACE_CONT       = 0x7\n+\tPTRACE_DETACH     = 0xb\n+\tPTRACE_GETFPREGS  = 0x23\n+\tPTRACE_GETFSBASE  = 0x47\n+\tPTRACE_GETLWPLIST = 0xf\n+\tPTRACE_GETNUMLWPS = 0xe\n+\tPTRACE_GETREGS    = 0x21\n+\tPTRACE_GETXSTATE  = 0x45\n+\tPTRACE_IO         = 0xc\n+\tPTRACE_KILL       = 0x8\n+\tPTRACE_LWPEVENTS  = 0x18\n+\tPTRACE_LWPINFO    = 0xd\n+\tPTRACE_SETFPREGS  = 0x24\n+\tPTRACE_SETREGS    = 0x22\n+\tPTRACE_SINGLESTEP = 0x9\n+\tPTRACE_TRACEME    = 0x0\n )\n \n+const (\n+\tPIOD_READ_D  = 0x1\n+\tPIOD_WRITE_D = 0x2\n+\tPIOD_READ_I  = 0x3\n+\tPIOD_WRITE_I = 0x4\n+)\n+\n+const (\n+\tPL_FLAG_BORN   = 0x100\n+\tPL_FLAG_EXITED = 0x200\n+\tPL_FLAG_SI     = 0x20\n+)\n+\n+const (\n+\tTRAP_BRKPT = 0x1\n+\tTRAP_TRACE = 0x2\n+)\n+\n+type PtraceLwpInfoStruct struct {\n+\tLwpid        int32\n+\tEvent        int32\n+\tFlags        int32\n+\tSigmask      Sigset_t\n+\tSiglist      Sigset_t\n+\tSiginfo      __Siginfo\n+\tTdname       [20]int8\n+\tChild_pid    int32\n+\tSyscall_code uint32\n+\tSyscall_narg uint32\n+}\n+\n+type __Siginfo struct {\n+\tSigno  int32\n+\tErrno  int32\n+\tCode   int32\n+\tPid    int32\n+\tUid    uint32\n+\tStatus int32\n+\tAddr   *byte\n+\tValue  [8]byte\n+\t_      [40]byte\n+}\n+\n+type Sigset_t struct {\n+\tVal [4]uint32\n+}\n+\n+type Reg struct {\n+\tR15    int64\n+\tR14    int64\n+\tR13    int64\n+\tR12    int64\n+\tR11    int64\n+\tR10    int64\n+\tR9     int64\n+\tR8     int64\n+\tRdi    int64\n+\tRsi    int64\n+\tRbp    int64\n+\tRbx    int64\n+\tRdx    int64\n+\tRcx    int64\n+\tRax    int64\n+\tTrapno uint32\n+\tFs     uint16\n+\tGs     uint16\n+\tErr    uint32\n+\tEs     uint16\n+\tDs     uint16\n+\tRip    int64\n+\tCs     int64\n+\tRflags int64\n+\tRsp    int64\n+\tSs     int64\n+}\n+\n+type FpReg struct {\n+\tEnv   [4]uint64\n+\tAcc   [8][16]uint8\n+\tXacc  [16][16]uint8\n+\tSpare [12]uint64\n+}\n+\n+type PtraceIoDesc struct {\n+\tOp   int32\n+\tOffs *byte\n+\tAddr *byte\n+\tLen  uint\n+}\n+\n type Kevent_t struct {\n \tIdent  uint64\n \tFilter int16"
    },
    {
      "sha": "b4090ef3115d1773b7db96bed787cd28e21e58b9",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_arm.go",
      "status": "modified",
      "additions": 84,
      "deletions": 3,
      "changes": 87,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_arm.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_arm.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -322,11 +322,92 @@ const (\n )\n \n const (\n-\tPTRACE_TRACEME = 0x0\n-\tPTRACE_CONT    = 0x7\n-\tPTRACE_KILL    = 0x8\n+\tPTRACE_ATTACH     = 0xa\n+\tPTRACE_CONT       = 0x7\n+\tPTRACE_DETACH     = 0xb\n+\tPTRACE_GETFPREGS  = 0x23\n+\tPTRACE_GETFSBASE  = 0x47\n+\tPTRACE_GETLWPLIST = 0xf\n+\tPTRACE_GETNUMLWPS = 0xe\n+\tPTRACE_GETREGS    = 0x21\n+\tPTRACE_GETXSTATE  = 0x45\n+\tPTRACE_IO         = 0xc\n+\tPTRACE_KILL       = 0x8\n+\tPTRACE_LWPEVENTS  = 0x18\n+\tPTRACE_LWPINFO    = 0xd\n+\tPTRACE_SETFPREGS  = 0x24\n+\tPTRACE_SETREGS    = 0x22\n+\tPTRACE_SINGLESTEP = 0x9\n+\tPTRACE_TRACEME    = 0x0\n )\n \n+const (\n+\tPIOD_READ_D  = 0x1\n+\tPIOD_WRITE_D = 0x2\n+\tPIOD_READ_I  = 0x3\n+\tPIOD_WRITE_I = 0x4\n+)\n+\n+const (\n+\tPL_FLAG_BORN   = 0x100\n+\tPL_FLAG_EXITED = 0x200\n+\tPL_FLAG_SI     = 0x20\n+)\n+\n+const (\n+\tTRAP_BRKPT = 0x1\n+\tTRAP_TRACE = 0x2\n+)\n+\n+type PtraceLwpInfoStruct struct {\n+\tLwpid        int32\n+\tEvent        int32\n+\tFlags        int32\n+\tSigmask      Sigset_t\n+\tSiglist      Sigset_t\n+\tSiginfo      __Siginfo\n+\tTdname       [20]int8\n+\tChild_pid    int32\n+\tSyscall_code uint32\n+\tSyscall_narg uint32\n+}\n+\n+type __Siginfo struct {\n+\tSigno    int32\n+\tErrno    int32\n+\tCode     int32\n+\tPid      int32\n+\tUid      uint32\n+\tStatus   int32\n+\tAddr     *byte\n+\tValue    [4]byte\n+\tX_reason [32]byte\n+}\n+\n+type Sigset_t struct {\n+\tVal [4]uint32\n+}\n+\n+type Reg struct {\n+\tR      [13]uint32\n+\tR_sp   uint32\n+\tR_lr   uint32\n+\tR_pc   uint32\n+\tR_cpsr uint32\n+}\n+\n+type FpReg struct {\n+\tFpr_fpsr uint32\n+\tFpr      [8][3]uint32\n+}\n+\n+type PtraceIoDesc struct {\n+\tOp   int32\n+\tOffs *byte\n+\tAddr *byte\n+\tLen  uint\n+}\n+\n type Kevent_t struct {\n \tIdent  uint32\n \tFilter int16"
    },
    {
      "sha": "1542a87734ad7c6da07e19d4609faf4115e3b0a0",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_arm64.go",
      "status": "modified",
      "additions": 85,
      "deletions": 3,
      "changes": 88,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_arm64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_freebsd_arm64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -322,11 +322,93 @@ const (\n )\n \n const (\n-\tPTRACE_TRACEME = 0x0\n-\tPTRACE_CONT    = 0x7\n-\tPTRACE_KILL    = 0x8\n+\tPTRACE_ATTACH     = 0xa\n+\tPTRACE_CONT       = 0x7\n+\tPTRACE_DETACH     = 0xb\n+\tPTRACE_GETFPREGS  = 0x23\n+\tPTRACE_GETFSBASE  = 0x47\n+\tPTRACE_GETLWPLIST = 0xf\n+\tPTRACE_GETNUMLWPS = 0xe\n+\tPTRACE_GETREGS    = 0x21\n+\tPTRACE_GETXSTATE  = 0x45\n+\tPTRACE_IO         = 0xc\n+\tPTRACE_KILL       = 0x8\n+\tPTRACE_LWPEVENTS  = 0x18\n+\tPTRACE_LWPINFO    = 0xd\n+\tPTRACE_SETFPREGS  = 0x24\n+\tPTRACE_SETREGS    = 0x22\n+\tPTRACE_SINGLESTEP = 0x9\n+\tPTRACE_TRACEME    = 0x0\n )\n \n+const (\n+\tPIOD_READ_D  = 0x1\n+\tPIOD_WRITE_D = 0x2\n+\tPIOD_READ_I  = 0x3\n+\tPIOD_WRITE_I = 0x4\n+)\n+\n+const (\n+\tPL_FLAG_BORN   = 0x100\n+\tPL_FLAG_EXITED = 0x200\n+\tPL_FLAG_SI     = 0x20\n+)\n+\n+const (\n+\tTRAP_BRKPT = 0x1\n+\tTRAP_TRACE = 0x2\n+)\n+\n+type PtraceLwpInfoStruct struct {\n+\tLwpid        int32\n+\tEvent        int32\n+\tFlags        int32\n+\tSigmask      Sigset_t\n+\tSiglist      Sigset_t\n+\tSiginfo      __Siginfo\n+\tTdname       [20]int8\n+\tChild_pid    int32\n+\tSyscall_code uint32\n+\tSyscall_narg uint32\n+}\n+\n+type __Siginfo struct {\n+\tSigno    int32\n+\tErrno    int32\n+\tCode     int32\n+\tPid      int32\n+\tUid      uint32\n+\tStatus   int32\n+\tAddr     *byte\n+\tValue    [8]byte\n+\tX_reason [40]byte\n+}\n+\n+type Sigset_t struct {\n+\tVal [4]uint32\n+}\n+\n+type Reg struct {\n+\tX    [30]uint64\n+\tLr   uint64\n+\tSp   uint64\n+\tElr  uint64\n+\tSpsr uint32\n+}\n+\n+type FpReg struct {\n+\tFp_q  [32]uint128\n+\tFp_sr uint32\n+\tFp_cr uint32\n+}\n+\n+type PtraceIoDesc struct {\n+\tOp   int32\n+\tOffs *byte\n+\tAddr *byte\n+\tLen  uint\n+}\n+\n type Kevent_t struct {\n \tIdent  uint64\n \tFilter int16"
    },
    {
      "sha": "5492b9666fca84b0bfa303e3916b2b17e57acc38",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_386.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_386.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_386.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_386.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2467,3 +2467,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "caf33b2c5fd06190a3648527b146a5611e6f3df8",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_amd64.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_amd64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_amd64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2480,3 +2480,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "93aec7e22973fb8878d9a5c56934df2d16d2ee0a",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_arm.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_arm.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_arm.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2458,3 +2458,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "0a038436d4c4c9e53521b4e8a940fd0bd01d2f67",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_arm64.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_arm64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_arm64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2459,3 +2459,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "2de0e58009e1901df075fc25057df192199474f2",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2464,3 +2464,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "3735eb42e9dd5b8d61f28cda73c4cfee1f4683d2",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips64.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2461,3 +2461,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "073c29939e0f17d2f16ffd124bf689ddb2c3907c",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mips64le.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2461,3 +2461,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "58d09f75e50faa323849d631f7aa99e58f21cd27",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_mipsle.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mipsle.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mipsle.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_mipsle.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2464,3 +2464,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "3f1e62e035f849349e864b3e34454d8d64ceb0ec",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc64.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2469,3 +2469,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "e67be11ebe20373c32016366d9082463b6a5ccd2",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc64le.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc64le.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc64le.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_ppc64le.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2469,3 +2469,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "f44f29403922d581f3a1e8d9ec3cbee97c0e60fc",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_riscv64.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_riscv64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_riscv64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_riscv64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2486,3 +2486,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "90bf5dcc7c49dfa4afd4a1e013a6feaf7787a582",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_s390x.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_s390x.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_s390x.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_s390x.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2483,3 +2483,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "4f054dcbbe9c472a460aa4e8bcdbcb1c2b678017",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_linux_sparc64.go",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_sparc64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_linux_sparc64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_linux_sparc64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -2464,3 +2464,20 @@ const (\n \tBPF_FD_TYPE_UPROBE                  = 0x4\n \tBPF_FD_TYPE_URETPROBE               = 0x5\n )\n+\n+type CapUserHeader struct {\n+\tVersion uint32\n+\tPid     int32\n+}\n+\n+type CapUserData struct {\n+\tEffective   uint32\n+\tPermitted   uint32\n+\tInheritable uint32\n+}\n+\n+const (\n+\tLINUX_CAPABILITY_VERSION_1 = 0x19980330\n+\tLINUX_CAPABILITY_VERSION_2 = 0x20071026\n+\tLINUX_CAPABILITY_VERSION_3 = 0x20080522\n+)"
    },
    {
      "sha": "86736ab6e7f881f338885edcd903e81086ba7282",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_386.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_386.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_386.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_386.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -411,6 +411,7 @@ type Ptmget struct {\n \n const (\n \tAT_FDCWD            = -0x64\n+\tAT_SYMLINK_FOLLOW   = 0x400\n \tAT_SYMLINK_NOFOLLOW = 0x200\n )\n "
    },
    {
      "sha": "3427811f98975c1991cd732f7d8b3b1b9b583921",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_amd64.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_amd64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_amd64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -418,6 +418,7 @@ type Ptmget struct {\n \n const (\n \tAT_FDCWD            = -0x64\n+\tAT_SYMLINK_FOLLOW   = 0x400\n \tAT_SYMLINK_NOFOLLOW = 0x200\n )\n "
    },
    {
      "sha": "399f37a4341c3b8228c5dd0dac438a3bc862b2ac",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_arm.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_arm.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_arm.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -416,6 +416,7 @@ type Ptmget struct {\n \n const (\n \tAT_FDCWD            = -0x64\n+\tAT_SYMLINK_FOLLOW   = 0x400\n \tAT_SYMLINK_NOFOLLOW = 0x200\n )\n "
    },
    {
      "sha": "32f0c15d98e76d458405b46b0c6b1243abcf4510",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_arm64.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_arm64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_netbsd_arm64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -418,6 +418,7 @@ type Ptmget struct {\n \n const (\n \tAT_FDCWD            = -0x64\n+\tAT_SYMLINK_FOLLOW   = 0x400\n \tAT_SYMLINK_NOFOLLOW = 0x200\n )\n "
    },
    {
      "sha": "61ea0019a2981ca8a58ec8ebaa4501a6ae77433f",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_386.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_386.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_386.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_386.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -436,6 +436,7 @@ type Winsize struct {\n \n const (\n \tAT_FDCWD            = -0x64\n+\tAT_SYMLINK_FOLLOW   = 0x4\n \tAT_SYMLINK_NOFOLLOW = 0x2\n )\n "
    },
    {
      "sha": "87a493f68fd3c799f2c904213f20fdb6f2945cd8",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_amd64.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_amd64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_amd64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_amd64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -436,6 +436,7 @@ type Winsize struct {\n \n const (\n \tAT_FDCWD            = -0x64\n+\tAT_SYMLINK_FOLLOW   = 0x4\n \tAT_SYMLINK_NOFOLLOW = 0x2\n )\n "
    },
    {
      "sha": "d80836efaba392ea04bbde6639388cb83bdbf811",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_arm.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_arm.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_arm.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_arm.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -437,6 +437,7 @@ type Winsize struct {\n \n const (\n \tAT_FDCWD            = -0x64\n+\tAT_SYMLINK_FOLLOW   = 0x4\n \tAT_SYMLINK_NOFOLLOW = 0x2\n )\n "
    },
    {
      "sha": "4e158746f115912b041a475a33fd637bcc0056da",
      "filename": "backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_arm64.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_arm64.go",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_arm64.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/golang.org/x/sys/unix/ztypes_openbsd_arm64.go?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -430,6 +430,7 @@ type Winsize struct {\n \n const (\n \tAT_FDCWD            = -0x64\n+\tAT_SYMLINK_FOLLOW   = 0x4\n \tAT_SYMLINK_NOFOLLOW = 0x2\n )\n "
    },
    {
      "sha": "1776b63221ce06870bea577aff6871ec23d1c6b8",
      "filename": "backend/vendor/modules.txt",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark/blob/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/modules.txt",
      "raw_url": "https://github.com/umputun/remark/raw/af67ec0fc8caee132491a22a6ce0c136abcee3d6/backend/vendor/modules.txt",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/vendor/modules.txt?ref=af67ec0fc8caee132491a22a6ce0c136abcee3d6",
      "patch": "@@ -89,13 +89,13 @@ github.com/stretchr/objx\n github.com/stretchr/testify/mock\n github.com/stretchr/testify/assert\n github.com/stretchr/testify/require\n-# golang.org/x/crypto v0.0.0-20190530122614-20be4c3c3ed5\n+# golang.org/x/crypto v0.0.0-20190701094942-4def268fd1a4\n golang.org/x/crypto/acme/autocert\n golang.org/x/crypto/acme\n # golang.org/x/image v0.0.0-20190523035834-f03afa92d3ff\n golang.org/x/image/draw\n golang.org/x/image/math/f64\n-# golang.org/x/net v0.0.0-20190603091049-60506f45cf65\n+# golang.org/x/net v0.0.0-20190628185345-da137c7871d7\n golang.org/x/net/html\n golang.org/x/net/idna\n golang.org/x/net/html/atom\n@@ -110,7 +110,7 @@ golang.org/x/oauth2/yandex\n golang.org/x/oauth2/internal\n golang.org/x/oauth2/jws\n golang.org/x/oauth2/jwt\n-# golang.org/x/sys v0.0.0-20190602015325-4c4f7f33c9ed\n+# golang.org/x/sys v0.0.0-20190626221950-04f50cda93cb\n golang.org/x/sys/unix\n # golang.org/x/text v0.3.2\n golang.org/x/text/secure/bidirule\n@@ -130,5 +130,5 @@ google.golang.org/appengine/internal/base\n google.golang.org/appengine/internal/datastore\n google.golang.org/appengine/internal/log\n google.golang.org/appengine/internal/remote_api\n-# gopkg.in/russross/blackfriday.v2 v2.0.0-00010101000000-000000000000 => github.com/russross/blackfriday/v2 v2.0.1\n+# gopkg.in/russross/blackfriday.v2 v2.0.1 => github.com/russross/blackfriday/v2 v2.0.1\n gopkg.in/russross/blackfriday.v2"
    }
  ]
}
