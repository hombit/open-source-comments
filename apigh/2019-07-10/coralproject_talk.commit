{
  "sha": "340052cdf034cc2d6b8017391db7ac76c439254b",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6MzQwMDUyY2RmMDM0Y2MyZDZiODAxNzM5MWRiN2FjNzZjNDM5MjU0Yg==",
  "commit": {
    "author": {
      "name": "immber",
      "email": "jessiekrushing@gmail.com",
      "date": "2019-07-10T16:41:52Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-07-10T16:41:52Z"
    },
    "message": "DOCS | Add `asset_url` note to CMS integration & Update FB config  (#2393)\n\n* added note RE passing asset_url, and updated fb configs\r\n\r\n* fix: syntax tweaks\r\n\r\n* feat: small tweaks to embedding",
    "tree": {
      "sha": "f3136c449c3286585e4e9a3fed16afa07bc250af",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/f3136c449c3286585e4e9a3fed16afa07bc250af"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/340052cdf034cc2d6b8017391db7ac76c439254b",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdJhVQCRBK7hj4Ov3rIwAAdHIIAFJbQIjuQEpoZULUZzlxRF30\nNETw8cxtaVbo+cKz1ga7hruCVqS4N+UBGWpt5bzLT+G42uYsOv6V5Dv8tLYBcc7Q\nuP4+X/2F1E/kvGgxA+1Z3pqdUZOxRGN++IsYd11aCtBdaAK6GeFroJMjj1QYrpMp\nszbtIqTsO1PG1r9W0Jsl0a+OM5GFDQE77Mw1LXB5cD+9Ks9ebdj+XC0sddh194DN\nvrsABQI3vsUrMjtpKI2iP0T8IX8j+JRgrMWhTVx+9qJHpsbXyKUJ2yZ90PGN1sLw\nQfaQMLq9fTaeL9vOwD+gBgVIrm5MyvgWT466bezigOVBVKB6C4/JqAFhWy6Fl/c=\n=7Ro1\n-----END PGP SIGNATURE-----\n",
      "payload": "tree f3136c449c3286585e4e9a3fed16afa07bc250af\nparent a085e4b6f912f4c7ad0abd4eba7ebd71c51a2ad4\nauthor immber <jessiekrushing@gmail.com> 1562776912 -0700\ncommitter GitHub <noreply@github.com> 1562776912 -0700\n\nDOCS | Add `asset_url` note to CMS integration & Update FB config  (#2393)\n\n* added note RE passing asset_url, and updated fb configs\r\n\r\n* fix: syntax tweaks\r\n\r\n* feat: small tweaks to embedding\r\n"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/340052cdf034cc2d6b8017391db7ac76c439254b",
  "html_url": "https://github.com/coralproject/talk/commit/340052cdf034cc2d6b8017391db7ac76c439254b",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/340052cdf034cc2d6b8017391db7ac76c439254b/comments",
  "author": {
    "login": "immber",
    "id": 7496030,
    "node_id": "MDQ6VXNlcjc0OTYwMzA=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/7496030?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/immber",
    "html_url": "https://github.com/immber",
    "followers_url": "https://api.github.com/users/immber/followers",
    "following_url": "https://api.github.com/users/immber/following{/other_user}",
    "gists_url": "https://api.github.com/users/immber/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/immber/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/immber/subscriptions",
    "organizations_url": "https://api.github.com/users/immber/orgs",
    "repos_url": "https://api.github.com/users/immber/repos",
    "events_url": "https://api.github.com/users/immber/events{/privacy}",
    "received_events_url": "https://api.github.com/users/immber/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a085e4b6f912f4c7ad0abd4eba7ebd71c51a2ad4",
      "url": "https://api.github.com/repos/coralproject/talk/commits/a085e4b6f912f4c7ad0abd4eba7ebd71c51a2ad4",
      "html_url": "https://github.com/coralproject/talk/commit/a085e4b6f912f4c7ad0abd4eba7ebd71c51a2ad4"
    }
  ],
  "stats": {
    "total": 174,
    "additions": 121,
    "deletions": 53
  },
  "files": [
    {
      "sha": "852591c91172df2327aa1edf4110d94b3481783b",
      "filename": "docs/source/integrating/cms-integration.md",
      "status": "modified",
      "additions": 120,
      "deletions": 52,
      "changes": 172,
      "blob_url": "https://github.com/coralproject/talk/blob/340052cdf034cc2d6b8017391db7ac76c439254b/docs/source/integrating/cms-integration.md",
      "raw_url": "https://github.com/coralproject/talk/raw/340052cdf034cc2d6b8017391db7ac76c439254b/docs/source/integrating/cms-integration.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/docs/source/integrating/cms-integration.md?ref=340052cdf034cc2d6b8017391db7ac76c439254b",
      "patch": "@@ -4,76 +4,119 @@ permalink: /integrating/cms-integration/\n ---\n \n ## Embedding Comments on Your Site\n+\n Talk provides an embed script that you can drop into your site where you want a comments section to appear. By default that script dynamically generate Assets\n in Talk in order to make it easier for lighter installations.\n \n-You can find the embed script inside talk under `Configure > Tech Settings > Embed Script`. It should look something like this, but with your domain in place of `<TALK_ROOT_URL>`:\n-```\n+You can find the embed script inside talk under `Configure > Tech Settings > Embed Script`. It should look something like this, but with your domain in place of `${TALK_ROOT_URL}`:\n+\n+```html\n <div id=\"coral_talk_stream\"></div>\n-<script src=\"<TALK_ROOT_URL>/static/embed.js\" async onload=\"\n+<script\n+  src=\"${TALK_ROOT_URL}/static/embed.js\"\n+  async\n+  onload=\"\n   Coral.Talk.render(document.getElementById('coral_talk_stream'), {\n-    talk: '<TALK_ROOT_URL>'\n+    talk: '${TALK_ROOT_URL}'\n   });\n-\"></script>\n+\"\n+></script>\n ```\n \n+The URL for the asset is first inferred from the _Canonical link element_, which\n+takes the form of a `<link>` element in your `<head>` of the page:\n+\n+```html\n+<!DOCTYPE html>\n+<html>\n+  <head>\n+    <link rel=\"canonical\" href=\"https://example.com/page\" />\n+  </head>\n+  <body>\n+    ...\n+  </body>\n+</html>\n+```\n+\n+If this tag is not present, you can also pass a `asset_url` parameter into the\n+render function as:\n+\n+```js\n+Coral.Talk.render(document.getElementById(\"coral_talk_stream\"), {\n+  talk: \"${TALK_ROOT_URL}\",\n+  asset_url: \"https://example.com/page\"\n+});\n+```\n+\n+Which will explicitly force Talk to reference a particular url. This is\n+recommended if your canonical url does not match the current url.\n+\n+> **NOTE:** If the canonical link tag or `asset_url` parameter are not present, Talk will use the current URL excluding the query and hash elements. This may lead to undesired behavior, and it is recommended to use one of the above methods of specifying the URL.\n+\n ## Triggering the Comments Section (client side, i.e. Your site)\n \n-When the embed script is triggered on your page load several things are initiated inside Talk, including fetching all comments for the specified article, establishing websocket connections for this user, and checking user’s session for SSO/authentication. \n+When the embed script is triggered on your page load several things are initiated inside Talk, including fetching all comments for the specified article, establishing websocket connections for this user, and checking user’s session for SSO/authentication.\n \n-Instead of greedily triggering the embed to render on _EVERY PAGE LOAD_, we highly recommend implementing a _“lazy”_ rendering strategy to only render the comments section if a user wants to interact with it. This will greatly improve your initial page load performance, and will be critical to managing server resources if you’re running Talk on a heavy-traffic production site. \n+Instead of greedily triggering the embed to render on _EVERY PAGE LOAD_, we highly recommend implementing a _“lazy”_ rendering strategy to only render the comments section if a user wants to interact with it. This will greatly improve your initial page load performance, and will be critical to managing server resources if you’re running Talk on a heavy-traffic production site.\n \n We recommend using one of these _“lazy”_ loading strategies:\n \n #### Scroll to Comments Section\n-Wait for user to scroll to the comment section before triggering the embed to render. \n+\n+Wait for user to scroll to the comment section before triggering the embed to render.\n \n You can pass lazy: true to the render options, like so:\n-```\n-Coral.Talk.render(document.getElementById('container'), {\n-    talk: 'https://my-talk-installation.com',\n-    lazy: true,\n+\n+```js\n+Coral.Talk.render(document.getElementById(\"container\"), {\n+  talk: \"${TALK_ROOT_URL}\",\n+  lazy: true\n });\n ```\n \n Or you can enable lazy rendering by default on all assets using ENV variable `TALK_DEFAULT_LAZY_RENDER=TRUE`\n \n-_*Note: This feature requires Talk version 4.6.8 or greater_\n+_\\*Note: This feature requires Talk version 4.6.8 or greater_\n \n #### Show Comments Button\n- You can hide the comments section until a user clicks button, then trigger the embed to render\n+\n+You can hide the comments section until a user clicks button, then trigger the embed to render\n \n This example uses jQuery to render the embed on the button's click event\n-```\n+\n+```html\n <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n \n <div id=\"coral_talk_stream\">\n   <button>Show Comments</button>\n </div>\n \n <script type=\"text/javascript\">\n-  $('#coral_talk_stream button').on('click', function() {\n-    $.getScript('<TALK_ROOT_URL>/static/embed.js', function() {\n-      Coral.Talk.render(document.getElementById('coral_talk_stream'), {\n-        talk: '<TALK_ROOT_URL>',\n+  $(\"#coral_talk_stream button\").on(\"click\", function() {\n+    $.getScript(\"${TALK_ROOT_URL}/static/embed.js\", function() {\n+      Coral.Talk.render(document.getElementById(\"coral_talk_stream\"), {\n+        talk: \"${TALK_ROOT_URL}\"\n       });\n     });\n   });\n </script>\n ```\n \n ## Creating Assets in Talk (server side, i.e. What you need to send to Talk)\n+\n One of the most frequent questions that we get asked by organizations trying to\n integrate Talk is: _How do we hook our CMS up to Talk so that articles are in\n sync?_\n \n ### “Lazy Asset Creation”\n-Talk’s provided embed script by default dynamically generates Assets in Talk based on each unique url that triggers it. The url must reference an existing Permitted Domain. If your articles/stories always have unique urls, then you will not need to modify the default behavior. \n+\n+Talk’s provided embed script by default dynamically generates Assets in Talk based on each unique url that triggers it. The url must reference an existing Permitted Domain. If your articles/stories always have unique urls, then you will not need to modify the default behavior.\n \n Assets created in this way will then be scraped to load metadata, see [Asset Scraping](/talk/integrating/asset-scraping/)\n \n ## Customizing the Integration with a Plugin\n-In order to have more strict control over the asset creation flow to allow only assets pushed into it from your CMS, and keep your URL/title in sync we will create a plugin. \n+\n+In order to have more strict control over the asset creation flow to allow only assets pushed into it from your CMS, and keep your URL/title in sync we will create a plugin.\n \n We will create a plugin that will:\n \n@@ -83,7 +126,6 @@ We will create a plugin that will:\n \n We will then modify our embed so that we can [Target the Asset](#target-the-asset).\n \n-\n This guide is designed to explain the steps to take your base installation of Talk and configure it. We won't cover here how to install the plugin, as it is covered in our [Plugins Overview](/talk/plugins/).\n \n But first we should grab our basic plugin structure:\n@@ -129,8 +171,8 @@ module.exports = {\n \n       // Send the asset back.\n       return asset;\n-    },\n-  },\n+    }\n+  }\n };\n ```\n \n@@ -158,22 +200,26 @@ We'll replace the contents of the `router.js` file with the following:\n // This file we'll create routes that will facilitate asset creation and\n // updates.\n \n-const authz = require('middleware/authorization');\n+const authz = require(\"middleware/authorization\");\n \n module.exports = router => {\n   // We'll respond to a POST request on the following route where the request\n   // must have a valid ADMIN access token.\n   router.post(\n-    '/api/v1/plugin/asset-manager-example',\n-    authz.needed('ADMIN'),\n+    \"/api/v1/plugin/asset-manager-example\",\n+    authz.needed(\"ADMIN\"),\n     async (req, res, next) => {\n       // Get the graph context from the request.\n       const { context } = req;\n \n       // Grab from the graph context, the AssetModel that we can use to create\n       // the new Asset. Lots of object destructuring here, but this lets us keep\n       // the important business logic cleaner.\n-      const { connectors: { models: { Assets } } } = context;\n+      const {\n+        connectors: {\n+          models: { Assets }\n+        }\n+      } = context;\n \n       try {\n         // Now we can create the asset that was passed to us in the body of the\n@@ -208,20 +254,24 @@ CMS using the Talk cli tool:\n \n You can attach the generated token to the request a few ways:\n \n-1. HTTP Header:\n+1.  HTTP Header:\n \n-        curl ${TALK_ROOT_URL}/api/v1/plugin/asset-manager-example \\\n-            -XPOST \\\n-            -H \"Authorization: Bearer ${TOKEN}\" \\\n-            -H \"Content-Type: application/json\" \\\n-            --data \"${ASSET_JSON}\"\n+```sh\n+curl ${TALK_ROOT_URL}/api/v1/plugin/asset-manager-example \\\n+    -XPOST \\\n+    -H \"Authorization: Bearer ${TOKEN}\" \\\n+    -H \"Content-Type: application/json\" \\\n+    --data \"${ASSET_JSON}\"\n+```\n \n-2. Query Parameter:\n+2.  Query Parameter:\n \n-        curl ${TALK_ROOT_URL}/api/v1/plugin/asset-manager-example?access_token=${TOKEN}\n-            -XPOST \\\n-            -H \"Content-Type: application/json\" \\\n-            --data \"${ASSET_JSON}\"\n+```sh\n+curl ${TALK_ROOT_URL}/api/v1/plugin/asset-manager-example?access_token=${TOKEN}\n+    -XPOST \\\n+    -H \"Content-Type: application/json\" \\\n+    --data \"${ASSET_JSON}\"\n+```\n \n Where `${ASSET_JSON}` is the JSON for your Asset matching the\n [AssetSchema](https://github.com/coralproject/talk/blob/master/models/asset.js).\n@@ -239,22 +289,26 @@ Update your `router.js` to the following:\n // This file we'll create routes that will facilitate asset creation and\n // updates.\n \n-const authz = require('middleware/authorization');\n+const authz = require(\"middleware/authorization\");\n \n module.exports = router => {\n   // We'll respond to a POST request on the following route where the request\n   // must have a valid ADMIN access token.\n   router.post(\n-    '/api/v1/plugin/asset-manager-example',\n-    authz.needed('ADMIN'),\n+    \"/api/v1/plugin/asset-manager-example\",\n+    authz.needed(\"ADMIN\"),\n     async (req, res, next) => {\n       // Get the graph context from the request.\n       const { context } = req;\n \n       // Grab from the graph context, the AssetModel that we can use to create\n       // the new Asset. Lots of object destructuring here, but this lets us keep\n       // the important business logic cleaner.\n-      const { connectors: { models: { Assets } } } = context;\n+      const {\n+        connectors: {\n+          models: { Assets }\n+        }\n+      } = context;\n \n       try {\n         // Now we can create the asset that was passed to us in the body of the\n@@ -273,16 +327,20 @@ module.exports = router => {\n   // We'll respond to a PUT request on the following route where the request\n   // must also have a valid ADMIN access token.\n   router.put(\n-    '/api/v1/plugin/asset-manager-example/:id',\n-    authz.needed('ADMIN'),\n+    \"/api/v1/plugin/asset-manager-example/:id\",\n+    authz.needed(\"ADMIN\"),\n     async (req, res, next) => {\n       // Get the graph context from the request.\n       const { context } = req;\n \n       // Grab from the graph context, the AssetModel that we can use to update\n       // the Asset. Lots of object destructuring here, but this lets us keep\n       // the important business logic cleaner.\n-      const { connectors: { models: { Assets } } } = context;\n+      const {\n+        connectors: {\n+          models: { Assets }\n+        }\n+      } = context;\n \n       try {\n         // Now we can lookup the asset we're updating and apply out updates to\n@@ -292,7 +350,7 @@ module.exports = router => {\n           req.body,\n           {\n             // We want to validate the model being updated.\n-            runValidators: true,\n+            runValidators: true\n           }\n         );\n         if (!asset) {\n@@ -343,23 +401,31 @@ When you install Talk, and visit the admin panel, we can see under\n \n ```html\n <div id=\"coral_talk_stream\"></div>\n-<script src=\"${TALK_ROOT_URL}static/embed.js\" async onload=\"\n+<script\n+  src=\"${TALK_ROOT_URL}static/embed.js\"\n+  async\n+  onload=\"\n   Coral.Talk.render(document.getElementById('coral_talk_stream'), {\n     talk: '${TALK_ROOT_URL}'\n   });\n-\"></script>\n+\"\n+></script>\n ```\n \n We'll modify this to the following:\n \n ```html\n <div id=\"coral_talk_stream\"></div>\n-<script src=\"${TALK_ROOT_URL}static/embed.js\" async onload=\"\n+<script\n+  src=\"${TALK_ROOT_URL}static/embed.js\"\n+  async\n+  onload=\"\n   Coral.Talk.render(document.getElementById('coral_talk_stream'), {\n     talk: '${TALK_ROOT_URL}',\n     asset_id: '${ASSET_ID}'\n   });\n-\"></script>\n+\"\n+></script>\n ```\n \n Adding the `asset_id` parameter to the render function will accomplish a very\n@@ -369,8 +435,10 @@ the URL in the future, the embed will still reference the correct Asset. The\n `${ASSET_ID}` should be replaced by your CMS with the correct Asset id using\n your desired scripting/templating tools.\n \n+> **NOTE:** When used in conjunction with `asset_url`, you can explicitly force Talk to use a specified URL, rather than the canonical for link references. When used together, both `asset_id` and `asset_url` will be treated as unique identifiers for Talk assets.\n+\n At this point, you should have a fully built Talk plugin that can be paired with\n some work on your CMS to create a fully integrated asset management pipeline!\n \n To view the fully completed source code, visit\n-https://github.com/coralproject/talk-plugin-asset-manager-example.\n\\ No newline at end of file\n+https://github.com/coralproject/talk-plugin-asset-manager-example."
    },
    {
      "sha": "6fd224bbc91d291fca9a4cb36cfd04a79f780814",
      "filename": "plugins/talk-plugin-facebook-auth/README.md",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/340052cdf034cc2d6b8017391db7ac76c439254b/plugins/talk-plugin-facebook-auth/README.md",
      "raw_url": "https://github.com/coralproject/talk/raw/340052cdf034cc2d6b8017391db7ac76c439254b/plugins/talk-plugin-facebook-auth/README.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/plugins/talk-plugin-facebook-auth/README.md?ref=340052cdf034cc2d6b8017391db7ac76c439254b",
      "patch": "@@ -36,7 +36,7 @@ You can learn more about getting a Facebook App ID at the\n     * add a link to your privacy policy\n     * add a link to your terms of service\n * In Settings > Advanced:\n-    * turn on \"Require App Secret\"\n+    * disable \"Require App Secret\"\n * Add a \"Product\" (Under \"Products\" click + to add a Product):\n     * Setup \"Facebook Login\"\n     * choose `www` "
    }
  ]
}
