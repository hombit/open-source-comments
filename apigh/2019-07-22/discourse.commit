{
  "sha": "5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo1ZmM1YTdmNWFlOGMzY2YxYTg5YzFhNjg1MjU4ZTllOTQyZGUxNTA4",
  "commit": {
    "author": {
      "name": "Osama Sayegh",
      "email": "asooomaasoooma90@gmail.com",
      "date": "2019-07-22T14:55:49Z"
    },
    "committer": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2019-07-22T14:55:49Z"
    },
    "message": "FEATURE: Add search operator to see all direct messages from a user (#7913)\n\n* FEATURE: Add search operator to see all direct messages from a user\r\n\r\n* Only show message if related messages >= 5\r\n\r\n* Make \"all messages\" the hyperlink\r\n\r\n* Review",
    "tree": {
      "sha": "dc5b1659d97d6fa792cbb65b27df9ed1d57e81ba",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/dc5b1659d97d6fa792cbb65b27df9ed1d57e81ba"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
  "html_url": "https://github.com/discourse/discourse/commit/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/comments",
  "author": {
    "login": "OsamaSayegh",
    "id": 17474474,
    "node_id": "MDQ6VXNlcjE3NDc0NDc0",
    "avatar_url": "https://avatars2.githubusercontent.com/u/17474474?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/OsamaSayegh",
    "html_url": "https://github.com/OsamaSayegh",
    "followers_url": "https://api.github.com/users/OsamaSayegh/followers",
    "following_url": "https://api.github.com/users/OsamaSayegh/following{/other_user}",
    "gists_url": "https://api.github.com/users/OsamaSayegh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/OsamaSayegh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/OsamaSayegh/subscriptions",
    "organizations_url": "https://api.github.com/users/OsamaSayegh/orgs",
    "repos_url": "https://api.github.com/users/OsamaSayegh/repos",
    "events_url": "https://api.github.com/users/OsamaSayegh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/OsamaSayegh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "08b48b2ba6364df913b451192dce2649ce6e444a",
      "url": "https://api.github.com/repos/discourse/discourse/commits/08b48b2ba6364df913b451192dce2649ce6e444a",
      "html_url": "https://github.com/discourse/discourse/commit/08b48b2ba6364df913b451192dce2649ce6e444a"
    }
  ],
  "stats": {
    "total": 162,
    "additions": 145,
    "deletions": 17
  },
  "files": [
    {
      "sha": "e7d65a4591d2bc2851314586e229e56d0b7bac8c",
      "filename": "app/assets/javascripts/discourse/components/related-messages.js.es6",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/discourse/discourse/blob/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/components/related-messages.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/components/related-messages.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/components/related-messages.js.es6?ref=5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
      "patch": "@@ -5,6 +5,30 @@ export default Ember.Component.extend({\n   elementId: \"related-messages\",\n   classNames: [\"suggested-topics\"],\n \n+  @computed(\"topic\")\n+  targetUser(topic) {\n+    if (!topic || !topic.isPrivateMessage) {\n+      return;\n+    }\n+    const allowedUsers = topic.details.allowed_users;\n+    if (\n+      topic.relatedMessages &&\n+      topic.relatedMessages.length >= 5 &&\n+      allowedUsers.length === 2 &&\n+      topic.details.allowed_groups.length === 0 &&\n+      allowedUsers.find(u => u.username === this.currentUser.username)\n+    ) {\n+      return allowedUsers.find(u => u.username !== this.currentUser.username);\n+    }\n+  },\n+\n+  @computed\n+  searchLink() {\n+    return Discourse.getURL(\n+      `/search?expanded=true&q=%40${this.targetUser.username}%20in%3Apersonal-direct`\n+    );\n+  },\n+\n   @computed(\"topic\")\n   relatedTitle(topic) {\n     const href = this.currentUser && this.currentUser.pmPath(topic);"
    },
    {
      "sha": "50da93e6c231a96118a0e1a5152228e9b24671ff",
      "filename": "app/assets/javascripts/discourse/components/search-advanced-options.js.es6",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/components/search-advanced-options.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/components/search-advanced-options.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/components/search-advanced-options.js.es6?ref=5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
      "patch": "@@ -19,7 +19,7 @@ const REGEXP_TAGS_REPLACE = /(^(tags?:|#(?=[a-z0-9\\-]+::tag))|::tag\\s?$)/gi;\n const REGEXP_IN_MATCH = /^(in|with):(posted|watching|tracking|bookmarks|first|pinned|unpinned|wiki|unseen|image)/gi;\n const REGEXP_SPECIAL_IN_LIKES_MATCH = /^in:likes/gi;\n const REGEXP_SPECIAL_IN_TITLE_MATCH = /^in:title/gi;\n-const REGEXP_SPECIAL_IN_PRIVATE_MATCH = /^in:private/gi;\n+const REGEXP_SPECIAL_IN_PERSONAL_MATCH = /^in:personal/gi;\n const REGEXP_SPECIAL_IN_SEEN_MATCH = /^in:seen/gi;\n \n const REGEXP_CATEGORY_SLUG = /^(\\#[a-zA-Z0-9\\-:]+)/gi;\n@@ -93,7 +93,7 @@ export default Ember.Component.extend({\n           in: {\n             title: false,\n             likes: false,\n-            private: false,\n+            personal: false,\n             seen: false\n           },\n           all_tags: false\n@@ -140,8 +140,8 @@ export default Ember.Component.extend({\n     );\n \n     this.setSearchedTermSpecialInValue(\n-      \"searchedTerms.special.in.private\",\n-      REGEXP_SPECIAL_IN_PRIVATE_MATCH\n+      \"searchedTerms.special.in.personal\",\n+      REGEXP_SPECIAL_IN_PERSONAL_MATCH\n     );\n \n     this.setSearchedTermSpecialInValue(\n@@ -512,9 +512,9 @@ export default Ember.Component.extend({\n     this.updateInRegex(REGEXP_SPECIAL_IN_LIKES_MATCH, \"likes\");\n   },\n \n-  @observes(\"searchedTerms.special.in.private\")\n-  updateSearchTermForSpecialInPrivate() {\n-    this.updateInRegex(REGEXP_SPECIAL_IN_PRIVATE_MATCH, \"private\");\n+  @observes(\"searchedTerms.special.in.personal\")\n+  updateSearchTermForSpecialInPersonal() {\n+    this.updateInRegex(REGEXP_SPECIAL_IN_PERSONAL_MATCH, \"personal\");\n   },\n \n   @observes(\"searchedTerms.special.in.seen\")"
    },
    {
      "sha": "c7175a47fdb414c5ba793b8d9815439660c233b0",
      "filename": "app/assets/javascripts/discourse/controllers/full-page-search.js.es6",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/controllers/full-page-search.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/controllers/full-page-search.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/controllers/full-page-search.js.es6?ref=5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
      "patch": "@@ -161,9 +161,9 @@ export default Ember.Controller.extend({\n     return (\n       q &&\n       this.currentUser &&\n-      (q.indexOf(\"in:private\") > -1 ||\n+      (q.indexOf(\"in:personal\") > -1 ||\n         q.indexOf(\n-          `private_messages:${this.currentUser.get(\"username_lower\")}`\n+          `personal_messages:${this.currentUser.get(\"username_lower\")}`\n         ) > -1)\n     );\n   },"
    },
    {
      "sha": "dde8deaea1c21ac5e442a3acd2bcd323922f65ba",
      "filename": "app/assets/javascripts/discourse/templates/components/related-messages.hbs",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/templates/components/related-messages.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/templates/components/related-messages.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/templates/components/related-messages.hbs?ref=5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
      "patch": "@@ -5,3 +5,7 @@\n   showPosters=\"true\"\n   topics=topic.relatedMessages}}\n </div>\n+\n+{{#if targetUser}}\n+  <h3 class=\"see-all-pms-message\">{{{i18n \"related_messages.see_all\" path=searchLink username=targetUser.username}}}</h3>\n+{{/if}}"
    },
    {
      "sha": "b1d80198cbe0efd4e80fd5a0580ecf6339e18ab7",
      "filename": "app/assets/javascripts/discourse/templates/components/search-advanced-options.hbs",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/templates/components/search-advanced-options.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/templates/components/search-advanced-options.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/templates/components/search-advanced-options.hbs?ref=5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
      "patch": "@@ -62,7 +62,7 @@\n         <section class='field'>\n           <label>{{input type=\"checkbox\" class=\"in-title\" checked=searchedTerms.special.in.title}} {{i18n \"search.advanced.filters.title\"}}</label>\n           <label>{{input type=\"checkbox\" class=\"in-likes\" checked=searchedTerms.special.in.likes}} {{i18n \"search.advanced.filters.likes\"}}</label>\n-          <label>{{input type=\"checkbox\" class=\"in-private\" checked=searchedTerms.special.in.private}} {{i18n \"search.advanced.filters.private\"}}</label>\n+          <label>{{input type=\"checkbox\" class=\"in-private\" checked=searchedTerms.special.in.personal}} {{i18n \"search.advanced.filters.private\"}}</label>\n           <label>{{input type=\"checkbox\" class=\"in-seen\" checked=searchedTerms.special.in.seen}} {{i18n \"search.advanced.filters.seen\"}}</label>\n         </section>\n       {{/if}}"
    },
    {
      "sha": "808f3282c3ee52ed1cfcb311407e43b036044862",
      "filename": "app/assets/javascripts/discourse/widgets/search-menu.js.es6",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/widgets/search-menu.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/app/assets/javascripts/discourse/widgets/search-menu.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/widgets/search-menu.js.es6?ref=5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
      "patch": "@@ -114,7 +114,7 @@ export default createWidget(\"search-menu\", {\n             this.currentUser.get(\"username_lower\") &&\n           type === \"private_messages\"\n         ) {\n-          query += \" in:private\";\n+          query += \" in:personal\";\n         } else {\n           query += encodeURIComponent(\" \" + type + \":\" + ctx.id);\n         }"
    },
    {
      "sha": "23c624d85e891d01b8a4a9d51030ba90904c2f99",
      "filename": "config/locales/client.en.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/config/locales/client.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/config/locales/client.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/client.en.yml?ref=5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
      "patch": "@@ -262,6 +262,7 @@ en:\n \n     related_messages:\n       title: \"Related Messages\"\n+      see_all: \"See <a href=\\\"%{path}\\\">all messages</a> from @%{username}...\"\n \n     suggested_topics:\n       title: \"Suggested Topics\""
    },
    {
      "sha": "a109f48a0269ea42b49573fc2d1cd3ea04228ad1",
      "filename": "lib/search.rb",
      "status": "modified",
      "additions": 28,
      "deletions": 3,
      "changes": 31,
      "blob_url": "https://github.com/discourse/discourse/blob/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/lib/search.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/lib/search.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/search.rb?ref=5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
      "patch": "@@ -265,6 +265,27 @@ def self.advanced_filters\n     @advanced_filters\n   end\n \n+  advanced_filter(/^in:personal-direct$/) do |posts|\n+    if @guardian.user\n+      posts\n+        .joins(\"LEFT JOIN topic_allowed_groups tg ON posts.topic_id = tg.topic_id\")\n+        .where(<<~SQL, user_id: @guardian.user.id)\n+          tg.id IS NULL\n+          AND posts.topic_id IN (\n+            SELECT tau.topic_id\n+            FROM topic_allowed_users tau\n+            JOIN topic_allowed_users tau2\n+            ON tau2.topic_id = tau.topic_id\n+            AND tau2.id != tau.id\n+            WHERE tau.user_id = :user_id\n+            AND tau.topic_id = posts.topic_id\n+            GROUP BY tau.topic_id\n+            HAVING COUNT(*) = 1\n+          )\n+        SQL\n+    end\n+  end\n+\n   advanced_filter(/^in:tagged$/) do |posts|\n     posts\n       .where('EXISTS (SELECT 1 FROM topic_tags WHERE topic_tags.topic_id = posts.topic_id)')\n@@ -631,10 +652,14 @@ def process_advanced_search!(term)\n       elsif word == 'order:likes'\n         @order = :likes\n         nil\n-      elsif word == 'in:private'\n+      elsif %w{in:private in:personal}.include?(word) # remove private after 2.4 release\n+        @search_pms = true\n+        nil\n+      elsif word == \"in:personal-direct\"\n         @search_pms = true\n+        @direct_pms_only = true\n         nil\n-      elsif word =~ /^private_messages:(.+)$/\n+      elsif word =~ /^personal_messages:(.+)$/\n         @search_pms = true\n         nil\n       else\n@@ -826,7 +851,7 @@ def posts_query(limit, opts = nil)\n       if @search_context.present?\n         if @search_context.is_a?(User)\n           if opts[:private_messages]\n-            posts.private_posts_for_user(@search_context)\n+            @direct_pms_only ? posts : posts.private_posts_for_user(@search_context)\n           else\n             posts.where(\"posts.user_id = #{@search_context.id}\")\n           end"
    },
    {
      "sha": "748f08888c75452bc60860a414c9e659391864c1",
      "filename": "spec/components/search_spec.rb",
      "status": "modified",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/discourse/discourse/blob/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/spec/components/search_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/spec/components/search_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/search_spec.rb?ref=5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
      "patch": "@@ -236,6 +236,65 @@\n \n     end\n \n+    context 'personal-direct flag' do\n+      let(:current) { Fabricate(:user, admin: true, username: \"current_user\") }\n+      let(:participant) { Fabricate(:user, username: \"participant_1\") }\n+      let(:participant_2) { Fabricate(:user, username: \"participant_2\") }\n+\n+      let(:group) do\n+        group = Fabricate(:group, has_messages: true)\n+        group.add(current)\n+        group.add(participant)\n+        group\n+      end\n+\n+      def create_pm(users:, group: nil)\n+        pm = Fabricate(:private_message_post_one_user, user: users.first).topic\n+        users[1..-1].each do |u|\n+          pm.invite(users.first, u.username)\n+          Fabricate(:post, user: u, topic: pm)\n+        end\n+        if group\n+          pm.invite_group(users.first, group)\n+          group.users.each do |u|\n+            Fabricate(:post, user: u, topic: pm)\n+          end\n+        end\n+        pm.reload\n+      end\n+\n+      it 'can find all direct PMs of the current user' do\n+        pm = create_pm(users: [current, participant])\n+        pm_2 = create_pm(users: [participant_2, participant])\n+        pm_3 = create_pm(users: [participant, current])\n+        pm_4 = create_pm(users: [participant_2, current])\n+        results = Search.execute(\"in:personal-direct\", guardian: Guardian.new(current))\n+        expect(results.posts.size).to eq(3)\n+        expect(results.posts.map(&:topic_id)).to contain_exactly(pm.id, pm_3.id, pm_4.id)\n+      end\n+\n+      it 'can filter direct PMs by @username' do\n+        pm = create_pm(users: [current, participant])\n+        pm_2 = create_pm(users: [participant, current])\n+        pm_3 = create_pm(users: [participant_2, current])\n+        results = Search.execute(\"@#{participant.username} in:personal-direct\", guardian: Guardian.new(current))\n+        expect(results.posts.size).to eq(2)\n+        expect(results.posts.map(&:topic_id)).to contain_exactly(pm.id, pm_2.id)\n+        expect(results.posts.map(&:user_id).uniq).to contain_exactly(participant.id)\n+      end\n+\n+      it \"doesn't include PMs that have more than 2 participants\" do\n+        pm = create_pm(users: [current, participant, participant_2])\n+        results = Search.execute(\"@#{participant.username} in:personal-direct\", guardian: Guardian.new(current))\n+        expect(results.posts.size).to eq(0)\n+      end\n+\n+      it \"doesn't include PMs that have groups\" do\n+        pm = create_pm(users: [current, participant], group: group)\n+        results = Search.execute(\"@#{participant.username} in:personal-direct\", guardian: Guardian.new(current))\n+        expect(results.posts.size).to eq(0)\n+      end\n+    end\n   end\n \n   context 'topics' do"
    },
    {
      "sha": "8f0fef9259cfe6d9cafe1071a29c8b3fd8e14aa9",
      "filename": "spec/fabricators/post_fabricator.rb",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/discourse/discourse/blob/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/spec/fabricators/post_fabricator.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/spec/fabricators/post_fabricator.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/fabricators/post_fabricator.rb?ref=5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
      "patch": "@@ -137,6 +137,21 @@\n   raw \"Ssshh! This is our secret conversation!\"\n end\n \n+Fabricator(:private_message_post_one_user, from: :post) do\n+  user\n+  topic do |attrs|\n+    Fabricate(:private_message_topic,\n+      user: attrs[:user],\n+      created_at: attrs[:created_at],\n+      subtype: TopicSubtype.user_to_user,\n+      topic_allowed_users: [\n+        Fabricate.build(:topic_allowed_user, user: attrs[:user]),\n+      ]\n+    )\n+  end\n+  raw \"Ssshh! This is our secret conversation!\"\n+end\n+\n Fabricator(:post_via_email, from: :post) do\n   incoming_email\n   via_email true"
    },
    {
      "sha": "d2ec23231c59cdaa06801db5315d1c7dae3556b2",
      "filename": "test/javascripts/acceptance/search-full-test.js.es6",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/test/javascripts/acceptance/search-full-test.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508/test/javascripts/acceptance/search-full-test.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/acceptance/search-full-test.js.es6?ref=5fc5a7f5ae8c3cf1a89c1a685258e9e942de1508",
      "patch": "@@ -278,7 +278,7 @@ QUnit.test(\n );\n \n QUnit.test(\n-  \"update in:private filter through advanced search ui\",\n+  \"update in:personal filter through advanced search ui\",\n   async assert => {\n     await visit(\"/search\");\n     await fillIn(\".search-query\", \"none\");\n@@ -290,8 +290,8 @@ QUnit.test(\n     );\n     assert.equal(\n       find(\".search-query\").val(),\n-      \"none in:private\",\n-      'has updated search term to \"none in:private\"'\n+      \"none in:personal\",\n+      'has updated search term to \"none in:personal\"'\n     );\n   }\n );"
    }
  ]
}
