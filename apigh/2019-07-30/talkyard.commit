{
  "sha": "78091625293a9c81e9fbad51e68ed3f3ee84ce73",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6NzgwOTE2MjUyOTNhOWM4MWU5ZmJhZDUxZTY4ZWQzZjNlZTg0Y2U3Mw==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-07-30T04:00:15Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-07-30T06:06:13Z"
    },
    "message": "Code review, all but 75a2790 \"Import ... Upsert ...\".",
    "tree": {
      "sha": "3f6332895e8f1713011836941ec3c1982a8483f0",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/3f6332895e8f1713011836941ec3c1982a8483f0"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/78091625293a9c81e9fbad51e68ed3f3ee84ce73",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/78091625293a9c81e9fbad51e68ed3f3ee84ce73",
  "html_url": "https://github.com/debiki/talkyard/commit/78091625293a9c81e9fbad51e68ed3f3ee84ce73",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/78091625293a9c81e9fbad51e68ed3f3ee84ce73/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9e38606ad6375b55370830d6ad76ef3af4faad5e",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/9e38606ad6375b55370830d6ad76ef3af4faad5e",
      "html_url": "https://github.com/debiki/talkyard/commit/9e38606ad6375b55370830d6ad76ef3af4faad5e"
    }
  ],
  "stats": {
    "total": 128,
    "additions": 77,
    "deletions": 51
  },
  "files": [
    {
      "sha": "2956115c009dff3199042c4855cda65ee35d99d6",
      "filename": "Makefile",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/Makefile",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/Makefile",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/Makefile?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -139,10 +139,9 @@ $(zipped_bundles): $@\n \n # ----- To-Talkyard Javascript\n \n-# For now:\n to-talkyard: to-talkyard/dist/to-talkyard/src/to-talkyard.js\n \n-to-talkyard/dist/to-talkyard/src/to-talkyard.js:\n+to-talkyard/dist/to-talkyard/src/to-talkyard.js: $(shell find to-talkyard/src/)\n \techo \"Building To-Talkyard ...\"\n \tset -x ;\\\n \tcd to-talkyard ;\\"
    },
    {
      "sha": "24e18c26d15cb9d70edb4ca02104402787977f8e",
      "filename": "app/controllers/EmbeddedTopicsController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/controllers/EmbeddedTopicsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/controllers/EmbeddedTopicsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/EmbeddedTopicsController.scala?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -85,7 +85,7 @@ class EmbeddedTopicsController @Inject()(cc: ControllerComponents, edContext: Ed\n         // So skip: Nashorn.renderPage(jsonStuff.reactStoreJsonString)\n         val tpi = new PageTpi(pageRequest, jsonStuff.reactStoreJsonString, jsonStuff.version,\n           \"Dummy cached html [EdM2GRVUF05]\", WrongCachedPageVersion,\n-          jsonStuff.pageTitle, jsonStuff.customHeadTags, anyAltPageId = discussionId,\n+          jsonStuff.pageTitleUnsafe, jsonStuff.customHeadTags, anyAltPageId = discussionId,\n           anyEmbeddingUrl = Some(embeddingUrl))\n         val htmlString = views.html.templates.page(tpi).body\n "
    },
    {
      "sha": "34f0ac269f24cb82fc2006c79f892bd10aafd61e",
      "filename": "app/debiki/PageTpi.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/debiki/PageTpi.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/debiki/PageTpi.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/PageTpi.scala?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -40,8 +40,8 @@ object PageTpi {\n object SiteTpi {\n \n   def apply(request: DebikiRequest[_], json: Option[String] = None,\n-        pageTitle: Option[String] = None, isAdminArea: Boolean = false) =\n-    new SiteTpi(request, json, pageTitle = pageTitle, isAdminArea = isAdminArea)\n+        pageTitleUnsafe: Option[String] = None, isAdminArea: Boolean = false) =\n+    new SiteTpi(request, json, pageTitleUnsafe = pageTitleUnsafe, isAdminArea = isAdminArea)\n \n }\n \n@@ -60,7 +60,7 @@ object SiteTpi {\n class SiteTpi protected (\n   val debikiRequest: DebikiRequest[_],\n   val json: Option[String] = None,\n-  pageTitle: Option[String] = None,\n+  pageTitleUnsafe: Option[String] = None,\n   isAdminArea: Boolean = false) {\n \n   def globals: Globals = debikiRequest.context.globals\n@@ -89,20 +89,20 @@ class SiteTpi protected (\n     // At UTX, the page title is the website being tested â€” which is confusing. Instead, always\n     // show the UTX website title.\n     val pageRole = anyCurrentPageRole orElse anyCurrentPageMeta.map(_.pageType)\n-    val thePageTitle =\n+    val thePageTitleUnsafe =\n       if (anyCustomMetaTags.includesTitleTag) None\n       else if (pageRole is PageType.UsabilityTesting) { // [plugin]\n         Some(\"Usability Testing Exchange\")\n       }\n       else anyCurrentPageMeta.map(_.htmlHeadTitle) match {\n         case t @ Some(title) if title.length > 0 => t\n-        case _ => pageTitle\n+        case _ => pageTitleUnsafe\n       }\n     val theDescription =\n       if (anyCustomMetaTags.includesDescription) None\n       else anyCurrentPageMeta.map(_.htmlHeadDescription)\n     xml.Unparsed(views.html.debikiMeta(\n-      this, thePageTitle, description = theDescription, faviconUrl = siteSettings.faviconUrl).body)\n+      this, thePageTitleUnsafe, description = theDescription, faviconUrl = siteSettings.faviconUrl).body)\n   }\n \n \n@@ -295,11 +295,11 @@ class PageTpi(\n   private val jsonVersion: CachedPageVersion,\n   private val cachedPageHtml: String,\n   private val cachedVersion: CachedPageVersion,\n-  private val pageTitle: Option[String],\n+  private val pageTitleUnsafe: Option[String],\n   override val anyCustomMetaTags: FindHeadTagsResult,\n   override val anyAltPageId: Option[AltPageId],\n   override val anyEmbeddingUrl: Option[String])\n-  extends SiteTpi(pageReq, json = None, pageTitle = pageTitle) {\n+  extends SiteTpi(pageReq, json = None, pageTitleUnsafe = pageTitleUnsafe) {\n \n   override def anyCurrentPageLayout = Some(pageReq.thePageMeta.layout)\n   override def anyCurrentPageRole = Some(pageReq.thePageRole)"
    },
    {
      "sha": "173615418a77604c6d011d5b00a7f282524f2a69",
      "filename": "app/debiki/ReactJson.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/debiki/ReactJson.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/debiki/ReactJson.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/ReactJson.scala?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -54,7 +54,7 @@ class HowRenderPostInPage(\n case class PageToJsonResult(\n   reactStoreJsonString: String,\n   version: CachedPageVersion,\n-  pageTitle: Option[String],\n+  pageTitleUnsafe: Option[String],\n   customHeadTags: FindHeadTagsResult,\n   unapprovedPostAuthorIds: Set[UserId])\n \n@@ -186,7 +186,7 @@ class JsonMaker(dao: SiteDao) {\n         pageParts.allPosts // loads all posts, if needed\n       }\n \n-    val pageTitle = posts.find(_.isTitle).flatMap(_.approvedHtmlSanitized)\n+    val pageTitleUnsafe = posts.find(_.isTitle).flatMap(_.approvedSource)\n \n     // Meta tags allowed for custom HTML pages only, right now. Usually the homepage.\n     // Only staff can edit custom html pages, currently, so reasonably safe, [2GKW0M]\n@@ -376,7 +376,7 @@ class JsonMaker(dao: SiteDao) {\n     val unapprovedPosts = posts.filter(!_.isSomeVersionApproved)\n     val unapprovedPostAuthorIds = unapprovedPosts.map(_.createdById).toSet\n \n-    PageToJsonResult(reactStoreJsonString, version, pageTitle, headTags, unapprovedPostAuthorIds)\n+    PageToJsonResult(reactStoreJsonString, version, pageTitleUnsafe, headTags, unapprovedPostAuthorIds)\n   }\n \n "
    },
    {
      "sha": "e2d7dc0540975e249e54e636f0a9afadacc1e5e5",
      "filename": "app/debiki/dao/PagesDao.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/debiki/dao/PagesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/debiki/dao/PagesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/PagesDao.scala?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -256,12 +256,14 @@ trait PagesDao {\n       layout = layout,\n       pinOrder = pinOrder, pinWhere = pinWhere,\n       categoryId = anyCategoryId,\n-      // BUG the emb url changes, if the blog moves to another doamin, so this db field\n+      // BUG the emb url changes, if the blog moves to another domain, so this db field\n       // can get out of date. Remove it? and instead use the url in use, when a comment\n-      // gets posted? But what about summary emails?\n+      // gets posted and generating notf emails?  But what about summary emails?\n       // Maybe remember each blog's last visited domain, and among the domains in the allowed\n-      // domains list, use the most recently visited one? But what if a Ty site is used\n-      // for different blogs?\n+      // domains list, use the most recently last visited one? But what if a Ty site is used\n+      // for different blogs? Remember last-visited-domain, per individual blog post?\n+      // Or maybe different blogs, should place their comments in different categories,\n+      // and each category can have a primary / canonical embedding domain? [COMCATS]\n       embeddingUrl = embeddingUrl,\n       publishDirectly = true,\n       hidden = approvedById.isEmpty) // [7AWU2R0]"
    },
    {
      "sha": "6bb169953b1556fc7cc00558387a2feaf87bd211",
      "filename": "app/debiki/dao/RenderedPageHtmlDao.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/debiki/dao/RenderedPageHtmlDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/debiki/dao/RenderedPageHtmlDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/RenderedPageHtmlDao.scala?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -77,7 +77,7 @@ trait RenderedPageHtmlDao {\n             pageId, renderParams, jsonResult.version, jsonResult.reactStoreJsonString)\n \n       val tpi = new PageTpi(pageRequest, jsonResult.reactStoreJsonString, jsonResult.version,\n-        cachedHtmlContent, cachedVersion, jsonResult.pageTitle, jsonResult.customHeadTags,\n+        cachedHtmlContent, cachedVersion, jsonResult.pageTitleUnsafe, jsonResult.customHeadTags,\n         anyAltPageId = pageRequest.altPageId, anyEmbeddingUrl = pageRequest.embeddingUrl)\n \n       // This is the html for the whole page: <html>, <head>, <body>, and <script>s,"
    },
    {
      "sha": "fc9b19140bb3d3af3e79da99612cf2ff114e3cc2",
      "filename": "app/views/debikiMeta.scala.html",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/views/debikiMeta.scala.html",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/app/views/debikiMeta.scala.html",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/views/debikiMeta.scala.html?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -15,13 +15,13 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  *@\n \n-@(tpi: debiki.SiteTpi, pageTitle: Option[String], description: Option[String], faviconUrl: String)\n+@(tpi: debiki.SiteTpi, pageTitleUnsafe: Option[String], description: Option[String], faviconUrl: String)\n \n @import com.debiki.core.Prelude._\n @import org.owasp.encoder.Encode\n \n-@if(pageTitle.nonEmpty) {\n-<title>@Html(Encode.forHtmlContent(pageTitle.get))</title>\n+@if(pageTitleUnsafe.nonEmpty) {\n+<title>@Html(Encode.forHtmlContent(pageTitleUnsafe.get))</title>\n }\n @if(description.nonEmpty) {\n <meta name=\"description\" content=\"@{description.get}\">"
    },
    {
      "sha": "261e0c919acb184e4db4b1f44bd6cafcf71802e7",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/client/app-editor/editor/editor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/client/app-editor/editor/editor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-editor/editor/editor.editor.ts?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -1292,7 +1292,7 @@ export const Editor = createComponent({\n       const urlEncodedQuery = debiki2['search'].urlEncodeSearchQuery(this.state.title);\n       const searchUrl = '/-/search?q=' + urlEncodedQuery;\n \n-      const hitList =\n+      const hitList = !searchResults.pagesAndHits.length ? null :\n           r.ul({},\n             _.take(searchResults.pagesAndHits, 15).map((pageAndHits: PageAndHits) =>\n               r.li({ key: pageAndHits.pageId, className: 's_E_SimlTpcs_L_It' },"
    },
    {
      "sha": "5392341c491be11fc3a5c4ba5271e8563b9a2df9",
      "filename": "client/app-more/login/create-user-dialog.more.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/client/app-more/login/create-user-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/client/app-more/login/create-user-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/login/create-user-dialog.more.ts?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -170,21 +170,23 @@ export var CreateUserDialogContent = createClassAndFactory({\n     dieIf(this.props.isForPasswordUser && this.props.providerId, 'TyE7UKWQ3');\n     // @endif\n \n+    // Avoid the Create User button being disabled because username-too-long.\n+    const usernameNotTooLong = (this.props.username || '').substr(0, MaxUsernameLength);\n+\n     return {\n       okayStatuses: {\n         // Full name / alias / display name, is required, for guests.\n         fullName: !this.props.isForGuest,\n         // providerId always missing in emb cmts openauth popup?\n         email: this.props.providerId && !!this.props.email,\n         // Guests have no username or password.\n-        username: this.props.isForGuest || (\n-            this.props.username && this.props.username.length >= 3), // [6KKAQDD0]\n+        username: this.props.isForGuest || usernameNotTooLong.length >= 3, // [6KKAQDD0]\n         password: !this.props.isForPasswordUser,\n       },\n       userData: {\n         fullName: this.props.fullName,\n         email: this.props.email,\n-        username: this.props.username || '',\n+        username: usernameNotTooLong,\n       },\n     };\n   },\n@@ -327,7 +329,7 @@ export var CreateUserDialogContent = createClassAndFactory({\n \n     const usernameInputMaybe = isForGuest ? null :\n         util.UsernameInput({ label: t.cud.Username, id: 'e2eUsername', tabIndex: 1,\n-          defaultValue: (props.username || '').substr(0, MaxUsernameLength),\n+          defaultValue: state.userData.username,\n           onChangeValueOk: (value, isOk) => this.updateValueOk('username', value, isOk)\n         });\n "
    },
    {
      "sha": "b928354a707526c7e39e18148299a2d97556de49",
      "filename": "client/app-more/no-page/non-existing-page.more.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/client/app-more/no-page/non-existing-page.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/client/app-more/no-page/non-existing-page.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/no-page/non-existing-page.more.ts?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -275,9 +275,16 @@ export var CreateForumPanel = createComponent({\n     // so they feel they've typed a \"name\" already. UX testing shows that they get\n     // confused if they need to type a \"name\" again here. So, by defualt, reuse the local\n     // hostname here. They can change the fourm page title later (via an edit icon).\n-    const localHostname = location.hostname.split('.')[0];\n-    const anyFirstChar = localHostname[0] || '';\n-    const defaultTitle = anyFirstChar.toUpperCase() + localHostname.substr(1, 999);\n+    let defaultTitle = \"Your Community\";\n+    // Later, instead include an isFirstSite bool in the json from the server?\n+    // only when setting up the new sites, not later on (because would leak info the\n+    // admins might want to keep private. eds.siteId will be deleted [5UKFBQW2])\n+    const isMultitenant = eds.siteId !== 1;\n+    if (isMultitenant) {\n+      const localHostname = location.hostname.split('.')[0];\n+      const anyFirstChar = localHostname[0] || '';\n+      defaultTitle = anyFirstChar.toUpperCase() + localHostname.substr(1, 999);\n+    }\n \n     return {\n       title: defaultTitle,"
    },
    {
      "sha": "2b663f217745a8aa2770f13c265527b671aea225",
      "filename": "client/app-slim/store-getters.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 10,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/client/app-slim/store-getters.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/client/app-slim/store-getters.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/store-getters.ts?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -148,10 +148,11 @@ export function store_canUndeletePage(store: Store): boolean {\n }\n \n \n-export function store_canSelectPosts(store: Store): boolean {\n-  const page: Page = store.currentPage;\n-  return isStaff(store.me) && !store_isSection(store) && page.pageRole !== PageRole.CustomHtmlPage;\n-}\n+//export function store_canSelectPosts(store: Store): boolean {\n+//  const page: Page = store.currentPage;\n+//  return isStaff(store.me) && !isSection(page.pageRole) &&\n+//      page.pageRole !== PageRole.CustomHtmlPage;\n+//}\n \n \n // Returns the current category, or if none, the default category.\n@@ -174,12 +175,6 @@ export function store_getCurrOrDefaultCat(store: Store): Category {\n }\n \n \n-export function store_isSection(store: Store): boolean {\n-  const page: Page = store.currentPage;\n-  return page.pageRole !== PageRole.Blog && page.pageRole !== PageRole.Forum;\n-}\n-\n-\n export function store_numSubCommunities(store: Store): number {\n   const forumPages = _.filter(store.siteSections, (s: SiteSection) => s.pageRole === PageRole.Forum);\n   return forumPages.length;"
    },
    {
      "sha": "d50614b3f117e6eee34037668e2dbae1ab95b7a9",
      "filename": "client/app-staff/admin/admin-app.staff.ts",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/client/app-staff/admin/admin-app.staff.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/client/app-staff/admin/admin-app.staff.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-staff/admin/admin-app.staff.ts?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -1277,6 +1277,20 @@ const EmbeddedCommentsSettings = createFactory({\n \n     return (\n       r.div({},\n+        // This setting should be for an Embedded Comments category, with\n+        // ext id 'embedded_comments'. And maybe the 1st domain, can be considered\n+        // the primary domain, used in all generated links? (e.g. a link to a comment\n+        // in a reply notification email, or in some acitvity summary email.)\n+        //\n+        // Later on: Let ppl create other categories with different extId:s and\n+        // different canonical embedding domains.\n+        // This could be a \"Multiblog\" feature? which, if enabled, lets one\n+        // map different categories w ext ids like \"comments_for_blog_one\" and \"...blog_two\"\n+        // to different embedding domains. [COMCATS]\n+        // And the embedding code, would have an attr like:\n+        //    <div ... data-category-ref=\"extid:comments_for_blog_one\">\n+        // resulting in emb disc topics getting created in that category â€” and\n+        // links in reply notf emails would point to the correct embdding origin.\n         Setting2(props, { type: 'textarea', label: \"Allow embedding from\", id: 'e_AllowEmbFrom',\n           className: 's_A_Ss_EmbOrig',\n           help: r.span({}, \"Lets another website (your website) show embedded contents. \" +"
    },
    {
      "sha": "64705c0a4de1e690138061b6bd6bfc78128927bc",
      "filename": "docs/wildcard-dot-localhost.md",
      "status": "modified",
      "additions": 17,
      "deletions": 7,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/docs/wildcard-dot-localhost.md",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/docs/wildcard-dot-localhost.md",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/wildcard-dot-localhost.md?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -1,5 +1,5 @@\n Making *.localhost addresses work\n------------------------------\n+=============================\n \n Chrome seems to handle `*.localhost` addresses in a good way, i.e. it sends the HTTP request\n to 127.0.0.1. However, for other browsers, and for test suites that send API requests\n@@ -11,11 +11,15 @@ It'd been great if we could just have added a `127.0.0.1  *.localhost` entry to\n But wildcard `/etc/hosts` entries are not allowed. Instead, we can ...\n \n \n-#### Linux\n+Linux\n+-----------------------------\n+\n \n Use dnsmasq (see http://serverfault.com/a/118589/44112 ).\n \n-**Linux Mint and Ubuntu:** NetworkManager already runs its own instance of\n+#### Linux Mint and Ubuntu\n+\n+NetworkManager already runs its own instance of\n dnsmasq. You can make `*.localhost` work like so: (do this only once)\n \n     sudo sh -c 'echo \"address=/localhost/127.0.0.1\" >> /etc/NetworkManager/dnsmasq.d/wildcard.localhost.conf'\n@@ -26,7 +30,9 @@ Then restart NetworkManager:\n \n Wait half a minute, then this should work: `ping whatever.localhost`.\n \n-**Debian:** Like Ubuntu, plus, you need this, to tell NetworkManager to use dnsmasq:\n+#### Debian\n+\n+Like Ubuntu, plus, you need this, to tell NetworkManager to use dnsmasq:\n \n     $ cat /etc/NetworkManager/conf.d/00-use-dnsmasq.conf\n \n@@ -35,7 +41,9 @@ Wait half a minute, then this should work: `ping whatever.localhost`.\n     [main]\n     dns=dnsmasq\n \n-**Qubes OS:** Assuming you use a stand-alone Debian qube (i.e. VM) for developing\n+#### Qubes OS\n+\n+Assuming you use a stand-alone Debian qube (i.e. VM) for developing\n Talkyard, then, follow the instructions for Debian just above. And, you also need\n to tell Qubes OS to actually start NetworkManager in the qube â€” starting it from\n inside the qube itself won't work. In dom0, do this:\n@@ -45,7 +53,8 @@ inside the qube itself won't work. In dom0, do this:\n And apparently you need to reboot the qube too.\n \n \n-#### Mac\n+Mac\n+-----------------------------\n \n Use dnsmasq (see http://serverfault.com/a/118589/44112 ).\n \n@@ -61,6 +70,7 @@ I don't have a Mac, but this supposedly works:\n     sudo port load dnsmasq\n \n \n-#### Windows\n+Windows\n+-----------------------------\n \n I don't know. Ideas welcome"
    },
    {
      "sha": "299646764f003251e860c246bb9bb237dc7c51ff",
      "filename": "tests/e2e/specs/create-site-github-oauth-uppercase-email.test.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/78091625293a9c81e9fbad51e68ed3f3ee84ce73/tests/e2e/specs/create-site-github-oauth-uppercase-email.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/78091625293a9c81e9fbad51e68ed3f3ee84ce73/tests/e2e/specs/create-site-github-oauth-uppercase-email.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/create-site-github-oauth-uppercase-email.test.ts?ref=78091625293a9c81e9fbad51e68ed3f3ee84ce73",
      "patch": "@@ -40,10 +40,7 @@ describe('create-site-github-oauth-uppercase-email  @createsite  @login @github\n   });\n \n   it(\"The email addr local part is too long for a username [6AKBR20Q]\", () => {\n-    const emailAddr = settings.githubUsernameMixedCase;\n-    const localPart = emailAddr.replace(/@.*$/, '');\n-    console.log(`Email: ${emailAddr}, local part: ${localPart}, length: ${localPart.length}`);\n-    assert(localPart.length > c.MaxUsernameLength);\n+    assert(settings.githubUsernameMixedCase.length > c.MaxUsernameLength);\n   });\n \n   it('can create a new site as a GitHub user, when not logged in to GitHub', () => {"
    }
  ]
}
