{
  "sha": "6f367dde26b37738fcd0cbf850e9e81cfd06fe80",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo2ZjM2N2RkZTI2YjM3NzM4ZmNkMGNiZjg1MGU5ZTgxY2ZkMDZmZTgw",
  "commit": {
    "author": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2019-08-01T15:23:23Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-08-01T15:23:23Z"
    },
    "message": "UX: Rename \"Keep Post\" to \"Keep Post Hidden\" when hidden (#7767)\n\n* UX: Rename \"Keep Post\" to \"Keep Post Hidden\" when hidden\r\n\r\nThis is based on this feedback:\r\nhttps://meta.discourse.org/t/category-group-review-moderation/116478/19\r\n\r\nWhen a post is hidden this makes the operation much more clear.\r\n\r\n* REFACTOR: Better support for aliases for actions\r\n\r\nAllow calls on alias actions and delegate to the original one.\r\nThis is less code but also simplifies tests where the action might\r\nbe \"agree_and_keep\" or \"agree_and_keep_hidden\" which are the same.",
    "tree": {
      "sha": "d6653e6b7d123e10b603ef8103698a195a451d15",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/d6653e6b7d123e10b603ef8103698a195a451d15"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/6f367dde26b37738fcd0cbf850e9e81cfd06fe80",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdQwPrCRBK7hj4Ov3rIwAAdHIIAF1kgDiRI/OiomyoNPUAVVWt\njXncFqYDjR7hLEpcF1vvMNoO3Xt4pls/RElF0xjTq6scZXJV5D0Y5RjQDXiVyTyi\n0UKgw7nNDjaCpirU87QJVMinFnCuNcWyVNnevPhA4PVsTM3dBIcXFx7irzXWr++5\nh4hLbO82FqWHPIC4GUXLFUyWCxnyFPkKcC6bFAochyvAc8/RAws+Ky86hrDyqq/x\ndqyfpD5XVfzREFzRSJuOsI0OqsdNOXB5tWe0pkrNLs6b6BGHMDbm9+vPE69tNMIB\nirrKckSaHD5XAD7gb4YCv2fP1dhcteWRRMc3YWbBTO7Xx2nZgS78j3qNa+KgiLs=\n=hY2o\n-----END PGP SIGNATURE-----\n",
      "payload": "tree d6653e6b7d123e10b603ef8103698a195a451d15\nparent 23dd50316cfd1cbb576c342abdc87a73d926faa0\nauthor Robin Ward <robin.ward@gmail.com> 1564673003 -0400\ncommitter GitHub <noreply@github.com> 1564673003 -0400\n\nUX: Rename \"Keep Post\" to \"Keep Post Hidden\" when hidden (#7767)\n\n* UX: Rename \"Keep Post\" to \"Keep Post Hidden\" when hidden\r\n\r\nThis is based on this feedback:\r\nhttps://meta.discourse.org/t/category-group-review-moderation/116478/19\r\n\r\nWhen a post is hidden this makes the operation much more clear.\r\n\r\n* REFACTOR: Better support for aliases for actions\r\n\r\nAllow calls on alias actions and delegate to the original one.\r\nThis is less code but also simplifies tests where the action might\r\nbe \"agree_and_keep\" or \"agree_and_keep_hidden\" which are the same.\r\n"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/6f367dde26b37738fcd0cbf850e9e81cfd06fe80",
  "html_url": "https://github.com/discourse/discourse/commit/6f367dde26b37738fcd0cbf850e9e81cfd06fe80",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/6f367dde26b37738fcd0cbf850e9e81cfd06fe80/comments",
  "author": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "23dd50316cfd1cbb576c342abdc87a73d926faa0",
      "url": "https://api.github.com/repos/discourse/discourse/commits/23dd50316cfd1cbb576c342abdc87a73d926faa0",
      "html_url": "https://github.com/discourse/discourse/commit/23dd50316cfd1cbb576c342abdc87a73d926faa0"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 36,
    "deletions": 16
  },
  "files": [
    {
      "sha": "7558dec431c4b158308be80bfa8f00ead4646c9c",
      "filename": "app/models/reviewable.rb",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/discourse/discourse/blob/6f367dde26b37738fcd0cbf850e9e81cfd06fe80/app/models/reviewable.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f367dde26b37738fcd0cbf850e9e81cfd06fe80/app/models/reviewable.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/reviewable.rb?ref=6f367dde26b37738fcd0cbf850e9e81cfd06fe80",
      "patch": "@@ -41,6 +41,11 @@ def initialize(action_id, klass)\n     Jobs.enqueue(:notify_reviewable, reviewable_id: self.id) if pending?\n   end\n \n+  # Can be used if several actions are equivalent\n+  def self.action_aliases\n+    {}\n+  end\n+\n   # The gaps are in case we want more precision in the future\n   def self.priorities\n     @priorities ||= Enum.new(\n@@ -283,11 +288,15 @@ def update_fields(params, performed_by, version: nil)\n   def perform(performed_by, action_id, args = nil)\n     args ||= {}\n \n+    # Support this action or any aliases\n+    aliases = self.class.action_aliases\n+    valid = [ action_id, aliases.to_a.select { |k, v| v == action_id }.map(&:first) ].flatten\n+\n     # Ensure the user has access to the action\n     actions = actions_for(Guardian.new(performed_by), args)\n-    raise InvalidAction.new(action_id, self.class) unless actions.has?(action_id)\n+    raise InvalidAction.new(action_id, self.class) unless valid.any? { |a| actions.has?(a) }\n \n-    perform_method = \"perform_#{action_id}\".to_sym\n+    perform_method = \"perform_#{aliases[action_id] || action_id}\".to_sym\n     raise InvalidAction.new(action_id, self.class) unless respond_to?(perform_method)\n \n     result = nil"
    },
    {
      "sha": "009c2a78bf0f56ecb4f515c8c1153cb50bad2bd2",
      "filename": "app/models/reviewable_flagged_post.rb",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/discourse/discourse/blob/6f367dde26b37738fcd0cbf850e9e81cfd06fe80/app/models/reviewable_flagged_post.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f367dde26b37738fcd0cbf850e9e81cfd06fe80/app/models/reviewable_flagged_post.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/reviewable_flagged_post.rb?ref=6f367dde26b37738fcd0cbf850e9e81cfd06fe80",
      "patch": "@@ -4,6 +4,14 @@\n \n class ReviewableFlaggedPost < Reviewable\n \n+  # Penalties are handled by the modal after the action is performed\n+  def self.action_aliases\n+    { agree_and_keep_hidden: :agree_and_keep,\n+      agree_and_silence: :agree_and_keep,\n+      agree_and_suspend: :agree_and_keep,\n+      disagree_and_restore: :disagree }\n+  end\n+\n   def self.counts_for(posts)\n     result = {}\n \n@@ -40,7 +48,12 @@ def build_actions(actions, guardian, args)\n       build_action(actions, :agree_and_hide, icon: 'far-eye-slash', bundle: agree)\n     end\n \n-    build_action(actions, :agree_and_keep, icon: 'thumbs-up', bundle: agree)\n+    if post.hidden?\n+      build_action(actions, :agree_and_keep_hidden, icon: 'thumbs-up', bundle: agree)\n+    else\n+      build_action(actions, :agree_and_keep, icon: 'thumbs-up', bundle: agree)\n+    end\n+\n     if guardian.can_suspend?(target_created_by)\n       build_action(actions, :agree_and_suspend, icon: 'ban', bundle: agree, client_action: 'suspend')\n       build_action(actions, :agree_and_silence, icon: 'microphone-slash', bundle: agree, client_action: 'silence')\n@@ -119,19 +132,10 @@ def perform_ignore(performed_by, args)\n     end\n   end\n \n-  # Penalties are handled by the modal after the action is performed\n   def perform_agree_and_keep(performed_by, args)\n     agree(performed_by, args)\n   end\n \n-  def perform_agree_and_suspend(performed_by, args)\n-    agree(performed_by, args)\n-  end\n-\n-  def perform_agree_and_silence(performed_by, args)\n-    agree(performed_by, args)\n-  end\n-\n   def perform_delete_spammer(performed_by, args)\n     UserDestroyer.new(performed_by).destroy(\n       post.user,\n@@ -159,10 +163,6 @@ def perform_agree_and_restore(performed_by, args)\n     end\n   end\n \n-  def perform_disagree_and_restore(performed_by, args)\n-    perform_disagree(performed_by, args)\n-  end\n-\n   def perform_disagree(performed_by, args)\n     # -1 is the automatic system clear\n     action_type_ids ="
    },
    {
      "sha": "7ba365e95840debbf942af698624b11b364ab3bb",
      "filename": "config/locales/server.en.yml",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/discourse/discourse/blob/6f367dde26b37738fcd0cbf850e9e81cfd06fe80/config/locales/server.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/6f367dde26b37738fcd0cbf850e9e81cfd06fe80/config/locales/server.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/server.en.yml?ref=6f367dde26b37738fcd0cbf850e9e81cfd06fe80",
      "patch": "@@ -4492,6 +4492,9 @@ en:\n       agree_and_keep:\n         title: \"Keep Post\"\n         description: \"Agree with flag and keep the post unchanged.\"\n+      agree_and_keep_hidden:\n+        title: \"Keep Post Hidden\"\n+        description: \"Agree with flag and leave the post hidden.\"\n       agree_and_suspend:\n         title: \"Suspend User\"\n         description: \"Agree with flag and suspend the user.\""
    },
    {
      "sha": "5323efcc41aaec4a4ef3960c6d14a2a6606efb0f",
      "filename": "spec/models/reviewable_flagged_post_spec.rb",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/6f367dde26b37738fcd0cbf850e9e81cfd06fe80/spec/models/reviewable_flagged_post_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/6f367dde26b37738fcd0cbf850e9e81cfd06fe80/spec/models/reviewable_flagged_post_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/reviewable_flagged_post_spec.rb?ref=6f367dde26b37738fcd0cbf850e9e81cfd06fe80",
      "patch": "@@ -31,6 +31,7 @@ def pending_count\n         actions = reviewable.actions_for(guardian)\n         expect(actions.has?(:agree_and_hide)).to eq(true)\n         expect(actions.has?(:agree_and_keep)).to eq(true)\n+        expect(actions.has?(:agree_and_keep_hidden)).to eq(false)\n         expect(actions.has?(:agree_and_silence)).to eq(true)\n         expect(actions.has?(:agree_and_suspend)).to eq(true)\n         expect(actions.has?(:delete_spammer)).to eq(true)\n@@ -54,6 +55,13 @@ def pending_count\n         expect(actions.has?(:delete_and_replies)).to eq(false)\n       end\n \n+      it \"changes `agree_and_keep` to `agree_and_keep_hidden` if it's been hidden\" do\n+        post.hidden = true\n+        actions = reviewable.actions_for(guardian)\n+        expect(actions.has?(:agree_and_keep)).to eq(false)\n+        expect(actions.has?(:agree_and_keep_hidden)).to eq(true)\n+      end\n+\n       it \"returns `agree_and_restore` if the post is user deleted\" do\n         post.update(user_deleted: true)\n         expect(reviewable.actions_for(guardian).has?(:agree_and_restore)).to eq(true)"
    }
  ]
}
