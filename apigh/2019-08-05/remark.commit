{
  "sha": "1c6c9d6dcf6c94dabfc7347008480e43e7fbf20f",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjFjNmM5ZDZkY2Y2Yzk0ZGFiZmM3MzQ3MDA4NDgwZTQzZTdmYmYyMGY=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-08-05T06:28:14Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-08-05T06:28:14Z"
    },
    "message": "increase timeouts in unstable tests",
    "tree": {
      "sha": "d50d047b470194eaf57b791d246ca5df7e99df59",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/d50d047b470194eaf57b791d246ca5df7e99df59"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/1c6c9d6dcf6c94dabfc7347008480e43e7fbf20f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/1c6c9d6dcf6c94dabfc7347008480e43e7fbf20f",
  "html_url": "https://github.com/umputun/remark/commit/1c6c9d6dcf6c94dabfc7347008480e43e7fbf20f",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/1c6c9d6dcf6c94dabfc7347008480e43e7fbf20f/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ae1f00f3a41ea26be7f2f9dc8c3aa53c784f93ea",
      "url": "https://api.github.com/repos/umputun/remark/commits/ae1f00f3a41ea26be7f2f9dc8c3aa53c784f93ea",
      "html_url": "https://github.com/umputun/remark/commit/ae1f00f3a41ea26be7f2f9dc8c3aa53c784f93ea"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 8,
    "deletions": 9
  },
  "files": [
    {
      "sha": "bd3b6f79d657a687f3adb202ec516c9c1b39ccdf",
      "filename": "backend/app/cmd/server_test.go",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/umputun/remark/blob/1c6c9d6dcf6c94dabfc7347008480e43e7fbf20f/backend/app/cmd/server_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c6c9d6dcf6c94dabfc7347008480e43e7fbf20f/backend/app/cmd/server_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/server_test.go?ref=1c6c9d6dcf6c94dabfc7347008480e43e7fbf20f",
      "patch": "@@ -88,7 +88,7 @@ func TestServerApp_DevMode(t *testing.T) {\n \n func TestServerApp_AnonMode(t *testing.T) {\n \tport := rand.Intn(40000) + 10000\n-\tapp, ctx := prepServerApp(t, 500*time.Millisecond, func(o ServerCommand) ServerCommand {\n+\tapp, ctx := prepServerApp(t, 1000*time.Millisecond, func(o ServerCommand) ServerCommand {\n \t\to.Port = port\n \t\to.Auth.Anonymous = true\n \t\treturn o\n@@ -104,7 +104,7 @@ func TestServerApp_AnonMode(t *testing.T) {\n \tresp, err := http.Get(fmt.Sprintf(\"http://localhost:%d/api/v1/ping\", port))\n \trequire.Nil(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \tbody, err := ioutil.ReadAll(resp.Body)\n \tassert.Nil(t, err)\n \tassert.Equal(t, \"pong\", string(body))\n@@ -113,19 +113,19 @@ func TestServerApp_AnonMode(t *testing.T) {\n \tresp, err = http.Get(fmt.Sprintf(\"http://localhost:%d/auth/anonymous/login?user=blah123&aud=remark42\", port))\n \trequire.Nil(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 200, resp.StatusCode)\n+\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n \n \t// try to login with bad name\n \tresp, err = http.Get(fmt.Sprintf(\"http://localhost:%d/auth/anonymous/login?user=**blah123&aud=remark42\", port))\n \trequire.Nil(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 403, resp.StatusCode)\n+\tassert.Equal(t, http.StatusForbidden, resp.StatusCode)\n \n \t// try to login with short name\n \tresp, err = http.Get(fmt.Sprintf(\"http://localhost:%d/auth/anonymous/login?user=bl%20%20&aud=remark42\", port))\n \trequire.Nil(t, err)\n \tdefer resp.Body.Close()\n-\tassert.Equal(t, 403, resp.StatusCode)\n+\tassert.Equal(t, http.StatusForbidden, resp.StatusCode)\n \n \tapp.Wait()\n }\n@@ -355,7 +355,7 @@ func TestServerAuthHooks(t *testing.T) {\n \t})\n \n \tgo func() { _ = app.run(ctx) }()\n-\ttime.Sleep(100 * time.Millisecond) // let server start\n+\ttime.Sleep(150 * time.Millisecond) // let server start\n \n \t// make a token for user dev\n \ttkService := app.restSrv.Authenticator.TokenService()\n@@ -378,7 +378,7 @@ func TestServerAuthHooks(t *testing.T) {\n \tt.Log(tk)\n \n \t// add comment\n-\tclient := http.Client{Timeout: 1 * time.Second}\n+\tclient := http.Client{Timeout: 2 * time.Second}\n \treq, err := http.NewRequest(\"POST\", fmt.Sprintf(\"http://localhost:%d/api/v1/comment\", port),\n \t\tstrings.NewReader(`{\"text\": \"test 123\", \"locator\":{\"url\": \"https://radio-t.com/p/2018/12/29/podcast-630/\", \"site\": \"remark\"}}`))\n \trequire.NoError(t, err)"
    },
    {
      "sha": "5bc7694ab81e19634bf7c39061544275812c861f",
      "filename": "backend/app/rest/api/rest_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/1c6c9d6dcf6c94dabfc7347008480e43e7fbf20f/backend/app/rest/api/rest_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/1c6c9d6dcf6c94dabfc7347008480e43e7fbf20f/backend/app/rest/api/rest_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_test.go?ref=1c6c9d6dcf6c94dabfc7347008480e43e7fbf20f",
      "patch": "@@ -80,7 +80,7 @@ func TestRest_Shutdown(t *testing.T) {\n \tsrv := Rest{Authenticator: &auth.Service{}, ImageProxy: &proxy.Image{}}\n \n \tgo func() {\n-\t\ttime.Sleep(100 * time.Millisecond)\n+\t\ttime.Sleep(200 * time.Millisecond)\n \t\tsrv.Shutdown()\n \t}()\n \n@@ -282,7 +282,6 @@ func TestRest_parseError(t *testing.T) {\n }\n \n func startupT(t *testing.T) (ts *httptest.Server, srv *Rest, teardown func()) {\n-\t// log.Setup(log.Out(ioutil.Discard))\n \tlog.Setup(log.CallerFile, log.CallerFunc, log.Msec, log.LevelBraces)\n \n \ttestDb := fmt.Sprintf(\"/tmp/test-remark-%d.db\", rand.Int31())"
    }
  ]
}
