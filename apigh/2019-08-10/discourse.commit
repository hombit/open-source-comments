{
  "sha": "e4f14ca3d79b0cc19a12348e330e2165a9364028",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODplNGYxNGNhM2Q3OWIwY2MxOWExMjM0OGUzMzBlMjE2NWE5MzY0MDI4",
  "commit": {
    "author": {
      "name": "Gerhard Schlager",
      "email": "mail@gerhard-schlager.at",
      "date": "2019-08-10T10:02:12Z"
    },
    "committer": {
      "name": "Gerhard Schlager",
      "email": "mail@gerhard-schlager.at",
      "date": "2019-08-10T10:30:16Z"
    },
    "message": "FIX: Disallow user self-delete when user posted in PMs\n\nAll posts created by the user are counted unless they are deleted,\nbelong to a PM sent between a non-human user and the user or belong\nto a PM created by the user which doesn't have any other recipients.\n\nIt also makes the guardian prevent self-deletes when SSO is enabled.",
    "tree": {
      "sha": "714f718bd37cba38dbbd3511bb151243be12cee1",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/714f718bd37cba38dbbd3511bb151243be12cee1"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/e4f14ca3d79b0cc19a12348e330e2165a9364028",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/e4f14ca3d79b0cc19a12348e330e2165a9364028",
  "html_url": "https://github.com/discourse/discourse/commit/e4f14ca3d79b0cc19a12348e330e2165a9364028",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/e4f14ca3d79b0cc19a12348e330e2165a9364028/comments",
  "author": {
    "login": "gschlager",
    "id": 473736,
    "node_id": "MDQ6VXNlcjQ3MzczNg==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/473736?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gschlager",
    "html_url": "https://github.com/gschlager",
    "followers_url": "https://api.github.com/users/gschlager/followers",
    "following_url": "https://api.github.com/users/gschlager/following{/other_user}",
    "gists_url": "https://api.github.com/users/gschlager/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gschlager/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gschlager/subscriptions",
    "organizations_url": "https://api.github.com/users/gschlager/orgs",
    "repos_url": "https://api.github.com/users/gschlager/repos",
    "events_url": "https://api.github.com/users/gschlager/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gschlager/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "gschlager",
    "id": 473736,
    "node_id": "MDQ6VXNlcjQ3MzczNg==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/473736?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gschlager",
    "html_url": "https://github.com/gschlager",
    "followers_url": "https://api.github.com/users/gschlager/followers",
    "following_url": "https://api.github.com/users/gschlager/following{/other_user}",
    "gists_url": "https://api.github.com/users/gschlager/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gschlager/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gschlager/subscriptions",
    "organizations_url": "https://api.github.com/users/gschlager/orgs",
    "repos_url": "https://api.github.com/users/gschlager/repos",
    "events_url": "https://api.github.com/users/gschlager/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gschlager/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9f445bec093052045694558f5c197383adadf6bf",
      "url": "https://api.github.com/repos/discourse/discourse/commits/9f445bec093052045694558f5c197383adadf6bf",
      "html_url": "https://github.com/discourse/discourse/commit/9f445bec093052045694558f5c197383adadf6bf"
    }
  ],
  "stats": {
    "total": 279,
    "additions": 185,
    "deletions": 94
  },
  "files": [
    {
      "sha": "84ac5efed42e89200b2d2ff6d8db80ba66bea9e6",
      "filename": "app/assets/javascripts/discourse/models/user.js.es6",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/discourse/discourse/blob/e4f14ca3d79b0cc19a12348e330e2165a9364028/app/assets/javascripts/discourse/models/user.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/e4f14ca3d79b0cc19a12348e330e2165a9364028/app/assets/javascripts/discourse/models/user.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/models/user.js.es6?ref=e4f14ca3d79b0cc19a12348e330e2165a9364028",
      "patch": "@@ -630,13 +630,9 @@ const User = RestModel.extend({\n     );\n   },\n \n-  @computed(\"can_delete_account\", \"reply_count\", \"topic_count\")\n-  canDeleteAccount(canDeleteAccount, replyCount, topicCount) {\n-    return (\n-      !Discourse.SiteSettings.enable_sso &&\n-      canDeleteAccount &&\n-      (replyCount || 0) + (topicCount || 0) <= 1\n-    );\n+  @computed(\"can_delete_account\")\n+  canDeleteAccount(canDeleteAccount) {\n+    return !Discourse.SiteSettings.enable_sso && canDeleteAccount;\n   },\n \n   delete: function() {"
    },
    {
      "sha": "040c3fad45d8febf572803b5b2b9a4b74e584b71",
      "filename": "app/models/user.rb",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/discourse/discourse/blob/e4f14ca3d79b0cc19a12348e330e2165a9364028/app/models/user.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e4f14ca3d79b0cc19a12348e330e2165a9364028/app/models/user.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/user.rb?ref=e4f14ca3d79b0cc19a12348e330e2165a9364028",
      "patch": "@@ -236,6 +236,9 @@ module NewTopicDuration\n     LAST_VISIT = -2\n   end\n \n+  MAX_SELF_DELETE_POST_COUNT ||= 1\n+  MAX_STAFF_DELETE_POST_COUNT ||= 5\n+\n   def self.max_password_length\n     200\n   end\n@@ -1251,6 +1254,36 @@ def create_reviewable\n     Jobs.enqueue(:create_user_reviewable, user_id: self.id)\n   end\n \n+  def has_more_posts_than?(max_post_count)\n+    return true if user_stat && (user_stat.topic_count + user_stat.post_count) > max_post_count\n+\n+    DB.query_single(<<~SQL, user_id: self.id).first > max_post_count\n+      SELECT COUNT(1)\n+      FROM (\n+        SELECT 1\n+        FROM posts p\n+               JOIN topics t ON (p.topic_id = t.id)\n+        WHERE p.user_id = :user_id AND\n+          p.deleted_at IS NULL AND\n+          t.deleted_at IS NULL AND\n+          (\n+            t.archetype <> 'private_message' OR\n+              EXISTS(\n+                  SELECT 1\n+                  FROM topic_allowed_users a\n+                  WHERE a.topic_id = t.id AND a.user_id > 0 AND a.user_id <> :user_id\n+                ) OR\n+              EXISTS(\n+                  SELECT 1\n+                  FROM topic_allowed_groups g\n+                  WHERE g.topic_id = p.topic_id\n+                )\n+            )\n+        LIMIT #{max_post_count + 1}\n+      ) x\n+    SQL\n+  end\n+\n   protected\n \n   def badge_grant"
    },
    {
      "sha": "984969b1f226159e66354681c9fe6efec76b6e2c",
      "filename": "lib/guardian/user_guardian.rb",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/e4f14ca3d79b0cc19a12348e330e2165a9364028/lib/guardian/user_guardian.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e4f14ca3d79b0cc19a12348e330e2165a9364028/lib/guardian/user_guardian.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/guardian/user_guardian.rb?ref=e4f14ca3d79b0cc19a12348e330e2165a9364028",
      "patch": "@@ -61,9 +61,14 @@ def can_unsilence_user?(user)\n   def can_delete_user?(user)\n     return false if user.nil? || user.admin?\n     if is_me?(user)\n-      user.post_count <= 1\n+      !SiteSetting.enable_sso &&\n+      !user.has_more_posts_than?(User::MAX_SELF_DELETE_POST_COUNT)\n     else\n-      is_staff? && (user.first_post_created_at.nil? || user.post_count <= 5 || user.first_post_created_at > SiteSetting.delete_user_max_post_age.to_i.days.ago)\n+      is_staff? && (\n+        user.first_post_created_at.nil? ||\n+          !user.has_more_posts_than?(User::MAX_STAFF_DELETE_POST_COUNT) ||\n+          user.first_post_created_at > SiteSetting.delete_user_max_post_age.to_i.days.ago\n+      )\n     end\n   end\n "
    },
    {
      "sha": "12fbdd02a21f946ad67b97024e9459daf645564d",
      "filename": "spec/components/guardian/user_guardian_spec.rb",
      "status": "modified",
      "additions": 142,
      "deletions": 4,
      "changes": 146,
      "blob_url": "https://github.com/discourse/discourse/blob/e4f14ca3d79b0cc19a12348e330e2165a9364028/spec/components/guardian/user_guardian_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e4f14ca3d79b0cc19a12348e330e2165a9364028/spec/components/guardian/user_guardian_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/guardian/user_guardian_spec.rb?ref=e4f14ca3d79b0cc19a12348e330e2165a9364028",
      "patch": "@@ -5,15 +5,15 @@\n describe UserGuardian do\n \n   let :user do\n-    Fabricate.build(:user, id: 1)\n+    Fabricate(:user)\n   end\n \n   let :moderator do\n-    Fabricate.build(:moderator, id: 2)\n+    Fabricate(:moderator)\n   end\n \n   let :admin do\n-    Fabricate.build(:admin, id: 3)\n+    Fabricate(:admin)\n   end\n \n   let(:user_avatar) do\n@@ -155,7 +155,7 @@\n     end\n \n     let :user2 do\n-      Fabricate.build(:user, id: 4)\n+      Fabricate(:user)\n     end\n \n     it \"returns all fields for staff\" do\n@@ -179,4 +179,142 @@\n       expect(guardian.allowed_user_field_ids(user)).to contain_exactly(*fields.map(&:id))\n     end\n   end\n+\n+  describe \"#can_delete_user?\" do\n+    shared_examples \"can_delete_user examples\" do\n+      it \"isn't allowed if user is an admin\" do\n+        another_admin = Fabricate(:admin)\n+        expect(guardian.can_delete_user?(another_admin)).to eq(false)\n+      end\n+    end\n+\n+    shared_examples \"can_delete_user staff examples\" do\n+      it \"is allowed when user didn't create a post yet\" do\n+        expect(user.first_post_created_at).to be_nil\n+        expect(guardian.can_delete_user?(user)).to eq(true)\n+      end\n+\n+      context \"when user created too many posts\" do\n+        before do\n+          (User::MAX_STAFF_DELETE_POST_COUNT + 1).times { Fabricate(:post, user: user) }\n+        end\n+\n+        it \"is allowed when user created the first post within delete_user_max_post_age days\" do\n+          SiteSetting.delete_user_max_post_age = 2\n+\n+          user.user_stat = UserStat.new(new_since: 3.days.ago, first_post_created_at: 1.day.ago)\n+          expect(guardian.can_delete_user?(user)).to eq(true)\n+\n+          user.user_stat = UserStat.new(new_since: 3.days.ago, first_post_created_at: 3.day.ago)\n+          expect(guardian.can_delete_user?(user)).to eq(false)\n+        end\n+      end\n+\n+      context \"when user didn't create many posts\" do\n+        before do\n+          (User::MAX_STAFF_DELETE_POST_COUNT - 1).times { Fabricate(:post, user: user) }\n+        end\n+\n+        it \"is allowed when even when user created the first post before delete_user_max_post_age days\" do\n+          SiteSetting.delete_user_max_post_age = 2\n+\n+          user.user_stat = UserStat.new(new_since: 3.days.ago, first_post_created_at: 3.day.ago)\n+          expect(guardian.can_delete_user?(user)).to eq(true)\n+        end\n+      end\n+    end\n+\n+    context \"delete myself\" do\n+      let(:guardian) { Guardian.new(user) }\n+\n+      include_examples \"can_delete_user examples\"\n+\n+      it \"isn't allowed when SSO is enabled\" do\n+        SiteSetting.sso_url = \"https://www.example.com/sso\"\n+        SiteSetting.enable_sso = true\n+        expect(guardian.can_delete_user?(user)).to eq(false)\n+      end\n+\n+      it \"isn't allowed when user created too many posts\" do\n+        Fabricate(:post, user: user)\n+        expect(guardian.can_delete_user?(user)).to eq(true)\n+\n+        Fabricate(:post, user: user)\n+        expect(guardian.can_delete_user?(user)).to eq(false)\n+      end\n+\n+      it \"isn't allowed when user created too many posts in PM\" do\n+        topic = Fabricate(:private_message_topic, user: user)\n+\n+        Fabricate(:post, user: user, topic: topic)\n+        expect(guardian.can_delete_user?(user)).to eq(true)\n+\n+        Fabricate(:post, user: user, topic: topic)\n+        expect(guardian.can_delete_user?(user)).to eq(false)\n+      end\n+\n+      it \"is allowed when user responded to PM from system user\" do\n+        topic = Fabricate(:private_message_topic, user: Discourse.system_user, topic_allowed_users: [\n+          Fabricate.build(:topic_allowed_user, user: Discourse.system_user),\n+          Fabricate.build(:topic_allowed_user, user: user)\n+        ])\n+\n+        Fabricate(:post, user: user, topic: topic)\n+        expect(guardian.can_delete_user?(user)).to eq(true)\n+\n+        Fabricate(:post, user: user, topic: topic)\n+        expect(guardian.can_delete_user?(user)).to eq(true)\n+      end\n+\n+      it \"is allowed when user created multiple posts in PMs to themself\" do\n+        topic = Fabricate(:private_message_topic, user: user, topic_allowed_users: [\n+          Fabricate.build(:topic_allowed_user, user: user)\n+        ])\n+\n+        Fabricate(:post, user: user, topic: topic)\n+        Fabricate(:post, user: user, topic: topic)\n+        expect(guardian.can_delete_user?(user)).to eq(true)\n+      end\n+\n+      it \"isn't allowed when user created multiple posts in PMs sent to other users\" do\n+        topic = Fabricate(:private_message_topic, user: user, topic_allowed_users: [\n+          Fabricate.build(:topic_allowed_user, user: user),\n+          Fabricate.build(:topic_allowed_user, user: Fabricate(:user))\n+        ])\n+\n+        Fabricate(:post, user: user, topic: topic)\n+        expect(guardian.can_delete_user?(user)).to eq(true)\n+\n+        Fabricate(:post, user: user, topic: topic)\n+        expect(guardian.can_delete_user?(user)).to eq(false)\n+      end\n+\n+      it \"isn't allowed when user created multiple posts in PMs sent to groups\" do\n+        topic = Fabricate(:private_message_topic, user: user, topic_allowed_users: [\n+          Fabricate.build(:topic_allowed_user, user: user)\n+        ], topic_allowed_groups: [\n+          Fabricate.build(:topic_allowed_group, group: Fabricate(:group)),\n+          Fabricate.build(:topic_allowed_group, group: Fabricate(:group))\n+        ])\n+\n+        Fabricate(:post, user: user, topic: topic)\n+        expect(guardian.can_delete_user?(user)).to eq(true)\n+\n+        Fabricate(:post, user: user, topic: topic)\n+        expect(guardian.can_delete_user?(user)).to eq(false)\n+      end\n+    end\n+\n+    context \"for moderators\" do\n+      let(:guardian) { Guardian.new(moderator) }\n+      include_examples \"can_delete_user examples\"\n+      include_examples \"can_delete_user staff examples\"\n+    end\n+\n+    context \"for admins\" do\n+      let(:guardian) { Guardian.new(admin) }\n+      include_examples \"can_delete_user examples\"\n+      include_examples \"can_delete_user staff examples\"\n+    end\n+  end\n end"
    },
    {
      "sha": "69bdc1e12baca6a4ca1908c5544c7e9011d5ddcf",
      "filename": "spec/components/guardian_spec.rb",
      "status": "modified",
      "additions": 0,
      "deletions": 81,
      "changes": 81,
      "blob_url": "https://github.com/discourse/discourse/blob/e4f14ca3d79b0cc19a12348e330e2165a9364028/spec/components/guardian_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e4f14ca3d79b0cc19a12348e330e2165a9364028/spec/components/guardian_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/guardian_spec.rb?ref=e4f14ca3d79b0cc19a12348e330e2165a9364028",
      "patch": "@@ -2174,87 +2174,6 @@\n \n   end\n \n-  describe \"can_delete_user?\" do\n-    it \"is false without a logged in user\" do\n-      expect(Guardian.new(nil).can_delete_user?(user)).to be_falsey\n-    end\n-\n-    it \"is false without a user to look at\" do\n-      expect(Guardian.new(admin).can_delete_user?(nil)).to be_falsey\n-    end\n-\n-    it \"is false for regular users\" do\n-      expect(Guardian.new(user).can_delete_user?(coding_horror)).to be_falsey\n-    end\n-\n-    context \"delete myself\" do\n-      fab!(:myself) { Fabricate(:user, created_at: 6.months.ago) }\n-      subject      { Guardian.new(myself).can_delete_user?(myself) }\n-\n-      it \"is true to delete myself and I have never made a post\" do\n-        expect(subject).to be_truthy\n-      end\n-\n-      it \"is true to delete myself and I have only made 1 post\" do\n-        myself.stubs(:post_count).returns(1)\n-        expect(subject).to be_truthy\n-      end\n-\n-      it \"is false to delete myself and I have made 2 posts\" do\n-        myself.stubs(:post_count).returns(2)\n-        expect(subject).to be_falsey\n-      end\n-    end\n-\n-    shared_examples \"can_delete_user examples\" do\n-      it \"is true if user is not an admin and has never posted\" do\n-        expect(Guardian.new(actor).can_delete_user?(Fabricate.build(:user, created_at: 100.days.ago))).to be_truthy\n-      end\n-\n-      it \"is true if user is not an admin and first post is not too old\" do\n-        user = Fabricate.build(:user, created_at: 100.days.ago)\n-        user.stubs(:post_count).returns(10)\n-        user.stubs(:first_post_created_at).returns(9.days.ago)\n-        SiteSetting.delete_user_max_post_age = 10\n-        expect(Guardian.new(actor).can_delete_user?(user)).to be_truthy\n-      end\n-\n-      it \"is false if user is an admin\" do\n-        expect(Guardian.new(actor).can_delete_user?(another_admin)).to be_falsey\n-      end\n-\n-      it \"is false if user's first post is too old\" do\n-        user = Fabricate.build(:user, created_at: 100.days.ago)\n-        user.stubs(:post_count).returns(10)\n-        user.stubs(:first_post_created_at).returns(11.days.ago)\n-        SiteSetting.delete_user_max_post_age = 10\n-        expect(Guardian.new(actor).can_delete_user?(user)).to be_falsey\n-      end\n-    end\n-\n-    shared_examples \"can_delete_user staff examples\" do\n-      it \"is true if posts are less than or equal to 5\" do\n-        user = Fabricate.build(:user, created_at: 100.days.ago)\n-        user.stubs(:post_count).returns(4)\n-        user.stubs(:first_post_created_at).returns(11.days.ago)\n-        SiteSetting.delete_user_max_post_age = 10\n-        expect(Guardian.new(actor).can_delete_user?(user)).to be_truthy\n-      end\n-    end\n-\n-    context \"for moderators\" do\n-      let(:actor) { moderator }\n-      include_examples \"can_delete_user examples\"\n-      include_examples \"can_delete_user staff examples\"\n-    end\n-\n-    context \"for admins\" do\n-      let(:actor) { admin }\n-      include_examples \"can_delete_user examples\"\n-      include_examples \"can_delete_user staff examples\"\n-    end\n-  end\n-\n   describe \"can_delete_all_posts?\" do\n     it \"is false without a logged in user\" do\n       expect(Guardian.new(nil).can_delete_all_posts?(user)).to be_falsey"
    }
  ]
}
