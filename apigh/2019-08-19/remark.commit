{
  "sha": "9a5684de711d333343561cb74f7a4123137628d6",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjlhNTY4NGRlNzExZDMzMzM0MzU2MWNiNzRmN2E0MTIzMTM3NjI4ZDY=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-08-19T06:37:56Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-08-19T06:37:56Z"
    },
    "message": "rename Blocked to better named BlockedUsers",
    "tree": {
      "sha": "981fb45d919222cc1b86c1701437f44aa5d09390",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/981fb45d919222cc1b86c1701437f44aa5d09390"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/9a5684de711d333343561cb74f7a4123137628d6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/9a5684de711d333343561cb74f7a4123137628d6",
  "html_url": "https://github.com/umputun/remark/commit/9a5684de711d333343561cb74f7a4123137628d6",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/9a5684de711d333343561cb74f7a4123137628d6/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d6d0109e8048d08cb65d949496e07ef3c9180fcd",
      "url": "https://api.github.com/repos/umputun/remark/commits/d6d0109e8048d08cb65d949496e07ef3c9180fcd",
      "html_url": "https://github.com/umputun/remark/commit/d6d0109e8048d08cb65d949496e07ef3c9180fcd"
    }
  ],
  "stats": {
    "total": 10,
    "additions": 5,
    "deletions": 5
  },
  "files": [
    {
      "sha": "0fc6c5e34c2cc70569127f8d36db8b563f1391a8",
      "filename": "backend/app/rest/api/admin.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/9a5684de711d333343561cb74f7a4123137628d6/backend/app/rest/api/admin.go",
      "raw_url": "https://github.com/umputun/remark/raw/9a5684de711d333343561cb74f7a4123137628d6/backend/app/rest/api/admin.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/admin.go?ref=9a5684de711d333343561cb74f7a4123137628d6",
      "patch": "@@ -32,7 +32,7 @@ type adminStore interface {\n \tUser(siteID, userID string, limit, skip int, user store.User) ([]store.Comment, error)\n \tIsBlocked(siteID string, userID string) bool\n \tSetBlock(siteID string, userID string, status bool, ttl time.Duration) error\n-\tBlocked(siteID string) ([]store.BlockedUser, error)\n+\tBlockedUsers(siteID string) ([]store.BlockedUser, error)\n \tInfo(locator store.Locator, readonlyAge int) (store.PostInfo, error)\n \tSetTitle(locator store.Locator, commentID string) (comment store.Comment, err error)\n \tSetVerified(siteID string, userID string, status bool) error\n@@ -158,7 +158,7 @@ func (a *admin) setBlockCtrl(w http.ResponseWriter, r *http.Request) {\n // GET /blocked?site=siteID - list blocked users\n func (a *admin) blockedUsersCtrl(w http.ResponseWriter, r *http.Request) {\n \tsiteID := r.URL.Query().Get(\"site\")\n-\tusers, err := a.dataService.Blocked(siteID)\n+\tusers, err := a.dataService.BlockedUsers(siteID)\n \tif err != nil {\n \t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't get blocked users\", rest.ErrSiteNotFound)\n \t\treturn"
    },
    {
      "sha": "b36d6647336d0ca75204acc3667c3a33dc10318d",
      "filename": "backend/app/store/service/service.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/9a5684de711d333343561cb74f7a4123137628d6/backend/app/store/service/service.go",
      "raw_url": "https://github.com/umputun/remark/raw/9a5684de711d333343561cb74f7a4123137628d6/backend/app/store/service/service.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/service/service.go?ref=9a5684de711d333343561cb74f7a4123137628d6",
      "patch": "@@ -536,8 +536,8 @@ func (s *DataStore) SetBlock(siteID string, userID string, status bool, ttl time\n \treturn err\n }\n \n-// Blocked returns list with all blocked users\n-func (s *DataStore) Blocked(siteID string) (res []store.BlockedUser, err error) {\n+// BlockedUsers returns list with all blocked users for given siteID\n+func (s *DataStore) BlockedUsers(siteID string) (res []store.BlockedUser, err error) {\n \tblocked, e := s.Engine.ListFlags(engine.FlagRequest{Locator: store.Locator{SiteID: siteID}, Flag: engine.Blocked})\n \tif e != nil {\n \t\treturn nil, errors.Wrapf(err, \"can't get list of blocked users for %s\", siteID)\n@@ -606,7 +606,7 @@ func (s *DataStore) Metas(siteID string) (umetas []UserMetaData, pmetas []PostMe\n \tm := map[string]UserMetaData{}\n \n \t// process blocked users\n-\tblocked, err := s.Blocked(siteID)\n+\tblocked, err := s.BlockedUsers(siteID)\n \tif err != nil {\n \t\treturn nil, nil, errors.Wrapf(err, \"can't get list of blocked users for %s\", siteID)\n \t}"
    }
  ]
}
