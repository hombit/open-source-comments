{
  "sha": "8d109901b820a111e333c7324d19347ac8c883fd",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjhkMTA5OTAxYjgyMGExMTFlMzMzYzczMjRkMTkzNDdhYzhjODgzZmQ=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-08-20T05:07:19Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-08-20T05:07:19Z"
    },
    "message": "Merge branch 'master' of github.com:umputun/remark",
    "tree": {
      "sha": "b3b9c3c20cd0393ccf004ac54aa84d983fdcdfc3",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/b3b9c3c20cd0393ccf004ac54aa84d983fdcdfc3"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/8d109901b820a111e333c7324d19347ac8c883fd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/8d109901b820a111e333c7324d19347ac8c883fd",
  "html_url": "https://github.com/umputun/remark/commit/8d109901b820a111e333c7324d19347ac8c883fd",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/8d109901b820a111e333c7324d19347ac8c883fd/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "07b16c46dc2cfade24b41946e40c87a546667cf4",
      "url": "https://api.github.com/repos/umputun/remark/commits/07b16c46dc2cfade24b41946e40c87a546667cf4",
      "html_url": "https://github.com/umputun/remark/commit/07b16c46dc2cfade24b41946e40c87a546667cf4"
    },
    {
      "sha": "2e90b6172b8db7fd1f959eecdfca2e2a117e3f85",
      "url": "https://api.github.com/repos/umputun/remark/commits/2e90b6172b8db7fd1f959eecdfca2e2a117e3f85",
      "html_url": "https://github.com/umputun/remark/commit/2e90b6172b8db7fd1f959eecdfca2e2a117e3f85"
    }
  ],
  "stats": {
    "total": 281,
    "additions": 219,
    "deletions": 62
  },
  "files": [
    {
      "sha": "38842637218e6de0a642ee5ed3096d0b1f799126",
      "filename": "README.md",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/8d109901b820a111e333c7324d19347ac8c883fd/README.md",
      "raw_url": "https://github.com/umputun/remark/raw/8d109901b820a111e333c7324d19347ac8c883fd/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/README.md?ref=8d109901b820a111e333c7324d19347ac8c883fd",
      "patch": "@@ -161,6 +161,8 @@ _this is the recommended way to run remark42_\n | ssl.acme-email          | SSL_ACME_EMAIL          |                          | admin email for receiving notifications from LE  |\n | max-comment             | MAX_COMMENT_SIZE        | `2048`                   | comment's size limit                             |\n | max-votes               | MAX_VOTES               | `-1`                     | votes limit per comment, `-1` - unlimited        |\n+| votes-ip                | VOTES_IP                |`false`                   | restrict votes from the same ip                  |\n+| votes-ip-time           | VOTES_IP_TIME           |`5m`                      | same ip vote restriction time, `0s` - unlimited  |\n | low-score               | LOW_SCORE               | `-5`                     | low score threshold                              |\n | critical-score          | CRITICAL_SCORE          | `-10`                    | critical score threshold                         |\n | positive-score          | POSITIVE_SCORE          | `false`                  | restricts comment's score to be only positive    |"
    },
    {
      "sha": "0922cd500ab66f0c52135ae2ee82471b8abcb8c2",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark/raw/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/server.go?ref=8d109901b820a111e333c7324d19347ac8c883fd",
      "patch": "@@ -56,6 +56,8 @@ type ServerCommand struct {\n \tImageProxy      bool          `long:\"img-proxy\" env:\"IMG_PROXY\" description:\"enable image proxy\"`\n \tMaxCommentSize  int           `long:\"max-comment\" env:\"MAX_COMMENT_SIZE\" default:\"2048\" description:\"max comment size\"`\n \tMaxVotes        int           `long:\"max-votes\" env:\"MAX_VOTES\" default:\"-1\" description:\"maximum number of votes per comment\"`\n+\tRestrictVoteIP  bool          `long:\"votes-ip\" env:\"VOTES_IP\" description:\"restrict votes from the same ip\"`\n+\tDurationVoteIP  time.Duration `long:\"votes-ip-time\" env:\"VOTES_IP_TIME\" default:\"5m\" description:\"same ip vote duration\"`\n \tLowScore        int           `long:\"low-score\" env:\"LOW_SCORE\" default:\"-5\" description:\"low score threshold\"`\n \tCriticalScore   int           `long:\"critical-score\" env:\"CRITICAL_SCORE\" default:\"-10\" description:\"critical score threshold\"`\n \tPositiveScore   bool          `long:\"positive-score\" env:\"POSITIVE_SCORE\" description:\"enable positive score only\"`\n@@ -277,6 +279,8 @@ func (s *ServerCommand) newServerApp() (*serverApp, error) {\n \t\tTitleExtractor:         service.NewTitleExtractor(http.Client{Timeout: time.Second * 5}),\n \t\tRestrictedWordsMatcher: service.NewRestrictedWordsMatcher(service.StaticRestrictedWordsLister{Words: s.RestrictedWords}),\n \t}\n+\tdataService.RestrictSameIPVotes.Enabled = s.RestrictVoteIP\n+\tdataService.RestrictSameIPVotes.Duration = s.DurationVoteIP\n \n \tloadingCache, err := s.makeCache()\n \tif err != nil {"
    },
    {
      "sha": "66fa918af7effec314044d9f8ff9a22d9277a56f",
      "filename": "backend/app/rest/api/rest_private.go",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/umputun/remark/blob/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/rest/api/rest_private.go",
      "raw_url": "https://github.com/umputun/remark/raw/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/rest/api/rest_private.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_private.go?ref=8d109901b820a111e333c7324d19347ac8c883fd",
      "patch": "@@ -40,7 +40,7 @@ type private struct {\n type privStore interface {\n \tCreate(comment store.Comment) (commentID string, err error)\n \tEditComment(locator store.Locator, commentID string, req service.EditRequest) (comment store.Comment, err error)\n-\tVote(locator store.Locator, commentID string, userID string, val bool) (comment store.Comment, err error)\n+\tVote(req service.VoteReq) (comment store.Comment, err error)\n \tGet(locator store.Locator, commentID string, user store.User) (store.Comment, error)\n \tUser(siteID, userID string, limit, skip int, user store.User) ([]store.Comment, error)\n \tValidateComment(c *store.Comment) error\n@@ -198,7 +198,14 @@ func (s *private) voteCtrl(w http.ResponseWriter, r *http.Request) {\n \t\treturn\n \t}\n \n-\tcomment, err := s.dataService.Vote(locator, id, user.ID, vote)\n+\treq := service.VoteReq{\n+\t\tLocator:   locator,\n+\t\tCommentID: id,\n+\t\tUserID:    user.ID,\n+\t\tUserIP:    strings.Split(r.RemoteAddr, \":\")[0],\n+\t\tVal:       vote,\n+\t}\n+\tcomment, err := s.dataService.Vote(req)\n \tif err != nil {\n \t\tcode := parseError(err, rest.ErrVoteRejected)\n \t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't vote for comment\", code)"
    },
    {
      "sha": "7b08df94fee15db58f8ff52a2c8fdd24664f7c74",
      "filename": "backend/app/rest/api/rest_private_test.go",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/rest/api/rest_private_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/rest/api/rest_private_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_private_test.go?ref=8d109901b820a111e333c7324d19347ac8c883fd",
      "patch": "@@ -420,8 +420,6 @@ func TestRest_Vote(t *testing.T) {\n \tassert.Equal(t, -1, cr.Score)\n \tassert.Equal(t, 0, cr.Vote, \"no vote info for different user\")\n \tassert.Equal(t, map[string]bool(nil), cr.Votes)\n-\n-\tassert.Equal(t, map[string]bool(nil), cr.Votes)\n }\n \n func TestRest_UserAllData(t *testing.T) {"
    },
    {
      "sha": "cd113a78b9debbeb02f5479c28c64981326a68e7",
      "filename": "backend/app/store/comment.go",
      "status": "modified",
      "additions": 22,
      "deletions": 15,
      "changes": 37,
      "blob_url": "https://github.com/umputun/remark/blob/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/store/comment.go",
      "raw_url": "https://github.com/umputun/remark/raw/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/store/comment.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/comment.go?ref=8d109901b820a111e333c7324d19347ac8c883fd",
      "patch": "@@ -11,21 +11,22 @@ import (\n \n // Comment represents a single comment with optional reference to its parent\n type Comment struct {\n-\tID          string          `json:\"id\" bson:\"_id\"`\n-\tParentID    string          `json:\"pid\"`\n-\tText        string          `json:\"text\"`\n-\tOrig        string          `json:\"orig,omitempty\"`\n-\tUser        User            `json:\"user\"`\n-\tLocator     Locator         `json:\"locator\"`\n-\tScore       int             `json:\"score\"`\n-\tVotes       map[string]bool `json:\"votes,omitempty\"`\n-\tVote        int             `json:\"vote\"` // vote for the current user, -1/1/0.\n-\tControversy float64         `json:\"controversy,omitempty\"`\n-\tTimestamp   time.Time       `json:\"time\" bson:\"time\"`\n-\tEdit        *Edit           `json:\"edit,omitempty\" bson:\"edit,omitempty\"` // pointer to have empty default in json response\n-\tPin         bool            `json:\"pin,omitempty\" bson:\"pin,omitempty\"`\n-\tDeleted     bool            `json:\"delete,omitempty\" bson:\"delete\"`\n-\tPostTitle   string          `json:\"title,omitempty\" bson:\"title\"`\n+\tID          string                 `json:\"id\" bson:\"_id\"`\n+\tParentID    string                 `json:\"pid\"`\n+\tText        string                 `json:\"text\"`\n+\tOrig        string                 `json:\"orig,omitempty\"`\n+\tUser        User                   `json:\"user\"`\n+\tLocator     Locator                `json:\"locator\"`\n+\tScore       int                    `json:\"score\"`\n+\tVotes       map[string]bool        `json:\"votes,omitempty\"`\n+\tVotedIPs    map[string]VotedIPInfo `json:\"voted_ips,omitempty\"` // voted ips (hashes) with TS\n+\tVote        int                    `json:\"vote\"`                // vote for the current user, -1/1/0.\n+\tControversy float64                `json:\"controversy,omitempty\"`\n+\tTimestamp   time.Time              `json:\"time\" bson:\"time\"`\n+\tEdit        *Edit                  `json:\"edit,omitempty\" bson:\"edit,omitempty\"` // pointer to have empty default in json response\n+\tPin         bool                   `json:\"pin,omitempty\" bson:\"pin,omitempty\"`\n+\tDeleted     bool                   `json:\"delete,omitempty\" bson:\"delete\"`\n+\tPostTitle   string                 `json:\"title,omitempty\" bson:\"title\"`\n }\n \n // Locator keeps site and url of the post\n@@ -56,6 +57,12 @@ type BlockedUser struct {\n \tUntil time.Time `json:\"time\"`\n }\n \n+// VotedIPInfo keeps timestamp and voting value (direction). Used as VotedIPs value\n+type VotedIPInfo struct {\n+\tTimestamp time.Time\n+\tValue     bool\n+}\n+\n // DeleteMode defines how much comment info will be erased\n type DeleteMode int\n "
    },
    {
      "sha": "acdf5f435b7f477a933f603eb12c68fab6a09919",
      "filename": "backend/app/store/service/service.go",
      "status": "modified",
      "additions": 68,
      "deletions": 23,
      "changes": 91,
      "blob_url": "https://github.com/umputun/remark/blob/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/store/service/service.go",
      "raw_url": "https://github.com/umputun/remark/raw/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/store/service/service.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/service/service.go?ref=8d109901b820a111e333c7324d19347ac8c883fd",
      "patch": "@@ -24,11 +24,15 @@ import (\n \n // DataStore wraps store.Interface with additional methods\n type DataStore struct {\n-\tEngine                 engine.Interface\n-\tEditDuration           time.Duration\n-\tAdminStore             admin.Store\n-\tMaxCommentSize         int\n-\tMaxVotes               int\n+\tEngine              engine.Interface\n+\tEditDuration        time.Duration\n+\tAdminStore          admin.Store\n+\tMaxCommentSize      int\n+\tMaxVotes            int\n+\tRestrictSameIPVotes struct {\n+\t\tEnabled  bool\n+\t\tDuration time.Duration\n+\t}\n \tPositiveScore          bool\n \tTitleExtractor         *TitleExtractor\n \tRestrictedWordsMatcher *RestrictedWordsMatcher\n@@ -213,29 +217,47 @@ func (s *DataStore) SetPin(locator store.Locator, commentID string, status bool)\n \treturn s.Engine.Update(comment)\n }\n \n+// VoteReq is the request ot make a vote\n+type VoteReq struct {\n+\tLocator   store.Locator\n+\tCommentID string\n+\tUserID    string\n+\tUserIP    string\n+\tVal       bool\n+}\n+\n // Vote for comment by id and locator\n-func (s *DataStore) Vote(locator store.Locator, commentID string, userID string, val bool) (comment store.Comment, err error) {\n+func (s *DataStore) Vote(req VoteReq) (comment store.Comment, err error) {\n \n-\tcLock := s.getScopedLocks(locator.URL) // get lock for URL scope\n-\tcLock.Lock()                           // prevents race on voting\n+\tcLock := s.getScopedLocks(req.Locator.URL) // get lock for URL scope\n+\tcLock.Lock()                               // prevents race on voting\n \tdefer cLock.Unlock()\n \n-\tcomment, err = s.Engine.Get(engine.GetRequest{Locator: locator, CommentID: commentID})\n+\tcomment, err = s.Engine.Get(engine.GetRequest{Locator: req.Locator, CommentID: req.CommentID})\n \tif err != nil {\n \t\treturn comment, err\n \t}\n \n-\tif comment.User.ID == userID && userID != \"dev\" {\n-\t\treturn comment, errors.Errorf(\"user %s can not vote for his own comment %s\", userID, commentID)\n+\tif comment.User.ID == req.UserID && req.UserID != \"dev\" {\n+\t\treturn comment, errors.Errorf(\"user %s can not vote for his own comment %s\", req.UserID, req.CommentID)\n \t}\n \n \tif comment.Votes == nil {\n \t\tcomment.Votes = make(map[string]bool)\n \t}\n-\tv, voted := comment.Votes[userID]\n \n-\tif voted && v == val {\n-\t\treturn comment, errors.Errorf(\"user %s already voted for %s\", userID, commentID)\n+\tv, voted := comment.Votes[req.UserID]\n+\tif voted && v == req.Val {\n+\t\treturn comment, errors.Errorf(\"user %s already voted for %s\", req.UserID, req.CommentID)\n+\t}\n+\n+\tsecret, err := s.AdminStore.Key()\n+\tif err != nil {\n+\t\treturn store.Comment{}, errors.Wrapf(err, \"can't get secret for site %s\", comment.Locator.SiteID)\n+\t}\n+\tuserIPHash := store.HashValue(req.UserIP, secret)\n+\tif s.isSameIPVote(req, userIPHash, comment) {\n+\t\treturn comment, errors.Errorf(\"the same ip %s already voted for %s\", userIPHash, req.CommentID)\n \t}\n \n \tmaxVotes := s.MaxVotes // 0 value allowed and treated as \"no comments allowed\"\n@@ -244,32 +266,39 @@ func (s *DataStore) Vote(locator store.Locator, commentID string, userID string,\n \t}\n \n \tif maxVotes >= 0 && len(comment.Votes) >= maxVotes {\n-\t\treturn comment, errors.Errorf(\"maximum number of votes exceeded for comment %s\", commentID)\n+\t\treturn comment, errors.Errorf(\"maximum number of votes exceeded for comment %s\", req.CommentID)\n \t}\n \n-\tif s.PositiveScore && comment.Score <= 0 && !val {\n-\t\treturn comment, errors.Errorf(\"minimal score reached for comment %s\", commentID)\n+\tif s.PositiveScore && comment.Score <= 0 && !req.Val {\n+\t\treturn comment, errors.Errorf(\"minimal score reached for comment %s\", req.CommentID)\n \t}\n \n \t// reset vote if user changed to opposite\n-\tif voted && v != val {\n-\t\tdelete(comment.Votes, userID)\n+\tif voted && v != req.Val {\n+\t\tdelete(comment.Votes, req.UserID)\n \t}\n \n \t// add to voted map if first vote\n \tif !voted {\n-\t\tcomment.Votes[userID] = val\n+\t\tcomment.Votes[req.UserID] = req.Val\n+\t}\n+\n+\t// add ip hash to voted ip map\n+\tif comment.VotedIPs == nil {\n+\t\tcomment.VotedIPs = map[string]store.VotedIPInfo{}\n \t}\n \n+\tcomment.VotedIPs[userIPHash] = store.VotedIPInfo{Timestamp: time.Now(), Value: req.Val}\n+\n \t// update score\n-\tif val {\n+\tif req.Val {\n \t\tcomment.Score++\n \t} else {\n \t\tcomment.Score--\n \t}\n \n \tcomment.Vote = 0\n-\tif vv, ok := comment.Votes[userID]; ok {\n+\tif vv, ok := comment.Votes[req.UserID]; ok {\n \t\tif vv {\n \t\t\tcomment.Vote = 1\n \t\t} else {\n@@ -278,10 +307,26 @@ func (s *DataStore) Vote(locator store.Locator, commentID string, userID string,\n \t}\n \n \tcomment.Controversy = s.controversy(s.upsAndDowns(comment))\n-\tcomment.Locator = locator\n+\tcomment.Locator = req.Locator\n \treturn comment, s.Engine.Update(comment)\n }\n \n+func (s *DataStore) isSameIPVote(req VoteReq, userIPHash string, comment store.Comment) bool {\n+\tif req.UserIP == \"\" || !s.RestrictSameIPVotes.Enabled {\n+\t\treturn false\n+\t}\n+\n+\tif v, ipFound := comment.VotedIPs[userIPHash]; ipFound {\n+\t\tif v.Value != req.Val {\n+\t\t\treturn false // opposite direction vote allowed\n+\t\t}\n+\t\tif s.RestrictSameIPVotes.Duration == 0 || v.Timestamp.Add(s.RestrictSameIPVotes.Duration).After(time.Now()) {\n+\t\t\treturn true\n+\t\t}\n+\t}\n+\treturn false\n+}\n+\n // controversy calculates controversial index of votes\n // source - https://github.com/reddit-archive/reddit/blob/master/r2/r2/lib/db/_sorts.pyx#L60\n func (s *DataStore) controversy(ups, downs int) float64 {"
    },
    {
      "sha": "088713942fcf74d8fd6217c368c3a5c76bc2242b",
      "filename": "backend/app/store/service/service_test.go",
      "status": "modified",
      "additions": 114,
      "deletions": 20,
      "changes": 134,
      "blob_url": "https://github.com/umputun/remark/blob/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/store/service/service_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/8d109901b820a111e333c7324d19347ac8c883fd/backend/app/store/service/service_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/service/service_test.go?ref=8d109901b820a111e333c7324d19347ac8c883fd",
      "patch": "@@ -183,7 +183,14 @@ func TestService_Vote(t *testing.T) {\n \tassert.Equal(t, map[string]bool(nil), res[0].Votes, \"no votes initially\")\n \n \t// vote +1 as user1\n-\tc, err := b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, \"user1\", true)\n+\treq := VoteReq{\n+\t\tLocator:   store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n+\t\tCommentID: res[0].ID,\n+\t\tUserID:    \"user1\",\n+\t\tUserIP:    \"123\",\n+\t\tVal:       true,\n+\t}\n+\tc, err := b.Vote(req)\n \tassert.NoError(t, err)\n \tassert.Equal(t, 1, c.Score)\n \tassert.Equal(t, 1, c.Vote)\n@@ -201,10 +208,24 @@ func TestService_Vote(t *testing.T) {\n \tassert.Equal(t, 0, c.Vote, \"can't see other user vote result\")\n \tassert.Nil(t, c.Votes)\n \n-\tc, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, \"user\", true)\n+\treq = VoteReq{\n+\t\tLocator:   store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n+\t\tCommentID: res[0].ID,\n+\t\tUserID:    \"user\",\n+\t\tUserIP:    \"123\",\n+\t\tVal:       true,\n+\t}\n+\tc, err = b.Vote(req)\n \tassert.NotNil(t, err, \"self-voting not allowed\")\n \n-\t_, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, \"user1\", true)\n+\treq = VoteReq{\n+\t\tLocator:   store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n+\t\tCommentID: res[0].ID,\n+\t\tUserID:    \"user1\",\n+\t\tUserIP:    \"123\",\n+\t\tVal:       true,\n+\t}\n+\t_, err = b.Vote(req)\n \tassert.NotNil(t, err, \"double-voting rejected\")\n \tassert.True(t, strings.HasPrefix(err.Error(), \"user user1 already voted\"))\n \n@@ -226,7 +247,14 @@ func TestService_Vote(t *testing.T) {\n \tassert.Equal(t, 0, res[0].Vote)\n \tassert.Equal(t, 0.0, res[0].Controversy)\n \n-\t_, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, \"user1\", false)\n+\treq = VoteReq{\n+\t\tLocator:   store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"},\n+\t\tCommentID: res[0].ID,\n+\t\tUserID:    \"user1\",\n+\t\tUserIP:    \"123\",\n+\t\tVal:       false,\n+\t}\n+\t_, err = b.Vote(req)\n \tassert.NoError(t, err, \"vote reset\")\n \tres, err = b.Last(\"radio-t\", 0, time.Time{}, store.User{})\n \tassert.NoError(t, err)\n@@ -240,25 +268,30 @@ func TestService_VoteLimit(t *testing.T) {\n \tdefer teardown(t)\n \tb := DataStore{Engine: prepStoreEngine(t), AdminStore: admin.NewStaticKeyStore(\"secret 123\"), MaxVotes: 2}\n \n-\t_, err := b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-1\", \"user2\", true)\n+\t_, err := b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-1\",\n+\t\tUserID: \"user2\", Val: true})\n \tassert.NoError(t, err)\n \n-\t_, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-1\", \"user3\", true)\n+\t_, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-1\",\n+\t\tUserID: \"user3\", Val: true})\n \tassert.NoError(t, err)\n \n-\t_, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-1\", \"user4\", true)\n+\t_, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-1\",\n+\t\tUserID: \"user4\", Val: true})\n \tassert.NotNil(t, err, \"vote limit reached\")\n \tassert.True(t, strings.HasPrefix(err.Error(), \"maximum number of votes exceeded for comment id-1\"))\n \n-\t_, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-2\", \"user4\", true)\n+\t_, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-2\",\n+\t\tUserID: \"user4\", Val: true})\n \tassert.NoError(t, err)\n }\n \n func TestService_VotesDisabled(t *testing.T) {\n \tdefer teardown(t)\n \tb := DataStore{Engine: prepStoreEngine(t), AdminStore: admin.NewStaticKeyStore(\"secret 123\"), MaxVotes: 0}\n \n-\t_, err := b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-1\", \"user2\", true)\n+\t_, err := b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-1\",\n+\t\tUserID: \"user2\", Val: true})\n \tassert.EqualError(t, err, \"maximum number of votes exceeded for comment id-1\")\n }\n \n@@ -282,7 +315,8 @@ func TestService_VoteAggressive(t *testing.T) {\n \tassert.Equal(t, map[string]bool(nil), res[0].Votes, \"no votes initially\")\n \n \t// add a vote as user2\n-\t_, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, \"user2\", true)\n+\t_, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: res[0].ID,\n+\t\tUserID: \"user2\", Val: true})\n \trequire.NoError(t, err)\n \n \t// crazy vote +1 as user1\n@@ -291,7 +325,8 @@ func TestService_VoteAggressive(t *testing.T) {\n \t\twg.Add(1)\n \t\tgo func() {\n \t\t\tdefer wg.Done()\n-\t\t\t_, _ = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, \"user1\", true)\n+\t\t\t_, _ = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: res[0].ID,\n+\t\t\t\tUserID: \"user1\", Val: true})\n \t\t}()\n \t}\n \twg.Wait()\n@@ -311,7 +346,8 @@ func TestService_VoteAggressive(t *testing.T) {\n \t\tgo func() {\n \t\t\tdefer wg.Done()\n \t\t\tval := rand.Intn(2) > 0\n-\t\t\t_, _ = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID, \"user1\", val)\n+\t\t\t_, _ = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: res[0].ID,\n+\t\t\t\tUserID: \"user1\", Val: val})\n \t\t}()\n \t}\n \twg.Wait()\n@@ -344,8 +380,8 @@ func TestService_VoteConcurrent(t *testing.T) {\n \t\tii := i\n \t\tgo func() {\n \t\t\tdefer wg.Done()\n-\t\t\t_, _ = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, res[0].ID,\n-\t\t\t\tfmt.Sprintf(\"user1-%d\", ii), true)\n+\t\t\t_, _ = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: res[0].ID,\n+\t\t\t\tUserID: fmt.Sprintf(\"user1-%d\", ii), Val: true})\n \t\t}()\n \t}\n \twg.Wait()\n@@ -361,15 +397,18 @@ func TestService_VotePositive(t *testing.T) {\n \tb := DataStore{Engine: prepStoreEngine(t), AdminStore: admin.NewStaticKeyStore(\"secret 123\"),\n \t\tMaxVotes: -1, PositiveScore: true}\n \n-\t_, err := b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-1\", \"user2\", false)\n+\t_, err := b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-1\",\n+\t\tUserID: \"user2\", Val: false})\n \tassert.EqualError(t, err, \"minimal score reached for comment id-1\")\n \n-\t_, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-1\", \"user3\", true)\n+\t_, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-1\",\n+\t\tUserID: \"user3\", Val: true})\n \tassert.NoError(t, err, \"minimal score doesn't affect positive vote\")\n \n \tb = DataStore{Engine: prepStoreEngine(t), AdminStore: admin.NewStaticKeyStore(\"secret 123\"),\n \t\tMaxVotes: -1, PositiveScore: false}\n-\tc, err := b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-1\", \"user2\", false)\n+\tc, err := b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-1\",\n+\t\tUserID: \"user2\", Val: false})\n \tassert.NoError(t, err, \"minimal score ignored\")\n \tassert.Equal(t, -1, c.Score)\n \tassert.Equal(t, 0.0, c.Controversy)\n@@ -379,17 +418,20 @@ func TestService_VoteControversy(t *testing.T) {\n \tdefer teardown(t)\n \tb := DataStore{Engine: prepStoreEngine(t), AdminStore: admin.NewStaticKeyStore(\"secret 123\"), MaxVotes: -1}\n \n-\tc, err := b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-2\", \"user2\", false)\n+\tc, err := b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-2\",\n+\t\tUserID: \"user2\", Val: false})\n \tassert.NoError(t, err)\n \tassert.Equal(t, -1, c.Score, \"should have -1 score\")\n \tassert.InDelta(t, 0.00, c.Controversy, 0.01)\n \n-\tc, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-2\", \"user3\", true)\n+\tc, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-2\",\n+\t\tUserID: \"user3\", Val: true})\n \tassert.NoError(t, err)\n \tassert.Equal(t, 0, c.Score, \"should have 0 score\")\n \tassert.InDelta(t, 2.00, c.Controversy, 0.01)\n \n-\tc, err = b.Vote(store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, \"id-2\", \"user4\", true)\n+\tc, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-2\",\n+\t\tUserID: \"user4\", Val: true})\n \tassert.NoError(t, err)\n \tassert.Equal(t, 1, c.Score, \"should have 1 score\")\n \tassert.InDelta(t, 1.73, c.Controversy, 0.01)\n@@ -401,6 +443,58 @@ func TestService_VoteControversy(t *testing.T) {\n \tassert.InDelta(t, 1.73, res[0].Controversy, 0.01)\n }\n \n+func TestService_VoteSameIP(t *testing.T) {\n+\tdefer teardown(t)\n+\tb := DataStore{Engine: prepStoreEngine(t), AdminStore: admin.NewStaticKeyStore(\"secret 123\"),\n+\t\tMaxVotes: -1}\n+\tb.RestrictSameIPVotes.Enabled = true\n+\n+\tc, err := b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-2\",\n+\t\tUserID: \"user2\", UserIP: \"123\", Val: true})\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, 1, c.Score, \"should have 1 score\")\n+\n+\tc, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-2\",\n+\t\tUserID: \"user3\", UserIP: \"123\", Val: true})\n+\tassert.EqualError(t, err, \"the same ip cce61be6e0a692420ae0de31dceca179123c3b8a already voted for id-2\")\n+\tassert.Equal(t, 1, c.Score, \"still have 1 score\")\n+\n+\tc, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-2\",\n+\t\tUserID: \"user3\", UserIP: \"123\", Val: false})\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, 0, c.Score, \"reset to 0 score, opposite vote allowed\")\n+}\n+\n+func TestService_VoteSameIPWithDuration(t *testing.T) {\n+\tdefer teardown(t)\n+\tb := DataStore{Engine: prepStoreEngine(t), AdminStore: admin.NewStaticKeyStore(\"secret 123\"),\n+\t\tMaxVotes: -1}\n+\tb.RestrictSameIPVotes.Enabled = true\n+\tb.RestrictSameIPVotes.Duration = 50 * time.Millisecond\n+\n+\tc, err := b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-2\",\n+\t\tUserID: \"user2\", UserIP: \"123\", Val: true})\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, 1, c.Score, \"should have 1 score\")\n+\n+\tc, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-2\",\n+\t\tUserID: \"user3\", UserIP: \"123\", Val: true})\n+\tassert.EqualError(t, err, \"the same ip cce61be6e0a692420ae0de31dceca179123c3b8a already voted for id-2\")\n+\tassert.Equal(t, 1, c.Score, \"still have 1 score\")\n+\n+\tc, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-2\",\n+\t\tUserID: \"user4\", UserIP: \"12345\", Val: true})\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, 2, c.Score, \"have 2 score\")\n+\n+\ttime.Sleep(51 * time.Millisecond)\n+\n+\tc, err = b.Vote(VoteReq{Locator: store.Locator{URL: \"https://radio-t.com\", SiteID: \"radio-t\"}, CommentID: \"id-2\",\n+\t\tUserID: \"user3\", UserIP: \"123\", Val: true})\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, 3, c.Score, \"have 3 score\")\n+}\n+\n func TestService_Controversy(t *testing.T) {\n \ttbl := []struct {\n \t\tups, downs int"
    }
  ]
}
