{
  "sha": "dbc669083c355309a1a07143112c403677d5474c",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6ZGJjNjY5MDgzYzM1NTMwOWExYTA3MTQzMTEyYzQwMzY3N2Q1NDc0Yw==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-08-28T13:02:57Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-08-30T08:03:16Z"
    },
    "message": "Code review of Disqus importer, add flag: --primaryOrigin.",
    "tree": {
      "sha": "30d669a689535e083593be3a44fc0df5747978e6",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/30d669a689535e083593be3a44fc0df5747978e6"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/dbc669083c355309a1a07143112c403677d5474c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/dbc669083c355309a1a07143112c403677d5474c",
  "html_url": "https://github.com/debiki/talkyard/commit/dbc669083c355309a1a07143112c403677d5474c",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/dbc669083c355309a1a07143112c403677d5474c/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9cde5667279143f734c3143a81f5ca02433a777e",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/9cde5667279143f734c3143a81f5ca02433a777e",
      "html_url": "https://github.com/debiki/talkyard/commit/9cde5667279143f734c3143a81f5ca02433a777e"
    }
  ],
  "stats": {
    "total": 428,
    "additions": 300,
    "deletions": 128
  },
  "files": [
    {
      "sha": "a2f41cf2532793fee1b64b455730e692fc7f0a9f",
      "filename": "Makefile",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/dbc669083c355309a1a07143112c403677d5474c/Makefile",
      "raw_url": "https://github.com/debiki/talkyard/raw/dbc669083c355309a1a07143112c403677d5474c/Makefile",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/Makefile?ref=dbc669083c355309a1a07143112c403677d5474c",
      "patch": "@@ -142,12 +142,12 @@ $(zipped_bundles): $@\n to-talkyard: to-talkyard/dist/to-talkyard/src/to-talkyard.js\n \n to-talkyard/dist/to-talkyard/src/to-talkyard.js: $(shell find to-talkyard/src/)\n-\techo \"Building To-Talkyard ...\"\n+\t@echo \"Building To-Talkyard ...\"\n+\t@cd to-talkyard ;\\\n \tset -x ;\\\n-\tcd to-talkyard ;\\\n \tyarn ;\\\n-\tyarn build ;\\\n-\techo \"... Done building To-Talkyard.\"\n+\tyarn build\n+\t@echo \"... Done building To-Talkyard.\"\n \n \n # ----- Clean (wip)"
    },
    {
      "sha": "e4b6f6f144c75d1734e4a2c8e43770a5c819ef49",
      "filename": "app/debiki/dao/UserDao.scala",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/dbc669083c355309a1a07143112c403677d5474c/app/debiki/dao/UserDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/dbc669083c355309a1a07143112c403677d5474c/app/debiki/dao/UserDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/UserDao.scala?ref=dbc669083c355309a1a07143112c403677d5474c",
      "patch": "@@ -1944,6 +1944,9 @@ trait UserDao {\n     user\n   }\n \n+  def deleteGuest(guestId: UserId, byWho: Who): Guest = {\n+    ???  // don't forget to delete any ext imp id [03KRP5N2]\n+  }\n \n   def loadUsersOnlineStuff(): UsersOnlineStuff = {\n     usersOnlineCache.get(siteId, new ju.function.Function[SiteId, UsersOnlineStuff] {"
    },
    {
      "sha": "3c2b278207f2029af8dc91a8ebdd60de9d71b03b",
      "filename": "tests/e2e/utils/log-and-die.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/dbc669083c355309a1a07143112c403677d5474c/tests/e2e/utils/log-and-die.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/dbc669083c355309a1a07143112c403677d5474c/tests/e2e/utils/log-and-die.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/log-and-die.ts?ref=dbc669083c355309a1a07143112c403677d5474c",
      "patch": "@@ -29,7 +29,7 @@ const api = {\n     process.stdout.write(boringColor(message));\n   },\n   die: function(message: string, details?: string) {\n-    api.logError('\\n' + message + (details ? '\\n' + details : ''));\n+    api.logError('\\n' + message + (details ? '\\n' + details : '') + '\\n');\n     throw Error(message);\n   },\n   dieIf: function(test: boolean, message: string, details?: string) {"
    },
    {
      "sha": "8467eeb6d681f87c3491009ed597b77250075334",
      "filename": "to-talkyard/src/from-disqus-to-ty.ts",
      "status": "modified",
      "additions": 257,
      "deletions": 106,
      "changes": 363,
      "blob_url": "https://github.com/debiki/talkyard/blob/dbc669083c355309a1a07143112c403677d5474c/to-talkyard/src/from-disqus-to-ty.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/dbc669083c355309a1a07143112c403677d5474c/to-talkyard/src/from-disqus-to-ty.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/to-talkyard/src/from-disqus-to-ty.ts?ref=dbc669083c355309a1a07143112c403677d5474c",
      "patch": "@@ -1,38 +1,33 @@\n /// <reference path=\"to-talkyard.d.ts\" />\n \n-// look at:\n+// Docs about the Disqus comments export XML file:\n // https://help.disqus.com/developer/comments-export\n-// https://gist.github.com/evert/3332e6cc73848aefe36fd9d0a30ac390\n-// https://gitlab.com/commento/commento/blob/master/api/domain_import_disqus.go\n \n \n import * as _ from 'lodash';\n import * as sax from 'sax';\n-import { dieIf, logMessage } from '../../tests/e2e/utils/log-and-die';\n+import { die, dieIf, logMessage } from '../../tests/e2e/utils/log-and-die';\n import c from '../../tests/e2e/test-constants';\n-\n-const strict = true; // set to false for html-mode\n-const parser = sax.parser(strict, {});\n-\n-\n-let verbose: boolean | undefined;\n-let errors = false;\n-\n-\n-// SHOULD_CODE_REVIEW  e2e test works fine though:\n-//    embedded-comments-create-site-import-disqus.2browsers.test.ts  TyT5KFG0P75\n+import { URL } from 'url';\n \n \n /**\n- * I think this is for \"advanced\" bloggers who split their blog comments in\n- * different blog topic categories.\n+ * Categories are for \"advanced\" bloggers who split their blog comments in\n+ * different blog topic categories? Skip for now. Maybe some time later,\n+ * can auto-upsert Disqus categories into Talkyard categories?\n  */\n interface DisqusCategory {\n }\n \n \n /**\n- * There's one Disqus thread per blog posts. Each Disqus comment is in one thread.\n+ * There's one Disqus thread per blog post. Each Disqus comment is in one thread.\n+ * <thread dsq:id=\"...\">....</thread>\n+ *\n+ * Currently ignored:\n+ * <forum>(string)     — all comments need to be from the same Disqus \"forum\",\n+ * <category dsq:id=\"...\"/>   — ... and from the same Disqus category, for now.\n+ * <id>\n  */\n interface DisqusThread {\n   disqusThreadId?: string;\n@@ -43,55 +38,109 @@ interface DisqusThread {\n   ipAddr?: string;\n   isClosed?: boolean;\n   isDeleted?: boolean;\n-  posts: DisqusComment[];\n-  // category:  Skip. Mirroring Disqus comments categories to Talkyard seems\n+  comments: DisqusComment[];\n+  message?: string;\n+  // category:  Skip (205AKS5). Mirroring Disqus comments categories to Talkyard seems\n   // complicated and no one has asked for that.\n-  // message: Skip. Seems to be always empty.\n }\n \n \n+/**\n+ * A Disqus comment, represented by a <post> in the Disqus xml.\n+ *\n+ * There's a Disqus <id> elem, e.g. <id>wp_id=123</id>, however it's usually\n+ * empty: <id />. I suppose it's defined only if the comment was imported from\n+ * WordPress to Disqus, or whatever-else from Disqus, and that Disqus\n+ * uses it to avoid duplicating comments if importing the same things many times?\n+ * Just like Talkyard uses extId:s for this.\n+ *\n+ * Looking at https://help.disqus.com/en/articles/1717164-comments-export,\n+ * <parent> can reference <id>. However, in practice, when exporting\n+ * a Disqus xml dump, <parent> is instead always like: <parent dsq:id=\"...\" />,\n+ * that is, references the parent comment via dsq:id, not <id>.\n+ * So, Talkyard looks at the dsq:id attributes but not any contents\n+ * of <id> or <parent>.\n+ */\n interface DisqusComment {\n+  // <thread dsq:id=\"...\">\n   disqusThreadId?: string;\n-  disqusPostId?: string;\n-  disqusParentPostId?: string;\n+  // The dsq:id=\"...\" attribute on the <post> itself.\n+  disqusCommentId?: string;\n+  // <parent dsq:id=\"...\">\n+  disqusParentCommentId?: string;\n   message?: string;\n   createdAtIsoString?: string;\n+  // Weird: In Disqus XSD, this author elem isn't required. But with no comment\n+  // author, then, who posted the comment? Seems in practice it's always\n+  // present though. The XSD: http://disqus.com/api/schemas/1.0/disqus.xsd\n   author: DisqusAuthor;\n   ipAddr?: string;\n   isClosed?: boolean;\n   isDeleted?: boolean;\n   isSpam?: boolean;\n+\n+  // Talkyard currently ignores these three. They're in the XSD though.\n+  // -------------------\n+  // What's this for? Maybe if a comment got incorrectly flagged as spam,\n+  // but the blog author reclassified (approved) it as not spam?\n+  isApproved?: boolean;\n+  isFlagged?: boolean;\n+  // What's this? I can only guess.\n+  isHighlighted?: boolean;\n+  // -------------------\n }\n \n \n+/**\n+ * <author> in the Disqus xml.\n+ */\n interface DisqusAuthor {\n   email?: string;\n   name?: string;\n   isAnonymous?: boolean;\n   username?: string;\n+  // Talkyard currently ignores this field. It's in the XSD though.\n+  link?: string; // an URI\n }\n \n+\n+\n let depth = 0;\n let numCategories = 0;\n let curTagName: string;\n \n let curCategory: DisqusCategory;\n let curThread: DisqusThread;\n-let curPost: DisqusComment;\n+let curComment: DisqusComment;\n \n const threadsByDisqusId: { [id: string]: DisqusThread } = {};\n const commentsByDisqusId: { [id: string]: DisqusComment } = {};\n \n const DisqusThreadSuffix = ':thr';\n const DisqusTitleSuffix = ':ttl';\n const DisqusBodySuffix = ':bdy';\n-const DisqusPostSuffix = ':pst';\n-const DisqusAuthorSuffix = ':atr';\n+const DisqusCommentSuffix = ':cmt';\n+const DisqusAuthorSuffix = ':ath';\n const DisqusExtIdSuffix = ':dsq';\n \n \n+let verbose: boolean | undefined;\n+let primaryOrigin: string | undefined;\n+let errors = false;\n+\n+const strict = true; // set to false for html-mode\n+const parser = sax.parser(strict, {});\n+\n+function logVerbose(message: string) {\n+  if (!verbose) return;\n+  logMessage(message);\n+}\n+\n+\n parser.onopentag = function (tag: SaxTag) {\n-  console.debug(`onopentag '${tag.name}': ${JSON.stringify(tag)}`);\n+  logVerbose(`onopentag '${tag.name}': ${JSON.stringify(tag)}`);\n+  if (!verbose) process.stdout.write('.');\n+\n   depth += 1;\n   curTagName = tag.name;\n   const anyDisqusId = tag.attributes['dsq:id'];\n@@ -102,40 +151,53 @@ parser.onopentag = function (tag: SaxTag) {\n       // The document opening tag. Ignore.\n       break;\n     case 'category':\n-      if (depth > 2) return;\n+      if (depth > 2) {\n+        // We're in a <thread> or <post>. Since multiple categories isn't supported\n+        // right now (205AKS5), the category is always the same, so just ignore it.\n+        return;\n+      }\n       openedThing = curCategory = {};\n       ++numCategories;\n-      dieIf(numCategories > 1,\n-          \"More than one Disqus category found — not upported. [ToTyE503MRTJ63]\");\n+      dieIf(numCategories > 1,  // (205AKS5)\n+          \"More than one Disqus category found — not supported. [ToTyE503MRTJ63]\");\n       break;\n     case 'thread':\n-      if (curPost) {\n-        dieIf(depth !== 2 + 1, 'ToTyE305MBRDK5');\n-        curPost.disqusThreadId = anyDisqusId;\n+      dieIf(!!curThread, 'ToTyE5W8T205TF');\n+      if (curComment) {\n+        // We should be in a <disqus><post><thread>, i.e. depth 3.\n+        dieIf(depth !== 3, 'ToTyE305MBRDK5');\n+        curComment.disqusThreadId = anyDisqusId;\n       }\n       else {\n+        // We should be in a <disqus><thread>, depth 2.\n+        dieIf(depth !== 2, 'ToTyE6301WKTS4');\n         openedThing = curThread = {\n           disqusThreadId: anyDisqusId,\n           author: {},\n-          posts: <DisqusComment[]> [],\n+          comments: <DisqusComment[]> [],\n         };\n       }\n       break;\n     case 'post':\n+      // We should now be in a <disqus><post>, i.e. depth 2.\n+      dieIf(depth !== 2, 'ToTyE6AKST204A');\n+      dieIf(!!curComment, 'ToTyE7KRTRART24');\n       dieIf(!!curThread, 'ToTyE502MBKRG6');\n-      openedThing = curPost = {\n-        disqusPostId: anyDisqusId,\n+      openedThing = curComment = {\n+        disqusCommentId: anyDisqusId,\n         author: {},\n       };\n       break;\n     case 'parent':\n-      dieIf(!curPost, 'ToTyE205MBRKDG');\n-      dieIf(depth !== 2 + 1, 'ToTyE7MTK05RK');\n-      curPost.disqusParentPostId = anyDisqusId;\n+      // We should be in a <disqus><post><parent>, i.e. depth 3.\n+      dieIf(depth !== 3, 'ToTyE7MTK05RK');\n+      dieIf(!!curThread, 'ToTyE8AGPSR2K0');\n+      dieIf(!curComment, 'ToTyE205MBRKDG');\n+      curComment.disqusParentCommentId = anyDisqusId;\n       break;\n   }\n \n-  console.debug(`new thing: ${JSON.stringify(openedThing)}`);\n+  logVerbose(`new thing: ${JSON.stringify(openedThing)}`);\n };\n \n \n@@ -144,10 +206,10 @@ parser.ontext = handleText;\n \n \n function handleText(textOrCdata: string) {\n-  console.debug(`handleText: \"${textOrCdata}\"`);\n+  logVerbose(`handleText: \"${textOrCdata}\"`);\n   if (curCategory)\n     return;\n-  const postOrThread = curPost || curThread;\n+  const postOrThread = curComment || curThread;\n   const author: DisqusAuthor | undefined = postOrThread ? postOrThread.author : undefined;\n   switch (curTagName) {\n     case 'link':\n@@ -159,8 +221,8 @@ function handleText(textOrCdata: string) {\n       curThread.title = (curThread.title || '') + textOrCdata;\n       break;\n     case 'message':\n-      dieIf(!curPost, 'ToTyE6AMBS20NS');\n-      curPost.message = (curPost.message || '') + textOrCdata;\n+      dieIf(!postOrThread, 'ToTyE6AMBS20NS');\n+      postOrThread.message = (postOrThread.message || '') + textOrCdata;\n       break;\n     case 'createdAt':\n       dieIf(!postOrThread, 'ToTyE5BSKW05');\n@@ -195,16 +257,28 @@ function handleText(textOrCdata: string) {\n       postOrThread.isClosed = textOrCdata === 'true';\n       break;\n     case 'isSpam':\n-      dieIf(!curPost, 'ToTyE5MSBWG03');\n-      curPost.isSpam = textOrCdata === 'true';\n+      dieIf(!curComment, 'ToTyE5MSBWG03');\n+      curComment.isSpam = textOrCdata === 'true';\n+      break;\n+    case 'isApproved':\n+      dieIf(!curComment, 'ToTyE8FKRCF31');\n+      curComment.isApproved = textOrCdata === 'true';\n+      break;\n+    case 'isFlagged':\n+      dieIf(!curComment, 'ToTyE2AKRP34U');\n+      curComment.isFlagged = textOrCdata === 'true';\n+      break;\n+    case 'isHighlighted':\n+      dieIf(!curComment, 'ToTyE9RKP2XZ');\n+      curComment.isHighlighted = textOrCdata === 'true';\n       break;\n   }\n }\n \n \n parser.onclosetag = function (tagName: string) {\n   depth -= 1;\n-  console.debug(`onclosetag: ${tagName}`);\n+  logVerbose(`onclosetag: ${tagName}`);\n   let closedThing;\n   switch (tagName) {\n     case 'category':\n@@ -213,7 +287,7 @@ parser.onclosetag = function (tagName: string) {\n       curCategory = undefined;\n       break;\n     case 'thread':\n-      if (curPost) {\n+      if (curComment) {\n         // This tag tells to which already-creted-thread a post belongs\n         // — we shouldn't try to create a new thread here.\n         // Example:\n@@ -231,23 +305,23 @@ parser.onclosetag = function (tagName: string) {\n       break;\n     case 'post':\n       dieIf(!!curThread, 'ToTyE5RD0266');\n-      dieIf(!curPost, 'ToTyE607MASK53');\n-      const threadId = curPost.disqusThreadId;\n+      dieIf(!curComment, 'ToTyE607MASK53');\n+      const threadId = curComment.disqusThreadId;\n       dieIf(!threadId, 'ToTyE2AMJ037R');\n       const thread = threadsByDisqusId[threadId];\n       dieIf(!thread,\n-          `Thread ${threadId} for post ${curPost.disqusPostId} missing [ToTyE0MJHF56]`);\n-      thread.posts.push(curPost);\n-      commentsByDisqusId[curPost.disqusPostId] = curPost;\n-      closedThing = curPost;\n-      curPost = undefined;\n+          `Thread ${threadId} for post ${curComment.disqusCommentId} missing [ToTyE0MJHF56]`);\n+      thread.comments.push(curComment);\n+      commentsByDisqusId[curComment.disqusCommentId] = curComment;\n+      closedThing = curComment;\n+      curComment = undefined;\n       break;\n     default:\n       // Ignore.\n   }\n   curTagName = undefined;\n \n-  logMessage(`Closed '${tagName}': ${JSON.stringify(closedThing)}`);\n+  logVerbose(`Closed '${tagName}': ${JSON.stringify(closedThing)}`);\n };\n \n \n@@ -285,18 +359,31 @@ function buildTalkyardSite(threadsByDisqusId: { [id: string]: DisqusThread }): a\n   const guestsByImpId: { [guestImpId: string]: GuestDumpV0 } = {};\n \n   Object.keys(threadsByDisqusId).forEach(threadDisqusId => {\n+    const thread: DisqusThread = threadsByDisqusId[threadDisqusId];\n+\n+    // Disqus creates threads also for blog posts with no comments; don't import those.\n+    // Instead, let Talkyard lazy-creates pages when needed.\n+    if (!thread.comments.length)\n+      return;\n \n \n     // ----- Page\n \n+    // Create a Talkyard EmbeddedComments discussion page for this Disqus\n+    // thread, i.e. blog post with comments.\n+\n     const pageId: PageId = '' + nextPageId;\n     nextPageId += 1;\n \n-    const thread: DisqusThread = threadsByDisqusId[threadDisqusId];\n     const pageCreatedAt: WhenMs = Date.parse(thread.createdAtIsoString);\n     const urlInclOrigin = thread.link;\n-    const urlPath = urlInclOrigin.replace(/https?:\\/\\/[^/]+\\//, '/')  // dupl [305MBKR52]\n-        .replace(/[#?].*$/, '');\n+    const urlObj = new URL(urlInclOrigin);\n+    const urlPath = urlObj.pathname;\n+\n+    // Old, so complicated:\n+    // The url might be just an origin: https://ex.co, with no trailing slash '/'.\n+    // urlInclOrigin.replace(/https?:\\/\\/[^/?&#]+\\/?/, '/')  // dupl [305MBKR52]\n+    //   .replace(/[#?].*$/, '');\n \n     const tyPage: PageDumpV0 = {\n       dbgSrc: 'ToTy',\n@@ -346,20 +433,11 @@ function buildTalkyardSite(threadsByDisqusId: { [id: string]: DisqusThread }): a\n     nextPostId += 1;\n \n     const tyBody: PostDumpV0 = {\n+      ...tyTitle,\n       id: nextPostId,\n       extImpId: threadDisqusId + DisqusThreadSuffix + DisqusBodySuffix + DisqusExtIdSuffix,\n-      pageId: tyPage.id,\n       nr: c.BodyNr,\n-      postType: PostType.Normal,\n-      createdAt: pageCreatedAt,\n-      createdById: c.SystemUserId,\n-      currRevById: c.SystemUserId,\n-      currRevStartedAt: pageCreatedAt,\n-      currRevNr: 1,\n       approvedSource: `Comments for <a href=\"${thread.link}\">${thread.link}</a>`,\n-      approvedAt: pageCreatedAt,\n-      approvedById: c.SystemUserId,\n-      approvedRevNr: 1,\n     };\n \n     nextPostId += 1;\n@@ -370,37 +448,42 @@ function buildTalkyardSite(threadsByDisqusId: { [id: string]: DisqusThread }): a\n     let nextPostNr = c.LowestTempImpId;\n     const tyComments: PostDumpV0[] = [];\n \n-    thread.posts.forEach((post: DisqusComment) => {\n-      const disqParentId = post.disqusParentPostId;\n-      const parentPost = commentsByDisqusId[post.disqusParentPostId];\n-      const postCreatedAt = Date.parse(post.createdAtIsoString);\n-\n-      if (post.disqusParentPostId) {\n-        dieIf(!parentPost,\n-          `Cannot find parent post w Diqus id '${disqParentId}' in all posts ToTyE2KS70W`);\n-        const parentAgain = thread.posts.find(p => p.disqusPostId === post.disqusParentPostId);\n+    thread.comments.forEach((comment: DisqusComment) => {\n+      const disqParentId = comment.disqusParentCommentId;\n+      if (disqParentId) {\n+        const parentComment = commentsByDisqusId[disqParentId];\n+        dieIf(!parentComment,\n+          `Cannot find parent comment w Diqus id '${disqParentId}' in all comments [ToTyE2KS70W]`);\n+        const parentAgain = thread.comments.find(p => p.disqusCommentId === disqParentId);\n         dieIf(!parentAgain,\n-          `Cannot find parent post w Diqus id '${disqParentId}' in thread ToTyE50MRXV2`);\n+          `Cannot find parent comment w Diqus id '${disqParentId}' in thread [ToTyE50MRXV2]`);\n       }\n \n-      const disqusAuthor = post.author;\n+      const disqAuthor = comment.author;\n \n-      // ?? abort if usernme or email addr contains '|' ?? can otherwise mess up the ext ids,\n-      // and cause duplication.\n+      // Abort if username or email addr contains '|', can otherwise mess up the ext ids\n+      // and cause duplication (e.g. if a username has '|' in a way that makes it look\n+      // like:  email-address|is-anonymous|name, which could match a no-username user).\n+      dieIf(disqAuthor.username && disqAuthor.username.indexOf('|') >= 0,\n+        `Username contains '|': '${disqAuthor.username}' [ToTyE40WKSTG]`);\n+      dieIf(disqAuthor.email && disqAuthor.email.indexOf('|') >= 0,\n+        `Email contains '|': '${disqAuthor.email}' [ToTyE7KAT204ZS]`);\n+      dieIf(disqAuthor.name && disqAuthor.name.indexOf('|') >= 0,   // (259RT24)\n+        `Name contains '|': '${disqAuthor.name}' [ToTyE7KAT204Z7]`);\n \n       function makeNoUsernameExtId() {\n         // If the email and name are the same, let's assume it's the same person.\n         // Ext ids can be any graphical characters (posix: [[:graph:]]), plus, spaces ' '\n         // are allowed inside an id, so, using the Disqus comment author names as part\n         // of the id, is fine. See db fn  is_valid_ext_id()   [05970KF5].\n         return (\n-            (disqusAuthor.email || '')            + '|' +\n-            (disqusAuthor.isAnonymous ? 'a' : '') + '|' +\n-            (disqusAuthor.name || ''));  // can contain '|' ?  So place last.\n-      }\n+            (disqAuthor.email || '')            + '|' +\n+            (disqAuthor.isAnonymous ? 'a' : '') + '|' +\n+            (disqAuthor.name || ''));  // maybe later, can contain '|' ?  So place last.\n+      }                                // but right now, cannot (259RT24)\n \n       const guestExtId =\n-          (disqusAuthor.username || makeNoUsernameExtId()) +\n+          (disqAuthor.username || makeNoUsernameExtId()) +\n           DisqusAuthorSuffix + DisqusExtIdSuffix;\n       const anyDuplGuest = guestsByImpId[guestExtId];\n       const anyDuplGuestCreatedAt = anyDuplGuest ? anyDuplGuest.createdAt : undefined;\n@@ -412,46 +495,52 @@ function buildTalkyardSite(threadsByDisqusId: { [id: string]: DisqusThread }): a\n         nextGuestId -= 1;\n       }\n \n+      const commentCreatedAt = Date.parse(comment.createdAtIsoString);\n+\n       const guest: GuestDumpV0 = {\n         id: thisGuestId,\n-        extImpId: guestExtId,  // TODO delete, if deleting user — contains name\n+        extImpId: guestExtId,  // PRIVACY SHOULD GDPR delete, if deleting user — contains name [03KRP5N2]\n         // Use the earliest known post date, as the user's created-at date.\n-        createdAt: Math.min(anyDuplGuestCreatedAt || Infinity, postCreatedAt),\n-        fullName: disqusAuthor.name,\n-        emailAddress: disqusAuthor.email,\n+        createdAt: Math.min(anyDuplGuestCreatedAt || Infinity, commentCreatedAt),\n+        fullName: disqAuthor.name,\n+        emailAddress: disqAuthor.email,\n         // guestBrowserId — there is no such thing in the Disqus xml dump. [494AYDNR]\n         //postedFromIp: post.ipAddr\n       };\n \n+      // If the guest has a username, and has changed hens name or email,\n+      // this might also change the name or email.\n+      // COULD remember the most recent email addr and name use that?\n       guestsByImpId[guestExtId] = guest;\n \n       const tyPost: PostDumpV0 = {\n         id: nextPostId,\n-        extImpId: post.disqusPostId + DisqusPostSuffix + DisqusExtIdSuffix,\n+        extImpId: comment.disqusCommentId + DisqusCommentSuffix + DisqusExtIdSuffix,\n         pageId: tyPage.id,\n         nr: nextPostNr,\n         parentNr: undefined, // updated below\n         postType: PostType.Normal,\n-        createdAt: postCreatedAt,\n+        createdAt: commentCreatedAt,\n         createdById: guest.id,\n         currRevById: guest.id,\n-        currRevStartedAt: postCreatedAt,\n+        currRevStartedAt: commentCreatedAt,\n         currRevNr: 1,\n-        approvedSource: post.message,\n-        approvedAt: postCreatedAt,\n+        approvedSource: comment.message,\n+        approvedAt: commentCreatedAt,\n         approvedById: c.SystemUserId,\n         approvedRevNr: 1,\n       };\n \n       // We need to incl also deleted comments, because people might have replied\n       // to them before they got deleted, so they are needed in the replies tree structure.\n-      if (post.isDeleted || post.isSpam) {\n-        tyPost.deletedAt = postCreatedAt; // date unknown\n+      if (comment.isDeleted || comment.isSpam) {\n+        tyPost.deletedAt = commentCreatedAt; // date unknown\n         tyPost.deletedById = c.SystemUserId;\n         tyPost.deletedStatus = DeletedStatus.SelfBit;  // but not SuccessorsBit\n         // Skip this; a db constraint [40HKTPJ] wants either approved source, or a source patch,\n-        // and it's compliated to construct a patch?\n-        //if (post.isSpam) {\n+        // and it's compliated to construct a patch from any approved source,\n+        // to the current source?\n+        //if (comment.isSpam) {\n         //  delete tyPost.approvedSource;\n         //  delete tyPost.approvedAt;\n         //  delete tyPost.approvedById;\n@@ -469,17 +558,17 @@ function buildTalkyardSite(threadsByDisqusId: { [id: string]: DisqusThread }): a\n     // ----- Fill in parent post nrs\n \n     tyComments.forEach(tyComment => {\n-      const suffixLength = DisqusPostSuffix.length + DisqusExtIdSuffix.length;\n+      const suffixLength = DisqusCommentSuffix.length + DisqusExtIdSuffix.length;\n       const disqusId: string = tyComment.extImpId.slice(0, - suffixLength);\n       const disqusComment: DisqusComment = commentsByDisqusId[disqusId];\n       dieIf(!disqusComment, 'ToTyE305DMRTK6');\n-      const disqusParentId = disqusComment.disqusParentPostId;\n+      const disqusParentId = disqusComment.disqusParentCommentId;\n       if (disqusParentId) {\n         const disqusParent = commentsByDisqusId[disqusParentId];\n         dieIf(!disqusParent,\n             `Parent Disqus comment not found, Disqus id: '${disqusParentId}' ` +\n             `[ToTyEDSQ0DSQPRNT]`);\n-        const parentExtId = disqusParentId + DisqusPostSuffix + DisqusExtIdSuffix;\n+        const parentExtId = disqusParentId + DisqusCommentSuffix + DisqusExtIdSuffix;\n         const tyParent = tyComments.find(c => c.extImpId === parentExtId);\n         dieIf(!tyParent,\n             `Parent of Talkyard post nr ${tyComment.nr} w Disqus id '${disqusId}' not found, ` +\n@@ -492,10 +581,67 @@ function buildTalkyardSite(threadsByDisqusId: { [id: string]: DisqusThread }): a\n \n     // ----- Add to site\n \n+    logVerbose(`Adding discussion at: '${urlInclOrigin}', url path '${urlPath}', ` +\n+        `with ${thread.comments.length} comments, ` +\n+        `to Talkyard page with temp imp id ${tyPage.id} ...`);\n+    if (!verbose)\n+      process.stdout.write('.');\n+\n     tySiteData.pages.push(tyPage);\n     tySiteData.pagePaths.push(tyPagePath);\n+\n+    // This cannot happen? Disqus never maps the same full URL to different threads.\n+    const duplPageIdByUrlInclOrig = tySiteData.pageIdsByAltIds[urlInclOrigin];\n+    dieIf(duplPageIdByUrlInclOrig,\n+        `Full URL ${urlInclOrigin} maps to both tyPage.id ${duplPageIdByUrlInclOrig} ` +\n+        `and ${tyPage.id} [ToTyEDUPLURL]`);\n+\n     tySiteData.pageIdsByAltIds[urlInclOrigin] = tyPage.id;\n-    tySiteData.pageIdsByAltIds[urlPath] = tyPage.id;\n+\n+    // This happens though, if a Disqus export file has comments for blog two posts\n+    // on different domains, but with the same url path. Then, typically,\n+    // it's the same blog, just that it's been hosted on differet domains, and\n+    // people posted comments on the first domain, creating a Disqus thread there,\n+    // and then on the 2nd domain, creating a duplicated thread for the in fact\n+    // same blog post, there.\n+    // For now, if this happens let's require the human to choose one of\n+    // the dommains, via --primaryOrigin. Later, maybe there could be advanced\n+    // params to merge the different (duplicated?) discussions together to\n+    // one single discussion (so no comments are lost).\n+    const duplPageIdByUrlPath = tySiteData.pageIdsByAltIds[urlPath];\n+    let skipPath = false;\n+    if (duplPageIdByUrlPath) {\n+      if (primaryOrigin) {\n+        skipPath = !urlInclOrigin.startsWith(primaryOrigin + '/') &&\n+            urlInclOrigin != primaryOrigin;\n+      }\n+      else {\n+        const otherSimilarUrls = _.filter(\n+            _.keys(tySiteData.pageIdsByAltIds), url => {\n+              if (!url.startsWith('http:') && !url.startsWith('https:'))\n+                return false;\n+              if (url === urlInclOrigin)\n+                return false;\n+              const urlObj = new URL(url);\n+              return urlObj.pathname === urlPath;\n+            });\n+        // TESTS_MISSING\n+        die(`URL path '${urlPath}' maps to both tyPage.id ${duplPageIdByUrlPath} ` +\n+            `and ${tyPage.id}. Your Disqus XML file includes blog posts ` +\n+            `from different domains, but with the same URL path? ` +\n+            `I'm looking at this URL: '${urlInclOrigin}', ` +\n+            `and previous similar urls I've seen are: ${JSON.stringify(otherSimilarUrls)} —` +\n+            `note that they end with the same URL path. ` +\n+            `To solve this, add --primaryOrigin https://one.of.your.blog.addresses, ` +\n+            `to the command line options, and then I'll use the Disqus comments ` +\n+            `from that origin, whenever the same URL path maps to ` +\n+            `different discussions from different domains. [ToTyEDUPLPATH]`);\n+      }\n+    }\n+    if (!skipPath) {\n+      tySiteData.pageIdsByAltIds[urlPath] = tyPage.id;\n+    }\n+\n     tySiteData.posts.push(tyTitle);\n     tySiteData.posts.push(tyBody);\n     tyComments.forEach(c => tySiteData.posts.push(c));\n@@ -514,10 +660,15 @@ function buildTalkyardSite(threadsByDisqusId: { [id: string]: DisqusThread }): a\n }\n \n \n-export default function(fileText: string, ps: { verbose?: boolean }): [SiteData, boolean] {\n+export default function(fileText: string,\n+      ps: { verbose?: boolean, primaryOrigin?: string }): [SiteData, boolean] {\n   verbose = ps.verbose;\n-  parser.write(fileText).close();\n+  primaryOrigin = ps.primaryOrigin;\n+  console.log(\"Parsing ...\");\n+  parser.write(fileText).close(); // this updates threadsByDisqusId\n+  console.log(\"\\nDone parsing. Converting to Talkyard JSON ...\");\n   const site = buildTalkyardSite(threadsByDisqusId);\n+  console.log(\"\\nDone converting to Talkyard.\");\n   return [site, errors];\n }\n "
    },
    {
      "sha": "79620dadd64e6fa0bf3081dceec47fba52247f30",
      "filename": "to-talkyard/src/from-wordpress-to-ty.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/dbc669083c355309a1a07143112c403677d5474c/to-talkyard/src/from-wordpress-to-ty.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/dbc669083c355309a1a07143112c403677d5474c/to-talkyard/src/from-wordpress-to-ty.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/to-talkyard/src/from-wordpress-to-ty.ts?ref=dbc669083c355309a1a07143112c403677d5474c",
      "patch": "@@ -3,6 +3,7 @@\n \n import * as _ from 'lodash';\n import * as sax from 'sax';\n+import { die } from '../../tests/e2e/utils/log-and-die';\n import c from '../../tests/e2e/test-constants';\n const strict = true; // set to false for html-mode\n const parser = sax.parser(strict, {});\n@@ -35,7 +36,9 @@ function addBlogPostAndComments(wpBlogPostAndComments: WpBlogPostAndComments) {\n     return;\n   }\n \n-  const urlNoOrigin = wpBlogPostAndComments.link.replace(/https?:\\/\\/[^/]+\\//, '/');  // dupl [305MBKR52]\n+  die(\"Unimpl: use URL(...)  .pathname  instead\");\n+  const urlNoOrigin = wpBlogPostAndComments.link.replace(/https?:\\/\\/[^/?&#]+\\/?/, '/');  // dupl [305MBKR52]\n+        // ?  and:  .replace(/[#?].*$/, '');\n \n   const pageUrl = wpBlogPostAndComments.link;\n "
    },
    {
      "sha": "30791f85225ff5fdbdfa9795993eca558fc055de",
      "filename": "to-talkyard/src/to-talkyard.d.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/dbc669083c355309a1a07143112c403677d5474c/to-talkyard/src/to-talkyard.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/dbc669083c355309a1a07143112c403677d5474c/to-talkyard/src/to-talkyard.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/to-talkyard/src/to-talkyard.d.ts?ref=dbc669083c355309a1a07143112c403677d5474c",
      "patch": "@@ -149,7 +149,7 @@ interface NewTestPost {   // RENAME to PostToAdd  and move to  /tests/e2e/..some\n }\n \n \n-interface PostDumpV0 {\n+interface PostDumpV0 {   // RENAME to PostPatchV0\n   id: PostId;\n   extImpId?: ExtImpId;\n   pageId: PageId;\n@@ -198,7 +198,7 @@ interface PostDumpV0 {\n   numTimesRead?: number;\n }\n \n-interface GuestDumpV0 {\n+interface GuestDumpV0 {   // RENAME to GuestPatchV0\n   id: UserId;\n   extImpId?: ExtImpId;\n   createdAt: WhenMs;"
    },
    {
      "sha": "acaab6b137861372e7e483176c1c39e33e0950c2",
      "filename": "to-talkyard/src/to-talkyard.ts",
      "status": "modified",
      "additions": 29,
      "deletions": 14,
      "changes": 43,
      "blob_url": "https://github.com/debiki/talkyard/blob/dbc669083c355309a1a07143112c403677d5474c/to-talkyard/src/to-talkyard.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/dbc669083c355309a1a07143112c403677d5474c/to-talkyard/src/to-talkyard.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/to-talkyard/src/to-talkyard.ts?ref=dbc669083c355309a1a07143112c403677d5474c",
      "patch": "@@ -1,18 +1,26 @@\n /// <reference path=\"to-talkyard.d.ts\" />\n \n-//   ./to-talkyard --*ExportFile=... [ --writeTo=file | --sendToServer=https://ty.example.com ]\n-//\n-// where --*ExportFile is one of:\n-//    --wordpressCoreXmlExportFile\n-//    --disqusXmlExportFile\n-//\n-// but right now:\n-//\n-//  nodejs dist/to-talkyard/src/to-talkyard.js --wordpressCoreXmlExportFile file.xml\n-//  nodejs dist/to-talkyard/src/to-talkyard.js --disqusXmlExportFile file.xml --writeTo=test.json\n-//  nodejs dist/to-talkyard/src/to-talkyard.js --disqusXmlExportFile file.xml --sendTo=localhost\n-//\n+/*\n+Usage:\n \n+./to-talkyard --*ExportFile=... [ --writeTo=file | --sendTo=SERVER_ORIGIN ]\n+\n+where --*ExportFile is one of:\n+   --wordpressCoreXmlExportFile  (not yet impl)\n+   --disqusXmlExportFile\n+\n+but right now:\n+\n+ nodejs dist/to-talkyard/src/to-talkyard.js --wordpressCoreXmlExportFile FILE_XML\n+ nodejs dist/to-talkyard/src/to-talkyard.js --disqusXmlExportFile file.xml --writeTo TEST_JSON\n+ nodejs dist/to-talkyard/src/to-talkyard.js --disqusXmlExportFile file.xml --sendTo SERVER_ORIGIN\n+\n+ nodejs dist/to-talkyard/src/to-talkyard.js  \\\n+     --talkyardJsonPatchFile FILE_JSON  \\\n+     --sendTo=localhost  \\\n+     --sysbotApiSecret THE_SECRET\n+\n+*/\n \n import minimist from 'minimist';\n import syncRequest from 'sync-request';\n@@ -33,6 +41,7 @@ let talkyardSiteData: SiteData;\n const wordpressXmlFilePath: string | undefined = args.wordpressCoreXmlExportFile;\n const disqusXmlFilePath: string | undefined = args.disqusXmlExportFile;\n const jsonDumpFilePath: string | undefined = args.talkyardJsonPatchFile;\n+const primaryOrigin: string | undefined = args.primaryOrigin;\n \n let fileFormat;\n const DisqusFormat = 'DisqusFormt';\n@@ -76,7 +85,13 @@ if (!_.isString(writeToPath) && !_.isString(sendToOrigin))\n \n \n if (_.isString(sendToOrigin) && !_.isString(sysbotApiSecret))\n-  throw \"Missing: --sysbotApiSecret=..., required together with --sendTo=...\";\n+  die(\"Missing: --sysbotApiSecret=..., required together with --sendTo=...\");\n+\n+if (primaryOrigin && !primaryOrigin.startsWith('http'))\n+  die(\"The --primaryOrigin should be like http(s)://server.address\");\n+\n+if (primaryOrigin && _.filter(primaryOrigin, c => c === '/').length >= 3)\n+  die(\"The --primaryOrigin should not include any URL path, only http(s)://host.\");\n \n \n if (!talkyardSiteData) {\n@@ -96,7 +111,7 @@ if (!talkyardSiteData) {\n       [talkyardSiteData, errors] = fromWordPressToTalkyard(fileText, { verbose });\n       break;\n     case DisqusFormat:\n-      [talkyardSiteData, errors] = fromDisqusToTalkyard(fileText, { verbose });\n+      [talkyardSiteData, errors] = fromDisqusToTalkyard(fileText, { verbose, primaryOrigin });\n       break;\n     default:\n       die('ToTyE305MKF');"
    }
  ]
}
