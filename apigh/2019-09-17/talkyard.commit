{
  "sha": "24b80c8be9f18188f4f3e9ecf450a1551e66f5b4",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6MjRiODBjOGJlOWYxODE4OGY0ZjNlOWVjZjQ1MGExNTUxZTY2ZjViNA==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-09-15T12:24:47Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-09-16T04:49:43Z"
    },
    "message": "Prefix with 'diid:', forgot. Bump version.",
    "tree": {
      "sha": "53334b51e0d016003d7fe7ef51b9da6fa92b0a18",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/53334b51e0d016003d7fe7ef51b9da6fa92b0a18"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4",
  "html_url": "https://github.com/debiki/talkyard/commit/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1de54c1aac47ab8981976632ce68c8b5c44eb9b0",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/1de54c1aac47ab8981976632ce68c8b5c44eb9b0",
      "html_url": "https://github.com/debiki/talkyard/commit/1de54c1aac47ab8981976632ce68c8b5c44eb9b0"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 25,
    "deletions": 19
  },
  "files": [
    {
      "sha": "e7d08458fb85f179cc7d949b210c8e806fa8561a",
      "filename": "app/controllers/ReplyController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4/app/controllers/ReplyController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4/app/controllers/ReplyController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/ReplyController.scala?ref=24b80c8be9f18188f4f3e9ecf450a1551e66f5b4",
      "patch": "@@ -150,6 +150,10 @@ object EmbeddedCommentsPageCreator {\n \n     // A bit dupl knowledge. [205KST526]\n     anyDiscussionId.foreach(discussionId => {\n+      throwBadRequestIf(discussionId.startsWith(\"diid:\"),\n+        \"TyE205WKDH46\", o\"\"\"The 'diid:' prefix is reserved. It gets added server side;\n+          don't include client side.\"\"\")\n+\n       // Discussion ids are prefixed by 'diid:' so they have their own namespace\n       // and won't clash with any url, e.g. if they start with '/' they'd be mistaken\n       // for urls, without the 'diid' prefix..\n@@ -280,7 +284,7 @@ object EmbeddedCommentsPageCreator {\n       titleTextAndHtml = dao.textAndHtmlMaker.forTitle(s\"Comments for $embeddingUrl\"),\n       bodyTextAndHtml = dao.textAndHtmlMaker.forBodyOrComment(s\"Comments for: $embeddingUrl\"),\n       showId = true, deleteDraftNr = None,  // later, there'll be a draft to delete? [BLGCMNT1]\n-      Who.System, request.spamRelatedStuff, altPageIds = anyDiscussionId.toSet,\n+      Who.System, request.spamRelatedStuff, discussionIds = anyDiscussionId.toSet,\n       embeddingUrl = Some(embeddingUrl))\n   }\n "
    },
    {
      "sha": "60596610f043b9ae893fa6b78c41ab638c6b3dc6",
      "filename": "app/debiki/dao/PagesDao.scala",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/debiki/talkyard/blob/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4/app/debiki/dao/PagesDao.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4/app/debiki/dao/PagesDao.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/PagesDao.scala?ref=24b80c8be9f18188f4f3e9ecf450a1551e66f5b4",
      "patch": "@@ -55,7 +55,7 @@ trait PagesDao {\n         anyFolder: Option[String], anySlug: Option[String], titleTextAndHtml: TextAndHtml,\n         bodyTextAndHtml: TextAndHtml, showId: Boolean, deleteDraftNr: Option[DraftNr], byWho: Who,\n         spamRelReqStuff: SpamRelReqStuff,\n-        altPageIds: Set[AltPageId] = Set.empty, embeddingUrl: Option[String] = None,\n+        discussionIds: Set[AltPageId] = Set.empty, embeddingUrl: Option[String] = None,\n         extId: Option[ExtImpId] = None): PagePathWithId = {\n \n     if (pageRole.isSection) {\n@@ -81,6 +81,8 @@ trait PagesDao {\n     if (titleTextAndHtml.safeHtml.trim.isEmpty)\n       throwForbidden(\"DwE5KPEF21\", \"Page title should not be empty\")\n \n+    dieIf(discussionIds.exists(_.startsWith(\"diid:\")), \"TyE0KRTDT53J\")\n+\n     quickCheckIfSpamThenThrow(byWho, bodyTextAndHtml, spamRelReqStuff)\n \n     val pagePath = readWriteTransaction { tx =>\n@@ -89,7 +91,7 @@ trait PagesDao {\n         titleSource = titleTextAndHtml.text, titleHtmlSanitized = titleTextAndHtml.safeHtml,\n         bodySource = bodyTextAndHtml.text, bodyHtmlSanitized = bodyTextAndHtml.safeHtml,\n         pinOrder = None, pinWhere = None, byWho, Some(spamRelReqStuff),\n-        tx, altPageIds = altPageIds, embeddingUrl = embeddingUrl, extId = extId)\n+        tx, discussionIds = discussionIds, embeddingUrl = embeddingUrl, extId = extId)\n \n       val notifications = notfGenerator(tx).generateForNewPost(\n         PageDao(pagePath.pageId, tx), bodyPost, Some(bodyTextAndHtml), anyReviewTask)\n@@ -137,7 +139,7 @@ trait PagesDao {\n       hidePageBody: Boolean = false,\n       layout: Option[PageLayout] = None,\n       bodyPostType: PostType = PostType.Normal,\n-      altPageIds: Set[AltPageId] = Set.empty,\n+      discussionIds: Set[AltPageId] = Set.empty,\n       embeddingUrl: Option[String] = None,\n       extId: Option[String] = None,\n       createAsDeleted: Boolean = false): (PagePathWithId, Post, Option[ReviewTask]) = {\n@@ -344,10 +346,10 @@ trait PagesDao {\n       tx.insertUploadedFileReference(bodyPost.id, hashPathSuffix, authorId)\n     }\n \n-    altPageIds.foreach(tx.insertAltPageId(_, realPageId = pageId))\n+    discussionIds.foreach(id => tx.insertAltPageId(\"diid:\" + id, realPageId = pageId))\n \n     embeddingUrl foreach { embUrl =>\n-      if (!altPageIds.contains(embUrl)) {\n+      if (!discussionIds.contains(embUrl)) {\n         // If the url already points to another embedded discussion, keep it pointing to the old one.\n         // Then, seems like lower risk for some hijack-a-discussion-by-forging-the-url security issue.\n         tx.insertAltPageIdIfFree(embUrl, realPageId = pageId)\n@@ -356,7 +358,7 @@ trait PagesDao {\n       // a new address, store the discussion id by url path too, without origin. [06KWDNF2]\n       // Maybe some time later, could add a conf val to disable this.\n       val embeddingPath = extractUrlPath(embUrl)\n-      if (!altPageIds.contains(embeddingPath)) {\n+      if (!discussionIds.contains(embeddingPath)) {\n         tx.insertAltPageIdIfFree(embeddingPath, realPageId = pageId)\n       }\n     }"
    },
    {
      "sha": "270378056c559c59a94f31487738117af5324106",
      "filename": "tests/app/debiki/dao/DaoAppSuite.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4/tests/app/debiki/dao/DaoAppSuite.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4/tests/app/debiki/dao/DaoAppSuite.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/debiki/dao/DaoAppSuite.scala?ref=24b80c8be9f18188f4f3e9ecf450a1551e66f5b4",
      "patch": "@@ -279,12 +279,12 @@ class DaoAppSuite(\n   def createPage(pageRole: PageType, titleTextAndHtml: TextAndHtml,\n         bodyTextAndHtml: TextAndHtml, authorId: UserId, browserIdData: BrowserIdData,\n         dao: SiteDao, anyCategoryId: Option[CategoryId] = None,\n-        extId: Option[ExtImpId] = None, altIds: Set[AltPageId] = Set.empty): PageId = {\n+        extId: Option[ExtImpId] = None, discussionIds: Set[AltPageId] = Set.empty): PageId = {\n     dao.createPage(pageRole, PageStatus.Published, anyCategoryId = anyCategoryId,\n       anyFolder = Some(\"/\"), anySlug = Some(\"\"),\n       titleTextAndHtml = titleTextAndHtml, bodyTextAndHtml = bodyTextAndHtml,\n       showId = true, deleteDraftNr = None, Who(authorId, browserIdData), dummySpamRelReqStuff,\n-      altPageIds = altIds, extId = extId\n+      discussionIds = discussionIds, extId = extId\n     ).pageId\n   }\n "
    },
    {
      "sha": "360022ed0235adbcb33e97507cceeea636495c42",
      "filename": "tests/app/talkyard/server/backup/SiteDumpImporterAppSpec.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/debiki/talkyard/blob/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4/tests/app/talkyard/server/backup/SiteDumpImporterAppSpec.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4/tests/app/talkyard/server/backup/SiteDumpImporterAppSpec.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/app/talkyard/server/backup/SiteDumpImporterAppSpec.scala?ref=24b80c8be9f18188f4f3e9ecf450a1551e66f5b4",
      "patch": "@@ -680,7 +680,7 @@ class SiteDumpImporterAppSpec extends DaoAppSuite(disableScripts = false)  // Ty\n \n \n     def createSiteWithOneCatPageMember(hostname: String, pageExtId: Option[ExtImpId] = None,\n-          pageAltIds: Set[AltPageId] = Set.empty)\n+          pageDiscussionIds: Set[AltPageId] = Set.empty)\n           : (Site, CreateForumResult, PageId, Seq[Post], User, User, SiteDao) = {\n       val (site, dao) = createSite(hostname)\n       val owen = createPasswordOwner(\"owner_un\", dao)\n@@ -694,7 +694,7 @@ class SiteDumpImporterAppSpec extends DaoAppSuite(disableScripts = false)  // Ty\n       val pageId: PageId = createPage(\n         PageType.Discussion, textAndHtmlMaker.testTitle(\"Forum Title\"),\n         textAndHtmlMaker.testBody(\"Forum intro text.\"), SysbotUserId, browserIdData,\n-        dao, Some(forum.defaultCategoryId), extId = pageExtId, altIds = pageAltIds)\n+        dao, Some(forum.defaultCategoryId), extId = pageExtId, discussionIds = pageDiscussionIds)\n \n       val pagePosts = dao.readOnlyTransaction { tx => tx.loadPostsOnPage(pageId) }\n \n@@ -717,15 +717,15 @@ class SiteDumpImporterAppSpec extends DaoAppSuite(disableScripts = false)  // Ty\n     \"Import new pages and replies, all posts approved\" - {\n \n       val oldPageExtId = \"old_page_ext_id\"\n-      val oldPageAltId = \"old_page_alt_id\"\n+      val oldPageDiscId = \"old_page_disc_id\"\n \n       lazy val (\n         site,\n         forum, _, _,\n         owen,\n         merrylMember,\n         dao) = createSiteWithOneCatPageMember(\n-          \"imp-pages-replies\", pageExtId = Some(oldPageExtId), pageAltIds = Set(oldPageAltId))\n+          \"imp-pages-replies\", pageExtId = Some(oldPageExtId), pageDiscussionIds = Set(oldPageDiscId))\n \n       val pageToUpsertExtId = \"ups_ext_id\"\n       val pageToUpsertAltId = \"ups_alt_id\"\n@@ -991,7 +991,7 @@ class SiteDumpImporterAppSpec extends DaoAppSuite(disableScripts = false)  // Ty\n           val patchToUpsert = SiteBackup.empty.copy(\n             categories = Vector(makeEmbeddedCommentsCategory(forum)),\n             pages = Vector(oldPage.copy(extImpId = Some(\"wrong_ext_id\"))),\n-            pageIdsByAltIds = Map(oldPageAltId -> oldPage.pageId))\n+            pageIdsByAltIds = Map(\"diid:\" + oldPageDiscId -> oldPage.pageId))\n           val exception = intercept[Exception] {\n             upsert(site.id, patchToUpsert)\n           }\n@@ -1001,12 +1001,12 @@ class SiteDumpImporterAppSpec extends DaoAppSuite(disableScripts = false)  // Ty\n \n \n \n-    \"add a reply to a page, via its alt id\" - {\n-      val oldPageAltId = \"old_page_alt_id\"\n+    \"add a reply to a page, via its discussion id\" - {\n+      val oldPageDiscId = \"old_page_disc_id\"\n \n       lazy val (site, forum, oldPageId, oldPagePosts, owen, _, dao) =\n         createSiteWithOneCatPageMember(\"ups-reply-via-page-alt-id\", pageExtId = None,\n-          pageAltIds = Set(oldPageAltId))\n+              pageDiscussionIds = Set(oldPageDiscId))\n \n       lazy val pageToUpsertAlreadyExists = AboutCatPageMeta333.copy(\n         version = 2,  // version bumped to 2 here [306MDH26]\n@@ -1023,7 +1023,7 @@ class SiteDumpImporterAppSpec extends DaoAppSuite(disableScripts = false)  // Ty\n         patchToUpsert = SiteBackup.empty.copy(\n           categories = Vector(dummyCategory),\n           pages = Vector(pageToUpsertAlreadyExists),  // same alt id —> is considered same page\n-          pageIdsByAltIds = Map(oldPageAltId -> pageToUpsertAlreadyExists.pageId),\n+          pageIdsByAltIds = Map(\"diid:\" + oldPageDiscId -> pageToUpsertAlreadyExists.pageId),\n           posts = Vector(\n             Page333BodyPost, // needed, so the reply has sth to refer to\n             upsReply).map(_.copy("
    },
    {
      "sha": "7cfcc91696084533cccaaa3c52e0361b270573be",
      "filename": "version.txt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4/version.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/24b80c8be9f18188f4f3e9ecf450a1551e66f5b4/version.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/version.txt?ref=24b80c8be9f18188f4f3e9ecf450a1551e66f5b4",
      "patch": "@@ -1 +1 @@\n-v0.6.45-WIP-1\n+v0.6.46-WIP-1"
    }
  ]
}
