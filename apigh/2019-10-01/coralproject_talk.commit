{
  "sha": "c045f52daa73bbe761e78383a4465d509d3358d6",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6YzA0NWY1MmRhYTczYmJlNzYxZTc4MzgzYTQ0NjVkNTA5ZDMzNThkNg==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2019-10-01T16:00:27Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-10-01T16:00:27Z"
    },
    "message": "[CORL-649] Migrations (#2597)\n\n* feat: added migration framework\r\n\r\n* chore: added premod user status migration\r\n\r\n* feat: enhanced error handling of migrations\r\n\r\n* fix: added missing argument from abstract method\r\n\r\n* fix: another templating blunder\r\n\r\n* fix: removed debug code\r\n\r\n* feat: enhanced migration tracking\r\n\r\n* fix: remove skipping migrations\r\n\r\n* feat: moved indexing to migration system\r\n\r\n* fix: linting",
    "tree": {
      "sha": "4781bb7085f7ba581796ec9ba5a83318587e0dea",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/4781bb7085f7ba581796ec9ba5a83318587e0dea"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/c045f52daa73bbe761e78383a4465d509d3358d6",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdk3gbCRBK7hj4Ov3rIwAAdHIIAKzGJkuqEY1AzpLaVrqTh6rG\n4VBgVjN4vChe6L9p/dv62zFiD9f3f3ZMFRopR1Rlfl4aF5Qn0CLctYSgel+8bO1V\n20fT+jNCLGJKijUlrQGYYDjOddPE1y72iJiOzc3NlSIvsFOXF8rh/nOznjRwpFAa\n1kOF3f4zf6UdgAOzUrLeuRehYDi2ekGyrbA8pOEU/OCytkDj6SypRWxJ+KI5FwZy\n1k5bLlG9gjO+liGJrdYVofH5Yy8Gafqk0aavkHaq46cwisq1zenZNSywNisnO0yq\nxOxDvrmHq/j3ECpprl5QsRYwLeAVtiXgvPAvw427+HIRy00cnAImGowNSQ+BwVI=\n=Z4Wo\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 4781bb7085f7ba581796ec9ba5a83318587e0dea\nparent b3b26bd9f3291e6561e09d55f5d0e9866511919a\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1569945627 +0000\ncommitter GitHub <noreply@github.com> 1569945627 +0000\n\n[CORL-649] Migrations (#2597)\n\n* feat: added migration framework\r\n\r\n* chore: added premod user status migration\r\n\r\n* feat: enhanced error handling of migrations\r\n\r\n* fix: added missing argument from abstract method\r\n\r\n* fix: another templating blunder\r\n\r\n* fix: removed debug code\r\n\r\n* feat: enhanced migration tracking\r\n\r\n* fix: remove skipping migrations\r\n\r\n* feat: moved indexing to migration system\r\n\r\n* fix: linting\r\n"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/c045f52daa73bbe761e78383a4465d509d3358d6",
  "html_url": "https://github.com/coralproject/talk/commit/c045f52daa73bbe761e78383a4465d509d3358d6",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/c045f52daa73bbe761e78383a4465d509d3358d6/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b3b26bd9f3291e6561e09d55f5d0e9866511919a",
      "url": "https://api.github.com/repos/coralproject/talk/commits/b3b26bd9f3291e6561e09d55f5d0e9866511919a",
      "html_url": "https://github.com/coralproject/talk/commit/b3b26bd9f3291e6561e09d55f5d0e9866511919a"
    }
  ],
  "stats": {
    "total": 1507,
    "additions": 1038,
    "deletions": 469
  },
  "files": [
    {
      "sha": "5bf09d67abc10eb76c8f289bc7067ce564967ec0",
      "filename": "README.md",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/README.md",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/README.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/README.md?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -128,7 +128,7 @@ If you don't already have these databases running, you can execute the following\n assuming you have Docker installed on your local machine:\n \n ```bash\n-docker run -d -p 27017:27017 --restart always --name mongo mongo:3.6\n+docker run -d -p 27017:27017 --restart always --name mongo mongo:4.2\n docker run -d -p 6379:6379 --restart always --name redis redis:3.2\n ```\n \n@@ -624,12 +624,6 @@ the variables in a `.env` file in the root of the project in a simple\n - `DISABLE_TENANT_CACHING` - When `true`, all tenants will be loaded from the\n   database when needed rather than keeping a in-memory copy in sync via\n   published events on Redis. (Default `false`)\n-- `DISABLE_MONGODB_AUTOINDEXING` - When `true`, Coral will not perform indexing\n-  operations when it starts up. This can be desired when you've already\n-  installed Coral on the target MongoDB, but want to improve start performance.\n-  **You should not use this parameter unless you know what you're doing! Upgrades\n-  may introduce additional indexes that the application relies on.**\n-  (Default `false`)\n - `LOCALE` - Specify the default locale to use for all requests without a locale\n   specified. (Default `en-US`)\n - `ENABLE_GRAPHIQL` - When `true`, it will enable the GraphiQL interface at `/graphiql`. **(ðŸš¨ Note ðŸš¨) we do not recommend using this in production environments as it disables many safety features used by the application**. (Default `false`)"
    },
    {
      "sha": "ec314e6c220ce2dbb6a200750c459ada263e5767",
      "filename": "package.json",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/package.json",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/package.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package.json?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -24,6 +24,7 @@\n     \"build:development\": \"NODE_ENV=development npm-run-all generate --parallel lint:client build:client build:server\",\n     \"build:client\": \"ts-node --transpile-only ./scripts/build.ts\",\n     \"build:server\": \"gulp server\",\n+    \"migration:create\": \"ts-node --transpile-only ./scripts/migration/create.ts\",\n     \"doctoc\": \"doctoc --title='## Table of Contents' --github README.md\",\n     \"generate\": \"npm-run-all generate:css-types generate:schema generate:relay\",\n     \"generate-persist\": \"npm-run-all generate:css-types generate:schema generate:relay-persist\","
    },
    {
      "sha": "a27fe43f528fe00206953ddb2b1697d75345a6d8",
      "filename": "scripts/migration/create.ts",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/scripts/migration/create.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/scripts/migration/create.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/scripts/migration/create.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env ts-node\n+\n+/**\n+ * This script can be invoked via:\n+ *\n+ *   npm run migration:create <migration name>\n+ *\n+ * To create new database migrations.\n+ */\n+\n+// tslint:disable: no-console\n+\n+import fs from \"fs-extra\";\n+import lodash from \"lodash\";\n+import path from \"path\";\n+\n+const templateFilePath = path.resolve(\n+  path.join(\n+    __dirname,\n+    \"../../src/core/server/services/migrate/migration_sample.ts\"\n+  )\n+);\n+\n+const argv = process.argv.slice(2);\n+if (argv.length !== 1) {\n+  console.error(\"usage: npm run migration:create <migration name>\");\n+  process.exit(1);\n+}\n+\n+// Get the name of the new migration.\n+const name = lodash.snakeCase(argv[0]);\n+\n+// Get the version of the new migration.\n+const version = Date.now();\n+\n+// Get the filePath of the new migration.\n+const filePath = path.resolve(\n+  path.join(\n+    __dirname,\n+    `../../src/core/server/services/migrate/migrations/${version}_${name}.ts`\n+  )\n+);\n+\n+if (fs.existsSync(filePath)) {\n+  console.error(`migration already exists at: ${filePath}`);\n+  process.exit(1);\n+}\n+\n+// Write the template out to the file.\n+fs.copyFileSync(templateFilePath, filePath);\n+\n+console.log(`created new migration at: ${filePath}`);"
    },
    {
      "sha": "b305d7488e065286b58db36ce2d543d6cc5041b2",
      "filename": "src/core/client/admin/components/UserHistoryDrawer/UserDrawerAccountHistory.tsx",
      "status": "modified",
      "additions": 10,
      "deletions": 13,
      "changes": 23,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/client/admin/components/UserHistoryDrawer/UserDrawerAccountHistory.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/client/admin/components/UserHistoryDrawer/UserDrawerAccountHistory.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/components/UserHistoryDrawer/UserDrawerAccountHistory.tsx?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -107,20 +107,17 @@ const UserDrawerAccountHistory: FunctionComponent<Props> = ({ user }) => {\n       });\n     });\n \n-    // FIXME: (wyattjoh) once migration has been performed, remove check\n-    if (user.status.premod) {\n-      // Merge in all the premod history items.\n-      user.status.premod.history.forEach(record => {\n-        history.push({\n-          kind: \"premod\",\n-          action: {\n-            action: record.active ? \"created\" : \"removed\",\n-          },\n-          date: new Date(record.createdAt),\n-          takenBy: record.createdBy ? record.createdBy.username : system,\n-        });\n+    // Merge in all the premod history items.\n+    user.status.premod.history.forEach(record => {\n+      history.push({\n+        kind: \"premod\",\n+        action: {\n+          action: record.active ? \"created\" : \"removed\",\n+        },\n+        date: new Date(record.createdAt),\n+        takenBy: record.createdBy ? record.createdBy.username : system,\n       });\n-    }\n+    });\n \n     user.status.username.history.forEach((record, i) => {\n       history.push({"
    },
    {
      "sha": "e72ee13cf9b5c5e1818303c772291c1d8919c7fd",
      "filename": "src/core/client/admin/components/UserStatus/UserStatusChangeContainer.tsx",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/client/admin/components/UserStatus/UserStatusChangeContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/client/admin/components/UserStatus/UserStatusChangeContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/components/UserStatus/UserStatusChangeContainer.tsx?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -66,8 +66,7 @@ const UserStatusChangeContainer: FunctionComponent<Props> = props => {\n   }, [user, removeUserSuspension]);\n \n   const handlePremod = useCallback(() => {\n-    // FIXME: (wyattjoh) once migration has been performed, remove check\n-    if (user.status.premod && user.status.premod.active) {\n+    if (user.status.premod.active) {\n       return;\n     }\n     setShowPremod(true);\n@@ -83,8 +82,7 @@ const UserStatusChangeContainer: FunctionComponent<Props> = props => {\n   }, [setShowPremod]);\n \n   const handleRemovePremod = useCallback(() => {\n-    // FIXME: (wyattjoh) once migration has been performed, remove check\n-    if (!user.status.premod || !user.status.premod.active) {\n+    if (!user.status.premod.active) {\n       return;\n     }\n     removeUserPremod({ userID: user.id });\n@@ -138,8 +136,7 @@ const UserStatusChangeContainer: FunctionComponent<Props> = props => {\n         onRemovePremod={handleRemovePremod}\n         banned={user.status.ban.active}\n         suspended={user.status.suspension.active}\n-        // FIXME: (wyattjoh) once migration has been performed, remove check\n-        premod={Boolean(user.status.premod && user.status.premod.active)}\n+        premod={user.status.premod.active}\n         fullWidth={fullWidth}\n       >\n         <UserStatusContainer user={user} />"
    },
    {
      "sha": "b38c10376af5163b422ee2f8dc7fba9c55ab091e",
      "filename": "src/core/server/app/handlers/api/install.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/app/handlers/api/install.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/app/handlers/api/install.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/install.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -54,14 +54,15 @@ const TenantInstallBodySchema = Joi.object().keys({\n \n export type TenantInstallHandlerOptions = Pick<\n   AppOptions,\n-  \"redis\" | \"mongo\" | \"config\" | \"mailerQueue\" | \"i18n\"\n+  \"redis\" | \"mongo\" | \"config\" | \"mailerQueue\" | \"i18n\" | \"migrationManager\"\n >;\n \n export const installHandler = ({\n   mongo,\n   redis,\n   config,\n   i18n,\n+  migrationManager,\n }: TenantInstallHandlerOptions): RequestHandler => async (req, res, next) => {\n   try {\n     if (!req.coral) {\n@@ -108,6 +109,9 @@ export const installHandler = ({\n       req.coral.now\n     );\n \n+    // Execute pending migrations to get everything installed.\n+    await migrationManager.executePendingMigrations(mongo);\n+\n     // Pull the user details out of the input for the user.\n     const { email, username, password } = userInput;\n "
    },
    {
      "sha": "2b13b051afbdf3f8b2d2202a2054d1e1977a44ac",
      "filename": "src/core/server/app/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/app/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/app/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/index.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -19,6 +19,7 @@ import { ScraperQueue } from \"coral-server/queue/tasks/scraper\";\n import { I18n } from \"coral-server/services/i18n\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n import { Metrics } from \"coral-server/services/metrics\";\n+import { MigrationManager } from \"coral-server/services/migrate\";\n import { PersistedQueryCache } from \"coral-server/services/queries\";\n import { AugmentedRedis } from \"coral-server/services/redis\";\n import TenantCache from \"coral-server/services/tenant/cache\";\n@@ -46,6 +47,7 @@ export interface AppOptions {\n   scraperQueue: ScraperQueue;\n   signingConfig: JWTSigningConfig;\n   tenantCache: TenantCache;\n+  migrationManager: MigrationManager;\n }\n \n /**"
    },
    {
      "sha": "bb702739fb99974ef011b6c11da95d7e8175a855",
      "filename": "src/core/server/config.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/config.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/config.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/config.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -204,13 +204,6 @@ const config = convict({\n     env: \"DISABLE_LIVE_UPDATES\",\n     arg: \"disableLiveUpdates\",\n   },\n-  disable_mongodb_autoindexing: {\n-    doc: \"Disables the creation of new MongoDB indexes\",\n-    format: Boolean,\n-    default: false,\n-    env: \"DISABLE_MONGODB_AUTOINDEXING\",\n-    arg: \"disableMongoDBAutoindexing\",\n-  },\n   disable_client_routes: {\n     doc:\n       \"Disables mounting of client routes for developing with Webpack Dev Server\","
    },
    {
      "sha": "72b9ce21756652bf456e218db799d8808fa757ac",
      "filename": "src/core/server/graph/tenant/resolvers/UserStatus.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 15,
      "changes": 20,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/graph/tenant/resolvers/UserStatus.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/graph/tenant/resolvers/UserStatus.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/tenant/resolvers/UserStatus.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -31,8 +31,7 @@ export const UserStatus: Required<\n     }\n \n     // If they are set to mandatory premod, then mark it.\n-    // FIXME: (wyattjoh) once migration has been performed, remove check\n-    if (consolidatedStatus.premod && consolidatedStatus.premod.active) {\n+    if (consolidatedStatus.premod.active) {\n       statuses.push(GQLUSER_STATUS.PREMOD);\n     }\n \n@@ -55,17 +54,8 @@ export const UserStatus: Required<\n     ...user.consolidateUserSuspensionStatus(suspension),\n     userID,\n   }),\n-  // FIXME: (wyattjoh) once migration has been performed, return PremodStatusInput only\n-  premod: ({ premod, userID }): PremodStatusInput | null => {\n-    const status = user.consolidateUserPremodStatus(premod);\n-    // FIXME: (wyattjoh) once migration has been performed, remove check\n-    if (!status) {\n-      return null;\n-    }\n-\n-    return {\n-      ...status,\n-      userID,\n-    };\n-  },\n+  premod: ({ premod, userID }): PremodStatusInput => ({\n+    ...user.consolidateUserPremodStatus(premod),\n+    userID,\n+  }),\n };"
    },
    {
      "sha": "7030eced45045b44c761265dd985bbff769942ad",
      "filename": "src/core/server/graph/tenant/schema/schema.graphql",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/graph/tenant/schema/schema.graphql",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/graph/tenant/schema/schema.graphql",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/tenant/schema/schema.graphql?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -1541,10 +1541,8 @@ type UserStatus {\n \n   \"\"\"\n   premod stores the user premod status as well as the history of changes.\n-\n-  FIXME: (wyattjoh) once migration has been performed, make non-nullable\n   \"\"\"\n-  premod: PremodStatus @auth(roles: [ADMIN, MODERATOR])\n+  premod: PremodStatus! @auth(roles: [ADMIN, MODERATOR])\n }\n \n \"\"\""
    },
    {
      "sha": "7cbef303bf2498a946ed5d7b924086958b4b2014",
      "filename": "src/core/server/index.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/index.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -27,15 +27,16 @@ import {\n   JWTSigningConfig,\n } from \"coral-server/services/jwt\";\n import { createMetrics } from \"coral-server/services/metrics\";\n+import { MigrationManager } from \"coral-server/services/migrate\";\n import { createMongoDB } from \"coral-server/services/mongodb\";\n-import { ensureIndexes } from \"coral-server/services/mongodb/indexes\";\n import { PersistedQueryCache } from \"coral-server/services/queries\";\n import {\n   AugmentedRedis,\n   createAugmentedRedisClient,\n   createRedisClient,\n } from \"coral-server/services/redis\";\n import TenantCache from \"coral-server/services/tenant/cache\";\n+import { isInstalled } from \"./services/tenant\";\n \n export interface ServerOptions {\n   /**\n@@ -103,6 +104,9 @@ class Server {\n   // server to handle persisted queries.\n   private persistedQueryCache: PersistedQueryCache;\n \n+  // migrationManager is the manager for performing migrations on Coral.\n+  private migrationManager: MigrationManager;\n+\n   constructor(options: ServerOptions) {\n     this.parentApp = express();\n \n@@ -153,6 +157,9 @@ class Server {\n       config\n     );\n \n+    // Create the migration manager.\n+    this.migrationManager = new MigrationManager(this.tenantCache);\n+\n     // Load and upsert the persisted queries.\n     this.persistedQueryCache = new PersistedQueryCache({ mongo: this.mongo });\n \n@@ -188,13 +195,11 @@ class Server {\n     }\n     this.processing = true;\n \n-    // Create the database indexes if it isn't disabled.\n-    if (!this.config.get(\"disable_mongodb_autoindexing\")) {\n-      // Setup the database indexes.\n-      logger.info(\"mongodb autoindexing is enabled, starting indexing\");\n-      await ensureIndexes(this.mongo);\n+    // Run migrations if there is already a Tenant installed.\n+    if (await isInstalled(this.tenantCache)) {\n+      await this.migrationManager.executePendingMigrations(this.mongo);\n     } else {\n-      logger.warn(\"mongodb autoindexing is disabled, skipping indexing\");\n+      logger.info(\"no tenants are installed, skipping running migrations\");\n     }\n \n     // Prime the queries in the database.\n@@ -310,6 +315,7 @@ class Server {\n       persistedQueriesRequired:\n         this.config.get(\"env\") === \"production\" &&\n         !this.config.get(\"enable_graphiql\"),\n+      migrationManager: this.migrationManager,\n     };\n \n     // Only enable the metrics server if concurrency is set to 1."
    },
    {
      "sha": "d2781dc1854878f149ee148d50254530f6beebed",
      "filename": "src/core/server/logger/serializers.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/logger/serializers.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/logger/serializers.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/logger/serializers.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -3,13 +3,14 @@ import { GraphQLError } from \"graphql\";\n import StackUtils from \"stack-utils\";\n \n import { CoralError, CoralErrorContext } from \"coral-server/errors\";\n+import VError from \"verror\";\n \n interface SerializedError {\n   id?: string;\n   message: string;\n   name: string;\n   stack?: string;\n-  context?: CoralErrorContext;\n+  context?: CoralErrorContext | Record<string, any>;\n   originalError?: SerializedError;\n }\n \n@@ -39,6 +40,8 @@ const errSerializer = (err: Error) => {\n     if (cause) {\n       obj.originalError = errSerializer(cause);\n     }\n+  } else if (err instanceof VError) {\n+    obj.context = VError.info(err);\n   }\n \n   return obj;"
    },
    {
      "sha": "b2659bf8b31e3051713ae16a116bbd3655ca007d",
      "filename": "src/core/server/models/action/comment.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 31,
      "changes": 32,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/action/comment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/action/comment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/action/comment.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -17,16 +17,12 @@ import logger from \"coral-server/logger\";\n import {\n   Connection,\n   ConnectionInput,\n-  createCollection,\n-  createConnectionOrderVariants,\n-  createIndexFactory,\n   FilterQuery,\n   Query,\n   resolveConnection,\n } from \"coral-server/models/helpers\";\n import { TenantResource } from \"coral-server/models/tenant\";\n-\n-const collection = createCollection<CommentAction>(\"commentActions\");\n+import { commentActions as collection } from \"coral-server/services/mongodb/collections\";\n \n export enum ACTION_TYPE {\n   /**\n@@ -134,32 +130,6 @@ export interface CommentAction extends TenantResource {\n   metadata?: Record<string, any>;\n }\n \n-export async function createCommentActionIndexes(mongo: Db) {\n-  const createIndex = createIndexFactory(collection(mongo));\n-\n-  // UNIQUE { id }\n-  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n-\n-  // { actionType, commentID, userID }\n-  await createIndex(\n-    { tenantID: 1, actionType: 1, commentID: 1, userID: 1 },\n-    { background: true }\n-  );\n-\n-  const variants = createConnectionOrderVariants<Readonly<CommentAction>>(\n-    [{ createdAt: -1 }],\n-    { background: true }\n-  );\n-\n-  // Connection pagination.\n-  // { ...connectionParams }\n-  await variants(createIndex, {\n-    tenantID: 1,\n-    actionType: 1,\n-    commentID: 1,\n-  });\n-}\n-\n const ActionSchema = [\n   // Flags\n   {"
    },
    {
      "sha": "776ae07495e6190265992c41d82fdba7d34f5e73",
      "filename": "src/core/server/models/action/moderation/comment.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 23,
      "changes": 24,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/action/moderation/comment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/action/moderation/comment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/action/moderation/comment.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -6,33 +6,11 @@ import { GQLCOMMENT_STATUS } from \"coral-server/graph/tenant/schema/__generated_\n import {\n   Connection,\n   ConnectionInput,\n-  createCollection,\n-  createConnectionOrderVariants,\n-  createIndexFactory,\n   Query,\n   resolveConnection,\n } from \"coral-server/models/helpers\";\n import { TenantResource } from \"coral-server/models/tenant\";\n-\n-const collection = createCollection<CommentModerationAction>(\n-  \"commentModerationActions\"\n-);\n-\n-export async function createCommentModerationActionIndexes(mongo: Db) {\n-  const createIndex = createIndexFactory(collection(mongo));\n-\n-  // UNIQUE { id }\n-  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n-\n-  const createVariants = createConnectionOrderVariants<\n-    Readonly<CommentModerationAction>\n-  >([{ createdAt: -1 }]);\n-\n-  // { moderatorID, ...connectionParams }\n-  await createVariants(createIndex, {\n-    moderatorID: 1,\n-  });\n-}\n+import { commentModerationActions as collection } from \"coral-server/services/mongodb/collections\";\n \n /**\n  * CommentModerationAction stores information around a moderation action that"
    },
    {
      "sha": "781a949a0575ab61f4b13eadce3c4646d6003ede",
      "filename": "src/core/server/models/comment/comment.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 83,
      "changes": 84,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/comment/comment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/comment/comment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/comment/comment.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -19,10 +19,7 @@ import {\n } from \"coral-server/models/action/comment\";\n import {\n   Connection,\n-  createCollection,\n   createConnection,\n-  createConnectionOrderVariants,\n-  createIndexFactory,\n   doesNotContainNull,\n   FilterQuery,\n   nodesToEdges,\n@@ -32,6 +29,7 @@ import {\n   resolveConnection,\n } from \"coral-server/models/helpers\";\n import { TenantResource } from \"coral-server/models/tenant\";\n+import { comments as collection } from \"coral-server/services/mongodb/collections\";\n \n import { PUBLISHED_STATUSES } from \"./constants\";\n import {\n@@ -42,8 +40,6 @@ import {\n import { Revision } from \"./revision\";\n import { CommentTag } from \"./tag\";\n \n-const collection = createCollection<Comment>(\"comments\");\n-\n /**\n  * Comment's are created by User's on Stories. Each Comment contains a body, and\n  * can be moderated by another Moderator or Admin User.\n@@ -128,84 +124,6 @@ export interface Comment extends TenantResource {\n   deletedAt?: Date;\n }\n \n-export async function createCommentIndexes(mongo: Db) {\n-  const createIndex = createIndexFactory(collection(mongo));\n-\n-  // UNIQUE { id }\n-  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n-\n-  // Facility for counting the tags against a story.\n-  await createIndex(\n-    {\n-      tenantID: 1,\n-      storyID: 1,\n-      \"tags.type\": 1,\n-      status: 1,\n-    },\n-    {\n-      background: true,\n-      partialFilterExpression: {\n-        \"tags.type\": { $exists: true },\n-      },\n-    }\n-  );\n-\n-  const variants = createConnectionOrderVariants<Readonly<Comment>>([\n-    { createdAt: -1 },\n-    { createdAt: 1 },\n-    { childCount: -1, createdAt: -1 },\n-    { \"actionCounts.REACTION\": -1, createdAt: -1 },\n-  ]);\n-\n-  // Story based Comment Connection pagination.\n-  // { storyID, ...connectionParams }\n-  await variants(createIndex, {\n-    tenantID: 1,\n-    storyID: 1,\n-    status: 1,\n-  });\n-\n-  // Moderation based Comment Connection pagination.\n-  // { storyID, ...connectionParams }\n-  await variants(createIndex, {\n-    tenantID: 1,\n-    status: 1,\n-  });\n-\n-  // Story based Comment Connection pagination that are flagged.\n-  // { storyID, ...connectionParams }\n-  await variants(createIndex, {\n-    tenantID: 1,\n-    storyID: 1,\n-    status: 1,\n-    \"actionCounts.FLAG\": 1,\n-  });\n-\n-  // Story + Reply based Comment Connection pagination.\n-  // { storyID, ...connectionParams }\n-  await variants(createIndex, {\n-    tenantID: 1,\n-    storyID: 1,\n-    parentID: 1,\n-    status: 1,\n-  });\n-\n-  // Author based Comment Connection pagination.\n-  // { authorID, ...connectionParams }\n-  await variants(createIndex, {\n-    tenantID: 1,\n-    authorID: 1,\n-    status: 1,\n-  });\n-\n-  // Tag based Comment Connection pagination.\n-  // { tags.type, ...connectionParams }\n-  await variants(createIndex, {\n-    tenantID: 1,\n-    \"tags.type\": 1,\n-  });\n-}\n-\n export type CreateCommentInput = Omit<\n   Comment,\n   | \"id\""
    },
    {
      "sha": "06c3e7441757a662d2370326987fc6010328dfc6",
      "filename": "src/core/server/models/helpers/index.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/helpers/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/helpers/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/helpers/index.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -1,5 +1,4 @@\n export * from \"./collection\";\n export * from \"./connection\";\n-export * from \"./indexing\";\n export { default as Query } from \"./query\";\n export * from \"./query\";"
    },
    {
      "sha": "b05a15856873c5eb8441356a5c1b1b813416525e",
      "filename": "src/core/server/models/invite.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 16,
      "changes": 17,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/invite.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/invite.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/invite.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -3,23 +3,8 @@ import uuid from \"uuid\";\n \n import { Omit, Sub } from \"coral-common/types\";\n import { GQLUSER_ROLE } from \"coral-server/graph/tenant/schema/__generated__/types\";\n-import {\n-  createCollection,\n-  createIndexFactory,\n-} from \"coral-server/models/helpers\";\n import { TenantResource } from \"coral-server/models/tenant\";\n-\n-const collection = createCollection<Readonly<Invite>>(\"invites\");\n-\n-export async function createInviteIndexes(mongo: Db) {\n-  const createIndex = createIndexFactory(collection(mongo));\n-\n-  // UNIQUE { id }\n-  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n-\n-  // UNIQUE { email }\n-  await createIndex({ tenantID: 1, email: 1 }, { unique: true });\n-}\n+import { invites as collection } from \"coral-server/services/mongodb/collections\";\n \n export interface Invite extends TenantResource {\n   readonly id: string;"
    },
    {
      "sha": "585fc62a906e5a468462e76324f970239454ed48",
      "filename": "src/core/server/models/migration/index.ts",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/migration/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/migration/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/migration/index.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -0,0 +1 @@\n+export * from \"./migration\";"
    },
    {
      "sha": "b6d41ad1a94ef0bb6a5c0e98a8d75cf4b84513f0",
      "filename": "src/core/server/models/migration/migration.ts",
      "status": "added",
      "additions": 96,
      "deletions": 0,
      "changes": 96,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/migration/migration.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/migration/migration.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/migration/migration.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -0,0 +1,96 @@\n+import { Db } from \"mongodb\";\n+\n+import { migrations as collection } from \"coral-server/services/mongodb/collections\";\n+\n+export enum MIGRATION_STATE {\n+  STARTED = \"STARTED\",\n+  FAILED = \"FAILED\",\n+  FINISHED = \"FINISHED\",\n+}\n+\n+export interface MigrationRecord {\n+  id: number;\n+  state: MIGRATION_STATE;\n+  clientID?: string;\n+  createdAt: Date;\n+  updatedAt?: Date;\n+}\n+\n+export async function startMigration(\n+  mongo: Db,\n+  id: number,\n+  clientID: string,\n+  now = new Date()\n+) {\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    {\n+      $setOnInsert: {\n+        id,\n+        clientID,\n+        state: MIGRATION_STATE.STARTED,\n+        createdAt: now,\n+      },\n+    },\n+    {\n+      // False to return the updated document instead of the original document.\n+      returnOriginal: false,\n+      upsert: true,\n+    }\n+  );\n+  if (!result.value) {\n+    throw new Error(\"an unexpected error occurred\");\n+  }\n+\n+  return result.value;\n+}\n+\n+/**\n+ * updateMigrationState will update the state of a migration record to reflect\n+ * the new state as well as un-setting the client ID from the records.\n+ *\n+ * @param mongo the database to interact on\n+ * @param id the migration version to update\n+ * @param state the state to switch the record to\n+ * @param now the current date\n+ */\n+async function updateMigrationState(\n+  mongo: Db,\n+  id: number,\n+  state: MIGRATION_STATE.FINISHED | MIGRATION_STATE.FAILED,\n+  now: Date\n+) {\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    {\n+      $set: {\n+        state,\n+        updatedAt: now,\n+      },\n+      $unset: {\n+        clientID: \"\",\n+      },\n+    },\n+    {\n+      // False to return the updated document instead of the original document.\n+      returnOriginal: false,\n+    }\n+  );\n+\n+  return result.value || null;\n+}\n+\n+export async function finishMigration(mongo: Db, id: number, now = new Date()) {\n+  return updateMigrationState(mongo, id, MIGRATION_STATE.FINISHED, now);\n+}\n+\n+export async function failMigration(mongo: Db, id: number, now = new Date()) {\n+  return updateMigrationState(mongo, id, MIGRATION_STATE.FAILED, now);\n+}\n+\n+export async function retrieveAllMigrationRecords(mongo: Db) {\n+  const cursor = await collection(mongo)\n+    .find({})\n+    .sort({ id: 1 });\n+  return cursor.toArray();\n+}"
    },
    {
      "sha": "45c727b01685b2f7b6257d0f58fd5200afd7fb4b",
      "filename": "src/core/server/models/queries/queries.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 13,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/queries/queries.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/queries/queries.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/queries/queries.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -3,12 +3,7 @@ import { Db, MongoError } from \"mongodb\";\n \n import { waitFor } from \"coral-common/helpers\";\n import logger from \"coral-server/logger\";\n-import {\n-  createCollection,\n-  createIndexFactory,\n-} from \"coral-server/models/helpers\";\n-\n-const collection = createCollection<Readonly<PersistedQuery>>(\"queries\");\n+import { queries as collection } from \"coral-server/services/mongodb/collections\";\n \n export interface PersistedQuery {\n   id: string;\n@@ -19,13 +14,6 @@ export interface PersistedQuery {\n   version: string;\n }\n \n-export async function createQueriesIndexes(mongo: Db) {\n-  const createIndex = createIndexFactory(collection(mongo));\n-\n-  // UNIQUE { id }\n-  await createIndex({ id: 1 }, { unique: true });\n-}\n-\n export async function primeQueries(\n   mongo: Db,\n   queries: PersistedQuery[],"
    },
    {
      "sha": "11714291ff22df60100fbee468b0ebbc8d8565e6",
      "filename": "src/core/server/models/story/counts/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 17,
      "changes": 18,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/story/counts/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/story/counts/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/story/counts/index.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -13,28 +13,12 @@ import {\n   CommentStatusCounts,\n   createEmptyCommentStatusCounts,\n } from \"coral-server/models/comment/helpers\";\n-import {\n-  createCollection,\n-  createIndexFactory,\n-} from \"coral-server/models/helpers\";\n import { retrieveStory, Story } from \"coral-server/models/story\";\n+import { stories as collection } from \"coral-server/services/mongodb/collections\";\n import { AugmentedRedis } from \"coral-server/services/redis\";\n \n import { updateSharedCommentCounts } from \"./shared\";\n \n-/**\n- * collection provides a reference to the stories collection used by the\n- * counting system.\n- */\n-const collection = createCollection<Story>(\"stories\");\n-\n-export async function createStoryCountIndexes(mongo: Db) {\n-  const createIndex = createIndexFactory(collection(mongo));\n-\n-  // { createdAt }\n-  await createIndex({ tenantID: 1, createdAt: 1 }, { background: true });\n-}\n-\n /**\n  * CommentModerationCountsPerQueue stores the number of Comments that exist in\n  * each of the Moderation Queues."
    },
    {
      "sha": "5f2e956da1ed1c1dfddb2a48bd2aac83959b9cc5",
      "filename": "src/core/server/models/story/counts/shared.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/story/counts/shared.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/story/counts/shared.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/story/counts/shared.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -8,12 +8,11 @@ import {\n   CommentStatusCounts,\n   createEmptyCommentStatusCounts,\n } from \"coral-server/models/comment/helpers\";\n-import { createCollection } from \"coral-server/models/helpers\";\n-import { Story } from \"coral-server/models/story\";\n import {\n   CommentModerationCountsPerQueue,\n   StoryCounts,\n } from \"coral-server/models/story/counts\";\n+import { stories as collection } from \"coral-server/services/mongodb/collections\";\n import { AugmentedPipeline, AugmentedRedis } from \"coral-server/services/redis\";\n \n import {\n@@ -46,12 +45,6 @@ const commentCountsModerationQueueTotalKey = (tenantID: string) =>\n const commentCountsModerationQueueQueuesKey = (tenantID: string) =>\n   `${tenantID}:commentCounts:moderationQueue:queues`;\n \n-/**\n- * collection provides a reference to the stories collection used by the\n- * counting system.\n- */\n-const collection = createCollection<Story>(\"stories\");\n-\n /**\n  * recalculateSharedModerationQueueQueueCounts will reset the counts stored for\n  * this Tenant."
    },
    {
      "sha": "77b4400187a0ed2cc9f548e644ef768f14f3544e",
      "filename": "src/core/server/models/story/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 39,
      "changes": 40,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/story/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/story/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/story/index.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -14,16 +14,14 @@ import {\n import {\n   Connection,\n   ConnectionInput,\n-  createConnectionOrderVariants,\n-  createIndexFactory,\n   Query,\n   resolveConnection,\n } from \"coral-server/models/helpers\";\n import { GlobalModerationSettings } from \"coral-server/models/settings\";\n import { TenantResource } from \"coral-server/models/tenant\";\n+import { stories as collection } from \"coral-server/services/mongodb/collections\";\n \n import { createEmptyCommentStatusCounts } from \"../comment/helpers\";\n-import { createCollection } from \"../helpers/collection\";\n import {\n   createEmptyCommentModerationQueueCounts,\n   StoryCommentCounts,\n@@ -32,8 +30,6 @@ import {\n export * from \"./counts\";\n export * from \"./helpers\";\n \n-const collection = createCollection<Story>(\"stories\");\n-\n export type StorySettings = DeepPartial<\n   Pick<GQLStorySettings, \"messageBox\"> & GlobalModerationSettings\n >;\n@@ -81,40 +77,6 @@ export interface Story extends TenantResource {\n   createdAt: Date;\n }\n \n-export async function createStoryIndexes(mongo: Db) {\n-  const createIndex = createIndexFactory(collection(mongo));\n-\n-  // UNIQUE { id }\n-  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n-\n-  // UNIQUE { url }\n-  await createIndex({ tenantID: 1, url: 1 }, { unique: true });\n-\n-  // TEXT { $**, createdAt }\n-  await createIndex(\n-    { tenantID: 1, \"$**\": \"text\", createdAt: -1 },\n-    { background: true }\n-  );\n-\n-  const variants = createConnectionOrderVariants<Readonly<Story>>(\n-    [{ createdAt: -1 }],\n-    { background: true }\n-  );\n-\n-  // Story Connection pagination.\n-  // { ...connectionParams }\n-  await variants(createIndex, {\n-    tenantID: 1,\n-  });\n-\n-  // Closed At ordered Story Connection pagination.\n-  // { closedAt, ...connectionParams }\n-  await variants(createIndex, {\n-    tenantID: 1,\n-    closedAt: 1,\n-  });\n-}\n-\n export interface UpsertStoryInput {\n   id?: string;\n   url: string;"
    },
    {
      "sha": "f1f1288c2425cb63974223043cf4f9af3c3e9912",
      "filename": "src/core/server/models/tenant/tenant.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 16,
      "changes": 18,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/tenant/tenant.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/tenant/tenant.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/tenant/tenant.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -9,15 +9,11 @@ import {\n   GQLMODERATION_MODE,\n   GQLSettings,\n } from \"coral-server/graph/tenant/schema/__generated__/types\";\n-import {\n-  createCollection,\n-  createIndexFactory,\n-} from \"coral-server/models/helpers\";\n import { Settings } from \"coral-server/models/settings\";\n import { I18n } from \"coral-server/services/i18n\";\n-import { generateSSOKey, getDefaultReactionConfiguration } from \"./helpers\";\n+import { tenants as collection } from \"coral-server/services/mongodb/collections\";\n \n-const collection = createCollection<Tenant>(\"tenants\");\n+import { generateSSOKey, getDefaultReactionConfiguration } from \"./helpers\";\n \n /**\n  * TenantResource references a given resource that should be owned by a specific\n@@ -46,16 +42,6 @@ export interface TenantSettings\n  */\n export type Tenant = Settings & TenantSettings;\n \n-export async function createTenantIndexes(mongo: Db) {\n-  const createIndex = createIndexFactory(collection(mongo));\n-\n-  // UNIQUE { id }\n-  await createIndex({ id: 1 }, { unique: true });\n-\n-  // UNIQUE { domain }\n-  await createIndex({ domain: 1 }, { unique: true });\n-}\n-\n /**\n  * CreateTenantInput is the set of properties that can be set when a given\n  * Tenant is created. The remainder of the properties are set from defaults and"
    },
    {
      "sha": "a3e039189bb537f665aeb234f8eb0ccff5ecff19",
      "filename": "src/core/server/models/user/user.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 86,
      "changes": 90,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/user/user.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/models/user/user.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/user/user.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -33,19 +33,15 @@ import logger from \"coral-server/logger\";\n import {\n   Connection,\n   ConnectionInput,\n-  createCollection,\n-  createConnectionOrderVariants,\n-  createIndexFactory,\n   Query,\n   resolveConnection,\n } from \"coral-server/models/helpers\";\n import { TenantResource } from \"coral-server/models/tenant\";\n import { DigestibleTemplate } from \"coral-server/queue/tasks/mailer/templates\";\n+import { users as collection } from \"coral-server/services/mongodb/collections\";\n \n import { getLocalProfile, hasLocalProfile } from \"./helpers\";\n \n-const collection = createCollection<User>(\"users\");\n-\n export interface LocalProfile {\n   type: \"local\";\n   id: string;\n@@ -297,10 +293,8 @@ export interface UserStatus {\n   /**\n    * premod stores whether a user is set to mandatory premod and history of\n    * premod status.\n-   *\n-   * FIXME: (wyattjoh) set defaults during migration\n    */\n-  premod?: PremodStatus;\n+  premod: PremodStatus;\n }\n \n /**\n@@ -436,80 +430,6 @@ export interface User extends TenantResource {\n   deletedAt?: Date;\n }\n \n-export async function createUserIndexes(mongo: Db) {\n-  const createIndex = createIndexFactory(collection(mongo));\n-\n-  // UNIQUE { id }\n-  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n-\n-  // UNIQUE - PARTIAL { email }\n-  await createIndex(\n-    { tenantID: 1, email: 1 },\n-    { unique: true, partialFilterExpression: { email: { $exists: true } } }\n-  );\n-\n-  // UNIQUE { profiles.type, profiles.id }\n-  await createIndex(\n-    { tenantID: 1, \"profiles.type\": 1, \"profiles.id\": 1 },\n-    {\n-      unique: true,\n-      partialFilterExpression: { \"profiles.id\": { $exists: true } },\n-    }\n-  );\n-\n-  // { profiles }\n-  await createIndex(\n-    { tenantID: 1, profiles: 1, email: 1 },\n-    {\n-      partialFilterExpression: { profiles: { $exists: true } },\n-      background: true,\n-    }\n-  );\n-\n-  // TEXT { id, username, email, createdAt }\n-  await createIndex(\n-    {\n-      tenantID: 1,\n-      id: \"text\",\n-      username: \"text\",\n-      email: \"text\",\n-      createdAt: -1,\n-    },\n-    { background: true }\n-  );\n-\n-  const variants = createConnectionOrderVariants<Readonly<User>>(\n-    [{ createdAt: -1 }],\n-    { background: true }\n-  );\n-\n-  // User Connection pagination.\n-  // { ...connectionParams }\n-  await variants(createIndex, {\n-    tenantID: 1,\n-  });\n-\n-  // Role based User Connection pagination.\n-  // { role, ...connectionParams }\n-  await variants(createIndex, {\n-    tenantID: 1,\n-    role: 1,\n-  });\n-\n-  // Suspension based User Connection pagination.\n-  await variants(createIndex, {\n-    tenantID: 1,\n-    \"status.suspension.history.from.start\": 1,\n-    \"status.suspension.history.from.finish\": 1,\n-  });\n-\n-  // Ban based User Connection pagination.\n-  await variants(createIndex, {\n-    tenantID: 1,\n-    \"status.ban.active\": 1,\n-  });\n-}\n-\n function hashPassword(password: string): Promise<string> {\n   return bcrypt.hash(password, 10);\n }\n@@ -1460,8 +1380,7 @@ export async function premodUser(\n \n     // Check to see if the user is already banned.\n     const premod = consolidateUserPremodStatus(user.status.premod);\n-    // FIXME: (wyattjoh) once migration has been performed, remove check\n-    if (premod && premod.active) {\n+    if (premod.active) {\n       throw new UserAlreadyPremoderated();\n     }\n \n@@ -1873,8 +1792,7 @@ export function consolidateUserSuspensionStatus(\n export interface ConsolidatedUserStatus {\n   suspension: ConsolidatedSuspensionStatus;\n   ban: ConsolidatedBanStatus;\n-  // FIXME: (wyattjoh) once migration has been performed, make required\n-  premod?: ConsolidatedPremodStatus;\n+  premod: ConsolidatedPremodStatus;\n }\n \n export function consolidateUserStatus("
    },
    {
      "sha": "c517befdbe77dd3cce2ef339d4586c93775f4bb0",
      "filename": "src/core/server/services/comments/pipeline/phases/preModerateUser.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/comments/pipeline/phases/preModerateUser.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/comments/pipeline/phases/preModerateUser.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/preModerateUser.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -8,8 +8,7 @@ import {\n export const premodUser: IntermediateModerationPhase = ({\n   author,\n }): IntermediatePhaseResult | void => {\n-  // FIXME: (wyattjoh) once migration has been performed, remove check\n-  if (author.status.premod && author.status.premod.active) {\n+  if (author.status.premod.active) {\n     return {\n       status: GQLCOMMENT_STATUS.PREMOD,\n     };"
    },
    {
      "sha": "d207da4d566b00ed15c985e7b4461a675d46c726",
      "filename": "src/core/server/services/migrate/error.ts",
      "status": "added",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/error.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/error.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/error.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -0,0 +1,63 @@\n+// tslint:disable: max-classes-per-file\n+\n+import VError from \"verror\";\n+\n+import { MigrationRecord } from \"coral-server/models/migration\";\n+\n+export class MigrationError extends VError {\n+  public readonly tenantID: string;\n+  public readonly reason: string;\n+  public readonly affectedCollection?: string;\n+  public readonly affectedIDs?: string[];\n+\n+  constructor(\n+    tenantID: string,\n+    reason: string,\n+    affectedCollection?: string,\n+    affectedIDs?: string[]\n+  ) {\n+    super(\n+      {\n+        name: \"MigrationError\",\n+        info: {\n+          tenantID,\n+          affectedCollection,\n+          affectedIDs,\n+        },\n+      },\n+      'MigrationError: \"%s\"',\n+      reason\n+    );\n+\n+    this.tenantID = tenantID;\n+    this.reason = reason;\n+    this.affectedCollection = affectedCollection;\n+    this.affectedIDs = affectedIDs;\n+  }\n+}\n+\n+export class FailedMigrationDetectedError extends VError {\n+  constructor(record: MigrationRecord) {\n+    super(\n+      {\n+        name: \"FailedMigrationDetectedError\",\n+        info: record,\n+      },\n+      'FailedMigrationDetectedError: migration \"%d\" failed, remove this document to restart the migration process',\n+      record.id\n+    );\n+  }\n+}\n+\n+export class InProgressMigrationDetectedError extends VError {\n+  constructor(record: MigrationRecord) {\n+    super(\n+      {\n+        name: \"InProgressMigrationDetectedError\",\n+        info: record,\n+      },\n+      'InProgressMigrationDetectedError: migration \"%d\" was in progress',\n+      record.id\n+    );\n+  }\n+}"
    },
    {
      "sha": "ef77b412774f8361e69c4943e690a6c5bccaa357",
      "filename": "src/core/server/services/migrate/index.ts",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/index.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -0,0 +1,2 @@\n+export { default as Migration } from \"./migration\";\n+export { default as MigrationManager } from \"./manager\";"
    },
    {
      "sha": "43d3b569bc8facc59d68d3565e2fc137f1078bb5",
      "filename": "src/core/server/services/migrate/indexing.ts",
      "status": "renamed",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/indexing.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/indexing.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/indexing.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -1,5 +1,6 @@\n import { merge } from \"lodash\";\n import { Collection, IndexOptions } from \"mongodb\";\n+import now from \"performance-now\";\n \n import { Writable } from \"coral-common/types\";\n import logger from \"coral-server/logger\";\n@@ -32,8 +33,13 @@ export function createIndexFactory<T>(\n   ) => {\n     try {\n       // Try to create the index.\n+      const start = now();\n+      log.debug({ indexSpec, indexOptions }, \"creating index\");\n       const indexName = await collection.createIndex(indexSpec, indexOptions);\n-      log.debug({ indexName, indexSpec, indexOptions }, \"index was created\");\n+      log.debug(\n+        { indexName, indexSpec, indexOptions, took: Math.round(now() - start) },\n+        \"index was created\"\n+      );\n \n       // Match the interface from the `createIndex` function by returning the\n       // index name.\n@@ -48,11 +54,11 @@ export function createIndexFactory<T>(\n }\n \n export function createConnectionOrderVariants<T>(\n+  createIndex: IndexCreationFunction<T>,\n   variants: Array<IndexSpecification<T>>,\n-  indexOptions: IndexOptions = {}\n+  indexOptions: IndexOptions = { background: true }\n ) {\n   return async (\n-    createIndex: IndexCreationFunction<T>,\n     indexSpec: IndexSpecification<T>,\n     variantIndexOptions: IndexOptions = {}\n   ) => {\n@@ -68,9 +74,6 @@ export function createConnectionOrderVariants<T>(\n         merge({}, indexOptions, variantIndexOptions)\n       );\n \n-    // Create a raw index without the variants applied.\n-    await createIndex(indexSpec, merge({}, indexOptions, variantIndexOptions));\n-\n     // Create all the variants.\n     for (const variant of variants) {\n       await createIndexVariant(variant);",
      "previous_filename": "src/core/server/models/helpers/indexing.ts"
    },
    {
      "sha": "41acc779cbf19019c7bb5fdccddf049069e19fd3",
      "filename": "src/core/server/services/migrate/manager.ts",
      "status": "added",
      "additions": 238,
      "deletions": 0,
      "changes": 238,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/manager.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/manager.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/manager.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -0,0 +1,238 @@\n+import fs from \"fs-extra\";\n+import { Db } from \"mongodb\";\n+import path from \"path\";\n+import now from \"performance-now\";\n+import uuid from \"uuid\";\n+\n+import logger from \"coral-server/logger\";\n+import {\n+  failMigration,\n+  finishMigration,\n+  MIGRATION_STATE,\n+  retrieveAllMigrationRecords,\n+  startMigration,\n+} from \"coral-server/models/migration\";\n+import TenantCache from \"coral-server/services/tenant/cache\";\n+\n+import {\n+  FailedMigrationDetectedError,\n+  InProgressMigrationDetectedError,\n+} from \"./error\";\n+import Migration from \"./migration\";\n+\n+// Extract the id from the filename with this regex.\n+const fileNamePattern = /^(\\d+)_([\\S_]+)\\.[tj]s$/;\n+\n+export default class Manager {\n+  private clientID: string;\n+  private migrations: Migration[];\n+  private tenants: TenantCache;\n+  private ran: boolean = false;\n+\n+  constructor(tenants: TenantCache) {\n+    this.clientID = uuid.v4();\n+    this.migrations = [];\n+    this.tenants = tenants;\n+\n+    const fileNames = fs.readdirSync(path.join(__dirname, \"migrations\"));\n+    for (const fileName of fileNames) {\n+      // Test to see if this fileName is one of our migrations.\n+      if (!fileNamePattern.test(fileName)) {\n+        if (fileName.endsWith(\".map\")) {\n+          // This was a mapping file (in production), skip this.\n+          continue;\n+        }\n+\n+        logger.warn(\n+          { fileName },\n+          \"found a file in the migrations folder that did not have an expected format\"\n+        );\n+        continue;\n+      }\n+\n+      // Load the migration.\n+      const filePath = path.join(__dirname, \"migrations\", fileName);\n+      const m = require(filePath);\n+\n+      // Parse the timestamp out of the migration filename.\n+      const matches = fileName.match(fileNamePattern);\n+      if (!matches || matches.length !== 3) {\n+        throw new Error(\"fileName format is invalid\");\n+      }\n+      const id = parseInt(matches[1], 10);\n+\n+      // Create the migration instance.\n+      const migration = new m.default(id, matches[2]);\n+\n+      // Insert the migration into the migrations array.\n+      if (!(migration instanceof Migration)) {\n+        throw new Error(`migration at ${filePath} did not export a Migration`);\n+      }\n+\n+      this.migrations.push(migration);\n+    }\n+\n+    // Sort the migrations.\n+    this.migrations.sort((a, b) => {\n+      if (a.id < b.id) {\n+        return -1;\n+      }\n+\n+      if (a.id > b.id) {\n+        return 1;\n+      }\n+\n+      return 0;\n+    });\n+  }\n+\n+  /**\n+   * pending will return the pending migrations that need to be completed.\n+   *\n+   * @param mongo the database handle to use to get the migrations\n+   */\n+  private async pending(mongo: Db): Promise<Migration[]> {\n+    // Get all the migration records in the database.\n+    const records = await retrieveAllMigrationRecords(mongo);\n+\n+    // Check to see if any of the migrations have failed or are in progress.\n+    for (const record of records) {\n+      switch (record.state) {\n+        case MIGRATION_STATE.FAILED:\n+          throw new FailedMigrationDetectedError(record);\n+        case MIGRATION_STATE.STARTED:\n+          throw new InProgressMigrationDetectedError(record);\n+        default:\n+          break;\n+      }\n+    }\n+\n+    return this.migrations.filter(migration => {\n+      // Find the record based on the migration.\n+      const record = records.find(({ id }) => migration.id === id);\n+      if (record) {\n+        // The record exists, so it isn't pending, it's already finished.\n+        return false;\n+      }\n+\n+      // A record of the migration does not exist, so mark it as pending.\n+      return true;\n+    });\n+  }\n+\n+  private async currentMigration(mongo: Db) {\n+    const records = await retrieveAllMigrationRecords(mongo);\n+    return records.length > 0 ? records[records.length - 1] : null;\n+  }\n+\n+  public async executePendingMigrations(mongo: Db) {\n+    // Error out if this is ran twice.\n+    if (this.ran) {\n+      throw new Error(\"pending migrations have already been executed\");\n+    }\n+\n+    // Mark the migrations as ran.\n+    this.ran = true;\n+\n+    // Check the current migration id.\n+    let currentMigration = await this.currentMigration(mongo);\n+\n+    // Determine which migrations need to be ran.\n+    const pending = await this.pending(mongo);\n+    if (pending.length === 0) {\n+      logger.info(\n+        {\n+          currentMigrationID: currentMigration ? currentMigration.id : null,\n+        },\n+        \"there was no pending migrations to run\"\n+      );\n+      return;\n+    }\n+\n+    logger.info({ pending: pending.length }, \"executing pending migrations\");\n+\n+    const migrationsStartTime = now();\n+\n+    for (const migration of pending) {\n+      let log = logger.child(\n+        {\n+          migrationName: migration.name,\n+          migrationID: migration.id,\n+        },\n+        true\n+      );\n+\n+      // Mark the migration as started.\n+      const record = await startMigration(mongo, migration.id, this.clientID);\n+      if (record.clientID !== this.clientID) {\n+        throw new InProgressMigrationDetectedError(record);\n+      }\n+\n+      // Apply any index changes for the migration.\n+      if (migration.indexes) {\n+        const migrationStartTime = now();\n+        log.info(\"starting index migration\");\n+        await migration.indexes(mongo);\n+        const executionTime = Math.round(now() - migrationStartTime);\n+        log.info({ executionTime }, \"finished index migration\");\n+      }\n+\n+      if (migration.up) {\n+        // The migration provides an up method, we should run this per Tenant.\n+        for await (const tenant of this.tenants) {\n+          log = log.child({ tenantID: tenant.id }, true);\n+\n+          const migrationStartTime = now();\n+          log.info(\"starting migration\");\n+\n+          try {\n+            // Up the migration.\n+            await migration.up(mongo, tenant.id);\n+\n+            // Test the migration.\n+            if (migration.test) {\n+              await migration.test(mongo, tenant.id);\n+            }\n+          } catch (err) {\n+            // The migration or test has failed, try to roll back the operation.\n+            if (migration.down) {\n+              log.error({ err }, \"migration has failed, attempting rollback\");\n+\n+              // Attempt the down migration.\n+              await migration.down(mongo, tenant.id);\n+            } else {\n+              log.error(\n+                { err },\n+                \"migration has failed, and does not have a down method available, migration will not be rolled back\"\n+              );\n+            }\n+\n+            // Mark the migration as failed.\n+            await failMigration(mongo, migration.id);\n+\n+            // Rethrow the error here to cause the application to crash.\n+            throw err;\n+          }\n+\n+          const executionTime = Math.round(now() - migrationStartTime);\n+          log.info({ executionTime }, \"finished migration\");\n+        }\n+      }\n+\n+      // Mark the migration as completed.\n+      await finishMigration(mongo, migration.id);\n+    }\n+\n+    const finishTime = Math.round(now() - migrationsStartTime);\n+\n+    currentMigration = await this.currentMigration(mongo);\n+\n+    logger.info(\n+      {\n+        finishTime,\n+        currentMigrationID: currentMigration ? currentMigration.id : null,\n+      },\n+      \"finished running pending migrations\"\n+    );\n+  }\n+}"
    },
    {
      "sha": "3d2505f6106140d8b7892f46dd2cbad9ed575aca",
      "filename": "src/core/server/services/migrate/migration.ts",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/migration.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/migration.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/migration.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -0,0 +1,35 @@\n+import Logger from \"bunyan\";\n+import { Db } from \"mongodb\";\n+\n+import logger from \"coral-server/logger\";\n+\n+interface Migration {\n+  indexes?(mongo: Db): Promise<void>;\n+  up?(mongo: Db, tenantID: string): Promise<void>;\n+  test?(mongo: Db, tenantID: string): Promise<void>;\n+  down?(mongo: Db, tenantID: string): Promise<void>;\n+}\n+\n+abstract class Migration {\n+  public readonly name: string;\n+  public readonly id: number;\n+  public readonly logger: Logger;\n+\n+  constructor(version: number, name: string) {\n+    this.id = version;\n+    this.name = name;\n+    this.logger = logger.child(\n+      {\n+        migrationName: this.name,\n+        migrationVersion: this.id,\n+      },\n+      true\n+    );\n+  }\n+\n+  protected log(tenantID: string) {\n+    return this.logger.child({ tenantID }, true);\n+  }\n+}\n+\n+export default Migration;"
    },
    {
      "sha": "0c96026b433c6fb9ceb80e1606519a880a54f157",
      "filename": "src/core/server/services/migrate/migration_sample.ts",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/migration_sample.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/migration_sample.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/migration_sample.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -0,0 +1,13 @@\n+import { Db } from \"mongodb\";\n+\n+// Use the following collections reference to interact with specific\n+// collections.\n+// import collections from \"coral-server/services/mongodb/collections\";\n+\n+import Migration from \"coral-server/services/migrate/migration\";\n+\n+export default class extends Migration {\n+  public async up(mongo: Db, tenantID: string) {\n+    throw new Error(\"migration not implemented\");\n+  }\n+}"
    },
    {
      "sha": "82bdfcc1ad2b61de459f967640782c2a0d7a143b",
      "filename": "src/core/server/services/migrate/migrations/1569455150152_premod_user_status.ts",
      "status": "added",
      "additions": 77,
      "deletions": 0,
      "changes": 77,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/migrations/1569455150152_premod_user_status.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/migrations/1569455150152_premod_user_status.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/migrations/1569455150152_premod_user_status.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -0,0 +1,77 @@\n+import { Db } from \"mongodb\";\n+\n+import collections from \"coral-server/services/mongodb/collections\";\n+\n+import { MigrationError } from \"../error\";\n+import Migration from \"../migration\";\n+\n+export default class extends Migration {\n+  public async down(mongo: Db, tenantID: string) {\n+    // Remove the premod user status from all users on this Tenant.\n+    const result = await collections.users(mongo).updateMany(\n+      {\n+        tenantID,\n+        \"status.premod\": { $ne: null },\n+      },\n+      {\n+        $unset: {\n+          \"status.premod\": \"\",\n+        },\n+      }\n+    );\n+\n+    this.log(tenantID).warn(\n+      { matchedCount: result.matchedCount, modifiedCount: result.matchedCount },\n+      \"cleared the premod status from users\"\n+    );\n+  }\n+\n+  public async test(mongo: Db, tenantID: string) {\n+    // Find all the users that still have premod status unset.\n+    const cursor = await collections\n+      .users(mongo)\n+      .find({\n+        \"status.premod\": null,\n+        tenantID,\n+      })\n+      .project({ id: 1 });\n+\n+    // Count them.\n+    const users = await cursor.toArray();\n+    const count = users.length;\n+    if (count === 0) {\n+      this.log(tenantID).info(\"all users migrated successfully\");\n+      return;\n+    }\n+\n+    throw new MigrationError(\n+      tenantID,\n+      \"found users that were not updated\",\n+      \"users\",\n+      users.map(({ id }) => id)\n+    );\n+  }\n+\n+  public async up(mongo: Db, tenantID: string) {\n+    // Migrate users to include the premod status.\n+    const result = await collections.users(mongo).updateMany(\n+      {\n+        \"status.premod\": null,\n+        tenantID,\n+      },\n+      {\n+        $set: {\n+          \"status.premod\": {\n+            active: false,\n+            history: [],\n+          },\n+        },\n+      }\n+    );\n+\n+    this.log(tenantID).info(\n+      { matchedCount: result.matchedCount, modifiedCount: result.matchedCount },\n+      \"updated user premod status\"\n+    );\n+  }\n+}"
    },
    {
      "sha": "82c458eccb12ad37c64714fb08f8892ee60e24d2",
      "filename": "src/core/server/services/migrate/migrations/1569612830133_indexes.ts",
      "status": "added",
      "additions": 342,
      "deletions": 0,
      "changes": 342,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/migrations/1569612830133_indexes.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/migrate/migrations/1569612830133_indexes.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/migrations/1569612830133_indexes.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -0,0 +1,342 @@\n+import { Db } from \"mongodb\";\n+\n+import Migration from \"coral-server/services/migrate/migration\";\n+import collections from \"coral-server/services/mongodb/collections\";\n+\n+import { createConnectionOrderVariants, createIndexFactory } from \"../indexing\";\n+\n+async function createMigrationRecordIndexes(mongo: Db) {\n+  const createIndex = createIndexFactory(collections.migrations(mongo));\n+\n+  // UNIQUE { id }\n+  await createIndex({ id: 1 }, { unique: true });\n+}\n+\n+async function createUserIndexes(mongo: Db) {\n+  const createIndex = createIndexFactory(collections.users(mongo));\n+\n+  // UNIQUE { id }\n+  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n+\n+  // UNIQUE - PARTIAL { email }\n+  await createIndex(\n+    { tenantID: 1, email: 1 },\n+    { unique: true, partialFilterExpression: { email: { $exists: true } } }\n+  );\n+\n+  // UNIQUE { profiles.type, profiles.id }\n+  await createIndex(\n+    { tenantID: 1, \"profiles.type\": 1, \"profiles.id\": 1 },\n+    {\n+      unique: true,\n+      partialFilterExpression: { \"profiles.id\": { $exists: true } },\n+    }\n+  );\n+\n+  // { profiles }\n+  await createIndex(\n+    { tenantID: 1, profiles: 1, email: 1 },\n+    {\n+      partialFilterExpression: { profiles: { $exists: true } },\n+      background: true,\n+    }\n+  );\n+\n+  // TEXT { id, username, email, createdAt }\n+  await createIndex(\n+    {\n+      tenantID: 1,\n+      id: \"text\",\n+      username: \"text\",\n+      email: \"text\",\n+      createdAt: -1,\n+    },\n+    { background: true }\n+  );\n+\n+  const variants = createConnectionOrderVariants(\n+    createIndex,\n+    [{ createdAt: -1 }],\n+    { background: true }\n+  );\n+\n+  // User Connection pagination.\n+  // { ...connectionParams }\n+  await variants({\n+    tenantID: 1,\n+  });\n+\n+  // Role based User Connection pagination.\n+  // { role, ...connectionParams }\n+  await variants({\n+    tenantID: 1,\n+    role: 1,\n+  });\n+\n+  // Suspension based User Connection pagination.\n+  await variants({\n+    tenantID: 1,\n+    \"status.suspension.history.from.start\": 1,\n+    \"status.suspension.history.from.finish\": 1,\n+  });\n+\n+  // Ban based User Connection pagination.\n+  await variants({\n+    tenantID: 1,\n+    \"status.ban.active\": 1,\n+  });\n+}\n+\n+async function createInviteIndexes(mongo: Db) {\n+  const createIndex = createIndexFactory(collections.invites(mongo));\n+\n+  // UNIQUE { id }\n+  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n+\n+  // UNIQUE { email }\n+  await createIndex({ tenantID: 1, email: 1 }, { unique: true });\n+}\n+\n+async function createTenantIndexes(mongo: Db) {\n+  const createIndex = createIndexFactory(collections.tenants(mongo));\n+\n+  // UNIQUE { id }\n+  await createIndex({ id: 1 }, { unique: true });\n+\n+  // UNIQUE { domain }\n+  await createIndex({ domain: 1 }, { unique: true });\n+}\n+\n+async function createStoryIndexes(mongo: Db) {\n+  const createIndex = createIndexFactory(collections.stories(mongo));\n+\n+  // UNIQUE { id }\n+  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n+\n+  // UNIQUE { url }\n+  await createIndex({ tenantID: 1, url: 1 }, { unique: true });\n+\n+  // TEXT { $**, createdAt }\n+  await createIndex(\n+    { tenantID: 1, \"$**\": \"text\", createdAt: -1 },\n+    { background: true }\n+  );\n+\n+  const variants = createConnectionOrderVariants(\n+    createIndex,\n+    [{ createdAt: -1 }],\n+    { background: true }\n+  );\n+\n+  // Story Connection pagination.\n+  // { ...connectionParams }\n+  await variants({\n+    tenantID: 1,\n+  });\n+\n+  // Closed At ordered Story Connection pagination.\n+  // { closedAt, ...connectionParams }\n+  await variants({\n+    tenantID: 1,\n+    closedAt: 1,\n+  });\n+}\n+\n+async function createStoryCountIndexes(mongo: Db) {\n+  const createIndex = createIndexFactory(collections.stories(mongo));\n+\n+  // { createdAt }\n+  await createIndex({ tenantID: 1, createdAt: 1 }, { background: true });\n+}\n+\n+async function createQueriesIndexes(mongo: Db) {\n+  const createIndex = createIndexFactory(collections.queries(mongo));\n+\n+  // UNIQUE { id }\n+  await createIndex({ id: 1 }, { unique: true });\n+}\n+\n+async function createCommentActionIndexes(mongo: Db) {\n+  const createIndex = createIndexFactory(collections.commentActions(mongo));\n+\n+  // UNIQUE { id }\n+  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n+\n+  // { actionType, commentID, userID }\n+  await createIndex(\n+    { tenantID: 1, actionType: 1, commentID: 1, userID: 1 },\n+    { background: true }\n+  );\n+\n+  const variants = createConnectionOrderVariants(\n+    createIndex,\n+    [{ createdAt: -1 }],\n+    { background: true }\n+  );\n+\n+  // Connection pagination.\n+  // { ...connectionParams }\n+  await variants({\n+    tenantID: 1,\n+    actionType: 1,\n+    commentID: 1,\n+  });\n+}\n+\n+async function createCommentModerationActionIndexes(mongo: Db) {\n+  const createIndex = createIndexFactory(\n+    collections.commentModerationActions(mongo)\n+  );\n+\n+  // UNIQUE { id }\n+  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n+\n+  const createVariants = createConnectionOrderVariants(createIndex, [\n+    { createdAt: -1 },\n+  ]);\n+\n+  // { moderatorID, ...connectionParams }\n+  await createVariants({\n+    moderatorID: 1,\n+  });\n+}\n+\n+async function createCommentIndexes(mongo: Db) {\n+  const createIndex = createIndexFactory(collections.comments(mongo));\n+\n+  // UNIQUE { id }\n+  await createIndex({ tenantID: 1, id: 1 }, { unique: true });\n+\n+  // Facility for counting the tags against a story.\n+  await createIndex(\n+    {\n+      tenantID: 1,\n+      storyID: 1,\n+      \"tags.type\": 1,\n+      status: 1,\n+    },\n+    {\n+      background: true,\n+      partialFilterExpression: {\n+        \"tags.type\": { $exists: true },\n+      },\n+    }\n+  );\n+\n+  const streamVariants = createConnectionOrderVariants(createIndex, [\n+    { createdAt: -1 },\n+    { createdAt: 1 },\n+    { childCount: -1, createdAt: -1 },\n+    { \"actionCounts.REACTION\": -1, createdAt: -1 },\n+  ]);\n+\n+  // Story based Comment Connection pagination.\n+  // { storyID, ...connectionParams }\n+  await streamVariants({\n+    tenantID: 1,\n+    storyID: 1,\n+    status: 1,\n+  });\n+\n+  // Story + Reply based Comment Connection pagination.\n+  // { storyID, ...connectionParams }\n+  await streamVariants({\n+    tenantID: 1,\n+    storyID: 1,\n+    parentID: 1,\n+    status: 1,\n+  });\n+\n+  // Author based Comment Connection pagination.\n+  // { authorID, ...connectionParams }\n+  await streamVariants({\n+    tenantID: 1,\n+    authorID: 1,\n+    status: 1,\n+  });\n+\n+  // Tag based Comment Connection pagination.\n+  // { tags.type, ...connectionParams }\n+  await streamVariants({\n+    tenantID: 1,\n+    storyID: 1,\n+    \"tags.type\": 1,\n+  });\n+\n+  const adminVariants = createConnectionOrderVariants(\n+    createIndex,\n+    [{ createdAt: -1 }, { createdAt: 1 }],\n+    { background: true }\n+  );\n+\n+  // Moderation based Comment Connection pagination.\n+  // { storyID, ...connectionParams }\n+  await adminVariants({\n+    tenantID: 1,\n+    status: 1,\n+  });\n+\n+  // Story based Comment Connection pagination that are flagged.\n+  // { storyID, ...connectionParams }\n+  await adminVariants({\n+    tenantID: 1,\n+    storyID: 1,\n+    status: 1,\n+    \"actionCounts.FLAG\": 1,\n+  });\n+\n+  // Author based Comment Connection pagination.\n+  // { authorID, ...connectionParams }\n+  await adminVariants({\n+    tenantID: 1,\n+    authorID: 1,\n+  });\n+}\n+\n+type IndexCreationFunction = (mongo: Db) => Promise<void>;\n+\n+const indexes: Array<[string, IndexCreationFunction]> = [\n+  [\"migrations\", createMigrationRecordIndexes],\n+  [\"users\", createUserIndexes],\n+  [\"invites\", createInviteIndexes],\n+  [\"tenants\", createTenantIndexes],\n+  [\"comments\", createCommentIndexes],\n+  [\"stories\", createStoryIndexes],\n+  [\"stories\", createStoryCountIndexes],\n+  [\"commentActions\", createCommentActionIndexes],\n+  [\"commentModerationActions\", createCommentModerationActionIndexes],\n+  [\"queries\", createQueriesIndexes],\n+];\n+\n+export default class extends Migration {\n+  /**\n+   * ensureIndexes will ensure that all indexes have been created.\n+   *\n+   * @param mongo a MongoDB Database Connection\n+   */\n+  private async ensureIndexes(mongo: Db) {\n+    this.logger.info(\n+      { indexGroupCount: indexes.length },\n+      \"now ensuring indexes are created\"\n+    );\n+\n+    // For each of the index functions, call it.\n+    for (const [indexGroup, indexFunction] of indexes) {\n+      this.logger.info({ indexGroup }, \"ensuring indexes are created\");\n+      await indexFunction(mongo);\n+      this.logger.info({ indexGroup }, \"indexes have been created\");\n+    }\n+\n+    this.logger.info(\"all indexes have been created\");\n+  }\n+\n+  public async indexes(mongo: Db) {\n+    // Drop existing indexes on managed collections so we can re-create them.\n+    for (const collection of Object.values(collections)) {\n+      await collection(mongo).dropIndexes();\n+    }\n+\n+    // Re-create the indexes for each collection now.\n+    await this.ensureIndexes(mongo);\n+  }\n+}"
    },
    {
      "sha": "b07996eedcd3acb101357e62c92e8f18e1df2979",
      "filename": "src/core/server/services/mongodb/collections.ts",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/mongodb/collections.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/mongodb/collections.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/mongodb/collections.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -0,0 +1,45 @@\n+import { createCollection } from \"coral-server/models/helpers\";\n+\n+import { CommentAction } from \"coral-server/models/action/comment\";\n+import { CommentModerationAction } from \"coral-server/models/action/moderation/comment\";\n+import { Comment } from \"coral-server/models/comment\";\n+import { Invite } from \"coral-server/models/invite\";\n+import { MigrationRecord } from \"coral-server/models/migration\";\n+import { PersistedQuery } from \"coral-server/models/queries\";\n+import { Story } from \"coral-server/models/story\";\n+import { Tenant } from \"coral-server/models/tenant\";\n+import { User } from \"coral-server/models/user\";\n+\n+export const users = createCollection<User>(\"users\");\n+\n+export const invites = createCollection<Invite>(\"invites\");\n+\n+export const tenants = createCollection<Tenant>(\"tenants\");\n+\n+export const comments = createCollection<Comment>(\"comments\");\n+\n+export const stories = createCollection<Story>(\"stories\");\n+\n+export const commentActions = createCollection<CommentAction>(\"commentActions\");\n+\n+export const commentModerationActions = createCollection<\n+  CommentModerationAction\n+>(\"commentModerationActions\");\n+\n+export const queries = createCollection<PersistedQuery>(\"queries\");\n+\n+export const migrations = createCollection<MigrationRecord>(\"migrations\");\n+\n+const collections = {\n+  users,\n+  invites,\n+  tenants,\n+  comments,\n+  stories,\n+  commentActions,\n+  commentModerationActions,\n+  queries,\n+  migrations,\n+};\n+\n+export default collections;"
    },
    {
      "sha": "98fe3f99b2c5bacd539976b13ec336b89016c178",
      "filename": "src/core/server/services/mongodb/indexes.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 49,
      "changes": 49,
      "blob_url": "https://github.com/coralproject/talk/blob/b3b26bd9f3291e6561e09d55f5d0e9866511919a/src/core/server/services/mongodb/indexes.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/b3b26bd9f3291e6561e09d55f5d0e9866511919a/src/core/server/services/mongodb/indexes.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/mongodb/indexes.ts?ref=b3b26bd9f3291e6561e09d55f5d0e9866511919a",
      "patch": "@@ -1,49 +0,0 @@\n-import { Db } from \"mongodb\";\n-\n-import logger from \"coral-server/logger\";\n-import { createCommentActionIndexes } from \"coral-server/models/action/comment\";\n-import { createCommentModerationActionIndexes } from \"coral-server/models/action/moderation/comment\";\n-import { createCommentIndexes } from \"coral-server/models/comment\";\n-import { createInviteIndexes } from \"coral-server/models/invite\";\n-import { createQueriesIndexes } from \"coral-server/models/queries\";\n-import {\n-  createStoryCountIndexes,\n-  createStoryIndexes,\n-} from \"coral-server/models/story\";\n-import { createTenantIndexes } from \"coral-server/models/tenant\";\n-import { createUserIndexes } from \"coral-server/models/user\";\n-\n-type IndexCreationFunction = (mongo: Db) => Promise<void>;\n-\n-const indexes: Array<[string, IndexCreationFunction]> = [\n-  [\"users\", createUserIndexes],\n-  [\"invites\", createInviteIndexes],\n-  [\"tenants\", createTenantIndexes],\n-  [\"comments\", createCommentIndexes],\n-  [\"stories\", createStoryIndexes],\n-  [\"stories\", createStoryCountIndexes],\n-  [\"commentActions\", createCommentActionIndexes],\n-  [\"commentModerationActions\", createCommentModerationActionIndexes],\n-  [\"queries\", createQueriesIndexes],\n-];\n-\n-/**\n- * ensureIndexes will ensure that all indexes have been created.\n- *\n- * @param mongo a MongoDB Database Connection\n- */\n-export async function ensureIndexes(mongo: Db) {\n-  logger.debug(\n-    { indexGroupCount: indexes.length },\n-    \"now ensuring indexes are created\"\n-  );\n-\n-  // For each of the index functions, call it.\n-  for (const [indexGroup, indexFunction] of indexes) {\n-    logger.debug({ indexGroup }, \"ensuring indexes are created\");\n-    await indexFunction(mongo);\n-    logger.debug({ indexGroup }, \"indexes have been created\");\n-  }\n-\n-  logger.debug(\"all indexes have been created\");\n-}"
    },
    {
      "sha": "6b9ccc64dc81b56c3d0684a54a02fb1d94ec20f7",
      "filename": "src/core/server/services/tenant/cache/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/tenant/cache/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/tenant/cache/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/cache/index.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -198,6 +198,8 @@ export default class TenantCache {\n \n         yield tenant;\n       }\n+\n+      return;\n     }\n \n     // Caching must be disabled, so just grab all the tenants for this node and"
    },
    {
      "sha": "b1f229565de9ac70a3a4e6a140f6e9f67b1132bc",
      "filename": "src/core/server/services/tenant/index.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/tenant/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/tenant/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/index.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -87,8 +87,6 @@ export async function install(\n     throw new TenantInstalledAlreadyError();\n   }\n \n-  // TODO: (wyattjoh) perform any pending migrations.\n-\n   logger.info(\"installing tenant\");\n \n   // Create the Tenant."
    },
    {
      "sha": "b53da135f68aa5a7e3fc506065da6066da6baa21",
      "filename": "src/core/server/services/users/delete.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 13,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/users/delete.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/users/delete.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/users/delete.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -1,22 +1,10 @@\n import { Collection, Db } from \"mongodb\";\n \n-import { CommentAction } from \"coral-server/models/action/comment\";\n-import { createCollection } from \"coral-server/models/helpers\";\n import { Story } from \"coral-server/models/story\";\n-import { Tenant } from \"coral-server/models/tenant\";\n-import { User } from \"coral-server/models/user\";\n+import collections from \"coral-server/services/mongodb/collections\";\n \n const BATCH_SIZE = 500;\n \n-// TODO: extract this out to a separate file so it can be re-used elsewhere\n-const collections = {\n-  users: createCollection<User>(\"users\"),\n-  comments: createCollection<Comment>(\"comments\"),\n-  stories: createCollection<Story>(\"stories\"),\n-  tenants: createCollection<Tenant>(\"tenants\"),\n-  commentActions: createCollection<CommentAction>(\"commentActions\"),\n-};\n-\n async function executeBulkOperations<T>(\n   collection: Collection<T>,\n   operations: any[]"
    },
    {
      "sha": "a358a3b5aa1fc029e9a14d05f7d23ec54ae79a8e",
      "filename": "src/core/server/services/users/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/users/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/c045f52daa73bbe761e78383a4465d509d3358d6/src/core/server/services/users/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/users/index.ts?ref=c045f52daa73bbe761e78383a4465d509d3358d6",
      "patch": "@@ -820,8 +820,7 @@ export async function premod(\n \n   // Check to see if the User is currently banned.\n   const premodStatus = consolidateUserPremodStatus(targetUser.status.premod);\n-  // FIXME: (wyattjoh) once migration has been performed, remove check\n-  if (premodStatus && premodStatus.active) {\n+  if (premodStatus.active) {\n     throw new UserAlreadyPremoderated();\n   }\n \n@@ -845,8 +844,7 @@ export async function removePremod(\n \n   // Check to see if the User is currently suspended.\n   const premodStatus = consolidateUserPremodStatus(targetUser.status.premod);\n-  // FIXME: (wyattjoh) once migration has been performed, remove check\n-  if (!premodStatus || !premodStatus.active) {\n+  if (!premodStatus.active) {\n     // The user is not premodded currently, just return the user because we\n     // don't have to do anything.\n     return targetUser;"
    }
  ]
}
