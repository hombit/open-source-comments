{
  "sha": "4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjRkYzEyM2RiZTg0ZjRmMjQ4ODY0YmNkYmJkNmNjMmIzYTRkYWZlMTE=",
  "commit": {
    "author": {
      "name": "Anton Kosourov",
      "email": "kosourov.anton88@gmail.com",
      "date": "2019-09-30T18:12:42Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-09-30T18:12:42Z"
    },
    "message": "Change url in comments, decorate approach (#431)\n\n* WIP: url mapper, wrapped reader approach\r\n\r\n* create url mapper on start\r\n\r\n* add pattern matching in mapper\r\n\r\n* check pattern matching in test\r\n\r\n* change site-id from radio-t to remark42 in tests\r\n\r\n* create new url mapper on demand, based on given func, union strict and prefix rules\r\n\r\n* rename convert to remap\r\n\r\n* add import with mapper test\r\n\r\n* rename mapper func to UrlMapperMaker, create comments in test via data service\r\n\r\n* move /import/wait to /wait ctrl\r\n\r\n* add remap cmd\r\n\r\n* fix url naming",
    "tree": {
      "sha": "72e3ff96ddfad5e02ed923b74d1ed4d8c3184f0b",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/72e3ff96ddfad5e02ed923b74d1ed4d8c3184f0b"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
  "html_url": "https://github.com/umputun/remark/commit/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/comments",
  "author": {
    "login": "akosourov",
    "id": 17426217,
    "node_id": "MDQ6VXNlcjE3NDI2MjE3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/17426217?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/akosourov",
    "html_url": "https://github.com/akosourov",
    "followers_url": "https://api.github.com/users/akosourov/followers",
    "following_url": "https://api.github.com/users/akosourov/following{/other_user}",
    "gists_url": "https://api.github.com/users/akosourov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/akosourov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/akosourov/subscriptions",
    "organizations_url": "https://api.github.com/users/akosourov/orgs",
    "repos_url": "https://api.github.com/users/akosourov/repos",
    "events_url": "https://api.github.com/users/akosourov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/akosourov/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6b2addc280289939f2a29edcd3db89cbc44ed6e0",
      "url": "https://api.github.com/repos/umputun/remark/commits/6b2addc280289939f2a29edcd3db89cbc44ed6e0",
      "html_url": "https://github.com/umputun/remark/commit/6b2addc280289939f2a29edcd3db89cbc44ed6e0"
    }
  ],
  "stats": {
    "total": 556,
    "additions": 542,
    "deletions": 14
  },
  "files": [
    {
      "sha": "df09b12c97b582cf9106404bc75dcdef22cd4e52",
      "filename": "README.md",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/README.md",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/README.md?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -769,7 +769,14 @@ _returned id should be appended to load image url on caller side_\n * `GET /api/v1/admin/export?site=side-id&mode=[stream|file]` - export all comments to json stream or gz file.\n * `POST /api/v1/admin/import?site=side-id` - import comments from the backup, uses post body.\n * `POST /api/v1/admin/import/form?site=side-id` - import comments from the backup, user post form.\n-* `GET /api/v1/admin/import/wait?site=side-id` - wait for import completion.\n+* `POST /api/v1/admin/remap?site=side-id` - remap comments to different URLs. Expect list of \"from-url new-url\" pairs separated by \\n. \n+From-url and new-url parts separated by space. If urls end with asterisk (*) it means matching by prefix. Remap procedure based on\n+export/import chain so make backup first.\n+    ```\n+    http://oldsite.com* https://newsite.com*\n+    http://oldsite.com/from-old-page/1 https://newsite.com/to-new-page/1\n+    ```\n+* `GET /api/v1/admin/wait?site=side-id` - wait for completion for any async migration ops (import or remap).\n * `PUT /api/v1/admin/pin/{id}?site=site-id&url=post-url&pin=1` - pin or unpin comment.\n * `GET /api/v1/admin/user/{userid}?site=site-id` - get user's info.\n * `DELETE /api/v1/admin/user/{userid}?site=site-id` - delete all user's comments."
    },
    {
      "sha": "eda4fcc71cbf8f10497142058dd0866a4cc65f56",
      "filename": "backend/app/cmd/remap.go",
      "status": "added",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/cmd/remap.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/cmd/remap.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/remap.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -0,0 +1,64 @@\n+package cmd\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"time\"\n+\n+\tlog \"github.com/go-pkgz/lgr\"\n+\t\"github.com/pkg/errors\"\n+)\n+\n+// RemapCommand set of flags and command for change linkage between comments to\n+// different urls based on given rules (input file)\n+type RemapCommand struct {\n+\tSite        string        `short:\"s\" long:\"site\" env:\"SITE\" default:\"remark\" description:\"site name\"`\n+\tInputFile   string        `short:\"f\" long:\"file\" description:\"input file name\" required:\"true\"`\n+\tAdminPasswd string        `long:\"admin-passwd\" env:\"ADMIN_PASSWD\" required:\"true\" description:\"admin basic auth password\"`\n+\tTimeout     time.Duration `long:\"timeout\" default:\"15m\" description:\"remap timeout\"`\n+\tCommonOpts\n+}\n+\n+func (rc *RemapCommand) Execute(args []string) error {\n+\tlog.Printf(\"[INFO] start remap, site %s, file with rules %s\", rc.Site, rc.InputFile)\n+\tresetEnv(\"SECRET\", \"ADMIN_PASSWD\")\n+\n+\trulesReader, err := os.Open(rc.InputFile)\n+\tif err != nil {\n+\t\treturn errors.Wrapf(err, \"cant open file %s\", rc.InputFile)\n+\t}\n+\n+\tclient := http.Client{}\n+\tctx, cancel := context.WithTimeout(context.Background(), rc.Timeout)\n+\tdefer cancel()\n+\tremapURL := fmt.Sprintf(\"%s/api/v1/admin/remap?site=%s\", rc.RemarkURL, rc.Site)\n+\treq, err := http.NewRequest(http.MethodPost, remapURL, rulesReader)\n+\tif err != nil {\n+\t\treturn errors.Wrapf(err, \"can't make remap request for %s\", remapURL)\n+\t}\n+\treq.SetBasicAuth(\"admin\", rc.AdminPasswd)\n+\n+\tresp, err := client.Do(req.WithContext(ctx))\n+\tif err != nil {\n+\t\treturn errors.Wrapf(err, \"request failed for %s\", remapURL)\n+\t}\n+\tdefer func() {\n+\t\tif err = resp.Body.Close(); err != nil {\n+\t\t\tlog.Printf(\"[WARN] failed to close response, %s\", err)\n+\t\t}\n+\t}()\n+\tif resp.StatusCode >= 300 {\n+\t\treturn responseError(resp)\n+\t}\n+\n+\tbody, err := ioutil.ReadAll(resp.Body)\n+\tif err != nil {\n+\t\treturn errors.Wrap(err, \"can't get response\")\n+\t}\n+\n+\tlog.Printf(\"[INFO] completed, status=%d, %s\", resp.StatusCode, string(body))\n+\treturn nil\n+}"
    },
    {
      "sha": "a04bdad7cd2219535a5445cd086a1b06761b13f5",
      "filename": "backend/app/cmd/remap_test.go",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/cmd/remap_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/cmd/remap_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/remap_test.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -0,0 +1,36 @@\n+package cmd\n+\n+import (\n+\t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"net/http/httptest\"\n+\t\"testing\"\n+\n+\t\"github.com/jessevdk/go-flags\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+)\n+\n+func TestRemap_Execute(t *testing.T) {\n+\n+\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\tassert.Equal(t, r.URL.Path, \"/api/v1/admin/remap\")\n+\t\tassert.Equal(t, \"POST\", r.Method)\n+\t\tassert.Equal(t, \"remark\", r.URL.Query().Get(\"site\"))\n+\t\tbody, err := ioutil.ReadAll(r.Body)\n+\t\tassert.Nil(t, err)\n+\t\tassert.Equal(t, \"http://oldsite.com* https://newsite.com*\\nhttp://oldsite.com/from-old-page/1 https://newsite.com/to-new-page/1\", string(body))\n+\n+\t\tw.WriteHeader(202)\n+\t}))\n+\tdefer ts.Close()\n+\n+\tcmd := RemapCommand{}\n+\tcmd.SetCommon(CommonOpts{RemarkURL: ts.URL, SharedSecret: \"123456\"})\n+\n+\tp := flags.NewParser(&cmd, flags.Default)\n+\t_, err := p.ParseArgs([]string{\"--site=remark\", \"--file=testdata/remap_urls.txt\", \"--admin-passwd=secret\"})\n+\trequire.Nil(t, err)\n+\terr = cmd.Execute(nil)\n+\tassert.NoError(t, err)\n+}"
    },
    {
      "sha": "999d979201eae928e330d71546cfb61822fd2046",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/server.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -305,6 +305,7 @@ func (s *ServerCommand) newServerApp() (*serverApp, error) {\n \t\tDisqusImporter:    &migrator.Disqus{DataStore: dataService},\n \t\tWordPressImporter: &migrator.WordPress{DataStore: dataService},\n \t\tNativeExporter:    &migrator.Native{DataStore: dataService},\n+\t\tUrlMapperMaker:    migrator.NewUrlMapper,\n \t\tKeyStore:          adminStore,\n \t}\n "
    },
    {
      "sha": "dad90911cb9063ccdd671743640c52aa8594328f",
      "filename": "backend/app/cmd/testdata/remap_urls.txt",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/cmd/testdata/remap_urls.txt",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/cmd/testdata/remap_urls.txt",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/testdata/remap_urls.txt?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -0,0 +1,2 @@\n+http://oldsite.com* https://newsite.com*\n+http://oldsite.com/from-old-page/1 https://newsite.com/to-new-page/1\n\\ No newline at end of file"
    },
    {
      "sha": "1837a17439a6c6f4b8f07e5a63a8f9969dd87cac",
      "filename": "backend/app/main.go",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/main.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/main.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/main.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -21,6 +21,7 @@ type Opts struct {\n \tRestoreCmd cmd.RestoreCommand `command:\"restore\"`\n \tAvatarCmd  cmd.AvatarCommand  `command:\"avatar\"`\n \tCleanupCmd cmd.CleanupCommand `command:\"cleanup\"`\n+\tRemapCmd   cmd.RemapCommand   `command:\"remap\"`\n \n \tRemarkURL    string `long:\"url\" env:\"REMARK_URL\" required:\"true\" description:\"url to remark\"`\n \tSharedSecret string `long:\"secret\" env:\"SECRET\" required:\"true\" description:\"shared secret key\"`"
    },
    {
      "sha": "297fbec182200c6aef6582dd3ad1ef58bbcf0aa3",
      "filename": "backend/app/migrator/mapper.go",
      "status": "added",
      "additions": 74,
      "deletions": 0,
      "changes": 74,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/migrator/mapper.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/migrator/mapper.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/migrator/mapper.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -0,0 +1,74 @@\n+package migrator\n+\n+import (\n+\t\"errors\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"strings\"\n+)\n+\n+// UrlMapper implements Mapper interface\n+type UrlMapper struct {\n+\trules map[string]string\n+}\n+\n+// NewUrlMapper reads rules from given reader and returns initialised UrlMapper\n+// if given rules are valid.\n+func NewUrlMapper(reader io.Reader) (Mapper, error) {\n+\tu := &UrlMapper{}\n+\tif err := u.loadRules(reader); err != nil {\n+\t\treturn u, err\n+\t}\n+\treturn u, nil\n+}\n+\n+// loadRules loads url-mapping rules from reader to mapper.\n+// Rules must be a text consists of rows separated by \\n.\n+// Each row holds from-url and to-url separated by space.\n+// If urls end with asterisk (*) it means try to match by prefix.\n+// Example:\n+// https://www.myblog.com/blog/1/ https://myblog.com/blog/1/\n+// https://www.myblog.com/* https://myblog.com/*\n+func (u *UrlMapper) loadRules(reader io.Reader) error {\n+\tdata, err := ioutil.ReadAll(reader)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\trulesText := strings.TrimSpace(string(data))\n+\n+\tu.rules = make(map[string]string)\n+\n+\tfor _, row := range strings.Split(rulesText, \"\\n\") {\n+\t\trow = strings.TrimSpace(row)\n+\t\turls := strings.Split(row, \" \")\n+\t\tif len(urls) != 2 {\n+\t\t\treturn errors.New(\"bad row \" + row)\n+\t\t}\n+\n+\t\tfrom, to := strings.TrimSpace(urls[0]), strings.TrimSpace(urls[1])\n+\t\tu.rules[from] = to\n+\t}\n+\treturn nil\n+}\n+\n+// URL maps given url to another url according loaded url-rules.\n+// If not matched returns given url.\n+func (u *UrlMapper) URL(url string) string {\n+\tif newUrl, ok := u.rules[url]; ok {\n+\t\treturn newUrl\n+\t}\n+\t// try to match by prefix\n+\tfor oldUrl, newUrl := range u.rules {\n+\t\tif !strings.HasSuffix(oldUrl, \"*\") {\n+\t\t\tcontinue\n+\t\t}\n+\t\toldUrl = strings.TrimSuffix(oldUrl, \"*\")\n+\t\tnewUrl = strings.TrimSuffix(newUrl, \"*\")\n+\t\tif strings.HasPrefix(url, oldUrl) {\n+\t\t\treturn newUrl + strings.TrimPrefix(url, oldUrl)\n+\t\t}\n+\t}\n+\t// search failed, return given url\n+\treturn url\n+}"
    },
    {
      "sha": "86c9ffab43cd33f3b041d17ce6d473427b3eba4b",
      "filename": "backend/app/migrator/mapper_test.go",
      "status": "added",
      "additions": 90,
      "deletions": 0,
      "changes": 90,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/migrator/mapper_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/migrator/mapper_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/migrator/mapper_test.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -0,0 +1,90 @@\n+package migrator\n+\n+import (\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+func TestUrlMapper_URL(t *testing.T) {\n+\t// want remap urls from https://radio-t.com to https://www.radio-t.com\n+\t// also map individual urls\n+\trules := strings.NewReader(`\n+https://radio-t.com* https://www.radio-t.com*\n+https://radio-t.com/p/2018/09/22////podcast-616/ https://www.radio-t.com/p/2018/09/22/podcast-616/\n+https://radio-t.com/p/2018/09/22/podcast-616/?with_query=1 https://www.radio-t.com/p/2018/09/22/podcast-616/\n+`)\n+\n+\tmapper, err := NewUrlMapper(rules)\n+\tassert.NoError(t, err)\n+\n+\t// if url not matched mapper should return given url\n+\tassert.Equal(t, \"https://any.com/post/1/\", mapper.URL(\"https://any.com/post/1/\"))\n+\tassert.Equal(t, \"https://radio-t.co\", mapper.URL(\"https://radio-t.co\"))\n+\t// check strict matching\n+\tassert.Equal(t, \"https://www.radio-t.com/p/2018/09/22/podcast-616/\", mapper.URL(\"https://radio-t.com/p/2018/09/22////podcast-616/\"))\n+\tassert.Equal(t, \"https://www.radio-t.com/p/2018/09/22/podcast-616/\", mapper.URL(\"https://radio-t.com/p/2018/09/22/podcast-616/?with_query=1\"))\n+\t// check pattern matching (by prefix)\n+\tassert.Equal(t, \"https://www.radio-t.com/p/post/123/\", mapper.URL(\"https://radio-t.com/p/post/123/\"))\n+\n+\t// want remap from http to https\n+\trules = strings.NewReader(`http://anysite.com/p/123 https://anysite.com/p/321`)\n+\tmapper, err = NewUrlMapper(rules)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, \"https://anysite.com/p/321\", mapper.URL(\"http://anysite.com/p/123\"))\n+\tassert.Equal(t, \"https://notexist\", mapper.URL(\"https://notexist\"))\n+\tassert.Equal(t, \"https://anysite.com/\", mapper.URL(\"https://anysite.com/\")) // not exist\n+\n+\t// want remap from http to https by pattern\n+\trules = strings.NewReader(`http://anysite.com* https://anysite.com*`)\n+\tmapper, err = NewUrlMapper(rules)\n+\tassert.NoError(t, err)\n+\tassert.Equal(t, \"https://anysite.com/p/1\", mapper.URL(\"http://anysite.com/p/1\"))\n+\tassert.Equal(t, \"https://anysite.com/\", mapper.URL(\"http://anysite.com/\"))\n+\tassert.Equal(t, \"https://notexist\", mapper.URL(\"https://notexist\"))\n+}\n+\n+func TestUrlMapper_New(t *testing.T) {\n+\tcases := []struct {\n+\t\trules       string\n+\t\texpectError bool\n+\t}{\n+\t\t// bad input, expect error\n+\t\t{\n+\t\t\trules:       \"https://radio-t.com \",\n+\t\t\texpectError: true,\n+\t\t},\n+\t\t{\n+\t\t\trules:       \"https://radio-t.com https://radio-t.com https://radio-t.com\",\n+\t\t\texpectError: true,\n+\t\t},\n+\t\t{\n+\t\t\trules:       \"https://radio-t.com https://radio-t.com\\n https://radio-t.com\",\n+\t\t\texpectError: true,\n+\t\t},\n+\t\t{\n+\t\t\trules:       \"https://radio-t.com   \\n https://radio-t.com https://radio-t.com\",\n+\t\t\texpectError: true,\n+\t\t},\n+\n+\t\t// valid input, no error\n+\t\t{\n+\t\t\trules: \"https://radio-t.com* https://www.radio-t.com*\",\n+\t\t},\n+\t\t{\n+\t\t\trules: \"https://radio-t.com/p/2018/09/22/podcast-616/?with_query=1 https://www.radio-t.com/p/2018/09/22/podcast-616/\",\n+\t\t},\n+\t\t{\n+\t\t\trules: \"https://any.com/p/111 https://any.com/p/222   \\n https://any.com/p/333 https://any.com/p/222   \\n\",\n+\t\t},\n+\t}\n+\tfor _, c := range cases {\n+\t\t_, err := NewUrlMapper(strings.NewReader(c.rules))\n+\t\tif c.expectError {\n+\t\t\tassert.Error(t, err)\n+\t\t} else {\n+\t\t\tassert.Nil(t, err)\n+\t\t}\n+\t}\n+}"
    },
    {
      "sha": "0d7dd4d7ca82674888e8b6d2f569be473db499f2",
      "filename": "backend/app/migrator/migrator.go",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/migrator/migrator.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/migrator/migrator.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/migrator/migrator.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -24,6 +24,16 @@ type Exporter interface {\n \tExport(w io.Writer, siteID string) (int, error)\n }\n \n+// Mapper defines interface to convert data in import procedure\n+type Mapper interface {\n+\tURL(url string) string\n+}\n+\n+// MapperMaker defines function that reads rules from reader and\n+// returns new Mapper with loaded rules. If rules are not valid\n+// it returns error.\n+type MapperMaker func(reader io.Reader) (Mapper, error)\n+\n // Store defines minimal interface needed to export and import comments\n type Store interface {\n \tCreate(comment store.Comment) (commentID string, err error)"
    },
    {
      "sha": "9ab7d1e8c895a0d4807cf8d6bf4d291fc92a41c5",
      "filename": "backend/app/migrator/native.go",
      "status": "modified",
      "additions": 41,
      "deletions": 1,
      "changes": 42,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/migrator/native.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/migrator/native.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/migrator/native.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -87,9 +87,49 @@ func (n *Native) exportMeta(siteID string, w io.Writer) (err error) {\n \treturn nil\n }\n \n+// WithMapper wraps reader with url-mapper.\n+func WithMapper(reader io.Reader, mapper Mapper) io.Reader {\n+\tr, w := io.Pipe()\n+\tgo func() {\n+\t\tvar err error\n+\t\tdefer func() {\n+\t\t\tlog.Printf(\"[DEBUG] finish write to pipe with %+v\", err)\n+\t\t\tif e := w.Close(); e != nil {\n+\t\t\t\tlog.Printf(\"[WARN] failed close pipe writer with %+v\", e)\n+\t\t\t}\n+\t\t}()\n+\n+\t\t// decode from reader and encode to pipe writer\n+\t\tdec, enc := json.NewDecoder(reader), json.NewEncoder(w)\n+\n+\t\tm := meta{}\n+\t\tif err = dec.Decode(&m); err != nil {\n+\t\t\treturn\n+\t\t}\n+\t\tfor i := range m.Posts {\n+\t\t\tm.Posts[i].URL = mapper.URL(m.Posts[i].URL)\n+\t\t}\n+\t\tif err = enc.Encode(m); err != nil {\n+\t\t\treturn\n+\t\t}\n+\n+\t\tfor {\n+\t\t\tcomment := store.Comment{}\n+\t\t\tif err = dec.Decode(&comment); err != nil {\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t\tcomment.Locator.URL = mapper.URL(comment.Locator.URL)\n+\t\t\tif err = enc.Encode(comment); err != nil {\n+\t\t\t\treturn\n+\t\t\t}\n+\t\t}\n+\t}()\n+\n+\treturn r\n+}\n+\n // Import comments from json strings produced by Remark.Export\n func (n *Native) Import(reader io.Reader, siteID string) (size int, err error) {\n-\n \tm := meta{}\n \tdec := json.NewDecoder(reader)\n \tif err = dec.Decode(&m); err != nil {"
    },
    {
      "sha": "dd243f0eee3ae02a6d10ef67ca17735c75b1476a",
      "filename": "backend/app/migrator/native_test.go",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/migrator/native_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/migrator/native_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/migrator/native_test.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -101,6 +101,45 @@ func TestNative_Import(t *testing.T) {\n \tassert.Equal(t, false, b.IsVerified(\"radio-t\", \"user2\"))\n }\n \n+func TestNative_ImportWithMapper(t *testing.T) {\n+\tdefer os.Remove(testDb)\n+\n+\t// want to remap comments to https://rdt.c\n+\trules := `https://radio-t.com* https://rdt.c*`\n+\tmapper, err := NewUrlMapper(strings.NewReader(rules))\n+\tassert.NoError(t, err)\n+\n+\tinp := `{\"version\":1,\"users\":[{\"id\":\"user1\",\"blocked\":{\"status\":false,\"until\":\"0001-01-01T00:00:00Z\"},\"verified\":true},{\"id\":\"user2\",\"blocked\":{\"status\":true,\"until\":\"2018-12-23T02:55:22.472041-06:00\"},\"verified\":false}],\"posts\":[{\"url\":\"https://radio-t.com\",\"read_only\":true}]}\n+\t{\"id\":\"efbc17f177ee1a1c0ee6e1e025749966ec071adc\",\"pid\":\"\",\"text\":\"some text, <a href=\\\"http://radio-t.com\\\" rel=\\\"nofollow\\\">link</a>\",\"user\":{\"name\":\"user name\",\"id\":\"user1\",\"picture\":\"\",\"ip\":\"293ec5b0cf154855258824ec7fac5dc63d176915\",\"admin\":false},\"locator\":{\"site\":\"radio-t\",\"url\":\"https://radio-t.com\"},\"score\":0,\"votes\":{},\"time\":\"2017-12-20T15:18:22-06:00\"}\n+\t{\"id\":\"f863bd79-fec6-4a75-b308-61fe5dd02aa1\",\"pid\":\"1234\",\"text\":\"some text2\",\"user\":{\"name\":\"user name\",\"id\":\"user2\",\"picture\":\"\",\"ip\":\"293ec5b0cf154855258824ec7fac5dc63d176915\",\"admin\":false},\"locator\":{\"site\":\"radio-t\",\"url\":\"https://radio-t.com/2\"},\"score\":0,\"votes\":{},\"time\":\"2017-12-20T15:18:23-06:00\"}`\n+\tmappedReader := WithMapper(strings.NewReader(inp), mapper)\n+\n+\tb := prep(t) // write some recs, they will be deleted\n+\tb.AdminStore = admin.NewStaticStore(\"12345\", nil, []string{}, \"\")\n+\tr := Native{DataStore: b}\n+\tsize, err := r.Import(mappedReader, \"radio-t\")\n+\tassert.Nil(t, err)\n+\tassert.Equal(t, 2, size)\n+\n+\tcomments, err := b.Last(\"radio-t\", 10, time.Time{}, store.User{})\n+\tassert.Nil(t, err)\n+\tassert.Equal(t, 2, len(comments))\n+\tassert.Equal(t, \"f863bd79-fec6-4a75-b308-61fe5dd02aa1\", comments[0].ID)\n+\tassert.Equal(t, \"1234\", comments[0].ParentID)\n+\tassert.Equal(t, false, b.IsReadOnly(comments[0].Locator))\n+\tassert.Equal(t, \"https://rdt.c/2\", comments[0].Locator.URL)\n+\n+\tassert.Equal(t, \"efbc17f177ee1a1c0ee6e1e025749966ec071adc\", comments[1].ID)\n+\tassert.Equal(t, true, b.IsReadOnly(comments[1].Locator))\n+\tassert.Equal(t, \"https://rdt.c\", comments[1].Locator.URL)\n+\n+\tassert.Equal(t, false, b.IsBlocked(\"radio-t\", \"user1\"))\n+\tassert.Equal(t, true, b.IsVerified(\"radio-t\", \"user1\"))\n+\n+\tassert.Equal(t, true, b.IsBlocked(\"radio-t\", \"user2\"))\n+\tassert.Equal(t, false, b.IsVerified(\"radio-t\", \"user2\"))\n+}\n+\n func TestNative_ImportWrongVersion(t *testing.T) {\n \tinp := `{\"version\":2,\"users\":[{\"id\":\"user1\",\"blocked\":{\"status\":false,\"until\":\"0001-01-01T00:00:00Z\"},\"verified\":true},{\"id\":\"user2\",\"blocked\":{\"status\":true,\"until\":\"2018-12-23T02:55:22.472041-06:00\"},\"verified\":false}],\"posts\":[{\"url\":\"https://radio-t.com\",\"read_only\":true}]}\n \t{\"id\":\"efbc17f177ee1a1c0ee6e1e025749966ec071adc\",\"pid\":\"\",\"text\":\"some text, <a href=\\\"http://radio-t.com\\\" rel=\\\"nofollow\\\">link</a>\",\"user\":{\"name\":\"user name\",\"id\":\"user1\",\"picture\":\"\",\"ip\":\"293ec5b0cf154855258824ec7fac5dc63d176915\",\"admin\":false},\"locator\":{\"site\":\"radio-t\",\"url\":\"https://radio-t.com\"},\"score\":0,\"votes\":{},\"time\":\"2017-12-20T15:18:22-06:00\"}"
    },
    {
      "sha": "8779bf80aa91c5a0570e846db4699c95392edc62",
      "filename": "backend/app/rest/api/migrator.go",
      "status": "modified",
      "additions": 60,
      "deletions": 1,
      "changes": 61,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/rest/api/migrator.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/rest/api/migrator.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/migrator.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -28,6 +28,7 @@ type Migrator struct {\n \tDisqusImporter    migrator.Importer\n \tWordPressImporter migrator.Importer\n \tNativeExporter    migrator.Exporter\n+\tUrlMapperMaker    migrator.MapperMaker\n \tKeyStore          KeyStore\n \n \tbusy map[string]bool\n@@ -98,7 +99,9 @@ func (m *Migrator) importFormCtrl(w http.ResponseWriter, r *http.Request) {\n \trender.JSON(w, r, R.JSON{\"status\": \"import request accepted\"})\n }\n \n-func (m *Migrator) importWaitCtrl(w http.ResponseWriter, r *http.Request) {\n+// GET /wait?site=site-id\n+// waits for migration operation (import or remap)\n+func (m *Migrator) waitCtrl(w http.ResponseWriter, r *http.Request) {\n \tsiteID := r.URL.Query().Get(\"site\")\n \ttimeOut := time.Minute * 15\n \tif v := r.URL.Query().Get(\"timeout\"); v != \"\" {\n@@ -152,6 +155,62 @@ func (m *Migrator) exportCtrl(w http.ResponseWriter, r *http.Request) {\n \t}\n }\n \n+// POST /remap?site=site-id\n+// remap urls in comments based on given rules (oldUrl newUrl)\n+func (m *Migrator) remapCtrl(w http.ResponseWriter, r *http.Request) {\n+\tsiteID := r.URL.Query().Get(\"site\")\n+\n+\t// create new url-mapper from given rules in body\n+\tmapper, err := m.UrlMapperMaker(r.Body)\n+\tif err != nil {\n+\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"remap failed, bad given rules\", rest.ErrDecode)\n+\t\treturn\n+\t}\n+\tdefer r.Body.Close()\n+\n+\t// start remap procedure with mapper\n+\tgo func() {\n+\t\tm.setBusy(siteID, true)\n+\t\tdefer m.setBusy(siteID, false)\n+\n+\t\t// do export\n+\t\tfh, err := ioutil.TempFile(\"\", \"remark42_convert\")\n+\t\tif err != nil {\n+\t\t\tlog.Printf(\"[WARN] failed to make temp file %+v\", err)\n+\t\t\treturn\n+\t\t}\n+\t\tdefer func() {\n+\t\t\tif err := os.Remove(fh.Name()); err != nil {\n+\t\t\t\tlog.Printf(\"[WARN] failed to remove temp file %+v\", err)\n+\t\t\t}\n+\t\t}()\n+\t\tlog.Printf(\"[DEBUG] start export for site=%s\", siteID)\n+\t\tif _, err := m.NativeExporter.Export(fh, siteID); err != nil {\n+\t\t\tlog.Printf(\"[WARN] export failed with %+v\", err)\n+\t\t\treturn\n+\t\t}\n+\n+\t\tif _, err = fh.Seek(0, 0); err != nil {\n+\t\t\tlog.Printf(\"[WARN] failed to seek file %+v\", err)\n+\t\t\treturn\n+\t\t}\n+\n+\t\tlog.Printf(\"[DEBUG] start import for site=%s\", siteID)\n+\t\tmappedReader := migrator.WithMapper(fh, mapper)\n+\t\tsize, err := m.NativeImporter.Import(mappedReader, siteID)\n+\t\tif err != nil {\n+\t\t\tlog.Printf(\"[WARN] import failed with %+v\", err)\n+\t\t\treturn\n+\t\t}\n+\n+\t\tm.Cache.Flush(cache.Flusher(siteID).Scopes(siteID))\n+\t\tlog.Printf(\"[DEBUG] convert request completed. site=%s, comments=%d\", siteID, size)\n+\t}()\n+\n+\trender.Status(r, http.StatusAccepted)\n+\trender.JSON(w, r, R.JSON{\"status\": \"convert request accepted\"})\n+}\n+\n // runImport reads from tmpfile and import for given siteID and provider\n func (m *Migrator) runImport(siteID string, provider string, tmpfile string) {\n \tm.setBusy(siteID, true)"
    },
    {
      "sha": "c667cb877c1105848344f3d2e16b1902fc27eeba",
      "filename": "backend/app/rest/api/migrator_test.go",
      "status": "modified",
      "additions": 111,
      "deletions": 9,
      "changes": 120,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/rest/api/migrator_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/rest/api/migrator_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/migrator_test.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -3,6 +3,7 @@ package api\n import (\n \t\"bytes\"\n \t\"compress/gzip\"\n+\t\"encoding/json\"\n \t\"fmt\"\n \t\"io\"\n \t\"io/ioutil\"\n@@ -15,6 +16,9 @@ import (\n \n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n+\n+\t\"github.com/umputun/remark/backend/app/store\"\n+\t\"github.com/umputun/remark/backend/app/store/service\"\n )\n \n func TestMigrator_Import(t *testing.T) {\n@@ -43,7 +47,7 @@ func TestMigrator_Import(t *testing.T) {\n \tassert.Nil(t, err)\n \tassert.Equal(t, \"{\\\"status\\\":\\\"import request accepted\\\"}\\n\", string(b))\n \n-\twaitForImportCompletion(t, ts)\n+\twaitForMigrationCompletion(t, ts)\n }\n \n func TestMigrator_ImportForm(t *testing.T) {\n@@ -77,7 +81,7 @@ func TestMigrator_ImportForm(t *testing.T) {\n \tassert.Nil(t, err)\n \tassert.Equal(t, \"{\\\"status\\\":\\\"import request accepted\\\"}\\n\", string(b))\n \n-\twaitForImportCompletion(t, ts)\n+\twaitForMigrationCompletion(t, ts)\n }\n \n func TestMigrator_ImportFromWP(t *testing.T) {\n@@ -99,7 +103,7 @@ func TestMigrator_ImportFromWP(t *testing.T) {\n \tassert.Nil(t, err)\n \tassert.Equal(t, \"{\\\"status\\\":\\\"import request accepted\\\"}\\n\", string(b))\n \n-\twaitForImportCompletion(t, ts)\n+\twaitForMigrationCompletion(t, ts)\n }\n \n func TestMigrator_ImportRejected(t *testing.T) {\n@@ -153,7 +157,7 @@ func TestMigrator_ImportDouble(t *testing.T) {\n \tresp, err = client.Do(req)\n \tassert.Nil(t, err)\n \tassert.Equal(t, http.StatusConflict, resp.StatusCode)\n-\twaitForImportCompletion(t, ts)\n+\twaitForMigrationCompletion(t, ts)\n }\n \n func TestMigrator_ImportWaitExpired(t *testing.T) {\n@@ -179,15 +183,15 @@ func TestMigrator_ImportWaitExpired(t *testing.T) {\n \tassert.Equal(t, http.StatusAccepted, resp.StatusCode)\n \n \tclient = &http.Client{Timeout: 10 * time.Second}\n-\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/import/wait?site=remark42&timeout=100ms\", nil)\n+\treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/wait?site=remark42&timeout=100ms\", nil)\n \trequire.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tassert.NoError(t, err)\n \tresp, err = client.Do(req)\n \tassert.NoError(t, err)\n \tassert.Equal(t, http.StatusGatewayTimeout, resp.StatusCode)\n \n-\twaitForImportCompletion(t, ts)\n+\twaitForMigrationCompletion(t, ts)\n }\n \n func TestMigrator_Export(t *testing.T) {\n@@ -211,7 +215,7 @@ func TestMigrator_Export(t *testing.T) {\n \tresp, err := client.Do(req)\n \trequire.Nil(t, err)\n \trequire.Equal(t, http.StatusAccepted, resp.StatusCode)\n-\twaitForImportCompletion(t, ts)\n+\twaitForMigrationCompletion(t, ts)\n \n \t// check file mode\n \treq, err = http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/export?mode=file&site=remark42\", nil)\n@@ -252,9 +256,107 @@ func TestMigrator_Export(t *testing.T) {\n \trequire.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n }\n \n-func waitForImportCompletion(t *testing.T, ts *httptest.Server) {\n+func TestMigrator_Remap(t *testing.T) {\n+\tts, srv, teardown := startupT(t)\n+\tdefer teardown()\n+\n+\t// create 2 comments in https://remark42.com/demo/\n+\tc1 := store.Comment{Text: \"first comment\", Timestamp: time.Now(),\n+\t\tLocator: store.Locator{SiteID: \"remark42\", URL: \"https://remark42.com/demo/\"}, User: store.User{ID: \"u1\"}}\n+\t_, err := srv.DataService.Create(c1)\n+\trequire.NoError(t, err)\n+\tc2 := store.Comment{Text: \"second comment\", Timestamp: time.Now(),\n+\t\tLocator: store.Locator{SiteID: \"remark42\", URL: \"https://remark42.com/demo/\"}, User: store.User{ID: \"u2\"}}\n+\t_, err = srv.DataService.Create(c2)\n+\trequire.NoError(t, err)\n+\n+\t// create 1 comment in https://remark42.com/demo-another/\n+\tc3 := store.Comment{Text: \"third comment\", Timestamp: time.Now(),\n+\t\tLocator: store.Locator{SiteID: \"remark42\", URL: \"https://remark42.com/demo-another/\"}, User: store.User{ID: \"u3\"}}\n+\t_, err = srv.DataService.Create(c3)\n+\trequire.NoError(t, err)\n+\n+\t// set url https://remark42.com/demo-another/ to be readonly\n+\terr = srv.DataService.SetMetas(\"remark42\", []service.UserMetaData{}, []service.PostMetaData{{\n+\t\tURL:      \"https://remark42.com/demo-another/\",\n+\t\tReadOnly: true,\n+\t}})\n+\trequire.NoError(t, err)\n+\n+\t// check that comments created as expected\n+\tres, code := get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://remark42.com/demo/\")\n+\trequire.Equal(t, 200, code)\n+\tcomments := commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.Nil(t, err)\n+\trequire.Equal(t, 2, comments.Info.Count)\n+\trequire.False(t, comments.Info.ReadOnly)\n+\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://remark42.com/demo-another/\")\n+\trequire.Equal(t, 200, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.Nil(t, err)\n+\trequire.Equal(t, 1, comments.Info.Count)\n+\trequire.True(t, comments.Info.ReadOnly)\n+\n+\t// we want remap urls to another domain - www.remark42.com\n+\trules := \"https://remark42.com/* https://www.remark42.com/*\"\n+\tresp, err := post(t, ts.URL+\"/api/v1/admin/remap?site=remark42\", rules) // auth as admin\n+\trequire.Nil(t, err)\n+\trequire.Equal(t, http.StatusAccepted, resp.StatusCode)\n+\twaitForMigrationCompletion(t, ts)\n+\n+\t// after remap finished we should find comments from new urls\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://www.remark42.com/demo/\")\n+\trequire.Equal(t, 200, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.Nil(t, err)\n+\trequire.Equal(t, 2, comments.Info.Count)\n+\trequire.False(t, comments.Info.ReadOnly)\n+\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://www.remark42.com/demo-another/\")\n+\trequire.Equal(t, 200, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.Nil(t, err)\n+\trequire.Equal(t, 1, comments.Info.Count)\n+\trequire.True(t, comments.Info.ReadOnly)\n+\n+\t// should find nothing from previous url\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://remark42.com/demo/\")\n+\trequire.Equal(t, 200, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.Nil(t, err)\n+\trequire.Equal(t, 0, comments.Info.Count)\n+\n+\tres, code = get(t, ts.URL+\"/api/v1/find?site=remark42&url=https://remark42.com/demo-another/\")\n+\trequire.Equal(t, 200, code)\n+\tcomments = commentsWithInfo{}\n+\terr = json.Unmarshal([]byte(res), &comments)\n+\trequire.Nil(t, err)\n+\trequire.Equal(t, 0, comments.Info.Count)\n+}\n+\n+func TestMigrator_RemapReject(t *testing.T) {\n+\tts, _, teardown := startupT(t)\n+\tdefer teardown()\n+\n+\t// without admin credentials\n+\tclient := &http.Client{Timeout: 1 * time.Second}\n+\trules := strings.NewReader(`https://remark42.com/* https://www.remark42.com/*`)\n+\treq, err := http.NewRequest(\"POST\", ts.URL+\"/api/v1/admin/remap?site=remark42\", rules)\n+\trequire.Nil(t, err)\n+\tresp, err := client.Do(req)\n+\trequire.Nil(t, err)\n+\trequire.Equal(t, http.StatusUnauthorized, resp.StatusCode)\n+}\n+\n+func waitForMigrationCompletion(t *testing.T, ts *httptest.Server) {\n \tclient := &http.Client{Timeout: 10 * time.Second}\n-\treq, err := http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/import/wait?site=remark42\", nil)\n+\treq, err := http.NewRequest(\"GET\", ts.URL+\"/api/v1/admin/wait?site=remark42\", nil)\n \trequire.NoError(t, err)\n \treq.SetBasicAuth(\"admin\", \"password\")\n \tassert.NoError(t, err)"
    },
    {
      "sha": "9d139945471595910517333139763220d466eec1",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/rest/api/rest.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/rest/api/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -285,7 +285,8 @@ func (s *Rest) routes() chi.Router {\n \t\t\tradmin.Get(\"/export\", s.adminRest.migrator.exportCtrl)\n \t\t\tradmin.Post(\"/import\", s.adminRest.migrator.importCtrl)\n \t\t\tradmin.Post(\"/import/form\", s.adminRest.migrator.importFormCtrl)\n-\t\t\tradmin.Get(\"/import/wait\", s.adminRest.migrator.importWaitCtrl)\n+\t\t\tradmin.Post(\"/remap\", s.adminRest.migrator.remapCtrl)\n+\t\t\tradmin.Get(\"/wait\", s.adminRest.migrator.waitCtrl)\n \t\t})\n \n \t\t// protected routes, throttled to 10/s by default, controlled by external UpdateLimiter param"
    },
    {
      "sha": "4fecd87e400b663ee9f28a062432c49fd776dea8",
      "filename": "backend/app/rest/api/rest_test.go",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/rest/api/rest_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/app/rest/api/rest_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_test.go?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -330,7 +330,8 @@ func startupT(t *testing.T) (ts *httptest.Server, srv *Rest, teardown func()) {\n \t\t\tWordPressImporter: &migrator.WordPress{DataStore: dataStore},\n \t\t\tNativeImporter:    &migrator.Native{DataStore: dataStore},\n \t\t\tNativeExporter:    &migrator.Native{DataStore: dataStore},\n-\t\t\tCache:             &cache.Nop{},\n+\t\t\tUrlMapperMaker:    migrator.NewUrlMapper,\n+\t\t\tCache:             memCache,\n \t\t\tKeyStore:          astore,\n \t\t},\n \t\tStreamer: &Streamer{"
    },
    {
      "sha": "4b6e33b6a3bff55e17d7176ba94a58d81e0dfeaf",
      "filename": "backend/go.mod",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/go.mod",
      "raw_url": "https://github.com/umputun/remark/raw/4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11/backend/go.mod",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/go.mod?ref=4dc123dbe84f4f248864bcdbbd6cc2b3a4dafe11",
      "patch": "@@ -56,5 +56,6 @@ require (\n \tgolang.org/x/crypto v0.0.0-20190820162420-60c769a6c586\n \tgolang.org/x/image v0.0.0-20190823064033-3a9bac650e44\n \tgolang.org/x/net v0.0.0-20190813141303-74dc4d7220e7\n+\tgopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 // indirect\n \tgopkg.in/russross/blackfriday.v2 v2.0.1\n )"
    }
  ]
}
