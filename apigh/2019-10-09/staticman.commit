{
  "sha": "2be29f73fa0688e02770b9f118288b6e0e617b01",
  "node_id": "MDY6Q29tbWl0Mzg4ODA1NTU6MmJlMjlmNzNmYTA2ODhlMDI3NzBiOWYxMTgyODhiNmUwZTYxN2IwMQ==",
  "commit": {
    "author": {
      "name": "Eduardo Bouças",
      "email": "mail@eduardoboucas.com",
      "date": "2019-03-21T09:59:31Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-03-21T09:59:31Z"
    },
    "message": "Merge pull request #255 from eduardoboucas/dev\n\nAdd v3 endpoints (and GitLab support)",
    "tree": {
      "sha": "1c4736660031ddc8bde223c739d62e33928abc05",
      "url": "https://api.github.com/repos/eduardoboucas/staticman/git/trees/1c4736660031ddc8bde223c739d62e33928abc05"
    },
    "url": "https://api.github.com/repos/eduardoboucas/staticman/git/commits/2be29f73fa0688e02770b9f118288b6e0e617b01",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJck2CDCRBK7hj4Ov3rIwAAdHIIAEj8TU00ehY3IN9DPFzT4YJj\nvCzfZ6AZOgUfU6mjqtJ+7Go/fORwsau6eXRKskUXz9DMEzo0+XD+RwC3eaQjPsOm\n6Ed6wdQZKtt4Z1lxUj/atdf3yV9o6T1IObw0hM2S3zjjhZe/L5+vQDheaP6inTEF\nWBM3R0u8qwgeRNxKQSSfYptX67xYtVx4VzoNndf/3sz2/G3ipJ9AyTJS88t98Uje\nMP6tLttJ9r020AaEp9zqY4hqltqoHQoCw6lYN4MsMaljv6D9KvdGHFDiZmOU4ezC\n1LYqGsEd7gX4O/RJTcsM6+aecNDQd23ARRY5iU9gnIEyLEvqh4y4ZIVR7tuLWCY=\n=DrZh\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 1c4736660031ddc8bde223c739d62e33928abc05\nparent 30636040d06c64139de6dceb77c2fe32207fa981\nparent 4e2f33bb8727baddbe33b684f167d313391a04ad\nauthor Eduardo Bouças <mail@eduardoboucas.com> 1553162371 +0000\ncommitter GitHub <noreply@github.com> 1553162371 +0000\n\nMerge pull request #255 from eduardoboucas/dev\n\nAdd v3 endpoints (and GitLab support)"
    }
  },
  "url": "https://api.github.com/repos/eduardoboucas/staticman/commits/2be29f73fa0688e02770b9f118288b6e0e617b01",
  "html_url": "https://github.com/eduardoboucas/staticman/commit/2be29f73fa0688e02770b9f118288b6e0e617b01",
  "comments_url": "https://api.github.com/repos/eduardoboucas/staticman/commits/2be29f73fa0688e02770b9f118288b6e0e617b01/comments",
  "author": {
    "login": "eduardoboucas",
    "id": 4162329,
    "node_id": "MDQ6VXNlcjQxNjIzMjk=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4162329?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eduardoboucas",
    "html_url": "https://github.com/eduardoboucas",
    "followers_url": "https://api.github.com/users/eduardoboucas/followers",
    "following_url": "https://api.github.com/users/eduardoboucas/following{/other_user}",
    "gists_url": "https://api.github.com/users/eduardoboucas/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eduardoboucas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eduardoboucas/subscriptions",
    "organizations_url": "https://api.github.com/users/eduardoboucas/orgs",
    "repos_url": "https://api.github.com/users/eduardoboucas/repos",
    "events_url": "https://api.github.com/users/eduardoboucas/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eduardoboucas/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "30636040d06c64139de6dceb77c2fe32207fa981",
      "url": "https://api.github.com/repos/eduardoboucas/staticman/commits/30636040d06c64139de6dceb77c2fe32207fa981",
      "html_url": "https://github.com/eduardoboucas/staticman/commit/30636040d06c64139de6dceb77c2fe32207fa981"
    },
    {
      "sha": "4e2f33bb8727baddbe33b684f167d313391a04ad",
      "url": "https://api.github.com/repos/eduardoboucas/staticman/commits/4e2f33bb8727baddbe33b684f167d313391a04ad",
      "html_url": "https://github.com/eduardoboucas/staticman/commit/4e2f33bb8727baddbe33b684f167d313391a04ad"
    }
  ],
  "stats": {
    "total": 14241,
    "additions": 11877,
    "deletions": 2364
  },
  "files": [
    {
      "sha": "50bf1977a096213f071275dbeb132588e7c81ad4",
      "filename": ".gitignore",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/.gitignore",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/.gitignore",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/.gitignore?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,5 +1,10 @@\n+.idea/\n+*.iml\n+\n config.json\n config.*.json\n+!config.test.json\n !config.example.json\n+coverage/\n node_modules/\n staticman_key\n\\ No newline at end of file"
    },
    {
      "sha": "70df652a72cb8a4855706923ab7ba7981b6b4ce5",
      "filename": ".travis.yml",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/.travis.yml",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/.travis.yml",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/.travis.yml?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -5,4 +5,4 @@ cache:\n notifications:\n   email: false\n node_js:\n-- '6'\n\\ No newline at end of file\n+- '8.11.3'\n\\ No newline at end of file"
    },
    {
      "sha": "29e5bdb2dddbdce4399aa1b768c84711d56b9f8a",
      "filename": "Dockerfile",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/Dockerfile",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/Dockerfile",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/Dockerfile?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,4 +1,4 @@\n-FROM node:6.7.0\n+FROM node:8.11.3\n \n # Create app directory\n RUN mkdir -p /app"
    },
    {
      "sha": "5783f4064799ed4d881b4a9d87a971cceedaaa2f",
      "filename": "README.md",
      "status": "modified",
      "additions": 2,
      "deletions": 29,
      "changes": 31,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/README.md",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/README.md",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/README.md?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,6 +1,6 @@\n <img src=\"logo.png\" width=\"300\">\n \n-# Staticman [![coverage](https://img.shields.io/badge/coverage-53%25-red.svg?style=flat)](https://github.com/eduardoboucas/staticman) [![Build Status](https://travis-ci.org/eduardoboucas/staticman.svg?branch=master)](https://travis-ci.org/eduardoboucas/staticman) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n+# Staticman [![coverage](https://img.shields.io/badge/coverage-81%25-yellow.svg?style=flat)](https://github.com/eduardoboucas/staticman) [![Build Status](https://travis-ci.org/eduardoboucas/staticman.svg?branch=master)](https://travis-ci.org/eduardoboucas/staticman) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n \n > Static sites with superpowers\n \n@@ -14,7 +14,7 @@ You can download and run the Staticman API on your own infrastructure, or you ca\n \n ## Requirements\n \n-- Node.js 4.8.3+\n+- Node.js 8.11.3+\n - npm\n - A [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) for the GitHub account you want to run Staticman with\n - An SSH key (click [here](https://help.github.com/articles/connecting-to-github-with-ssh/) to learn how to create one)\n@@ -78,30 +78,3 @@ Would you like to contribute to Staticman? That's great! Here's how:\n \n - [Improving Static Comments with Jekyll & Staticman](https://mademistakes.com/articles/improving-jekyll-static-comments/)\n - [Hugo + Staticman: Nested Replies and E-mail Notifications](https://networkhobo.com/2017/12/30/hugo---staticman-nested-replies-and-e-mail-notifications/)\n-\n-## Sites using Staticman\n-\n-- [Popcorn](http://popcorn.staticman.net) ([Source](https://github.com/eduardoboucas/popcorn))\n-- [eduardoboucas.com](https://eduardoboucas.com) ([Source](https://github.com/eduardoboucas/eduardoboucas.github.io))\n-- [Made Mistakes](https://mademistakes.com/) ([Source](https://github.com/mmistakes/made-mistakes-jekyll))\n-- [Minimal Mistakes theme](https://mmistakes.github.io/minimal-mistakes/) ([Source](https://github.com/mmistakes/minimal-mistakes))\n-- [/wg/ Startpages](http://startpages.cf/) ([Source](https://github.com/twentytwoo/startpages.cf))\n-- [mainstrea.ml](https://mainstrea.ml) ([Source](https://github.com/twentytwoo/mainstrea.ml))\n-- [Open Source Design Job Board](http://opensourcedesign.net/jobs/) ([Source](https://github.com/opensourcedesign/jobs/))\n-- [zongren.me](https://zongren.me/) ([Source](https://gitlab.com/zongren/zongren.gitlab.io/)) \n-- [DOTSLASHLINUX](http://www.dotslashlinux.com/) ([Source](https://github.com/firasuke/DOTSLASHLINUX/))\n-- [Spinningnumbers.org](http://spinningnumbers.org/) ([Source](https://github.com/willymcallister/spinningnumbers))\n-- [blog.justin.kelly.org.au](https://blog.justin.kelly.org.au/) ([Source](github.com/justinkelly/justinkelly.github.io))\n-- [chimad-phase-field](https://pages.nist.gov/chimad-phase-field/) ([Source](https://github.com/usnistgov/chimad-phase-field))\n-- [abhinavsarkar.net](https://abhinavsarkar.net) ([Source](https://github.com/abhin4v/abhin4v.github.io/))\n-- [beautifullhugo theme](https://github.com/halogenica/beautifulhugo) ([Source](https://github.com/halogenica/beautifulhugo/pull/99))\n-- [blog.jesuislibre.org](http://blog.jesuislibre.org) ([Source](https://github.com/badele/blog.jesuislibre.org))\n-- [silentcomics.com](https://silentcomics.com) ([Source](https://github.com/SilentComics/silentcomics.github.io/))\n-- [irz.fr](https://irz.fr) ([Source](https://github.com/arthurlacoste/irz.fr/tree/gh-pages))\n-- [masterandrey.com](https://masterandrey.com/posts/en/disqus_comments_staticman/)\n-- [Tyne Time](https://www.tynetime.com) ([Source](https://github.com/Doocey/tyne-time-hugo))\n-- [BinaryMist](https://binarymist.io/blog) ([Source](https://github.com/binarymist/BinaryMistBlog))\n-- [La ruta de la cebada](https://larutadelacebada.com) ([Source](https://github.com/lasocial/larutadelacebada.github.io))\n-- [Gatsby Central](https://www.gatsbycentral.com) ([Source](https://github.com/GatsbyCentral/gatsbycentral.com))\n-\n-Are you using Staticman? [Let us know!](https://github.com/eduardoboucas/staticman/edit/master/README.md)"
    },
    {
      "sha": "99411ba6690be33e554fa1bd6cdaf11611798c26",
      "filename": "config.js",
      "status": "modified",
      "additions": 43,
      "deletions": 1,
      "changes": 44,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/config.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/config.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/config.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -54,12 +54,54 @@ const schema = {\n     default: 'development',\n     env: 'NODE_ENV'\n   },\n+  githubAccessTokenUri: {\n+    doc: 'URI for the GitHub authentication provider.',\n+    format: String,\n+    default: 'https://github.com/login/oauth/access_token',\n+    env: 'GITHUB_ACCESS_TOKEN_URI'\n+  },\n+  githubAppID: {\n+    doc: 'ID of the GitHub App.',\n+    format: String,\n+    default: null,\n+    env: 'GITHUB_APP_ID'\n+  },\n+  githubBaseUrl: {\n+    doc: 'Base URL for the GitHub API.',\n+    format: String,\n+    default: 'https://api.github.com',\n+    env: 'GITHUB_BASE_URL'\n+  },\n+  githubPrivateKey: {\n+    doc: 'Private key for the GitHub App.',\n+    format: String,\n+    default: null,\n+    env: 'GITHUB_PRIVATE_KEY'\n+  },\n   githubToken: {\n-    doc: 'Access token to the GitHub account being used to push files with.',\n+    doc: 'Access token to the GitHub account (legacy)',\n     format: String,\n     default: null,\n     env: 'GITHUB_TOKEN'\n   },\n+  gitlabAccessTokenUri: {\n+    doc: 'URI for the GitLab authentication provider.',\n+    format: String,\n+    default: 'https://gitlab.com/oauth/token',\n+    env: 'GITLAB_ACCESS_TOKEN_URI'\n+  },\n+  gitlabBaseUrl: {\n+    doc: 'Base URL for the GitLab API.',\n+    format: String,\n+    default: 'https://gitlab.com',\n+    env: 'GITLAB_BASE_URL'\n+  },\n+  gitlabToken: {\n+    doc: 'Access token to the GitLab account being used to push files with.',\n+    format: String,\n+    default: null,\n+    env: 'GITLAB_TOKEN'\n+  },\n   port: {\n     doc: 'The port to bind the application to.',\n     format: 'port',"
    },
    {
      "sha": "35581627a7ee6d8505ff2ba2d560ac84785298eb",
      "filename": "config.sample.json",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/config.sample.json",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/config.sample.json",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/config.sample.json?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,4 +1,5 @@\n {\n+  \"gitlabToken\": \"YOUR_GITLAB_TOKEN\",\n   \"githubToken\": \"YOUR_GITHUB_TOKEN\",\n   \"rsaPrivateKey\": \"-----BEGIN RSA PRIVATE KEY-----YOUR_KEY-----END RSA PRIVATE KEY-----\",\n   \"port\": 80"
    },
    {
      "sha": "069d5e330749b86a7f9a11ecc2d055473801c7b8",
      "filename": "config.test.json",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/config.test.json",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/config.test.json",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/config.test.json?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,6 +1,8 @@\n {\n+  \"gitlabToken\": \"r4e3w2q1\",\n   \"githubToken\": \"1q2w3e4r\",\n   \"rsaPrivateKey\": \"-----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEA2nX81/5w6nZLolEh0uKks3//FlqizKxFWi8GaEJYbud8FYwLH6l+LDfZkjQiDXvm6mxngDGCjlG9b7hgfa/sfWSuqtJUQ2D1Nenn11gwAUaI7OQNSassE+nVFL2BGedl6DOgpZFkKrDTQT7jyvvc3r/2IqWahAYyFWXImD50qwNWIGyZ2Sry2/WXeCydiUWV8ZG3GOlGZLgtlK8igdmLje/6Ja+1oRBFwdbWrf/nKsMB0fCL3R5MkWTnumR8sGx2Xud8Q3mF7cOYWQiy2AqrFQOzJ+QwH6hO6CGVk8eBh8xRkrjaZEsvolZ33N+0aS9NBxHuOyGq0Te9HMLFqwVGzwIDAQABAoIBAQDPD4gAnb0erdMQXT/m50TekdIQuQWXYy00xl+XUFMLg0L8FUmxz++0L5d72Qfxqd97kBYlzkeFZ3pbOvHSD33ieByJ8mNFnc+tMy+4z3BotRcxGRJzIdfcZAS/7MJB8C6KAO0iIQVE5WbGb7pu+XwmcOH1gutKeajc2SVhD8l7ECRARPuV3JxlhbVt+ylM05h7+5HwwnEmodNQHPeGvLEWp7eODNdcLLE5EFVjmN0dwGu9D+xCFna9bL7p921GOTGf349l3021ONaGvWd77Frhl9tHL1k40hqq4LiXDk3RkiP2oDb65+ohW128Q1QPgjMQuXbbFTCa3++pbz7OMbUhAoGBAPxt6A5B3s5GnnaCTE0YJ13aTeUyqrLimBxWEp7L/WXug8SDBW5tVAmBNHlZC4GuR089E7g26BVr0i3k/dOknKa0GLyGGJNphxrrcD05p+XB6Gd6/N1Yr6amM+8XqU1+UKLL2CBrLOSi6r4J4fPS8sb9362+FROwCJZfxd5Wznd/AoGBAN2NEz+anDBgulxLoguGuvc0FaqSsVIP/cdb5Ve5t29/uheVjLgDXSkV5P/RFfk1ygH1gNjmUrsoxfsGWQa3KMTk292maYRj7GPpOalSlp8BYyiQ9omPdOgusVzY4CEjMiDkKal0YrBswXKV8E2lTokEEkbdrQpToVdBmRCzT1ixAoGBAMNMBQ2CyO6ulEr75CyBU3O5QirhWE+uICFMNnvFNvd14VxYQgt9alcwL3jy+4QJYgJcLrWHRWfNU39Oe1MTOF+BVuIEnV7vdifNn7i+srd/nl7xOFHIG53DWMrSc5oQ8DIDo+LxCHqb0SHWY4pQ2qQ6JqQ1O/lPaFVvI5cxcevhAoGALyNtDQNgaAqsnCabe8hWz3INihVcFRHB9UDgMyIYnWiXt5ziK+TLVYqLBsL94eBH8tLBb2TSBXBPb3GST5N44SuwfCCEIt7/1OIymowv7/TjnCX7zpjvTtdgdVjPlz1d1RG2q49P0CnTnwW3801QwGZVXS6dOq1AjsguQRdlsoECgYBrFqKa3S48UbGOKkocgMb/1HzVs2sxNWMu+/jEiBvI4RrCiun9MALtrVtohgHRml4yZJaOojVk9F0z/MAak9eTgSmHpwxYZMqR1PvM4c/ekfun4hQoK04Thoexi/Z0RfsI6nBdBk8MAra03ldDvnYZY4Fat21YuNBspbrbTW8UoA==-----END RSA PRIVATE KEY-----\",\n+  \"githubPrivateKey\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEpAIBAAKCAQEA2nX81/5w6nZLolEh0uKks3//FlqizKxFWi8GaEJYbud8FYwLH6l+LDfZkjQiDXvm6mxngDGCjlG9b7hgfa/sfWSuqtJUQ2D1Nenn11gwAUaI7OQNSassE+nVFL2BGedl6DOgpZFkKrDTQT7jyvvc3r/2IqWahAYyFWXImD50qwNWIGyZ2Sry2/WXeCydiUWV8ZG3GOlGZLgtlK8igdmLje/6Ja+1oRBFwdbWrf/nKsMB0fCL3R5MkWTnumR8sGx2Xud8Q3mF7cOYWQiy2AqrFQOzJ+QwH6hO6CGVk8eBh8xRkrjaZEsvolZ33N+0aS9NBxHuOyGq0Te9HMLFqwVGzwIDAQABAoIBAQDPD4gAnb0erdMQXT/m50TekdIQuQWXYy00xl+XUFMLg0L8FUmxz++0L5d72Qfxqd97kBYlzkeFZ3pbOvHSD33ieByJ8mNFnc+tMy+4z3BotRcxGRJzIdfcZAS/7MJB8C6KAO0iIQVE5WbGb7pu+XwmcOH1gutKeajc2SVhD8l7ECRARPuV3JxlhbVt+ylM05h7+5HwwnEmodNQHPeGvLEWp7eODNdcLLE5EFVjmN0dwGu9D+xCFna9bL7p921GOTGf349l3021ONaGvWd77Frhl9tHL1k40hqq4LiXDk3RkiP2oDb65+ohW128Q1QPgjMQuXbbFTCa3++pbz7OMbUhAoGBAPxt6A5B3s5GnnaCTE0YJ13aTeUyqrLimBxWEp7L/WXug8SDBW5tVAmBNHlZC4GuR089E7g26BVr0i3k/dOknKa0GLyGGJNphxrrcD05p+XB6Gd6/N1Yr6amM+8XqU1+UKLL2CBrLOSi6r4J4fPS8sb9362+FROwCJZfxd5Wznd/AoGBAN2NEz+anDBgulxLoguGuvc0FaqSsVIP/cdb5Ve5t29/uheVjLgDXSkV5P/RFfk1ygH1gNjmUrsoxfsGWQa3KMTk292maYRj7GPpOalSlp8BYyiQ9omPdOgusVzY4CEjMiDkKal0YrBswXKV8E2lTokEEkbdrQpToVdBmRCzT1ixAoGBAMNMBQ2CyO6ulEr75CyBU3O5QirhWE+uICFMNnvFNvd14VxYQgt9alcwL3jy+4QJYgJcLrWHRWfNU39Oe1MTOF+BVuIEnV7vdifNn7i+srd/nl7xOFHIG53DWMrSc5oQ8DIDo+LxCHqb0SHWY4pQ2qQ6JqQ1O/lPaFVvI5cxcevhAoGALyNtDQNgaAqsnCabe8hWz3INihVcFRHB9UDgMyIYnWiXt5ziK+TLVYqLBsL94eBH8tLBb2TSBXBPb3GST5N44SuwfCCEIt7/1OIymowv7/TjnCX7zpjvTtdgdVjPlz1d1RG2q49P0CnTnwW3801QwGZVXS6dOq1AjsguQRdlsoECgYBrFqKa3S48UbGOKkocgMb/1HzVs2sxNWMu+/jEiBvI4RrCiun9MALtrVtohgHRml4yZJaOojVk9F0z/MAak9eTgSmHpwxYZMqR1PvM4c/ekfun4hQoK04Thoexi/Z0RfsI6nBdBk8MAra03ldDvnYZY4Fat21YuNBspbrbTW8UoA==\\n-----END RSA PRIVATE KEY-----\",\n   \"email\": {\n     \"apiKey\": \"key-1q2w3e4r\"\n   },"
    },
    {
      "sha": "89ccaf7f1cfe55222675e4e9eafd2377d114b5a6",
      "filename": "controllers/auth.js",
      "status": "added",
      "additions": 65,
      "deletions": 0,
      "changes": 65,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/controllers/auth.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/controllers/auth.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/controllers/auth.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,65 @@\n+'use strict'\n+\n+const gitFactory = require('../lib/GitServiceFactory')\n+const oauth = require('../lib/OAuth')\n+const RSA = require('../lib/RSA')\n+const Staticman = require('../lib/Staticman')\n+\n+module.exports = (req, res) => {\n+  const staticman = new Staticman(req.params)\n+  staticman.setConfigPath()\n+\n+  let requestAccessToken\n+\n+  switch (req.params.service) {\n+    case 'gitlab':\n+      requestAccessToken = siteConfig =>\n+        oauth.requestGitLabAccessToken(\n+          req.query.code,\n+          siteConfig.get('gitlabAuth.clientId'),\n+          siteConfig.get('gitlabAuth.clientSecret'),\n+          siteConfig.get('gitlabAuth.redirectUri')\n+        )\n+      break\n+    default:\n+      requestAccessToken = siteConfig =>\n+        oauth.requestGitHubAccessToken(\n+          req.query.code,\n+          siteConfig.get('githubAuth.clientId'),\n+          siteConfig.get('githubAuth.clientSecret'),\n+          siteConfig.get('githubAuth.redirectUri')\n+        )\n+  }\n+\n+  return staticman.getSiteConfig()\n+    .then(requestAccessToken)\n+    .then((accessToken) => {\n+      const git = gitFactory.create(req.params.service, {\n+        oauthToken: accessToken,\n+        version: req.params.version\n+      })\n+\n+      // TODO: Simplify this when v2 support is dropped.\n+      const getUser = req.params.version === '2' && req.params.service === 'github'\n+        ? git.api.users.getAuthenticated({}).then(({data}) => data)\n+        : git.getCurrentUser()\n+\n+      return getUser\n+        .then((user) => {\n+          res.send({\n+            accessToken: RSA.encrypt(accessToken),\n+            user\n+          })\n+        })\n+    })\n+    .catch((err) => {\n+      console.log('ERR:', err)\n+\n+      const statusCode = err.statusCode || 401\n+\n+      res.status(statusCode).send({\n+        statusCode,\n+        message: err.message\n+      })\n+    })\n+}"
    },
    {
      "sha": "d5d3d4e2b271528a37ec33efda7b8d04e6894a03",
      "filename": "controllers/connect.js",
      "status": "modified",
      "additions": 21,
      "deletions": 22,
      "changes": 43,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/controllers/connect.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/controllers/connect.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/controllers/connect.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -12,40 +12,39 @@ module.exports = (req, res) => {\n   const github = new GitHub({\n     username: req.params.username,\n     repository: req.params.repository,\n-    branch: req.params.branch\n+    branch: req.params.branch,\n+    token: config.get('githubToken')\n   })\n \n-  github.authenticateWithToken(config.get('githubToken'))\n+  return github.api.repos.listInvitationsForAuthenticatedUser({}).then(({data}) => {\n+    let invitationId = null\n \n-  return github.api.users.getRepoInvites({}).then(response => {\n-    let invitationId\n-\n-    const invitation = response.some(invitation => {\n+    const invitation = Array.isArray(data) && data.some(invitation => {\n       if (invitation.repository.full_name === (req.params.username + '/' + req.params.repository)) {\n         invitationId = invitation.id\n \n         return true\n       }\n     })\n \n-    if (invitation) {\n-      return github.api.users.acceptRepoInvite({\n-        id: invitationId\n-      })\n-    } else {\n-      res.status(404).send('Invitation not found')\n+    if (!invitation) {\n+      return res.status(404).send('Invitation not found')\n     }\n-  }).then(response => {\n-    res.send('OK!')\n \n-    if (ua) {\n-      ua.event('Repositories', 'Connect').send()\n-    }\n-  }).catch(err => { // eslint-disable-line handle-callback-err\n-    res.status(500).send('Error')\n+    return github.api.repos.acceptInvitation({\n+      invitation_id: invitationId\n+    }).then(response => {\n+      res.send('OK!')\n \n-    if (ua) {\n-      ua.event('Repositories', 'Connect error').send()\n-    }\n+      if (ua) {\n+        ua.event('Repositories', 'Connect').send()\n+      }\n+    }).catch(err => { // eslint-disable-line handle-callback-err\n+      res.status(500).send('Error')\n+\n+      if (ua) {\n+        ua.event('Repositories', 'Connect error').send()\n+      }\n+    })\n   })\n }"
    },
    {
      "sha": "d93d8c31f22291496e876b350d29cc65786766b8",
      "filename": "controllers/githubAuth.js",
      "status": "removed",
      "additions": 0,
      "deletions": 32,
      "changes": 32,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/30636040d06c64139de6dceb77c2fe32207fa981/controllers/githubAuth.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/30636040d06c64139de6dceb77c2fe32207fa981/controllers/githubAuth.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/controllers/githubAuth.js?ref=30636040d06c64139de6dceb77c2fe32207fa981",
      "patch": "@@ -1,32 +0,0 @@\n-'use strict'\n-\n-const path = require('path')\n-const GitHub = require(path.join(__dirname, '/../lib/GitHub'))\n-const RSA = require('../lib/RSA')\n-const Staticman = require('../lib/Staticman')\n-\n-module.exports = (req, res) => {\n-  const github = new GitHub()\n-  const staticman = new Staticman(req.params)\n-\n-  staticman.authenticate()\n-  staticman.setConfigPath()\n-\n-  return staticman.getSiteConfig().then(siteConfig => {\n-    return github.authenticateWithCode({\n-      code: req.query.code,\n-      clientId: siteConfig.get('githubAuth.clientId'),\n-      clientSecret: siteConfig.get('githubAuth.clientSecret')\n-    })\n-  }).then(accessToken => {\n-    return github.api.users.get({}).then(user => {\n-      res.send({\n-        accessToken: RSA.encrypt(accessToken),\n-        user\n-      })\n-    })\n-  }).catch(err => {\n-    console.log('ERR:', err)\n-    res.send(err)\n-  })\n-}"
    },
    {
      "sha": "80bc057f30a5090dad66382b1fc6d4cb160bcefd",
      "filename": "controllers/handlePR.js",
      "status": "modified",
      "additions": 17,
      "deletions": 24,
      "changes": 41,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/controllers/handlePR.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/controllers/handlePR.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/controllers/handlePR.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,8 +1,7 @@\n 'use strict'\n \n-const path = require('path')\n-const config = require(path.join(__dirname, '/../config'))\n-const GitHub = require(path.join(__dirname, '/../lib/GitHub'))\n+const config = require('../config')\n+const GitHub = require('../lib/GitHub')\n const Staticman = require('../lib/Staticman')\n \n module.exports = (repo, data) => {\n@@ -14,45 +13,39 @@ module.exports = (repo, data) => {\n     return\n   }\n \n-  const github = new GitHub()\n+  const github = new GitHub({\n+    username: data.repository.owner.login,\n+    repository: data.repository.name,\n+    token: config.get('githubToken')\n+  })\n \n-  github.authenticateWithToken(config.get('githubToken'))\n+  return github.getReview(data.number).then((review) => {\n+    if (review.sourceBranch.indexOf('staticman_')) {\n+      return null\n+    }\n \n-  return github.api.pullRequests.get({\n-    user: data.repository.owner.login,\n-    repo: data.repository.name,\n-    number: data.number\n-  }).then(response => {\n-    if (response.head.ref.indexOf('staticman_')) {\n+    if (review.state !== 'merged' && review.state !== 'closed') {\n       return null\n     }\n \n-    if (response.merged) {\n-      const bodyMatch = response.body.match(/(?:.*?)<!--staticman_notification:(.+?)-->(?:.*?)/i)\n+    if (review.state === 'merged') {\n+      const bodyMatch = review.body.match(/(?:.*?)<!--staticman_notification:(.+?)-->(?:.*?)/i)\n \n       if (bodyMatch && (bodyMatch.length === 2)) {\n         try {\n           const parsedBody = JSON.parse(bodyMatch[1])\n           const staticman = new Staticman(parsedBody.parameters)\n \n-          staticman.authenticate()\n           staticman.setConfigPath(parsedBody.configPath)\n-          staticman.processMerge(parsedBody.fields, parsedBody.options).catch(err => {\n-            return Promise.reject(err)\n-          })\n+          staticman.processMerge(parsedBody.fields, parsedBody.options)\n+            .catch(err => Promise.reject(err))\n         } catch (err) {\n           return Promise.reject(err)\n         }\n       }\n     }\n \n-    if (response.state === 'closed') {\n-      return github.api.gitdata.deleteReference({\n-        user: data.repository.owner.login,\n-        repo: data.repository.name,\n-        ref: 'heads/' + response.head.ref\n-      })\n-    }\n+    return github.deleteBranch(review.sourceBranch)\n   }).then(response => {\n     if (ua) {\n       ua.event('Hooks', 'Delete branch').send()"
    },
    {
      "sha": "9bcce71b9ff27d48b27b07b309f383f3ab6314d2",
      "filename": "controllers/process.js",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/controllers/process.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/controllers/process.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/controllers/process.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -123,20 +123,17 @@ function sendResponse (res, data) {\n module.exports = (req, res, next) => {\n   const staticman = new Staticman(req.params)\n \n-  staticman.authenticate()\n   staticman.setConfigPath()\n   staticman.setIp(req.headers['x-forwarded-for'] || req.connection.remoteAddress)\n   staticman.setUserAgent(req.headers['user-agent'])\n \n-  return checkRecaptcha(staticman, req).then(usedRecaptcha => {\n-    return process(staticman, req, res)\n-  }).catch(err => {\n-    return sendResponse(res, {\n+  return checkRecaptcha(staticman, req)\n+    .then(usedRecaptcha => process(staticman, req, res))\n+    .catch(err => sendResponse(res, {\n       err,\n       redirect: req.body.options && req.body.options.redirect,\n       redirectError: req.body.options && req.body.options.redirectError\n-    })\n-  })\n+    }))\n }\n \n module.exports.checkRecaptcha = checkRecaptcha"
    },
    {
      "sha": "de0078f68f51ee7a184bedfd53cd334c54f08414",
      "filename": "coverage/cobertura-coverage.xml",
      "status": "removed",
      "additions": 0,
      "deletions": 1431,
      "changes": 1431,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/30636040d06c64139de6dceb77c2fe32207fa981/coverage/cobertura-coverage.xml",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/30636040d06c64139de6dceb77c2fe32207fa981/coverage/cobertura-coverage.xml",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/coverage/cobertura-coverage.xml?ref=30636040d06c64139de6dceb77c2fe32207fa981",
      "patch": "@@ -1,1431 +0,0 @@\n-<?xml version=\"1.0\" ?>\n-<!DOCTYPE coverage SYSTEM \"http://cobertura.sourceforge.net/xml/coverage-04.dtd\">\n-<coverage lines-valid=\"620\" lines-covered=\"527\" line-rate=\"0.85\" branches-valid=\"302\" branches-covered=\"228\" branch-rate=\"0.755\" timestamp=\"1499621342814\" complexity=\"0\" version=\"0.1\">\n-  <sources>\n-    <source>/Users/eduardoboucas/Sites/staticman</source>\n-  </sources>\n-  <packages>\n-    <package name=\"staticman\" line-rate=\"0.8902\" branch-rate=\"0.6\">\n-      <classes>\n-        <class name=\"config.js\" filename=\"config.js\" line-rate=\"0.9091\" branch-rate=\"1\">\n-          <methods>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"99\" branch=\"false\"/>\n-            <line number=\"4\" hits=\"99\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"99\" branch=\"false\"/>\n-            <line number=\"86\" hits=\"99\" branch=\"false\"/>\n-            <line number=\"87\" hits=\"99\" branch=\"false\"/>\n-            <line number=\"89\" hits=\"99\" branch=\"false\"/>\n-            <line number=\"91\" hits=\"99\" branch=\"false\"/>\n-            <line number=\"92\" hits=\"99\" branch=\"false\"/>\n-            <line number=\"94\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"99\" hits=\"99\" branch=\"false\"/>\n-            <line number=\"100\" hits=\"99\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"index.js\" filename=\"index.js\" line-rate=\"0\" branch-rate=\"1\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"5\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"1\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"3\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"0\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"server.js\" filename=\"server.js\" line-rate=\"0.9444\" branch-rate=\"0.6\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"10\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_1)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"33\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_2)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"39\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_3)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"40\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_4)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"48\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_5)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"97\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_6)\" hits=\"5\" signature=\"()V\">\n-              <lines>\n-                <line number=\"107\" hits=\"5\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_7)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"108\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_8)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"109\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_9)\" hits=\"2\" signature=\"()V\">\n-              <lines>\n-                <line number=\"124\" hits=\"2\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_10)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"125\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_11)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"128\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_12)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"149\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"4\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"7\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"8\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"10\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"11\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"20\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"21\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"22\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"27\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"28\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"29\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"30\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"33\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"34\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"36\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"39\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"40\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"41\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"42\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"44\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"48\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"50\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"58\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"66\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"75\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"83\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"91\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"97\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"98\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"102\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"104\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"107\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"108\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"109\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"110\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"113\" hits=\"3\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"114\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"120\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"124\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"125\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"126\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"128\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"129\" hits=\"3\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"133\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"137\" hits=\"3\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"138\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"145\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"149\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"150\" hits=\"1\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"154\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"157\" hits=\"1\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"siteConfig.js\" filename=\"siteConfig.js\" line-rate=\"0.9231\" branch-rate=\"1\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"84\" signature=\"()V\">\n-              <lines>\n-                <line number=\"157\" hits=\"84\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_1)\" hits=\"420\" signature=\"()V\">\n-              <lines>\n-                <line number=\"160\" hits=\"420\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_2)\" hits=\"167\" signature=\"()V\">\n-              <lines>\n-                <line number=\"161\" hits=\"167\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"65\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"65\" branch=\"false\"/>\n-            <line number=\"157\" hits=\"65\" branch=\"false\"/>\n-            <line number=\"158\" hits=\"84\" branch=\"false\"/>\n-            <line number=\"160\" hits=\"420\" branch=\"false\"/>\n-            <line number=\"162\" hits=\"167\" branch=\"false\"/>\n-            <line number=\"166\" hits=\"84\" branch=\"false\"/>\n-            <line number=\"168\" hits=\"84\" branch=\"false\"/>\n-            <line number=\"169\" hits=\"84\" branch=\"false\"/>\n-            <line number=\"170\" hits=\"84\" branch=\"false\"/>\n-            <line number=\"172\" hits=\"84\" branch=\"false\"/>\n-            <line number=\"174\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"178\" hits=\"65\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-      </classes>\n-    </package>\n-    <package name=\"staticman.controllers\" line-rate=\"0.8023\" branch-rate=\"0.7755\">\n-      <classes>\n-        <class name=\"connect.js\" filename=\"controllers/connect.js\" line-rate=\"0.9048\" branch-rate=\"0.7\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"7\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_1)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"20\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_2)\" hits=\"2\" signature=\"()V\">\n-              <lines>\n-                <line number=\"23\" hits=\"2\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_3)\" hits=\"2\" signature=\"()V\">\n-              <lines>\n-                <line number=\"38\" hits=\"2\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_4)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"44\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"4\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"7\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"8\" hits=\"3\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"12\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"18\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"20\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"23\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"24\" hits=\"2\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"25\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"27\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"31\" hits=\"2\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"32\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"36\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"39\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"41\" hits=\"2\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"42\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"45\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"47\" hits=\"1\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"48\" hits=\"0\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"encrypt.js\" filename=\"controllers/encrypt.js\" line-rate=\"0.9\" branch-rate=\"1\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"10\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"4\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"8\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"10\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"11\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"12\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"14\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"16\" hits=\"0\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"githubAuth.js\" filename=\"controllers/githubAuth.js\" line-rate=\"0.3077\" branch-rate=\"1\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"7\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_1)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"14\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_2)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"20\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_3)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"22\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_4)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"24\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"4\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"7\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"8\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"9\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"11\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"12\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"14\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"15\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"21\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"23\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"25\" hits=\"0\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"handlePR.js\" filename=\"controllers/handlePR.js\" line-rate=\"0.8787999999999999\" branch-rate=\"0.75\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"4\" signature=\"()V\">\n-              <lines>\n-                <line number=\"8\" hits=\"4\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_1)\" hits=\"4\" signature=\"()V\">\n-              <lines>\n-                <line number=\"25\" hits=\"4\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_2)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"40\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_3)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"56\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_4)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"62\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"4\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"8\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"9\" hits=\"4\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"13\" hits=\"4\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"14\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"17\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"19\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"21\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"26\" hits=\"4\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"27\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"30\" hits=\"3\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"31\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"33\" hits=\"3\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"34\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"35\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"36\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"38\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"39\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"40\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"41\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"44\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"49\" hits=\"2\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"50\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"57\" hits=\"3\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"58\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"61\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"63\" hits=\"1\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"65\" hits=\"1\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"66\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"69\" hits=\"1\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"home.js\" filename=\"controllers/home.js\" line-rate=\"0.6667000000000001\" branch-rate=\"1\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"5\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"0\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"process.js\" filename=\"controllers/process.js\" line-rate=\"0.8151999999999999\" branch-rate=\"0.7940999999999999\">\n-          <methods>\n-            <method name=\"checkGithubAuth\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"13\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_1)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"37\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"checkRecaptcha\" hits=\"12\" signature=\"()V\">\n-              <lines>\n-                <line number=\"42\" hits=\"12\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_3)\" hits=\"12\" signature=\"()V\">\n-              <lines>\n-                <line number=\"43\" hits=\"12\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_4)\" hits=\"11\" signature=\"()V\">\n-              <lines>\n-                <line number=\"44\" hits=\"11\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_5)\" hits=\"2\" signature=\"()V\">\n-              <lines>\n-                <line number=\"71\" hits=\"2\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_6)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"78\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"createConfigObject\" hits=\"5\" signature=\"()V\">\n-              <lines>\n-                <line number=\"82\" hits=\"5\"/>\n-              </lines>\n-            </method>\n-            <method name=\"process\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"96\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_9)\" hits=\"2\" signature=\"()V\">\n-              <lines>\n-                <line number=\"103\" hits=\"2\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_10)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"112\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"sendResponse\" hits=\"10\" signature=\"()V\">\n-              <lines>\n-                <line number=\"126\" hits=\"10\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_12)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"162\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_13)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"171\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_14)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"173\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_15)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"179\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"4\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"7\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"8\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"9\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"10\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"11\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"14\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/4)\"/>\n-            <line number=\"15\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"18\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"19\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"23\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/4)\"/>\n-            <line number=\"24\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"26\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"28\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"31\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"33\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"38\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"43\" hits=\"12\" branch=\"false\"/>\n-            <line number=\"44\" hits=\"12\" branch=\"false\"/>\n-            <line number=\"45\" hits=\"11\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"46\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"49\" hits=\"10\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"51\" hits=\"10\" branch=\"true\" condition-coverage=\"100% (5/5)\"/>\n-            <line number=\"52\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"57\" hits=\"7\" branch=\"false\"/>\n-            <line number=\"58\" hits=\"7\" branch=\"false\"/>\n-            <line number=\"60\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"63\" hits=\"3\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"67\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"70\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"71\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"72\" hits=\"2\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"73\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"76\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"78\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"83\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"85\" hits=\"5\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"86\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"87\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"89\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"90\" hits=\"3\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"93\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"97\" hits=\"3\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"100\" hits=\"3\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"101\" hits=\"3\" branch=\"true\" condition-coverage=\"66.66666666666666% (2/3)\"/>\n-            <line number=\"103\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"104\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"109\" hits=\"2\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"110\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"113\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"118\" hits=\"1\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"119\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"122\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"127\" hits=\"10\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"128\" hits=\"10\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"130\" hits=\"10\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"131\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"134\" hits=\"8\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"135\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"138\" hits=\"7\" branch=\"false\"/>\n-            <line number=\"142\" hits=\"7\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"143\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"144\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"146\" hits=\"5\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"147\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"150\" hits=\"5\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"151\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"154\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"156\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"159\" hits=\"7\" branch=\"false\"/>\n-            <line number=\"162\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"163\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"165\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"166\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"167\" hits=\"3\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"168\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"169\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"171\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"172\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"174\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/2)\"/>\n-            <line number=\"175\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"178\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"180\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"181\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"189\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"190\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"191\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"192\" hits=\"14\" branch=\"false\"/>\n-            <line number=\"193\" hits=\"14\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-      </classes>\n-    </package>\n-    <package name=\"staticman.lib\" line-rate=\"0.8634000000000001\" branch-rate=\"0.7526\">\n-      <classes>\n-        <class name=\"ErrorHandler.js\" filename=\"lib/ErrorHandler.js\" line-rate=\"0.8889\" branch-rate=\"0.85\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"94\" signature=\"()V\">\n-              <lines>\n-                <line number=\"5\" hits=\"94\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_1)\" hits=\"6\" signature=\"()V\">\n-              <lines>\n-                <line number=\"29\" hits=\"6\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_2)\" hits=\"6\" signature=\"()V\">\n-              <lines>\n-                <line number=\"33\" hits=\"6\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_3)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"37\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_4)\" hits=\"32\" signature=\"()V\">\n-              <lines>\n-                <line number=\"56\" hits=\"32\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_5)\" hits=\"32\" signature=\"()V\">\n-              <lines>\n-                <line number=\"80\" hits=\"32\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_6)\" hits=\"11\" signature=\"()V\">\n-              <lines>\n-                <line number=\"84\" hits=\"11\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"1\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"2\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"3\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"94\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"7\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"10\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"21\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"29\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"30\" hits=\"6\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"33\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"34\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"37\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"38\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"39\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"41\" hits=\"3\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"42\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"44\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"47\" hits=\"3\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"48\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"52\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"56\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"57\" hits=\"32\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"59\" hits=\"32\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"60\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"63\" hits=\"32\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"64\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"67\" hits=\"27\" branch=\"false\"/>\n-            <line number=\"71\" hits=\"27\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"72\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"75\" hits=\"27\" branch=\"false\"/>\n-            <line number=\"78\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"80\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"81\" hits=\"32\" branch=\"false\"/>\n-            <line number=\"84\" hits=\"94\" branch=\"false\"/>\n-            <line number=\"85\" hits=\"11\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"GitHub.js\" filename=\"lib/GitHub.js\" line-rate=\"0.9573999999999999\" branch-rate=\"0.7778\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"86\" signature=\"()V\">\n-              <lines>\n-                <line number=\"10\" hits=\"86\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_1)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"26\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_2)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"38\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_3)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"45\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_4)\" hits=\"11\" signature=\"()V\">\n-              <lines>\n-                <line number=\"51\" hits=\"11\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_5)\" hits=\"10\" signature=\"()V\">\n-              <lines>\n-                <line number=\"58\" hits=\"10\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_6)\" hits=\"9\" signature=\"()V\">\n-              <lines>\n-                <line number=\"66\" hits=\"9\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_7)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"100\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_8)\" hits=\"4\" signature=\"()V\">\n-              <lines>\n-                <line number=\"105\" hits=\"4\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_9)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"116\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_10)\" hits=\"2\" signature=\"()V\">\n-              <lines>\n-                <line number=\"121\" hits=\"2\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_11)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"129\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_12)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"136\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_13)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"138\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_14)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"147\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"93\" branch=\"false\"/>\n-            <line number=\"4\" hits=\"93\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"93\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"93\" branch=\"false\"/>\n-            <line number=\"7\" hits=\"93\" branch=\"false\"/>\n-            <line number=\"8\" hits=\"93\" branch=\"false\"/>\n-            <line number=\"10\" hits=\"93\" branch=\"false\"/>\n-            <line number=\"11\" hits=\"86\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"13\" hits=\"86\" branch=\"false\"/>\n-            <line number=\"26\" hits=\"93\" branch=\"true\" condition-coverage=\"0% (0/1)\"/>\n-            <line number=\"31\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"39\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"44\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"46\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"47\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"51\" hits=\"93\" branch=\"false\"/>\n-            <line number=\"52\" hits=\"11\" branch=\"false\"/>\n-            <line number=\"58\" hits=\"93\" branch=\"false\"/>\n-            <line number=\"59\" hits=\"10\" branch=\"false\"/>\n-            <line number=\"61\" hits=\"10\" branch=\"false\"/>\n-            <line number=\"67\" hits=\"9\" branch=\"false\"/>\n-            <line number=\"69\" hits=\"9\" branch=\"false\"/>\n-            <line number=\"70\" hits=\"9\" branch=\"true\" condition-coverage=\"100% (3/3)\"/>\n-            <line number=\"73\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"75\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"78\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"80\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"83\" hits=\"7\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"90\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"94\" hits=\"2\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"95\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"98\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"101\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"105\" hits=\"93\" branch=\"false\"/>\n-            <line number=\"106\" hits=\"4\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"107\" hits=\"4\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"109\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"117\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"121\" hits=\"93\" branch=\"false\"/>\n-            <line number=\"122\" hits=\"2\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"123\" hits=\"2\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"125\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"130\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"137\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"139\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"148\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"152\" hits=\"93\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"Notification.js\" filename=\"lib/Notification.js\" line-rate=\"0.7857\" branch-rate=\"0.375\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"2\" signature=\"()V\">\n-              <lines>\n-                <line number=\"6\" hits=\"2\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_1)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"10\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_2)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"27\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_3)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"30\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_4)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"36\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"57\" branch=\"false\"/>\n-            <line number=\"4\" hits=\"57\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"57\" branch=\"false\"/>\n-            <line number=\"7\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"10\" hits=\"57\" branch=\"false\"/>\n-            <line number=\"11\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"27\" hits=\"57\" branch=\"false\"/>\n-            <line number=\"28\" hits=\"1\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"30\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"31\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"37\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/2)\"/>\n-            <line number=\"38\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"41\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"46\" hits=\"57\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"Staticman.js\" filename=\"lib/Staticman.js\" line-rate=\"0.9523999999999999\" branch-rate=\"0.8682\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"64\" signature=\"()V\">\n-              <lines>\n-                <line number=\"20\" hits=\"64\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_1)\" hits=\"9\" signature=\"()V\">\n-              <lines>\n-                <line number=\"38\" hits=\"9\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_2)\" hits=\"6\" signature=\"()V\">\n-              <lines>\n-                <line number=\"51\" hits=\"6\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_3)\" hits=\"6\" signature=\"()V\">\n-              <lines>\n-                <line number=\"56\" hits=\"6\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_4)\" hits=\"6\" signature=\"()V\">\n-              <lines>\n-                <line number=\"90\" hits=\"6\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_5)\" hits=\"5\" signature=\"()V\">\n-              <lines>\n-                <line number=\"99\" hits=\"5\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_6)\" hits=\"5\" signature=\"()V\">\n-              <lines>\n-                <line number=\"107\" hits=\"5\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_7)\" hits=\"4\" signature=\"()V\">\n-              <lines>\n-                <line number=\"112\" hits=\"4\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_8)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"115\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_9)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"129\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_10)\" hits=\"9\" signature=\"()V\">\n-              <lines>\n-                <line number=\"139\" hits=\"9\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_11)\" hits=\"11\" signature=\"()V\">\n-              <lines>\n-                <line number=\"157\" hits=\"11\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_12)\" hits=\"11\" signature=\"()V\">\n-              <lines>\n-                <line number=\"158\" hits=\"11\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_13)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"176\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_14)\" hits=\"4\" signature=\"()V\">\n-              <lines>\n-                <line number=\"203\" hits=\"4\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_15)\" hits=\"18\" signature=\"()V\">\n-              <lines>\n-                <line number=\"208\" hits=\"18\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_16)\" hits=\"11\" signature=\"()V\">\n-              <lines>\n-                <line number=\"228\" hits=\"11\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_17)\" hits=\"14\" signature=\"()V\">\n-              <lines>\n-                <line number=\"254\" hits=\"14\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_18)\" hits=\"4\" signature=\"()V\">\n-              <lines>\n-                <line number=\"268\" hits=\"4\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_19)\" hits=\"30\" signature=\"()V\">\n-              <lines>\n-                <line number=\"283\" hits=\"30\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_20)\" hits=\"20\" signature=\"()V\">\n-              <lines>\n-                <line number=\"288\" hits=\"20\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_21)\" hits=\"7\" signature=\"()V\">\n-              <lines>\n-                <line number=\"323\" hits=\"7\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_22)\" hits=\"24\" signature=\"()V\">\n-              <lines>\n-                <line number=\"338\" hits=\"24\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_23)\" hits=\"8\" signature=\"()V\">\n-              <lines>\n-                <line number=\"355\" hits=\"8\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_24)\" hits=\"34\" signature=\"()V\">\n-              <lines>\n-                <line number=\"359\" hits=\"34\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_25)\" hits=\"24\" signature=\"()V\">\n-              <lines>\n-                <line number=\"372\" hits=\"24\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_26)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"393\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_27)\" hits=\"2\" signature=\"()V\">\n-              <lines>\n-                <line number=\"397\" hits=\"2\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_28)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"401\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_29)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"405\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_30)\" hits=\"15\" signature=\"()V\">\n-              <lines>\n-                <line number=\"409\" hits=\"15\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_31)\" hits=\"6\" signature=\"()V\">\n-              <lines>\n-                <line number=\"414\" hits=\"6\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_32)\" hits=\"6\" signature=\"()V\">\n-              <lines>\n-                <line number=\"430\" hits=\"6\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_33)\" hits=\"6\" signature=\"()V\">\n-              <lines>\n-                <line number=\"434\" hits=\"6\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_34)\" hits=\"5\" signature=\"()V\">\n-              <lines>\n-                <line number=\"436\" hits=\"5\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_35)\" hits=\"4\" signature=\"()V\">\n-              <lines>\n-                <line number=\"447\" hits=\"4\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_36)\" hits=\"4\" signature=\"()V\">\n-              <lines>\n-                <line number=\"449\" hits=\"4\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_37)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"452\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_38)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"462\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_39)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"476\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_40)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"481\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_41)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"489\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_42)\" hits=\"1\" signature=\"()V\">\n-              <lines>\n-                <line number=\"493\" hits=\"1\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_43)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"497\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_44)\" hits=\"9\" signature=\"()V\">\n-              <lines>\n-                <line number=\"505\" hits=\"9\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_45)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"526\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_46)\" hits=\"5\" signature=\"()V\">\n-              <lines>\n-                <line number=\"530\" hits=\"5\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_47)\" hits=\"3\" signature=\"()V\">\n-              <lines>\n-                <line number=\"534\" hits=\"3\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_48)\" hits=\"5\" signature=\"()V\">\n-              <lines>\n-                <line number=\"538\" hits=\"5\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"4\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"5\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"7\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"8\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"9\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"10\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"11\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"12\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"13\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"14\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"15\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"16\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"17\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"18\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"20\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"21\" hits=\"64\" branch=\"false\"/>\n-            <line number=\"24\" hits=\"64\" branch=\"false\"/>\n-            <line number=\"31\" hits=\"64\" branch=\"false\"/>\n-            <line number=\"34\" hits=\"64\" branch=\"false\"/>\n-            <line number=\"35\" hits=\"64\" branch=\"false\"/>\n-            <line number=\"38\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"39\" hits=\"9\" branch=\"false\"/>\n-            <line number=\"44\" hits=\"9\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"45\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"48\" hits=\"9\" branch=\"false\"/>\n-            <line number=\"51\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"52\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"54\" hits=\"6\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"56\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"57\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"59\" hits=\"6\" branch=\"true\" condition-coverage=\"75% (3/4)\"/>\n-            <line number=\"60\" hits=\"6\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"62\" hits=\"6\" branch=\"true\" condition-coverage=\"66.66666666666666% (2/3)\"/>\n-            <line number=\"64\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"66\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"69\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/4)\"/>\n-            <line number=\"70\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"73\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"76\" hits=\"1\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"77\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"80\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"83\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"87\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"90\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"91\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"93\" hits=\"6\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"97\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"99\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"100\" hits=\"5\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"102\" hits=\"5\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"103\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"107\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"108\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"112\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"113\" hits=\"4\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"115\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"116\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"121\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"130\" hits=\"3\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"132\" hits=\"2\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"134\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"139\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"140\" hits=\"9\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"142\" hits=\"9\" branch=\"false\"/>\n-            <line number=\"144\" hits=\"9\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"146\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"149\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"153\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"157\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"158\" hits=\"11\" branch=\"false\"/>\n-            <line number=\"159\" hits=\"11\" branch=\"true\" condition-coverage=\"100% (5/5)\"/>\n-            <line number=\"161\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"165\" hits=\"7\" branch=\"false\"/>\n-            <line number=\"166\" hits=\"7\" branch=\"false\"/>\n-            <line number=\"168\" hits=\"7\" branch=\"false\"/>\n-            <line number=\"170\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"174\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"176\" hits=\"2\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"177\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"180\" hits=\"2\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"181\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"184\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"185\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"187\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"189\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"190\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"192\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"194\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"198\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"203\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"204\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"208\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"209\" hits=\"18\" branch=\"false\"/>\n-            <line number=\"212\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"214\" hits=\"4\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"215\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"222\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"225\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"228\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"229\" hits=\"11\" branch=\"false\"/>\n-            <line number=\"230\" hits=\"11\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"237\" hits=\"11\" branch=\"false\"/>\n-            <line number=\"243\" hits=\"11\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"244\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"247\" hits=\"11\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"251\" hits=\"11\" branch=\"false\"/>\n-            <line number=\"254\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"255\" hits=\"14\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"257\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"261\" hits=\"7\" branch=\"false\"/>\n-            <line number=\"264\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"268\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"269\" hits=\"4\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"272\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"278\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"280\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"283\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"284\" hits=\"30\" branch=\"false\"/>\n-            <line number=\"286\" hits=\"30\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"288\" hits=\"15\" branch=\"false\"/>\n-            <line number=\"289\" hits=\"20\" branch=\"false\"/>\n-            <line number=\"290\" hits=\"20\" branch=\"false\"/>\n-            <line number=\"294\" hits=\"20\" branch=\"true\" condition-coverage=\"100% (3/3)\"/>\n-            <line number=\"296\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"298\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"301\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"303\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"306\" hits=\"13\" branch=\"false\"/>\n-            <line number=\"308\" hits=\"13\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"309\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"311\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"313\" hits=\"12\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"317\" hits=\"20\" branch=\"false\"/>\n-            <line number=\"320\" hits=\"15\" branch=\"false\"/>\n-            <line number=\"323\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"324\" hits=\"7\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"325\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"328\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"335\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"338\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"339\" hits=\"24\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"340\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"344\" hits=\"6\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"345\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"350\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"352\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"355\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"356\" hits=\"8\" branch=\"false\"/>\n-            <line number=\"357\" hits=\"8\" branch=\"false\"/>\n-            <line number=\"359\" hits=\"8\" branch=\"false\"/>\n-            <line number=\"361\" hits=\"34\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"362\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"366\" hits=\"34\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"367\" hits=\"34\" branch=\"false\"/>\n-            <line number=\"372\" hits=\"8\" branch=\"false\"/>\n-            <line number=\"373\" hits=\"24\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"374\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"378\" hits=\"8\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"379\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"384\" hits=\"7\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"385\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"390\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"393\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"394\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"397\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"398\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"401\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"402\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"405\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"406\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"409\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"410\" hits=\"15\" branch=\"true\" condition-coverage=\"100% (4/4)\"/>\n-            <line number=\"412\" hits=\"8\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"414\" hits=\"7\" branch=\"false\"/>\n-            <line number=\"415\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"416\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"418\" hits=\"6\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"419\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"422\" hits=\"5\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"423\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"426\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"430\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"431\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"432\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"434\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"435\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"438\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"440\" hits=\"5\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"443\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"446\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"448\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"451\" hits=\"4\" branch=\"false\"/>\n-            <line number=\"453\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"454\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"455\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"461\" hits=\"3\" branch=\"true\" condition-coverage=\"100% (6/6)\"/>\n-            <line number=\"462\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"463\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/2)\"/>\n-            <line number=\"467\" hits=\"3\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"468\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"470\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"471\" hits=\"2\" branch=\"true\" condition-coverage=\"75% (3/4)\"/>\n-            <line number=\"472\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"475\" hits=\"2\" branch=\"false\"/>\n-            <line number=\"477\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"482\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"489\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"490\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"491\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"493\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"494\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"496\" hits=\"1\" branch=\"false\"/>\n-            <line number=\"498\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"505\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"507\" hits=\"9\" branch=\"true\" condition-coverage=\"100% (2/2)\"/>\n-            <line number=\"508\" hits=\"3\" branch=\"true\" condition-coverage=\"50% (1/2)\"/>\n-            <line number=\"509\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"514\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"520\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"523\" hits=\"6\" branch=\"false\"/>\n-            <line number=\"526\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"527\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"530\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"531\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"534\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"535\" hits=\"3\" branch=\"false\"/>\n-            <line number=\"538\" hits=\"59\" branch=\"false\"/>\n-            <line number=\"539\" hits=\"5\" branch=\"false\"/>\n-            <line number=\"542\" hits=\"59\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-        <class name=\"SubscriptionsManager.js\" filename=\"lib/SubscriptionsManager.js\" line-rate=\"0.21050000000000002\" branch-rate=\"0\">\n-          <methods>\n-            <method name=\"(anonymous_0)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"6\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_1)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"12\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_2)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"18\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_3)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"21\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_4)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"22\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_5)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"36\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_6)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"37\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_7)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"48\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_8)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"51\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_9)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"54\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_10)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"56\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_11)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"59\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_12)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"67\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-            <method name=\"(anonymous_13)\" hits=\"0\" signature=\"()V\">\n-              <lines>\n-                <line number=\"70\" hits=\"0\"/>\n-              </lines>\n-            </method>\n-          </methods>\n-          <lines>\n-            <line number=\"3\" hits=\"56\" branch=\"false\"/>\n-            <line number=\"4\" hits=\"56\" branch=\"false\"/>\n-            <line number=\"6\" hits=\"56\" branch=\"false\"/>\n-            <line number=\"7\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"8\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"9\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"12\" hits=\"56\" branch=\"false\"/>\n-            <line number=\"13\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"15\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"18\" hits=\"56\" branch=\"false\"/>\n-            <line number=\"19\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"21\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"22\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"23\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/4)\"/>\n-            <line number=\"24\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"27\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/5)\"/>\n-            <line number=\"28\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"31\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"36\" hits=\"56\" branch=\"false\"/>\n-            <line number=\"37\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"38\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/2)\"/>\n-            <line number=\"39\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"41\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"48\" hits=\"56\" branch=\"false\"/>\n-            <line number=\"49\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"51\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"52\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"54\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"55\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/2)\"/>\n-            <line number=\"56\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"57\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"60\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/2)\"/>\n-            <line number=\"62\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"67\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"68\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"72\" hits=\"0\" branch=\"true\" condition-coverage=\"0% (0/4)\"/>\n-            <line number=\"74\" hits=\"0\" branch=\"false\"/>\n-            <line number=\"81\" hits=\"56\" branch=\"false\"/>\n-          </lines>\n-        </class>\n-      </classes>\n-    </package>\n-  </packages>\n-</coverage>"
    },
    {
      "sha": "bd536310147f804fc62a087245ed2257780dd0c5",
      "filename": "lib/ErrorHandler.js",
      "status": "modified",
      "additions": 39,
      "deletions": 7,
      "changes": 46,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/ErrorHandler.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/ErrorHandler.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/lib/ErrorHandler.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,5 +1,21 @@\n-const path = require('path')\n-const config = require(path.join(__dirname, '/../config'))\n+'use strict'\n+\n+const {StatusCodeError, RequestError} = require('request-promise/errors')\n+\n+class ApiError {\n+  constructor (message, statusCode = 500, smErrorCode = '') {\n+    this.message = message\n+    this.statusCode = statusCode\n+    this._smErrorCode = smErrorCode\n+  }\n+\n+  toJSON () {\n+    return {\n+      message: this.message,\n+      statusCode: this.statusCode\n+    }\n+  }\n+}\n \n const ErrorHandler = function () {\n   this.ERROR_MESSAGES = {\n@@ -43,13 +59,27 @@ ErrorHandler.prototype.log = function (err, instance) {\n   console.log(`${prefix}`, err)\n }\n \n-ErrorHandler.prototype._save = function (errorCode, data) {\n-  data = data || {}\n+ErrorHandler.prototype._save = function (errorCode, data = {}) {\n+  const {err} = data\n+\n+  if (err) {\n+    err._smErrorCode = err._smErrorCode || errorCode\n \n-  if (data.err) {\n-    data.err._smErrorCode = data.err._smErrorCode || errorCode\n+    // Re-wrap API request errors as these could expose\n+    // request/response details that the user should not\n+    // be allowed to see e.g. access tokens.\n+    // `request-promise` is the primary offender here,\n+    // but we similarly do not want others to leak too.\n+    if (\n+      err instanceof StatusCodeError ||\n+      err instanceof RequestError\n+    ) {\n+      const statusCode = err.statusCode || err.code\n \n-    return data.err\n+      return new ApiError(err.message, statusCode, err._smErrorCode)\n+    }\n+\n+    return err\n   }\n \n   let payload = {\n@@ -72,3 +102,5 @@ module.exports = function () {\n module.exports.getInstance = function () {\n   return errorHandler\n }\n+\n+module.exports.ApiError = ApiError"
    },
    {
      "sha": "8a836263f1d74de040087b5217425a4247f89657",
      "filename": "lib/GitHub.js",
      "status": "modified",
      "additions": 194,
      "deletions": 156,
      "changes": 350,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/GitHub.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/GitHub.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/lib/GitHub.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,169 +1,207 @@\n 'use strict'\n \n-const path = require('path')\n-const config = require(path.join(__dirname, '/../config'))\n+const config = require('../config')\n const errorHandler = require('./ErrorHandler')\n-const GitHubApi = require('github')\n-const request = require('request-promise-native')\n-const yaml = require('js-yaml')\n-\n-const GitHub = function (options) {\n-  this.options = options || {}\n-\n-  this.api = new GitHubApi({\n-    debug: config.get('env') === 'development',\n-    protocol: 'https',\n-    host: 'api.github.com',\n-    pathPrefix: '',\n-    headers: {\n-      'user-agent': 'Staticman agent'\n-    },\n-    timeout: 5000,\n-    Promise: Promise\n-  })\n-}\n-\n-GitHub.prototype.authenticateWithCode = function ({\n-  code,\n-  clientId,\n-  clientSecret\n-} = {}) {\n-  return request({\n-    headers: {\n-      'Accept': 'application/json'\n-    },\n-    json: true,\n-    method: 'POST',\n-    uri: `https://github.com/login/oauth/access_token?client_id=${clientId}&client_secret=${clientSecret}&code=${code}`\n-  }).then(response => {\n-    this.api.authenticate({\n-      type: 'token',\n-      token: response.access_token\n+const githubApi = require('@octokit/rest')\n+const GitService = require('./GitService')\n+const jsonwebtoken = require('jsonwebtoken')\n+const Review = require('./models/Review')\n+const User = require('./models/User')\n+\n+const normalizeResponse = ({data}) => data\n+\n+class GitHub extends GitService {\n+  constructor (options = {}) {\n+    super(options.username, options.repository, options.branch)\n+\n+    this.api = githubApi({\n+      debug: config.get('env') === 'development',\n+      baseUrl: config.get('githubBaseUrl'),\n+      headers: {\n+        'user-agent': 'Staticman agent'\n+      },\n+      timeout: 5000\n     })\n \n-    return response.access_token\n-  }).catch(err => { // eslint-disable-line handle-callback-err\n-    return Promise.reject(errorHandler('GITHUB_AUTH_FAILED'))\n-  })\n-}\n-\n-GitHub.prototype.authenticateWithToken = function (token, type) {\n-  type = type || 'oauth'\n-\n-  this.api.authenticate({\n-    type,\n-    token\n-  })\n-}\n-\n-GitHub.prototype.readFile = function (path, getFullResponse) {\n-  const extension = path.split('.').pop()\n-\n-  return this.api.repos.getContent({\n-    user: this.options.username,\n-    repo: this.options.repository,\n-    path,\n-    ref: this.options.branch\n-  }).then(res => {\n-    let content = Buffer.from(res.content, 'base64').toString()\n-\n-    try {\n-      switch (extension) {\n-        case 'yml':\n-        case 'yaml':\n-          content = yaml.safeLoad(content, 'utf8')\n-\n-          break\n-\n-        case 'json':\n-          content = JSON.parse(content)\n-\n-          break\n-      }\n-\n-      return getFullResponse ? {\n-        content: content,\n-        file: {\n-          content: res.content\n-        }\n-      } : content\n-    } catch (err) {\n-      let errorData = {\n-        err\n-      }\n-\n-      if (err.message) {\n-        errorData.data = err.message\n-      }\n-\n-      return Promise.reject(errorHandler('PARSING_ERROR', errorData))\n+    const isAppAuth = config.get('githubAppID') &&\n+      config.get('githubPrivateKey')\n+    const isLegacyAuth = config.get('githubToken') &&\n+      ['1', '2'].includes(options.version)\n+\n+    this.authentication = Promise.resolve()\n+\n+    if (options.oauthToken) {\n+      this.api.authenticate({\n+        type: 'oauth',\n+        token: options.oauthToken\n+      })\n+    } else if (isLegacyAuth) {\n+      this.api.authenticate({\n+        type: 'token',\n+        token: config.get('githubToken')\n+      })\n+    } else if (isAppAuth) {\n+      this.authentication = this._authenticate(\n+        options.username,\n+        options.repository\n+      )\n+    } else {\n+      throw new Error('Require an `oauthToken` or `token` option')\n     }\n-  }).catch(err => {\n-    return Promise.reject(errorHandler('GITHUB_READING_FILE', {err}))\n-  })\n-}\n+  }\n+\n+  _authenticate (username, repository) {\n+    const now = Math.floor(Date.now() / 1000)\n+    const payload = {\n+      iat: now,\n+      exp: now + 60,\n+      iss: config.get('githubAppID')\n+    }\n+    const bearer = jsonwebtoken.sign(payload, config.get('githubPrivateKey'), {\n+      algorithm: 'RS256'\n+    })\n \n-GitHub.prototype.writeFile = function (filePath, data, branch, commitTitle) {\n-  branch = branch || this.options.branch\n-  commitTitle = commitTitle || 'Add Staticman file'\n-\n-  return this.api.repos.createFile({\n-    user: this.options.username,\n-    repo: this.options.repository,\n-    path: filePath,\n-    content: Buffer.from(data).toString('base64'),\n-    message: commitTitle,\n-    branch: branch\n-  }).catch(err => {\n-    try {\n-      const message = err && err.message\n-\n-      if (message) {\n-        const parsedError = JSON.parse(message)\n-\n-        if (\n-          parsedError &&\n-          parsedError.message &&\n-          parsedError.message.includes('\"sha\" wasn\\'t supplied')\n-        ) {\n-          return Promise.reject(errorHandler('GITHUB_FILE_ALREADY_EXISTS', {err}))\n-        }\n-      }\n-    } catch (err) {} // eslint-disable-line no-empty\n-\n-    return Promise.reject(errorHandler('GITHUB_WRITING_FILE', {err}))\n-  })\n-}\n+    this.api.authenticate({\n+      type: 'app',\n+      token: bearer\n+    })\n \n-GitHub.prototype.writeFileAndSendPR = function (filePath, data, branch, commitTitle, commitBody) {\n-  commitTitle = commitTitle || 'Add Staticman file'\n-  commitBody = commitBody || ''\n-\n-  return this.api.repos.getBranch({\n-    user: this.options.username,\n-    repo: this.options.repository,\n-    branch: this.options.branch\n-  }).then(res => {\n-    return this.api.gitdata.createReference({\n-      user: this.options.username,\n-      repo: this.options.repository,\n-      ref: 'refs/heads/' + branch,\n-      sha: res.commit.sha\n+    return this.api.apps.findRepoInstallation({\n+      owner: username,\n+      repo: repository\n+    }).then(({data}) => {\n+      return this.api.apps.createInstallationToken({\n+        installation_id: data.id\n+      })\n+    }).then(({data}) => {\n+      this.api.authenticate({\n+        type: 'token',\n+        token: data.token\n+      })\n     })\n-  }).then(res => {\n-    return this.writeFile(filePath, data, branch, commitTitle)\n-  }).then(res => {\n-    return this.api.pullRequests.create({\n-      user: this.options.username,\n-      repo: this.options.repository,\n-      title: commitTitle,\n+  }\n+\n+  _pullFile (filePath, branch) {\n+    return this.authentication.then(() => this.api.repos.getContents({\n+      owner: this.username,\n+      repo: this.repository,\n+      path: filePath,\n+      ref: branch\n+    }))\n+      .then(normalizeResponse)\n+      .catch(err => Promise.reject(errorHandler('GITHUB_READING_FILE', {err})))\n+  }\n+\n+  _commitFile (filePath, content, commitMessage, branch) {\n+    return this.authentication.then(() => this.api.repos.createFile({\n+      owner: this.username,\n+      repo: this.repository,\n+      path: filePath,\n+      message: commitMessage,\n+      content,\n+      branch\n+    }))\n+      .then(normalizeResponse)\n+  }\n+\n+  writeFile (filePath, data, targetBranch, commitTitle) {\n+    return super.writeFile(filePath, data, targetBranch, commitTitle)\n+      .catch(err => {\n+        try {\n+          const message = err && err.message\n+\n+          if (message) {\n+            const parsedError = JSON.parse(message)\n+\n+            if (\n+              parsedError &&\n+              parsedError.message &&\n+              parsedError.message.includes('\"sha\" wasn\\'t supplied')\n+            ) {\n+              return Promise.reject(errorHandler('GITHUB_FILE_ALREADY_EXISTS', {err}))\n+            }\n+          }\n+        } catch (err) {} // eslint-disable-line no-empty\n+\n+        return Promise.reject(errorHandler('GITHUB_WRITING_FILE', {err}))\n+      })\n+  }\n+\n+  getBranchHeadCommit (branch) {\n+    return this.authentication.then(() => this.api.repos.getBranch({\n+      owner: this.username,\n+      repo: this.repository,\n+      branch\n+    }))\n+      .then(res => res.data.commit.sha)\n+  }\n+\n+  createBranch (branch, sha) {\n+    return this.authentication.then(() => this.api.git.createRef({\n+      owner: this.username,\n+      repo: this.repository,\n+      ref: `refs/heads/${branch}`,\n+      sha\n+    }))\n+      .then(normalizeResponse)\n+  }\n+\n+  deleteBranch (branch) {\n+    return this.authentication.then(() => this.api.git.deleteRef({\n+      owner: this.username,\n+      repo: this.repository,\n+      ref: `heads/${branch}`\n+    }))\n+  }\n+\n+  createReview (reviewTitle, branch, reviewBody) {\n+    return this.authentication.then(() => this.api.pullRequests.create({\n+      owner: this.username,\n+      repo: this.repository,\n+      title: reviewTitle,\n       head: branch,\n-      base: this.options.branch,\n-      body: commitBody\n-    })\n-  }).catch(err => {\n-    return Promise.reject(errorHandler('GITHUB_CREATING_PR', {err}))\n-  })\n+      base: this.branch,\n+      body: reviewBody\n+    }))\n+      .then(normalizeResponse)\n+  }\n+\n+  getReview (reviewId) {\n+    return this.authentication.then(() => this.api.pullRequests.get({\n+      owner: this.username,\n+      repo: this.repository,\n+      number: reviewId\n+    }))\n+      .then(normalizeResponse)\n+      .then(({base, body, head, merged, state, title}) =>\n+        new Review(\n+          title,\n+          body,\n+          (merged && state === 'closed') ? 'merged' : state,\n+          head.ref,\n+          base.ref\n+        )\n+      )\n+  }\n+\n+  readFile (filePath, getFullResponse) {\n+    return super.readFile(filePath, getFullResponse)\n+      .catch(err => Promise.reject(errorHandler('GITHUB_READING_FILE', {err})))\n+  }\n+\n+  writeFileAndSendReview (filePath, data, branch, commitTitle, reviewBody) {\n+    return super.writeFileAndSendReview(filePath, data, branch, commitTitle, reviewBody)\n+      .catch(err => Promise.reject(errorHandler('GITHUB_CREATING_PR', {err})))\n+  }\n+\n+  getCurrentUser () {\n+    return this.authentication.then(() => this.api.users.getAuthenticated({}))\n+      .then(normalizeResponse)\n+      .then(({login, email, avatar_url, name, bio, company, blog}) =>\n+        new User('github', login, email, name, avatar_url, bio, blog, company)\n+      )\n+      .catch(err => Promise.reject(errorHandler('GITHUB_GET_USER', {err})))\n+  }\n }\n \n module.exports = GitHub"
    },
    {
      "sha": "26d55d5d2631ec308b675d20056db9c1d243bd67",
      "filename": "lib/GitLab.js",
      "status": "added",
      "additions": 120,
      "deletions": 0,
      "changes": 120,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/GitLab.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/GitLab.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/lib/GitLab.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,120 @@\n+'use strict'\n+\n+const config = require('../config')\n+const errorHandler = require('./ErrorHandler')\n+const GitLabApi = require('gitlab/dist/es5').default\n+const GitService = require('./GitService')\n+const Review = require('./models/Review')\n+const User = require('./models/User')\n+\n+class GitLab extends GitService {\n+  constructor (options = {}) {\n+    super(options.username, options.repository, options.branch)\n+\n+    const token = config.get('gitlabToken')\n+\n+    if (options.oauthToken) {\n+      this.api = new GitLabApi({\n+        url: config.get('gitlabBaseUrl'),\n+        oauthToken: options.oauthToken\n+      })\n+    } else if (token) {\n+      this.api = new GitLabApi({\n+        url: config.get('gitlabBaseUrl'),\n+        token\n+      })\n+    } else {\n+      throw new Error('Require an `oauthToken` or `token` option')\n+    }\n+  }\n+\n+  get repositoryId () {\n+    if (this.username && this.repository) {\n+      return `${this.username}/${this.repository}`\n+    }\n+\n+    return ''\n+  }\n+\n+  _pullFile (path, branch) {\n+    return this.api.RepositoryFiles.show(this.repositoryId, path, branch)\n+      .catch(err => Promise.reject(errorHandler('GITLAB_READING_FILE', {err})))\n+  }\n+\n+  _commitFile (filePath, content, commitMessage, branch) {\n+    return this.api.RepositoryFiles.create(this.repositoryId, filePath, branch, {\n+      content,\n+      commit_message: commitMessage,\n+      encoding: 'base64'\n+    })\n+  }\n+\n+  getBranchHeadCommit (branch) {\n+    return this.api.Branches.show(this.repositoryId, branch)\n+      .then(res => res.commit.id)\n+  }\n+\n+  createBranch (branch, sha) {\n+    return this.api.Branches.create(this.repositoryId, branch, sha)\n+  }\n+\n+  deleteBranch (branch) {\n+    return this.api.Branches.remove(this.repositoryId, branch)\n+  }\n+\n+  createReview (reviewTitle, branch, reviewBody) {\n+    return this.api.MergeRequests.create(this.repositoryId, branch, this.branch, reviewTitle, {\n+      description: reviewBody,\n+      remove_source_branch: true\n+    })\n+  }\n+\n+  getReview (reviewId) {\n+    return this.api.MergeRequests.show(this.repositoryId, reviewId)\n+      .then(({\n+          description: body,\n+          source_branch: sourceBranch,\n+          target_branch: targetBranch,\n+          state,\n+          title\n+        }) => new Review(\n+          title,\n+          body,\n+          state,\n+          sourceBranch,\n+          targetBranch\n+        )\n+      )\n+  }\n+\n+  readFile (filePath, getFullResponse) {\n+    return super.readFile(filePath, getFullResponse)\n+      .catch(err => Promise.reject(errorHandler('GITLAB_READING_FILE', {err})))\n+  }\n+\n+  writeFile (filePath, data, targetBranch, commitTitle) {\n+    return super.writeFile(filePath, data, targetBranch, commitTitle)\n+      .catch(err => {\n+        if (err.error && err.error.message === 'A file with this name already exists') {\n+          return Promise.reject(errorHandler('GITLAB_FILE_ALREADY_EXISTS', {err}))\n+        }\n+\n+        return Promise.reject(errorHandler('GITLAB_WRITING_FILE', {err}))\n+      })\n+  }\n+\n+  writeFileAndSendReview (filePath, data, branch, commitTitle, reviewBody) {\n+    return super.writeFileAndSendReview(filePath, data, branch, commitTitle, reviewBody)\n+      .catch(err => Promise.reject(errorHandler('GITLAB_CREATING_PR', {err})))\n+  }\n+\n+  getCurrentUser () {\n+    return this.api.Users.current()\n+      .then(({username, email, name, avatar_url, bio, website_url, organisation}) =>\n+        new User('gitlab', username, email, name, avatar_url, bio, website_url, organisation)\n+      )\n+      .catch(err => Promise.reject(errorHandler('GITLAB_GET_USER', {err})))\n+  }\n+}\n+\n+module.exports = GitLab"
    },
    {
      "sha": "5f0da81223437ac7bb61756a0ea9ab939624c042",
      "filename": "lib/GitService.js",
      "status": "added",
      "additions": 97,
      "deletions": 0,
      "changes": 97,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/GitService.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/GitService.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/lib/GitService.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,97 @@\n+'use strict'\n+\n+const errorHandler = require('./ErrorHandler')\n+const yaml = require('js-yaml')\n+\n+class GitService {\n+  constructor (username, repository, branch) {\n+    this.username = username\n+    this.repository = repository\n+    this.branch = branch\n+  }\n+\n+  _pullFile (filePath, branch) {\n+    throw new Error('Abstract method `_pullFile` should be implemented')\n+  }\n+\n+  _commitFile (filePath, contents, commitTitle, branch) {\n+    throw new Error('Abstract method `_commitFile` should be implemented')\n+  }\n+\n+  getBranchHeadCommit (branch) {\n+    throw new Error('Abstract method `getBranchHeadCommit` should be implemented')\n+  }\n+\n+  createBranch (branch, sha) {\n+    throw new Error('Abstract method `createBranch` should be implemented')\n+  }\n+\n+  deleteBranch (branch) {\n+    throw new Error('Abstract method `deleteBranch` should be implemented')\n+  }\n+\n+  createReview (commitTitle, branch, reviewBody) {\n+    throw new Error('Abstract method `createReview` should be implemented')\n+  }\n+\n+  getReview (reviewId) {\n+    throw new Error('Abstract method `getReview` should be implemented')\n+  }\n+\n+  getCurrentUser () {\n+    throw new Error('Abstract method `getCurrentUser` should be implemented')\n+  }\n+\n+  readFile (path, getFullResponse) {\n+    const extension = path.split('.').pop()\n+\n+    return this._pullFile(path, this.branch).then(res => {\n+      let content = Buffer.from(res.content, 'base64').toString()\n+\n+      try {\n+        switch (extension) {\n+          case 'yml':\n+          case 'yaml':\n+            content = yaml.safeLoad(content, 'utf8')\n+\n+            break\n+\n+          case 'json':\n+            content = JSON.parse(content)\n+\n+            break\n+        }\n+\n+        return getFullResponse ? {\n+          content: content,\n+          file: {\n+            content: res.content\n+          }\n+        } : content\n+      } catch (err) {\n+        let errorData = {\n+          err\n+        }\n+\n+        if (err.message) {\n+          errorData.data = err.message\n+        }\n+\n+        return Promise.reject(errorHandler('PARSING_ERROR', errorData))\n+      }\n+    })\n+  }\n+\n+  writeFile (filePath, data, branch = this.branch, commitTitle = 'Add Staticman file') {\n+    return this._commitFile(filePath, Buffer.from(data).toString('base64'), commitTitle, branch)\n+  }\n+\n+  writeFileAndSendReview (filePath, data, branch, commitTitle = 'Add Staticman file', reviewBody = '') {\n+    return this.getBranchHeadCommit(this.branch)\n+      .then(sha => this.createBranch(branch, sha))\n+      .then(() => this.writeFile(filePath, data, branch, commitTitle))\n+      .then(() => this.createReview(commitTitle, branch, reviewBody))\n+  }\n+}\n+\n+module.exports = GitService"
    },
    {
      "sha": "ce5940556e3382d2fa4d2301a371e6c02e0b58b1",
      "filename": "lib/GitServiceFactory.js",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/GitServiceFactory.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/GitServiceFactory.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/lib/GitServiceFactory.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,13 @@\n+'use strict'\n+\n+const GitLab = require('./GitLab')\n+const GitHub = require('./GitHub')\n+\n+module.exports.create = (service, options) => {\n+  switch (service) {\n+    case 'gitlab':\n+      return new GitLab(options)\n+    default:\n+      return new GitHub(options)\n+  }\n+}"
    },
    {
      "sha": "96f6f6f1eef799492b2142842c64975c840a4e75",
      "filename": "lib/OAuth.js",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/OAuth.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/OAuth.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/lib/OAuth.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,49 @@\n+'use strict'\n+\n+const config = require('../config')\n+const request = require('request-promise')\n+const errorHandler = require('./ErrorHandler')\n+\n+const requestGitHubAccessToken = (code, clientId, clientSecret, redirectUri) => {\n+  return request({\n+    headers: {\n+      'Accept': 'application/json'\n+    },\n+    json: true,\n+    method: 'POST',\n+    uri: config.get('githubAccessTokenUri'),\n+    qs: {\n+      code,\n+      client_id: clientId,\n+      client_secret: clientSecret,\n+      redirect_uri: redirectUri\n+    }\n+  })\n+    .then(res => res.access_token)\n+    .catch(err => Promise.reject(errorHandler('GITHUB_AUTH_FAILED', {err}))) // eslint-disable-line handle-callback-err\n+}\n+\n+const requestGitLabAccessToken = (code, clientId, clientSecret, redirectUri) => {\n+  return request({\n+    headers: {\n+      'Accept': 'application/json'\n+    },\n+    json: true,\n+    method: 'POST',\n+    uri: config.get('gitlabAccessTokenUri'),\n+    qs: {\n+      code,\n+      client_id: clientId,\n+      client_secret: clientSecret,\n+      grant_type: 'authorization_code',\n+      redirect_uri: redirectUri\n+    }\n+  })\n+    .then(res => res.access_token)\n+    .catch(err => Promise.reject(errorHandler('GITLAB_AUTH_FAILED', {err}))) // eslint-disable-line handle-callback-err\n+}\n+\n+module.exports = {\n+  requestGitHubAccessToken,\n+  requestGitLabAccessToken\n+}"
    },
    {
      "sha": "893b54034e39e860087c98d732b6c6fa433e4bb7",
      "filename": "lib/Staticman.js",
      "status": "modified",
      "additions": 87,
      "deletions": 38,
      "changes": 125,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/Staticman.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/Staticman.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/lib/Staticman.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,41 +1,50 @@\n 'use strict'\n \n const akismetApi = require('akismet')\n-const path = require('path')\n-const config = require(path.join(__dirname, '/../config'))\n+const config = require('../config')\n const errorHandler = require('./ErrorHandler')\n-const GitHub = require('./GitHub')\n+const gitFactory = require('./GitServiceFactory')\n const markdownTable = require('markdown-table')\n const moment = require('moment')\n-const md5 = require('md5')\n const Mailgun = require('mailgun-js')\n const NodeRSA = require('node-rsa')\n const objectPath = require('object-path')\n const RSA = require('./RSA')\n-const SiteConfig = require(path.join(__dirname, '/../siteConfig'))\n+const SiteConfig = require('../siteConfig')\n const slugify = require('slug')\n const SubscriptionsManager = require('./SubscriptionsManager')\n-const uuid = require('node-uuid')\n+const Transforms = require('./Transforms')\n+const uuidv1 = require('uuid/v1')\n const yaml = require('js-yaml')\n \n const Staticman = function (parameters) {\n   this.parameters = parameters\n \n-  // Initialise GitHub API\n-  this.github = new GitHub({\n-    username: this.parameters.username,\n-    repository: this.parameters.repository,\n-    branch: this.parameters.branch\n-  })\n+  const {\n+    branch,\n+    repository,\n+    service,\n+    username,\n+    version\n+  } = parameters\n+\n+  // Initialise the Git service API\n+  this.git = gitFactory.create(service, {\n+    branch,\n+    repository,\n+    username,\n+    version\n+  })  \n \n   // Generate unique id\n-  this.uid = uuid.v1()\n+  this.uid = uuidv1()\n \n-  // Initialise RSA\n   this.rsa = new NodeRSA()\n   this.rsa.importKey(config.get('rsaPrivateKey'))\n }\n \n+Staticman.prototype._transforms = Transforms\n+\n Staticman.prototype._applyInternalFields = function (data) {\n   let internalFields = {\n     _id: this.uid\n@@ -66,9 +75,11 @@ Staticman.prototype._applyGeneratedFields = function (data) {\n \n           break\n \n+        // TODO: Remove 'github' when v2 API is no longer supported\n         case 'github':\n-          if (this.githubUser && typeof options.property === 'string') {\n-            data[field] = objectPath.get(this.githubUser, options.property)\n+        case 'user':\n+          if (this.gitUser && typeof options.property === 'string') {\n+            data[field] = objectPath.get(this.gitUser, options.property)\n           }\n \n           break\n@@ -103,9 +114,15 @@ Staticman.prototype._applyTransforms = function (fields) {\n   Object.keys(transforms).forEach(field => {\n     if (!fields[field]) return\n \n-    if (transforms[field] === 'md5') {\n-      fields[field] = md5(fields[field])\n-    }\n+    let transformNames = [].concat(transforms[field])\n+\n+    transformNames.forEach(transformName => {\n+      let transformFn = this._transforms[transformName]\n+\n+      if (transformFn) {\n+        fields[field] = transformFn(fields[field])\n+      }\n+    })\n   })\n \n   return Promise.all(queue).then((results) => {\n@@ -140,7 +157,40 @@ Staticman.prototype._checkForSpam = function (fields) {\n   })\n }\n \n-Staticman.prototype._checkGithubAuth = function () {\n+Staticman.prototype._checkAuth = function () {\n+  // TODO: Remove when v2 API is no longer supported\n+  if (this.parameters.version === '2') {\n+    return this._checkAuthV2()\n+  }\n+\n+  if (!this.siteConfig.get('auth.required')) {\n+    return Promise.resolve(false)\n+  }\n+\n+  if (!this.options['auth-token']) {\n+    return Promise.reject(errorHandler('AUTH_TOKEN_MISSING'))\n+  }\n+\n+  const oauthToken = RSA.decrypt(this.options['auth-token'])\n+\n+  if (!oauthToken) {\n+    return Promise.reject(errorHandler('AUTH_TOKEN_INVALID'))\n+  }\n+\n+  const git = gitFactory.create(this.options['auth-type'], {\n+    oauthToken,\n+    version: this.parameters.version\n+  })\n+\n+  return git.getCurrentUser().then(user => {\n+    this.gitUser = user\n+\n+    return true\n+  })\n+}\n+\n+// TODO: Remove when v2 API is no longer supported\n+Staticman.prototype._checkAuthV2 = function () {\n   if (!this.siteConfig.get('githubAuth.required')) {\n     return Promise.resolve(false)\n   }\n@@ -149,18 +199,19 @@ Staticman.prototype._checkGithubAuth = function () {\n     return Promise.reject(errorHandler('GITHUB_AUTH_TOKEN_MISSING'))\n   }\n \n-  const token = RSA.decrypt(this.options['github-token'])\n+  const oauthToken = RSA.decrypt(this.options['github-token'])\n \n-  if (!token) {\n+  if (!oauthToken) {\n     return Promise.reject(errorHandler('GITHUB_AUTH_TOKEN_INVALID'))\n   }\n \n-  const github = new GitHub()\n-\n-  github.authenticateWithToken(token, 'token')\n+  const git = gitFactory.create('github', {\n+    oauthToken,\n+    version: this.parameters.version\n+  })\n \n-  return github.api.users.get({}).then(user => {\n-    this.githubUser = user\n+  return git.api.users.getAuthenticated({}).then(({data}) => {\n+    this.gitUser = data\n \n     return true\n   })\n@@ -230,7 +281,7 @@ Staticman.prototype._createFile = function (fields) {\n   })\n }\n \n-Staticman.prototype._generatePRBody = function (fields) {\n+Staticman.prototype._generateReviewBody = function (fields) {\n   let table = [\n     ['Field', 'Content']\n   ]\n@@ -305,7 +356,7 @@ Staticman.prototype._initialiseSubscriptions = function () {\n   })\n \n   // Initialise SubscriptionsManager\n-  const subscriptions = new SubscriptionsManager(this.parameters, this.github, mailgun)\n+  const subscriptions = new SubscriptionsManager(this.parameters, this.git, mailgun)\n \n   return subscriptions\n }\n@@ -420,10 +471,6 @@ Staticman.prototype._validateFields = function (fields) {\n   return null\n }\n \n-Staticman.prototype.authenticate = function () {\n-  this.github.authenticateWithToken(config.get('githubToken'))\n-}\n-\n Staticman.prototype.decrypt = function (encrypted) {\n   return this.rsa.decrypt(encrypted, 'utf8')\n }\n@@ -437,7 +484,7 @@ Staticman.prototype.getSiteConfig = function (force) {\n \n   if (!this.configPath) return Promise.reject(errorHandler('NO_CONFIG_PATH'))\n \n-  return this.github.readFile(this.configPath.file).then(data => {\n+  return this.git.readFile(this.configPath.file).then(data => {\n     const config = objectPath.get(data, this.configPath.path)\n     const validationErrors = this._validateConfig(config)\n \n@@ -457,8 +504,10 @@ Staticman.prototype.processEntry = function (fields, options) {\n   this.fields = Object.assign({}, fields)\n   this.options = Object.assign({}, options)\n \n+  this._initialiseGit\n+\n   return this.getSiteConfig().then(config => {\n-    return this._checkGithubAuth()\n+    return this._checkAuth()\n   }).then(() => {\n     return this._checkForSpam(fields)\n   }).then(fields => {\n@@ -495,18 +544,18 @@ Staticman.prototype.processEntry = function (fields, options) {\n     if (this.siteConfig.get('moderation')) {\n       const newBranch = 'staticman_' + this.uid\n \n-      return this.github.writeFileAndSendPR(\n+      return this.git.writeFileAndSendReview(\n         filePath,\n         data,\n         newBranch,\n         commitMessage,\n-        this._generatePRBody(fields)\n+        this._generateReviewBody(fields)\n       )\n     } else if (subscriptions && options.parent) {\n       subscriptions.send(options.parent, fields, options, this.siteConfig)\n     }\n \n-    return this.github.writeFile(\n+    return this.git.writeFile(\n       filePath,\n       data,\n       this.parameters.branch,"
    },
    {
      "sha": "9415ae79f07ca79038ff675ada03323b40cd6429",
      "filename": "lib/Transforms.js",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/Transforms.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/Transforms.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/lib/Transforms.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,13 @@\n+const md5 = require('md5')\n+\n+exports.md5 = function md5Transform (value) {\n+  return md5(value)\n+}\n+\n+exports.upcase = function upcaseTransform (value) {\n+  return String(value).toUpperCase()\n+}\n+\n+exports.downcase = function downcaseTransform (value) {\n+  return String(value).toLowerCase()\n+}"
    },
    {
      "sha": "77e4db31750e520fb0af8b492b4840e78b3ddc98",
      "filename": "lib/TypeUtils.js",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/TypeUtils.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/TypeUtils.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/lib/TypeUtils.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,11 @@\n+'use strict'\n+\n+const assertString = (value, message = `${value} is not a string`) => {\n+  if (typeof value !== 'string') {\n+    throw new TypeError(message)\n+  }\n+}\n+\n+module.exports = {\n+  assertString\n+}"
    },
    {
      "sha": "1d1e4f50232017676bdde9078931aa5148e87d10",
      "filename": "lib/models/Review.js",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/models/Review.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/models/Review.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/lib/models/Review.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,28 @@\n+'use strict'\n+\n+const {assertString} = require('../TypeUtils')\n+\n+class Review {\n+  /**\n+   * @param {string} title\n+   * @param {string} body\n+   * @param {string} state\n+   * @param {string} sourceBranch\n+   * @param {string} targetBranch\n+   */\n+  constructor (title, body, state, sourceBranch, targetBranch) {\n+    assertString(title)\n+    assertString(body)\n+    assertString(state)\n+    assertString(sourceBranch)\n+    assertString(targetBranch)\n+\n+    this.title = title\n+    this.body = body\n+    this.state = state\n+    this.sourceBranch = sourceBranch\n+    this.targetBranch = targetBranch\n+  }\n+}\n+\n+module.exports = Review"
    },
    {
      "sha": "2affe460e6912b7ea00271a6a2fa52d8f8e984b6",
      "filename": "lib/models/User.js",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/models/User.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/lib/models/User.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/lib/models/User.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,37 @@\n+'use strict'\n+\n+const {assertString} = require('../TypeUtils')\n+\n+class User {\n+  /**\n+   * @param {string} type\n+   * @param {string} username\n+   * @param {string} email\n+   * @param {string} name\n+   * @param {string=\"\"} avatarUrl\n+   * @param {string=\"\"} bio\n+   * @param {string=\"\"} siteUrl\n+   * @param {string=\"\"} organisation\n+   */\n+  constructor (type, username, email, name, avatarUrl = '', bio = '', siteUrl = '', organisation = '') {\n+    assertString(type)\n+    assertString(username)\n+    assertString(email)\n+    assertString(name)\n+    assertString(avatarUrl)\n+    assertString(bio)\n+    assertString(siteUrl)\n+    assertString(organisation)\n+\n+    this.type = type\n+    this.username = username\n+    this.email = email\n+    this.name = name\n+    this.avatarUrl = avatarUrl\n+    this.bio = bio\n+    this.siteUrl = siteUrl\n+    this.organisation = organisation\n+  }\n+}\n+\n+module.exports = User"
    },
    {
      "sha": "2155f1e5d15c91e38ac0754f4791fb5b404e9e46",
      "filename": "package-lock.json",
      "status": "added",
      "additions": 8917,
      "deletions": 0,
      "changes": 8917,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/package-lock.json",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/package-lock.json",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/package-lock.json?ref=2be29f73fa0688e02770b9f118288b6e0e617b01"
    },
    {
      "sha": "1b8e09e0de023f05037f57215cffbe8d0713dc18",
      "filename": "package.json",
      "status": "modified",
      "additions": 16,
      "deletions": 7,
      "changes": 23,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/package.json",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/package.json",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/package.json?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,14 +1,17 @@\n {\n   \"name\": \"staticman\",\n-  \"version\": \"2.0.0\",\n+  \"version\": \"3.0.0\",\n   \"description\": \"Static sites with superpowers\",\n   \"main\": \"index.js\",\n   \"scripts\": {\n     \"prestart\": \"if [ ! -d node_modules ]; then npm install; fi\",\n     \"start\": \"node index.js\",\n-    \"test\": \"standard && jest && node test/utils/coverage.js\",\n+    \"test\": \"standard && jest\",\n     \"test-dev\": \"TEST_DEV=true jest --watch\"\n   },\n+  \"engines\": {\n+    \"node\": \">=8.11.3\"\n+  },\n   \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"git+https://github.com/eduardoboucas/staticman.git\"\n@@ -21,6 +24,7 @@\n   \"homepage\": \"https://github.com/eduardoboucas/staticman#readme\",\n   \"dependencies\": {\n     \"@dadi/logger\": \"^1.3.0\",\n+    \"@octokit/rest\": \"^16.3.2\",\n     \"akismet\": \"^1.0.0\",\n     \"body-parser\": \"^1.17.x\",\n     \"bunyan-slack\": \"0.0.10\",\n@@ -29,24 +33,26 @@\n     \"express-brute\": \"^0.6.0\",\n     \"express-github-webhook\": \"^1.0.5\",\n     \"express-recaptcha\": \"^2.1.0\",\n-    \"github\": \"^3.0.0\",\n+    \"gitlab\": \"^3.5.1\",\n     \"js-yaml\": \"^3.10.0\",\n+    \"jsonwebtoken\": \"^8.4.0\",\n     \"mailgun-js\": \"^0.7.13\",\n     \"markdown-table\": \"^1.0.0\",\n     \"md5\": \"^2.1.0\",\n     \"moment\": \"^2.18.1\",\n     \"node-rsa\": \"^0.4.2\",\n-    \"node-uuid\": \"^1.4.7\",\n     \"object-path\": \"^0.11.1\",\n-    \"request-promise-native\": \"^1.0.4\",\n+    \"request-promise\": \"^4.2.2\",\n     \"sha1\": \"^1.1.1\",\n     \"slug\": \"^0.9.1\",\n-    \"universal-analytics\": \"^0.4.2\"\n+    \"universal-analytics\": \"^0.4.2\",\n+    \"uuid\": \"^3.3.2\"\n   },\n   \"devDependencies\": {\n     \"front-matter\": \"^2.1.2\",\n     \"istanbul-cobertura-badger\": \"^1.3.0\",\n-    \"jest\": \"^20.0.4\",\n+    \"jest\": \"^23.6.0\",\n+    \"lodash\": \"^4.17.10\",\n     \"nock\": \"^9.0.13\",\n     \"standard\": \"^10.0.2\"\n   },\n@@ -66,6 +72,9 @@\n     ]\n   },\n   \"standard\": {\n+    \"env\": [\n+      \"jest\"\n+    ],\n     \"ignore\": [\n       \"test/**/*\"\n     ]"
    },
    {
      "sha": "0aee859eb5196e57bdef40e0a1ce63deeace1add",
      "filename": "server.js",
      "status": "modified",
      "additions": 40,
      "deletions": 11,
      "changes": 51,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/server.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/server.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/server.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -11,7 +11,7 @@ const StaticmanAPI = function () {\n   this.controllers = {\n     connect: require('./controllers/connect'),\n     encrypt: require('./controllers/encrypt'),\n-    githubAuth: require('./controllers/githubAuth'),\n+    auth: require('./controllers/auth'),\n     handlePR: require('./controllers/handlePR'),\n     home: require('./controllers/home'),\n     process: require('./controllers/process')\n@@ -71,20 +71,30 @@ StaticmanAPI.prototype.initialiseRoutes = function () {\n     this.controllers.process\n   )\n \n+  this.server.post(\n+    '/v:version/entry/:service/:username/:repository/:branch/:property',\n+    this.bruteforce.prevent,\n+    this.requireApiVersion([3]),\n+    this.requireService(['github', 'gitlab']),\n+    this.requireParams(['fields']),\n+    this.controllers.process\n+  )\n+\n   // Route: encrypt\n   this.server.get(\n     '/v:version/encrypt/:text',\n     this.bruteforce.prevent,\n-    this.requireApiVersion([2]),\n+    this.requireApiVersion([2, 3]),\n     this.controllers.encrypt\n   )\n \n-  // Route: GitHub auth\n+  // Route: oauth\n   this.server.get(\n-    '/v:version/auth/github/:username/:repository/:branch/:property',\n+    '/v:version/auth/:service/:username/:repository/:branch/:property',\n     this.bruteforce.prevent,\n-    this.requireApiVersion([2]),\n-    this.controllers.githubAuth\n+    this.requireApiVersion([2, 3]),\n+    this.requireService(['github', 'gitlab']),\n+    this.controllers.auth\n   )\n \n   // Route: root\n@@ -111,7 +121,7 @@ StaticmanAPI.prototype.requireApiVersion = function (versions) {\n     })\n \n     if (!versionMatch) {\n-      return res.status(500).send({\n+      return res.status(400).send({\n         success: false,\n         errorCode: 'INVALID_VERSION'\n       })\n@@ -121,6 +131,21 @@ StaticmanAPI.prototype.requireApiVersion = function (versions) {\n   }\n }\n \n+StaticmanAPI.prototype.requireService = function (services) {\n+  return (req, res, next) => {\n+    const serviceMatch = services.some(service => service === req.params.service)\n+\n+    if (!serviceMatch) {\n+      return res.status(400).send({\n+        success: false,\n+        errorCode: 'INVALID_SERVICE'\n+      })\n+    }\n+\n+    return next()\n+  }\n+}\n+\n StaticmanAPI.prototype.requireParams = function (params) {\n   return function (req, res, next) {\n     let missingParams = []\n@@ -147,11 +172,15 @@ StaticmanAPI.prototype.requireParams = function (params) {\n }\n \n StaticmanAPI.prototype.start = function (callback) {\n-  const callbackFn = typeof callback === 'function'\n-    ? callback.call(this, config.get('port'))\n-    : null\n+  this.instance = this.server.listen(config.get('port'), () => {\n+    if (typeof callback === 'function') {\n+      callback(config.get('port'))\n+    }\n+  })\n+}\n \n-  this.server.listen(config.get('port'), callbackFn)\n+StaticmanAPI.prototype.close = function () {\n+  this.instance.close()\n }\n \n module.exports = StaticmanAPI"
    },
    {
      "sha": "ec83d562aace6a23220bb8186e4aa34ea8541b13",
      "filename": "siteConfig.js",
      "status": "modified",
      "additions": 40,
      "deletions": 7,
      "changes": 47,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/siteConfig.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/siteConfig.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/siteConfig.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -9,6 +9,12 @@ const schema = {\n     format: Array,\n     default: []\n   },\n+  allowedOrigins: {\n+    doc: 'When allowedOrigins is defined, only requests sent from one of the domains listed will be accepted.',\n+    docExample: 'allowedOrigins: [\"localhost\", \"eduardoboucas.com\"]',\n+    default: [],\n+    format: Array\n+  },\n   akismet: {\n     enabled: {\n       doc: 'Whether to use Akismet to check entries for spam. This requires an Akismet account to be configured in the Staticman API instance being used.',\n@@ -41,6 +47,13 @@ const schema = {\n       default: 'comment'\n     }\n   },\n+  auth: {\n+    required: {\n+      doc: 'Whether authentication is required for an entry to be accepted.',\n+      format: Boolean,\n+      default: false\n+    }\n+  },\n   branch: {\n     doc: 'Name of the branch being used within the GitHub repository.',\n     format: String,\n@@ -74,23 +87,43 @@ const schema = {\n   },\n   githubAuth: {\n     clientId: {\n-      doc: 'The client ID to the GitHub Application used for GitHub authentication.',\n+      doc: 'The client ID to the GitHub Application used for GitHub OAuth.',\n       format: 'EncryptedString',\n-      default: null,\n-      env: 'GITHUB_AUTH_CLIENT_ID'\n+      default: null\n     },\n     clientSecret: {\n-      doc: 'The client secret to the GitHub Application used for GitHub authentication.',\n+      doc: 'The client secret to the GitHub Application used for GitHub OAuth.',\n       format: 'EncryptedString',\n-      default: null,\n-      env: 'GITHUB_AUTH_CLIENT_SECRET'\n+      default: null\n+    },\n+    redirectUri: {\n+      doc: 'The URL to redirect to after authenticating with GitHub.',\n+      format: String,\n+      default: ''\n     },\n     required: {\n-      doc: 'Whether GitHub Auth is required for an entry to be accepted.',\n+      doc: 'Whether GitHub Auth is required for an entry to be accepted. This is only included for backwards compatibility with the v2 API. For the v3 API, please use the `auth.required` option instead.',\n       format: Boolean,\n       default: false\n     }\n   },\n+  gitlabAuth: {\n+    clientId: {\n+      doc: 'The client ID to the GitLab Application used for GitLab OAuth.',\n+      format: 'EncryptedString',\n+      default: null\n+    },\n+    clientSecret: {\n+      doc: 'The client secret to the GitLab Application used for GitLab OAuth.',\n+      format: 'EncryptedString',\n+      default: null\n+    },\n+    redirectUri: {\n+      doc: 'The URL to redirect to after authenticating with GitLab.',\n+      format: String,\n+      default: ''\n+    }\n+  },\n   moderation: {\n     doc: 'When set to `true`, a pull request with the data files will be created to allow site administrators to approve or reject an entry. Otherwise, entries will be pushed to `branch` immediately.',\n     format: Boolean,"
    },
    {
      "sha": "347b4e0cea1ff98cbc774a7fe2c90e47432c8b86",
      "filename": "test/acceptance/api.test.js",
      "status": "modified",
      "additions": 50,
      "deletions": 18,
      "changes": 68,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/acceptance/api.test.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/acceptance/api.test.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/acceptance/api.test.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -7,6 +7,8 @@ const request = helpers.wrappedRequest\n const sampleData = require('./../helpers/sampleData')\n const StaticmanAPI = require('./../../server')\n \n+const btoa = contents => Buffer.from(contents).toString('base64')\n+\n let server\n \n beforeAll(done => {\n@@ -17,14 +19,20 @@ beforeAll(done => {\n \n afterAll(done => {\n   server.close()\n+\n+  done()\n })\n \n describe('Connect endpoint', () => {\n   test('accepts the invitation if one is found and replies with \"OK!\"', () => {\n     const invitationId = 123\n \n-    const reqListInvititations = nock(/api\\.github\\.com/)\n-      .get(`/user/repository_invitations?access_token=${githubToken}`)\n+    const reqListInvititations = nock('https://api.github.com', {\n+      reqheaders: {\n+        authorization: `token ${githubToken}`\n+      }\n+    })\n+      .get('/user/repository_invitations')\n       .reply(200, [\n         {\n           id: invitationId,\n@@ -34,8 +42,12 @@ describe('Connect endpoint', () => {\n         }\n       ])\n \n-    const reqAcceptInvitation = nock(/api\\.github\\.com/)\n-      .patch(`/user/repository_invitations/${invitationId}?access_token=${githubToken}`)\n+    const reqAcceptInvitation = nock('https://api.github.com', {\n+      reqheaders: {\n+        authorization: `token ${githubToken}`\n+      }\n+    })\n+      .patch(`/user/repository_invitations/${invitationId}`)\n       .reply(204)\n \n     return request('/v2/connect/johndoe/foobar')\n@@ -48,8 +60,12 @@ describe('Connect endpoint', () => {\n \n   test('returns a 404 and an error message if a matching invitation is not found', () => {\n     const invitationId = 123\n-    const reqListInvititations = nock(/api\\.github\\.com/)\n-      .get(`/user/repository_invitations?access_token=${githubToken}`)\n+    const reqListInvititations = nock('https://api.github.com', {\n+      reqheaders: {\n+        authorization: `token ${githubToken}`\n+      }\n+    })\n+      .get('/user/repository_invitations')\n       .reply(200, [\n         {\n           id: invitationId,\n@@ -59,21 +75,25 @@ describe('Connect endpoint', () => {\n         }\n       ])\n \n-    const reqAcceptInvitation = nock(/api\\.github\\.com/)\n-      .patch(`/user/repository_invitations/${invitationId}?access_token=${githubToken}`)\n+    const reqAcceptInvitation = nock('https://api.github.com', {\n+      reqheaders: {\n+        authorization: `token ${githubToken}`\n+      }\n+    })\n+      .patch(`/user/repository_invitations/${invitationId}`)\n       .reply(204)\n \n     return request('/v2/connect/johndoe/foobar')\n       .catch(err => {\n         expect(reqListInvititations.isDone()).toBe(true)\n         expect(reqAcceptInvitation.isDone()).toBe(false)\n         expect(err.response.body).toBe('Invitation not found')\n-        expect(err.statusCode).toBe(404)        \n+        expect(err.statusCode).toBe(404)\n       })\n   })\n })\n \n-describe.only('Entry endpoint', () => {\n+describe('Entry endpoint', () => {\n   test('outputs a RECAPTCHA_CONFIG_MISMATCH error if reCaptcha options do not match (wrong site key)', () => {\n     const data = Object.assign({}, helpers.getParameters(), {\n       path: 'staticman.yml'\n@@ -82,8 +102,12 @@ describe.only('Entry endpoint', () => {\n     const mockConfig = sampleData.config1\n       .replace('@reCaptchaSecret@', reCaptchaSecret)\n \n-    const mockGetConfig = nock(/api\\.github\\.com/)\n-      .get(`/repos/${data.username}/${data.repository}/contents/${data.path}?ref=${data.branch}&access_token=${githubToken}`)\n+    nock('https://api.github.com', {\n+      reqheaders: {\n+        Authorization: `token ${githubToken}`\n+      }\n+    })\n+      .get(`/repos/${data.username}/${data.repository}/contents/${data.path}?ref=${data.branch}`)\n       .reply(200, {\n         type: 'file',\n         encoding: 'base64',\n@@ -113,11 +137,11 @@ describe.only('Entry endpoint', () => {\n     return request({\n       body: formData,\n       method: 'POST',\n-      uri: '/v2/entry/johndoe/foobar/master/comments',\n+      uri: `/v2/entry/${data.username}/${data.repository}/${data.branch}/${data.property}`,\n       headers: {\n         'content-type': 'application/x-www-form-urlencoded'\n       }\n-    }).catch(response => {\n+    }).catch((response) => {\n       const error = JSON.parse(response.error)\n \n       expect(error.success).toBe(false)\n@@ -134,8 +158,12 @@ describe.only('Entry endpoint', () => {\n     const mockConfig = sampleData.config1\n       .replace('@reCaptchaSecret@', helpers.encrypt(reCaptchaSecret))\n \n-    const mockGetConfig = nock(/api\\.github\\.com/)\n-      .get(`/repos/${data.username}/${data.repository}/contents/${data.path}?ref=${data.branch}&access_token=${githubToken}`)\n+    nock('https://api.github.com', {\n+      reqHeaders: {\n+        Authorization: `token ${githubToken}`\n+      }\n+    })\n+      .get(`/repos/${data.username}/${data.repository}/contents/${data.path}?ref=${data.branch}`)\n       .reply(200, {\n         type: 'file',\n         encoding: 'base64',\n@@ -183,8 +211,12 @@ describe.only('Entry endpoint', () => {\n       path: 'staticman.yml'\n     })\n \n-    const mockGetConfig = nock(/api\\.github\\.com/)\n-      .get(`/repos/${data.username}/${data.repository}/contents/${data.path}?ref=${data.branch}&access_token=${githubToken}`)\n+    const mockGetConfig = nock('https://api.github.com', {\n+      reqheaders: {\n+        Authorization: `token ${githubToken}`\n+      }\n+    })\n+      .get(`/repos/${data.username}/${data.repository}/contents/${data.path}?ref=${data.branch}`)\n       .reply(200, {\n         type: 'file',\n         encoding: 'base64',"
    },
    {
      "sha": "f4b567865f058c8244300eb10745446a16653924",
      "filename": "test/helpers/index.js",
      "status": "modified",
      "additions": 12,
      "deletions": 17,
      "changes": 29,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/helpers/index.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/helpers/index.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/helpers/index.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,9 +1,10 @@\n const CatchAllApiMock = require('./CatchAllApiMock')\n+const cloneDeep = require('lodash/cloneDeep')\n const config = require('./../../config')\n const objectPath = require('object-path')\n const markdownTable = require('markdown-table')\n const NodeRSA = require('node-rsa')\n-const request = require('request-promise-native')\n+const request = require('request-promise')\n const sampleData = require('./sampleData')\n const SiteConfig = require('./../../siteConfig')\n const yaml = require('js-yaml')\n@@ -30,10 +31,13 @@ const parameters = {\n   property: 'comments',\n   repository: 'foobar',\n   username: 'johndoe',\n-  version: 'v2'\n+  version: '3'\n }\n \n-module.exports.baseUrl = \n+const parsedConfig = yaml.safeLoad(sampleData.config1, 'utf8')\n+const siteConfig = SiteConfig(parsedConfig.comments, rsa)\n+\n+module.exports.baseUrl = ''\n \n module.exports.decrypt = text => {\n   return rsa.decrypt(text, 'utf8')\n@@ -48,19 +52,10 @@ module.exports.getCatchAllApiMock = callback => {\n }\n \n module.exports.getConfig = () => {\n-  const parsedConfig = yaml.safeLoad(sampleData.config1, 'utf8')\n-  const reCaptchaSecret = rsa.encrypt('This is a nice little secret', 'base64')\n-\n-  // For some reason, node-rsa is failing the tests if the secret is encrypted\n-  // beforehand. As a workaround, we generate a new secret when we retrieve the\n-  // config object. We can still obtain its raw value with `getRaw().\n-  parsedConfig.comments.reCaptcha.secret = reCaptchaSecret\n-\n-  const siteConfig = SiteConfig(parsedConfig.comments, rsa)\n-\n-  siteConfig.getRaw = key => objectPath.get(parsedConfig, `comments.${key}`)\n+  const config = cloneDeep(siteConfig)\n+  config.getRaw = key => objectPath.get(parsedConfig, `comments.${key}`)\n \n-  return siteConfig\n+  return config\n }\n \n module.exports.getConfigObject = () => {\n@@ -91,7 +86,7 @@ module.exports.getMockRequest = () => {\n     headers: {\n       'x-forwarded-for': '123.456.78.9'\n     },\n-    params: parameters\n+    params: Object.assign({}, parameters)\n   }\n }\n \n@@ -109,7 +104,7 @@ module.exports.getMockResponse = () => {\n   }\n }\n \n-module.exports.getParameters = () => parameters\n+module.exports.getParameters = () => Object.assign({}, parameters)\n \n module.exports.getParsedConfig = () => {\n   return yaml.safeLoad(sampleData.config1, 'utf8')"
    },
    {
      "sha": "35aab01f3a03fca465805c3c4864342684910f3e",
      "filename": "test/helpers/sampleData.js",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/helpers/sampleData.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/helpers/sampleData.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/helpers/sampleData.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -13,6 +13,9 @@ comments:\n   # listed will be accepted.\n   allowedOrigins: [\"localhost\", \"eduardoboucas.com\"]\n \n+  auth:\n+    required: false\n+\n   # (*) REQUIRED\n   #\n   # Name of the branch being used. Must match the one sent in the URL of the\n@@ -66,11 +69,17 @@ comments:\n   reCaptcha:\n     enabled: true\n     siteKey: \"123456789\"\n-    secret: \"@reCaptchaSecret@\"\n+    secret: \"DTK5WxH6117ez/piZpmkvyAtieYWlu60+SApt9hFRMfNs4WBC0mvRtsW9Jmhz4fJYDcIX18wKHV6KYh3PXYN3d/pozCskwwkuJq0qHJQHrTycjgrGS5mti4QgrMYP0rq2p5hMTgPL/UK0lwkxuRRcxnvxqRlkZHMv6o/CUkZOVnkJ8lGqWa8uJAEIv/9rd6Bm12+F1ezLJZ+LogebHEDpyJWz9kwum9bFBQqZbun+43rxzJBQmAGQEWZ4hshY2aLSAyBpr/pjSDUwRGtwoBh8Ee1qKNuMzY0XVUOn+dcHrkpQotmKL4TMFQN4slo/lVKmfXW5N6t9vdP/lGmIiVXdw==\"\n \n   githubAuth:\n     clientId: \"L4M3LIshioHbe3j+vMxEbGlCGDhyIcQF2jhmVOUp8DqC+RqNgvZSQp7qYYmjPPoyjFCVOsu5aHwcD1FkMlEaxLTqYOYUeq49Wb6uxePTBycmW14JI6fiM/PYTm6nqKH5fB/7wnohVgK+/1IVAF6DA7UAs0Ju+srlnqEbn30f84sySOeR+V6t9aF7OiF9DsGedsTfVrfj8opptwQe7nycsxQaTxvmwgQgP9FrDYH+PGy/3ThpQsPj+/Mnvbnn7PMJEJlZFtGZsMWWcE2anJlJ7fbHKNPNNg6l2qosh6/kMTrloCU6wA67ouai0OFiNR+gyQaqUiL3NMgN4k39nZuwOg==\"\n-    clientSecret: \"0anSY5FBW+YF8BuFRRYxKX0yjDGU8/HhdirQMh+xFOEIvBQ8n/PdYi3qv2p4ngpFo5gb3PY2W6oWvHYLGgbFFse3YvzP5cbKRG0BN90hanlpVwmtAsapC7UepvOOUmNCRKHJ/pYICYcleUX/xGRiTugl9rcVw1MLg7kxcCuEMWcsBc9qCA9YHRcN3ucP+rT9x/2hLMiUmv3glYYZNgyQ3x1iqpOuTAIMeIkxMQo83vxGR57fpAx4+Yn1+hALhSl3sGaesUZhY9Py/OEZDFVWiN9RvrM4ND0IcfqyaQ4DuRPu2g8Es5fbmgSQoqkNPOcHT2+40pDbz3FPgz6QJou+pQ==\"`\n+    clientSecret: \"0anSY5FBW+YF8BuFRRYxKX0yjDGU8/HhdirQMh+xFOEIvBQ8n/PdYi3qv2p4ngpFo5gb3PY2W6oWvHYLGgbFFse3YvzP5cbKRG0BN90hanlpVwmtAsapC7UepvOOUmNCRKHJ/pYICYcleUX/xGRiTugl9rcVw1MLg7kxcCuEMWcsBc9qCA9YHRcN3ucP+rT9x/2hLMiUmv3glYYZNgyQ3x1iqpOuTAIMeIkxMQo83vxGR57fpAx4+Yn1+hALhSl3sGaesUZhY9Py/OEZDFVWiN9RvrM4ND0IcfqyaQ4DuRPu2g8Es5fbmgSQoqkNPOcHT2+40pDbz3FPgz6QJou+pQ==\"\n+    redirectUri: \"https://my-test-site.com\"\n+    \n+  gitlabAuth:\n+    clientId: \"Rr9d1XmVVMe8ogldH6rBtdGhf49c29ldwcBVsiMn6DLRAiYWmHY08eKC6xLnP6mXwMe/qCHJ6JMKURDODL8Yjm+nQf09zynkIRCr4J7tRHh4bPAYXPG+W1+TK7l8QD4gC+WXamxJiggwGCaDtNylI1QQhbKtevv7n/T+Iq98rBj8SLxxpi3qR0oZeN/zsoQsDYgzZ+HgvA3hY+5H897ijx1oBjoTsfI1Sfx8Qqix/QLZoXorOUJyEo+83WWvTEgo8X3OyFbXGZ758Kw6A7fcHxu8oVAjDvtFJFiwrDb4iBz9rffx7llZXjkcjzYzfwFcjG7mzZnfYgn9WcCwO7zlsA==\"\n+    clientSecret: \"1zzjCrOZQ9dVs1p/WLgT8Lvwez3EKd1tp3D+7P5uGlEdqP1RN7kQvcaqOmOpm5SIY6g+yKJQGZq9G/IqUoKdsZDhA2VGYGXVzETU6eB48AL0OXlFumhjzJoGAXpnqDWzfevglkVuAkivBv6o9S1r/FL1GydwlRwWcYU6NNJjjkB04A00B4s0J7FRR3VFRxpJqDznHgXgT32E2+F3s6enh9/aErqi9uqn+iVtw7gvbd9PN1ejlo95R3BVNKUxNi2Dn4BbsH3MjQG4DyuzX8BiS9Nb+Xt+CwLygTT/i4C5Aj+KkMjAEiYOyttFbk3jkvYVXJ1XtW+taloBVPYCHgDzmg==\"\n+    redirectUri: \"https://my-test-site-2.com\"`\n \n module.exports.config2 = `{\n   \"comments\": {"
    },
    {
      "sha": "61e2fdfef3bdd59a5bef22774950bcf9bcb3075c",
      "filename": "test/unit/controllers/auth.test.js",
      "status": "added",
      "additions": 310,
      "deletions": 0,
      "changes": 310,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/controllers/auth.test.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/controllers/auth.test.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/unit/controllers/auth.test.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,310 @@\n+const auth = require('../../../controllers/auth')\n+const helpers = require('./../../helpers')\n+const nock = require('nock')\n+const Staticman = require('./../../../lib/Staticman')\n+const User = require('../../../lib/models/User')\n+\n+Staticman.prototype.getSiteConfig = function () {\n+  return Promise.resolve(helpers.getConfig())\n+}\n+\n+let req\n+let res\n+\n+beforeEach(() => {\n+  req = helpers.getMockRequest()\n+  res = helpers.getMockResponse()\n+})\n+\n+describe('Auth controller', () => {\n+  describe('GitHub', () => {\n+    test('authenticates to GitHub with the given code and returns the authenticated user', () => {\n+      const mockAccessToken = 'qwertyuiop'\n+      const mockCode = '1q2w3e4r'\n+      const mockUser = {\n+        login: 'johndoe',\n+        name: 'John Doe',\n+        email: 'johndoe@test.com'\n+      }\n+\n+      const siteConfig = helpers.getConfig()\n+\n+      nock(/github\\.com/)\n+        .post('/login/oauth/access_token')\n+        .query({\n+          client_id: siteConfig.get('githubAuth.clientId'),\n+          client_secret: siteConfig.get('githubAuth.clientSecret'),\n+          code: mockCode,\n+          redirect_uri: siteConfig.get('githubAuth.redirectUri')\n+        })\n+        .reply(200, {\n+          access_token: mockAccessToken\n+        })\n+\n+      nock(/github\\.com/)\n+        .get('/user')\n+        .query({\n+          access_token: mockAccessToken\n+        })\n+        .reply(200, mockUser)\n+\n+      const reqWithQuery = Object.assign({}, req, {\n+        query: {\n+          code: mockCode\n+        }\n+      })\n+\n+      return auth(reqWithQuery, res).then(result => {\n+        expect(res.send).toHaveBeenCalledTimes(1)\n+        expect(helpers.decrypt(res.send.mock.calls[0][0].accessToken)).toBe(mockAccessToken)\n+        expect(res.send.mock.calls[0][0].user)\n+          .toEqual(new User('github', mockUser.login, mockUser.email, mockUser.name))\n+      })\n+    })\n+\n+    test('authenticates to GitHub with the given code and returns the original GitHub user when using v2 API', () => {\n+      const mockAccessToken = 'qwertyuiop'\n+      const mockCode = '1q2w3e4r'\n+      const mockUser = {\n+        login: 'johndoe'\n+      }\n+\n+      const siteConfig = helpers.getConfig()\n+\n+      nock(/github\\.com/)\n+        .post('/login/oauth/access_token')\n+        .query({\n+          client_id: siteConfig.get('githubAuth.clientId'),\n+          client_secret: siteConfig.get('githubAuth.clientSecret'),\n+          code: mockCode,\n+          redirect_uri: siteConfig.get('githubAuth.redirectUri')\n+        })\n+        .reply(200, {\n+          access_token: mockAccessToken\n+        })\n+\n+      nock(/github\\.com/)\n+        .get('/user')\n+        .query({\n+          access_token: mockAccessToken\n+        })\n+        .reply(200, mockUser)\n+\n+      const reqWithQuery = Object.assign({}, req, {\n+        params: {\n+          service: 'github',\n+          version: '2'\n+        },\n+        query: {\n+          code: mockCode\n+        }\n+      })\n+\n+      return auth(reqWithQuery, res).then(result => {\n+        expect(res.send).toHaveBeenCalledTimes(1)\n+        expect(helpers.decrypt(res.send.mock.calls[0][0].accessToken)).toBe(mockAccessToken)\n+        expect(res.send.mock.calls[0][0].user).toEqual(mockUser)\n+      })\n+    })\n+\n+    test('returns a 401 response when unable to get an access token from GitHub', () => {\n+      const mockCode = '1q2w3e4r'\n+      const siteConfig = helpers.getConfig()\n+\n+      nock(/github\\.com/)\n+        .post('/login/oauth/access_token')\n+        .query({\n+          client_id: siteConfig.get('githubAuth.clientId'),\n+          client_secret: siteConfig.get('githubAuth.clientSecret'),\n+          code: mockCode,\n+          redirect_uri: siteConfig.get('githubAuth.redirectUri')\n+        })\n+        .reply(401, {\n+          error: 'invalid_code'\n+        })\n+\n+      const reqWithQuery = Object.assign({}, req, {\n+        params: {\n+          service: 'github'\n+        },\n+        query: {\n+          code: mockCode\n+        }\n+      })\n+\n+      return auth(reqWithQuery, res).then(result => {\n+        expect(res.status.mock.calls[0][0]).toBe(401)\n+        expect(res.send.mock.calls[0][0].statusCode).toBe(401)\n+        expect(res.send.mock.calls[0][0].message).toContain('invalid_code')\n+      })\n+    })\n+\n+    test('returns a 401 response when an incorrect access token is used for the GitHub API', () => {\n+      const mockAccessToken = 'qwertyuiop'\n+      const mockCode = '1q2w3e4r'\n+\n+      const siteConfig = helpers.getConfig()\n+\n+      nock(/github\\.com/)\n+        .post('/login/oauth/access_token')\n+        .query({\n+          client_id: siteConfig.get('githubAuth.clientId'),\n+          client_secret: siteConfig.get('githubAuth.clientSecret'),\n+          code: mockCode,\n+          redirect_uri: siteConfig.get('githubAuth.redirectUri')\n+        })\n+        .reply(200, {\n+          access_token: mockAccessToken\n+        })\n+\n+      nock(/github\\.com/).get('/user')\n+        .query({\n+          access_token: mockAccessToken\n+        })\n+        .reply(401, {\n+          message: 'Unauthorized'\n+        })\n+\n+      const reqWithQuery = Object.assign({}, req, {\n+        query: {\n+          code: mockCode\n+        }\n+      })\n+\n+      return auth(reqWithQuery, res).then(result => {\n+        expect(res.status.mock.calls[0][0]).toBe(401)\n+        expect(res.send.mock.calls[0][0].statusCode).toBe(401)\n+        expect(res.send.mock.calls[0][0].message).toContain('Unauthorized')\n+      })\n+    })\n+  })\n+\n+  describe('GitLab', () => {\n+    test('authenticates to GitLab with the given code and returns the authenticated user', () => {\n+      const mockAccessToken = 'qwertyuiop'\n+      const mockCode = '1q2w3e4r'\n+      const mockUser = {\n+        username: 'johndoe',\n+        name: 'John Doe',\n+        email: 'johndoe@test.com'\n+      }\n+\n+      const siteConfig = helpers.getConfig()\n+\n+      nock(/gitlab\\.com/)\n+        .post('/oauth/token')\n+        .query({\n+          client_id: siteConfig.get('gitlabAuth.clientId'),\n+          client_secret: siteConfig.get('gitlabAuth.clientSecret'),\n+          code: mockCode,\n+          grant_type: 'authorization_code',\n+          redirect_uri: siteConfig.get('gitlabAuth.redirectUri')\n+        })\n+        .reply(200, {\n+          access_token: mockAccessToken\n+        })\n+\n+      nock(/gitlab\\.com/, {\n+        reqheaders: {\n+          authorization: `Bearer ${mockAccessToken}`\n+        }\n+      })\n+        .get('/api/v4/user')\n+        .reply(200, mockUser)\n+\n+      const reqWithQuery = Object.assign({}, req, {\n+        params: {\n+          service: 'gitlab'\n+        },\n+        query: {\n+          code: mockCode\n+        }\n+      })\n+\n+      return auth(reqWithQuery, res).then(result => {\n+        expect(res.send).toHaveBeenCalledTimes(1)\n+        expect(helpers.decrypt(res.send.mock.calls[0][0].accessToken)).toBe(mockAccessToken)\n+        expect(res.send.mock.calls[0][0].user)\n+          .toEqual(new User('gitlab', mockUser.username, mockUser.email, mockUser.name))\n+      })\n+    })\n+\n+    test('returns a 401 response when unable to get an access token from GitLab', () => {\n+      const mockCode = '1q2w3e4r'\n+      const siteConfig = helpers.getConfig()\n+\n+      nock(/gitlab\\.com/)\n+        .post('/oauth/token')\n+        .query({\n+          client_id: siteConfig.get('gitlabAuth.clientId'),\n+          client_secret: siteConfig.get('gitlabAuth.clientSecret'),\n+          code: mockCode,\n+          grant_type: 'authorization_code',\n+          redirect_uri: siteConfig.get('gitlabAuth.redirectUri')\n+        })\n+        .reply(401, {\n+          error: 'invalid_code'\n+        })\n+\n+      const reqWithQuery = Object.assign({}, req, {\n+        params: {\n+          service: 'gitlab'\n+        },\n+        query: {\n+          code: mockCode\n+        }\n+      })\n+\n+      return auth(reqWithQuery, res).then(result => {\n+        expect(res.status.mock.calls[0][0]).toBe(401)\n+        expect(res.send.mock.calls[0][0].statusCode).toBe(401)\n+        expect(res.send.mock.calls[0][0].message).toContain('invalid_code')\n+      })\n+    })\n+\n+    test('returns a 401 response when an incorrect access token is used for the GitLab API', () => {\n+      const mockAccessToken = 'qwertyuiop'\n+      const mockCode = '1q2w3e4r'\n+\n+      const siteConfig = helpers.getConfig()\n+\n+      nock(/gitlab\\.com/)\n+        .post('/oauth/token')\n+        .query({\n+          client_id: siteConfig.get('gitlabAuth.clientId'),\n+          client_secret: siteConfig.get('gitlabAuth.clientSecret'),\n+          code: mockCode,\n+          grant_type: 'authorization_code',\n+          redirect_uri: siteConfig.get('gitlabAuth.redirectUri')\n+        })\n+        .reply(200, {\n+          access_token: mockAccessToken\n+        })\n+\n+      nock(/gitlab\\.com/, {\n+        reqheaders: {\n+          authorization: `Bearer ${mockAccessToken}`\n+        }\n+      })\n+        .get('/api/v4/user')\n+        .reply(401, {\n+          message: '401 Unauthorized'\n+        })\n+\n+      const reqWithQuery = Object.assign({}, req, {\n+        params: {\n+          service: 'gitlab'\n+        },\n+        query: {\n+          code: mockCode\n+        }\n+      })\n+\n+      return auth(reqWithQuery, res).then(result => {\n+        expect(res.status.mock.calls[0][0]).toBe(401)\n+        expect(res.send.mock.calls[0][0].statusCode).toBe(401)\n+        expect(res.send.mock.calls[0][0].message).toContain('401 Unauthorized')\n+      })\n+    })\n+  })\n+})"
    },
    {
      "sha": "00088586967517afa920ef9b29e65553e335e4b2",
      "filename": "test/unit/controllers/connect.test.js",
      "status": "modified",
      "additions": 52,
      "deletions": 56,
      "changes": 108,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/controllers/connect.test.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/controllers/connect.test.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/unit/controllers/connect.test.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,7 +1,4 @@\n-const config = require('./../../../config')\n const helpers = require('./../../helpers')\n-const githubToken = config.get('githubToken')\n-const nock = require('nock')\n \n let req, res\n \n@@ -10,33 +7,33 @@ beforeEach(() => {\n   res = helpers.getMockResponse()\n \n   jest.resetModules()\n-  jest.unmock('github')\n+  jest.unmock('@octokit/rest')\n })\n \n describe('Connect controller', () => {\n   test('accepts the invitation if one is found and replies with \"OK!\"', () => {\n     const invitationId = 123\n     const mockAcceptRepoInvite = jest.fn(() => Promise.resolve())\n-    const mockGetRepoInvites = jest.fn(() => Promise.resolve([\n-      {\n-        id: invitationId,\n-        repository: {\n-          full_name: `${req.params.username}/${req.params.repository}`\n+    const mockGetRepoInvites = jest.fn(() => Promise.resolve({\n+      data: [\n+        {\n+          id: invitationId,\n+          repository: {\n+            full_name: `${req.params.username}/${req.params.repository}`\n+          }\n         }\n-      }\n-    ]))\n-\n-    jest.mock('github', () => {\n-      const GithubApi = function () {}\n-\n-      GithubApi.prototype.authenticate = jest.fn()\n-      GithubApi.prototype.users = {\n-        acceptRepoInvite: mockAcceptRepoInvite,\n-        getRepoInvites: mockGetRepoInvites\n-      }\n+      ]\n+    }))\n \n-      return GithubApi\n-    })\n+    jest.mock('@octokit/rest', () =>\n+      _ => ({\n+        authenticate: jest.fn(),\n+        repos: {\n+          acceptInvitation: mockAcceptRepoInvite,\n+          listInvitationsForAuthenticatedUser: mockGetRepoInvites\n+        }\n+      })\n+    )\n \n     const connect = require('./../../../controllers/connect')\n \n@@ -50,26 +47,26 @@ describe('Connect controller', () => {\n   test('returns a 404 and an error message if a matching invitation is not found', () => {\n     const invitationId = 123\n     const mockAcceptRepoInvite = jest.fn(() => Promise.resolve())\n-    const mockGetRepoInvites = jest.fn(() => Promise.resolve([\n-      {\n-        id: invitationId,\n-        repository: {\n-          full_name: `${req.params.username}/anotherrepo`\n+    const mockGetRepoInvites = jest.fn(() => Promise.resolve({\n+      data: [\n+        {\n+          id: invitationId,\n+          repository: {\n+            full_name: `${req.params.username}/anotherrepo`\n+          }\n         }\n-      }\n-    ]))\n-\n-    jest.mock('github', () => {\n-      const GithubApi = function () {}\n-\n-      GithubApi.prototype.authenticate = jest.fn()\n-      GithubApi.prototype.users = {\n-        acceptRepoInvite: mockAcceptRepoInvite,\n-        getRepoInvites: mockGetRepoInvites\n-      }\n+      ]\n+    }))\n \n-      return GithubApi\n-    })\n+    jest.mock('@octokit/rest', () =>\n+      _ => ({\n+        authenticate: jest.fn(),\n+        repos: {\n+          acceptInvitation: mockAcceptRepoInvite,\n+          listInvitationsForAuthenticatedUser: mockGetRepoInvites\n+        }\n+      })\n+    )\n \n     const connect = require('./../../../controllers/connect')\n \n@@ -81,32 +78,31 @@ describe('Connect controller', () => {\n     })\n   })\n \n-  test('returns a 500 and an error message if the response from GitHub is invalid', () => {\n-    const invitationId = 123\n+  test('returns a 404 and an error message if the response from GitHub is invalid', () => {\n     const mockAcceptRepoInvite = jest.fn(() => Promise.resolve())\n     const mockGetRepoInvites = jest.fn(() => Promise.resolve({\n-      invalidProperty: 'invalidValue'\n-    }))\n-\n-    jest.mock('github', () => {\n-      const GithubApi = function () {}\n-\n-      GithubApi.prototype.authenticate = jest.fn()\n-      GithubApi.prototype.users = {\n-        acceptRepoInvite: mockAcceptRepoInvite,\n-        getRepoInvites: mockGetRepoInvites\n+      data: {\n+        invalidProperty: 'invalidValue'\n       }\n+    }))\n \n-      return GithubApi\n-    })\n+    jest.mock('@octokit/rest', () =>\n+      _ => ({\n+        authenticate: jest.fn(),\n+        repos: {\n+          acceptInvitation: mockAcceptRepoInvite,\n+          listInvitationsForAuthenticatedUser: mockGetRepoInvites\n+        }\n+      })\n+    )\n \n     const connect = require('./../../../controllers/connect')\n \n     return connect(req, res).then(response => {\n       expect(mockGetRepoInvites).toHaveBeenCalledTimes(1)\n       expect(mockAcceptRepoInvite).not.toHaveBeenCalled()\n-      expect(res.send.mock.calls[0][0]).toBe('Error')\n-      expect(res.status.mock.calls[0][0]).toBe(500)\n+      expect(res.send.mock.calls[0][0]).toBe('Invitation not found')\n+      expect(res.status.mock.calls[0][0]).toBe(404)\n     })\n   })\n })"
    },
    {
      "sha": "360c630a8ffd3408a4128d1f40a819da521390a6",
      "filename": "test/unit/controllers/githubAuth.test.js",
      "status": "removed",
      "additions": 0,
      "deletions": 66,
      "changes": 66,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/30636040d06c64139de6dceb77c2fe32207fa981/test/unit/controllers/githubAuth.test.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/30636040d06c64139de6dceb77c2fe32207fa981/test/unit/controllers/githubAuth.test.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/unit/controllers/githubAuth.test.js?ref=30636040d06c64139de6dceb77c2fe32207fa981",
      "patch": "@@ -1,66 +0,0 @@\n-const config = require('./../../../config')\n-const githubAuth = require('./../../../controllers/githubAuth')\n-const helpers = require('./../../helpers')\n-const nock = require('nock')\n-const Staticman = require('./../../../lib/Staticman')\n-\n-Staticman.prototype.getSiteConfig = function () {\n-  return Promise.resolve(helpers.getConfig())\n-}\n-\n-let req\n-let res\n-\n-const mockSiteConfig = helpers.getConfig()\n-\n-// const mockConfig = helpers.getConfig()\n-//   .replace('@githubAuthClientId@', helpers.encrypt('testClient'))\n-//   .replace('@githubAuthClientSecret@', helpers.enrypt('superSecret'))\n-\n-beforeEach(() => {\n-  //jest.resetModules()\n-  //jest.unmock('github')\n-\n-  req = helpers.getMockRequest()\n-  res = helpers.getMockResponse()  \n-})\n-\n-describe('GitHub Auth controller', () => {\n-  test('authenticates with the given code and returns the authenticated user', () => {\n-    const mockAccessToken = 'qwertyuiop'\n-    const mockCode = '1q2w3e4r'\n-    const mockUser = {\n-      login: 'johndoe'\n-    }\n-\n-    nock(/github\\.com/)\n-      .post('/login/oauth/access_token')\n-      .query({\n-        client_id: 'testClient',\n-        client_secret: 'superSecret',\n-        code: mockCode\n-      })\n-      .reply(200, {\n-        access_token: mockAccessToken\n-      })\n-\n-    nock(/github\\.com/, {\n-      reqheaders: {\n-        authorization: `token ${mockAccessToken}`\n-      }\n-    }).get('/user')\n-      .reply(200, mockUser)\n-\n-    const reqWithQuery = Object.assign({}, req, {\n-      query: {\n-        code: mockCode\n-      }\n-    })\n-\n-    return githubAuth(reqWithQuery, res).then(result => {\n-      expect(res.send).toHaveBeenCalledTimes(1)\n-      expect(helpers.decrypt(res.send.mock.calls[0][0].accessToken)).toBe(mockAccessToken)\n-      expect(res.send.mock.calls[0][0].user.login).toBe(mockUser.login)\n-    })\n-  })\n-})"
    },
    {
      "sha": "21057d272ef4f080fd83d45a6f248ddae40e1fe9",
      "filename": "test/unit/controllers/handlePR.test.js",
      "status": "modified",
      "additions": 73,
      "deletions": 63,
      "changes": 136,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/controllers/handlePR.test.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/controllers/handlePR.test.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/unit/controllers/handlePR.test.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,9 +1,6 @@\n-const config = require('./../../../config')\n const helpers = require('./../../helpers')\n-const githubToken = config.get('githubToken')\n const sampleData = require('./../../helpers/sampleData')\n \n-let catchAllMock\n let mockAuthenticate\n let mockSetConfigPathFn\n let mockProcessMergeFn\n@@ -27,42 +24,47 @@ beforeEach(() => {\n   res = helpers.getMockResponse()\n \n   jest.resetModules()\n-  jest.unmock('github')  \n+  jest.unmock('@octokit/rest')\n })\n \n describe('HandlePR controller', () => {\n   test('ignores pull requests from branches not prefixed with `staticman_`', () => {\n     const pr = {\n       number: 123,\n+      title: 'Some random PR',\n+      body: 'Unrelated review body',\n       head: {\n         ref: 'some-other-branch'\n       },\n+      base: {\n+        ref: 'master'\n+      },\n+      merged: false,\n       repository: {\n         name: req.params.repository,\n         owner: {\n           login: req.params.username\n         }\n-      }\n+      },\n+      state: 'open'\n     }\n-    const mockPullRequestsGet = jest.fn(() => Promise.resolve(pr))\n-\n-    jest.mock('github', () => {\n-      const GithubApi = function () {}\n-\n-      GithubApi.prototype.authenticate = jest.fn()\n-      GithubApi.prototype.pullRequests = {\n-        get: mockPullRequestsGet\n-      }\n+    const mockPullRequestsGet = jest.fn(() => Promise.resolve({data: pr}))\n \n-      return GithubApi\n-    })\n+    jest.mock('@octokit/rest', () =>\n+      _ => ({\n+        authenticate: jest.fn(),\n+        pullRequests: {\n+          get: mockPullRequestsGet\n+        }\n+      })\n+    )\n \n     const handlePR = require('./../../../controllers/handlePR')\n \n     return handlePR(req.params.repository, pr).then(response => {\n       expect(mockPullRequestsGet).toHaveBeenCalledTimes(1)\n       expect(mockPullRequestsGet.mock.calls[0][0]).toEqual({\n-        user: req.params.username,\n+        owner: req.params.username,\n         repo: req.params.repository,\n         number: pr.number\n       })\n@@ -74,10 +76,14 @@ describe('HandlePR controller', () => {\n     test('do nothing if PR body doesn\\'t match template', () => {\n       const pr = {\n         number: 123,\n+        title: 'Add Staticman data',\n         body: sampleData.prBody2,\n         head: {\n           ref: 'staticman_1234567'\n         },\n+        base: {\n+          ref: 'master'\n+        },\n         merged: true,\n         repository: {\n           name: req.params.repository,\n@@ -88,21 +94,19 @@ describe('HandlePR controller', () => {\n         state: 'open'\n       }\n       const mockDeleteReference = jest.fn()\n-      const mockPullRequestsGet = jest.fn(() => Promise.resolve(pr))\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.pullRequests = {\n-          get: mockPullRequestsGet\n-        }\n-        GithubApi.prototype.gitdata = {\n-          deleteReference: mockDeleteReference\n-        }\n-\n-        return GithubApi\n-      })\n+      const mockPullRequestsGet = jest.fn(() => Promise.resolve({data: pr}))\n+\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          gitdata: {\n+            deleteReference: mockDeleteReference\n+          },\n+          pullRequests: {\n+            get: mockPullRequestsGet\n+          }\n+        })\n+      )\n \n       const handlePR = require('./../../../controllers/handlePR')\n \n@@ -115,10 +119,14 @@ describe('HandlePR controller', () => {\n     test('abort and return an error if `processMerge` fails', () => {\n       const pr = {\n         number: 123,\n+        title: 'Add Staticman data',\n         body: sampleData.prBody1,\n         head: {\n           ref: 'staticman_1234567'\n         },\n+        base: {\n+          ref: 'master'\n+        },\n         merged: true,\n         repository: {\n           name: req.params.repository,\n@@ -128,18 +136,18 @@ describe('HandlePR controller', () => {\n         },\n         state: 'closed'\n       }\n-      const mockPullRequestsGet = jest.fn(() => Promise.resolve(pr))\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.pullRequests = {\n-          get: mockPullRequestsGet\n-        }\n-\n-        return GithubApi\n-      })\n+      const mockPullRequestsGet = jest.fn(() => Promise.resolve({\n+        data: pr\n+      }))\n+\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          pullRequests: {\n+            get: mockPullRequestsGet\n+          }\n+        })\n+      )\n \n       const handlePR = require('./../../../controllers/handlePR')\n       const errorMessage = 'some error'\n@@ -159,10 +167,14 @@ describe('HandlePR controller', () => {\n     test('delete the branch if the pull request is closed', () => {\n       const pr = {\n         number: 123,\n+        title: 'Add Staticman data',\n         body: sampleData.prBody1,\n         head: {\n           ref: 'staticman_1234567'\n         },\n+        base: {\n+          ref: 'master'\n+        },\n         merged: true,\n         repository: {\n           name: req.params.repository,\n@@ -173,40 +185,38 @@ describe('HandlePR controller', () => {\n         state: 'closed'\n       }\n       const mockDeleteReference = jest.fn()\n-      const mockPullRequestsGet = jest.fn(() => Promise.resolve(pr))\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.pullRequests = {\n-          get: mockPullRequestsGet\n-        }\n-        GithubApi.prototype.gitdata = {\n-          deleteReference: mockDeleteReference\n-        }\n-\n-        return GithubApi\n-      })\n+      const mockPullRequestsGet = jest.fn(() => Promise.resolve({data: pr}))\n+\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          gitdata: {\n+            deleteReference: mockDeleteReference\n+          },\n+          pullRequests: {\n+            get: mockPullRequestsGet\n+          }\n+        })\n+      )\n \n       const handlePR = require('./../../../controllers/handlePR')\n \n       return handlePR(req.params.repository, pr).then(response => {\n         expect(mockPullRequestsGet).toHaveBeenCalledTimes(1)\n         expect(mockPullRequestsGet.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+          owner: req.params.username,\n           repo: req.params.repository,\n           number: pr.number\n-        })        \n+        })\n         expect(mockDeleteReference).toHaveBeenCalledTimes(1)\n         expect(mockDeleteReference.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+          owner: req.params.username,\n           repo: req.params.repository,\n           ref: `heads/${pr.head.ref}`\n         })\n         expect(mockSetConfigPathFn.mock.calls.length).toBe(1)\n         expect(mockProcessMergeFn.mock.calls.length).toBe(1)\n       })\n-    }) \n+    })\n   })\n })"
    },
    {
      "sha": "2f20850252e3507f529e8b141678c57bc414cf07",
      "filename": "test/unit/lib/GitHub.test.js",
      "status": "modified",
      "additions": 255,
      "deletions": 217,
      "changes": 472,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/lib/GitHub.test.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/lib/GitHub.test.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/unit/lib/GitHub.test.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,16 +1,17 @@\n-const config = require('./../../../config')\n const mockHelpers = require('./../../helpers')\n-const nock = require('nock')\n const sampleData = require('./../../helpers/sampleData')\n+const User = require('../../../lib/models/User')\n const yaml = require('js-yaml')\n \n-let req, res\n+let req\n+\n+const btoa = contents => Buffer.from(contents).toString('base64')\n \n beforeEach(() => {\n   jest.resetModules()\n \n   req = mockHelpers.getMockRequest()\n-  res = mockHelpers.getMockResponse()\n+  req.params.token = 'test-token'\n })\n \n describe('GitHub interface', () => {\n@@ -22,77 +23,70 @@ describe('GitHub interface', () => {\n   })\n \n   test('authenticates with the GitHub API using a personal access token', () => {\n-    const token = config.get('githubToken')\n+    jest.mock('@octokit/rest', () =>\n+      _ => ({\n+        authenticate: jest.fn()\n+      })\n+    )\n+\n     const GitHub = require('./../../../lib/GitHub')\n     const githubInstance = new GitHub(req.params)\n-    const spy = jest.spyOn(githubInstance.api, 'authenticate')\n-\n-    githubInstance.authenticateWithToken(token)\n \n-    expect(spy.mock.calls[0][0]).toEqual({\n-      type: 'oauth',\n-      token\n+    expect(githubInstance.api.authenticate.mock.calls[0][0]).toEqual({\n+      type: 'token',\n+      token: req.params.token\n     })\n   })\n \n-  test('authenticates with the GitHub API using a temporary access code', () => {\n-    const accessToken = 'asdfghjkl'\n-    const clientId = '123456789'\n-    const clientSecret = '1q2w3e4r5t6y7u8i9o'\n-    const code = 'abcdefghijklmnopqrst'\n-\n-    nock(/github\\.com/)\n-      .post('/login/oauth/access_token')\n-      .query({\n-        client_id: clientId,\n-        client_secret: clientSecret,\n-        code\n-      })\n-      .reply(200, {\n-        access_token: accessToken\n+  test('authenticates with the GitHub API using an OAuth token', () => {\n+    jest.mock('@octokit/rest', () =>\n+      _ => ({\n+        authenticate: jest.fn()\n       })\n+    )\n \n     const GitHub = require('./../../../lib/GitHub')\n-    const githubInstance = new GitHub(req.params)\n-    const spy = jest.spyOn(githubInstance.api, 'authenticate')\n-\n-    return githubInstance.authenticateWithCode({\n-      clientId,\n-      clientSecret,\n-      code\n-    }).then(() => {\n-      expect(spy.mock.calls[0][0]).toEqual({\n-        type: 'token',\n-        token: accessToken\n-      })\n+\n+    const oauthToken = 'test-oauth-token'\n+    const githubInstance = new GitHub(Object.assign({}, req.params, {oauthToken}))\n+\n+    expect(githubInstance.api.authenticate.mock.calls[0][0]).toEqual({\n+      type: 'oauth',\n+      token: oauthToken\n     })\n   })\n \n+  test('throws error if no personal access token or OAuth token is provided', () => {\n+    const GitHub = require('./../../../lib/GitHub')\n+\n+    expect(() => new GitHub({})).toThrowError('Require an `oauthToken` or `token` option')\n+  })\n+\n   describe('readFile', () => {\n     test('reads a file and returns its contents', () => {\n       const fileContents = 'This is a text file!'\n       const filePath = 'path/to/file.txt'\n-      const mockReposGetContent = jest.fn(() => Promise.resolve({\n-        content: btoa(fileContents)\n-      }))\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.repos = {\n-          getContent: mockReposGetContent\n+      const mockReposGetContents = jest.fn(() => Promise.resolve({\n+        data: {\n+          content: btoa(fileContents)\n         }\n+      }))\n \n-        return GithubApi\n-      })\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          repos: {\n+            getContents: mockReposGetContents\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n-      \n+\n       return githubInstance.readFile(filePath).then(contents => {\n-        expect(mockReposGetContent.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+        expect(mockReposGetContents.mock.calls[0][0]).toEqual({\n+          owner: req.params.username,\n           repo: req.params.repository,\n           path: filePath,\n           ref: req.params.branch\n@@ -102,25 +96,23 @@ describe('GitHub interface', () => {\n \n     test('returns an error if GitHub API call errors', () => {\n       const filePath = 'path/to/file.yml'\n-      const mockReposGetContent = jest.fn(() => Promise.reject())\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.repos = {\n-          getContent: mockReposGetContent\n-        }\n-\n-        return GithubApi\n-      })\n+      const mockReposGetContents = jest.fn(() => Promise.reject()) // eslint-disable-line prefer-promise-reject-errors\n+\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          repos: {\n+            getContents: mockReposGetContents\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n \n       return githubInstance.readFile(filePath).catch(err => {\n-        expect(mockReposGetContent.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+        expect(mockReposGetContents.mock.calls[0][0]).toEqual({\n+          owner: req.params.username,\n           repo: req.params.repository,\n           path: filePath,\n           ref: req.params.branch\n@@ -137,27 +129,27 @@ describe('GitHub interface', () => {\n         baz\n       `\n       const filePath = 'path/to/file.yml'\n-      const mockReposGetContent = jest.fn(() => Promise.resolve({\n-        content: btoa(fileContents)\n-      }))\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.repos = {\n-          getContent: mockReposGetContent\n+      const mockReposGetContents = jest.fn(() => Promise.resolve({\n+        data: {\n+          content: btoa(fileContents)\n         }\n+      }))\n \n-        return GithubApi\n-      })\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          repos: {\n+            getContents: mockReposGetContents\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n \n       return githubInstance.readFile(filePath).catch(err => {\n-        expect(mockReposGetContent.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+        expect(mockReposGetContents.mock.calls[0][0]).toEqual({\n+          owner: req.params.username,\n           repo: req.params.repository,\n           path: filePath,\n           ref: req.params.branch\n@@ -170,27 +162,27 @@ describe('GitHub interface', () => {\n     test('reads a YAML file and returns its parsed contents', () => {\n       const filePath = 'path/to/file.yml'\n       const parsedConfig = yaml.safeLoad(sampleData.config1, 'utf8')\n-      const mockReposGetContent = jest.fn(() => Promise.resolve({\n-        content: btoa(sampleData.config1)\n-      }))\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.repos = {\n-          getContent: mockReposGetContent\n+      const mockReposGetContents = jest.fn(() => Promise.resolve({\n+        data: {\n+          content: btoa(sampleData.config1)\n         }\n+      }))\n \n-        return GithubApi\n-      })\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          repos: {\n+            getContents: mockReposGetContents\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n \n       return githubInstance.readFile(filePath).then(contents => {\n-        expect(mockReposGetContent.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+        expect(mockReposGetContents.mock.calls[0][0]).toEqual({\n+          owner: req.params.username,\n           repo: req.params.repository,\n           path: filePath,\n           ref: req.params.branch\n@@ -205,58 +197,58 @@ describe('GitHub interface', () => {\n         content: btoa(sampleData.config1)\n       }\n       const filePath = 'path/to/file.yml'\n-      const mockReposGetContent = jest.fn(() => Promise.resolve(fileContents))\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.repos = {\n-          getContent: mockReposGetContent\n-        }\n+      const mockReposGetContents = jest.fn(() => Promise.resolve({\n+        data: fileContents\n+      }))\n \n-        return GithubApi\n-      })\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          repos: {\n+            getContents: mockReposGetContents\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n \n       return githubInstance.readFile(filePath, true).then(response => {\n-        expect(mockReposGetContent.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+        expect(mockReposGetContents.mock.calls[0][0]).toEqual({\n+          owner: req.params.username,\n           repo: req.params.repository,\n           path: filePath,\n           ref: req.params.branch\n         })\n         expect(response.content).toEqual(parsedConfig)\n         expect(response.file).toEqual(fileContents)\n       })\n-    })  \n+    })\n \n     test('reads a JSON file and returns its parsed contents', () => {\n       const filePath = 'path/to/file.json'\n       const parsedConfig = yaml.safeLoad(sampleData.config2, 'utf8')\n-      const mockReposGetContent = jest.fn(() => Promise.resolve({\n-        content: btoa(sampleData.config2)\n-      }))\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.repos = {\n-          getContent: mockReposGetContent\n+      const mockReposGetContents = jest.fn(() => Promise.resolve({\n+        data: {\n+          content: btoa(sampleData.config2)\n         }\n+      }))\n \n-        return GithubApi\n-      })\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          repos: {\n+            getContents: mockReposGetContents\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n-      \n+\n       return githubInstance.readFile(filePath).then(contents => {\n-        expect(mockReposGetContent.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+        expect(mockReposGetContents.mock.calls[0][0]).toEqual({\n+          owner: req.params.username,\n           repo: req.params.repository,\n           path: filePath,\n           ref: req.params.branch\n@@ -271,25 +263,25 @@ describe('GitHub interface', () => {\n       }\n       const filePath = 'path/to/file.json'\n       const parsedConfig = yaml.safeLoad(sampleData.config2, 'utf8')\n-      const mockReposGetContent = jest.fn(() => Promise.resolve(fileContents))\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.repos = {\n-          getContent: mockReposGetContent\n-        }\n+      const mockReposGetContents = jest.fn(() => Promise.resolve({\n+        data: fileContents\n+      }))\n \n-        return GithubApi\n-      })\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          repos: {\n+            getContents: mockReposGetContents\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n \n       return githubInstance.readFile(filePath, true).then(response => {\n-        expect(mockReposGetContent.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+        expect(mockReposGetContents.mock.calls[0][0]).toEqual({\n+          owner: req.params.username,\n           repo: req.params.repository,\n           path: filePath,\n           ref: req.params.branch\n@@ -307,19 +299,19 @@ describe('GitHub interface', () => {\n         commitTitle: 'Adds a new file',\n         content: 'This is a new file',\n         path: 'path/to/file.txt'\n-      }      \n-      const mockReposCreateFile = jest.fn(() => Promise.resolve())\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.repos = {\n-          createFile: mockReposCreateFile\n-        }\n+      }\n+      const mockReposCreateFile = jest.fn(() => Promise.resolve({\n+        data: null\n+      }))\n \n-        return GithubApi\n-      })\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          repos: {\n+            createFile: mockReposCreateFile\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n@@ -329,69 +321,65 @@ describe('GitHub interface', () => {\n         options.content,\n         options.branch,\n         options.commitTitle\n-      ).then(response => {    \n+      ).then(response => {\n         expect(mockReposCreateFile).toHaveBeenCalledTimes(1)\n         expect(mockReposCreateFile.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+          owner: req.params.username,\n           repo: req.params.repository,\n           path: options.path,\n-          content: new Buffer(options.content).toString('base64'),\n+          content: btoa(options.content),\n           message: options.commitTitle,\n           branch: options.branch\n         })\n       })\n     })\n \n     test('creates a file using the branch present in the request, if one is not provided to the method, and the default commit title', () => {\n-      const mockReposCreateFile = jest.fn(() => Promise.resolve())\n-\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.repos = {\n-          createFile: mockReposCreateFile\n-        }\n+      const mockReposCreateFile = jest.fn(() => Promise.resolve({\n+        data: null\n+      }))\n \n-        return GithubApi\n-      })\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          repos: {\n+            createFile: mockReposCreateFile\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n       const options = {\n         content: 'This is a new file',\n-        commitTitle: 'New Staticman data',\n+        commitTitle: 'Add Staticman file',\n         path: 'path/to/file.txt'\n       }\n \n       return githubInstance.writeFile(\n         options.path,\n-        options.content,\n-        options.branch,\n-        options.commitTitle\n+        options.content\n       ).then(response => {\n         expect(mockReposCreateFile.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+          owner: req.params.username,\n           repo: req.params.repository,\n           path: options.path,\n-          content: new Buffer(options.content).toString('base64'),\n+          content: btoa(options.content),\n           message: options.commitTitle,\n           branch: req.params.branch\n         })\n       })\n     })\n \n     test('returns an error object if the save operation fails', () => {\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.repos = {\n-          createFile: () => Promise.reject()\n-        }\n-\n-        return GithubApi\n-      })\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          repos: {\n+            createFile: () => Promise.reject()\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n@@ -415,7 +403,7 @@ describe('GitHub interface', () => {\n     })\n   })\n \n-  describe('writeFileAndSendPR', () => {\n+  describe('writeFileAndSendReview', () => {\n     test('writes a file to a new branch and sends a PR to the base branch provided, using the given title and body for the commit/PR', () => {\n       const options = {\n         commitBody: 'This is a very cool file indeed...',\n@@ -427,79 +415,83 @@ describe('GitHub interface', () => {\n         sha: '7fd1a60b01f91b314f59955a4e4d4e80d8edf11d'\n       }\n       const mockCreatePullRequest = jest.fn(() => Promise.resolve({\n-        number: 123\n+        data: {\n+          number: 123\n+        }\n       }))\n       const mockCreateReference = jest.fn(() => Promise.resolve({\n-        ref: `refs/heads/${options.newBranch}`\n+        data: {\n+          ref: `refs/heads/${options.newBranch}`\n+        }\n       }))\n       const mockGetBranch = jest.fn(() => Promise.resolve({\n-        commit: {\n-          sha: options.sha\n+        data: {\n+          commit: {\n+            sha: options.sha\n+          }\n         }\n       }))\n \n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.gitdata = {\n-          createReference: mockCreateReference\n-        }\n-        GithubApi.prototype.pullRequests = {\n-          create: mockCreatePullRequest\n-        }\n-        GithubApi.prototype.repos = {\n-          createFile: () => Promise.resolve(),\n-          getBranch: mockGetBranch\n-        }\n-\n-        return GithubApi\n-      })\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          gitdata: {\n+            createReference: mockCreateReference\n+          },\n+          repos: {\n+            createFile: () => Promise.resolve({\n+              data: null\n+            }),\n+            getBranch: mockGetBranch\n+          },\n+          pullRequests: {\n+            create: mockCreatePullRequest\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n \n-      return githubInstance.writeFileAndSendPR(\n+      return githubInstance.writeFileAndSendReview(\n         options.path,\n         options.content,\n         options.newBranch,\n         options.commitTitle,\n         options.commitBody\n       ).then(response => {\n         expect(mockCreatePullRequest.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+          owner: req.params.username,\n           repo: req.params.repository,\n           title: options.commitTitle,\n           head: options.newBranch,\n           base: req.params.branch,\n           body: options.commitBody\n         })\n         expect(mockCreateReference.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+          owner: req.params.username,\n           repo: req.params.repository,\n           ref: `refs/heads/${options.newBranch}`,\n           sha: options.sha\n         })\n         expect(mockGetBranch.mock.calls[0][0]).toEqual({\n-          user: req.params.username,\n+          owner: req.params.username,\n           repo: req.params.repository,\n           branch: req.params.branch\n         })\n       })\n     })\n \n     test('returns an error if any of the API calls fail', () => {\n-      jest.mock('github', () => {\n-        const GithubApi = function () {}\n-\n-        GithubApi.prototype.authenticate = jest.fn()\n-        GithubApi.prototype.repos = {\n-          createFile: () => Promise.resolve(),\n-          getBranch: () => Promise.reject()\n-        }\n-\n-        return GithubApi\n-      })\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          repos: {\n+            createFile: () => Promise.resolve(),\n+            getBranch: () => Promise.reject()\n+          }\n+        })\n+      )\n \n       const GitHub = require('./../../../lib/GitHub')\n       const githubInstance = new GitHub(req.params)\n@@ -513,7 +505,7 @@ describe('GitHub interface', () => {\n         sha: '7fd1a60b01f91b314f59955a4e4d4e80d8edf11d'\n       }\n \n-      return githubInstance.writeFileAndSendPR(\n+      return githubInstance.writeFileAndSendReview(\n         options.path,\n         options.content,\n         options.newBranch,\n@@ -526,4 +518,50 @@ describe('GitHub interface', () => {\n       })\n     })\n   })\n+\n+  describe('getCurrentUser', () => {\n+    test('returns the current authenticated user', () => {\n+      const mockUser = {\n+        login: 'johndoe',\n+        email: 'johndoe@test.com',\n+        name: 'John Doe'\n+      }\n+\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          users: {\n+            getAuthenticated: () => Promise.resolve({data: mockUser})\n+          }\n+        })\n+      )\n+\n+      const GitHub = require('./../../../lib/GitHub')\n+      const githubInstance = new GitHub(req.params)\n+\n+      return githubInstance.getCurrentUser().then((user) => {\n+        expect(user).toEqual(new User('github', 'johndoe', 'johndoe@test.com', 'John Doe'))\n+      })\n+    })\n+\n+    test('throws an error if unable to retrieve the current unauthenticated user', () => {\n+      jest.mock('@octokit/rest', () =>\n+        _ => ({\n+          authenticate: jest.fn(),\n+          users: {\n+            getAuthenticated: () => Promise.reject()\n+          }\n+        })\n+      )\n+\n+      const GitHub = require('./../../../lib/GitHub')\n+      const githubInstance = new GitHub(req.params)\n+\n+      return githubInstance.getCurrentUser().catch((err) => {\n+        expect(err).toEqual({\n+          _smErrorCode: 'GITHUB_GET_USER'\n+        })\n+      })\n+    })\n+  })\n })"
    },
    {
      "sha": "3d13d87383aadab1c6211c251ace8e2cf1fd1148",
      "filename": "test/unit/lib/GitLab.test.js",
      "status": "added",
      "additions": 565,
      "deletions": 0,
      "changes": 565,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/lib/GitLab.test.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/lib/GitLab.test.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/unit/lib/GitLab.test.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,565 @@\n+const mockHelpers = require('./../../helpers')\n+const sampleData = require('./../../helpers/sampleData')\n+const User = require('../../../lib/models/User')\n+const yaml = require('js-yaml')\n+\n+let req\n+\n+const btoa = contents => Buffer.from(contents).toString('base64')\n+\n+beforeEach(() => {\n+  jest.resetModules()\n+\n+  req = mockHelpers.getMockRequest()\n+  req.params.token = 'test-token'\n+})\n+\n+describe('GitLab interface', () => {\n+  test('initialises the GitLab API wrapper', () => {\n+    const GitLab = require('./../../../lib/GitLab')\n+    const gitlab = new GitLab(req.params)\n+\n+    expect(gitlab.api).toBeDefined()\n+  })\n+\n+  test('authenticates with the GitLab API using a personal access token', () => {\n+    const mockConstructor = jest.fn()\n+    jest.mock('gitlab/dist/es5', () => {\n+      return {\n+        default: class {\n+          constructor (params) {\n+            mockConstructor(params)\n+          }\n+        }\n+      }\n+    })\n+\n+    const GitLab = require('./../../../lib/GitLab')\n+    const gitlab = new GitLab(req.params) // eslint-disable-line no-unused-vars\n+\n+    expect(mockConstructor.mock.calls[0][0]).toEqual({\n+      url: 'https://gitlab.com',\n+      token: req.params.token\n+    })\n+  })\n+\n+  test('authenticates with the GitLab API using an OAuth token', () => {\n+    const mockConstructor = jest.fn()\n+    jest.mock('gitlab/dist/es5', () => {\n+      return {\n+        default: class {\n+          constructor (params) {\n+            mockConstructor(params)\n+          }\n+        }\n+      }\n+    })\n+\n+    const GitLab = require('./../../../lib/GitLab')\n+\n+    const oauthToken = 'test-oauth-token'\n+    const gitlab = new GitLab(Object.assign({}, req.params, {oauthToken})) // eslint-disable-line no-unused-vars\n+\n+    expect(mockConstructor.mock.calls[0][0]).toEqual({\n+      url: 'https://gitlab.com',\n+      oauthToken: oauthToken\n+    })\n+  })\n+\n+  test('throws error if no personal access token or OAuth token is provided', () => {\n+    const GitLab = require('../../../lib/GitLab')\n+\n+    expect(() => new GitLab({})).toThrowError('Require an `oauthToken` or `token` option')\n+  })\n+\n+  describe('readFile', () => {\n+    test('reads a file and returns its contents', () => {\n+      const fileContents = 'This is a text file!'\n+      const filePath = 'path/to/file.txt'\n+      const mockRepoShowFile = jest.fn(() => Promise.resolve({\n+        content: btoa(fileContents)\n+      }))\n+\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              RepositoryFiles: {\n+                show: mockRepoShowFile\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+\n+      return gitlab.readFile(filePath).then(contents => {\n+        expect(mockRepoShowFile.mock.calls[0][0]).toBe(`${req.params.username}/${req.params.repository}`)\n+        expect(mockRepoShowFile.mock.calls[0][1]).toBe(filePath)\n+        expect(mockRepoShowFile.mock.calls[0][2]).toBe(req.params.branch)\n+      })\n+    })\n+\n+    test('returns an error if GitLab API call errors', () => {\n+      const filePath = 'path/to/file.yml'\n+      const mockShowRepoFile = jest.fn(() => Promise.reject()) // eslint-disable-line prefer-promise-reject-errors\n+\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              RepositoryFiles: {\n+                show: mockShowRepoFile\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+\n+      return gitlab.readFile(filePath).catch(err => {\n+        expect(mockShowRepoFile.mock.calls[0][0]).toBe(`${req.params.username}/${req.params.repository}`)\n+        expect(mockShowRepoFile.mock.calls[0][1]).toBe(filePath)\n+        expect(mockShowRepoFile.mock.calls[0][2]).toBe(req.params.branch)\n+\n+        expect(err).toEqual({\n+          _smErrorCode: 'GITLAB_READING_FILE'\n+        })\n+      })\n+    })\n+\n+    test('returns an error if parsing fails for the given file', () => {\n+      const fileContents = `\n+        foo: \"bar\"\n+        baz\n+      `\n+      const filePath = 'path/to/file.yml'\n+      const mockShowRepoFile = jest.fn(() => Promise.resolve({\n+        content: btoa(fileContents)\n+      }))\n+\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              RepositoryFiles: {\n+                show: mockShowRepoFile\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+\n+      return gitlab.readFile(filePath).catch(err => {\n+        expect(mockShowRepoFile.mock.calls[0][0]).toBe(`${req.params.username}/${req.params.repository}`)\n+        expect(mockShowRepoFile.mock.calls[0][1]).toBe(filePath)\n+        expect(mockShowRepoFile.mock.calls[0][2]).toBe(req.params.branch)\n+        expect(err._smErrorCode).toBe('PARSING_ERROR')\n+        expect(err.message).toBeDefined()\n+      })\n+    })\n+\n+    test('reads a YAML file and returns its parsed contents', () => {\n+      const filePath = 'path/to/file.yml'\n+      const parsedConfig = yaml.safeLoad(sampleData.config1, 'utf8')\n+      const mockShowRepoFile = jest.fn(() => Promise.resolve({\n+        content: btoa(sampleData.config1)\n+      }))\n+\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              RepositoryFiles: {\n+                show: mockShowRepoFile\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+\n+      return gitlab.readFile(filePath).then(contents => {\n+        expect(mockShowRepoFile.mock.calls[0][0]).toBe(`${req.params.username}/${req.params.repository}`)\n+        expect(mockShowRepoFile.mock.calls[0][1]).toBe(filePath)\n+        expect(mockShowRepoFile.mock.calls[0][2]).toBe(req.params.branch)\n+        expect(contents).toEqual(parsedConfig)\n+      })\n+    })\n+\n+    test('reads a YAML file and returns its parsed and raw contents if `getFullResponse` is `true`', () => {\n+      const parsedConfig = yaml.safeLoad(sampleData.config1, 'utf8')\n+      const fileContents = {\n+        content: btoa(sampleData.config1)\n+      }\n+      const filePath = 'path/to/file.yml'\n+      const mockShowRepoFile = jest.fn(() => Promise.resolve(fileContents))\n+\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              RepositoryFiles: {\n+                show: mockShowRepoFile\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+\n+      return gitlab.readFile(filePath, true).then(response => {\n+        expect(response.content).toEqual(parsedConfig)\n+        expect(response.file).toEqual(fileContents)\n+      })\n+    })\n+\n+    test('reads a JSON file and returns its parsed contents', () => {\n+      const filePath = 'path/to/file.json'\n+      const parsedConfig = yaml.safeLoad(sampleData.config2, 'utf8')\n+      const mockShowRepoFile = jest.fn(() => Promise.resolve({\n+        content: btoa(sampleData.config2)\n+      }))\n+\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              RepositoryFiles: {\n+                show: mockShowRepoFile\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+\n+      return gitlab.readFile(filePath).then(contents => {\n+        expect(contents).toEqual(parsedConfig)\n+      })\n+    })\n+\n+    test('reads a JSON file and returns its parsed and raw contents if `getFullResponse` is `true`', () => {\n+      const fileContents = {\n+        content: btoa(sampleData.config2)\n+      }\n+      const filePath = 'path/to/file.json'\n+      const parsedConfig = yaml.safeLoad(sampleData.config2, 'utf8')\n+      const mockShowRepoFile = jest.fn(() => Promise.resolve(fileContents))\n+\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              RepositoryFiles: {\n+                show: mockShowRepoFile\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+\n+      return gitlab.readFile(filePath, true).then(response => {\n+        expect(response.content).toEqual(parsedConfig)\n+        expect(response.file).toEqual(fileContents)\n+      })\n+    })\n+  })\n+\n+  describe('writeFile', () => {\n+    test('creates a file on the given branch using the commit title provided', () => {\n+      const options = {\n+        branch: 'master',\n+        commitTitle: 'Adds a new file',\n+        content: 'This is a new file',\n+        path: 'path/to/file.txt'\n+      }\n+      const mockCreateRepoFile = jest.fn(() => Promise.resolve(null))\n+\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              RepositoryFiles: {\n+                create: mockCreateRepoFile\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+\n+      return gitlab.writeFile(\n+        options.path,\n+        options.content,\n+        options.branch,\n+        options.commitTitle\n+      ).then(response => {\n+        expect(mockCreateRepoFile).toHaveBeenCalledTimes(1)\n+        expect(mockCreateRepoFile.mock.calls[0][0]).toBe(`${req.params.username}/${req.params.repository}`)\n+        expect(mockCreateRepoFile.mock.calls[0][1]).toBe(options.path)\n+        expect(mockCreateRepoFile.mock.calls[0][2]).toBe(options.branch)\n+        expect(mockCreateRepoFile.mock.calls[0][3]).toEqual({\n+          content: btoa(options.content),\n+          commit_message: options.commitTitle,\n+          encoding: 'base64'\n+        })\n+      })\n+    })\n+\n+    test(\n+      'creates a file using the branch present in the request, if one is not provided to the method, and the default commit title',\n+      () => {\n+        const mockCreateRepoFile = jest.fn(() => Promise.resolve(null))\n+\n+        jest.mock('gitlab/dist/es5', () => {\n+          return {\n+            default: function () {\n+              return {\n+                RepositoryFiles: {\n+                  create: mockCreateRepoFile\n+                }\n+              }\n+            }\n+          }\n+        })\n+\n+        const GitLab = require('./../../../lib/GitLab')\n+        const gitlab = new GitLab(req.params)\n+        const options = {\n+          content: 'This is a new file',\n+          commitTitle: 'Add Staticman file',\n+          path: 'path/to/file.txt'\n+        }\n+\n+        return gitlab.writeFile(\n+          options.path,\n+          options.content\n+        ).then(response => {\n+          expect(mockCreateRepoFile.mock.calls[0][0]).toBe(`${req.params.username}/${req.params.repository}`)\n+          expect(mockCreateRepoFile.mock.calls[0][1]).toBe(options.path)\n+          expect(mockCreateRepoFile.mock.calls[0][2]).toBe(req.params.branch)\n+          expect(mockCreateRepoFile.mock.calls[0][3]).toEqual({\n+            content: btoa(options.content),\n+            commit_message: options.commitTitle,\n+            encoding: 'base64'\n+          })\n+        })\n+      }\n+    )\n+\n+    test('returns an error object if the save operation fails', () => {\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              RepositoryFiles: {\n+                create: () => Promise.reject(new Error())\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+      const options = {\n+        branch: 'master',\n+        commitTitle: 'Adds a new file',\n+        content: 'This is a new file',\n+        path: 'path/to/file.txt'\n+      }\n+\n+      return gitlab.writeFile(\n+        options.path,\n+        options.content,\n+        options.branch,\n+        options.commitTitle\n+      ).catch(err => {\n+        expect(err._smErrorCode).toBe('GITLAB_WRITING_FILE')\n+      })\n+    })\n+  })\n+\n+  describe('writeFileAndSendReview', () => {\n+    test(\n+      'writes a file to a new branch and sends a PR to the base branch provided, using the given title and body for the commit/PR',\n+      () => {\n+        const options = {\n+          commitBody: 'This is a very cool file indeed...',\n+          commitTitle: 'Adds a new file',\n+          content: 'This is a new file',\n+          name: 'file.txt',\n+          newBranch: 'staticman_123456789',\n+          path: 'path/to/file.txt',\n+          sha: '7fd1a60b01f91b314f59955a4e4d4e80d8edf11d'\n+        }\n+        const mockCreateMergeRequest = jest.fn(() => Promise.resolve({\n+          number: 123\n+        }))\n+        const mockCreateBranch = jest.fn(() => Promise.resolve({\n+          ref: `refs/heads/${options.newBranch}`\n+        }))\n+        const mockShowBranch = jest.fn(() => Promise.resolve({\n+          commit: {\n+            id: options.sha\n+          }\n+        }))\n+\n+        jest.mock('gitlab/dist/es5', () => {\n+          return {\n+            default: function () {\n+              return {\n+                Branches: {\n+                  create: mockCreateBranch,\n+                  show: mockShowBranch\n+                },\n+                MergeRequests: {\n+                  create: mockCreateMergeRequest\n+                },\n+                RepositoryFiles: {\n+                  create: () => Promise.resolve(null)\n+                }\n+              }\n+            }\n+          }\n+        })\n+\n+        const GitLab = require('./../../../lib/GitLab')\n+        const gitlab = new GitLab(req.params)\n+\n+        return gitlab.writeFileAndSendReview(\n+          options.path,\n+          options.content,\n+          options.newBranch,\n+          options.commitTitle,\n+          options.commitBody\n+        ).then(response => {\n+          expect(mockCreateMergeRequest.mock.calls[0][0]).toBe(`${req.params.username}/${req.params.repository}`)\n+          expect(mockCreateMergeRequest.mock.calls[0][1]).toBe(options.newBranch)\n+          expect(mockCreateMergeRequest.mock.calls[0][2]).toBe(req.params.branch)\n+          expect(mockCreateMergeRequest.mock.calls[0][3]).toBe(options.commitTitle)\n+          expect(mockCreateMergeRequest.mock.calls[0][4]).toEqual({\n+            description: options.commitBody,\n+            remove_source_branch: true\n+          })\n+\n+          expect(mockCreateBranch.mock.calls[0][0]).toBe(`${req.params.username}/${req.params.repository}`)\n+          expect(mockCreateBranch.mock.calls[0][1]).toBe(options.newBranch)\n+          expect(mockCreateBranch.mock.calls[0][2]).toBe(options.sha)\n+\n+          expect(mockShowBranch.mock.calls[0][0]).toBe(`${req.params.username}/${req.params.repository}`)\n+          expect(mockShowBranch.mock.calls[0][1]).toBe(req.params.branch)\n+        })\n+      }\n+    )\n+\n+    test('returns an error if any of the API calls fail', () => {\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              Branches: {\n+                create: () => Promise.resolve(),\n+                show: () => Promise.reject(new Error())\n+              },\n+              RepositoryFiles: {\n+                create: () => Promise.reject(new Error())\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+      const options = {\n+        commitBody: '',\n+        commitTitle: 'Add Staticman file',\n+        content: 'This is a new file',\n+        name: 'file.txt',\n+        newBranch: 'staticman_123456789',\n+        path: 'path/to/file.txt',\n+        sha: '7fd1a60b01f91b314f59955a4e4d4e80d8edf11d'\n+      }\n+\n+      return gitlab.writeFileAndSendReview(\n+        options.path,\n+        options.content,\n+        options.newBranch,\n+        options.commitTitle,\n+        options.commitBody\n+      ).catch(err => {\n+        expect(err._smErrorCode).toBe('GITLAB_CREATING_PR')\n+      })\n+    })\n+  })\n+\n+  describe('getCurrentUser', () => {\n+    test('returns the current authenticated user', () => {\n+      const mockUser = {\n+        username: 'johndoe',\n+        email: 'johndoe@test.com',\n+        name: 'John Doe'\n+      }\n+\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              Users: {\n+                current: () => Promise.resolve(mockUser)\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+\n+      return gitlab.getCurrentUser().then((user) => {\n+        expect(user).toEqual(new User('gitlab', 'johndoe', 'johndoe@test.com', 'John Doe'))\n+      })\n+    })\n+\n+    test('throws an error if unable to retrieve the current unauthenticated user', () => {\n+      jest.mock('gitlab/dist/es5', () => {\n+        return {\n+          default: function () {\n+            return {\n+              Users: {\n+                current: () => Promise.reject(new Error())\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const GitLab = require('./../../../lib/GitLab')\n+      const gitlab = new GitLab(req.params)\n+\n+      return gitlab.getCurrentUser().catch((err) => {\n+        expect(err._smErrorCode).toBe('GITLAB_GET_USER')\n+      })\n+    })\n+  })\n+})"
    },
    {
      "sha": "bcd08b495ba22f3f9f92192cf5109ed104817cf2",
      "filename": "test/unit/lib/OAuth.test.js",
      "status": "added",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/lib/OAuth.test.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/lib/OAuth.test.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/unit/lib/OAuth.test.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,51 @@\n+const nock = require('nock')\n+const oauth = require('../../../lib/OAuth')\n+\n+describe('OAuth access tokens', () => {\n+  test('requests OAuth access token from GitHub', () => {\n+    const accessToken = 'asdfghjkl'\n+    const clientId = '123456789'\n+    const clientSecret = '1q2w3e4r5t6y7u8i9o'\n+    const code = 'abcdefghijklmnopqrst'\n+    const redirectUri = 'http://my-test-site.com'\n+\n+    nock(/github\\.com/)\n+      .post('/login/oauth/access_token')\n+      .query({\n+        client_id: clientId,\n+        client_secret: clientSecret,\n+        code,\n+        redirect_uri: redirectUri\n+      })\n+      .reply(200, {\n+        access_token: accessToken\n+      })\n+\n+    oauth.requestGitHubAccessToken(code, clientId, clientSecret, redirectUri)\n+      .then(token => expect(token).toEqual(accessToken))\n+  })\n+\n+  test('requests OAuth access token from GitLab', () => {\n+    const accessToken = 'asdfghjkl'\n+    const clientId = '123456789'\n+    const clientSecret = '1q2w3e4r5t6y7u8i9o'\n+    const code = 'abcdefghijklmnopqrst'\n+    const redirectUri = 'http://my-test-site.com'\n+\n+    nock(/gitlab\\.com/)\n+      .post('/oauth/token')\n+      .query({\n+        client_id: clientId,\n+        client_secret: clientSecret,\n+        code,\n+        grant_type: 'authorization_code',\n+        redirect_uri: redirectUri\n+      })\n+      .reply(200, {\n+        access_token: accessToken\n+      })\n+\n+    oauth.requestGitLabAccessToken(code, clientId, clientSecret, redirectUri)\n+      .then(token => expect(token).toEqual(accessToken))\n+  })\n+})"
    },
    {
      "sha": "12e09168bc157522b5fc0dfdd0934463dfa37a05",
      "filename": "test/unit/lib/Staticman.test.js",
      "status": "modified",
      "additions": 605,
      "deletions": 144,
      "changes": 749,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/lib/Staticman.test.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/lib/Staticman.test.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/unit/lib/Staticman.test.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1,12 +1,11 @@\n const config = require('./../../../config')\n const errorHandler = require('./../../../lib/ErrorHandler')\n const frontMatter = require('front-matter')\n-const md5 = require('md5')\n const moment = require('moment')\n const mockHelpers = require('./../../helpers')\n-const querystring = require('querystring')\n const slugify = require('slug')\n const yaml = require('js-yaml')\n+const User = require('../../../lib/models/User')\n \n let mockConfig\n let mockParameters\n@@ -23,13 +22,25 @@ beforeEach(() => {\n describe('Staticman interface', () => {\n   describe('initialisation', () => {\n     test('creates an instance of the GitHub module', () => {\n+      const GitHub = require('../../../lib/GitHub')\n       const Staticman = require('./../../../lib/Staticman')\n       const staticman = new Staticman(mockParameters)\n \n-      expect(staticman.github.options.username).toBe(mockParameters.username)\n-      expect(staticman.github.options.repository).toBe(mockParameters.repository)\n-      expect(staticman.github.options.branch).toBe(mockParameters.branch)\n-      expect(staticman.github.api).toBeDefined()\n+      expect(staticman.git).toBeInstanceOf(GitHub)\n+      expect(staticman.git.username).toBe(mockParameters.username)\n+      expect(staticman.git.repository).toBe(mockParameters.repository)\n+      expect(staticman.git.branch).toBe(mockParameters.branch)\n+    })\n+\n+    test('creates an instance of the GitLab module', () => {\n+      const GitLab = require('../../../lib/GitLab')\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(Object.assign({}, mockParameters, {service: 'gitlab'}))\n+\n+      expect(staticman.git).toBeInstanceOf(GitLab)\n+      expect(staticman.git.username).toBe(mockParameters.username)\n+      expect(staticman.git.repository).toBe(mockParameters.repository)\n+      expect(staticman.git.branch).toBe(mockParameters.branch)\n     })\n \n     test('generates a new unique ID', () => {\n@@ -110,7 +121,7 @@ describe('Staticman interface', () => {\n       const staticman = new Staticman(mockParameters)\n \n       staticman.options = {}\n-      \n+\n       const data = mockHelpers.getFields()\n       const extendedData = staticman._applyInternalFields(data)\n \n@@ -129,7 +140,7 @@ describe('Staticman interface', () => {\n       }\n \n       staticman2.options = {}\n-      \n+\n       const data = mockHelpers.getFields()\n       const extendedData1 = staticman1._applyInternalFields(data)\n       const extendedData2 = staticman2._applyInternalFields(data)\n@@ -189,6 +200,71 @@ describe('Staticman interface', () => {\n         slug: slugify(data.name).toLowerCase()\n       }))\n     })\n+\n+    test('adds the `user` generated fields to the data object', () => {\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      mockConfig.set('generatedFields', {\n+        username: {\n+          options: {\n+            property: 'username'\n+          },\n+          type: 'user'\n+        },\n+        name: {\n+          options: {\n+            property: 'name'\n+          },\n+          type: 'user'\n+        }\n+      })\n+      staticman.siteConfig = mockConfig\n+\n+      staticman.gitUser = new User('github', 'johndoe', 'johndoe@test.com', 'John Doe')\n+\n+      const data = mockHelpers.getFields()\n+      const extendedData = staticman._applyGeneratedFields(data)\n+\n+      expect(extendedData).toEqual(Object.assign({}, data, {\n+        name: 'John Doe',\n+        username: 'johndoe'\n+      }))\n+    })\n+\n+    test('adds the `github` generated fields to the data object in the v2 API', () => {\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      mockConfig.set('generatedFields', {\n+        username: {\n+          options: {\n+            property: 'login'\n+          },\n+          type: 'github'\n+        },\n+        name: {\n+          options: {\n+            property: 'name'\n+          },\n+          type: 'github'\n+        }\n+      })\n+      staticman.siteConfig = mockConfig\n+\n+      staticman.gitUser = {\n+        login: 'johndoe',\n+        name: 'John Doe'\n+      }\n+\n+      const data = mockHelpers.getFields()\n+      const extendedData = staticman._applyGeneratedFields(data)\n+\n+      expect(extendedData).toEqual(Object.assign({}, data, {\n+        name: 'John Doe',\n+        username: 'johndoe'\n+      }))\n+    })\n   })\n \n   describe('field transforms', () => {\n@@ -211,13 +287,42 @@ describe('Staticman interface', () => {\n       const staticman = new Staticman(mockParameters)\n \n       mockConfig.set('transforms', {\n-        email: 'md5'\n+        name: 'testTransformName',\n+        email: 'testTransformEmail'\n       })\n       staticman.siteConfig = mockConfig\n+      staticman._transforms = {\n+        testTransformName () { return 'transformed-name' },\n+        testTransformEmail () { return 'transformed-email' }\n+      }\n \n       const data = mockHelpers.getFields()\n       const extendedData = Object.assign({}, data, {\n-        email: md5(data.email)\n+        name: 'transformed-name',\n+        email: 'transformed-email'\n+      })\n+\n+      return staticman._applyTransforms(data).then(transformedData => {\n+        expect(transformedData).toEqual(extendedData)\n+      })\n+    })\n+\n+    test('handles multiple transforms per field', () => {\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      mockConfig.set('transforms', {\n+        email: ['testTransform1', 'testTransform2']\n+      })\n+      staticman.siteConfig = mockConfig\n+      staticman._transforms = {\n+        testTransform1 () { return 'transformed:1' },\n+        testTransform2 (v) { return `${v}-transformed:2` }\n+      }\n+\n+      const data = mockHelpers.getFields()\n+      const extendedData = Object.assign({}, data, {\n+        email: 'transformed:1-transformed:2'\n       })\n \n       return staticman._applyTransforms(data).then(transformedData => {\n@@ -317,7 +422,6 @@ describe('Staticman interface', () => {\n     })\n \n     test('throws an error if the content is flagged as spam', () => {\n-      const akismetError = new Error('Akismet error')\n       const fields = mockHelpers.getFields()\n       const mockCheckSpamFn = jest.fn((options, callback) => {\n         callback(null, true)\n@@ -348,11 +452,309 @@ describe('Staticman interface', () => {\n     })\n   })\n \n+  describe('authentication ', () => {\n+    beforeEach(() => {\n+      mockConfig.set('auth.required', true)\n+    })\n+\n+    test('returns false if `auth.required` config is false', () => {\n+      mockConfig.set('auth.required', false)\n+\n+      const fields = mockHelpers.getFields()\n+      const options = {}\n+\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      staticman.fields = fields\n+      staticman.options = options\n+      staticman.siteConfig = mockConfig\n+\n+      return staticman._checkAuth().then(result => expect(result).toBeFalsy())\n+    })\n+\n+    test('throws an error if `auth-token` field is missing', () => {\n+      const fields = mockHelpers.getFields()\n+      const options = {}\n+\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      staticman.fields = fields\n+      staticman.options = options\n+      staticman.siteConfig = mockConfig\n+\n+      return staticman._checkAuth().catch(err => {\n+        expect(err).toEqual({\n+          _smErrorCode: 'AUTH_TOKEN_MISSING'\n+        })\n+      })\n+    })\n+\n+    test('throws an error if unable to decrypt the `auth-token` option', () => {\n+      const fields = mockHelpers.getFields()\n+      const options = {\n+        'auth-token': 'invalid token',\n+        'auth-type': 'github'\n+      }\n+\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      staticman.fields = fields\n+      staticman.options = options\n+      staticman.siteConfig = mockConfig\n+\n+      return staticman._checkAuth().catch(err => {\n+        expect(err).toEqual({\n+          _smErrorCode: 'AUTH_TOKEN_INVALID'\n+        })\n+      })\n+    })\n+\n+    test('authenticates with GitHub by default using the OAuth access token', () => {\n+      const mockConstructor = jest.fn()\n+      const mockUser = new User('github', 'johndoe', 'johndoe@test.com', 'John Doe')\n+\n+      jest.mock('../../../lib/GitHub', () => {\n+        return mockConstructor.mockImplementation(() => {\n+          return {\n+            getCurrentUser: () => Promise.resolve(mockUser)\n+          }\n+        })\n+      })\n+\n+      const fields = mockHelpers.getFields()\n+      const options = {\n+        'auth-token': mockHelpers.encrypt('test-token'),\n+      }\n+\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      staticman.fields = fields\n+      staticman.options = options\n+      staticman.siteConfig = mockConfig\n+\n+      return staticman._checkAuth().then((result) => {\n+        expect(mockConstructor.mock.calls[1][0]).toEqual({\n+          oauthToken: 'test-token'\n+        })\n+      })\n+    })\n+\n+    test('authenticates with GitLab (using `auth-type` option) using OAuth access token', () => {\n+      const mockConstructor = jest.fn()\n+      const mockUser = new User('gitlab', 'johndoe', 'johndoe@test.com', 'John Doe')\n+\n+      jest.mock('../../../lib/GitLab', () => {\n+        return mockConstructor.mockImplementation(() => {\n+          return {\n+            getCurrentUser: () => Promise.resolve(mockUser)\n+          }\n+        })\n+      })\n+\n+      const fields = mockHelpers.getFields()\n+      const options = {\n+        'auth-token': mockHelpers.encrypt('test-token'),\n+        'auth-type': 'gitlab'\n+      }\n+\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      staticman.fields = fields\n+      staticman.options = options\n+      staticman.siteConfig = mockConfig\n+\n+      return staticman._checkAuth().then((result) => {\n+        expect(mockConstructor.mock.calls[0][0]).toEqual({\n+          oauthToken: 'test-token'\n+        })\n+      })\n+    })\n+\n+    test('sets the `gitUser` property to the authenticated User and returns true for GitHub authentication', () => {\n+      const mockGetCurrentUser = jest.fn(() => Promise.resolve(mockUser))\n+\n+      jest.mock('../../../lib/GitHub', () => {\n+        return function () {\n+          return {\n+            getCurrentUser: mockGetCurrentUser\n+          }\n+        }\n+      })\n+\n+      const fields = mockHelpers.getFields()\n+      const options = {\n+        'auth-token': mockHelpers.encrypt('test-token')\n+      }\n+\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      staticman.fields = fields\n+      staticman.options = options\n+      staticman.siteConfig = mockConfig\n+\n+      const mockUser = new User('github', 'johndoe', 'johndoe@test.com', 'John Doe')\n+\n+      return staticman._checkAuth().then((result) => {\n+        expect(mockGetCurrentUser).toHaveBeenCalledTimes(1)\n+        expect(staticman.gitUser).toEqual(mockUser)\n+        expect(result).toBeTruthy()\n+      })\n+    })\n+\n+    test('sets the `gitUser` property to the authenticated User and returns true for GitLab authentication', () => {\n+      const mockGetCurrentUser = jest.fn(() => Promise.resolve(mockUser))\n+\n+      jest.mock('../../../lib/GitLab', () => {\n+        return function () {\n+          return {\n+            getCurrentUser: mockGetCurrentUser\n+          }\n+        }\n+      })\n+\n+      const fields = mockHelpers.getFields()\n+      const options = {\n+        'auth-token': mockHelpers.encrypt('test-token'),\n+        'auth-type': 'gitlab'\n+      }\n+\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      staticman.fields = fields\n+      staticman.options = options\n+      staticman.siteConfig = mockConfig\n+\n+      const mockUser = new User('github', 'johndoe', 'johndoe@test.com', 'John Doe')\n+\n+      return staticman._checkAuth().then((result) => {\n+        expect(mockGetCurrentUser).toHaveBeenCalledTimes(1)\n+        expect(staticman.gitUser).toEqual(mockUser)\n+        expect(result).toBeTruthy()\n+      })\n+    })\n+  })\n+\n+  describe('authentication v2', () => {\n+    beforeEach(() => {\n+      mockConfig.set('githubAuth.required', true)\n+    })\n+\n+    test('returns false if `githubAuth.required` config is false', () => {\n+      mockConfig.set('githubAuth.required', false)\n+\n+      const fields = mockHelpers.getFields()\n+      const options = {}\n+\n+      mockParameters.version = '2'\n+\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      staticman.fields = fields\n+      staticman.options = options\n+      staticman.siteConfig = mockConfig\n+\n+      return staticman._checkAuth().then(result => expect(result).toBeFalsy())\n+    })\n+\n+    test('throws an error if `github-token` field is missing in v2 API', () => {\n+      const fields = mockHelpers.getFields()\n+      const options = {}\n+\n+      mockParameters.version = '2'\n+\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      staticman.fields = fields\n+      staticman.options = options\n+      staticman.siteConfig = mockConfig\n+\n+      return staticman._checkAuth().catch(err => {\n+        expect(err).toEqual({\n+          _smErrorCode: 'GITHUB_AUTH_TOKEN_MISSING'\n+        })\n+      })\n+    })\n+\n+    test('throws an error if unable to decrypt the `github-token` option in the v2 API', () => {\n+      const fields = mockHelpers.getFields()\n+      const options = {\n+        'github-token': 'invalid token'\n+      }\n+\n+      mockParameters.version = '2'\n+\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      staticman.fields = fields\n+      staticman.options = options\n+      staticman.siteConfig = mockConfig\n+\n+      return staticman._checkAuth().catch(err => {\n+        expect(err).toEqual({\n+          _smErrorCode: 'GITHUB_AUTH_TOKEN_INVALID'\n+        })\n+      })\n+    })\n+\n+    test('sets the `gitUser` property to the GitHub user in the v2 API', () => {\n+      const mockUser = {\n+        login: 'johndoe',\n+        name: 'John Doe'\n+      }\n+      const mockGetCurrentUser = jest.fn(() => Promise.resolve({\n+        data: mockUser\n+      }))\n+\n+      jest.mock('../../../lib/GitHub', () => {\n+        return function () {\n+          return {\n+            api: {\n+              users: {\n+                getAuthenticated: mockGetCurrentUser\n+              }\n+            }\n+          }\n+        }\n+      })\n+\n+      const fields = mockHelpers.getFields()\n+      const options = {\n+        'github-token': mockHelpers.encrypt('test-token')\n+      }\n+\n+      mockParameters.version = '2'\n+\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+\n+      staticman.fields = fields\n+      staticman.options = options\n+      staticman.siteConfig = mockConfig\n+\n+      return staticman._checkAuth().then((result) => {\n+        expect(mockGetCurrentUser).toHaveBeenCalledTimes(1)\n+        expect(staticman.gitUser).toEqual(mockUser)\n+        expect(result).toBeTruthy()\n+      })\n+    })\n+  })\n+\n   describe('date creator', () => {\n     const mockDate = new Date('1988-08-31T11:00:00')\n \n+    // eslint-disable-next-line no-global-assign\n     Date = class extends Date {\n-      constructor() {\n+      constructor () {\n         return mockDate\n       }\n     }\n@@ -379,22 +781,25 @@ describe('Staticman interface', () => {\n       expect(date).toBe(Math.floor(mockDate.getTime() / 1000))\n     })\n \n-    test('creates a ISO-8601 representation of the date if the format is set to `iso8601`, absent, or set to none of the other supported formats', () => {\n-      const Staticman = require('./../../../lib/Staticman')\n-      const staticman = new Staticman(mockParameters)\n+    test(\n+      'creates a ISO-8601 representation of the date if the format is set to `iso8601`, absent, or set to none of the other supported formats',\n+      () => {\n+        const Staticman = require('./../../../lib/Staticman')\n+        const staticman = new Staticman(mockParameters)\n \n-      const date1 = staticman._createDate({\n-        format: 'iso8601'\n-      })\n-      const date2 = staticman._createDate({\n-        format: 'somethingNotValid'\n-      })\n-      const date3 = staticman._createDate()\n+        const date1 = staticman._createDate({\n+          format: 'iso8601'\n+        })\n+        const date2 = staticman._createDate({\n+          format: 'somethingNotValid'\n+        })\n+        const date3 = staticman._createDate()\n \n-      expect(date1).toBe(mockDate.toISOString())\n-      expect(date2).toBe(mockDate.toISOString())\n-      expect(date3).toBe(mockDate.toISOString())\n-    })\n+        expect(date1).toBe(mockDate.toISOString())\n+        expect(date2).toBe(mockDate.toISOString())\n+        expect(date3).toBe(mockDate.toISOString())\n+      }\n+    )\n   })\n \n   describe('file formatting', () => {\n@@ -455,21 +860,24 @@ describe('Staticman interface', () => {\n       })\n     })\n \n-    test('throws an error if `format` is set to `frontmatter` but there is no `frontmatterContent` transform defined', () => {\n-      const fields = mockHelpers.getFields()\n-      const Staticman = require('./../../../lib/Staticman')\n-      const staticman = new Staticman(mockParameters)\n+    test(\n+      'throws an error if `format` is set to `frontmatter` but there is no `frontmatterContent` transform defined',\n+      () => {\n+        const fields = mockHelpers.getFields()\n+        const Staticman = require('./../../../lib/Staticman')\n+        const staticman = new Staticman(mockParameters)\n \n-      mockConfig.set('format', 'frontmatter')\n-      mockConfig.set('transforms', undefined)\n-      staticman.siteConfig = mockConfig\n+        mockConfig.set('format', 'frontmatter')\n+        mockConfig.set('transforms', undefined)\n+        staticman.siteConfig = mockConfig\n \n-      return staticman._createFile(fields).catch(err => {\n-        expect(err).toEqual({\n-          _smErrorCode: 'NO_FRONTMATTER_CONTENT_TRANSFORM'\n+        return staticman._createFile(fields).catch(err => {\n+          expect(err).toEqual({\n+            _smErrorCode: 'NO_FRONTMATTER_CONTENT_TRANSFORM'\n+          })\n         })\n-      })\n-    })\n+      }\n+    )\n \n     test('throws an error if `format` contains an invalid format', () => {\n       const fields = mockHelpers.getFields()\n@@ -493,11 +901,11 @@ describe('Staticman interface', () => {\n       const fieldsTable = mockHelpers.getFieldsTable()\n       const Staticman = require('./../../../lib/Staticman')\n       const staticman = new Staticman(mockParameters)\n-      \n+\n       mockConfig.set('notifications.enabled', false)\n       staticman.siteConfig = mockConfig\n \n-      const pullRequestBody = staticman._generatePRBody(fields)\n+      const pullRequestBody = staticman._generateReviewBody(fields)\n \n       expect(pullRequestBody).toBe(mockConfig.get('pullRequestBody') + fieldsTable)\n     })\n@@ -525,7 +933,7 @@ describe('Staticman interface', () => {\n         parameters: req.params\n       }\n       const notificationsComment = `\\n\\n<!--staticman_notification:${JSON.stringify(notificationsData)}-->`\n-      const pullRequestBody = staticman._generatePRBody(fields)\n+      const pullRequestBody = staticman._generateReviewBody(fields)\n \n       expect(pullRequestBody).toBe(\n         mockConfig.get('pullRequestBody') +\n@@ -658,7 +1066,7 @@ describe('Staticman interface', () => {\n     test('returns the given string unchanged if it does not contain placeholders', () => {\n       const Staticman = require('./../../../lib/Staticman')\n       const staticman = new Staticman(mockParameters)\n-      \n+\n       const subject = 'This is a normal string, nothing to replace here.'\n       const data = mockHelpers.getParameters()\n \n@@ -668,7 +1076,7 @@ describe('Staticman interface', () => {\n     test('returns the given string with placeholders replaced with data from the data object provided', () => {\n       const Staticman = require('./../../../lib/Staticman')\n       const staticman = new Staticman(mockParameters)\n-      \n+\n       const subject = 'My name is {name} and I come from {location.city}, {location.country}'\n       const data = {\n         name: 'Eduardo',\n@@ -688,15 +1096,16 @@ describe('Staticman interface', () => {\n     test('returns the given string with special placeholders replaced', () => {\n       const mockDate = new Date('1988-08-31T11:00:00')\n \n+      // eslint-disable-next-line no-global-assign\n       Date = class extends Date {\n-        constructor() {\n+        constructor () {\n           return mockDate\n         }\n       }\n \n       const Staticman = require('./../../../lib/Staticman')\n       const staticman = new Staticman(mockParameters)\n-      \n+\n       const data = {\n         name: 'Eduardo'\n       }\n@@ -712,8 +1121,9 @@ describe('Staticman interface', () => {\n     test('returns the given string with `date:` placeholders replaced', () => {\n       const mockDate = new Date('1988-08-31T11:00:00')\n \n+      // eslint-disable-next-line no-global-assign\n       Date = class extends Date {\n-        constructor() {\n+        constructor () {\n           return mockDate\n         }\n       }\n@@ -860,70 +1270,69 @@ describe('Staticman interface', () => {\n       })\n     })\n \n-    test('fetches the site config from the repository, even if there is one already defined, if `force` is truthy', () => {\n-      const Staticman = require('./../../../lib/Staticman')\n-      const staticman = new Staticman(mockParameters)\n-      const configObject = mockHelpers.getConfigObject()\n-      \n-      staticman.setConfigPath(configObject)\n-      staticman.siteConfig = mockConfig\n-      staticman.github = {\n-        readFile: jest.fn(() => {\n-          const config = Object.assign({}, mockConfig.getProperties())\n+    test(\n+      'fetches the site config from the repository, even if there is one already defined, if `force` is truthy',\n+      () => {\n+        const Staticman = require('./../../../lib/Staticman')\n+        const staticman = new Staticman(mockParameters)\n+        const configObject = mockHelpers.getConfigObject()\n \n-          config.reCaptcha.secret = mockConfig.getRaw('reCaptcha.secret')\n+        staticman.setConfigPath(configObject)\n+        staticman.siteConfig = mockConfig\n+        staticman.git = {\n+          readFile: jest.fn(() => {\n+            const config = mockHelpers.getParsedConfig()\n \n-          return Promise.resolve({\n-            [configObject.path]: config\n+            return Promise.resolve(config)\n           })\n+        }\n+\n+        return staticman.getSiteConfig(true).then(config => {\n+          expect(staticman.git.readFile).toHaveBeenCalledTimes(1)\n+          expect(staticman.git.readFile.mock.calls[0][0]).toBe(configObject.file)\n         })\n       }\n-\n-      return staticman.getSiteConfig(true).then(config => {\n-        expect(staticman.github.readFile).toHaveBeenCalledTimes(1)\n-        expect(staticman.github.readFile.mock.calls[0][0]).toBe(configObject.file)\n-      })\n-    })\n+    )\n \n     test('fetches the site config from the repository and throws an error if it fails validation', () => {\n       const Staticman = require('./../../../lib/Staticman')\n       const staticman = new Staticman(mockParameters)\n       const configObject = mockHelpers.getConfigObject()\n-      const mockRemoteConfig = Object.assign({}, mockConfig.getProperties())\n       const validationErrors = {\n         _smErrorCode: 'MISSING_CONFIG_FIELDS',\n         data: ['branch', 'path']\n       }\n \n-      mockRemoteConfig.reCaptcha.secret = mockConfig.getRaw('reCaptcha.secret')\n-      \n+      const invalidConfig = {\n+        missingFields: true\n+      }\n+\n       staticman.setConfigPath(configObject)\n-      staticman.github = {\n+      staticman.git = {\n         readFile: jest.fn(() => {\n           return Promise.resolve({\n-            [configObject.path]: mockRemoteConfig\n+            [configObject.path]: invalidConfig\n           })\n         })\n       }\n       staticman._validateConfig = jest.fn(() => validationErrors)\n \n       return staticman.getSiteConfig().catch(err => {\n         expect(err).toEqual(validationErrors)\n-        expect(staticman._validateConfig.mock.calls[0][0]).toEqual(mockRemoteConfig)\n+        expect(staticman._validateConfig.mock.calls[0][0]).toEqual(invalidConfig)\n       })\n     })\n \n-    test('fetches the site config from the repository and throws an error if it fails validation', () => {\n+    test('fetches the site config from the repository and throws an error if there is a branch mismatch', () => {\n       const Staticman = require('./../../../lib/Staticman')\n       const staticman = new Staticman(mockParameters)\n       const configObject = mockHelpers.getConfigObject()\n       const mockRemoteConfig = Object.assign({}, mockConfig.getProperties())\n \n       mockRemoteConfig.branch = 'some-other-branch'\n-      mockRemoteConfig.reCaptcha.secret = mockConfig.getRaw('reCaptcha.secret')\n-      \n+\n       staticman.setConfigPath(configObject)\n-      staticman.github = {\n+      staticman.git = {\n         readFile: jest.fn(() => {\n           return Promise.resolve({\n             [configObject.path]: mockRemoteConfig\n@@ -943,16 +1352,13 @@ describe('Staticman interface', () => {\n       const Staticman = require('./../../../lib/Staticman')\n       const staticman = new Staticman(mockParameters)\n       const configObject = mockHelpers.getConfigObject()\n-      const mockRemoteConfig = Object.assign({}, mockConfig.getProperties())\n \n-      mockRemoteConfig.reCaptcha.secret = mockConfig.getRaw('reCaptcha.secret')\n-      \n       staticman.setConfigPath(configObject)\n-      staticman.github = {\n+      staticman.git = {\n         readFile: jest.fn(() => {\n-          return Promise.resolve({\n-            [configObject.path]: mockRemoteConfig\n-          })\n+          const mockRemoteConfig = mockHelpers.getParsedConfig()\n+\n+          return Promise.resolve(mockRemoteConfig)\n         })\n       }\n \n@@ -963,7 +1369,7 @@ describe('Staticman interface', () => {\n   })\n \n   describe('`processEntry()`', () => {\n-    test.only('gets site config and checks for spam, throwing an error if found', () => {\n+    test('gets site config and checks for spam, throwing an error if found', () => {\n       const Staticman = require('./../../../lib/Staticman')\n       const staticman = new Staticman(mockParameters)\n \n@@ -1007,38 +1413,94 @@ describe('Staticman interface', () => {\n           _smErrorCode: 'INVALID_FIELDS',\n           data: ['someField1']\n         })\n-      })  \n+      })\n     })\n \n-    test('creates a file after applying generated fields, transforms and internal fields, throwing an error if file creation fails', () => {\n+    test(\n+      'creates a file after applying generated fields, transforms and internal fields, throwing an error if file creation fails',\n+      () => {\n+        const Staticman = require('./../../../lib/Staticman')\n+        const staticman = new Staticman(mockParameters)\n+        const fields = mockHelpers.getFields()\n+\n+        mockConfig.set('allowedFields', Object.keys(fields))\n+\n+        staticman.siteConfig = mockConfig\n+        staticman._checkForSpam = () => Promise.resolve(fields)\n+\n+        const spyApplyGeneratedFields = jest.spyOn(staticman, '_applyGeneratedFields')\n+        const spyApplyTransforms = jest.spyOn(staticman, '_applyTransforms')\n+        const spyApplyInternalFields = jest.spyOn(staticman, '_applyInternalFields')\n+\n+        staticman._createFile = jest.fn(() => {\n+          return Promise.reject(errorHandler('INVALID_FORMAT'))\n+        })\n+\n+        return staticman.processEntry(\n+          mockHelpers.getFields(),\n+          {}\n+        ).catch(err => {\n+          expect(spyApplyGeneratedFields).toHaveBeenCalled()\n+          expect(spyApplyTransforms).toHaveBeenCalled()\n+          expect(spyApplyInternalFields).toHaveBeenCalled()\n+          expect(err).toEqual({\n+            _smErrorCode: 'INVALID_FORMAT'\n+          })\n+        })\n+      }\n+    )\n+\n+    test('authenticates user before creating file', () => {\n+      const mockUser = new User('github', 'johndoe', 'johndoe@test.com', 'John Doe')\n+      const mockGetCurrentUser = jest.fn(() => Promise.resolve(mockUser))\n+\n+      jest.mock('../../../lib/GitHub', () => {\n+        return function () {\n+          return {\n+            getCurrentUser: mockGetCurrentUser\n+          }\n+        }\n+      })\n+\n       const Staticman = require('./../../../lib/Staticman')\n       const staticman = new Staticman(mockParameters)\n       const fields = mockHelpers.getFields()\n+      const options = {\n+        'auth-token': mockHelpers.encrypt('test-token')\n+      }\n \n-      mockConfig.set('allowedFields', Object.keys(fields))\n+      mockConfig.set('auth.required', true)\n \n       staticman.siteConfig = mockConfig\n       staticman._checkForSpam = () => Promise.resolve(fields)\n+      staticman.git.writeFile = jest.fn(() => Promise.resolve())\n+\n+      const spyCheckAuth = jest.spyOn(staticman, '_checkAuth')\n \n-      const spyApplyGeneratedFields = jest.spyOn(staticman, '_applyGeneratedFields')\n-      const spyApplyTransforms = jest.spyOn(staticman, '_applyTransforms')\n-      const spyApplyInternalFields = jest.spyOn(staticman, '_applyInternalFields')\n-      \n-      staticman._createFile = jest.fn(() => {\n-        return Promise.reject(errorHandler('INVALID_FORMAT'))\n+      return staticman.processEntry(fields, options).then(_ => {\n+        expect(spyCheckAuth).toHaveBeenCalledTimes(1)\n+        expect(mockGetCurrentUser).toHaveBeenCalledTimes(1)\n+        expect(staticman.gitUser).toEqual(mockUser)\n       })\n+    })\n \n-      return staticman.processEntry(\n-        mockHelpers.getFields(),\n-        {}\n-      ).catch(err => {\n-        expect(spyApplyGeneratedFields).toHaveBeenCalled()\n-        expect(spyApplyTransforms).toHaveBeenCalled()\n-        expect(spyApplyInternalFields).toHaveBeenCalled()\n-        expect(err).toEqual({\n-          _smErrorCode: 'INVALID_FORMAT'\n-        })\n-      })  \n+    test('authenticates user before creating file, throwing an error if unable to authenticate', () => {\n+      const Staticman = require('./../../../lib/Staticman')\n+      const staticman = new Staticman(mockParameters)\n+      const fields = mockHelpers.getFields()\n+      const options = {\n+        'auth-token': 'invalid token'\n+      }\n+\n+      mockConfig.set('auth.required', true)\n+\n+      staticman.siteConfig = mockConfig\n+      staticman._checkForSpam = () => Promise.resolve(fields)\n+      staticman.git.writeFile = jest.fn(() => Promise.resolve())\n+\n+      return staticman.processEntry(fields, options).catch(err => {\n+        err._smErrorCode = 'AUTH_TOKEN_INVALID'\n+      })\n     })\n \n     test('subscribes the user to notifications', () => {\n@@ -1065,7 +1527,7 @@ describe('Staticman interface', () => {\n \n       staticman.siteConfig = mockConfig\n       staticman._checkForSpam = () => Promise.resolve(fields)\n-      staticman.github.writeFile = jest.fn(() => {\n+      staticman.git.writeFile = jest.fn(() => {\n         return Promise.resolve()\n       })\n \n@@ -1089,7 +1551,7 @@ describe('Staticman interface', () => {\n \n       staticman.siteConfig = mockConfig\n       staticman._checkForSpam = () => Promise.resolve(fields)\n-      staticman.github.writeFileAndSendPR = jest.fn(() => {\n+      staticman.git.writeFileAndSendReview = jest.fn(() => {\n         return Promise.resolve()\n       })\n \n@@ -1106,16 +1568,16 @@ describe('Staticman interface', () => {\n           }\n         )\n \n-        expect(staticman.github.writeFileAndSendPR.mock.calls[0][0])\n+        expect(staticman.git.writeFileAndSendReview.mock.calls[0][0])\n           .toBe(staticman._getNewFilePath(fields))\n-        expect(staticman.github.writeFileAndSendPR.mock.calls[0][1])\n+        expect(staticman.git.writeFileAndSendReview.mock.calls[0][1])\n           .toBe(expectedFile)\n-        expect(staticman.github.writeFileAndSendPR.mock.calls[0][2])\n+        expect(staticman.git.writeFileAndSendReview.mock.calls[0][2])\n           .toBe(`staticman_${staticman.uid}`)\n-        expect(staticman.github.writeFileAndSendPR.mock.calls[0][3])\n+        expect(staticman.git.writeFileAndSendReview.mock.calls[0][3])\n           .toBe(expectedCommitMessage)\n-        expect(staticman.github.writeFileAndSendPR.mock.calls[0][4])\n-          .toBe(staticman._generatePRBody(fields))\n+        expect(staticman.git.writeFileAndSendReview.mock.calls[0][4])\n+          .toBe(staticman._generateReviewBody(fields))\n       })\n     })\n \n@@ -1143,7 +1605,7 @@ describe('Staticman interface', () => {\n \n       staticman.siteConfig = mockConfig\n       staticman._checkForSpam = () => Promise.resolve(fields)\n-      staticman.github.writeFile = jest.fn(() => {\n+      staticman.git.writeFile = jest.fn(() => {\n         return Promise.resolve()\n       })\n \n@@ -1162,50 +1624,49 @@ describe('Staticman interface', () => {\n \n         expect(mockSubscriptionSend.mock.calls[0][0]).toBe(options.parent)\n         expect(mockSubscriptionSend.mock.calls[0][1]).toEqual(fields)\n-        expect(staticman.github.writeFile.mock.calls[0][0])\n+        expect(staticman.git.writeFile.mock.calls[0][0])\n           .toBe(staticman._getNewFilePath(fields))\n-        expect(staticman.github.writeFile.mock.calls[0][1])\n+        expect(staticman.git.writeFile.mock.calls[0][1])\n           .toBe(expectedFile)\n-        expect(staticman.github.writeFile.mock.calls[0][2])\n+        expect(staticman.git.writeFile.mock.calls[0][2])\n           .toBe(mockParameters.branch)\n-        expect(staticman.github.writeFile.mock.calls[0][3])\n+        expect(staticman.git.writeFile.mock.calls[0][3])\n           .toBe(expectedCommitMessage)\n       })\n     })\n-  })\n \n-  describe('`processMerge()`', () => {\n-    test('subscribes the user to notifications', () => {\n-      const mockSubscriptionSend = jest.fn()\n+    describe('`processMerge()`', () => {\n+      test('subscribes the user to notifications', () => {\n+        const mockSubscriptionSend = jest.fn()\n \n-      jest.mock('./../../../lib/SubscriptionsManager', () => {\n-        return jest.fn(() => ({\n-          send: mockSubscriptionSend\n-        }))\n-      })\n+        jest.mock('./../../../lib/SubscriptionsManager', () => {\n+          return jest.fn(() => ({\n+            send: mockSubscriptionSend\n+          }))\n+        })\n \n-      const Staticman = require('./../../../lib/Staticman')\n-      const staticman = new Staticman(mockParameters)\n-      const fields = mockHelpers.getFields()\n-      const options = {\n-        parent: '1a2b3c4d5e6f',\n-        subscribe: 'email'\n-      }\n+        const Staticman = require('./../../../lib/Staticman')\n+        const staticman = new Staticman(mockParameters)\n+        const fields = mockHelpers.getFields()\n+        const options = {\n+          parent: '1a2b3c4d5e6f',\n+          subscribe: 'email'\n+        }\n \n-      mockConfig.set('notifications.enabled', true)\n+        mockConfig.set('notifications.enabled', true)\n \n-      staticman.siteConfig = mockConfig\n+        staticman.siteConfig = mockConfig\n \n-      return staticman.processMerge(\n-        fields,\n-        options\n-      ).then(response => {\n-        expect(mockSubscriptionSend.mock.calls[0][0]).toBe(options.parent)\n-        expect(mockSubscriptionSend.mock.calls[0][1]).toEqual(fields)\n-        expect(mockSubscriptionSend.mock.calls[0][2]).toEqual(options)\n-        expect(mockSubscriptionSend.mock.calls[0][3]).toEqual(mockConfig)\n+        return staticman.processMerge(\n+          fields,\n+          options\n+        ).then(response => {\n+          expect(mockSubscriptionSend.mock.calls[0][0]).toBe(options.parent)\n+          expect(mockSubscriptionSend.mock.calls[0][1]).toEqual(fields)\n+          expect(mockSubscriptionSend.mock.calls[0][2]).toEqual(options)\n+          expect(mockSubscriptionSend.mock.calls[0][3]).toEqual(mockConfig)\n+        })\n       })\n     })\n-  })  \n+  })\n })\n-"
    },
    {
      "sha": "fdb5fd8a5972b5aa7fe1d04ea864b6134ceb48fa",
      "filename": "test/unit/lib/Transforms.test.js",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/lib/Transforms.test.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/unit/lib/Transforms.test.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/unit/lib/Transforms.test.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -0,0 +1,21 @@\n+const Transforms = require('./../../../lib/Transforms')\n+\n+describe('Transforms', () => {\n+  describe('md5', () => {\n+    test('returns an MD5 of the value', () => {\n+      expect(Transforms.md5('test-value')).toEqual('83b3c112b82dcca8376da029e8101bcc');\n+    })\n+  })\n+\n+  describe('upcase', () => {\n+    test('returns an upcased value', () => {\n+      expect(Transforms.upcase('foobar')).toEqual('FOOBAR')\n+    })\n+  })\n+\n+  describe('downcase', () => {\n+    test('returns an downcased value', () => {\n+      expect(Transforms.downcase('FOOBAR')).toEqual('foobar')\n+    })\n+  })\n+})"
    },
    {
      "sha": "3f29f8cbfbf2633ecd469e3af8c0595d5a64326f",
      "filename": "test/utils/coverage.js",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/utils/coverage.js",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/utils/coverage.js",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/utils/coverage.js?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -7,7 +7,7 @@ const path = require('path')\n const opts = {\n   badgeFileName: 'coverage',\n   destinationDir: __dirname,\n-  istanbulReportFile: path.resolve(__dirname + '/../../coverage', 'cobertura-coverage.xml'),\n+  istanbulReportFile: path.resolve(__dirname, '../../coverage', 'cobertura-coverage.xml'),\n   thresholds: {\n     excellent: 90, // overall percent >= excellent, green badge\n     good: 60 // overall percent < excellent and >= good, yellow badge\n@@ -21,16 +21,18 @@ coberturaBadger(opts, function parsingResults(err, badgeStatus) {\n     console.log('An error occurred: ' + err.message)\n   }\n \n-  const readme = path.resolve(__dirname + '/../../README.md')\n+  const readme = path.resolve(__dirname, '../../README.md')\n   const badgeUrl = badgeStatus.url // e.g. http://img.shields.io/badge/coverage-60%-yellow.svg\n \n   // open the README.md and add this url\n-  fs.readFile(readme, {encoding: 'utf-8'}, function (err, body) {\n-    body = body.replace(/(!\\[coverage\\]\\()(.+?)(\\))/g, function(whole, a, b, c) {\n-      return a + badgeUrl\n+  fs.readFile(readme, {encoding: 'utf-8'}, (err, body) => {\n+    if (err) console.log(err.toString())\n+\n+    body = body.replace(/(!\\[coverage\\]\\()(.+?)(\\))/g, (whole, a, b, c) => {\n+      return a + badgeUrl + c\n     })\n \n-    fs.writeFile(readme, body, {encoding: 'utf-8'}, function (err) {\n+    fs.writeFile(readme, body, {encoding: 'utf-8'}, (err) => {\n       if (err) console.log(err.toString())\n \n       console.log('Coverage badge successfully added to ' + readme)"
    },
    {
      "sha": "02d44a7033637a4a2ec94f5c7d2a2db8e9fab4b5",
      "filename": "test/utils/coverage.svg",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/eduardoboucas/staticman/blob/2be29f73fa0688e02770b9f118288b6e0e617b01/test/utils/coverage.svg",
      "raw_url": "https://github.com/eduardoboucas/staticman/raw/2be29f73fa0688e02770b9f118288b6e0e617b01/test/utils/coverage.svg",
      "contents_url": "https://api.github.com/repos/eduardoboucas/staticman/contents/test/utils/coverage.svg?ref=2be29f73fa0688e02770b9f118288b6e0e617b01",
      "patch": "@@ -1 +1 @@\n-<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"94\" height=\"20\"><linearGradient id=\"b\" x2=\"0\" y2=\"100%\"><stop offset=\"0\" stop-color=\"#bbb\" stop-opacity=\".1\"/><stop offset=\"1\" stop-opacity=\".1\"/></linearGradient><clipPath id=\"a\"><rect width=\"94\" height=\"20\" rx=\"3\" fill=\"#fff\"/></clipPath><g clip-path=\"url(#a)\"><path fill=\"#555\" d=\"M0 0h59v20H0z\"/><path fill=\"#e05d44\" d=\"M59 0h35v20H59z\"/><path fill=\"url(#b)\" d=\"M0 0h94v20H0z\"/></g><g fill=\"#fff\" text-anchor=\"middle\" font-family=\"DejaVu Sans,Verdana,Geneva,sans-serif\" font-size=\"110\"><text x=\"305\" y=\"150\" fill=\"#010101\" fill-opacity=\".3\" transform=\"scale(.1)\" textLength=\"490\">coverage</text><text x=\"305\" y=\"140\" transform=\"scale(.1)\" textLength=\"490\">coverage</text><text x=\"755\" y=\"150\" fill=\"#010101\" fill-opacity=\".3\" transform=\"scale(.1)\" textLength=\"250\">53%</text><text x=\"755\" y=\"140\" transform=\"scale(.1)\" textLength=\"250\">53%</text></g> </svg>\n\\ No newline at end of file\n+<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"94\" height=\"20\"><linearGradient id=\"b\" x2=\"0\" y2=\"100%\"><stop offset=\"0\" stop-color=\"#bbb\" stop-opacity=\".1\"/><stop offset=\"1\" stop-opacity=\".1\"/></linearGradient><clipPath id=\"a\"><rect width=\"94\" height=\"20\" rx=\"3\" fill=\"#fff\"/></clipPath><g clip-path=\"url(#a)\"><path fill=\"#555\" d=\"M0 0h59v20H0z\"/><path fill=\"#dfb317\" d=\"M59 0h35v20H59z\"/><path fill=\"url(#b)\" d=\"M0 0h94v20H0z\"/></g><g fill=\"#fff\" text-anchor=\"middle\" font-family=\"DejaVu Sans,Verdana,Geneva,sans-serif\" font-size=\"110\"> <text x=\"305\" y=\"150\" fill=\"#010101\" fill-opacity=\".3\" transform=\"scale(.1)\" textLength=\"490\">coverage</text><text x=\"305\" y=\"140\" transform=\"scale(.1)\" textLength=\"490\">coverage</text><text x=\"755\" y=\"150\" fill=\"#010101\" fill-opacity=\".3\" transform=\"scale(.1)\" textLength=\"250\">82%</text><text x=\"755\" y=\"140\" transform=\"scale(.1)\" textLength=\"250\">82%</text></g> </svg>\n\\ No newline at end of file"
    }
  ]
}
