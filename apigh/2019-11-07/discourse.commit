{
  "sha": "60a235d128e78b43e33a859b2c9534d0d96ebce3",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo2MGEyMzVkMTI4ZTc4YjQzZTMzYTg1OWIyYzk1MzRkMGQ5NmViY2Uz",
  "commit": {
    "author": {
      "name": "David Taylor",
      "email": "david@taylorhq.com",
      "date": "2019-11-07T15:47:16Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-11-07T15:47:16Z"
    },
    "message": "DEV: Allow execute_command to receive a block (#8303)\n\nThis makes it easy to run multiple commands with the same keyword arguments. The main use is for using `chdir` across multiple commands. The `Dir.chdir` method is not concurrency safe because it switches the working directory of the entire process.",
    "tree": {
      "sha": "b7e74ba3d1b07fa0ed5cbd92a3b5e6ff49be89fb",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/b7e74ba3d1b07fa0ed5cbd92a3b5e6ff49be89fb"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/60a235d128e78b43e33a859b2c9534d0d96ebce3",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdxDyECRBK7hj4Ov3rIwAAdHIIAHbd7Ao+o5tPasGVPaYxTEoO\nr6Sl1OaGE0mtMhjs2w7EazNyd7D9lMWIpZ3+X2x/vtCaM3Qn2W6Uq4Z2jggR0eai\n/gWQVdin9fTb8wDBvf0TzCK7Wl/WpKgJWl5dzsGQiV25DoaOrxIhMi4Uqb0sKkBa\nHclRxjZfcqBIAF6qFKOdV/S6LmBE4jXLUvydmKx+U3Q1t39IxMz/oEEM+uMtFTYy\nr6JjBYmrdlNmKL1JOGGIUFF4wqOP5PZnZb65Nsua7pwclp/F/al0ocpdtZJH/8nj\nvAqFP77fw4ASThXbpva2hj6nRoHnDEYJFrjJMwvMWTD7lspWuiSJdq5JsotDE/k=\n=o6Kt\n-----END PGP SIGNATURE-----\n",
      "payload": "tree b7e74ba3d1b07fa0ed5cbd92a3b5e6ff49be89fb\nparent f79796fcacb683287951bc39c7828feaa78ae3ab\nauthor David Taylor <david@taylorhq.com> 1573141636 +0000\ncommitter GitHub <noreply@github.com> 1573141636 +0000\n\nDEV: Allow execute_command to receive a block (#8303)\n\nThis makes it easy to run multiple commands with the same keyword arguments. The main use is for using `chdir` across multiple commands. The `Dir.chdir` method is not concurrency safe because it switches the working directory of the entire process."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/60a235d128e78b43e33a859b2c9534d0d96ebce3",
  "html_url": "https://github.com/discourse/discourse/commit/60a235d128e78b43e33a859b2c9534d0d96ebce3",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/60a235d128e78b43e33a859b2c9534d0d96ebce3/comments",
  "author": {
    "login": "davidtaylorhq",
    "id": 6270921,
    "node_id": "MDQ6VXNlcjYyNzA5MjE=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/6270921?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davidtaylorhq",
    "html_url": "https://github.com/davidtaylorhq",
    "followers_url": "https://api.github.com/users/davidtaylorhq/followers",
    "following_url": "https://api.github.com/users/davidtaylorhq/following{/other_user}",
    "gists_url": "https://api.github.com/users/davidtaylorhq/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davidtaylorhq/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davidtaylorhq/subscriptions",
    "organizations_url": "https://api.github.com/users/davidtaylorhq/orgs",
    "repos_url": "https://api.github.com/users/davidtaylorhq/repos",
    "events_url": "https://api.github.com/users/davidtaylorhq/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davidtaylorhq/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f79796fcacb683287951bc39c7828feaa78ae3ab",
      "url": "https://api.github.com/repos/discourse/discourse/commits/f79796fcacb683287951bc39c7828feaa78ae3ab",
      "html_url": "https://github.com/discourse/discourse/commit/f79796fcacb683287951bc39c7828feaa78ae3ab"
    }
  ],
  "stats": {
    "total": 86,
    "additions": 78,
    "deletions": 8
  },
  "files": [
    {
      "sha": "8e8d7f9b5b7f6f68b99a0d659feffb7720e5344b",
      "filename": "lib/discourse.rb",
      "status": "modified",
      "additions": 40,
      "deletions": 8,
      "changes": 48,
      "blob_url": "https://github.com/discourse/discourse/blob/60a235d128e78b43e33a859b2c9534d0d96ebce3/lib/discourse.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/60a235d128e78b43e33a859b2c9534d0d96ebce3/lib/discourse.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/discourse.rb?ref=60a235d128e78b43e33a859b2c9534d0d96ebce3",
      "patch": "@@ -23,20 +23,52 @@ class SidekiqExceptionHandler\n   end\n \n   class Utils\n-    def self.execute_command(*command, failure_message: \"\", success_status_codes: [0], chdir: \".\")\n-      stdout, stderr, status = Open3.capture3(*command, chdir: chdir)\n-\n-      if !status.exited? || !success_status_codes.include?(status.exitstatus)\n-        failure_message = \"#{failure_message}\\n\" if !failure_message.blank?\n-        raise \"#{caller[0]}: #{failure_message}#{stderr}\"\n+    # Usage:\n+    #   Discourse::Utils.execute_command(\"pwd\", chdir: 'mydirectory')\n+    # or with a block\n+    #   Discourse::Utils.execute_command(chdir: 'mydirectory') do |runner|\n+    #     runner.exec(\"pwd\")\n+    #   end\n+    def self.execute_command(*command, **args)\n+      runner = CommandRunner.new(**args)\n+\n+      if block_given?\n+        raise RuntimeError.new(\"Cannot pass command and block to execute_command\") if command.present?\n+        yield runner\n+      else\n+        runner.exec(*command)\n       end\n-\n-      stdout\n     end\n \n     def self.pretty_logs(logs)\n       logs.join(\"\\n\".freeze)\n     end\n+\n+    private\n+\n+    class CommandRunner\n+      def initialize(**init_params)\n+        @init_params = init_params\n+      end\n+\n+      def exec(*command, **exec_params)\n+        raise RuntimeError.new(\"Cannot specify same parameters at block and command level\") if (@init_params.keys & exec_params.keys).present?\n+        execute_command(*command, **@init_params.merge(exec_params))\n+      end\n+\n+      private\n+\n+      def execute_command(*command, failure_message: \"\", success_status_codes: [0], chdir: \".\")\n+        stdout, stderr, status = Open3.capture3(*command, chdir: chdir)\n+\n+        if !status.exited? || !success_status_codes.include?(status.exitstatus)\n+          failure_message = \"#{failure_message}\\n\" if !failure_message.blank?\n+          raise \"#{caller[0]}: #{failure_message}#{stderr}\"\n+        end\n+\n+        stdout\n+      end\n+    end\n   end\n \n   # Log an exception."
    },
    {
      "sha": "0049e1de994120b6717e5a73e8c363bbb6215084",
      "filename": "spec/components/discourse_spec.rb",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/discourse/discourse/blob/60a235d128e78b43e33a859b2c9534d0d96ebce3/spec/components/discourse_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/60a235d128e78b43e33a859b2c9534d0d96ebce3/spec/components/discourse_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/discourse_spec.rb?ref=60a235d128e78b43e33a859b2c9534d0d96ebce3",
      "patch": "@@ -391,4 +391,42 @@ def old_method_caller(m)\n     end\n   end\n \n+  describe \"Utils.execute_command\" do\n+    it \"works for individual commands\" do\n+      expect(Discourse::Utils.execute_command(\"pwd\").strip).to eq(Rails.root.to_s)\n+      expect(Discourse::Utils.execute_command(\"pwd\", chdir: \"plugins\").strip).to eq(\"#{Rails.root.to_s}/plugins\")\n+    end\n+\n+    it \"works with a block\" do\n+      Discourse::Utils.execute_command do |runner|\n+        expect(runner.exec(\"pwd\").strip).to eq(Rails.root.to_s)\n+      end\n+\n+      result = Discourse::Utils.execute_command(chdir: \"plugins\") do |runner|\n+        expect(runner.exec(\"pwd\").strip).to eq(\"#{Rails.root.to_s}/plugins\")\n+        runner.exec(\"pwd\")\n+      end\n+\n+      # Should return output of block\n+      expect(result.strip).to eq(\"#{Rails.root.to_s}/plugins\")\n+    end\n+\n+    it \"does not leak chdir between threads\" do\n+      has_done_chdir = false\n+      has_checked_chdir = false\n+\n+      thread = Thread.new do\n+        Discourse::Utils.execute_command(chdir: \"plugins\") do\n+          has_done_chdir = true\n+          sleep(0.01) until has_checked_chdir\n+        end\n+      end\n+\n+      sleep(0.01) until has_done_chdir\n+      expect(Discourse::Utils.execute_command(\"pwd\").strip).to eq(Rails.root.to_s)\n+      has_checked_chdir = true\n+      thread.join\n+    end\n+  end\n+\n end"
    }
  ]
}
