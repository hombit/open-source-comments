{
  "sha": "720101b3ee89b92a016e4875e213d50cbb4e1135",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo3MjAxMDFiM2VlODliOTJhMDE2ZTQ4NzVlMjEzZDUwY2JiNGUxMTM1",
  "commit": {
    "author": {
      "name": "Daniel Waterworth",
      "email": "me@danielwaterworth.com",
      "date": "2019-11-25T16:42:01Z"
    },
    "committer": {
      "name": "Daniel Waterworth",
      "email": "me@danielwaterworth.com",
      "date": "2019-11-25T16:50:54Z"
    },
    "message": "FIX: Update site data when we receive a list of categories\n\nWhen we receive a list of categories, we should store them so that we\nare able to query them in the browser without a page refresh.\n\nThis removes a previous fix for the same issue that was much less\ngeneral.",
    "tree": {
      "sha": "6a21b659127fe9f55d68936c4930c5fd3d6d8654",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/6a21b659127fe9f55d68936c4930c5fd3d6d8654"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/720101b3ee89b92a016e4875e213d50cbb4e1135",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/720101b3ee89b92a016e4875e213d50cbb4e1135",
  "html_url": "https://github.com/discourse/discourse/commit/720101b3ee89b92a016e4875e213d50cbb4e1135",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/720101b3ee89b92a016e4875e213d50cbb4e1135/comments",
  "author": {
    "login": "danielwaterworth",
    "id": 663767,
    "node_id": "MDQ6VXNlcjY2Mzc2Nw==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/663767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danielwaterworth",
    "html_url": "https://github.com/danielwaterworth",
    "followers_url": "https://api.github.com/users/danielwaterworth/followers",
    "following_url": "https://api.github.com/users/danielwaterworth/following{/other_user}",
    "gists_url": "https://api.github.com/users/danielwaterworth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danielwaterworth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danielwaterworth/subscriptions",
    "organizations_url": "https://api.github.com/users/danielwaterworth/orgs",
    "repos_url": "https://api.github.com/users/danielwaterworth/repos",
    "events_url": "https://api.github.com/users/danielwaterworth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danielwaterworth/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "danielwaterworth",
    "id": 663767,
    "node_id": "MDQ6VXNlcjY2Mzc2Nw==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/663767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danielwaterworth",
    "html_url": "https://github.com/danielwaterworth",
    "followers_url": "https://api.github.com/users/danielwaterworth/followers",
    "following_url": "https://api.github.com/users/danielwaterworth/following{/other_user}",
    "gists_url": "https://api.github.com/users/danielwaterworth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danielwaterworth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danielwaterworth/subscriptions",
    "organizations_url": "https://api.github.com/users/danielwaterworth/orgs",
    "repos_url": "https://api.github.com/users/danielwaterworth/repos",
    "events_url": "https://api.github.com/users/danielwaterworth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danielwaterworth/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5c5d8a307a816afcda4b97eecf49b836fc9ecb01",
      "url": "https://api.github.com/repos/discourse/discourse/commits/5c5d8a307a816afcda4b97eecf49b836fc9ecb01",
      "html_url": "https://github.com/discourse/discourse/commit/5c5d8a307a816afcda4b97eecf49b836fc9ecb01"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 9,
    "deletions": 23
  },
  "files": [
    {
      "sha": "b8437f706dd489e21568acb00a034a1fe03ed548",
      "filename": "app/assets/javascripts/discourse/models/category-list.js.es6",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/720101b3ee89b92a016e4875e213d50cbb4e1135/app/assets/javascripts/discourse/models/category-list.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/720101b3ee89b92a016e4875e213d50cbb4e1135/app/assets/javascripts/discourse/models/category-list.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/models/category-list.js.es6?ref=720101b3ee89b92a016e4875e213d50cbb4e1135",
      "patch": "@@ -2,6 +2,7 @@ import PreloadStore from \"preload-store\";\n import { ajax } from \"discourse/lib/ajax\";\n import Topic from \"discourse/models/topic\";\n import Category from \"discourse/models/category\";\n+import Site from \"discourse/models/site\";\n \n const CategoryList = Ember.ArrayProxy.extend({\n   init() {\n@@ -76,7 +77,9 @@ CategoryList.reopenClass({\n           break;\n       }\n \n-      categories.pushObject(store.createRecord(\"category\", c));\n+      const record = Site.current().updateCategory(c);\n+      record.setupGroupsAndPermissions();\n+      categories.pushObject(record);\n     });\n     return categories;\n   },"
    },
    {
      "sha": "5f9065d3d88b951ca5a88b2df3062b57f3b5c813",
      "filename": "app/assets/javascripts/discourse/models/site.js.es6",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/720101b3ee89b92a016e4875e213d50cbb4e1135/app/assets/javascripts/discourse/models/site.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/720101b3ee89b92a016e4875e213d50cbb4e1135/app/assets/javascripts/discourse/models/site.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/models/site.js.es6?ref=720101b3ee89b92a016e4875e213d50cbb4e1135",
      "patch": "@@ -87,7 +87,7 @@ const Site = RestModel.extend({\n   },\n \n   // Returns it in the correct order, by setting\n-  @discourseComputed\n+  @discourseComputed(\"categories.[]\")\n   categoriesList() {\n     return this.siteSettings.fixed_category_positions\n       ? this.categories\n@@ -123,11 +123,13 @@ const Site = RestModel.extend({\n \n     if (existingCategory) {\n       existingCategory.setProperties(newCategory);\n+      return existingCategory;\n     } else {\n       // TODO insert in right order?\n       newCategory = this.store.createRecord(\"category\", newCategory);\n       categories.pushObject(newCategory);\n       this.categoriesById[categoryId] = newCategory;\n+      return newCategory;\n     }\n   }\n });"
    },
    {
      "sha": "d360c11eb0567707d907422958237d467a55f0ca",
      "filename": "app/assets/javascripts/discourse/routes/build-category-route.js.es6",
      "status": "modified",
      "additions": 2,
      "deletions": 21,
      "changes": 23,
      "blob_url": "https://github.com/discourse/discourse/blob/720101b3ee89b92a016e4875e213d50cbb4e1135/app/assets/javascripts/discourse/routes/build-category-route.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/720101b3ee89b92a016e4875e213d50cbb4e1135/app/assets/javascripts/discourse/routes/build-category-route.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/routes/build-category-route.js.es6?ref=720101b3ee89b92a016e4875e213d50cbb4e1135",
      "patch": "@@ -21,28 +21,9 @@ export default (filterArg, params) => {\n         modelParams.slug,\n         modelParams.parentSlug\n       );\n-      if (!category) {\n-        return Category.reloadBySlug(\n-          modelParams.slug,\n-          modelParams.parentSlug\n-        ).then(atts => {\n-          if (modelParams.parentSlug) {\n-            atts.category.parentCategory = Category.findBySlug(\n-              modelParams.parentSlug\n-            );\n-          }\n-          const record = this.store.createRecord(\"category\", atts.category);\n-          record.setupGroupsAndPermissions();\n-          this.site.updateCategory(record);\n-          return {\n-            category: Category.findBySlug(\n-              modelParams.slug,\n-              modelParams.parentSlug\n-            )\n-          };\n-        });\n+      if (category) {\n+        return { category };\n       }\n-      return { category };\n     },\n \n     afterModel(model, transition) {"
    }
  ]
}
