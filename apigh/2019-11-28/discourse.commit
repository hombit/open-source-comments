{
  "sha": "11a73b3f155ed82676ab7770eb99f5dd8c88f84f",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODoxMWE3M2IzZjE1NWVkODI2NzZhYjc3NzBlYjk5ZjVkZDhjODhmODRm",
  "commit": {
    "author": {
      "name": "Daniel Waterworth",
      "email": "me@danielwaterworth.com",
      "date": "2019-11-28T10:54:06Z"
    },
    "committer": {
      "name": "Daniel Waterworth",
      "email": "me@danielwaterworth.com",
      "date": "2019-11-28T17:58:04Z"
    },
    "message": "DEV: Client side routing for routes with tag and category context\n\nThis moves also moves some of the logic to Category.",
    "tree": {
      "sha": "2f06a58f0379db3ceadf1e3cccd0dd34953a2422",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/2f06a58f0379db3ceadf1e3cccd0dd34953a2422"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/11a73b3f155ed82676ab7770eb99f5dd8c88f84f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/11a73b3f155ed82676ab7770eb99f5dd8c88f84f",
  "html_url": "https://github.com/discourse/discourse/commit/11a73b3f155ed82676ab7770eb99f5dd8c88f84f",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/11a73b3f155ed82676ab7770eb99f5dd8c88f84f/comments",
  "author": {
    "login": "danielwaterworth",
    "id": 663767,
    "node_id": "MDQ6VXNlcjY2Mzc2Nw==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/663767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danielwaterworth",
    "html_url": "https://github.com/danielwaterworth",
    "followers_url": "https://api.github.com/users/danielwaterworth/followers",
    "following_url": "https://api.github.com/users/danielwaterworth/following{/other_user}",
    "gists_url": "https://api.github.com/users/danielwaterworth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danielwaterworth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danielwaterworth/subscriptions",
    "organizations_url": "https://api.github.com/users/danielwaterworth/orgs",
    "repos_url": "https://api.github.com/users/danielwaterworth/repos",
    "events_url": "https://api.github.com/users/danielwaterworth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danielwaterworth/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "danielwaterworth",
    "id": 663767,
    "node_id": "MDQ6VXNlcjY2Mzc2Nw==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/663767?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danielwaterworth",
    "html_url": "https://github.com/danielwaterworth",
    "followers_url": "https://api.github.com/users/danielwaterworth/followers",
    "following_url": "https://api.github.com/users/danielwaterworth/following{/other_user}",
    "gists_url": "https://api.github.com/users/danielwaterworth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danielwaterworth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danielwaterworth/subscriptions",
    "organizations_url": "https://api.github.com/users/danielwaterworth/orgs",
    "repos_url": "https://api.github.com/users/danielwaterworth/repos",
    "events_url": "https://api.github.com/users/danielwaterworth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danielwaterworth/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4eb8d1e71727e71c7f5ac892425a8e66c878964c",
      "url": "https://api.github.com/repos/discourse/discourse/commits/4eb8d1e71727e71c7f5ac892425a8e66c878964c",
      "html_url": "https://github.com/discourse/discourse/commit/4eb8d1e71727e71c7f5ac892425a8e66c878964c"
    }
  ],
  "stats": {
    "total": 130,
    "additions": 77,
    "deletions": 53
  },
  "files": [
    {
      "sha": "57d8f2dcc6a18288598a0270c443b035d32eb17b",
      "filename": "app/assets/javascripts/discourse/models/category.js.es6",
      "status": "modified",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/discourse/discourse/blob/11a73b3f155ed82676ab7770eb99f5dd8c88f84f/app/assets/javascripts/discourse/models/category.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/11a73b3f155ed82676ab7770eb99f5dd8c88f84f/app/assets/javascripts/discourse/models/category.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/models/category.js.es6?ref=11a73b3f155ed82676ab7770eb99f5dd8c88f84f",
      "patch": "@@ -287,6 +287,58 @@ Category.reopenClass({\n     return categories;\n   },\n \n+  findBySlugAndParent(slug, parentCategory) {\n+    return Category.list().find(category => {\n+      if (Discourse.SiteSettings.slug_generation_method === \"encoded\") {\n+        slug = encodeURI(slug);\n+      }\n+\n+      return (\n+        category.slug === slug &&\n+        (category.parentCategory || null) === parentCategory\n+      );\n+    });\n+  },\n+\n+  findBySlugPath(slugPath) {\n+    let category = null;\n+\n+    for (const slug of slugPath) {\n+      category = this.findBySlugAndParent(slug, category);\n+\n+      if (!category) {\n+        return null;\n+      }\n+    }\n+\n+    return category;\n+  },\n+\n+  findBySlugPathWithID(slugPathWithID) {\n+    const parts = slugPathWithID.split(\"/\");\n+    let category = null;\n+\n+    if (parts.length > 0 && parts[parts.length - 1].match(/^\\d+$/)) {\n+      const id = parseInt(parts.pop(), 10);\n+\n+      category = Category.findById(id);\n+    } else {\n+      category = Category.findBySlugPath(parts);\n+\n+      if (\n+        !category &&\n+        parts.length > 0 &&\n+        parts[parts.length - 1].match(/^\\d+-/)\n+      ) {\n+        const id = parseInt(parts.pop(), 10);\n+\n+        category = Category.findById(id);\n+      }\n+    }\n+\n+    return category;\n+  },\n+\n   findBySlug(slug, parentSlug) {\n     const categories = Category.list();\n     let category;"
    },
    {
      "sha": "3dc0d5787ab52d73a781269fea7c0df9598a4a03",
      "filename": "app/assets/javascripts/discourse/routes/app-route-map.js.es6",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/discourse/discourse/blob/11a73b3f155ed82676ab7770eb99f5dd8c88f84f/app/assets/javascripts/discourse/routes/app-route-map.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/11a73b3f155ed82676ab7770eb99f5dd8c88f84f/app/assets/javascripts/discourse/routes/app-route-map.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/routes/app-route-map.js.es6?ref=11a73b3f155ed82676ab7770eb99f5dd8c88f84f",
      "patch": "@@ -211,24 +211,22 @@ export default function() {\n \n   this.route(\"tags\", { resetNamespace: true }, function() {\n     this.route(\"show\", { path: \"/:tag_id\" });\n-    this.route(\"showCategory\", { path: \"/c/:category/:tag_id\" });\n-    this.route(\"showCategoryNone\", { path: \"/c/:category/none/:tag_id\" });\n-    this.route(\"showParentCategory\", {\n-      path: \"/c/:parent_category/:category/:tag_id\"\n+    this.route(\"showCategory\", {\n+      path: \"/c/*category_slug_path_with_id/:tag_id\"\n+    });\n+    this.route(\"showCategoryNone\", {\n+      path: \"/c/*category_slug_path_with_id/none/:tag_id\"\n     });\n \n     Site.currentProp(\"filters\").forEach(filter => {\n       this.route(\"show\" + filter.capitalize(), {\n         path: \"/:tag_id/l/\" + filter\n       });\n       this.route(\"showCategory\" + filter.capitalize(), {\n-        path: \"/c/:category/:tag_id/l/\" + filter\n+        path: \"/c/*category_slug_path_with_id/:tag_id/l/\" + filter\n       });\n       this.route(\"showCategoryNone\" + filter.capitalize(), {\n-        path: \"/c/:category/none/:tag_id/l/\" + filter\n-      });\n-      this.route(\"showParentCategory\" + filter.capitalize(), {\n-        path: \"/c/:parent_category/:category/:tag_id/l/\" + filter\n+        path: \"/c/*category_slug_path_with_id/none/:tag_id/l/\" + filter\n       });\n     });\n     this.route(\"intersection\", {"
    },
    {
      "sha": "e487570d5ab484fdaf5638fa2e5e3058b8b5e0b0",
      "filename": "app/assets/javascripts/discourse/routes/build-category-route.js.es6",
      "status": "modified",
      "additions": 3,
      "deletions": 22,
      "changes": 25,
      "blob_url": "https://github.com/discourse/discourse/blob/11a73b3f155ed82676ab7770eb99f5dd8c88f84f/app/assets/javascripts/discourse/routes/build-category-route.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/11a73b3f155ed82676ab7770eb99f5dd8c88f84f/app/assets/javascripts/discourse/routes/build-category-route.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/routes/build-category-route.js.es6?ref=11a73b3f155ed82676ab7770eb99f5dd8c88f84f",
      "patch": "@@ -33,28 +33,9 @@ export default (filterArg, params) => {\n     model(modelParams) {\n       modelParams = this.serialize(modelParams);\n \n-      const parts = modelParams.category_slug_path_with_id.split(\"/\");\n-      let category = null;\n-\n-      if (parts.length > 0 && parts[parts.length - 1].match(/^\\d+$/)) {\n-        const id = parseInt(parts.pop(), 10);\n-\n-        category = Category.findById(id);\n-      } else {\n-        const [slug, parentSlug] = [...parts].reverse();\n-\n-        category = Category.findBySlug(slug, parentSlug);\n-\n-        if (\n-          !category &&\n-          parts.length > 0 &&\n-          parts[parts.length - 1].match(/^\\d+-/)\n-        ) {\n-          const id = parseInt(parts.pop(), 10);\n-\n-          category = Category.findById(id);\n-        }\n-      }\n+      const category = Category.findBySlugPathWithID(\n+        modelParams.category_slug_path_with_id\n+      );\n \n       if (category) {\n         return { category };"
    },
    {
      "sha": "8616b6959d51cc7f789d1c479d155a42f3281983",
      "filename": "app/assets/javascripts/discourse/routes/tags-show.js.es6",
      "status": "modified",
      "additions": 15,
      "deletions": 22,
      "changes": 37,
      "blob_url": "https://github.com/discourse/discourse/blob/11a73b3f155ed82676ab7770eb99f5dd8c88f84f/app/assets/javascripts/discourse/routes/tags-show.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/11a73b3f155ed82676ab7770eb99f5dd8c88f84f/app/assets/javascripts/discourse/routes/tags-show.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/routes/tags-show.js.es6?ref=11a73b3f155ed82676ab7770eb99f5dd8c88f84f",
      "patch": "@@ -39,12 +39,7 @@ export default DiscourseRoute.extend(FilterModeMixin, {\n \n     this.set(\"filterType\", this.navMode.split(\"/\")[0]);\n \n-    if (params.category) {\n-      this.set(\"categorySlug\", params.category);\n-    }\n-    if (params.parent_category) {\n-      this.set(\"parentCategorySlug\", params.parent_category);\n-    }\n+    this.set(\"categorySlugPathWithID\", params.category_slug_path_with_id);\n \n     if (tag && tag.get(\"id\") !== \"none\" && this.currentUser) {\n       // If logged in, we should get the tag's user settings\n@@ -64,31 +59,29 @@ export default DiscourseRoute.extend(FilterModeMixin, {\n     controller.set(\"loading\", true);\n \n     const params = filterQueryParams(transition.to.queryParams, {});\n-    const categorySlug = this.categorySlug;\n-    const parentCategorySlug = this.parentCategorySlug;\n+    const category = this.categorySlugPathWithID\n+      ? Category.findBySlugPathWithID(this.categorySlugPathWithID)\n+      : null;\n     const topicFilter = this.navMode;\n     const tagId = tag ? tag.id.toLowerCase() : \"none\";\n     let filter;\n \n-    if (categorySlug) {\n-      const category = Category.findBySlug(categorySlug, parentCategorySlug);\n-      if (parentCategorySlug) {\n-        filter = `tags/c/${parentCategorySlug}/${categorySlug}/${tagId}/l/${topicFilter}`;\n-      } else if (this.noSubcategories) {\n-        filter = `tags/c/${categorySlug}/none/${tagId}/l/${topicFilter}`;\n-      } else {\n-        filter = `tags/c/${categorySlug}/${tagId}/l/${topicFilter}`;\n-      }\n-      if (category) {\n-        category.setupGroupsAndPermissions();\n-        this.set(\"category\", category);\n+    if (category) {\n+      category.setupGroupsAndPermissions();\n+      this.set(\"category\", category);\n+      filter = `tags/c/${Category.slugFor(category)}`;\n+\n+      if (this.noSubcategories) {\n+        filter += \"/none\";\n       }\n+\n+      filter += `/${tagId}/l/${topicFilter}`;\n     } else if (this.additionalTags) {\n-      filter = `tags/intersection/${tagId}/${this.additionalTags.join(\"/\")}`;\n       this.set(\"category\", null);\n+      filter = `tags/intersection/${tagId}/${this.additionalTags.join(\"/\")}`;\n     } else {\n-      filter = `tags/${tagId}/l/${topicFilter}`;\n       this.set(\"category\", null);\n+      filter = `tags/${tagId}/l/${topicFilter}`;\n     }\n \n     return findTopicList(this.store, this.topicTrackingState, filter, params, {"
    }
  ]
}
