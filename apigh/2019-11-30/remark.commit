{
  "sha": "ea8ac08c72a82a2ce8699ccd1ab049f565da4d25",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmVhOGFjMDhjNzJhODJhMmNlODY5OWNjZDFhYjA0OWY1NjVkYTRkMjU=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-11-23T19:22:17Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-11-23T19:22:17Z"
    },
    "message": "Merge pull request #480 from paskal/email_interface_clarification\n\nSwitch notify.Submit to receive notify.Request instead of store.Comment",
    "tree": {
      "sha": "7c8b50443446c7ee407a1af6bd826650cd3c4dd3",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/7c8b50443446c7ee407a1af6bd826650cd3c4dd3"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2YbpCRBK7hj4Ov3rIwAAdHIIAHjXtU1ytGAsOr2y+uJx6NyB\njG2gNgrx8bouefhhT+4JTnHFh0sEPvs8h0IK6YxcdbeHj+3y7lq45Gx+oUIHTkwZ\nAwPPpGrKmuvPVzCipXwT4wRdooNAusbTqqBV+UOHCi4I8UbpAd5NYIdorbOvEppy\nkMzjeUSNLgV/SOxUGMZgHKvPlfyKCVgiRuY4vLNYQnCgeFikqSyb4Ga5Cton1Ox2\nF/eveWyp+N21EQO7oTAn/C9Bk+RtmQ1DR8EshW4iVIQvXVSzGDgaffTlkWhIJkSd\nCX0IF8ZXG3o7zzx7qdRamQqxaEMilIrUHT58jPFCLxFfbQY7rJ3qxyQ3lz+PavA=\n=Elke\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 7c8b50443446c7ee407a1af6bd826650cd3c4dd3\nparent ddd466ec41f07a1e725c3ac75fccff5f5c59435a\nparent 6c73a38c4994b57d93ec74851c6381f64d151aa1\nauthor Umputun <umputun@gmail.com> 1574536937 -0600\ncommitter GitHub <noreply@github.com> 1574536937 -0600\n\nMerge pull request #480 from paskal/email_interface_clarification\n\nSwitch notify.Submit to receive notify.Request instead of store.Comment"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25",
  "html_url": "https://github.com/umputun/remark/commit/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ddd466ec41f07a1e725c3ac75fccff5f5c59435a",
      "url": "https://api.github.com/repos/umputun/remark/commits/ddd466ec41f07a1e725c3ac75fccff5f5c59435a",
      "html_url": "https://github.com/umputun/remark/commit/ddd466ec41f07a1e725c3ac75fccff5f5c59435a"
    },
    {
      "sha": "6c73a38c4994b57d93ec74851c6381f64d151aa1",
      "url": "https://api.github.com/repos/umputun/remark/commits/6c73a38c4994b57d93ec74851c6381f64d151aa1",
      "html_url": "https://github.com/umputun/remark/commit/6c73a38c4994b57d93ec74851c6381f64d151aa1"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 47,
    "deletions": 48
  },
  "files": [
    {
      "sha": "8766089ea53ef66f1056e9b3a7d99e6bfc21bebb",
      "filename": "backend/app/notify/notify.go",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/umputun/remark/blob/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25/backend/app/notify/notify.go",
      "raw_url": "https://github.com/umputun/remark/raw/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25/backend/app/notify/notify.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/notify/notify.go?ref=ea8ac08c72a82a2ce8699ccd1ab049f565da4d25",
      "patch": "@@ -16,7 +16,7 @@ import (\n type Service struct {\n \tdataService  Store\n \tdestinations []Destination\n-\tqueue        chan request\n+\tqueue        chan Request\n \n \tclosed uint32 // non-zero means closed. uses uint instead of bool for atomic\n \tctx    context.Context\n@@ -26,16 +26,16 @@ type Service struct {\n // Destination defines interface for a given destination service, like telegram, email and so on\n type Destination interface {\n \tfmt.Stringer\n-\tSend(ctx context.Context, req request) error\n+\tSend(ctx context.Context, req Request) error\n }\n \n // Store defines the minimal interface accessing stored comments used by notifier\n type Store interface {\n \tGet(locator store.Locator, id string, user store.User) (store.Comment, error)\n }\n \n-type request struct {\n-\tcomment store.Comment\n+type Request struct {\n+\tComment store.Comment\n \tparent  store.Comment\n }\n \n@@ -50,7 +50,7 @@ func NewService(dataService Store, size int, destinations ...Destination) *Servi\n \tctx, cancel := context.WithCancel(context.Background())\n \tres := Service{\n \t\tdataService:  dataService,\n-\t\tqueue:        make(chan request, size),\n+\t\tqueue:        make(chan Request, size),\n \t\tdestinations: destinations,\n \t\tctx:          ctx,\n \t\tcancel:       cancel,\n@@ -62,21 +62,20 @@ func NewService(dataService Store, size int, destinations ...Destination) *Servi\n \treturn &res\n }\n \n-// Submit comment to internal channel if not busy, drop if can't send\n-func (s *Service) Submit(comment store.Comment) {\n+// Submit Request to internal channel if not busy, drop if can't send\n+func (s *Service) Submit(req Request) {\n \tif len(s.destinations) == 0 || atomic.LoadUint32(&s.closed) != 0 {\n \t\treturn\n \t}\n-\tparentComment := store.Comment{}\n \tif s.dataService != nil {\n-\t\tif p, err := s.dataService.Get(comment.Locator, comment.ParentID, store.User{}); err == nil {\n-\t\t\tparentComment = p\n+\t\tif p, err := s.dataService.Get(req.Comment.Locator, req.Comment.ParentID, store.User{}); err == nil {\n+\t\t\treq.parent = p\n \t\t}\n \t}\n \tselect {\n-\tcase s.queue <- request{comment: comment, parent: parentComment}:\n+\tcase s.queue <- req:\n \tdefault:\n-\t\tlog.Printf(\"[WARN] can't send comment notification to queue, %+v\", comment)\n+\t\tlog.Printf(\"[WARN] can't send comment notification to queue, %+v\", req.Comment)\n \t}\n }\n "
    },
    {
      "sha": "bddc625ba73ec43439f0a3a6af26a62b1244f2d7",
      "filename": "backend/app/notify/notify_test.go",
      "status": "modified",
      "additions": 24,
      "deletions": 24,
      "changes": 48,
      "blob_url": "https://github.com/umputun/remark/blob/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25/backend/app/notify/notify_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25/backend/app/notify/notify_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/notify/notify_test.go?ref=ea8ac08c72a82a2ce8699ccd1ab049f565da4d25",
      "patch": "@@ -19,9 +19,9 @@ import (\n func TestService_NoDestinations(t *testing.T) {\n \ts := NewService(nil, 1)\n \tassert.NotNil(t, s)\n-\ts.Submit(store.Comment{ID: \"123\"})\n-\ts.Submit(store.Comment{ID: \"123\"})\n-\ts.Submit(store.Comment{ID: \"123\"})\n+\ts.Submit(Request{Comment: store.Comment{ID: \"123\"}})\n+\ts.Submit(Request{Comment: store.Comment{ID: \"123\"}})\n+\ts.Submit(Request{Comment: store.Comment{ID: \"123\"}})\n \ts.Close()\n }\n \n@@ -30,35 +30,35 @@ func TestService_WithDestinations(t *testing.T) {\n \ts := NewService(nil, 1, d1, d2)\n \tassert.NotNil(t, s)\n \n-\ts.Submit(store.Comment{ID: \"100\"})\n+\ts.Submit(Request{Comment: store.Comment{ID: \"100\"}})\n \ttime.Sleep(time.Millisecond * 110)\n-\ts.Submit(store.Comment{ID: \"101\"})\n+\ts.Submit(Request{Comment: store.Comment{ID: \"101\"}})\n \ttime.Sleep(time.Millisecond * 110)\n-\ts.Submit(store.Comment{ID: \"102\"})\n+\ts.Submit(Request{Comment: store.Comment{ID: \"102\"}})\n \ttime.Sleep(time.Millisecond * 110)\n \ts.Close()\n \n \tassert.Equal(t, 3, len(d1.get()), \"got all comments to d1\")\n \tassert.Equal(t, 3, len(d2.get()), \"got all comments to d2\")\n \n-\tassert.Equal(t, \"100\", d1.get()[0].comment.ID)\n-\tassert.Equal(t, \"101\", d1.get()[1].comment.ID)\n-\tassert.Equal(t, \"102\", d1.get()[2].comment.ID)\n+\tassert.Equal(t, \"100\", d1.get()[0].Comment.ID)\n+\tassert.Equal(t, \"101\", d1.get()[1].Comment.ID)\n+\tassert.Equal(t, \"102\", d1.get()[2].Comment.ID)\n }\n \n func TestService_WithDrops(t *testing.T) {\n \td1, d2 := &mockDest{id: 1}, &mockDest{id: 2}\n \ts := NewService(nil, 1, d1, d2)\n \tassert.NotNil(t, s)\n \n-\ts.Submit(store.Comment{ID: \"100\"})\n-\ts.Submit(store.Comment{ID: \"101\"})\n+\ts.Submit(Request{Comment: store.Comment{ID: \"100\"}})\n+\ts.Submit(Request{Comment: store.Comment{ID: \"101\"}})\n \ttime.Sleep(time.Millisecond * 110)\n-\ts.Submit(store.Comment{ID: \"102\"})\n+\ts.Submit(Request{Comment: store.Comment{ID: \"102\"}})\n \ttime.Sleep(time.Millisecond * 110)\n \ts.Close()\n \n-\ts.Submit(store.Comment{ID: \"111\"}) // safe to send after close\n+\ts.Submit(Request{Comment: store.Comment{ID: \"111\"}}) // safe to send after close\n \n \tassert.Equal(t, 2, len(d1.get()), \"one comment dropped from d1\")\n \tassert.Equal(t, 2, len(d2.get()), \"one comment dropped from d2\")\n@@ -70,7 +70,7 @@ func TestService_Many(t *testing.T) {\n \tassert.NotNil(t, s)\n \n \tfor i := 0; i < 10; i++ {\n-\t\ts.Submit(store.Comment{ID: fmt.Sprintf(\"%d\", 100+i)})\n+\t\ts.Submit(Request{Comment: store.Comment{ID: fmt.Sprintf(\"%d\", 100+i)}})\n \t\ttime.Sleep(time.Millisecond * time.Duration(rand.Int31n(200)))\n \t}\n \ts.Close()\n@@ -93,52 +93,52 @@ func TestService_WithParent(t *testing.T) {\n \ts := NewService(dataStore, 1, dest)\n \tassert.NotNil(t, s)\n \n-\ts.Submit(store.Comment{ID: \"c1\", ParentID: \"p1\"})\n+\ts.Submit(Request{Comment: store.Comment{ID: \"c1\", ParentID: \"p1\"}})\n \ttime.Sleep(time.Millisecond * 110)\n-\ts.Submit(store.Comment{ID: \"c11\", ParentID: \"p11\"})\n+\ts.Submit(Request{Comment: store.Comment{ID: \"c11\", ParentID: \"p11\"}})\n \ttime.Sleep(time.Millisecond * 110)\n \ts.Close()\n \n \tdestRes := dest.get()\n \tassert.Equal(t, 2, len(destRes), \"two comment notified\")\n-\tassert.Equal(t, \"p1\", destRes[0].comment.ParentID)\n+\tassert.Equal(t, \"p1\", destRes[0].Comment.ParentID)\n \tassert.Equal(t, \"p1\", destRes[0].parent.ID)\n-\tassert.Equal(t, \"p11\", destRes[1].comment.ParentID)\n+\tassert.Equal(t, \"p11\", destRes[1].Comment.ParentID)\n \tassert.Equal(t, \"\", destRes[1].parent.ID)\n }\n \n func TestService_Nop(t *testing.T) {\n \ts := NopService\n-\ts.Submit(store.Comment{})\n+\ts.Submit(Request{Comment: store.Comment{}})\n \ts.Close()\n \tassert.Equal(t, uint32(1), atomic.LoadUint32(&s.closed))\n }\n \n type mockDest struct {\n-\tdata   []request\n+\tdata   []Request\n \tid     int\n \tclosed bool\n \tlock   sync.Mutex\n }\n \n-func (m *mockDest) Send(ctx context.Context, r request) error {\n+func (m *mockDest) Send(ctx context.Context, r Request) error {\n \tm.lock.Lock()\n \tdefer m.lock.Unlock()\n \tselect {\n \tcase <-time.After(100 * time.Millisecond):\n \t\tm.data = append(m.data, r)\n-\t\tlog.Printf(\"sent %s -> %d\", r.comment.ID, m.id)\n+\t\tlog.Printf(\"sent %s -> %d\", r.Comment.ID, m.id)\n \tcase <-ctx.Done():\n \t\tlog.Printf(\"ctx closed %d\", m.id)\n \t\tm.closed = true\n \t}\n \treturn nil\n }\n \n-func (m *mockDest) get() []request {\n+func (m *mockDest) get() []Request {\n \tm.lock.Lock()\n \tdefer m.lock.Unlock()\n-\tres := make([]request, len(m.data))\n+\tres := make([]Request, len(m.data))\n \tcopy(res, m.data)\n \treturn res\n }"
    },
    {
      "sha": "83bf532a9de71b8cf20ae10be1ba86346b7d49dc",
      "filename": "backend/app/notify/telegram.go",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/umputun/remark/blob/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25/backend/app/notify/telegram.go",
      "raw_url": "https://github.com/umputun/remark/raw/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25/backend/app/notify/telegram.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/notify/telegram.go?ref=ea8ac08c72a82a2ce8699ccd1ab049f565da4d25",
      "patch": "@@ -85,23 +85,23 @@ func NewTelegram(token string, channelID string, timeout time.Duration, api stri\n }\n \n // Send to telegram channel\n-func (t *Telegram) Send(ctx context.Context, req request) error {\n+func (t *Telegram) Send(ctx context.Context, req Request) error {\n \tclient := http.Client{Timeout: telegramTimeOut}\n-\tlog.Printf(\"[DEBUG] send telegram notification to %s, comment id %s\", t.channelID, req.comment.ID)\n+\tlog.Printf(\"[DEBUG] send telegram notification to %s, comment id %s\", t.channelID, req.Comment.ID)\n \n-\tfrom := req.comment.User.Name\n-\tif req.comment.ParentID != \"\" {\n+\tfrom := req.Comment.User.Name\n+\tif req.Comment.ParentID != \"\" {\n \t\tfrom += \" → \" + req.parent.User.Name\n \t}\n \tfrom = \"*\" + from + \"*\"\n-\tlink := fmt.Sprintf(\"↦ [original comment](%s)\", req.comment.Locator.URL+uiNav+req.comment.ID)\n-\tif req.comment.PostTitle != \"\" {\n-\t\tlink = fmt.Sprintf(\"↦ [%s](%s)\", req.comment.PostTitle, req.comment.Locator.URL+uiNav+req.comment.ID)\n+\tlink := fmt.Sprintf(\"↦ [original comment](%s)\", req.Comment.Locator.URL+uiNav+req.Comment.ID)\n+\tif req.Comment.PostTitle != \"\" {\n+\t\tlink = fmt.Sprintf(\"↦ [%s](%s)\", req.Comment.PostTitle, req.Comment.Locator.URL+uiNav+req.Comment.ID)\n \t}\n \tu := fmt.Sprintf(\"%s%s/sendMessage?chat_id=%s&parse_mode=Markdown&disable_web_page_preview=true\",\n \t\tt.apiPrefix, t.token, t.channelID)\n \n-\tmsg := fmt.Sprintf(\"%s\\n\\n%s\\n\\n%s\", from, req.comment.Orig, link)\n+\tmsg := fmt.Sprintf(\"%s\\n\\n%s\\n\\n%s\", from, req.Comment.Orig, link)\n \tmsg = html.UnescapeString(msg)\n \tbody := struct {\n \t\tText string `json:\"text\"`"
    },
    {
      "sha": "2dd3fdd6a7dae56824a67c256b8ee38d15800e26",
      "filename": "backend/app/notify/telegram_test.go",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25/backend/app/notify/telegram_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25/backend/app/notify/telegram_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/notify/telegram_test.go?ref=ea8ac08c72a82a2ce8699ccd1ab049f565da4d25",
      "patch": "@@ -63,15 +63,15 @@ func TestTelegram_Send(t *testing.T) {\n \tcp := store.Comment{Text: \"some parent text\"}\n \tcp.User.Name = \"to\"\n \n-\terr = tb.Send(context.TODO(), request{comment: c, parent: cp})\n+\terr = tb.Send(context.TODO(), Request{Comment: c, parent: cp})\n \tassert.NoError(t, err)\n \tc.PostTitle = \"test title\"\n-\terr = tb.Send(context.TODO(), request{comment: c, parent: cp})\n+\terr = tb.Send(context.TODO(), Request{Comment: c, parent: cp})\n \tassert.NoError(t, err)\n \n \ttb, err = NewTelegram(\"non-json-resp\", \"remark_test\", 2*time.Second, ts.URL+\"/\")\n \tassert.NotNil(t, err, \"should failed\")\n-\terr = tb.Send(context.TODO(), request{comment: c, parent: cp})\n+\terr = tb.Send(context.TODO(), Request{Comment: c, parent: cp})\n \trequire.NotNil(t, err)\n \tassert.Contains(t, err.Error(), \"unexpected telegram status code 404\", \"send on broken tg\")\n "
    },
    {
      "sha": "2362139a3e1340bec811f3a20c20510da07d5084",
      "filename": "backend/app/rest/api/rest_private.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25/backend/app/rest/api/rest_private.go",
      "raw_url": "https://github.com/umputun/remark/raw/ea8ac08c72a82a2ce8699ccd1ab049f565da4d25/backend/app/rest/api/rest_private.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_private.go?ref=ea8ac08c72a82a2ce8699ccd1ab049f565da4d25",
      "patch": "@@ -109,7 +109,7 @@ func (s *private) createCommentCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tScopes(comment.Locator.URL, lastCommentsScope, comment.User.ID, comment.Locator.SiteID))\n \n \tif s.notifyService != nil {\n-\t\ts.notifyService.Submit(finalComment)\n+\t\ts.notifyService.Submit(notify.Request{Comment: finalComment})\n \t}\n \n \tlog.Printf(\"[DEBUG] created commend %+v\", finalComment)"
    }
  ]
}
