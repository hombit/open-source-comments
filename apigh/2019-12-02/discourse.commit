{
  "sha": "b643526d9a407b8abb826dba78a954cdfe6d6133",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpiNjQzNTI2ZDlhNDA3YjhhYmI4MjZkYmE3OGE5NTRjZGZlNmQ2MTMz",
  "commit": {
    "author": {
      "name": "Dan Ungureanu",
      "email": "dan@ungureanu.me",
      "date": "2019-12-02T16:48:40Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-12-02T16:48:40Z"
    },
    "message": "FIX: Do not autocomplete categories or emojis in code blocks (#8433)\n\nEmojis and category autocomplete show up often when writing code\r\nsnippets, which makes it easy to insert unwanted text by mistake.",
    "tree": {
      "sha": "165cb903be24b8f45428d9f2ceccd41c4f5c774e",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/165cb903be24b8f45428d9f2ceccd41c4f5c774e"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/b643526d9a407b8abb826dba78a954cdfe6d6133",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5UBoCRBK7hj4Ov3rIwAAdHIIAKNtPAw4GalrPupNMvaoAIzv\nvSDFobE6A+uiJy/edZlcSpVZdqwn59uNSEIK6ikoGRQy/7YVERt8Jw/c7IGkpuIP\nuO2QiBI7OlmremEx/I8ufA5ULkVbw4fAaw7lofEAfZaQuAdoTeBBPYrH9IQd5w5S\ntyYydHaB8EvcyLO/zsAwxbU6iA6PRbbnr7/H7VMvmNWJqXQM448jEhfQiUa6K+tP\nnTpQQV9tVJj/Bx2DokLHkOo6n0BYcDnnOYuE1ulIKUpOmDLYuLfTyHc/wZONGGRQ\niTg3KLhXZ1ww+1cm3IXkiFPOJZpIrBTHMf6a9/GVrIzH3RJacUflliWXwtXp9eg=\n=sN70\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 165cb903be24b8f45428d9f2ceccd41c4f5c774e\nparent 5df719a3c29f94a56744e4563d2b973ec53c0fdb\nauthor Dan Ungureanu <dan@ungureanu.me> 1575305320 +0200\ncommitter GitHub <noreply@github.com> 1575305320 +0200\n\nFIX: Do not autocomplete categories or emojis in code blocks (#8433)\n\nEmojis and category autocomplete show up often when writing code\r\nsnippets, which makes it easy to insert unwanted text by mistake."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/b643526d9a407b8abb826dba78a954cdfe6d6133",
  "html_url": "https://github.com/discourse/discourse/commit/b643526d9a407b8abb826dba78a954cdfe6d6133",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/b643526d9a407b8abb826dba78a954cdfe6d6133/comments",
  "author": {
    "login": "udan11",
    "id": 4147664,
    "node_id": "MDQ6VXNlcjQxNDc2NjQ=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/4147664?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/udan11",
    "html_url": "https://github.com/udan11",
    "followers_url": "https://api.github.com/users/udan11/followers",
    "following_url": "https://api.github.com/users/udan11/following{/other_user}",
    "gists_url": "https://api.github.com/users/udan11/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/udan11/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/udan11/subscriptions",
    "organizations_url": "https://api.github.com/users/udan11/orgs",
    "repos_url": "https://api.github.com/users/udan11/repos",
    "events_url": "https://api.github.com/users/udan11/events{/privacy}",
    "received_events_url": "https://api.github.com/users/udan11/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5df719a3c29f94a56744e4563d2b973ec53c0fdb",
      "url": "https://api.github.com/repos/discourse/discourse/commits/5df719a3c29f94a56744e4563d2b973ec53c0fdb",
      "html_url": "https://github.com/discourse/discourse/commit/5df719a3c29f94a56744e4563d2b973ec53c0fdb"
    }
  ],
  "stats": {
    "total": 123,
    "additions": 114,
    "deletions": 9
  },
  "files": [
    {
      "sha": "e0b745a47f83c8261702c1ebb613034f40f603be",
      "filename": "app/assets/javascripts/discourse/components/d-editor.js.es6",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/discourse/discourse/blob/b643526d9a407b8abb826dba78a954cdfe6d6133/app/assets/javascripts/discourse/components/d-editor.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b643526d9a407b8abb826dba78a954cdfe6d6133/app/assets/javascripts/discourse/components/d-editor.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/components/d-editor.js.es6?ref=b643526d9a407b8abb826dba78a954cdfe6d6133",
      "patch": "@@ -20,7 +20,9 @@ import { siteDir } from \"discourse/lib/text-direction\";\n import {\n   determinePostReplaceSelection,\n   clipboardData,\n-  safariHacksDisabled\n+  safariHacksDisabled,\n+  caretPosition,\n+  inCodeBlock\n } from \"discourse/lib/utilities\";\n import toMarkdown from \"discourse/lib/to-markdown\";\n import deprecated from \"discourse-common/lib/deprecated\";\n@@ -420,6 +422,10 @@ export default Component.extend({\n       },\n \n       onKeyUp: (text, cp) => {\n+        if (inCodeBlock(text, cp)) {\n+          return false;\n+        }\n+\n         const matches = /(?:^|[^a-z])(:(?!:).?[\\w-]*:?(?!:)(?:t\\d?)?:?) ?$/gi.exec(\n           text.substring(0, cp)\n         );\n@@ -511,7 +517,10 @@ export default Component.extend({\n             }\n             return list;\n           });\n-      }\n+      },\n+\n+      triggerRule: textarea =>\n+        !inCodeBlock(textarea.value, caretPosition(textarea))\n     });\n   },\n "
    },
    {
      "sha": "28042fff16002753f2e0914678aefd0f56c202d6",
      "filename": "app/assets/javascripts/discourse/lib/category-hashtags.js.es6",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/discourse/discourse/blob/b643526d9a407b8abb826dba78a954cdfe6d6133/app/assets/javascripts/discourse/lib/category-hashtags.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b643526d9a407b8abb826dba78a954cdfe6d6133/app/assets/javascripts/discourse/lib/category-hashtags.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/lib/category-hashtags.js.es6?ref=b643526d9a407b8abb826dba78a954cdfe6d6133",
      "patch": "@@ -1,5 +1,9 @@\n export const SEPARATOR = \":\";\n-import { caretRowCol } from \"discourse/lib/utilities\";\n+import {\n+  caretRowCol,\n+  caretPosition,\n+  inCodeBlock\n+} from \"discourse/lib/utilities\";\n \n export function replaceSpan($elem, categorySlug, categoryLink) {\n   $elem.replaceWith(\n@@ -21,10 +25,14 @@ export function categoryHashtagTriggerRule(textarea, opts) {\n     if (/^#{1}\\w+/.test(line)) return false;\n   }\n \n-  if (col < 6) {\n-    // Don't trigger autocomplete when ATX-style headers are used\n-    return line.slice(0, col) !== \"#\".repeat(col);\n-  } else {\n-    return true;\n+  // Don't trigger autocomplete when ATX-style headers are used\n+  if (col < 6 && line.slice(0, col) === \"#\".repeat(col)) {\n+    return false;\n   }\n+\n+  if (inCodeBlock(textarea.value, caretPosition(textarea))) {\n+    return false;\n+  }\n+\n+  return true;\n }"
    },
    {
      "sha": "4ab8eb7ccb29e4a85ea54f3dfb25fcd6c7ebc599",
      "filename": "app/assets/javascripts/discourse/lib/utilities.js.es6",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/discourse/discourse/blob/b643526d9a407b8abb826dba78a954cdfe6d6133/app/assets/javascripts/discourse/lib/utilities.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b643526d9a407b8abb826dba78a954cdfe6d6133/app/assets/javascripts/discourse/lib/utilities.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/lib/utilities.js.es6?ref=b643526d9a407b8abb826dba78a954cdfe6d6133",
      "patch": "@@ -410,5 +410,44 @@ export function rescueThemeError(name, error, api) {\n   document.body.prepend(alertDiv);\n }\n \n+const CODE_BLOCKS_RULES = [\n+  { rule: /`(?:[^`\\n]+?\\n?)+?`/gm, end: \"`\" },\n+  { rule: /^```[^]*?^```/gm, end: \"\\n```\" },\n+  { rule: /\\[code\\][^]*?\\[\\/code\\]/gm, end: \"\\n[/code]\" }\n+];\n+\n+export function getCodeBlocks(value) {\n+  const blocks = [];\n+\n+  CODE_BLOCKS_RULES.forEach(entry => {\n+    const { rule, end } = entry;\n+\n+    let match;\n+    while ((match = rule.exec(value)) != null) {\n+      blocks.push([match.index, match.index + match[0].length]);\n+    }\n+\n+    // Try to end block and see if other code blocks are found\n+    if (end) {\n+      while ((match = rule.exec(value + end)) != null) {\n+        // Save only positions that were not found before (which end past the\n+        // end of the original value).\n+        if (\n+          match.index < value.length &&\n+          match.index + match[0].length > value.length\n+        ) {\n+          blocks.push([match.index, value.length]);\n+        }\n+      }\n+    }\n+  });\n+\n+  return blocks;\n+}\n+\n+export function inCodeBlock(value, pos) {\n+  return getCodeBlocks(value).any(([start, end]) => start <= pos && pos <= end);\n+}\n+\n // This prevents a mini racer crash\n export default {};"
    },
    {
      "sha": "46c00735bf3fc79e01dcbcb9c0a423467506d5b5",
      "filename": "test/javascripts/lib/utilities-test.js.es6",
      "status": "modified",
      "additions": 50,
      "deletions": 1,
      "changes": 51,
      "blob_url": "https://github.com/discourse/discourse/blob/b643526d9a407b8abb826dba78a954cdfe6d6133/test/javascripts/lib/utilities-test.js.es6",
      "raw_url": "https://github.com/discourse/discourse/raw/b643526d9a407b8abb826dba78a954cdfe6d6133/test/javascripts/lib/utilities-test.js.es6",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/lib/utilities-test.js.es6?ref=b643526d9a407b8abb826dba78a954cdfe6d6133",
      "patch": "@@ -9,7 +9,9 @@ import {\n   setDefaultHomepage,\n   caretRowCol,\n   setCaretPosition,\n-  fillMissingDates\n+  fillMissingDates,\n+  getCodeBlocks,\n+  inCodeBlock\n } from \"discourse/lib/utilities\";\n \n QUnit.module(\"lib:utilities\");\n@@ -186,3 +188,50 @@ QUnit.test(\"fillMissingDates\", assert => {\n     \"it returns a JSON array with 31 dates\"\n   );\n });\n+\n+QUnit.test(\"getCodeBlocks - works with [code]\", assert => {\n+  assert.deepEqual(\n+    getCodeBlocks(\"[code]\\nfoo\\n[/code]\\n\\nbar\\n\\n[code]\\nbaz\"),\n+    [\n+      [0, 18],\n+      [25, 35]\n+    ]\n+  );\n+});\n+\n+QUnit.test(\"getCodeBlocks - works with backticks\", assert => {\n+  assert.deepEqual(getCodeBlocks(\"foo `bar\\nbar`! `baz\"), [\n+    [4, 13],\n+    [15, 19]\n+  ]);\n+});\n+\n+QUnit.test(\"getCodeBlocks - works with triple backticks\", assert => {\n+  assert.deepEqual(getCodeBlocks(\"```\\nfoo\\n```\\n\\nbar\\n\\n```\\nbaz\"), [\n+    [0, 11],\n+    [18, 25]\n+  ]);\n+});\n+\n+QUnit.test(\"inCodeBlock\", assert => {\n+  const raw =\n+    \"bar\\n\\n```\\nfoo\\n```\\n\\nbar\\n\\n`foo\\nfoo`\\n\\nbar\\n\\n[code]\\nfoo\\n[/code]\\n\\nbar`foo\";\n+\n+  assert.notOk(inCodeBlock(raw, 4));\n+  assert.ok(inCodeBlock(raw, 5));\n+  assert.ok(inCodeBlock(raw, 16));\n+  assert.notOk(inCodeBlock(raw, 17));\n+\n+  assert.notOk(inCodeBlock(raw, 22));\n+  assert.ok(inCodeBlock(raw, 23));\n+  assert.ok(inCodeBlock(raw, 32));\n+  assert.notOk(inCodeBlock(raw, 33));\n+\n+  assert.notOk(inCodeBlock(raw, 38));\n+  assert.ok(inCodeBlock(raw, 39));\n+  assert.ok(inCodeBlock(raw, 57));\n+  assert.notOk(inCodeBlock(raw, 58));\n+\n+  assert.notOk(inCodeBlock(raw, 61));\n+  assert.ok(inCodeBlock(raw, 62));\n+});"
    }
  ]
}
