{
  "sha": "163f5bd4250a5a103f4ee440ec09f2541c456385",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6MTYzZjViZDQyNTBhNWExMDNmNGVlNDQwZWMwOWYyNTQxYzQ1NjM4NQ==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-12-01T04:42:50Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-12-01T22:08:23Z"
    },
    "message": "Fix draft bugs, now with postId included.",
    "tree": {
      "sha": "b1bad1ac16855a745eee2d87274e3877d9245e47",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/b1bad1ac16855a745eee2d87274e3877d9245e47"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/163f5bd4250a5a103f4ee440ec09f2541c456385",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/163f5bd4250a5a103f4ee440ec09f2541c456385",
  "html_url": "https://github.com/debiki/talkyard/commit/163f5bd4250a5a103f4ee440ec09f2541c456385",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/163f5bd4250a5a103f4ee440ec09f2541c456385/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "294600157e6ef2e7ffe19c56220d2d1e96fc79a6",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/294600157e6ef2e7ffe19c56220d2d1e96fc79a6",
      "html_url": "https://github.com/debiki/talkyard/commit/294600157e6ef2e7ffe19c56220d2d1e96fc79a6"
    }
  ],
  "stats": {
    "total": 190,
    "additions": 137,
    "deletions": 53
  },
  "files": [
    {
      "sha": "cbf51085f6d959cd6cf0bc220d2b6ae952e4570d",
      "filename": "app/controllers/DraftsController.scala",
      "status": "modified",
      "additions": 23,
      "deletions": 4,
      "changes": 27,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/app/controllers/DraftsController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/app/controllers/DraftsController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/DraftsController.scala?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -62,22 +62,41 @@ class DraftsController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     throwForbiddenIf(0 <= requester.id && requester.id <= 9, \"TyE2ABKG5\",\n       \"Special users may not save drafts\")\n \n+    // Better use the server time? In case the client's clock is wrong? [SERVERTIME]\n+    // Also, without this, some e2e tests fail (race conditions [DRAFTWAIT]).\n     val now = globals.now()\n     val talkyardJsonParser = talkyard.server.backup.SiteBackupReader(context)\n-    val draft = talkyardJsonParser.readDraftOrBad(\n-        body, Some(requester.id)) getOrIfBad { problem =>\n+    var draft = talkyardJsonParser.readDraftOrBad(body, Some(now)) getOrIfBad { problem =>\n       throwBadRequest(\"TyEBDDRFTDT\", s\"Bad Draft json, problem: $problem\")\n     }\n \n+    throwForbiddenIf(\n+      !globals.isProd &&  // enable later, a bit untested\n+      draft.byUserId != NoUserId && draft.byUserId != requester.id,\n+      \"TyE50652TKDU3\", o\"\"\"Cannot save a draft on behalf of another user:\n+        requester.id = ${requester.id}, but draft.byUserId = ${draft.byUserId}\"\"\")\n+\n+    draft = draft.copy(\n+      byUserId = requester.id)  // [602KDGRE20]\n+\n+    // Early access control, if possible:\n+    //\n     if (draft.isNewTopic) {\n       // For now, authorize this later, when posting topic. The user can just pick another category,\n       // in the categories dropdown, if current category turns out to be not allowed, when\n       // trying to post.\n     }\n+    else if (draft.isReply && !draft.forWhat.postId.isDefined) {\n+      // We're replying to a post that doesn't yet exits. This happens\n+      // if one clicks Reply on an embedded comments page that hasn't yet\n+      // been lazy-created â€” it won't get created until the first reply has been\n+      // posted, or there's a Like vote, etc.\n+      // For now: Don't do any access control check, until later.\n+    }\n     else if (draft.isReply || draft.isEdit) {\n       // Maybe good to know, directly, if not allowed to reply to or edit this post?\n-      val post = dao.loadPostByUniqueId(\n-        draft.forWhat.postId.get) getOrElse throwIndistinguishableNotFound(\"TyE0DK9WRR\")\n+      val post = dao.loadPostByUniqueId(draft.forWhat.postId.get\n+        ) getOrElse throwIndistinguishableNotFound(\"TyE0DK9WRR\")\n       val pageMeta = dao.getPageMeta(post.pageId) getOrElse throwIndistinguishableNotFound(\"TyE2AKBRE5\")\n       val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n "
    },
    {
      "sha": "635014b55d68c5057d16e862ccf3c76b65149de2",
      "filename": "app/controllers/EditController.scala",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/app/controllers/EditController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/app/controllers/EditController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/EditController.scala?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -171,6 +171,7 @@ class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     import request.{dao, body}\n     val pageId = (body \\ \"pageId\").as[PageId]\n     val postNr = (body \\ \"postNr\").as[PostNr] ; SHOULD // change to id, in case moved to other page [idnotnr]\n+    val anyPostId: Option[PostId] = (body \\ \"postId\").asOpt[PostId]\n     val newText = (body \\ \"text\").as[String]\n     val deleteDraftNr = (body \\ \"deleteDraftNr\").asOpt[DraftNr]\n \n@@ -182,8 +183,18 @@ class EditController @Inject()(cc: ControllerComponents, edContext: EdContext)\n \n     _throwIfTooMuchData(newText, request)\n \n-    val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdEZWBR81\")\n-    val post = dao.loadPost(pageId, postNr) getOrElse throwIndistinguishableNotFound(\"EdEBKWRWY9\")\n+    val (pageMeta, post) = anyPostId match {\n+      case Some(postId) =>\n+        val post = dao.loadPostByUniqueId(postId) getOrElse throwIndistinguishableNotFound(\"TyE506JKUT\")\n+        val pageMeta = dao.getPageMeta(post.pageId) getOrElse throwIndistinguishableNotFound(\"TyE506JKU2\")\n+        (pageMeta, post)\n+      case None =>\n+        // Old, remove [idnotnr]\n+        val pageMeta = dao.getPageMeta(pageId) getOrElse throwIndistinguishableNotFound(\"EdEZWBR81\")\n+        val post = dao.loadPost(pageId, postNr) getOrElse throwIndistinguishableNotFound(\"EdEBKWRWY9\")\n+        (pageMeta, post)\n+    }\n+\n     val categoriesRootLast = dao.getAncestorCategoriesRootLast(pageMeta.categoryId)\n \n     throwNoUnless(Authz.mayEditPost("
    },
    {
      "sha": "c475730161b164412dbad98f8fec8f82b7ebb411",
      "filename": "app/talkyard/server/backup/SiteBackupReader.scala",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/app/talkyard/server/backup/SiteBackupReader.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/app/talkyard/server/backup/SiteBackupReader.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/talkyard/server/backup/SiteBackupReader.scala?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -1193,8 +1193,7 @@ case class SiteBackupReader(context: EdContext) {\n   }\n \n \n-  def readDraftOrBad(jsValue: JsValue, authorId: Option[UserId] = None)\n-        : Draft Or ErrorMessage = {\n+  def readDraftOrBad(jsValue: JsValue, now: Option[When] = None): Draft Or ErrorMessage = {\n     val jsObj = jsValue match {\n       case x: JsObject => x\n       case bad =>\n@@ -1235,14 +1234,17 @@ case class SiteBackupReader(context: EdContext) {\n       }\n \n       Draft(\n-        byUserId = authorId getOrElse readInt(jsObj, \"byUserId\"),\n+        byUserId = readInt(jsObj, \"byUserId\",\n+          // For now, because currently not always incl when upserting from editor.\n+          // Gets filled in by the server anyway [602KDGRE20]\n+          default = Some(NoUserId)),\n         draftNr = draftNr,\n         forWhat = draftLocator,\n         createdAt =\n-          readOptWhen(jsObj, \"createdAt\").getOrElse(globals.now()),\n+          now getOrElse readOptWhen(jsObj, \"createdAt\").getOrElse(globals.now()),\n         lastEditedAt =\n           // However, createdAt will be used, by the db, if overwriting [5AKJWX0]\n-          readOptWhen(jsObj, \"lastEditedAt\"),\n+          now orElse readOptWhen(jsObj, \"lastEditedAt\"),\n         deletedAt = readOptWhen(jsObj, \"deletedAt\"),\n         topicType = readOptInt(jsObj, \"topicType\").flatMap(PageType.fromInt),\n         postType = readOptInt(jsObj, \"postType\").flatMap(PostType.fromInt),"
    },
    {
      "sha": "420edb7f3a798a17070a14a77ebfab24004fe2fa",
      "filename": "client/app-editor/editor/editor.editor.ts",
      "status": "modified",
      "additions": 25,
      "deletions": 12,
      "changes": 37,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-editor/editor/editor.editor.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-editor/editor/editor.editor.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-editor/editor/editor.editor.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -338,7 +338,7 @@ export const Editor = createComponent({\n     return link;\n   },\n \n-  toggleWriteReplyToPost: function(postNr: number, inclInReply: boolean, anyPostType?: number) {\n+  toggleWriteReplyToPostNr: function(postNr: PostNr, inclInReply: boolean, anyPostType?: number) {\n     if (this.alertBadState('WriteReply'))\n       return;\n \n@@ -390,6 +390,7 @@ export const Editor = createComponent({\n       pageId: store.currentPageId,\n       postNr: postNrs[0], // for now\n     };\n+    draftLocator.postId = getPostId(store, draftLocator.pageId, draftLocator.postNr);\n     if (eds.embeddingUrl) {\n       draftLocator.embeddingUrl = eds.embeddingUrl;\n     }\n@@ -412,6 +413,12 @@ export const Editor = createComponent({\n       this.showEditor({ scrollToShowPostNr: response.postNr });\n       const store: Store = this.state.store;\n       const draft: Draft | undefined = response.draft;\n+\n+      // In case the draft was created when one wasn't logged in, then, now, set a user id.\n+      if (draft && store.me) {\n+        draft.byUserId = store.me.id;\n+      }\n+\n       // This can fail, if the post was moved by staff to a different page? Then it\n       // gets a new postNr. Then do what? Show a \"this post was moved to: ...\" dialog?\n       dieIf(postNr !== response.postNr, 'TyE23GPKG4');\n@@ -828,15 +835,6 @@ export const Editor = createComponent({\n     const store: Store = this.state.store;\n     let postType: PostType;\n \n-    function getPostId(pageId: PageId, postNr: PostNr): PostId {\n-      // (The page might not be the current page, if the editor is open and we've\n-      // temporarily jumped to a different page or user's profile maybe.)\n-      const page: Page = store.pagesById[pageId];\n-      dieIf(!page, 'TyE603KWUDB4');\n-      const post = page.postsByNr[postNr];\n-      return post.uniqueId;\n-    }\n-\n     if (this.state.editingPostNr) {\n       locator.draftType = DraftType.Edit;\n       locator.pageId = this.state.editorsPageId;\n@@ -847,7 +845,7 @@ export const Editor = createComponent({\n       locator.draftType = DraftType.Reply;\n       locator.pageId = this.state.editorsPageId;\n       locator.postNr = this.state.replyToPostNrs[0]; // for now just pick the first one\n-      locator.postId = getPostId(locator.pageId, locator.postNr);\n+      locator.postId = getPostId(store, locator.pageId, locator.postNr);\n       postType = PostType.Normal;\n       // This is needed for embedded comments, if the discussion page hasn't yet been created.\n       if (eds.embeddingUrl) {\n@@ -858,7 +856,7 @@ export const Editor = createComponent({\n       locator.draftType = DraftType.Reply;\n       locator.pageId = this.state.editorsPageId;\n       locator.postNr = BodyNr;\n-      locator.postId = getPostId(locator.pageId, locator.postNr);\n+      locator.postId = getPostId(store, locator.pageId, locator.postNr);\n       postType = PostType.ChatMessage;\n     }\n     else if (this.state.messageToUserIds && this.state.messageToUserIds.length) {\n@@ -1784,6 +1782,21 @@ export function DraftStatusInfo(props: { draftStatus: DraftStatus, draftNr: numb\n }\n \n \n+function getPostId(store:Store, pageId: PageId, postNr: PostNr): PostId | undefined {\n+  // If we're on a blog bost with embedded comments, then, the Talkyard embedded\n+  // comments page might not yet have been created.\n+  if (!pageId)\n+    return undefined;\n+\n+  // (The page might not be the current page, if the editor is open and we've\n+  // temporarily jumped to a different page or user's profile maybe.)\n+  const page: Page = store.pagesById[pageId];\n+  dieIf(!page, 'TyE603KWUDB4');\n+  const post = page.postsByNr[postNr];\n+  return post.uniqueId;\n+}\n+\n+\n \n //------------------------------------------------------------------------------\n    }"
    },
    {
      "sha": "102ed759b83da6c7fec36c1917b5d9986fc5ace7",
      "filename": "client/app-more/forum/edit-intro-dialog.more.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-more/forum/edit-intro-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-more/forum/edit-intro-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/forum/edit-intro-dialog.more.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -52,7 +52,7 @@ var EditIntroDialog = createClassAndFactory({\n   },\n \n   editIntroText: function() {\n-    editor.openEditorToEditPost(BodyNr);\n+    editor.openEditorToEditPostNr(BodyNr);\n     this.close();\n   },\n "
    },
    {
      "sha": "c78648339d415f82f8404960fe139c6a4729551d",
      "filename": "client/app-slim/ReactActions.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/ReactActions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/ReactActions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/ReactActions.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -274,7 +274,7 @@ export function editPostWithNr(postNr: number) {\n     }\n     else {\n       // Right now, we don't need to use the Store for this.\n-      debiki2.editor.openEditorToEditPost(postNr);\n+      debiki2.editor.openEditorToEditPostNr(postNr);\n     }\n   });\n }\n@@ -522,7 +522,7 @@ export function doUrlFragmentAction(newHashFragment?: string) {\n         else {\n           // Normal = incl in draft + url?\n           Server.loadEditorAndMoreBundles(function() {\n-            debiki2.editor.toggleWriteReplyToPost(postNr, true, PostType.Normal);\n+            debiki2.editor.toggleWriteReplyToPostNr(postNr, true, PostType.Normal);\n           });\n         }\n         break;"
    },
    {
      "sha": "7c890699a3e1b2d05186d65580400517fe2bc787",
      "filename": "client/app-slim/Server.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/Server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/Server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/Server.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -1178,15 +1178,16 @@ export function loadDraftAndGuidelines(draftLocator: DraftLocator, writingWhat:\n       categoryId: number, pageRole: PageRole,\n       success: (guidelinesSafeHtml: string, draft?: Draft) => void) {\n \n-  const dloc = draftLocator;\n-  const draftTypeParam = '&draftType=' + dloc.draftType;\n-  const pageIdParam = dloc.pageId ? '&pageId=' + dloc.pageId : '';\n-  const postNrParam = dloc.postNr ? '&postNr=' + dloc.postNr : '';\n-  const toUserIdParam = dloc.toUserId ? '&toUserId=' + dloc.toUserId : '';\n+  const loc = draftLocator;\n+  const draftTypeParam = '&draftType=' + loc.draftType;\n+  const pageIdParam = loc.pageId ? '&pageId=' + loc.pageId : '';\n+  const postNrParam = loc.postNr ? '&postNr=' + loc.postNr : '';\n+  const postIdParam = loc.postId ? '&postId=' + loc.postId : '';\n+  const toUserIdParam = loc.toUserId ? '&toUserId=' + loc.toUserId : '';\n   const categoryParam = categoryId ? '&categoryId=' + categoryId : '';\n \n   const url = `/-/load-draft-and-guidelines?writingWhat=${writingWhat}&pageRole=${pageRole}` +\n-    draftTypeParam + pageIdParam + postNrParam + toUserIdParam + categoryParam;\n+    draftTypeParam + pageIdParam + postNrParam + postIdParam + toUserIdParam + categoryParam;\n \n   get(url, (response) => {\n     success(response.guidelinesSafeHtml, response.drafts[0]); // for now, just pick the first"
    },
    {
      "sha": "7b425cc8f26a90e8710a1c0ba675c872dd719caf",
      "filename": "client/app-slim/editor-bundle-not-yet-loaded.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/editor-bundle-not-yet-loaded.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/editor-bundle-not-yet-loaded.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/editor-bundle-not-yet-loaded.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -30,14 +30,14 @@ function ensureEditorCreated(success: (editor: any) => void) {\n }\n \n \n-export function toggleWriteReplyToPost(postId: number, inclInReply: boolean, anyPostType?: number) {\n+export function toggleWriteReplyToPostNr(postNr: PostNr, inclInReply: boolean, anyPostType?: number) {\n   ensureEditorCreated(editor => {\n-    editor.toggleWriteReplyToPost(postId, inclInReply, anyPostType);\n+    editor.toggleWriteReplyToPostNr(postNr, inclInReply, anyPostType);\n   });\n }\n \n \n-export function openEditorToEditPost(postId: number, onDone?) {\n+export function openEditorToEditPostNr(postId: number, onDone?) {\n   ensureEditorCreated(editor => {\n     editor.editPost(postId, onDone);\n   });"
    },
    {
      "sha": "e1071764116137aba0575fa59efcd81a19e67b1a",
      "filename": "client/app-slim/if-in-iframe.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/if-in-iframe.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/if-in-iframe.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/if-in-iframe.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -76,9 +76,9 @@ function onMessage(event) {\n     case 'editorToggleReply':\n       // This message is sent from an embedded comments page to the embedded editor.\n       // It opens the editor to write a reply to `postId`.\n-      var postId = eventData[0];\n+      var postNr = eventData[0];\n       var inclInReply = eventData[1];\n-      debiki2.editor.toggleWriteReplyToPost(postId, inclInReply, PostType.Normal);\n+      debiki2.editor.toggleWriteReplyToPostNr(postNr, inclInReply, PostType.Normal);\n       break;\n     case 'handleReplyResult':\n       // This message is sent from the embedded editor <iframe> to the comments\n@@ -93,8 +93,8 @@ function onMessage(event) {\n       break;\n     case 'editorEditPost':\n       // Sent from an embedded comments page to the embedded editor.\n-      var postId = eventData;\n-      debiki2.ReactActions.editPostWithNr(postId);\n+      var postNr = eventData;\n+      debiki2.ReactActions.editPostWithNr(postNr);\n       break;\n     case 'handleEditResult':\n       // This is sent from the embedded editor back to an embedded comments page."
    },
    {
      "sha": "8e329faed68ac24539932feb97c9b6983947cc50",
      "filename": "client/app-slim/page/chat.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/page/chat.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/page/chat.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/chat.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -172,7 +172,7 @@ const ChatMessage = createComponent({\n   edit: function() {\n     this.setState({ isEditing: true });\n     const post: Post = this.props.post;\n-    editor.openEditorToEditPost(post.nr, (wasSaved, text) => {\n+    editor.openEditorToEditPostNr(post.nr, (wasSaved, text) => {\n       this.setState({ isEditing: false });\n     });\n   },\n@@ -329,11 +329,13 @@ const ChatMessageEditor = createComponent({\n \n       const store: Store = this.props.store;\n       const page: Page = store.currentPage;\n+      const bodyPostId = page.postsByNr[BodyNr].uniqueId;\n \n       const draftLocator: DraftLocator = {\n         draftType: DraftType.Reply,\n         pageId: page.pageId,\n         postNr: BodyNr,\n+        postId: bodyPostId,\n       };\n       this.setState({ scriptsLoaded: true });\n       Server.loadDraftAndGuidelines(draftLocator, WritingWhat.ChatComment, page.categoryId, page.pageRole,\n@@ -380,14 +382,21 @@ const ChatMessageEditor = createComponent({\n     if (draftStatus <= DraftStatus.NeedNotSave)\n       return;\n \n+    const forWhat: DraftLocator = {\n+      draftType: DraftType.Reply,\n+      pageId: store.currentPageId,\n+      postNr: BodyNr,\n+    };\n+\n+    if (store.currentPage) {\n+      const post = store.currentPage.postsByNr[BodyNr];\n+      forWhat.postId = post ? post.uniqueId : undefined;\n+    }\n+\n     const draftOldOrEmpty: Draft = oldDraft || {\n       byUserId: me.id,\n       draftNr: NoDraftNr,\n-      forWhat: {\n-        draftType: DraftType.Reply,\n-        pageId: store.currentPageId,\n-        postNr: BodyNr,\n-      },\n+      forWhat,\n       createdAt: getNowMs(),\n       postType: PostType.ChatMessage,\n       text: '',"
    },
    {
      "sha": "1b58f95a9b491f0b92cdc61aa9956a569539bc98",
      "filename": "client/app-slim/page/discussion.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/page/discussion.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/page/discussion.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/discussion.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -573,7 +573,7 @@ const RootPostAndComments = createComponent({\n             JSON.stringify(['editorToggleReply', [BodyNr, inclInReply]]), eds.embeddingOrigin);\n       }\n       else {\n-        editor.toggleWriteReplyToPost(BodyNr, inclInReply, postType);\n+        editor.toggleWriteReplyToPostNr(BodyNr, inclInReply, postType);\n       }\n     });\n   },"
    },
    {
      "sha": "2b2d3450a5e34990eea0de8e94c2d9307078a53b",
      "filename": "client/app-slim/page/post-actions.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/page/post-actions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/page/post-actions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/page/post-actions.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -187,7 +187,7 @@ export const PostActions = createComponent({\n             JSON.stringify(['editorToggleReply', [post.nr, inclInReply]]), eds.embeddingOrigin);\n       }\n       else {\n-        debiki2.editor.toggleWriteReplyToPost(post.nr, inclInReply, newPostType);\n+        debiki2.editor.toggleWriteReplyToPostNr(post.nr, inclInReply, newPostType);\n       }\n     }, true);\n   },"
    },
    {
      "sha": "25836f25ba9d079c516b1bbd51e92db5c3190ae0",
      "filename": "client/app-slim/slim-bundle.d.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/slim-bundle.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/client/app-slim/slim-bundle.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/slim-bundle.d.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -189,9 +189,9 @@ declare namespace debiki2 {\n     var SelectCategoryDropdown;\n \n     // from editor-bundle-not-yet-loaded.ts:\n-    function toggleWriteReplyToPost(postId: number, inclInReply: boolean, anyPostType?: number);\n-    function openEditorToEditPost(postId: number, onDone?);\n-    function editNewForumPage(categoryId: number, role: PageRole);\n+    function toggleWriteReplyToPostNr(postNr: PostNr, inclInReply: boolean, anyPostType?: number);\n+    function openEditorToEditPostNr(postNr: PostNr, onDone?);\n+    function editNewForumPage(categoryId: CategoryId, role: PageRole);\n     function openToEditChatTitleAndPurpose();\n     function openToWriteChatMessage(text: string, onDone);\n     function openToWriteMessage(userId: UserId);"
    },
    {
      "sha": "4aec68d0495a35e5dfe98b236da9bec0a4737406",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/Post.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/modules/ed-core/src/main/scala/com/debiki/core/Post.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/modules/ed-core/src/main/scala/com/debiki/core/Post.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/Post.scala?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -286,7 +286,7 @@ case class Draft(\n   text: String) {\n \n   require(draftNr >= 1 || draftNr == NoDraftNr, \"TyEBDDRFT01\")\n-  require(lastEditedAt.isEmpty || createdAt.millis <= lastEditedAt.get.millis, \"TyEBDDRFT03\")\n+  require(lastEditedAt.isEmpty || createdAt.millis <= lastEditedAt.get.millis, \"TyEEDITBEFCREA\")\n   require(deletedAt.isEmpty || createdAt.millis <= deletedAt.get.millis, \"TyEBDDRFT05\")\n   require(lastEditedAt.isEmpty || deletedAt.isEmpty ||\n       lastEditedAt.get.millis <= deletedAt.get.millis, \"TyEBDDRFT06\")"
    },
    {
      "sha": "214f8ef98d25898b683ede3ce9aaae1bf9685bd4",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -135,7 +135,7 @@ function runE2eTest {\n \n       if [ $? -ne 0 ]; then\n         log_message \"Failed: $cmd\" >> $failfile\n-        log_message \"Test failed twice, aborting.\" >> $failfile\n+        log_message \"Test failed trice, aborting.\" >> $failfile\n         cmd_with_debug=$(echo $@ | sed 's/wdio /wdio-debug-9101 /')\n         echo\n         echo"
    },
    {
      "sha": "a1ec340584bd717651b1360f2ce37c2c45238b9b",
      "filename": "tests/e2e/specs/drafts-new-topic.2browsers.test.ts",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/tests/e2e/specs/drafts-new-topic.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/tests/e2e/specs/drafts-new-topic.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/drafts-new-topic.2browsers.test.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -85,6 +85,13 @@ describe(\"drafts-new-topic  TyT5BR20P4\", () => {\n     mariasBrowser.editor.waitForDraftSaved();\n   });\n \n+  /*\n+  it(\"... waits for a while\", () => {\n+    // Otherwise the server might think the edits happenend before the draft\n+    // had been created. [DRAFTWAIT]\n+    server.playTimeMinutes(10);\n+  }); */\n+\n   it(\"She refreshes the page\", () => {\n     mariasBrowser.refresh();\n   });\n@@ -110,6 +117,13 @@ describe(\"drafts-new-topic  TyT5BR20P4\", () => {\n     mariasBrowser.editor.cancelNoHelp();\n   });\n \n+  /*\n+  it(\"... waits for a while\", () => {\n+    // Otherwise the server might think the edits happenend before the draft\n+    // had been created. [DRAFTWAIT]\n+    server.playTimeMinutes(10);\n+  }); */\n+\n   it(\"... refreshes the page\", () => {\n     mariasBrowser.refresh();\n   });\n@@ -132,6 +146,14 @@ describe(\"drafts-new-topic  TyT5BR20P4\", () => {\n     mariasBrowser.refresh();\n   });\n \n+  /*\n+  it(\"... waits for a while\", () => {\n+    // Otherwise the server might think the edits happenend before the draft\n+    // had been created. [DRAFTWAIT]\n+    server.playTimeMinutes(10);\n+    mariasBrowser.refresh();\n+  }); */\n+\n   it(\"... the saved edits appear, when she starts typing again, again\", () => {\n     mariasBrowser.forumButtons.clickCreateTopic();\n     mariasBrowser.editor.waitForDraftTitleToLoad(mariasDraftTopicTitleEditedTwice);"
    },
    {
      "sha": "40dfbd12c6fb8de1b43e3cf1e9c84611566976bb",
      "filename": "tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/163f5bd4250a5a103f4ee440ec09f2541c456385/tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/163f5bd4250a5a103f4ee440ec09f2541c456385/tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/drafts-reply-edit-dir-msg.2browsers.test.ts?ref=163f5bd4250a5a103f4ee440ec09f2541c456385",
      "patch": "@@ -148,6 +148,13 @@ describe(\"drafts-chat-adv-ed  TyT7JKMW24\", () => {\n \n   // ----- Drafts for direct messages\n \n+  /*\n+  it(\"Bump the server time, so the next draft becomes the most recent one\", () => {\n+    // Otherwise the drafts sort order won't be \"correct\", and a test\n+    // will fail (0386725). [DRAFTWAIT]\n+    server.playTimeMinutes(10);\n+  }); */\n+\n   it(\"Maria starts typing a direct message to Michael\", () => {\n     mariasBrowser.pageTitle.openAboutAuthorDialog();\n     mariasBrowser.aboutUserDialog.clickSendMessage();\n@@ -185,7 +192,7 @@ describe(\"drafts-chat-adv-ed  TyT7JKMW24\", () => {\n     mariasBrowser.refresh();\n   });\n \n-  it(\"Maria clicks the most recent draft: the direct message to Michael\", () => {\n+  it(\"Maria clicks the most recent draft: the direct message to Michael  (0386725)\", () => {\n     mariasBrowser.userProfilePage.waitUntilUsernameIs(maria.username);\n     mariasBrowser.userProfilePage.draftsEtc.waitUntilNumDraftsListed(3);\n     mariasBrowser.userProfilePage.draftsEtc.openDraftIndex(1);"
    }
  ]
}
