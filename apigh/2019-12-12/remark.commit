{
  "sha": "30c42ce36b1a06073f970b16d08be65fd3542f12",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjMwYzQyY2UzNmIxYTA2MDczZjk3MGIxNmQwOGJlNjVmZDM1NDJmMTI=",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2019-12-09T18:30:07Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-12-09T18:30:07Z"
    },
    "message": "Multiple CI and code fixes (#486)\n\n* enable golangci-lint for momeory_store example\r\n\r\n* add race_test option to makefile\r\n\r\n* prune lost goroutine in TestRest_Shutdown\r\n\r\n* run race tests without cache\r\n\r\n* fix ci pipeline\r\n\r\n* fix typos",
    "tree": {
      "sha": "b0999968573bd5f03b97c831f1646d8f9ff111ca",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/b0999968573bd5f03b97c831f1646d8f9ff111ca"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/30c42ce36b1a06073f970b16d08be65fd3542f12",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/30c42ce36b1a06073f970b16d08be65fd3542f12",
  "html_url": "https://github.com/umputun/remark/commit/30c42ce36b1a06073f970b16d08be65fd3542f12",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/30c42ce36b1a06073f970b16d08be65fd3542f12/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b40cb7866b9c4b39e2c352e929a0bead26db1369",
      "url": "https://api.github.com/repos/umputun/remark/commits/b40cb7866b9c4b39e2c352e929a0bead26db1369",
      "html_url": "https://github.com/umputun/remark/commit/b40cb7866b9c4b39e2c352e929a0bead26db1369"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 24,
    "deletions": 13
  },
  "files": [
    {
      "sha": "e18c0d46122d30f83f5740f968fc0fb9d8062115",
      "filename": ".github/workflows/ci-build.yml",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark/blob/30c42ce36b1a06073f970b16d08be65fd3542f12/.github/workflows/ci-build.yml",
      "raw_url": "https://github.com/umputun/remark/raw/30c42ce36b1a06073f970b16d08be65fd3542f12/.github/workflows/ci-build.yml",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/.github/workflows/ci-build.yml?ref=30c42ce36b1a06073f970b16d08be65fd3542f12",
      "patch": "@@ -36,7 +36,7 @@ jobs:\n         go test -mod=vendor -timeout=60s -covermode=count -coverprofile=$GITHUB_WORKSPACE/profile.cov_tmp ./...\n         cat $GITHUB_WORKSPACE/profile.cov_tmp | grep -v \"_mock.go\" > $GITHUB_WORKSPACE/profile.cov\n         cd ../_example/memory_store\n-        go test ./...\n+        go test -race ./...\n \n     - name: install golangci-lint and goveralls\n       run: |\n@@ -50,6 +50,11 @@ jobs:\n           --enable=megacheck --enable=structcheck --enable=gas --enable=gocyclo --enable=dupl --enable=misspell \\\n           --enable=unparam --enable=varcheck --enable=deadcode --enable=typecheck \\\n           --enable=ineffassign --enable=varcheck ./... ;\n+        cd _example/memory_store\n+        $GITHUB_WORKSPACE/golangci-lint run --out-format=tab --disable-all --tests=false --enable=unconvert \\\n+          --enable=megacheck --enable=structcheck --enable=gas --enable=gocyclo --enable=dupl --enable=misspell \\\n+          --enable=unparam --enable=varcheck --enable=deadcode --enable=typecheck \\\n+          --enable=ineffassign --enable=varcheck ./... ;\n \n     - name: submit coverage\n       run: |"
    },
    {
      "sha": "45ffdb8e9df44a1cdc8b1b67d219cfab8f80bb7a",
      "filename": "Makefile",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/30c42ce36b1a06073f970b16d08be65fd3542f12/Makefile",
      "raw_url": "https://github.com/umputun/remark/raw/30c42ce36b1a06073f970b16d08be65fd3542f12/Makefile",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/Makefile?ref=30c42ce36b1a06073f970b16d08be65fd3542f12",
      "patch": "@@ -23,4 +23,7 @@ deploy:\n \tdocker cp remark42.bin:/artifacts/remark42.windows-amd64.zip bin/remark42.windows-amd64.zip\n \tdocker rm -f remark42.bin\n \n+race_test:\n+\tcd backend/app && go test -race -mod=vendor -timeout=60s -count 1 ./...\n+\n .PHONY: bin\n\\ No newline at end of file"
    },
    {
      "sha": "62ff67c5fb8e72c9b2885cdd84d995d0362db348",
      "filename": "README.md",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/umputun/remark/blob/30c42ce36b1a06073f970b16d08be65fd3542f12/README.md",
      "raw_url": "https://github.com/umputun/remark/raw/30c42ce36b1a06073f970b16d08be65fd3542f12/README.md",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/README.md?ref=30c42ce36b1a06073f970b16d08be65fd3542f12",
      "patch": "@@ -776,17 +776,17 @@ _returned id should be appended to load image url on caller side_\n       Until     time.Time `json:\"time\"`\n   }\n   ```\n-* `GET /api/v1/admin/export?site=side-id&mode=[stream|file]` - export all comments to json stream or gz file.\n-* `POST /api/v1/admin/import?site=side-id` - import comments from the backup, uses post body.\n-* `POST /api/v1/admin/import/form?site=side-id` - import comments from the backup, user post form.\n-* `POST /api/v1/admin/remap?site=side-id` - remap comments to different URLs. Expect list of \"from-url new-url\" pairs separated by \\n.\n+* `GET /api/v1/admin/export?site=site-id&mode=[stream|file]` - export all comments to json stream or gz file.\n+* `POST /api/v1/admin/import?site=site-id` - import comments from the backup, uses post body.\n+* `POST /api/v1/admin/import/form?site=site-id` - import comments from the backup, user post form.\n+* `POST /api/v1/admin/remap?site=site-id` - remap comments to different URLs. Expect list of \"from-url new-url\" pairs separated by \\n.\n From-url and new-url parts separated by space. If urls end with asterisk (*) it means matching by prefix. Remap procedure based on\n export/import chain so make backup first.\n     ```\n     http://oldsite.com* https://newsite.com*\n     http://oldsite.com/from-old-page/1 https://newsite.com/to-new-page/1\n     ```\n-* `GET /api/v1/admin/wait?site=side-id` - wait for completion for any async migration ops (import or remap).\n+* `GET /api/v1/admin/wait?site=site-id` - wait for completion for any async migration ops (import or remap).\n * `PUT /api/v1/admin/pin/{id}?site=site-id&url=post-url&pin=1` - pin or unpin comment.\n * `GET /api/v1/admin/user/{userid}?site=site-id` - get user's info.\n * `DELETE /api/v1/admin/user/{userid}?site=site-id` - delete all user's comments."
    },
    {
      "sha": "7c045c1ef842f4f219417ee22d72fe153d555c81",
      "filename": "backend/_example/memory_store/accessor/data.go",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/umputun/remark/blob/30c42ce36b1a06073f970b16d08be65fd3542f12/backend/_example/memory_store/accessor/data.go",
      "raw_url": "https://github.com/umputun/remark/raw/30c42ce36b1a06073f970b16d08be65fd3542f12/backend/_example/memory_store/accessor/data.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/_example/memory_store/accessor/data.go?ref=30c42ce36b1a06073f970b16d08be65fd3542f12",
      "patch": "@@ -406,8 +406,7 @@ func (m *MemData) setFlag(req engine.FlagRequest) (res bool, err error) {\n \t\t\t\tuntil = time.Now().Add(req.TTL)\n \t\t\t}\n \t\t}\n-\t\tmeta := m.metaUsers[req.UserID]\n-\t\tmeta = metaUser{\n+\t\tmeta := metaUser{\n \t\t\tUserID:       req.UserID,\n \t\t\tSiteID:       req.Locator.SiteID,\n \t\t\tBlocked:      status,\n@@ -416,8 +415,7 @@ func (m *MemData) setFlag(req engine.FlagRequest) (res bool, err error) {\n \t\tm.metaUsers[req.UserID] = meta\n \n \tcase engine.Verified:\n-\t\tmeta := m.metaUsers[req.UserID]\n-\t\tmeta = metaUser{\n+\t\tmeta := metaUser{\n \t\t\tUserID:   req.UserID,\n \t\t\tSiteID:   req.Locator.SiteID,\n \t\t\tVerified: status,"
    },
    {
      "sha": "259e2b3e1caafb72769884c476296eb834d1426a",
      "filename": "backend/app/main_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/30c42ce36b1a06073f970b16d08be65fd3542f12/backend/app/main_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/30c42ce36b1a06073f970b16d08be65fd3542f12/backend/app/main_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/main_test.go?ref=30c42ce36b1a06073f970b16d08be65fd3542f12",
      "patch": "@@ -38,7 +38,7 @@ func Test_Main(t *testing.T) {\n \tgo func() {\n \t\tst := time.Now()\n \t\tmain()\n-\t\tassert.True(t, time.Since(st).Seconds() >= 4, \"should take about 5s\", time.Since(st))\n+\t\tassert.True(t, time.Since(st).Seconds() >= 4, \"should take about 5s, took %s\", time.Since(st))\n \t\twg.Done()\n \t}()\n "
    },
    {
      "sha": "0151012b61f635ab70eb9b5dca2f0d78cb0c89e5",
      "filename": "backend/app/notify/telegram.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/30c42ce36b1a06073f970b16d08be65fd3542f12/backend/app/notify/telegram.go",
      "raw_url": "https://github.com/umputun/remark/raw/30c42ce36b1a06073f970b16d08be65fd3542f12/backend/app/notify/telegram.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/notify/telegram.go?ref=30c42ce36b1a06073f970b16d08be65fd3542f12",
      "patch": "@@ -40,7 +40,7 @@ func NewTelegram(token string, channelID string, timeout time.Duration, api stri\n \tif res.timeout == 0 {\n \t\tres.timeout = telegramTimeOut\n \t}\n-\tlog.Printf(\"[DEBUG] create new telegram notifier for cham %s, timeout=%s, api=%s\", channelID, res.timeout, res.timeout)\n+\tlog.Printf(\"[DEBUG] create new telegram notifier for chan %s, timeout=%s, api=%s\", channelID, res.timeout, res.timeout)\n \n \tctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n \tdefer cancel()"
    },
    {
      "sha": "99d531e8dbb384241a95757d625a90e3c89291e7",
      "filename": "backend/app/rest/api/rest_test.go",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/umputun/remark/blob/30c42ce36b1a06073f970b16d08be65fd3542f12/backend/app/rest/api/rest_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/30c42ce36b1a06073f970b16d08be65fd3542f12/backend/app/rest/api/rest_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_test.go?ref=30c42ce36b1a06073f970b16d08be65fd3542f12",
      "patch": "@@ -73,15 +73,20 @@ func TestRest_GetStarted(t *testing.T) {\n \n func TestRest_Shutdown(t *testing.T) {\n \tsrv := Rest{Authenticator: &auth.Service{}, ImageProxy: &proxy.Image{}}\n+\tfinished := make(chan bool)\n \n+\t// without waiting for channel close at the end goroutine will stay alive after test finish\n+\t// which would create data race with next test\n \tgo func() {\n \t\ttime.Sleep(200 * time.Millisecond)\n \t\tsrv.Shutdown()\n+\t\tclose(finished)\n \t}()\n \n \tst := time.Now()\n \tsrv.Run(0)\n \tassert.True(t, time.Since(st).Seconds() < 1, \"should take about 100ms\")\n+\t<-finished\n }\n \n func TestRest_filterComments(t *testing.T) {\n@@ -362,7 +367,7 @@ func startupT(t *testing.T) (ts *httptest.Server, srv *Rest, teardown func()) {\n \treturn ts, srv, teardown\n }\n \n-// fake auth middleware make user authed and uses query's fake_id for ID and fake_name for Name\n+// fake auth middleware make user authenticated and uses query's fake_id for ID and fake_name for Name\n func fakeAuth(next http.Handler) http.Handler {\n \tfn := func(w http.ResponseWriter, r *http.Request) {\n \t\tif r.URL.Query().Get(\"fake_id\") != \"\" {"
    }
  ]
}
