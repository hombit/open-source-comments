{
  "sha": "151809825ad73e0e57715b8e7fd0ec05562b3d14",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjE1MTgwOTgyNWFkNzNlMGU1NzcxNWI4ZTdmZDBlYzA1NTYyYjNkMTQ=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-12-22T22:04:57Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2019-12-22T22:04:57Z"
    },
    "message": "Merge pull request #499 from paskal/improve_service_tests\n\nAdd unit tests for service operations with user details",
    "tree": {
      "sha": "dce1273970ad6c8a241419a0e6888a5fbfee7aac",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/dce1273970ad6c8a241419a0e6888a5fbfee7aac"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/151809825ad73e0e57715b8e7fd0ec05562b3d14",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/+iJCRBK7hj4Ov3rIwAAdHIIAJP3H9/O7cgX30/xAlKXz8DZ\npK7KgLGjXmbvhsnmAcgNduswfn/fFL2tWd6ptqaQHNGogE2Dt350VMYU5LXFZzIp\nL77wqsjDnahIZadHnCTzScBjQIbz5kXEL7ZT3ZoBeeFvQ0Cc7jZ4Jf418eYn+4l3\nKt9zydG163AtZpyJSYzm2lGccWKXyVJ9H4kHoWwuKPn0UgQeWdNnKCsdmzsXUhvz\n8rcis6EAc4utNoFZUdD2U2Hb4NesejGUh5nhnqfdBS3Z5OKfNNh4PALyIOZdaclj\niGEE3tz2Cg69eOJKxqth7L8eSELN6+Ci0rUUxBf6wst3lUNY0ZgPemI78a2tcxI=\n=H/3P\n-----END PGP SIGNATURE-----\n",
      "payload": "tree dce1273970ad6c8a241419a0e6888a5fbfee7aac\nparent fde6f520c953a557bda6147fa76e8e9443af604e\nparent 997127f33ed16550543a02728f4f9ac8afae0845\nauthor Umputun <umputun@gmail.com> 1577052297 -0600\ncommitter GitHub <noreply@github.com> 1577052297 -0600\n\nMerge pull request #499 from paskal/improve_service_tests\n\nAdd unit tests for service operations with user details"
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/151809825ad73e0e57715b8e7fd0ec05562b3d14",
  "html_url": "https://github.com/umputun/remark/commit/151809825ad73e0e57715b8e7fd0ec05562b3d14",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/151809825ad73e0e57715b8e7fd0ec05562b3d14/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fde6f520c953a557bda6147fa76e8e9443af604e",
      "url": "https://api.github.com/repos/umputun/remark/commits/fde6f520c953a557bda6147fa76e8e9443af604e",
      "html_url": "https://github.com/umputun/remark/commit/fde6f520c953a557bda6147fa76e8e9443af604e"
    },
    {
      "sha": "997127f33ed16550543a02728f4f9ac8afae0845",
      "url": "https://api.github.com/repos/umputun/remark/commits/997127f33ed16550543a02728f4f9ac8afae0845",
      "html_url": "https://github.com/umputun/remark/commit/997127f33ed16550543a02728f4f9ac8afae0845"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 36,
    "deletions": 1
  },
  "files": [
    {
      "sha": "391668abb1020da2348c25165ca6e9947f08988e",
      "filename": "backend/app/store/engine/bolt_test.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/151809825ad73e0e57715b8e7fd0ec05562b3d14/backend/app/store/engine/bolt_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/151809825ad73e0e57715b8e7fd0ec05562b3d14/backend/app/store/engine/bolt_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/engine/bolt_test.go?ref=151809825ad73e0e57715b8e7fd0ec05562b3d14",
      "patch": "@@ -625,7 +625,7 @@ func TestBoltDB_UserDetail(t *testing.T) {\n \tb, teardown := prep(t)\n \tdefer teardown()\n \n-\t// add to entries to DB before we start\n+\t// add two entries to DB before we start\n \tresult, err := b.UserDetail(UserDetailRequest{Locator: store.Locator{SiteID: \"radio-t\"}, UserID: \"u1\", Detail: UserEmail, Update: \"test@example.com\"})\n \tassert.NoError(t, err, \"No error inserting entry expected\")\n \tassert.ElementsMatch(t, []UserDetailEntry{{UserID: \"u1\", Email: \"test@example.com\"}}, result)"
    },
    {
      "sha": "a119076c20bc0e42f8b43953a1dfa220938258a1",
      "filename": "backend/app/store/service/service_test.go",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/umputun/remark/blob/151809825ad73e0e57715b8e7fd0ec05562b3d14/backend/app/store/service/service_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/151809825ad73e0e57715b8e7fd0ec05562b3d14/backend/app/store/service/service_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/store/service/service_test.go?ref=151809825ad73e0e57715b8e7fd0ec05562b3d14",
      "patch": "@@ -774,6 +774,41 @@ func TestService_SetMetas(t *testing.T) {\n \tassert.Equal(t, []engine.UserDetailEntry{{UserID: \"user1\", Email: \"test@example.org\"}}, val)\n }\n \n+func TestService_UserDetailsOperations(t *testing.T) {\n+\tdefer teardown(t)\n+\tb := DataStore{Engine: prepStoreEngine(t), EditDuration: 100 * time.Millisecond,\n+\t\tAdminStore: admin.NewStaticKeyStore(\"secret 123\")}\n+\n+\t// add single valid entry\n+\tresult, err := b.SetUserEmail(store.Locator{SiteID: \"radio-t\"}, \"u1\", \"test@example.com\")\n+\tassert.NoError(t, err, \"No error inserting entry expected\")\n+\tassert.Equal(t, \"test@example.com\", result)\n+\n+\t// read valid entry back\n+\tresult, err = b.GetUserEmail(store.Locator{SiteID: \"radio-t\"}, \"u1\")\n+\tassert.NoError(t, err, \"No error reading entry expected\")\n+\tassert.Equal(t, \"test@example.com\", result)\n+\n+\t// delete existing entry\n+\terr = b.DeleteUserDetail(store.Locator{SiteID: \"radio-t\"}, \"u1\", engine.UserEmail)\n+\tassert.NoError(t, err, \"No error deleting entry expected\")\n+\n+\t// read deleted entry\n+\tresult, err = b.GetUserEmail(store.Locator{SiteID: \"radio-t\"}, \"u1\")\n+\tassert.NoError(t, err, \"No error reading entry expected\")\n+\tassert.Empty(t, result)\n+\n+\t// insert entry with invalid site_id\n+\tresult, err = b.SetUserEmail(store.Locator{SiteID: \"bad-site\"}, \"u3\", \"does_not_matter@example.com\")\n+\tassert.Error(t, err, \"Site not found\")\n+\tassert.Empty(t, result)\n+\n+\t// read entry with invalid site_id\n+\tresult, err = b.GetUserEmail(store.Locator{SiteID: \"bad-site\"}, \"u3\")\n+\tassert.Error(t, err, \"Site not found\")\n+\tassert.Empty(t, result)\n+}\n+\n func TestService_IsAdmin(t *testing.T) {\n \tdefer teardown(t)\n \t// two comments for https://radio-t.com"
    }
  ]
}
