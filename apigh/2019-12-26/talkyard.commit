{
  "sha": "63430f15faf9b297106f88b8c25ac5b73ccd8288",
  "node_id": "MDY6Q29tbWl0MTA1NjMzMjI6NjM0MzBmMTVmYWY5YjI5NzEwNmY4OGI4YzI1YWM1YjczY2NkODI4OA==",
  "commit": {
    "author": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-12-11T14:48:48Z"
    },
    "committer": {
      "name": "Kaj Magnus Lindberg",
      "email": "kajmagnus3@gmail.com",
      "date": "2019-12-13T07:31:03Z"
    },
    "message": "Code review. Break out fn urlIsToDifferentOrigin().",
    "tree": {
      "sha": "2a7bd89896a96d3fee11300b6919392ed78f6500",
      "url": "https://api.github.com/repos/debiki/talkyard/git/trees/2a7bd89896a96d3fee11300b6919392ed78f6500"
    },
    "url": "https://api.github.com/repos/debiki/talkyard/git/commits/63430f15faf9b297106f88b8c25ac5b73ccd8288",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/debiki/talkyard/commits/63430f15faf9b297106f88b8c25ac5b73ccd8288",
  "html_url": "https://github.com/debiki/talkyard/commit/63430f15faf9b297106f88b8c25ac5b73ccd8288",
  "comments_url": "https://api.github.com/repos/debiki/talkyard/commits/63430f15faf9b297106f88b8c25ac5b73ccd8288/comments",
  "author": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "kajmagnus",
    "id": 7477359,
    "node_id": "MDQ6VXNlcjc0NzczNTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7477359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kajmagnus",
    "html_url": "https://github.com/kajmagnus",
    "followers_url": "https://api.github.com/users/kajmagnus/followers",
    "following_url": "https://api.github.com/users/kajmagnus/following{/other_user}",
    "gists_url": "https://api.github.com/users/kajmagnus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kajmagnus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kajmagnus/subscriptions",
    "organizations_url": "https://api.github.com/users/kajmagnus/orgs",
    "repos_url": "https://api.github.com/users/kajmagnus/repos",
    "events_url": "https://api.github.com/users/kajmagnus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kajmagnus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39a90c5b0bc29cef25cc20285da5127f3bcc5b87",
      "url": "https://api.github.com/repos/debiki/talkyard/commits/39a90c5b0bc29cef25cc20285da5127f3bcc5b87",
      "html_url": "https://github.com/debiki/talkyard/commit/39a90c5b0bc29cef25cc20285da5127f3bcc5b87"
    }
  ],
  "stats": {
    "total": 758,
    "additions": 506,
    "deletions": 252
  },
  "files": [
    {
      "sha": "909f8b173e3d4b92065a1329aae4c4dd62a9fb47",
      "filename": "app/controllers/AdminController.scala",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/controllers/AdminController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/controllers/AdminController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/AdminController.scala?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -107,6 +107,7 @@ class AdminController @Inject()(cc: ControllerComponents, edContext: EdContext)\n     val oneTimeSecret = nextRandomString()\n \n     dao.redisCache.saveOneTimeLoginSecret(\n+      // Set a long timeout, so the admin has time to open and read the email.\n       oneTimeSecret, admin.id, expireSeconds = Some(MaxResetPasswordEmailAgeInHours * 3600))\n \n     sendOneTimeLoginEmail("
    },
    {
      "sha": "759408f3a27141747fba45a6785a350a4dc0c2cc",
      "filename": "app/controllers/ApiV0Controller.scala",
      "status": "modified",
      "additions": 15,
      "deletions": 9,
      "changes": 24,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/controllers/ApiV0Controller.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/controllers/ApiV0Controller.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/ApiV0Controller.scala?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -76,6 +76,7 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext,\n       getOnly(queryParam) getOrThrowBadArgument(errorCode, queryParam)\n \n     // Let's always allow one-time login — works only if this server has generated a secret.\n+    // Needed for embedded comments signup-login to work if 3rd party cookies blocked. [306KUD244]\n     val isOneTimeLogin = apiEndpoint == \"login-with-secret\"\n \n     throwForbiddenIf(!settings.enableApi && !isOneTimeLogin,\n@@ -153,16 +154,20 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext,\n             throwForbidden(s\"TyELGISECR_$subCode\", errorDetails)\n         }\n \n-        // The Sy tem user should only do things based on Talkyard's source code. [SYS0LGI]\n+        // The System user should only do things based on Talkyard's source code. [SYS0LGI]\n         throwForbiddenIf(userId == SystemUserId, \"TyELGISYS\", \"Cannot login as System.\")\n+\n+        // The Sysbot user should only do things based API requests.\n+        throwForbiddenIf(userId == SysbotUserId, \"TyELGIBOT\", \"Cannot login as Sysbot.\")\n+\n         val user = dao.getTheUser(userId)\n         dao.pubSub.userIsActive(siteId, user, request.theBrowserIdData)\n         val (sid, _, sidAndXsrfCookies) = security.createSessionIdAndXsrfToken(siteId, user.id)\n \n         val response = if (request.isAjax) {\n-          // ?? Set cookies ??\n-          // so admin gets logged in ??\n-          // Can one delete cookies, if in iframe and cookies blocked?  so can logout\n+          // As of 2019-12: This is embedded comments login, when 3rd party cookies blocked. [306KUD244]\n+          SECURITY // a session cookie will get attached too — would be good if it could\n+          // be deleted server side. [serversid]\n           OkSafeJson(Json.obj(\n             // Not yet weak but later. [weaksid]\n             \"weakSessionId\" -> JsString(sid.value)))  // [NOCOOKIES]\n@@ -180,9 +185,9 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext,\n             val isOk = LoginWithSecretController.isAllowedRedirectUrl(\n               url, request.origin, request.siteSettings.allowEmbeddingFromBetter, globals.secure)\n \n-            // Later, but for now only in dev & test:\n+            // Later, but for now only in dev & test:  (also see: [306SKTGR43])\n             throwForbiddenIf(!globals.isProd && !isOk,\n-              \"TyEEXTREDIR\", o\"\"\"Bad thenGoTo url: '$url' — it's to a different server\n+              \"TyEEXTREDIR1\", o\"\"\"Bad thenGoTo url: '$url' — it's to a different server\n                 not in the Allow-Embedding-From list ( /-/admin/settings/embedded-comments ).\n                 This could be a phishing attempt.\"\"\")\n             // But for now, backw compat, but not programmer friendly: Remove this after\n@@ -207,10 +212,9 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext,\n           val thenGoTo = thenGoToHashEncoded.replaceAllLiterally(\"__dwHash__\", \"#\")\n \n           TemporaryRedirect(thenGoTo)\n-              .withCookies(sidAndXsrfCookies: _*)\n         }\n \n-        response\n+        response.withCookies(sidAndXsrfCookies: _*)\n \n       // Later:\n       // /-/v0/comments-feed —> lists all recent blog comments   [CMTSFEED]\n@@ -386,7 +390,9 @@ class ApiV0Controller @Inject()(cc: ControllerComponents, edContext: EdContext,\n         }\n \n         val secret = nextRandomString()\n-        dao.redisCache.saveOneTimeLoginSecret(secret, user.id)\n+        val expireSeconds = Some(globals.config.oneTimeSecretSecondsToLive)\n+\n+        dao.redisCache.saveOneTimeLoginSecret(secret, user.id, expireSeconds)\n         OkApiJson(Json.obj(\n           \"loginSecret\" -> secret,\n           \"ssoLoginSecret\" -> secret))  // REMOVE deprecated old name"
    },
    {
      "sha": "229174630373fc451b78cae7f7f64c53f464ee83",
      "filename": "app/controllers/DebugTestController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/controllers/DebugTestController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/controllers/DebugTestController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/DebugTestController.scala?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -247,7 +247,8 @@ class DebugTestController @Inject()(cc: ControllerComponents, edContext: EdConte\n   def deleteRedisKey: Action[JsValue] = PostJsonAction(RateLimits.BrowserError, maxBytes = 100) {\n         request =>\n     throwForbiddenIf(globals.isProd, \"TyE502KUJ5\",\n-        \"I only do this, in Prod mode, when an odd number of Phoenix birds sleep on my lawn\")\n+        \"I only do this, in Prod mode, when an odd number of \" +\n+          \"Phoenix birds sleep at my fireplace\")\n     val key = (request.body \\ \"key\").as[String]\n     context.globals.redisClient.del(key)\n     Ok\n@@ -256,10 +257,10 @@ class DebugTestController @Inject()(cc: ControllerComponents, edContext: EdConte\n \n   def skipRateLimitsForThisSite: Action[JsValue] =\n         PostJsonAction(RateLimits.BrowserError, maxBytes = 50) { request =>\n-    val okTestPassword = !context.security.hasOkE2eTestPassword(request.underlying)\n-    throwForbiddenIf(globals.isProd && !okTestPassword,\n+    val okE2ePassword = context.security.hasOkE2eTestPassword(request.underlying)\n+    throwForbiddenIf(globals.isProd && !okE2ePassword,\n       \"TyE8WTHFJ25\", \"I only do this, in Prod mode, if I can see two moons from \" +\n-        \"my kitchen window and I'm not hungry\")\n+        \"my kitchen window and at least two of my pigeons tell me I should.\")\n     val siteId = (request.body \\ \"siteId\").as[SiteId]\n     globals.siteDao(siteId).skipRateLimitsBecauseIsTest()\n     Ok"
    },
    {
      "sha": "425821e545117b967ab3cb59e055a40f3cf61854",
      "filename": "app/controllers/LoginWithPasswordController.scala",
      "status": "modified",
      "additions": 30,
      "deletions": 19,
      "changes": 49,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/controllers/LoginWithPasswordController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/controllers/LoginWithPasswordController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/LoginWithPasswordController.scala?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -245,19 +245,22 @@ class LoginWithPasswordController @Inject()(cc: ControllerComponents, edContext:\n           (None, Nil)\n       }\n \n-      // If anySid is absent because one needs to verify one's email before logging in,\n-      // and this is for embedded blog comments and 3rd party cookies are blocked — then,\n-      // to post a comment, currently one will need to login again, after having\n-      // verified one's email.\n-      UX; COULD // It'd be nice if the verify-email-addr link included a hash fragment\n-      // with a one-time-secret that was read by Talkyards javascript on the embedding\n-      // page, passed on to the iframe, which then sent it to the server once\n-      // to get a session id — without logging in again.  [0439BAS2]\n+      val weakSessionId =\n+        if (!maybeCannotUseCookies) \"\" else {\n+          // If anySid is absent because one needs to verify one's email before logging in,\n+          // and this is for embedded blog comments, and 3rd party cookies are blocked — then,\n+          // when one clicks the verify-email-address link, one will get redirected\n+          // back to the blog, with a one-time-login-secret included the hash fragment.\n+          // Talkyard's javascript on the embedding blog post page then sends this secret\n+          // to the iframe, which sends it to the server, and gets back a session id\n+          // — without logging in again. [TyT072FKHRPJ5]\n+          anySid.map(_.value).getOrElse(\"\") // [NOCOOKIES]\n+        }\n+\n       val responseJson = Json.obj(\n         \"userCreatedAndLoggedIn\" -> JsBoolean(loginCookies.nonEmpty),\n         \"emailVerifiedAndLoggedIn\" -> JsBoolean(emailVerifiedAt.isDefined),\n-        \"weakSessionId\" -> JsString(\n-            if (maybeCannotUseCookies) anySid.map(_.value).getOrElse(\"\") else \"\")) // [NOCOOKIES]\n+        \"weakSessionId\" -> JsString(weakSessionId))\n \n       OkSafeJson(responseJson).withCookies(loginCookies: _*)\n     }\n@@ -291,10 +294,16 @@ class LoginWithPasswordController @Inject()(cc: ControllerComponents, edContext:\n     // on Safari or FF, because of ITP and ETP tracking prevention\n     // that blocks cookies in iframes).\n \n+    val isOk = LoginWithSecretController.isAllowedRedirectUrl(\n+      returnToUrl, request.origin, request.siteSettings.allowEmbeddingFromBetter, globals.secure)\n+\n+    throwForbiddenIf(!globals.isProd && !isOk,  // also see [306SKTGR43]\n+      \"TyEEXTREDIR2\", o\"\"\"Bad returnToUrl url: '$returnToUrl' — it's to a different server\n+          not in the Allow-Embedding-From list ( /-/admin/settings/embedded-comments ).\n+          This could be a phishing attempt.\"\"\")\n+\n     val returnToOtherServer =\n-      (returnToUrl.startsWith(\"http://\") ||\n-        returnToUrl.startsWith(\"https://\") ||\n-        returnToUrl.startsWith(\"//\")) && !returnToUrl.startsWith(request.origin)\n+      urlIsToDifferentOrigin(returnToUrl, thisServerOrigin = request.origin)\n \n     val (newCookies, anyReturnToUrl) =\n       if (returnToOtherServer) {\n@@ -303,12 +312,14 @@ class LoginWithPasswordController @Inject()(cc: ControllerComponents, edContext:\n         // Tested here: [TyT072FKHRPJ5].\n         dieIf(returnToUrl.isEmpty, \"TyE06KFUD2\")\n         val loginSecret = nextRandomString()\n-        dao.redisCache.saveOneTimeLoginSecret(loginSecret, user.id,\n-          // The subsequent steps will be automatic, by the browser [306KUD244],\n-          // so we can set a short expire time (no need to wait for the human to do\n-          // anything). In dev mode though, allow time for debugging & breakpoints.\n-          expireSeconds = Some(context.globals.isProd ? 10 | 10*60))\n-        // This might result in two '#' in the URL, should be fine.\n+\n+        dao.redisCache.saveOneTimeLoginSecret(\n+          loginSecret, user.id, Some(globals.config.oneTimeSecretSecondsToLive))\n+\n+        // This might result in two '#' in the URL (if there's a #comment-123 already),\n+        // should be fine. Don't include a real session id, instead, Talkyard\n+        // javascript on the destination page will send the one-time secret to\n+        // the server, and get back a session id. [306KUD244]\n         (Nil, Some(returnToUrl + s\"#talkyardOneTimeLoginSecret=$loginSecret\"))\n       }\n       else {"
    },
    {
      "sha": "828a749f0ada0abb578df498b9e367421634e92e",
      "filename": "app/controllers/ViewPageController.scala",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/controllers/ViewPageController.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/controllers/ViewPageController.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/controllers/ViewPageController.scala?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -408,6 +408,11 @@ object ViewPageController {\n       \"numStrangersOnline\" -> usersOnlineStuff.numStrangers,\n       \"me\" -> anyUserSpecificDataJson.getOrElse(JsNull).asInstanceOf[JsValue])\n \n+    // (If the requester is logged in so we could load a real 'me' here,\n+    // then, somehow the browser sent the server the session id, so no need to\n+    // include it in the response — the browser knows already.\n+    // However if this is the first page the user looks at, not yet logged in,\n+    // then, it might have no xsrf token — need to include. (But not session id.)\n     xsrfTokenIfNoCookies foreach { token =>\n       volatileJson = volatileJson + (\"xsrfTokenIfNoCookies\" -> JsString(token))   // [NOCOOKIES]\n     }"
    },
    {
      "sha": "2f33226bd2addbda27393bbb8c977f686668f8ee",
      "filename": "app/debiki/Globals.scala",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/debiki/Globals.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/debiki/Globals.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/Globals.scala?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -1109,6 +1109,15 @@ class Config(conf: play.api.Configuration) {\n   val mayImportSite: Boolean = getBoolOrDefault(\"talkyard.mayImportSite\", default = false)\n   val maxImportDumpBytes: Int = getIntOrDefault(\"talkyard.maxImportDumpBytes\", default = 50*1000*1000)\n \n+  val oneTimeSecretSecondsToLive: Long = getIntOrDefault(\n+    \"talkyard.oneTimeSecretSecondsToLive\",\n+    // Typically, the subsequent steps will be automatic, by the browser [306KUD244],\n+    // so we can set a short expire time (no need to wait for the human to do\n+    // anything). In dev mode though, allow time for debugging & breakpoints.\n+    // Short time-to-live is good, mitigates session fixation attacks?\n+    // Maybe just 15 seconds would be better? Let's wait with that.\n+    default = if (isProd) 30 else 30 * 60).toLong\n+\n   val featureFlags: Map[String, FeatureOnOff] = {\n     val flagsMultiLineString = conf.getString(\"talkyard.featureFlags\").noneIfBlank\n     Map.empty  // for now"
    },
    {
      "sha": "22639a57417fdcf214189c60689a09af25878f32",
      "filename": "app/debiki/TextAndHtml.scala",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/debiki/TextAndHtml.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/debiki/TextAndHtml.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/TextAndHtml.scala?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -66,6 +66,12 @@ sealed trait TextAndHtml {\n \n \n object TextAndHtml {\n+\n+  // Or could instead use  Nashorn.sanitizeHtml(text: String, followLinks: Boolean) ?\n+  // But it's slow, if importing a whole site. How deal with this?\n+  // Maybe just let admins-that-import-a-site set a flag that everything has been\n+  // sanitized already?_ COULD move server side js to external Nodejs or V8\n+  // processes? So as not to block a thread here, running Nashorn? [external-server-js]\n   def relaxedHtmlTagWhitelist: org.jsoup.safety.Whitelist = {\n     // The caller need to insert  rel=nofollow  henself, see the docs:\n     // https://jsoup.org/apidocs/org/jsoup/safety/Whitelist.html#relaxed--"
    },
    {
      "sha": "4b82e096da55e38683871c1e6e7d09af06abcd2a",
      "filename": "app/debiki/dao/RedisCache.scala",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/debiki/dao/RedisCache.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/app/debiki/dao/RedisCache.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/app/debiki/dao/RedisCache.scala?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -200,8 +200,8 @@ class RedisCache(val siteId: SiteId, private val redis: RedisClient, private val\n             Bad(RemoteRedisClientError.ValueNeverExisted)\n           }\n           else if (usageCount == LoginSecretOffset + 1) {\n-            // The usage count key-value did exist — but the (login-secret, user-id)\n-            // entry did not; it must have expired.\n+            // There is a usage count key-value — but there wasn't any (login-secret, user-id)\n+            // entry; it must have expired.\n             Bad(RemoteRedisClientError.ValueExpired)\n           }\n           else {"
    },
    {
      "sha": "fcc9fcd5611de0ce4fe2f4a96faaa17a795839fd",
      "filename": "client/app-more/login/login-dialog.more.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-more/login/login-dialog.more.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-more/login/login-dialog.more.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-more/login/login-dialog.more.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -441,7 +441,7 @@ const OpenAuthButton = createClassAndFactory({\n       // to include the session id in the response body, so we can access it browser side.\n       // Also see Server.ts. [NOCOOKIES]\n       const mainWin = getMainWin();\n-      if (mainWin.typs.xsrfTokenIfNoCookies || !mainWin.typs.canUseCookies) {\n+      if (!win_canUseCookies(mainWin)) {\n         getSetCookie('TyCoAvoidCookies', 'Avoid');\n       }\n       window.location.assign(url);"
    },
    {
      "sha": "81bc001d80f85212bdd1aff2f9d4e7c06b6e86ec",
      "filename": "client/app-slim/ReactActions.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/ReactActions.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/ReactActions.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/ReactActions.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -82,8 +82,8 @@ export function loadMyself(afterwardsCallback?) {\n     if (isInSomeEmbCommentsIframe()) {\n       // Tell the embedded comments or embedded editor iframe that we just logged in,\n       // also include the session id, so Talkyard's script on the embedding page\n-      // can remember it — because cookies and localstorage in am iframe typically\n-      // don't work, because of trigger happy tracker blockers (they block too much).\n+      // can remember it — because cookies and localstorage in an iframe typically\n+      // get disabled by tracker blockers (they block 3rd party cookies).\n       const mainWin = getMainWin();\n       const typs: PageSession = mainWin.typs;\n       const weakSessionId = typs.weakSessionId;\n@@ -131,7 +131,7 @@ export function logoutClientSideOnly() {\n   // logged out: (not really needed, because we reload() below)\n   Server.abortAnyLongPollingRequest();\n   // Quick fix that reloads the admin page (if one views it) so the login dialog appears:\n-  location.reload();\n+  location.reload(); // [502098SK]\n }\n \n "
    },
    {
      "sha": "c6d38b29076cf3bb44612bfbcda5489df35371d1",
      "filename": "client/app-slim/ReactStore.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/ReactStore.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/ReactStore.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/ReactStore.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -141,6 +141,10 @@ ReactDispatcher.register(function(payload) {\n       break;\n \n     case ReactActions.actionTypes.Logout:\n+      // Not really needed, because logoutClientSideOnly() does reload() [502098SK]\n+      // — but let's clear this anyway:\n+      delete typs.weakSessionId;\n+\n       // (Perhaps the server should instead include a 'reloadPage' param in the /-/logout response?)\n       if (store.userMustBeAuthenticated !== false || store.userMustBeApproved !== false)\n         location.reload();"
    },
    {
      "sha": "5500e08341cd32a1bbe1915629c476c59afba663",
      "filename": "client/app-slim/Server.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/Server.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/Server.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/Server.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -409,12 +409,11 @@ function addAnyNoCookieHeaders(headers: { [headerName: string]: string }) {  //\n   console.log(\"Main win typs: \" + JSON.stringify(win.typs));\n   // @endif\n \n-  const currentPageXsrfToken = win.typs.xsrfTokenIfNoCookies;\n-  const currentPageSid = win.typs.weakSessionId;\n+  const typs: PageSession = win.typs;\n+  const currentPageXsrfToken = typs.xsrfTokenIfNoCookies;\n+  const currentPageSid = typs.weakSessionId;\n \n-  if (currentPageXsrfToken ||  // a bit fragile?\n-      !win.typs.canUseCookies  // this is more stable?\n-      ) {\n+  if (!win_canUseCookies(win)) {\n     headers[AvoidCookiesHeaderName] = 'Avoid';\n     // Not sure if can have been set to xsrf cookie value already? So skip if set.\n     if (!headers[XsrfTokenHeaderName]) {\n@@ -1018,8 +1017,8 @@ export function savePageNotfPrefUpdStoreIfSelf(memberId: UserId, target: PageNot\n \n export function loadMyself(callback: (user: any) => void) {\n   // @ifdef DEBUG\n-  const typs = getMainWin().typs;\n-  if (typs.canUseCookies && !typs.weakSesionIde) {\n+  const typs: PageSession = getMainWin().typs;\n+  if (!typs.canUseCookies && !typs.weakSessionId) {\n     console.error(`Cannot load myself: No cookies, no session: ${typs} [TyE603FKNFD5]`);\n     debugger;\n   }"
    },
    {
      "sha": "083fbe4aa07b928073dac18faeb07d515b58a46b",
      "filename": "client/app-slim/if-in-iframe.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/if-in-iframe.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/if-in-iframe.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/if-in-iframe.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -64,9 +64,16 @@ function onMessage(event) {\n     case 'resumeWeakSession':\n       dieIf(!eds.isInEmbeddedCommentsIframe, 'TyE305RK3');\n       typs.weakSessionId = eventData;\n+      // This will send 'justLoggedIn' to the editor iframe, so it'll get updated too.\n       debiki2.ReactActions.loadMyself();\n       break;\n     case 'justLoggedIn':\n+      // The getMainWin().typs.weakSessionId has been updated already, by\n+      // makeUpdNoCookiesTempSessionIdFn() or in the 'case:' just above, lets check:\n+      // @ifdef DEBUG\n+      const mainWin: MainWin = getMainWin();\n+      dieIf(!mainWin.typs.weakSessionId && !getSetCookie('dwCoSid'), 'TyE3065KDTH2');\n+      // @endif\n       debiki2.ReactActions.setNewMe(eventData.user);\n       break;\n     case 'logoutClientSideOnly':"
    },
    {
      "sha": "a1f00d1b1197e2b5bf0a2cef079f3b085b4887fb",
      "filename": "client/app-slim/login/login-popup.js",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/login/login-popup.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/login/login-popup.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/login/login-popup.js?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -71,12 +71,14 @@ d.i.createLoginPopup = function(url) {\n   // in debiki-login-dialog.ls in a login popup window, see [509KEF31]. \"\"\"\n   d.i.handleLoginResponse = function(result /* : LoginPopupLoginResponse */) {\n     try {\n-      // Sometimes we've remembered any weakSessionId alraedy namely if\n-      // we sent a create-new-user request from the login popup — then we got back\n-      // any weakSessionId in an ajax reply and could remember it directly.\n-      // Then weakSessionId is undefined here. [5028KTDN306]\n+      // Sometimes we've remembered any weakSessionId already, namely if\n+      // we sent a create-new-user ajax request from the login popup — then we got back\n+      // any weakSessionId and could remember it directly.\n+      // Then weakSessionId is undefined here, [5028KTDN306] and then don't\n+      // overwrite the main win's session id with undefined.\n       if (result.weakSessionId) {\n-        debiki2.Server.makeUpdNoCookiesTempSessionIdFn(() => {})(result); // [NOCOOKIES]\n+        // Remember the session in getMainWin().typs.weakSessionId:\n+        debiki2.Server.makeUpdNoCookiesTempSessionIdFn(function() {})(result); // [NOCOOKIES]\n       }\n     }\n     catch (ex) {"
    },
    {
      "sha": "27f62bea833246f506bb8e6e3d808a17a9553cab",
      "filename": "client/app-slim/oop-methods.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/oop-methods.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/oop-methods.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/oop-methods.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -32,6 +32,16 @@\n //------------------------------------------------------------------------------\n \n \n+export function win_canUseCookies(win: MainWin): boolean {\n+  return (\n+      // This first test is if the server got no cookies, although it should have\n+      // gotten some cookie. Is this a bit fragile? Not sure if always works.\n+      !win.typs.xsrfTokenIfNoCookies &&\n+      // This is more reliable?\n+      win.typs.canUseCookies);\n+}\n+\n+\n export function urlPath_isToPageId(urlPath: string, pageId: PageId): boolean {\n   const idPathRegex = new RegExp(`^.*/-${pageId}(/.*)?$`);  // [2WBG49]\n   return idPathRegex.test(urlPath);"
    },
    {
      "sha": "3f80527e71444dbed66565997f6353c18ce21a82",
      "filename": "client/app-slim/prelude.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/prelude.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/prelude.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/prelude.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -155,10 +155,15 @@ export function isInSomeEmbCommentsIframe(): boolean {\n  * are made from the editor iframe and login popup wins too, not just the main\n  * comments win.\n  */\n-export function getMainWin(): any {\n+export function getMainWin(): MainWin {\n   const lookingForName = 'edComments';\n-  if (window.name === lookingForName)\n-    return window;\n+\n+  if (window.name === lookingForName) {\n+    // @ifdef DEBUG\n+    dieIf(!window['typs'], 'TyE7S2063D');\n+    // @endif\n+    return <MainWin> window;\n+  }\n \n   // This is the main window already, unless we're on an embedded comments page or in a login popup.\n   let win = window;\n@@ -186,7 +191,11 @@ export function getMainWin(): any {\n     win = win.parent[lookingForName];\n   }\n \n-  return win;\n+  // @ifdef DEBUG\n+  dieIf(!win['typs'], 'TyE5KTGW0256');\n+  // @endif\n+\n+  return <MainWin> win;\n }\n \n "
    },
    {
      "sha": "2d907b72924118b00788a35baf14bf312ae36539",
      "filename": "client/app-slim/server-vars.d.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/server-vars.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/server-vars.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/server-vars.d.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -12,12 +12,26 @@ interface PageSession  {\n   // This session id is available to client side Javascript, and can be stolen\n   // if there's an XSS vulnerability. So, it's going to have fewer capabilities\n   // than a http-only session when the Talkyard site is opened as the main window\n-  // (rather than embedded in an iframe).  ADD_TO_DOCS\n+  // (rather than embedded in an iframe).\n+  //\n+  // It's needed because Safari and FF blocks 3rd party cookies, so\n+  // we need to remember the login session in a non-cookie somehow.\n+  //\n+  // ADD_TO_DOCS\n+  //\n   weakSessionId: string | undefined;\n }\n \n+// REMOVE? shouldn't access, if in emb cmts editor or login popup,\n+// instead, should use getMainWin().typs.\n declare const typs: PageSession;\n \n+interface __MainWinInterface extends Window {\n+  typs: PageSession;\n+}\n+\n+type MainWin = __MainWinInterface & typeof globalThis;\n+\n \n // These variables are initialized in a certain <head><script>.  [5JWKA27]\n "
    },
    {
      "sha": "2c129b92e4449d4f6c10724f4ed489848403e510",
      "filename": "client/app-slim/slim-bundle.d.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/slim-bundle.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/slim-bundle.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/slim-bundle.d.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -110,7 +110,8 @@ declare namespace ed {\n \n declare namespace debiki2 {\n \n-  function getMainWin(): { typs: PageSession };\n+  function getMainWin(): MainWin;\n+  function win_canUseCookies(win: MainWin): boolean;\n \n   function getNowMs(): WhenMs;\n "
    },
    {
      "sha": "c7fc45b370df0a33fee10f3d781f5b5a533a9ce1",
      "filename": "client/app-slim/start-page.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/start-page.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/app-slim/start-page.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/app-slim/start-page.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -70,7 +70,7 @@ function handleLoginInOtherBrowserTab() {\n       }\n     }\n     else {\n-      const mainWin = debiki2.getMainWin();\n+      const mainWin: MainWin = debiki2.getMainWin();\n       if (mainWin.typs.weakSessionId) {\n         // We're logged in, cookieless. Fine. [NOCOOKIES]\n       }"
    },
    {
      "sha": "8fb85f50b4becc9b22dc280488fc4f471cc16d11",
      "filename": "client/embedded-comments/iframe-parent.js",
      "status": "modified",
      "additions": 16,
      "deletions": 13,
      "changes": 29,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/embedded-comments/iframe-parent.js",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/client/embedded-comments/iframe-parent.js",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/client/embedded-comments/iframe-parent.js?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -39,15 +39,15 @@ const windowWithTalkyardProps: WindowWithTalkyardProps = <any> window;\n // Default to logging debug messages, for now, because people send screenshots of the\n // console when sth is amiss, and nice to get the log messages then.\n const debugLog: (...args) => void =\n-    windowWithTalkyardProps.talkyardDebug === false ||\n-    windowWithTalkyardProps.talkyardDebug === 0 ||\n-    !window.console\n+    (windowWithTalkyardProps.talkyardDebug === false ||\n+        windowWithTalkyardProps.talkyardDebug === 0 ||\n+        !window.console)\n     ? function() {}\n     : function() {\n       // Clone the function arguments array.\n       var args = [].slice.call(arguments);\n       // Add a prefix to the 1st arg, the actuall message.\n-      // (Subsequent args could be an exception to log, not sure exactly what.)\n+      // (Subsequent args could be an exception to log, who knows.)\n       var arg0 = args[0];\n       arg0 = \"Talkyard comments: \" + arg0;\n       args.splice(0, 1, arg0);\n@@ -79,7 +79,7 @@ var editorPlaceholder;\n // the sense that, even if you're admin, you cannot use it to go to the admin area\n // and do things there. Then instead you need to login directly to the Talkyard\n // server, rather than on the embedding site via the iframe — so an XSS\n-// vulnerability on the embeddin site (the blog) won't give admin access.\n+// vulnerability on the embedding site (the blog) cannot give admin access.\n var theStorage = localStorage;\n \n addEventListener('scroll', messageCommentsIframeNewWinTopSize);\n@@ -372,6 +372,9 @@ function onMessage(event) {\n       // If we want to scroll to & highlight a post: The post is inside the iframe and we don't\n       // know where. So tell the iframe to send back a 'scrollComments' message to us,\n       // with info about how to scroll.\n+      //\n+      // (Could wait until after has resumed any old session? See below. Barely matters.)\n+      //\n       if (postNrToFocus) {\n         messageCommentsIframeToMessageMeToScrollTo(postNrToFocus);\n       }\n@@ -452,11 +455,12 @@ function onMessage(event) {\n           pubSiteId: eventData.pubSiteId,\n           weakSessionId: eventData.weakSessionId,\n         };\n-        if (!item.weakSessionId ||\n-            // This'd be a bug elsewhere:\n-            item.weakSessionId === 'undefined') {\n+        const isUndef = item.weakSessionId === 'undefined'; // this'd be a bug elsewhere\n+        if (!item.weakSessionId || isUndef) {\n           debugLog(`weakSessionId missing [TyE0WKSID]: ${JSON.stringify(eventData)}`);\n-          debugger;\n+          if (isUndef) {\n+            debugger;\n+          }\n         }\n         else {\n           // This re-inserts our session (3548236), if we just sent a 'resumeWeakSession'\n@@ -560,10 +564,10 @@ function sendToIframeImpl(iframe, initedArr: boolean[], pendingMessages,\n   // Dupl code (6029084583).\n \n   // Sometimes one iframe comes alive and wants to message the other one,\n-  // before it's ready.\n+  // before that other iframe is ready.\n   // [E2EBUG] it's not impossible that an e2e test browser super quickly clicks something,\n-  // before any pending message has been delivered? (This'd be harmless — would only\n-  // affect e2e tests; humans aren't that fast.)\n+  // before any pending message has been delivered?  This'd be harmless — would only\n+  // affect e2e tests; humans aren't that fast.\n   if (message) {\n     pendingMessages.push(message);\n   }\n@@ -573,7 +577,6 @@ function sendToIframeImpl(iframe, initedArr: boolean[], pendingMessages,\n     }, 500);\n     return;\n   }\n-\n   for (let i = 0; i < pendingMessages.length; ++i) {\n     const m = pendingMessages[i];\n     iframe.contentWindow.postMessage(m, serverOrigin);"
    },
    {
      "sha": "8e029d142f27f6e44aa165335e3976f9d55c6862",
      "filename": "docs/e2e-tests-map.txt",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/docs/e2e-tests-map.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/docs/e2e-tests-map.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/e2e-tests-map.txt?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -780,7 +780,8 @@ api:\n           - api-upsert-categories.2browsers.test.ts  TyT602RHK42JF\n   upsert categories:  (upscats)\n           - api-upsert-categories.2browsers.test.ts  TyT94DFKHQC24\n-  upsert pages:\n+  upsert pages,\n+  sanitize html:\n           - api-upsert-pages.2browsers.test.ts   TyT603PKRAEPGJ5\n   upsert-edit pages:\n           - TESTS_MISSING  TyT650KWUDEPJ03g\n@@ -804,6 +805,8 @@ export and restore:  (impexp)\n           - embedded-comments-import-json-create-new-site.2browsers.test.ts  TyT4SLCD24S\n   exp imp images:\n           - TESTS_MISSING  embedded-comments-create-site-export-json.2browsers.test.ts  [402KGS4RQ]\n+  sanitize html:\n+          - api-upsert-pages.2browsers.test.ts   TyT603PKRAEPGJ5\n   TESTS_MISSING:\n     not yet enabled: \n           - embedded-comments-import-json-to-existing-emb-cmts-site.2browsers.test.ts  TyT7WKGKS269"
    },
    {
      "sha": "fd2f7990fea9cbf0ca6c0947da0cffafc07b085c",
      "filename": "docs/maybe-do-later.txt",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/docs/maybe-do-later.txt",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/docs/maybe-do-later.txt",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/maybe-do-later.txt?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -202,6 +202,10 @@ If moves CDN to a different address, or moves Talkyard server to a new address,\n then, lazily regenerate html with the correct addresses, for links to uploaded\n images etc.\n \n+[serversid]\n+Server side sesison ids, maybe in Redis? So can log ppl out, without having access\n+to their browsers to delete session cookies.\n+\n [weaksid]\n \n SECURITY Use HMAC. Not SHAX. Need not fix urgently. Prevents extension attacks\n@@ -213,3 +217,5 @@ https://news.ycombinator.com/item?id=19862002\n SECURITY: https://news.ycombinator.com/item?id=19856419 \"HTTP headers for the responsible developer\"\n https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\n \n+\n+[external-server-js]"
    },
    {
      "sha": "4ad18e491451e7d7aa4d6f95b66316fa9eb249c3",
      "filename": "docs/session-in-local-storage.md",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/docs/session-in-local-storage.md",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/docs/session-in-local-storage.md",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/session-in-local-storage.md?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -31,4 +31,7 @@ single shared web browser instance that othres can reuse after you. — So I\n think this isn't that much of a problem (any longer), compared to the\n inconvenience of people getting \"randomly\" logged out when they open\n the same page in a different brower tab (`sessionStorage` doesn't work\n-accross different tabs in the same browser).\n+accross different tabs in the same browser).  ...\n+... But now a few days ago, at a university, I noticed that apparently\n+the students keep reusing each other's Windows sessions, and possibly\n+browser session too."
    },
    {
      "sha": "5311b889d81eb2d8831ab3b828c83d8bf52f674c",
      "filename": "docs/tips.md",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/docs/tips.md",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/docs/tips.md",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/docs/tips.md?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -82,3 +82,16 @@ Then reload `sysctl.conf`, like so: `sysctl --system`. (Persists across reboots.\n See https://stackoverflow.com/questions/22475849/node-js-error-enospc and\n https://github.com/npm/npm/issues/1131#issuecomment-253065331\n \n+\n+### Downloading backups\n+\n+You can tell rsync to not download only the current month's backups, e.g.:\n+\n+```\n+rsync -av  \\\n+  --prune-empty-dirs  --include='*2019-12*' --include='*/' --exclude='*' \\\n+  -e 'ssh -i ~/.ssh/id_rsa.pub' \\\n+  root@...:/.../backups/  \\\n+  /home/user/...-backups\n+```\n+"
    },
    {
      "sha": "b31676b0cabdf3576452d985016f72fab41722b3",
      "filename": "modules/ed-core/src/main/scala/com/debiki/core/Prelude.scala",
      "status": "modified",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/modules/ed-core/src/main/scala/com/debiki/core/Prelude.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/modules/ed-core/src/main/scala/com/debiki/core/Prelude.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/main/scala/com/debiki/core/Prelude.scala?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -218,6 +218,53 @@ object Prelude {\n     ValidHostAndPortRegex.pattern.matcher(hostAndPort).matches\n \n \n+  def urlIsToDifferentOrigin(url: String, thisServerOrigin: String): Boolean = {\n+    val urlUri = new java.net.URI(url)\n+\n+    require(thisServerOrigin.contains(\"//\"),\n+      s\"Not an origin: '$thisServerOrigin' [TyE02WKL62GJ]\")\n+\n+    // Only an URL path? Then it's the same server.\n+    if (urlUri.getHost == null) {\n+      assert(urlUri.getScheme == null)\n+      assert(urlUri.getPort == -1)\n+      return false\n+    }\n+\n+    val thisUri = new java.net.URI(thisServerOrigin)\n+    if (urlUri.getHost != thisUri.getHost)\n+      return true\n+\n+    if (urlUri.getScheme != null && urlUri.getScheme != thisUri.getScheme)\n+      return true\n+    // Else: The browser will default to the same scheme, i.e. use thisUri's scheme.\n+\n+    def getPortOrDefault(uri: java.net.URI): Int = {\n+      if (uri.getPort != -1) uri.getPort\n+      else {\n+        if (uri.getScheme == \"http\") 80\n+        else if (uri.getScheme == \"https\") 443\n+        else -1\n+      }\n+    }\n+\n+    val urlPort = getPortOrDefault(urlUri)\n+    val thisPort = getPortOrDefault(thisUri)\n+\n+    val thisUsesStandardPort =\n+      (thisPort == 80 && thisUri.getScheme == \"http\") ||\n+        (thisPort == 443 && thisUri.getScheme == \"https\")\n+\n+    if (urlUri.getScheme == null && urlPort == -1 && thisUsesStandardPort)\n+      return false  // then will default to same port\n+\n+    if (urlPort != thisPort)\n+      return true\n+\n+    false\n+  }\n+\n+\n   /**\n    * Strips \"http(s)://server:port\" from an URL. Returns None if \"htt(s)://server\"\n    * was absent, or if there was nothing after the origin."
    },
    {
      "sha": "3d33ba031dae0dd44d52333e3850eb00812861d2",
      "filename": "modules/ed-core/src/test/scala/com/debiki/core/PreludeTest.scala",
      "status": "modified",
      "additions": 189,
      "deletions": 109,
      "changes": 298,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/modules/ed-core/src/test/scala/com/debiki/core/PreludeTest.scala",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/modules/ed-core/src/test/scala/com/debiki/core/PreludeTest.scala",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/modules/ed-core/src/test/scala/com/debiki/core/PreludeTest.scala?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -18,66 +18,67 @@\n package com.debiki.core\n \n import java.{util => ju}\n-import org.specs2.mutable._\n+import org.scalatest._\n import Prelude._\n \n \n-class PreludeTest extends Specification {\n-\n-  \"isAToZUnderscoreOnly\" should {\n-    \"'': yes\" in { \"\".isAToZUnderscoreOnly must_== true }\n-    \"'a': yes\" in { \"a\".isAToZUnderscoreOnly must_== true }\n-    \"'_': yes\" in { \"_\".isAToZUnderscoreOnly must_== true }\n-    \"'A': yes\" in { \"A\".isAToZUnderscoreOnly must_== true }\n-    \"'a_A': yes\" in { \"a_A\".isAToZUnderscoreOnly must_== true }\n-    \"' ': no\" in {  \" \".isAToZUnderscoreOnly must_== false }\n-    \"'\\\\n': no\" in {  \"\\n\".isAToZUnderscoreOnly must_== false }\n-    \"'\\\\t': no\" in {  \"\\t\".isAToZUnderscoreOnly must_== false }\n-    \"'5': no\" in { \"5\".isAToZUnderscoreOnly must_== false }\n-    \"'å': no\" in { \"å\".isAToZUnderscoreOnly must_== false }\n-    \"'a_A2': no\" in { \"a_A2\".isAToZUnderscoreOnly must_== false }\n-    \"''': no\" in { \"'\".isAToZUnderscoreOnly must_== false }\n+class PreludeTest extends FreeSpec with MustMatchers {\n+\n+  \"isAToZUnderscoreOnly\" - {\n+    \"'': yes\" in { \"\".isAToZUnderscoreOnly mustBe true }\n+    \"'a': yes\" in { \"a\".isAToZUnderscoreOnly mustBe true }\n+    \"'_': yes\" in { \"_\".isAToZUnderscoreOnly mustBe true }\n+    \"'A': yes\" in { \"A\".isAToZUnderscoreOnly mustBe true }\n+    \"'a_A': yes\" in { \"a_A\".isAToZUnderscoreOnly mustBe true }\n+    \"' ': no\" in {  \" \".isAToZUnderscoreOnly mustBe false }\n+    \"'\\\\n': no\" in {  \"\\n\".isAToZUnderscoreOnly mustBe false }\n+    \"'\\\\t': no\" in {  \"\\t\".isAToZUnderscoreOnly mustBe false }\n+    \"'5': no\" in { \"5\".isAToZUnderscoreOnly mustBe false }\n+    \"'å': no\" in { \"å\".isAToZUnderscoreOnly mustBe false }\n+    \"'a_A2': no\" in { \"a_A2\".isAToZUnderscoreOnly mustBe false }\n+    \"''': no\" in { \"'\".isAToZUnderscoreOnly mustBe false }\n   }\n \n-  \"charIsAzOrNum\" should {\n-    \"a: yes\" in { charIsAzOrNum('a') must_=== true }\n-    \"b: yes\" in { charIsAzOrNum('b') must_=== true }\n-    \"z: yes\" in { charIsAzOrNum('z') must_=== true }\n-    \"A: yes\" in { charIsAzOrNum('A') must_=== true }\n-    \"Y: yes\" in { charIsAzOrNum('Y') must_=== true }\n-    \"Z: yes\" in { charIsAzOrNum('Z') must_=== true }\n-    \"0: yes\" in { charIsAzOrNum('0') must_=== true }\n-    \"1: yes\" in { charIsAzOrNum('1') must_=== true }\n-    \"8: yes\" in { charIsAzOrNum('8') must_=== true }\n-    \"9: yes\" in { charIsAzOrNum('9') must_=== true }\n-    \"-: no\" in { charIsAzOrNum('-') must_=== false }\n-    \"#: no\" in { charIsAzOrNum('#') must_=== false }\n+  \"charIsAzOrNum\" - {\n+    \"a: yes\" in { charIsAzOrNum('a') mustBe true }\n+    \"b: yes\" in { charIsAzOrNum('b') mustBe true }\n+    \"z: yes\" in { charIsAzOrNum('z') mustBe true }\n+    \"A: yes\" in { charIsAzOrNum('A') mustBe true }\n+    \"Y: yes\" in { charIsAzOrNum('Y') mustBe true }\n+    \"Z: yes\" in { charIsAzOrNum('Z') mustBe true }\n+    \"0: yes\" in { charIsAzOrNum('0') mustBe true }\n+    \"1: yes\" in { charIsAzOrNum('1') mustBe true }\n+    \"8: yes\" in { charIsAzOrNum('8') mustBe true }\n+    \"9: yes\" in { charIsAzOrNum('9') mustBe true }\n+    \"-: no\" in { charIsAzOrNum('-') mustBe false }\n+    \"#: no\" in { charIsAzOrNum('#') mustBe false }\n     val weird = \"^! -—/\\\\+.-?!.åäöé,?&#:العربية :汉语 漢語\"\n-    (weird + \": no\") in { weird.exists(charIsAzOrNum) must_=== false }\n+    (weird + \": no\") in { weird.exists(charIsAzOrNum) mustBe false }\n   }\n \n-  \"stripStartEndBlanks\" should {\n-    \"convert '' to ''\" in { stripStartEndBlanks(\"\") must_== \"\" }\n-    \"convert ' ' to ''\" in { stripStartEndBlanks(\" \") must_== \"\" }\n-    \"convert '\\\\r\\\\n' to ''\" in { stripStartEndBlanks(\"\\r\\n\") must_== \"\" }\n-    \"convert 'x' to 'x'\" in { stripStartEndBlanks(\"x\") must_== \"x\" }\n-    \"convert 'xyz' to 'xyz'\" in { stripStartEndBlanks(\"xyz\") must_== \"xyz\" }\n-    \"convert '  xyz' to 'xyz'\" in { stripStartEndBlanks(\"  xyz\") must_== \"xyz\" }\n-    \"convert 'xyz  ' to 'xyz'\" in { stripStartEndBlanks(\"xyz  \") must_== \"xyz\" }\n+  \"stripStartEndBlanks\" - {\n+    \"convert '' to ''\" in { stripStartEndBlanks(\"\") mustBe \"\" }\n+    \"convert ' ' to ''\" in { stripStartEndBlanks(\" \") mustBe \"\" }\n+    \"convert '\\\\r\\\\n' to ''\" in { stripStartEndBlanks(\"\\r\\n\") mustBe \"\" }\n+    \"convert 'x' to 'x'\" in { stripStartEndBlanks(\"x\") mustBe \"x\" }\n+    \"convert 'xyz' to 'xyz'\" in { stripStartEndBlanks(\"xyz\") mustBe \"xyz\" }\n+    \"convert '  xyz' to 'xyz'\" in { stripStartEndBlanks(\"  xyz\") mustBe \"xyz\" }\n+    \"convert 'xyz  ' to 'xyz'\" in { stripStartEndBlanks(\"xyz  \") mustBe \"xyz\" }\n     \"convert '  xyz  ' to 'xyz'\" in {\n-       stripStartEndBlanks(\"  xyz  \") must_== \"xyz\" }\n+       stripStartEndBlanks(\"  xyz  \") mustBe \"xyz\" }\n   }\n \n-  \"stripOrigin\" should {\n-    \"becomes None: ''\" in { stripOrigin(\"\") must_== None }\n-    \"keep unchanged: '/'\" in { stripOrigin(\"/\") must_== Some(\"/\") }\n-    \"keep unchanged: '/dir/'\" in { stripOrigin(\"/dir/\") must_== Some(\"/dir/\") }\n-    \"keep unchanged: '/dir/page'\" in { stripOrigin(\"/dir/page\") must_== Some(\"/dir/page\") }\n+\n+  \"stripOrigin\" - {\n+    \"becomes None: ''\" in { stripOrigin(\"\") mustBe None }\n+    \"keep unchanged: '/'\" in { stripOrigin(\"/\") mustBe Some(\"/\") }\n+    \"keep unchanged: '/dir/'\" in { stripOrigin(\"/dir/\") mustBe Some(\"/dir/\") }\n+    \"keep unchanged: '/dir/page'\" in { stripOrigin(\"/dir/page\") mustBe Some(\"/dir/page\") }\n \n     val WithQueryHash = \"/with?query=yes#hash\"\n \n     s\"keep unchanged: '$WithQueryHash'\" in {\n-      stripOrigin(WithQueryHash) must_== Some(WithQueryHash)\n+      stripOrigin(WithQueryHash) mustBe Some(WithQueryHash)\n     }\n \n     val HttpServer = \"http://server\"\n@@ -87,120 +88,199 @@ class PreludeTest extends Specification {\n     val SomePath = \"/some/path?query=value#hash-frag\"\n \n     s\"strip 'http(s)://server(:port)' to None\" in {\n-      stripOrigin(s\"$HttpServer\") must_== None\n-      stripOrigin(s\"$HttpsServer\") must_== None\n-      stripOrigin(s\"$HttpServerPort\") must_== None\n-      stripOrigin(s\"$HttpsServerPort\") must_== None\n+      stripOrigin(s\"$HttpServer\") mustBe None\n+      stripOrigin(s\"$HttpsServer\") mustBe None\n+      stripOrigin(s\"$HttpServerPort\") mustBe None\n+      stripOrigin(s\"$HttpsServerPort\") mustBe None\n     }\n \n     s\"strip 'http(s)://server(:port)/' to Some('/')\" in {\n-      stripOrigin(s\"$HttpServer/\") must_== Some(\"/\")\n-      stripOrigin(s\"$HttpsServer/\") must_== Some(\"/\")\n-      stripOrigin(s\"$HttpServerPort/\") must_== Some(\"/\")\n-      stripOrigin(s\"$HttpsServerPort/\") must_== Some(\"/\")\n+      stripOrigin(s\"$HttpServer/\") mustBe Some(\"/\")\n+      stripOrigin(s\"$HttpsServer/\") mustBe Some(\"/\")\n+      stripOrigin(s\"$HttpServerPort/\") mustBe Some(\"/\")\n+      stripOrigin(s\"$HttpsServerPort/\") mustBe Some(\"/\")\n     }\n \n     s\"strip 'http(s)://server(:port)$SomePath' to Some('$SomePath')\" in {\n-      stripOrigin(s\"$HttpServer$SomePath\") must_== Some(SomePath)\n-      stripOrigin(s\"$HttpsServer$SomePath\") must_== Some(SomePath)\n-      stripOrigin(s\"$HttpServerPort$SomePath\") must_== Some(SomePath)\n-      stripOrigin(s\"$HttpsServerPort$SomePath\") must_== Some(SomePath)\n+      stripOrigin(s\"$HttpServer$SomePath\") mustBe Some(SomePath)\n+      stripOrigin(s\"$HttpsServer$SomePath\") mustBe Some(SomePath)\n+      stripOrigin(s\"$HttpServerPort$SomePath\") mustBe Some(SomePath)\n+      stripOrigin(s\"$HttpsServerPort$SomePath\") mustBe Some(SomePath)\n     }\n \n     s\"strip '//server(:port)$SomePath' to Some('$SomePath')\" in {\n-      stripOrigin(s\"//server$SomePath\") must_== Some(SomePath)\n-      stripOrigin(s\"//server:8080$SomePath\") must_== Some(SomePath)\n+      stripOrigin(s\"//server$SomePath\") mustBe Some(SomePath)\n+      stripOrigin(s\"//server:8080$SomePath\") mustBe Some(SomePath)\n     }\n \n     s\"undersdand das-and-dot host names\" in {\n-      stripOrigin(s\"http://dash-and-dot.example.com:80/a/b\") must_== Some(\"/a/b\")\n+      stripOrigin(s\"http://dash-and-dot.example.com:80/a/b\") mustBe Some(\"/a/b\")\n     }\n \n     s\"reject bad prodocol\" in {\n-      stripOrigin(s\"nothttp://server/path\") must_== None\n+      stripOrigin(s\"nothttp://server/path\") mustBe None\n+    }\n+  }\n+\n+\n+  \"urlIsToDifferentOrigin\" - {\n+    \"/(something) is same as whatever\" in {\n+      urlIsToDifferentOrigin(\"\", \"http://ex.co\") mustBe false\n+      urlIsToDifferentOrigin(\"/\", \"http://ex.co\") mustBe false\n+      urlIsToDifferentOrigin(\"/\", \"https://ex.co\") mustBe false\n+      urlIsToDifferentOrigin(\"/\", \"//ex.co\") mustBe false\n+      urlIsToDifferentOrigin(\"/\", \"//ex.co/xyz\") mustBe false\n+      urlIsToDifferentOrigin(\"/\", \"//ex.co/xyz?q=v#hash\") mustBe false\n+\n+      urlIsToDifferentOrigin(\"/abc\", \"https://ex.co\") mustBe false\n+      urlIsToDifferentOrigin(\"/abc\", \"http://ex.co\") mustBe false\n+      urlIsToDifferentOrigin(\"/abc\", \"//ex.co\") mustBe false\n+\n+      urlIsToDifferentOrigin(\"/abc\", \"https://ex.co/\") mustBe false\n+      urlIsToDifferentOrigin(\"/abc\", \"https://ex.co/xyz\") mustBe false\n+\n+      urlIsToDifferentOrigin(\"/abc/def?q=123\", \"https://ex.co/xyz/mno/p=789\") mustBe false\n+    }\n+\n+    \"//server same as https://server\" in {\n+      urlIsToDifferentOrigin(\"//example.com\", \"https://example.com\") mustBe false\n+      urlIsToDifferentOrigin(\"//example.com\", \"http://example.com\") mustBe false\n+      urlIsToDifferentOrigin(\"//example.com/abcd\", \"https://example.com\") mustBe false\n+      urlIsToDifferentOrigin(\"//example.com/abcd\", \"https://example.com/xyz\") mustBe false\n+      urlIsToDifferentOrigin(\"//example.com/\", \"https://example.com/xyz\") mustBe false\n+      urlIsToDifferentOrigin(\"//example.com\", \"https://example.com/xyz\") mustBe false\n+    }\n+\n+    \"(https:)//other-server different than https://server\" in {\n+      for (scheme <- Seq(\"\", \"https:\", \"http:\")) {\n+        info(s\"Trying scheme: '$scheme'\")\n+        urlIsToDifferentOrigin(s\"$scheme//other-server\", \"https://server\") mustBe true\n+        urlIsToDifferentOrigin(s\"$scheme//other-server\", \"http://server\") mustBe true\n+        urlIsToDifferentOrigin(s\"$scheme//other-server/server\", \"https://server/server\") mustBe true\n+        urlIsToDifferentOrigin(s\"$scheme//other-server/server\", \"https://server\") mustBe true\n+        urlIsToDifferentOrigin(s\"$scheme//other-server/url/path\", \"https://server/xyzw\") mustBe true\n+        urlIsToDifferentOrigin(s\"$scheme//other-server\", \"http://server\") mustBe true\n+        urlIsToDifferentOrigin(s\"$scheme//other-server\", \"//server\") mustBe true\n+\n+        urlIsToDifferentOrigin(s\"$scheme//x\", \"//y\") mustBe true\n+        urlIsToDifferentOrigin(s\"$scheme//x\", \"http://y\") mustBe true\n+        urlIsToDifferentOrigin(s\"$scheme//x\", \"https://y\") mustBe true\n+\n+        urlIsToDifferentOrigin(s\"$scheme//x\", \"//x\") mustBe (scheme != \"\")\n+        // If $sheme is empty, it defaults to the right scheme (i.e. to the 2nd param's scheme).\n+        urlIsToDifferentOrigin(s\"$scheme//x\", \"http://x\") mustBe (scheme == \"https:\")\n+        urlIsToDifferentOrigin(s\"$scheme//x\", \"https://x\") mustBe (scheme == \"http:\")\n+      }\n+    }\n+\n+    \"same and different ports\" in {\n+      urlIsToDifferentOrigin(\"https://other:123\", \"https://server:123\") mustBe true\n+      urlIsToDifferentOrigin(\"https://server:123\", \"https://server:123\") mustBe false\n+      urlIsToDifferentOrigin(\"https://server:456\", \"https://server:123\") mustBe true\n+      urlIsToDifferentOrigin(\"https://server\", \"https://server:123\") mustBe true\n+      urlIsToDifferentOrigin(\"https://server:123\", \"https://server\") mustBe true\n+      urlIsToDifferentOrigin(\"/abcd\", \"https://server:123\") mustBe false\n+      urlIsToDifferentOrigin(\"/\", \"https://server:123\") mustBe false\n+      urlIsToDifferentOrigin(\"\", \"https://server:123\") mustBe false\n+      urlIsToDifferentOrigin(\"//server:123\", \"https://server:123\") mustBe false\n+      urlIsToDifferentOrigin(\"//server:567\", \"https://server:123\") mustBe true\n+\n+      urlIsToDifferentOrigin(\"https://server\", \"https://server:123\") mustBe true\n+      urlIsToDifferentOrigin(\"http://server\", \"http://server:123\") mustBe true\n+      urlIsToDifferentOrigin(\"https://server:123\", \"https://server\") mustBe true\n+      urlIsToDifferentOrigin(\"http://server:123\", \"http://server\") mustBe true\n+    }\n+\n+    \"ports 80 and 443 sometimes included\" in {\n+      urlIsToDifferentOrigin(\"https://server:443\", \"https://server\") mustBe false\n+      urlIsToDifferentOrigin(\"https://server\", \"https://server:443\") mustBe false\n+      urlIsToDifferentOrigin(\"https://server:443\", \"http://server\") mustBe true // other scheme\n+      urlIsToDifferentOrigin(\"https://server:80\", \"http://server\") mustBe true  // other scheme\n+      urlIsToDifferentOrigin(\"http://server:80\", \"http://server\") mustBe false\n+      urlIsToDifferentOrigin(\"http://server\", \"http://server:80\") mustBe false\n+      urlIsToDifferentOrigin(\"http://server\", \"https://server:80\") mustBe true  // other scheme\n     }\n   }\n \n-  \"nextRandomAzLetter\" should {\n-    \"be between 'a' and 'z'\" >> {\n+\n+  \"nextRandomAzLetter\" - {\n+    \"be between 'a' and 'z'\" in {\n       for (i <- 1 to 50) {\n         val letter = nextRandomAzLetter()\n-        (letter - 'a') must be_>=(0)\n-        ('z' - letter) must be_>=(0)\n+        (letter - 'a') must be >= 0\n+        ('z' - letter) must be >= 0\n       }\n-      ok\n     }\n   }\n \n-  \"nextRandomPageId\" should {\n-    \"be at least 5 chars and contain no vowels but `uy'\" >> {\n+  \"nextRandomPageId\" - {\n+    \"be at least 5 chars and contain no vowels but `uy'\" in {\n       for (i <- 1 to 50) {\n         val s = nextRandomPageId\n         // Vowels aoei forbidden, and only lowercase chars (+ numbers) allowed.\n-        (\"aoeiABCDEFGHIJKLMNOPQRSTUVWXYZ\" intersect s) must_== \"\"\n-        s.length must be_>=(5)\n+        (\"aoeiABCDEFGHIJKLMNOPQRSTUVWXYZ\" intersect s) mustBe \"\"\n+        s.length must be >= 5\n       }\n-      ok\n     }\n   }\n \n-  \"drowRightWhile\" should {\n-    \"work\" >> {\n-      \"\".dropRightWhile((_) => true) must_== \"\"\n-      \"\".dropRightWhile((_) => false) must_== \"\"\n-      \"a\".dropRightWhile((_) => true) must_== \"\"\n-      \"a\".dropRightWhile((_) => false) must_== \"a\"\n-      \"abc\".dropRightWhile((_) => true) must_== \"\"\n-      \"abc\".dropRightWhile((_) => false) must_== \"abc\"\n-      \"abcde\".dropRightWhile(_ != 'x') must_== \"\"\n-      \"abcde\".dropRightWhile(_ != 'a') must_== \"a\"\n-      \"abcde\".dropRightWhile(_ != 'b') must_== \"ab\"\n-      \"abcde\".dropRightWhile(_ != 'c') must_== \"abc\"\n-      \"abcde\".dropRightWhile(_ != 'd') must_== \"abcd\"\n-      \"abcde\".dropRightWhile(_ != 'e') must_== \"abcde\"\n+  \"drowRightWhile\" - {\n+    \"work\" in {\n+      \"\".dropRightWhile((_) => true) mustBe \"\"\n+      \"\".dropRightWhile((_) => false) mustBe \"\"\n+      \"a\".dropRightWhile((_) => true) mustBe \"\"\n+      \"a\".dropRightWhile((_) => false) mustBe \"a\"\n+      \"abc\".dropRightWhile((_) => true) mustBe \"\"\n+      \"abc\".dropRightWhile((_) => false) mustBe \"abc\"\n+      \"abcde\".dropRightWhile(_ != 'x') mustBe \"\"\n+      \"abcde\".dropRightWhile(_ != 'a') mustBe \"a\"\n+      \"abcde\".dropRightWhile(_ != 'b') mustBe \"ab\"\n+      \"abcde\".dropRightWhile(_ != 'c') mustBe \"abc\"\n+      \"abcde\".dropRightWhile(_ != 'd') mustBe \"abcd\"\n+      \"abcde\".dropRightWhile(_ != 'e') mustBe \"abcde\"\n       // Many matching characters: (two '.')\n-      \"some.package.ClassName\".dropRightWhile(_ != '.') must_== \"some.package.\"\n+      \"some.package.ClassName\".dropRightWhile(_ != '.') mustBe \"some.package.\"\n     }\n   }\n \n-  \"takeRightWhile\" should {\n-    \"work even better\" >> {\n-      \"\".takeRightWhile((_) => true) must_== \"\"\n-      \"\".takeRightWhile((_) => false) must_== \"\"\n-      \"a\".takeRightWhile((_) => true) must_== \"a\"\n-      \"a\".takeRightWhile((_) => false) must_== \"\"\n-      \"abc\".takeRightWhile((_) => true) must_== \"abc\"\n-      \"abc\".takeRightWhile((_) => false) must_== \"\"\n-      \"abcde\".takeRightWhile(_ != 'x') must_== \"abcde\"\n-      \"abcde\".takeRightWhile(_ != 'a') must_== \"bcde\"\n-      \"abcde\".takeRightWhile(_ != 'b') must_== \"cde\"\n-      \"abcde\".takeRightWhile(_ != 'c') must_== \"de\"\n-      \"abcde\".takeRightWhile(_ != 'd') must_== \"e\"\n-      \"abcde\".takeRightWhile(_ != 'e') must_== \"\"\n+  \"takeRightWhile\" - {\n+    \"work even better\" in {\n+      \"\".takeRightWhile((_) => true) mustBe \"\"\n+      \"\".takeRightWhile((_) => false) mustBe \"\"\n+      \"a\".takeRightWhile((_) => true) mustBe \"a\"\n+      \"a\".takeRightWhile((_) => false) mustBe \"\"\n+      \"abc\".takeRightWhile((_) => true) mustBe \"abc\"\n+      \"abc\".takeRightWhile((_) => false) mustBe \"\"\n+      \"abcde\".takeRightWhile(_ != 'x') mustBe \"abcde\"\n+      \"abcde\".takeRightWhile(_ != 'a') mustBe \"bcde\"\n+      \"abcde\".takeRightWhile(_ != 'b') mustBe \"cde\"\n+      \"abcde\".takeRightWhile(_ != 'c') mustBe \"de\"\n+      \"abcde\".takeRightWhile(_ != 'd') mustBe \"e\"\n+      \"abcde\".takeRightWhile(_ != 'e') mustBe \"\"\n       // Many matching characters: (two '.')\n-      \"some.package.ClassName\".takeRightWhile(_ != '.') must_== \"ClassName\"\n+      \"some.package.ClassName\".takeRightWhile(_ != '.') mustBe \"ClassName\"\n     }\n   }\n \n-  \"ISO time functions\" can {\n+  \"ISO time functions can\" - {\n \n-    \"write a date\" >> {\n+    \"write a date\" in {\n       val datiStr: String = toIso8601T(new ju.Date(0))\n       val datiStrNoT: String = toIso8601(new ju.Date(0))\n-      datiStr must_== \"1970-01-01T00:00:00Z\"\n-      datiStrNoT must_== \"1970-01-01 00:00:00Z\"\n+      datiStr mustBe \"1970-01-01T00:00:00Z\"\n+      datiStrNoT mustBe \"1970-01-01 00:00:00Z\"\n     }\n \n-    \"parse a date\" >> {\n+    \"parse a date\" in {\n       val dati: ju.Date = parseIso8601DateTime(\"1970-01-01T00:00:00Z\")\n-      dati must_== new ju.Date(0)\n+      dati mustBe new ju.Date(0)\n     }\n \n-    \"parse a date string and write it back again\" >> {\n+    \"parse a date string and write it back again\" in {\n       val datiStr = \"2012-01-02T10:20:30Z\"\n       val datiParsed = parseIso8601DateTime(datiStr)\n       val datiStrAfter = toIso8601T(datiParsed)\n-      datiStr must_== datiStrAfter\n+      datiStr mustBe datiStrAfter\n     }\n   }\n "
    },
    {
      "sha": "43ccccb99aa0353b45f987b29280efb0c95e3fe0",
      "filename": "s/run-e2e-tests.sh",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/s/run-e2e-tests.sh",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/s/run-e2e-tests.sh",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/s/run-e2e-tests.sh?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -446,7 +446,8 @@ function runAllE2eTests {\n   # Embedded forum\n   # ------------\n \n-  runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js --b3c  --only embedded-forum-no-cookies-login $args\n+  #runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js --b3c  --only embedded-forum-no-cookies-login $args\n+  #runE2eTest s/wdio target/e2e/wdio.2chrome.conf.js --b3c  --only embedded-forum-no-cookies-sso-login $args\n \n \n   # Embedded comments"
    },
    {
      "sha": "4c8e0b2d80dbbb2dabe310e07298daee88ac7354",
      "filename": "tests/e2e/specs/api-upsert-pages.2browsers.test.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/api-upsert-pages.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/api-upsert-pages.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/api-upsert-pages.2browsers.test.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -48,6 +48,7 @@ const pageOneToUpsert = {\n   body: 'UpsPageOneBody',\n };\n \n+const evil_example_com = 'evil.example.com';\n const script_gets_removed = 'script_gets_removed';\n \n const pageTwoToUpsert = {\n@@ -68,7 +69,7 @@ const pageTwoToUpsert = {\n     <blockquote>blockquote_stays</blockquote>\n     <ul><li>list_stays</li></ul>\n     <table><tbody><td>table_stays</td></tbody></table>\n-    <script src=\"http://evil.example.com/so_evil_script.js\">${script_gets_removed}</script>\n+    <script src=\"http://${evil_example_com}/so_evil_script.js\">${script_gets_removed}</script>\n     last_line_stays`,\n };\n \n@@ -319,7 +320,7 @@ describe(\"api-upsert-pages   TyT603PKRAEPGJ5\", () => {\n         script_gets_removed,\n         '<script',\n         '</script>',\n-        'evil.example.com',\n+        evil_example_com,\n         'so_evil_script']);\n   });\n "
    },
    {
      "sha": "52593334fe193dab4941de32c6461fc776105910",
      "filename": "tests/e2e/specs/embedded-comments-no-cookies-guest.test.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-comments-no-cookies-guest.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-comments-no-cookies-guest.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-comments-no-cookies-guest.test.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -32,6 +32,11 @@ const pageAaaSlug = 'emb-cmts-b3c-aaa.html';\n \n \n describe(\"emb cmts no cookies   TyT295KBF6301\", () => {\n+    // COULD RENAME: embedded-comments-no-cookies-unverif-email-guest.test.ts\n+\n+  it(\"ensure cookies disabled?\", () => {\n+    assert(settings.block3rdPartyCookies);\n+  });\n \n   it(\"initialize people\", () => {\n     everyonesBrowsers = _.assign(browser, pagesFor(browser));\n@@ -61,6 +66,9 @@ describe(\"emb cmts no cookies   TyT295KBF6301\", () => {\n     }\n   });\n \n+\n+  // ----- Signup as member, post with unverified email\n+\n   it(\"Maria opens embedding page aaa\", () => {\n     mariasBrowser.go(embeddingOrigin + '/' + pageAaaSlug);\n   });\n@@ -101,6 +109,9 @@ describe(\"emb cmts no cookies   TyT295KBF6301\", () => {\n     mariasBrowser.complex.waitForNotLoggedInInEmbeddedCommentsIframe();\n   });\n \n+\n+  // ----- Guest login, post with unverified email\n+\n   it(\"A guest, Graeddelina, appears and clicks Reply\", () => {\n     guestsBrowser.switchToEmbeddedCommentsIrame();\n     guestsBrowser.topic.clickReplyToPostNr(c.FirstReplyNr);"
    },
    {
      "sha": "90f2d43cdd793977a11b44036e37d14d8a55b968",
      "filename": "tests/e2e/specs/embedded-comments-no-cookies-unverif-gmail.test.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-comments-no-cookies-unverif-gmail.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-comments-no-cookies-unverif-gmail.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-comments-no-cookies-unverif-gmail.test.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -38,6 +38,10 @@ describe(\"emb cmts no cookies unverif gmail   TyT6224BKA253\", () => {\n   if (!settings.include3rdPartyDependentTests)\n     return;\n \n+  it(\"ensure cookies disabled?\", () => {\n+    assert(settings.block3rdPartyCookies);\n+  });\n+\n   it(\"initialize people\", () => {\n     everyonesBrowsers = _.assign(browser, pagesFor(browser));\n     gmannesBrowser = everyonesBrowsers;\n@@ -99,6 +103,10 @@ describe(\"emb cmts no cookies unverif gmail   TyT6224BKA253\", () => {\n     assert.equal(gmannesBrowser.metabar.getMyUsernameInclAt(), '@gmanne');\n   });\n \n+  it(\"... the comment is still there\", () => {\n+    gmannesBrowser.topic.waitUntilPostTextMatches(c.FirstReplyNr, gmailCommentOne);\n+  });\n+\n   it(\"He logs out\", () => {\n     gmannesBrowser.metabar.clickLogout();\n   });"
    },
    {
      "sha": "aa8d2e2abea0e10bef82538b7f3b6f79ffdd265b",
      "filename": "tests/e2e/specs/embedded-comments-no-cookies-verif-email.test.ts",
      "status": "modified",
      "additions": 20,
      "deletions": 21,
      "changes": 41,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-comments-no-cookies-verif-email.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-comments-no-cookies-verif-email.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-comments-no-cookies-verif-email.test.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -34,6 +34,10 @@ const pageAaaUrl = embeddingOrigin + '/' + pageAaaSlug;\n \n describe(\"emb cmts no cookies verif email   TyT795KB69285\", () => {\n \n+  it(\"ensure cookies disabled?\", () => {\n+    assert(settings.block3rdPartyCookies);\n+  });\n+\n   it(\"initialize people\", () => {\n     everyonesBrowsers = _.assign(browser, pagesFor(browser));\n     mariasBrowser = everyonesBrowsers;\n@@ -59,11 +63,10 @@ describe(\"emb cmts no cookies verif email   TyT795KB69285\", () => {\n   });\n \n   it(\"Maria opens embedding page aaa\", () => {\n-    mariasBrowser.go(pageAaaUrl);\n+    mariasBrowser.go2(pageAaaUrl);\n   });\n \n   it(\"... Signs up\", () => {\n-    mariasBrowser.switchToEmbeddedCommentsIrame();\n     mariasBrowser.topic.clickReplyToEmbeddingBlogPost();\n     mariasBrowser.swithToOtherTabOrWindow();\n     mariasBrowser.loginDialog.createPasswordAccount(maria);\n@@ -72,6 +75,11 @@ describe(\"emb cmts no cookies verif email   TyT795KB69285\", () => {\n \n   it(\"... clicks an email verif link\", () => {\n     // This'll run this server side code: [TyT072FKHRPJ5]\n+    //\n+    // The server redirects the browser back to the blog post, pageAaaUrl, and\n+    // includes a one-time login secret in the url hash, which our javascript\n+    // on that embedding page then find, and sends to the iframe, which in turn\n+    // sends it to the server, and gets back a login session id.\n \n     const email = server.getLastEmailSenTo(siteId, maria.emailAddress, mariasBrowser);\n     const link = utils.findFirstLinkToUrlIn(\n@@ -95,19 +103,10 @@ describe(\"emb cmts no cookies verif email   TyT795KB69285\", () => {\n     assert.equal(mariasBrowser.metabar.getMyUsernameInclAt(), '@maria');\n   });\n \n-  it(\"Maria clicks Reply\", () => {\n+  it(\"Maria clicks Reply — no need to log in again\", () => {\n     mariasBrowser.topic.clickReplyToEmbeddingBlogPost();\n   });\n \n-  it(\"... NO:  and currently needs to log in again\", () => {\n-    // COULD avoid this 2nd login, by incl a one-time login secret in URL to the embedding page.\n-    // In the #hash fragment then? Since shouldn't be sent to the server powering the blog,\n-    // but instead read by Talkyard's javascript and passed on to the iframe, which in turn\n-    // sends it to the server, just once, and gets back a login session — and the server\n-    // invalidates the secret.  [0439BAS2]  DONE\n-    //mariasBrowser.loginDialog.loginWithPasswordInPopup(maria);\n-  });\n-\n   it(\"... writes and submits a comment\", () => {\n     mariasBrowser.switchToEmbeddedEditorIrame();\n     mariasBrowser.editor.editText(mariasCommentOnePageAaa);\n@@ -123,20 +122,15 @@ describe(\"emb cmts no cookies verif email   TyT795KB69285\", () => {\n   it(\"she goes to page bbb\", () => {\n     let source = mariasBrowser.getSource();\n     assert(source.indexOf('b3c-aaa') > 0);\n-    mariasBrowser.go(embeddingOrigin + '/' + pageBbbSlug);\n+    mariasBrowser.go2(embeddingOrigin + '/' + pageBbbSlug);\n     source = mariasBrowser.getSource();\n     assert(source.indexOf('b3c-bbb') > 0);\n   });\n \n-  it(\"Posts a 2nd comment\", () => {\n-    mariasBrowser.switchToEmbeddedCommentsIrame();\n+  it(\"Posts a 2nd comment, no need to login — session remembered in storage\", () => {\n     mariasBrowser.topic.clickReplyToEmbeddingBlogPost();\n   });\n \n-  it(\"... NO: needs to log in again, because cookies blocked\", () => {\n-    //mariasBrowser.loginDialog.loginWithPasswordInPopup(maria);\n-  });\n-\n   it(\"... types and submits the 2nd comment\", () => {\n     mariasBrowser.switchToEmbeddedEditorIrame();\n     mariasBrowser.editor.editText(mariasCommentTwoPageBbb);\n@@ -150,14 +144,19 @@ describe(\"emb cmts no cookies verif email   TyT795KB69285\", () => {\n   });\n \n   it(\"After page refresh, she's still logged in\", () => {\n-    mariasBrowser.refresh();\n+    mariasBrowser.refresh2();\n     mariasBrowser.switchToEmbeddedCommentsIrame();\n     assert.equal(mariasBrowser.metabar.getMyUsernameInclAt(), '@maria');\n-    //mariasBrowser.complex.waitForNotLoggedInInEmbeddedCommentsIframe();\n   });\n \n   it(\"She logs out\", () => {\n     mariasBrowser.metabar.clickLogout();\n+    mariasBrowser.complex.waitForNotLoggedInInEmbeddedCommentsIframe();\n+  });\n+\n+  it(\"... after refresh, she is still logged out\", () => {\n+    mariasBrowser.refresh2();\n+    mariasBrowser.complex.waitForNotLoggedInInEmbeddedCommentsIframe();\n   });\n \n   it(\"She clicks Reply to post a 3rd comment\", () => {"
    },
    {
      "sha": "c2301e237479bcf8de7d6ee02ba233b167a3c50b",
      "filename": "tests/e2e/specs/embedded-comments-no-cookies-verif-gmail.test.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-comments-no-cookies-verif-gmail.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-comments-no-cookies-verif-gmail.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-comments-no-cookies-verif-gmail.test.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -37,6 +37,10 @@ describe(\"emb cmts no cookies verif gmail   TyT795KB61368\", () => {\n   if (!settings.include3rdPartyDependentTests)\n     return;\n \n+  it(\"ensure cookies disabled?\", () => {\n+    assert(settings.block3rdPartyCookies);\n+  });\n+\n   it(\"initialize people\", () => {\n     everyonesBrowsers = _.assign(browser, pagesFor(browser));\n     gmannesBrowser = everyonesBrowsers;"
    },
    {
      "sha": "041b941af353ca4165639a8fc082f897e40ef4e5",
      "filename": "tests/e2e/specs/embedded-forum-no-cookies-login.test.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-forum-no-cookies-login.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-forum-no-cookies-login.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-forum-no-cookies-login.test.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -46,6 +46,8 @@ let discussionPageUrl: string;\n describe(\"embedded-forum-no-cookies-login  TyT5029FKRDE\", () => {\n \n   it(\"import a site\", () => {\n+    lad.die('Unimpl [395023PFS]');\n+\n     const builder = buildSite();\n     forum = builder.addTwoPagesForum({  // or: builder.addLargeForum\n       title: \"Some E2E Test\",\n@@ -57,6 +59,7 @@ describe(\"embedded-forum-no-cookies-login  TyT5029FKRDE\", () => {\n     site.settings.allowEmbeddingFrom = embeddingOrigin;\n     siteIdAddress = server.importSiteData(forum.siteData);\n     siteId = siteIdAddress.id;\n+    server.skipRateLimits(siteId);\n     discussionPageUrl = siteIdAddress.origin + '/' + forum.topics.byMichaelCategoryA.slug;\n   });\n "
    },
    {
      "sha": "e057b1d0709757a2e492568bcdb326b9217959a5",
      "filename": "tests/e2e/specs/embedded-forum-no-cookies-sso-login.test.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-forum-no-cookies-sso-login.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/embedded-forum-no-cookies-sso-login.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/embedded-forum-no-cookies-sso-login.test.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -61,6 +61,8 @@ const mariasSsoId = 'mariasSsoId';\n describe(\"embedded-forum-no-cookies-login  TyT5029FKRDE\", () => {\n \n   it(\"import a site\", () => {\n+    lad.die('Unimpl [8608RKTHS]');\n+\n     const builder = buildSite();\n     forum = builder.addTwoPagesForum({  // or: builder.addLargeForum\n       title: \"Some E2E Test\",\n@@ -76,6 +78,7 @@ describe(\"embedded-forum-no-cookies-login  TyT5029FKRDE\", () => {\n     site.apiSecrets = [apiSecret];\n     siteIdAddress = server.importSiteData(forum.siteData);\n     siteId = siteIdAddress.id;\n+    server.skipRateLimits(siteId);\n     discussionPageUrl = siteIdAddress.origin + '/' + forum.topics.byMichaelCategoryA.slug;\n   });\n "
    },
    {
      "sha": "95bf266b1b8bc8eb775d527fe7173e2b91388ca5",
      "filename": "tests/e2e/specs/sso-login-member-impl.2browsers.test.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 23,
      "changes": 23,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/sso-login-member-impl.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/sso-login-member-impl.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/sso-login-member-impl.2browsers.test.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -275,29 +275,6 @@ function constructSsoLoginTest(testName: string, variants: {\n \n   + check stays logged in\n \n-\n-\n-\n-  Owen\n-\n-  it(\"He clicks the Back-to-login-settings link, and gets back to the settings area, as admin\", () => {\n-    owensBrowser.waitAndClick('.e_BkToStngs');\n-    owensBrowser.adminArea.waitAssertVisible();  // if can see, means is still admin\n-  });\n-\n-  it(\"... logs out\", () => {\n-    owensBrowser.topbar.clickLogout();\n-  });\n-\n-  it(\"The one-time-login-secret cannot be used again\", () => {\n-    owensBrowser.apiV0.loginWithSecret({\n-        origin: siteIdAddress.origin, oneTimeSecret: oneTimeLoginSecret, thenGoTo: '/-/sso-test' });\n-    owensBrowser.assertPageHtmlSourceMatches_1('TyELGISECR_');  + E1_, E2_,  E3_\n-  });\n-\n-  it(\"... but he can still login with password, as usual\", () => {\n-    owensBrowser.adminArea.goToLoginSettings('', { loginAs: owen });\n-  });\n   */\n \n "
    },
    {
      "sha": "4329cd5e86ca45cbaa09a9189507edc44a34340a",
      "filename": "tests/e2e/specs/sso-one-time-key-errors.2browsers.test.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/sso-one-time-key-errors.2browsers.test.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/specs/sso-one-time-key-errors.2browsers.test.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/specs/sso-one-time-key-errors.2browsers.test.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -222,7 +222,6 @@ describe(\"sso-one-time-key-errors   TyT5025BDUJQP4R\", () => {\n   it(\"... doesn't work\", () => {\n     source = majasBrowser.getSource();\n     assert(source.indexOf('TyELGISECR_') >= 0);\n-    assert(source.indexOf('TyELGISECR_') >= 0);\n   });\n \n   it(\"... the message says the key has expired (we deleted it)\", () => {\n@@ -318,5 +317,13 @@ describe(\"sso-one-time-key-errors   TyT5025BDUJQP4R\", () => {\n     assert(source.indexOf('ENONE_') === -1);\n   });\n \n+  it(\"She can however go back and post a 2nd reply\", () => {\n+    majasBrowser.back();\n+    majasBrowser.refresh();\n+    const text = \"Maja's second reply\";\n+    majasBrowser.complex.replyToOrigPost(text);\n+    majasBrowser.topic.waitForPostAssertTextMatches(c.FirstReplyNr + 1, text);\n+  });\n+\n });\n "
    },
    {
      "sha": "e0cc439cd6d7cf274e7e905a5de3cd62c91bedb8",
      "filename": "tests/e2e/utils/pages-for.ts",
      "status": "modified",
      "additions": 23,
      "deletions": 7,
      "changes": 30,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/utils/pages-for.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/tests/e2e/utils/pages-for.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/tests/e2e/utils/pages-for.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -93,6 +93,7 @@ function pagesFor(browser) {\n   const origWaitForEnabled = browser.waitForEnabled;\n   const origWaitForText = browser.waitForText;\n   const origWaitForExist = browser.waitForExist;\n+  const origRefresh = browser.refresh;\n \n   const hostsVisited = {};\n   let isWhere: IsWhere = IsWhere.Nowhere;\n@@ -139,6 +140,14 @@ function pagesFor(browser) {\n     },\n \n \n+    // Change all refresh() to refresh2, then remove '2' from name.\n+    // (Would need to add  waitForPageType: false  anywhere? Don't think so?)\n+    refresh2: () => {\n+      origRefresh.apply(browser, arguments);\n+      api.__updateIsWhere();\n+    },\n+\n+\n     // Don't use. Change to go2 everywhere, then rename to 'go', and remove this old 'go'.\n     go: (url, opts: { useRateLimits?: boolean } = {}) => {\n       api.go2(url, { ...opts, waitForPageType: false });\n@@ -185,11 +194,7 @@ function pagesFor(browser) {\n         isOnEmbeddedCommentsPage = false;\n       }\n       else {\n-        // .DW = discussion / topic list page.  .btn = e.g. a Continue-after-having-verified\n-        // -one's-email-addr page.\n-        api.waitForExist('.DW, .talkyard-comments, .btn');\n-        isOnEmbeddedCommentsPage = browser.isExisting('.talkyard-comments');\n-        isWhere = isOnEmbeddedCommentsPage ? IsWhere.EmbeddingPage : IsWhere.Forum;\n+        api.__updateIsWhere();\n       }\n \n \n@@ -199,6 +204,15 @@ function pagesFor(browser) {\n     },\n \n \n+    __updateIsWhere: () => {\n+      // .DW = discussion / topic list page.  .btn = e.g. a Continue-after-having-verified\n+      // -one's-email-addr page.\n+      api.waitForExist('.DW, .talkyard-comments, .btn');\n+      isOnEmbeddedCommentsPage = browser.isExisting('.talkyard-comments');\n+      isWhere = isOnEmbeddedCommentsPage ? IsWhere.EmbeddingPage : IsWhere.Forum;\n+    },\n+\n+\n     goAndWaitForNewUrl: function(url) {\n       logMessage(\"Go: \" + url);\n       api.rememberCurrentUrl();\n@@ -741,7 +755,7 @@ function pagesFor(browser) {\n         assert.equal(length, 1, errors);\n       }\n       /*\n-      // DO_AFTER 2019-07-01 remove this out commented code.\n+      // DO_AFTER 2019-07-01, no, Webdriverio v5: remove this out commented code.\n       // Oddly enough, sometimes the overlay covers the page here, although\n       // we just waited for it to go away.  [7UKDWP2] [7JUKDQ4].\n       // Happens in FF only (May 2018) — maybe FF is so fast so the first test\n@@ -983,7 +997,7 @@ function pagesFor(browser) {\n             browser.addValue(selector, value);\n           }\n           else {\n-            // DO_AFTER 2019-07-01 see if this Chrome weirdness workaround is still needed.\n+            // DO_AFTER 2019-07-01, no, Webdriverio v5: see if this Chrome weirdness workaround is still needed.\n             browser.setValue(selector, '\\uE003'.repeat(oldValue.length) + value);\n           }\n \n@@ -1078,6 +1092,7 @@ function pagesFor(browser) {\n                 `${ shouldMatch ? doesMatch : !doesMatch }`);\n         }\n \n+        // If incorrect match/miss, return the failing regex.\n         if (shouldMatch != doesMatch)\n           return ros;\n       }\n@@ -3417,6 +3432,7 @@ function pagesFor(browser) {\n       },\n \n       clickReplyToEmbeddingBlogPost: function() {\n+        api.switchToEmbCommentsIframeIfNeeded();\n         api.topic.clickPostActionButton('.dw-ar-t > .esPA .dw-a-reply');\n       },\n "
    },
    {
      "sha": "e0cc732c8229c1c69046c2634fe3858739503017",
      "filename": "to-talkyard/src/to-talkyard.d.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 16,
      "changes": 16,
      "blob_url": "https://github.com/debiki/talkyard/blob/63430f15faf9b297106f88b8c25ac5b73ccd8288/to-talkyard/src/to-talkyard.d.ts",
      "raw_url": "https://github.com/debiki/talkyard/raw/63430f15faf9b297106f88b8c25ac5b73ccd8288/to-talkyard/src/to-talkyard.d.ts",
      "contents_url": "https://api.github.com/repos/debiki/talkyard/contents/to-talkyard/src/to-talkyard.d.ts?ref=63430f15faf9b297106f88b8c25ac5b73ccd8288",
      "patch": "@@ -43,22 +43,6 @@ interface PageToAdd {\n }\n \n \n-/* Already in  test-types2.ts\n-interface PageJustAdded {\n-  id: string;\n-  folder: string;\n-  showId: boolean;\n-  slug: string;\n-  role: number;\n-  title: string;\n-  body: string;\n-  categoryId: number;\n-  authorId: number,\n-  createdAtMs: number;\n-  updatedAtMs: number;\n-} */\n-\n-\n interface PageDumpV0 {\n   dbgSrc?: string;\n   id: PageId;"
    }
  ]
}
