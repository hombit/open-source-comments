{
  "sha": "9df2b2a9ed58c793e5463b927117ba1286b104d5",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOjlkZjJiMmE5ZWQ1OGM3OTNlNTQ2M2I5MjcxMTdiYTEyODZiMTA0ZDU=",
  "commit": {
    "author": {
      "name": "Dmitry Verkhoturov",
      "email": "paskal.07@gmail.com",
      "date": "2019-12-27T07:04:57Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2019-12-27T07:04:57Z"
    },
    "message": "Move email unsubscription endpoint outside of API and make it HTML (#500)\n\n* move email unsubscription page outside of API and make it HTML\r\n\r\n* make separate HTML template for SendErrorHTML\r\n\r\n* fix error template name\r\n\r\n* add test for SendErrorHTML, introduce MustExecute function\r\n\r\n* fix content check in test of TestSendErrorHTML\r\n\r\n* fix logging test to be more generic and not depend on line numbers",
    "tree": {
      "sha": "80e2d5592a487e8c6bbc3db57bfd0a7c5d4bf98e",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/80e2d5592a487e8c6bbc3db57bfd0a7c5d4bf98e"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/9df2b2a9ed58c793e5463b927117ba1286b104d5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/9df2b2a9ed58c793e5463b927117ba1286b104d5",
  "html_url": "https://github.com/umputun/remark/commit/9df2b2a9ed58c793e5463b927117ba1286b104d5",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/9df2b2a9ed58c793e5463b927117ba1286b104d5/comments",
  "author": {
    "login": "paskal",
    "id": 712534,
    "node_id": "MDQ6VXNlcjcxMjUzNA==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/712534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/paskal",
    "html_url": "https://github.com/paskal",
    "followers_url": "https://api.github.com/users/paskal/followers",
    "following_url": "https://api.github.com/users/paskal/following{/other_user}",
    "gists_url": "https://api.github.com/users/paskal/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/paskal/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/paskal/subscriptions",
    "organizations_url": "https://api.github.com/users/paskal/orgs",
    "repos_url": "https://api.github.com/users/paskal/repos",
    "events_url": "https://api.github.com/users/paskal/events{/privacy}",
    "received_events_url": "https://api.github.com/users/paskal/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b055c61be74541fc47cfbda837c25c5b8e9fa517",
      "url": "https://api.github.com/repos/umputun/remark/commits/b055c61be74541fc47cfbda837c25c5b8e9fa517",
      "html_url": "https://github.com/umputun/remark/commit/b055c61be74541fc47cfbda837c25c5b8e9fa517"
    }
  ],
  "stats": {
    "total": 144,
    "additions": 124,
    "deletions": 20
  },
  "files": [
    {
      "sha": "3b3735e3f27321720508328ac627530008f6d4f8",
      "filename": "backend/app/cmd/server.go",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/cmd/server.go",
      "raw_url": "https://github.com/umputun/remark/raw/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/cmd/server.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/cmd/server.go?ref=9df2b2a9ed58c793e5463b927117ba1286b104d5",
      "patch": "@@ -702,7 +702,7 @@ func (s *ServerCommand) makeNotify(dataStore *service.DataStore, authenticator *\n \t\t\temailParams := notify.EmailParams{\n \t\t\t\tFrom:                s.Notify.Email.From,\n \t\t\t\tVerificationSubject: s.Notify.Email.VerificationSubject,\n-\t\t\t\tUnsubscribeURL:      s.RemarkURL + \"/api/v1/email/unsubscribe\",\n+\t\t\t\tUnsubscribeURL:      s.RemarkURL + \"/email/unsubscribe.html\",\n \t\t\t\tTokenGenFn: func(userID, email, site string) (string, error) {\n \t\t\t\t\tclaims := token.Claims{\n \t\t\t\t\t\tHandshake: &token.Handshake{ID: userID + \"::\" + email},"
    },
    {
      "sha": "34f065dd2e7c32a02f40c3d28996749292625901",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/rest/api/rest.go",
      "raw_url": "https://github.com/umputun/remark/raw/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/rest/api/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest.go?ref=9df2b2a9ed58c793e5463b927117ba1286b104d5",
      "patch": "@@ -236,8 +236,6 @@ func (s *Rest) routes() chi.Router {\n \t\t\tropen.Get(\"/list\", s.pubRest.listCtrl)\n \t\t\tropen.Post(\"/preview\", s.pubRest.previewCommentCtrl)\n \t\t\tropen.Get(\"/info\", s.pubRest.infoCtrl)\n-\t\t\tropen.Get(\"/email/unsubscribe\", s.privRest.emailUnsubscribeCtrl)\n-\t\t\tropen.Post(\"/email/unsubscribe\", s.privRest.emailUnsubscribeCtrl)\n \t\t\tropen.Get(\"/img\", s.ImageProxy.Handler)\n \n \t\t\tropen.Route(\"/rss\", func(rrss chi.Router) {\n@@ -334,6 +332,8 @@ func (s *Rest) routes() chi.Router {\n \t\trroot.Use(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(50, nil)))\n \t\trroot.Get(\"/index.html\", s.pubRest.getStartedCtrl)\n \t\trroot.Get(\"/robots.txt\", s.pubRest.robotsCtrl)\n+\t\trroot.Get(\"/email/unsubscribe.html\", s.privRest.emailUnsubscribeCtrl)\n+\t\trroot.Post(\"/email/unsubscribe.html\", s.privRest.emailUnsubscribeCtrl)\n \t})\n \n \t// file server for static content from /web"
    },
    {
      "sha": "8255b1ac5a482e570f77091a0b3b1dbb775aece8",
      "filename": "backend/app/rest/api/rest_private.go",
      "status": "modified",
      "additions": 39,
      "deletions": 10,
      "changes": 49,
      "blob_url": "https://github.com/umputun/remark/blob/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/rest/api/rest_private.go",
      "raw_url": "https://github.com/umputun/remark/raw/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/rest/api/rest_private.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_private.go?ref=9df2b2a9ed58c793e5463b927117ba1286b104d5",
      "patch": "@@ -1,10 +1,13 @@\n package api\n \n import (\n+\t\"bytes\"\n \t\"compress/gzip\"\n \t\"encoding/json\"\n \t\"errors\"\n \t\"fmt\"\n+\t\"html/template\"\n+\t\"io\"\n \t\"net/http\"\n \t\"strings\"\n \t\"time\"\n@@ -55,6 +58,21 @@ type privStore interface {\n \tInfo(locator store.Locator, readonlyAge int) (store.PostInfo, error)\n }\n \n+const unsubscribeHtml = `<!DOCTYPE html>\n+<html>\n+<head>\n+    <meta name=\"viewport\" content=\"width=device-width\"/>\n+    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n+</head>\n+<body>\n+<div style=\"text-align: center; font-family: Arial, sans-serif; font-size: 18px;\">\n+    <h1 style=\"position: relative; color: #4fbbd6; margin-top: 0.2em;\">Remark42</h1>\n+\t<p style=\"position: relative; max-width: 20em; margin: 0 auto 1em auto; line-height: 1.4em;\">Successfully unsubscribed</p>\n+</div>\n+</body>\n+</html>\n+`\n+\n // POST /comment - adds comment, resets all immutable fields\n func (s *private) createCommentCtrl(w http.ResponseWriter, r *http.Request) {\n \n@@ -343,29 +361,29 @@ func (s *private) setConfirmedEmailCtrl(w http.ResponseWriter, r *http.Request)\n \trender.JSON(w, r, R.JSON{\"updated\": true, \"address\": val})\n }\n \n-// POST/GET /email/unsubscribe?site=siteID&tkn=jwt - unsubscribe the user in token from email notifications\n+// POST/GET /email/unsubscribe.html?site=siteID&tkn=jwt - unsubscribe the user in token from email notifications\n func (s *private) emailUnsubscribeCtrl(w http.ResponseWriter, r *http.Request) {\n \ttkn := r.URL.Query().Get(\"tkn\")\n \tif tkn == \"\" {\n-\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, errors.New(\"missing parameter\"), \"token parameter is required\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, errors.New(\"missing parameter\"), \"token parameter is required\", rest.ErrInternal)\n \t\treturn\n \t}\n \tlocator := store.Locator{SiteID: r.URL.Query().Get(\"site\")}\n \n \tconfClaims, err := s.authenticator.TokenService().Parse(tkn)\n \tif err != nil {\n-\t\trest.SendErrorJSON(w, r, http.StatusForbidden, err, \"failed to verify confirmation token\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusForbidden, err, \"failed to verify confirmation token\", rest.ErrInternal)\n \t\treturn\n \t}\n \n \tif s.authenticator.TokenService().IsExpired(confClaims) {\n-\t\trest.SendErrorJSON(w, r, http.StatusForbidden, errors.New(\"expired\"), \"failed to verify confirmation token\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusForbidden, errors.New(\"expired\"), \"failed to verify confirmation token\", rest.ErrInternal)\n \t\treturn\n \t}\n \n \telems := strings.Split(confClaims.Handshake.ID, \"::\")\n \tif len(elems) != 2 {\n-\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, errors.New(confClaims.Handshake.ID), \"invalid handshake token\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, errors.New(confClaims.Handshake.ID), \"invalid handshake token\", rest.ErrInternal)\n \t\treturn\n \t}\n \tuserID := elems[0]\n@@ -376,19 +394,19 @@ func (s *private) emailUnsubscribeCtrl(w http.ResponseWriter, r *http.Request) {\n \t\tlog.Printf(\"[WARN] can't read email for %s, %v\", userID, err)\n \t}\n \tif existingAddress == \"\" {\n-\t\trest.SendErrorJSON(w, r, http.StatusConflict, errors.New(\"user is not subscribed\"), \"user does not have active email subscription\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusConflict, errors.New(\"user is not subscribed\"), \"user does not have active email subscription\", rest.ErrInternal)\n \t\treturn\n \t}\n \tif address != existingAddress {\n-\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, errors.New(\"wrong email unsubscription\"), \"email address in request does not match known for this user\", rest.ErrInternal)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, errors.New(\"wrong email unsubscription\"), \"email address in request does not match known for this user\", rest.ErrInternal)\n \t\treturn\n \t}\n \n \tlog.Printf(\"[DEBUG] unsubscribe user %s\", userID)\n \n \tif err := s.dataService.DeleteUserDetail(locator, userID, engine.UserEmail); err != nil {\n \t\tcode := parseError(err, rest.ErrInternal)\n-\t\trest.SendErrorJSON(w, r, http.StatusBadRequest, err, \"can't delete email for user\", code)\n+\t\trest.SendErrorHTML(w, r, http.StatusBadRequest, err, \"can't delete email for user\", code)\n \t\treturn\n \t}\n \t// clean User.Email from the token, if user has the token\n@@ -399,11 +417,22 @@ func (s *private) emailUnsubscribeCtrl(w http.ResponseWriter, r *http.Request) {\n \tif claims.User != nil && claims.User.Email != \"\" {\n \t\tclaims.User.Email = \"\"\n \t\tif _, err = s.authenticator.TokenService().Set(w, claims); err != nil {\n-\t\t\trest.SendErrorJSON(w, r, http.StatusInternalServerError, err, \"failed to set token\", rest.ErrInternal)\n+\t\t\trest.SendErrorHTML(w, r, http.StatusInternalServerError, err, \"failed to set token\", rest.ErrInternal)\n \t\t\treturn\n \t\t}\n \t}\n-\trender.JSON(w, r, R.JSON{\"unsubscribed\": true})\n+\n+\t// MustExecute behaves like template.Execute, but panics if an error occurs.\n+\tMustExecute := func(tmpl *template.Template, wr io.Writer, data interface{}) {\n+\t\tif err := tmpl.Execute(wr, data); err != nil {\n+\t\t\tpanic(err)\n+\t\t}\n+\t}\n+\n+\ttmpl := template.Must(template.New(\"unsubscribe\").Parse(unsubscribeHtml))\n+\tmsg := bytes.Buffer{}\n+\tMustExecute(tmpl, &msg, nil)\n+\trender.HTML(w, r, msg.String())\n }\n \n // DELETE /email?site=siteID - removes user's email"
    },
    {
      "sha": "9a125e5658e4133919762531a7a60df9c456bf89",
      "filename": "backend/app/rest/api/rest_private_test.go",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/umputun/remark/blob/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/rest/api/rest_private_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/rest/api/rest_private_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_private_test.go?ref=9df2b2a9ed58c793e5463b927117ba1286b104d5",
      "patch": "@@ -543,10 +543,10 @@ func TestRest_Email(t *testing.T) {\n \t\t{description: \"delete user email\", url: \"/api/v1/email?site=remark42\", method: http.MethodDelete, responseCode: http.StatusOK},\n \t\t{description: \"send another confirmation\", url: \"/api/v1/email/subscribe?site=remark42&address=good@example.com\", method: http.MethodPost, responseCode: http.StatusOK},\n \t\t{description: \"set user email, token is good\", url: fmt.Sprintf(\"/api/v1/email/confirm?site=remark42&tkn=%s\", goodToken), method: http.MethodPost, responseCode: http.StatusOK, cookieEmail: \"good@example.com\"},\n-\t\t{description: \"unsubscribe user, no token\", url: \"/api/v1/email/unsubscribe?site=remark42\", method: http.MethodPost, responseCode: http.StatusBadRequest},\n-\t\t{description: \"unsubscribe user, wrong token\", url: \"/api/v1/email/unsubscribe?site=remark42&tkn=jwt\", method: http.MethodPost, responseCode: http.StatusForbidden},\n-\t\t{description: \"unsubscribe user, good token\", url: fmt.Sprintf(\"/api/v1/email/unsubscribe?site=remark42&tkn=%s\", goodToken), method: http.MethodPost, responseCode: http.StatusOK},\n-\t\t{description: \"unsubscribe user second time, good token\", url: fmt.Sprintf(\"/api/v1/email/unsubscribe?site=remark42&tkn=%s\", goodToken), method: http.MethodPost, responseCode: http.StatusConflict},\n+\t\t{description: \"unsubscribe user, no token\", url: \"/email/unsubscribe.html?site=remark42\", method: http.MethodPost, responseCode: http.StatusBadRequest},\n+\t\t{description: \"unsubscribe user, wrong token\", url: \"/email/unsubscribe.html?site=remark42&tkn=jwt\", method: http.MethodGet, responseCode: http.StatusForbidden},\n+\t\t{description: \"unsubscribe user, good token\", url: fmt.Sprintf(\"/email/unsubscribe.html?site=remark42&tkn=%s\", goodToken), method: http.MethodPost, responseCode: http.StatusOK},\n+\t\t{description: \"unsubscribe user second time, good token\", url: fmt.Sprintf(\"/email/unsubscribe.html?site=remark42&tkn=%s\", goodToken), method: http.MethodPost, responseCode: http.StatusConflict},\n \t}\n \tclient := http.Client{}\n \tfor _, x := range testData {"
    },
    {
      "sha": "7b2fbae518ca28e9ddf2c6bc8ab8685d5abdbd82",
      "filename": "backend/app/rest/httperrors.go",
      "status": "modified",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/umputun/remark/blob/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/rest/httperrors.go",
      "raw_url": "https://github.com/umputun/remark/raw/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/rest/httperrors.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/httperrors.go?ref=9df2b2a9ed58c793e5463b927117ba1286b104d5",
      "patch": "@@ -1,7 +1,10 @@\n package rest\n \n import (\n+\t\"bytes\"\n \t\"fmt\"\n+\t\"html/template\"\n+\t\"io\"\n \t\"net/http\"\n \t\"net/url\"\n \t\"runtime\"\n@@ -35,6 +38,48 @@ const (\n \tErrAssetNotFound      = 18 // requested file not found\n )\n \n+const errorHtml = `<!DOCTYPE html>\n+<html>\n+<head>\n+    <meta name=\"viewport\" content=\"width=device-width\"/>\n+    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n+</head>\n+<body>\n+<div style=\"text-align: center; font-family: Arial, sans-serif; font-size: 18px;\">\n+    <h1 style=\"position: relative; color: #4fbbd6; margin-top: 0.2em;\">Remark42</h1>\n+\t<p style=\"position: relative; max-width: 20em; margin: 0 auto 1em auto; line-height: 1.4em;\">{{.Error}}: {{.Details}}.</p>\n+</div>\n+</body>\n+</html>\n+`\n+\n+// errTmplData store data for error message\n+type errTmplData struct {\n+\tError   string\n+\tDetails string\n+}\n+\n+// SendErrorHTML makes html body with provided template and responds with provided http status code,\n+// error code is not included in render as it is intended for UI developers and not for the users\n+func SendErrorHTML(w http.ResponseWriter, r *http.Request, httpStatusCode int, err error, details string, errCode int) {\n+\t// MustExecute behaves like template.Execute, but panics if an error occurs.\n+\tMustExecute := func(tmpl *template.Template, wr io.Writer, data interface{}) {\n+\t\tif err := tmpl.Execute(wr, data); err != nil {\n+\t\t\tpanic(err)\n+\t\t}\n+\t}\n+\n+\ttmpl := template.Must(template.New(\"error\").Parse(errorHtml))\n+\tlog.Printf(\"[WARN] %s\", errDetailsMsg(r, httpStatusCode, err, details, errCode))\n+\trender.Status(r, httpStatusCode)\n+\tmsg := bytes.Buffer{}\n+\tMustExecute(tmpl, &msg, errTmplData{\n+\t\tError:   err.Error(),\n+\t\tDetails: details,\n+\t})\n+\trender.HTML(w, r, msg.String())\n+}\n+\n // SendErrorJSON makes {error: blah, details: blah} json body and responds with error code\n func SendErrorJSON(w http.ResponseWriter, r *http.Request, httpStatusCode int, err error, details string, errCode int) {\n \tlog.Printf(\"[WARN] %s\", errDetailsMsg(r, httpStatusCode, err, details, errCode))"
    },
    {
      "sha": "adf0ad983d9dadf6afa144776b833b6a09c33f81",
      "filename": "backend/app/rest/httperrors_test.go",
      "status": "modified",
      "additions": 33,
      "deletions": 3,
      "changes": 36,
      "blob_url": "https://github.com/umputun/remark/blob/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/rest/httperrors_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/9df2b2a9ed58c793e5463b927117ba1286b104d5/backend/app/rest/httperrors_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/httperrors_test.go?ref=9df2b2a9ed58c793e5463b927117ba1286b104d5",
      "patch": "@@ -9,6 +9,7 @@ import (\n \n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n+\n \t\"github.com/umputun/remark/backend/app/store\"\n )\n \n@@ -36,13 +37,41 @@ func TestSendErrorJSON(t *testing.T) {\n \tassert.Equal(t, `{\"code\":123,\"details\":\"error details 123456\",\"error\":\"error 500\"}`+\"\\n\", string(body))\n }\n \n+func TestSendErrorHTML(t *testing.T) {\n+\n+\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\tif r.URL.Path == \"/error\" {\n+\t\t\tt.Log(\"http err request\", r.URL)\n+\t\t\tSendErrorHTML(w, r, 500, errors.New(\"error 500\"), \"error details 123456\", 987)\n+\t\t\treturn\n+\t\t}\n+\t\tw.WriteHeader(404)\n+\t}))\n+\n+\tdefer ts.Close()\n+\n+\tresp, err := http.Get(ts.URL + \"/error\")\n+\trequire.Nil(t, err)\n+\tdefer resp.Body.Close()\n+\n+\tbody, err := ioutil.ReadAll(resp.Body)\n+\trequire.Nil(t, err)\n+\tassert.Equal(t, 500, resp.StatusCode)\n+\n+\tassert.NotContains(t, string(body), `987`, \"user html should not contain internal error code\")\n+\tassert.Contains(t, string(body), `error details 123456`)\n+\tassert.Contains(t, string(body), `error 500`)\n+}\n+\n func TestErrorDetailsMsg(t *testing.T) {\n \tcallerFn := func() {\n \t\treq, err := http.NewRequest(\"GET\", \"https://example.com/test?k1=v1&k2=v2\", nil)\n \t\trequire.Nil(t, err)\n \t\treq.RemoteAddr = \"1.2.3.4\"\n \t\tmsg := errDetailsMsg(req, 500, errors.New(\"error 500\"), \"error details 123456\", 123)\n-\t\tassert.Equal(t, \"error details 123456 - error 500 - 500 (123) - https://example.com/test?k1=v1&k2=v2 - [app/rest/httperrors_test.go:47 rest.TestErrorDetailsMsg]\", msg)\n+\t\tassert.Contains(t, msg, \"error details 123456 - error 500 - 500 (123) - https://example.com/test?k1=v1&k2=v2 - [app/rest/httperrors_test.go:\")\n+\t\t// error line in the middle of the message is not checked\n+\t\tassert.Contains(t, msg, \" rest.TestErrorDetailsMsg]\")\n \t}\n \tcallerFn()\n }\n@@ -55,8 +84,9 @@ func TestErrorDetailsMsgWithUser(t *testing.T) {\n \t\treq = SetUserInfo(req, store.User{Name: \"test\", ID: \"id\"})\n \t\trequire.Nil(t, err)\n \t\tmsg := errDetailsMsg(req, 500, errors.New(\"error 500\"), \"error details 123456\", 34567)\n-\t\tassert.Equal(t, \"error details 123456 - error 500 - 500 (34567) - test/id - https://example.\"+\n-\t\t\t\"com/test?k1=v1&k2=v2 - [app/rest/httperrors_test.go:61 rest.TestErrorDetailsMsgWithUser]\", msg)\n+\t\tassert.Contains(t, msg, \"error details 123456 - error 500 - 500 (34567) - test/id - https://example.com/test?k1=v1&k2=v2 - [app/rest/httperrors_test.go:\")\n+\t\t// error line in the middle of the message is not checked\n+\t\tassert.Contains(t, msg, \" rest.TestErrorDetailsMsgWithUser]\")\n \t}\n \tcallerFn()\n }"
    }
  ]
}
