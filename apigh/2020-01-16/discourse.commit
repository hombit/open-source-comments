{
  "sha": "f216c6d60b8740a66e04b05c3e5c865e8a4b4f91",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODpmMjE2YzZkNjBiODc0MGE2NmUwNGIwNWMzZTVjODY1ZThhNGI0Zjkx",
  "commit": {
    "author": {
      "name": "Gerhard Schlager",
      "email": "mail@gerhard-schlager.at",
      "date": "2020-01-15T22:19:13Z"
    },
    "committer": {
      "name": "Gerhard Schlager",
      "email": "mail@gerhard-schlager.at",
      "date": "2020-01-16T16:48:47Z"
    },
    "message": "FEATURE: Drop \"backup\" schema 7 days after restore\n\nThe \"backup\" schema is used to rollback a failed restore. It isn't useful after a longer period of time and turns into a waste of disk space.",
    "tree": {
      "sha": "fb6e8f813910bf26db6c8e7926bd8bd896d841af",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/fb6e8f813910bf26db6c8e7926bd8bd896d841af"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91",
  "html_url": "https://github.com/discourse/discourse/commit/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91/comments",
  "author": {
    "login": "gschlager",
    "id": 473736,
    "node_id": "MDQ6VXNlcjQ3MzczNg==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/473736?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gschlager",
    "html_url": "https://github.com/gschlager",
    "followers_url": "https://api.github.com/users/gschlager/followers",
    "following_url": "https://api.github.com/users/gschlager/following{/other_user}",
    "gists_url": "https://api.github.com/users/gschlager/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gschlager/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gschlager/subscriptions",
    "organizations_url": "https://api.github.com/users/gschlager/orgs",
    "repos_url": "https://api.github.com/users/gschlager/repos",
    "events_url": "https://api.github.com/users/gschlager/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gschlager/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "gschlager",
    "id": 473736,
    "node_id": "MDQ6VXNlcjQ3MzczNg==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/473736?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gschlager",
    "html_url": "https://github.com/gschlager",
    "followers_url": "https://api.github.com/users/gschlager/followers",
    "following_url": "https://api.github.com/users/gschlager/following{/other_user}",
    "gists_url": "https://api.github.com/users/gschlager/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gschlager/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gschlager/subscriptions",
    "organizations_url": "https://api.github.com/users/gschlager/orgs",
    "repos_url": "https://api.github.com/users/gschlager/repos",
    "events_url": "https://api.github.com/users/gschlager/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gschlager/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eeb2855a48ae92498c240ea6f5f0e15f4949b621",
      "url": "https://api.github.com/repos/discourse/discourse/commits/eeb2855a48ae92498c240ea6f5f0e15f4949b621",
      "html_url": "https://github.com/discourse/discourse/commit/eeb2855a48ae92498c240ea6f5f0e15f4949b621"
    }
  ],
  "stats": {
    "total": 102,
    "additions": 102,
    "deletions": 0
  },
  "files": [
    {
      "sha": "1908c72bf7a840c806d6ac35d5564ff371651adf",
      "filename": "app/jobs/scheduled/drop_backup_schema.rb",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/discourse/discourse/blob/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91/app/jobs/scheduled/drop_backup_schema.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91/app/jobs/scheduled/drop_backup_schema.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/jobs/scheduled/drop_backup_schema.rb?ref=f216c6d60b8740a66e04b05c3e5c865e8a4b4f91",
      "patch": "@@ -0,0 +1,11 @@\n+# frozen_string_literal: true\n+\n+module Jobs\n+  class DropBackupSchema < ::Jobs::Scheduled\n+    every 1.day\n+\n+    def execute(_)\n+      BackupRestore::DatabaseRestorer.drop_backup_schema\n+    end\n+  end\n+end"
    },
    {
      "sha": "b7f3a1c4c620f3983abb7adde8246b793844dc58",
      "filename": "app/models/backup_metadata.rb",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91/app/models/backup_metadata.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91/app/models/backup_metadata.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/backup_metadata.rb?ref=f216c6d60b8740a66e04b05c3e5c865e8a4b4f91",
      "patch": "@@ -1,6 +1,8 @@\n # frozen_string_literal: true\n \n class BackupMetadata < ActiveRecord::Base\n+  LAST_RESTORE_DATE = \"last_restore_date\"\n+\n   def self.value_for(name)\n     where(name: name).pluck_first(:value).presence\n   end"
    },
    {
      "sha": "b3cb9ab0c8b09b1035529be83208201b79930e38",
      "filename": "lib/backup_restore/database_restorer.rb",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/discourse/discourse/blob/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91/lib/backup_restore/database_restorer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91/lib/backup_restore/database_restorer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/backup_restore/database_restorer.rb?ref=f216c6d60b8740a66e04b05c3e5c865e8a4b4f91",
      "patch": "@@ -8,6 +8,7 @@ class DatabaseRestorer\n \n     MAIN_SCHEMA = \"public\"\n     BACKUP_SCHEMA = \"backup\"\n+    DROP_BACKUP_SCHEMA_AFTER_DAYS = 7\n \n     def initialize(logger, current_db)\n       @logger = logger\n@@ -25,6 +26,8 @@ def restore(db_dump_path)\n       restore_dump\n       migrate_database\n       reconnect_database\n+\n+      self.class.update_last_restore_date\n     end\n \n     def rollback\n@@ -42,6 +45,20 @@ def clean_up\n       drop_created_discourse_functions\n     end\n \n+    def self.drop_backup_schema\n+      if backup_schema_dropable?\n+        ActiveRecord::Base.connection.drop_schema(BACKUP_SCHEMA)\n+      end\n+    end\n+\n+    def self.update_last_restore_date\n+      BackupMetadata.where(name: BackupMetadata::LAST_RESTORE_DATE).delete_all\n+      BackupMetadata.create!(\n+        name: BackupMetadata::LAST_RESTORE_DATE,\n+        value: Time.zone.now.iso8601\n+      )\n+    end\n+\n     protected\n \n     def restore_dump\n@@ -178,5 +195,20 @@ def drop_created_discourse_functions\n     rescue => ex\n       log \"Something went wrong while dropping functions from the discourse_functions schema\", ex\n     end\n+\n+    def self.backup_schema_dropable?\n+      return false unless ActiveRecord::Base.connection.schema_exists?(BACKUP_SCHEMA)\n+\n+      last_restore_date = BackupMetadata.value_for(BackupMetadata::LAST_RESTORE_DATE)\n+\n+      if last_restore_date.present?\n+        last_restore_date = Time.zone.parse(last_restore_date)\n+        return last_restore_date + DROP_BACKUP_SCHEMA_AFTER_DAYS.days < Time.zone.now\n+      end\n+\n+      update_last_restore_date\n+      false\n+    end\n+    private_class_method :backup_schema_dropable?\n   end\n end"
    },
    {
      "sha": "6d79dff9ef83a2ce55acb3946c0a6664788ef790",
      "filename": "spec/lib/backup_restore/database_restorer_spec.rb",
      "status": "modified",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/discourse/discourse/blob/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91/spec/lib/backup_restore/database_restorer_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/f216c6d60b8740a66e04b05c3e5c865e8a4b4f91/spec/lib/backup_restore/database_restorer_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/lib/backup_restore/database_restorer_spec.rb?ref=f216c6d60b8740a66e04b05c3e5c865e8a4b4f91",
      "patch": "@@ -67,6 +67,14 @@ def execute_stubbed_restore(stub_readonly_functions: true, stub_psql: true, stub\n       subject.restore(\"foo.sql\")\n     end\n \n+    it \"stores the date of the last restore\" do\n+      date_string = \"2020-01-10T17:38:27Z\"\n+      freeze_time(Time.parse(date_string))\n+      execute_stubbed_restore\n+\n+      expect(BackupMetadata.value_for(BackupMetadata::LAST_RESTORE_DATE)).to eq(date_string)\n+    end\n+\n     context \"with real psql\" do\n       after do\n         psql = BackupRestore::DatabaseRestorer.psql_command\n@@ -176,4 +184,53 @@ def expect_restore_to_work(filename)\n       subject.clean_up\n     end\n   end\n+\n+  describe \".drop_backup_schema\" do\n+    subject { BackupRestore::DatabaseRestorer }\n+\n+    context \"when no backup schema exists\" do\n+      it \"doesn't do anything\" do\n+        ActiveRecord::Base.connection.expects(:schema_exists?).with(\"backup\").returns(false)\n+        ActiveRecord::Base.connection.expects(:drop_schema).never\n+\n+        subject.drop_backup_schema\n+      end\n+    end\n+\n+    context \"when a backup schema exists\" do\n+      before do\n+        ActiveRecord::Base.connection.expects(:schema_exists?).with(\"backup\").returns(true)\n+      end\n+\n+      it \"drops the schema when the last restore was long ago\" do\n+        ActiveRecord::Base.connection.expects(:drop_schema).with(\"backup\")\n+\n+        freeze_time(8.days.ago) do\n+          subject.update_last_restore_date\n+        end\n+\n+        subject.drop_backup_schema\n+      end\n+\n+      it \"doesn't drop the schema when the last restore was recently\" do\n+        ActiveRecord::Base.connection.expects(:drop_schema).with(\"backup\").never\n+\n+        freeze_time(6.days.ago) do\n+          subject.update_last_restore_date\n+        end\n+\n+        subject.drop_backup_schema\n+      end\n+\n+      it \"stores the current date when there is no record of the last restore\" do\n+        ActiveRecord::Base.connection.expects(:drop_schema).with(\"backup\").never\n+\n+        date_string = \"2020-01-08T17:38:27Z\"\n+        freeze_time(Time.parse(date_string))\n+\n+        subject.drop_backup_schema\n+        expect(BackupMetadata.value_for(BackupMetadata::LAST_RESTORE_DATE)).to eq(date_string)\n+      end\n+    end\n+  end\n end"
    }
  ]
}
