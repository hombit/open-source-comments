{
  "sha": "b0898cd1f3cd29d3c4fb8ddcc4df370bbb7278d7",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmIwODk4Y2QxZjNjZDI5ZDNjNGZiOGRkY2M0ZGYzNzBiYmI3Mjc4ZDc=",
  "commit": {
    "author": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-01-15T21:07:45Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-01-15T21:07:45Z"
    },
    "message": "add cache control for frontend assets",
    "tree": {
      "sha": "adac01f61efea57d15be896ce9bdc0db87d7370d",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/adac01f61efea57d15be896ce9bdc0db87d7370d"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/b0898cd1f3cd29d3c4fb8ddcc4df370bbb7278d7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/b0898cd1f3cd29d3c4fb8ddcc4df370bbb7278d7",
  "html_url": "https://github.com/umputun/remark/commit/b0898cd1f3cd29d3c4fb8ddcc4df370bbb7278d7",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/b0898cd1f3cd29d3c4fb8ddcc4df370bbb7278d7/comments",
  "author": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b082c2a82f7c4433f8406a7cff9b451130a7ae55",
      "url": "https://api.github.com/repos/umputun/remark/commits/b082c2a82f7c4433f8406a7cff9b451130a7ae55",
      "html_url": "https://github.com/umputun/remark/commit/b082c2a82f7c4433f8406a7cff9b451130a7ae55"
    }
  ],
  "stats": {
    "total": 84,
    "additions": 73,
    "deletions": 11
  },
  "files": [
    {
      "sha": "5dbec4189f8bf548791155849617356763ac7fbb",
      "filename": "backend/app/rest/api/rest.go",
      "status": "modified",
      "additions": 40,
      "deletions": 11,
      "changes": 51,
      "blob_url": "https://github.com/umputun/remark/blob/b0898cd1f3cd29d3c4fb8ddcc4df370bbb7278d7/backend/app/rest/api/rest.go",
      "raw_url": "https://github.com/umputun/remark/raw/b0898cd1f3cd29d3c4fb8ddcc4df370bbb7278d7/backend/app/rest/api/rest.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest.go?ref=b0898cd1f3cd29d3c4fb8ddcc4df370bbb7278d7",
      "patch": "@@ -6,6 +6,7 @@ import (\n \t\"encoding/json\"\n \t\"fmt\"\n \t\"net/http\"\n+\t\"strconv\"\n \t\"strings\"\n \t\"sync\"\n \t\"time\"\n@@ -338,7 +339,7 @@ func (s *Rest) routes() chi.Router {\n \t})\n \n \t// file server for static content from /web\n-\taddFileServer(router, \"/web\", http.Dir(s.WebRoot))\n+\taddFileServer(router, \"/web\", http.Dir(s.WebRoot), s.Version)\n \treturn router\n }\n \n@@ -444,7 +445,7 @@ func (s *Rest) configCtrl(w http.ResponseWriter, r *http.Request) {\n }\n \n // serves static files from /web or embedded by statik\n-func addFileServer(r chi.Router, path string, root http.FileSystem) {\n+func addFileServer(r chi.Router, path string, root http.FileSystem, version string) {\n \n \tvar webFS http.Handler\n \n@@ -466,15 +467,17 @@ func addFileServer(r chi.Router, path string, root http.FileSystem) {\n \t}\n \tpath += \"*\"\n \n-\tr.With(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(20, nil)), middleware.Timeout(10*time.Second)).\n-\t\tGet(path, func(w http.ResponseWriter, r *http.Request) {\n-\t\t\t// don't show dirs, just serve files\n-\t\t\tif strings.HasSuffix(r.URL.Path, \"/\") && len(r.URL.Path) > 1 && r.URL.Path != (origPath+\"/\") {\n-\t\t\t\thttp.NotFound(w, r)\n-\t\t\t\treturn\n-\t\t\t}\n-\t\t\twebFS.ServeHTTP(w, r)\n-\t\t})\n+\tr.With(tollbooth_chi.LimitHandler(tollbooth.NewLimiter(20, nil)),\n+\t\tmiddleware.Timeout(10*time.Second),\n+\t\tcacheControl(time.Hour*24, version),\n+\t).Get(path, func(w http.ResponseWriter, r *http.Request) {\n+\t\t// don't show dirs, just serve files\n+\t\tif strings.HasSuffix(r.URL.Path, \"/\") && len(r.URL.Path) > 1 && r.URL.Path != (origPath+\"/\") {\n+\t\t\thttp.NotFound(w, r)\n+\t\t\treturn\n+\t\t}\n+\t\twebFS.ServeHTTP(w, r)\n+\t})\n }\n \n func encodeJSONWithHTML(v interface{}) ([]byte, error) {\n@@ -566,6 +569,32 @@ func matchSiteID(next http.Handler) http.Handler {\n \treturn http.HandlerFunc(fn)\n }\n \n+// cacheControl is a middleware setting cache expiration. Using url+version as etag\n+func cacheControl(expiration time.Duration, version string) func(http.Handler) http.Handler {\n+\n+\tetag := func(r *http.Request, version string) string {\n+\t\ts := version + \":\" + r.URL.String()\n+\t\treturn store.EncodeID(s)\n+\t}\n+\n+\treturn func(h http.Handler) http.Handler {\n+\t\tfn := func(w http.ResponseWriter, r *http.Request) {\n+\t\t\te := `\"` + etag(r, version) + `\"`\n+\t\t\tw.Header().Set(\"Etag\", e)\n+\t\t\tw.Header().Set(\"Cache-Control\", \"max-age=\"+strconv.Itoa(int(expiration.Seconds())))\n+\n+\t\t\tif match := r.Header.Get(\"If-None-Match\"); match != \"\" {\n+\t\t\t\tif strings.Contains(match, e) {\n+\t\t\t\t\tw.WriteHeader(http.StatusNotModified)\n+\t\t\t\t\treturn\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\th.ServeHTTP(w, r)\n+\t\t}\n+\t\treturn http.HandlerFunc(fn)\n+\t}\n+}\n+\n func parseError(err error, defaultCode int) (code int) {\n \tcode = defaultCode\n "
    },
    {
      "sha": "c709280075518977d982be3b66a6f1d282ea18d3",
      "filename": "backend/app/rest/api/rest_test.go",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/umputun/remark/blob/b0898cd1f3cd29d3c4fb8ddcc4df370bbb7278d7/backend/app/rest/api/rest_test.go",
      "raw_url": "https://github.com/umputun/remark/raw/b0898cd1f3cd29d3c4fb8ddcc4df370bbb7278d7/backend/app/rest/api/rest_test.go",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/backend/app/rest/api/rest_test.go?ref=b0898cd1f3cd29d3c4fb8ddcc4df370bbb7278d7",
      "patch": "@@ -293,6 +293,39 @@ func TestRest_parseError(t *testing.T) {\n \t}\n }\n \n+func TestRest_cacheControl(t *testing.T) {\n+\n+\ttbl := []struct {\n+\t\turl     string\n+\t\tversion string\n+\t\texp     time.Duration\n+\t\tetag    string\n+\t\tmaxAge  int\n+\t}{\n+\t\t{\"http://example.com/foo\", \"v1\", time.Hour, \"b433be1ea19edaee9dc92ca4b895b6bdf3c058cb\", 3600},\n+\t\t{\"http://example.com/foo2\", \"v1\", 10 * time.Hour, \"6d8466aef3246c1057452561acddf7ad9d0d99e0\", 36000},\n+\t\t{\"http://example.com/foo\", \"v2\", time.Hour, \"481700c52aab0dfbca99f3ffc2a4fbb27884c114\", 3600},\n+\t\t{\"https://example.com/foo\", \"v2\", time.Hour, \"bebd4f1b87f474792c4e75e5affe31fbf67f5778\", 3600},\n+\t}\n+\n+\tfor i, tt := range tbl {\n+\t\tt.Run(strconv.Itoa(i), func(t *testing.T) {\n+\t\t\treq := httptest.NewRequest(\"GET\", tt.url, nil)\n+\t\t\tw := httptest.NewRecorder()\n+\n+\t\t\th := cacheControl(tt.exp, tt.version)(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {}))\n+\t\t\th.ServeHTTP(w, req)\n+\t\t\tresp := w.Result()\n+\t\t\tassert.Equal(t, http.StatusOK, resp.StatusCode)\n+\t\t\tt.Logf(\"%+v\", resp.Header)\n+\t\t\tassert.Equal(t, `\"`+tt.etag+`\"`, resp.Header.Get(\"Etag\"))\n+\t\t\tassert.Equal(t, `max-age=`+strconv.Itoa(int(tt.exp.Seconds())), resp.Header.Get(\"Cache-Control\"))\n+\n+\t\t})\n+\t}\n+\n+}\n+\n func startupT(t *testing.T) (ts *httptest.Server, srv *Rest, teardown func()) {\n \tlog.Setup(log.CallerFile, log.CallerFunc, log.Msec, log.LevelBraces)\n "
    }
  ]
}
