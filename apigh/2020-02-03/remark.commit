{
  "sha": "d22e364d1b0239b96615fed37d5396ddc327295b",
  "node_id": "MDY6Q29tbWl0MTE0ODI5NTAzOmQyMmUzNjRkMWIwMjM5Yjk2NjE1ZmVkMzdkNTM5NmRkYzMyNzI5NWI=",
  "commit": {
    "author": {
      "name": "Pavel Mineev",
      "email": "pavel@mineev.me",
      "date": "2020-01-28T06:38:02Z"
    },
    "committer": {
      "name": "Umputun",
      "email": "umputun@gmail.com",
      "date": "2020-01-28T06:38:02Z"
    },
    "message": "Autosubmit token by paste and a bit more (#583)\n\n* Use lib for typing tests instead copied types\r\n\r\n* add jwt utils\r\n\r\n* Add autosending\r\n\r\n* fix\r\n\r\n* tests\r\n\r\n* remove atob and fix tests",
    "tree": {
      "sha": "c6689b3bdbada4445a81bc74b050b6bafe3cd8a0",
      "url": "https://api.github.com/repos/umputun/remark/git/trees/c6689b3bdbada4445a81bc74b050b6bafe3cd8a0"
    },
    "url": "https://api.github.com/repos/umputun/remark/git/commits/d22e364d1b0239b96615fed37d5396ddc327295b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/umputun/remark/commits/d22e364d1b0239b96615fed37d5396ddc327295b",
  "html_url": "https://github.com/umputun/remark/commit/d22e364d1b0239b96615fed37d5396ddc327295b",
  "comments_url": "https://api.github.com/repos/umputun/remark/commits/d22e364d1b0239b96615fed37d5396ddc327295b/comments",
  "author": {
    "login": "akellbl4",
    "id": 2330682,
    "node_id": "MDQ6VXNlcjIzMzA2ODI=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/2330682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/akellbl4",
    "html_url": "https://github.com/akellbl4",
    "followers_url": "https://api.github.com/users/akellbl4/followers",
    "following_url": "https://api.github.com/users/akellbl4/following{/other_user}",
    "gists_url": "https://api.github.com/users/akellbl4/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/akellbl4/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/akellbl4/subscriptions",
    "organizations_url": "https://api.github.com/users/akellbl4/orgs",
    "repos_url": "https://api.github.com/users/akellbl4/repos",
    "events_url": "https://api.github.com/users/akellbl4/events{/privacy}",
    "received_events_url": "https://api.github.com/users/akellbl4/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "umputun",
    "id": 535880,
    "node_id": "MDQ6VXNlcjUzNTg4MA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/535880?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/umputun",
    "html_url": "https://github.com/umputun",
    "followers_url": "https://api.github.com/users/umputun/followers",
    "following_url": "https://api.github.com/users/umputun/following{/other_user}",
    "gists_url": "https://api.github.com/users/umputun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/umputun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/umputun/subscriptions",
    "organizations_url": "https://api.github.com/users/umputun/orgs",
    "repos_url": "https://api.github.com/users/umputun/repos",
    "events_url": "https://api.github.com/users/umputun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/umputun/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "019fa9e5ac2fc79dba64f8231be9ef65c6471b81",
      "url": "https://api.github.com/repos/umputun/remark/commits/019fa9e5ac2fc79dba64f8231be9ef65c6471b81",
      "html_url": "https://github.com/umputun/remark/commit/019fa9e5ac2fc79dba64f8231be9ef65c6471b81"
    }
  ],
  "stats": {
    "total": 1279,
    "additions": 420,
    "deletions": 859
  },
  "files": [
    {
      "sha": "bb5f4397d0cd1500fdd97f0365d1ee82e93eeb95",
      "filename": "frontend/app/@types/enzyme.d.ts",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/@types/enzyme.d.ts",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/@types/enzyme.d.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/@types/enzyme.d.ts?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -0,0 +1 @@\n+/// <reference types=\"enzyme-adapter-preact-pure\" />"
    },
    {
      "sha": "97a4e35520f637077d0d3268e80e899fd455d68f",
      "filename": "frontend/app/@types/enzyme/enzyme.d.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 723,
      "changes": 723,
      "blob_url": "https://github.com/umputun/remark/blob/019fa9e5ac2fc79dba64f8231be9ef65c6471b81/frontend/app/@types/enzyme/enzyme.d.ts",
      "raw_url": "https://github.com/umputun/remark/raw/019fa9e5ac2fc79dba64f8231be9ef65c6471b81/frontend/app/@types/enzyme/enzyme.d.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/@types/enzyme/enzyme.d.ts?ref=019fa9e5ac2fc79dba64f8231be9ef65c6471b81",
      "patch": "@@ -1,723 +0,0 @@\n-/**\n- * THIS IS PATCHED VERSION OF @types/enzyme THAT ADJUSTED FOR PREACT\n- * ALL CREDIT GOES TO MAINTAINERS OF @types/enzyme\n- */\n-\n-/* eslint-disable */\n-\n-declare module 'enzyme' {\n-  // Type definitions for Enzyme 3.10\n-  // Project: https://github.com/airbnb/enzyme\n-  // Definitions by: Marian Palkus <https://github.com/MarianPalkus>\n-  //                 Cap3 <http://www.cap3.de>\n-  //                 Ivo Stratev <https://github.com/NoHomey>\n-  //                 jwbay <https://github.com/jwbay>\n-  //                 huhuanming <https://github.com/huhuanming>\n-  //                 MartynasZilinskas <https://github.com/MartynasZilinskas>\n-  //                 Torgeir Hovden <https://github.com/thovden>\n-  //                 Martin Hochel <https://github.com/hotell>\n-  //                 Christian Rackerseder <https://github.com/screendriver>\n-  //                 Mateusz Soko≈Ça <https://github.com/mateuszsokola>\n-  //                 Braiden Cutforth <https://github.com/braidencutforth>\n-  // Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n-  // TypeScript Version: 3.1\n-\n-  /// <reference types=\"cheerio\" />\n-  import { Component } from 'preact';\n-\n-  export type HTMLAttributes = any;\n-\n-  class ReactElement<T = any> {}\n-\n-  export class ElementClass {}\n-\n-  /* These are purposefully stripped down versions of React.ComponentClass and React.StatelessComponent.\n-   * The optional static properties on them break overload ordering for wrapper methods if they're not\n-   * all specified in the implementation. TS chooses the EnzymePropSelector overload and loses the generics\n-   */\n-  export interface ComponentClass<Props> {\n-    new (props: Props, context?: any): Component<Props>;\n-  }\n-\n-  export type StatelessComponent<Props> = (props: Props, context?: any) => JSX.Element | null;\n-\n-  export type ComponentType<Props> = ComponentClass<Props> | StatelessComponent<Props>;\n-\n-  /**\n-   * Many methods in Enzyme's API accept a selector as an argument. Selectors in Enzyme can fall into one of the\n-   * following three categories:\n-   *\n-   *  1. A Valid CSS Selector\n-   *  2. A React Component Constructor\n-   *  3. A React Component's displayName\n-   *  4. A React Stateless component\n-   *  5. A React component property map\n-   */\n-  export interface EnzymePropSelector {\n-    [key: string]: any;\n-  }\n-  export type EnzymeSelector = string | StatelessComponent<any> | ComponentClass<any> | EnzymePropSelector;\n-\n-  export type Intercepter<T> = (intercepter: T) => void;\n-\n-  export interface CommonWrapper<P = {}, S = {}, C = Component<P, S>> {\n-    /**\n-     * Returns a new wrapper with only the nodes of the current wrapper that, when passed into the provided predicate function, return true.\n-     */\n-    filterWhere(predicate: (wrapper: this) => boolean): this;\n-\n-    /**\n-     * Returns whether or not the current wrapper has a node anywhere in it's render tree that looks like the one passed in.\n-     */\n-    contains(node: ReactElement | ReactElement[] | string): boolean;\n-\n-    /**\n-     * Returns whether or not a given react element exists in the shallow render tree.\n-     */\n-    containsMatchingElement(node: ReactElement | ReactElement[]): boolean;\n-\n-    /**\n-     * Returns whether or not all the given react elements exists in the shallow render tree\n-     */\n-    containsAllMatchingElements(nodes: ReactElement[] | ReactElement[][]): boolean;\n-\n-    /**\n-     * Returns whether or not one of the given react elements exists in the shallow render tree.\n-     */\n-    containsAnyMatchingElements(nodes: ReactElement[] | ReactElement[][]): boolean;\n-\n-    /**\n-     * Returns whether or not the current render tree is equal to the given node, based on the expected value.\n-     */\n-    equals(node: ReactElement): boolean;\n-\n-    /**\n-     * Returns whether or not a given react element matches the shallow render tree.\n-     */\n-    matchesElement(node: ReactElement): boolean;\n-\n-    /**\n-     * Returns whether or not the current node has a className prop including the passed in class name.\n-     */\n-    hasClass(className: string | RegExp): boolean;\n-\n-    /**\n-     * Invokes a function prop.\n-     * @param invokePropName The function prop to call.\n-     * @param ...args The argments to the invokePropName function\n-     * @returns The value of the function.\n-     */\n-    invoke<\n-      K extends NonNullable<{ [K in keyof P]: P[K] extends ((...arg: any[]) => void) | undefined ? K : never }[keyof P]>\n-    >(\n-      invokePropName: K\n-    ): P[K];\n-\n-    /**\n-     * Returns whether or not the current node matches a provided selector.\n-     */\n-    is(selector: EnzymeSelector): boolean;\n-\n-    /**\n-     * Returns whether or not the current node is empty.\n-     * @deprecated Use .exists() instead.\n-     */\n-    isEmpty(): boolean;\n-\n-    /**\n-     * Returns whether or not the current node exists.\n-     */\n-    exists(selector?: EnzymeSelector): boolean;\n-\n-    /**\n-     * Returns a new wrapper with only the nodes of the current wrapper that don't match the provided selector.\n-     * This method is effectively the negation or inverse of filter.\n-     */\n-    not(selector: EnzymeSelector): this;\n-\n-    /**\n-     * Returns a string of the rendered text of the current render tree. This function should be looked at with\n-     * skepticism if being used to test what the actual HTML output of the component will be. If that is what you\n-     * would like to test, use enzyme's render function instead.\n-     *\n-     * Note: can only be called on a wrapper of a single node.\n-     */\n-    text(): string;\n-\n-    /**\n-     * Returns a string of the rendered HTML markup of the current render tree.\n-     *\n-     * Note: can only be called on a wrapper of a single node.\n-     */\n-    html(): string;\n-\n-    /**\n-     * Returns the node at a given index of the current wrapper.\n-     */\n-    get(index: number): ReactElement;\n-\n-    /**\n-     * Returns the wrapper's underlying node.\n-     */\n-    getNode(): ReactElement;\n-\n-    /**\n-     * Returns the wrapper's underlying nodes.\n-     */\n-    getNodes(): ReactElement[];\n-\n-    /**\n-     * Returns the wrapper's underlying node.\n-     */\n-    getElement(): ReactElement;\n-\n-    /**\n-     * Returns the wrapper's underlying node.\n-     */\n-    getElements(): ReactElement[];\n-\n-    /**\n-     * Returns the outer most DOMComponent of the current wrapper.\n-     */\n-    getDOMNode<T extends Element = Element>(): T;\n-\n-    /**\n-     * Returns a wrapper around the node at a given index of the current wrapper.\n-     */\n-    at(index: number): this;\n-\n-    /**\n-     * Reduce the set of matched nodes to the first in the set.\n-     */\n-    first(): this;\n-\n-    /**\n-     * Reduce the set of matched nodes to the last in the set.\n-     */\n-    last(): this;\n-\n-    /**\n-     * Returns a new wrapper with a subset of the nodes of the original wrapper, according to the rules of `Array#slice`.\n-     */\n-    slice(begin?: number, end?: number): this;\n-\n-    /**\n-     * Taps into the wrapper method chain. Helpful for debugging.\n-     */\n-    tap(intercepter: Intercepter<this>): this;\n-\n-    /**\n-     * Returns the state hash for the root node of the wrapper. Optionally pass in a prop name and it will return just that value.\n-     */\n-    state(): S;\n-    state<K extends keyof S>(key: K): S[K];\n-    state<T>(key: string): T;\n-\n-    /**\n-     * Returns the context hash for the root node of the wrapper. Optionally pass in a prop name and it will return just that value.\n-     */\n-    context(): any;\n-    context<T>(key: string): T;\n-\n-    /**\n-     * Returns the props hash for the current node of the wrapper.\n-     *\n-     * NOTE: can only be called on a wrapper of a single node.\n-     */\n-    props(): P;\n-\n-    /**\n-     * Returns the prop value for the node of the current wrapper with the provided key.\n-     *\n-     * NOTE: can only be called on a wrapper of a single node.\n-     */\n-    prop<K extends keyof P>(key: K): P[K];\n-    prop<T>(key: string): T;\n-\n-    /**\n-     * Returns the key value for the node of the current wrapper.\n-     * NOTE: can only be called on a wrapper of a single node.\n-     */\n-    key(): string;\n-\n-    /**\n-     * Simulate events.\n-     * Returns itself.\n-     * @param args?\n-     */\n-    simulate(event: string, ...args: any[]): this;\n-\n-    /**\n-     * Used to simulate throwing a rendering error. Pass an error to throw.\n-     * Returns itself.\n-     * @param error\n-     */\n-    simulateError(error: any): this;\n-\n-    /**\n-     * A method to invoke setState() on the root component instance similar to how you might in the definition of\n-     * the component, and re-renders. This method is useful for testing your component in hard to achieve states,\n-     * however should be used sparingly. If possible, you should utilize your component's external API in order to\n-     * get it into whatever state you want to test, in order to be as accurate of a test as possible. This is not\n-     * always practical, however.\n-     * Returns itself.\n-     *\n-     * NOTE: can only be called on a wrapper instance that is also the root instance.\n-     */\n-    setState<K extends keyof S>(state: Pick<S, K>, callback?: () => void): this;\n-\n-    /**\n-     * A method that sets the props of the root component, and re-renders. Useful for when you are wanting to test\n-     * how the component behaves over time with changing props. Calling this, for instance, will call the\n-     * componentWillReceiveProps lifecycle method.\n-     *\n-     * Similar to setState, this method accepts a props object and will merge it in with the already existing props.\n-     * Returns itself.\n-     *\n-     * NOTE: can only be called on a wrapper instance that is also the root instance.\n-     */\n-    setProps<K extends keyof P>(props: Pick<P, K>, callback?: () => void): this;\n-\n-    /**\n-     * A method that sets the context of the root component, and re-renders. Useful for when you are wanting to\n-     * test how the component behaves over time with changing contexts.\n-     * Returns itself.\n-     *\n-     * NOTE: can only be called on a wrapper instance that is also the root instance.\n-     */\n-    setContext(context: any): this;\n-\n-    /**\n-     * Gets the instance of the component being rendered as the root node passed into shallow().\n-     *\n-     * NOTE: can only be called on a wrapper instance that is also the root instance.\n-     */\n-    instance(): C;\n-\n-    /**\n-     * Forces a re-render. Useful to run before checking the render output if something external may be updating\n-     * the state of the component somewhere.\n-     * Returns itself.\n-     *\n-     * NOTE: can only be called on a wrapper instance that is also the root instance.\n-     */\n-    update(): this;\n-\n-    /**\n-     * Returns an html-like string of the wrapper for debugging purposes. Useful to print out to the console when\n-     * tests are not passing when you expect them to.\n-     */\n-    debug(): string;\n-\n-    /**\n-     * Returns the name of the current node of the wrapper.\n-     */\n-    name(): string;\n-\n-    /**\n-     * Iterates through each node of the current wrapper and executes the provided function with a wrapper around\n-     * the corresponding node passed in as the first argument.\n-     *\n-     * Returns itself.\n-     * @param fn A callback to be run for every node in the collection. Should expect a ShallowWrapper as the first\n-     *              argument, and will be run with a context of the original instance.\n-     */\n-    forEach(fn: (wrapper: this, index: number) => any): this;\n-\n-    /**\n-     * Maps the current array of nodes to another array. Each node is passed in as a ShallowWrapper to the map\n-     * function.\n-     * Returns an array of the returned values from the mapping function..\n-     * @param fn A mapping function to be run for every node in the collection, the results of which will be mapped\n-     *              to the returned array. Should expect a ShallowWrapper as the first argument, and will be run\n-     *              with a context of the original instance.\n-     */\n-    map<V>(fn: (wrapper: this, index: number) => V): V[];\n-\n-    /**\n-     * Applies the provided reducing function to every node in the wrapper to reduce to a single value. Each node\n-     * is passed in as a ShallowWrapper, and is processed from left to right.\n-     */\n-    reduce<R>(fn: (prevVal: R, wrapper: this, index: number) => R, initialValue?: R): R;\n-\n-    /**\n-     * Applies the provided reducing function to every node in the wrapper to reduce to a single value.\n-     * Each node is passed in as a ShallowWrapper, and is processed from right to left.\n-     */\n-    reduceRight<R>(fn: (prevVal: R, wrapper: this, index: number) => R, initialValue?: R): R;\n-\n-    /**\n-     * Returns whether or not any of the nodes in the wrapper match the provided selector.\n-     */\n-    some(selector: EnzymeSelector): boolean;\n-\n-    /**\n-     * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n-     */\n-    someWhere(fn: (wrapper: this) => boolean): boolean;\n-\n-    /**\n-     * Returns whether or not all of the nodes in the wrapper match the provided selector.\n-     */\n-    every(selector: EnzymeSelector): boolean;\n-\n-    /**\n-     * Returns whether or not all of the nodes in the wrapper pass the provided predicate function.\n-     */\n-    everyWhere(fn: (wrapper: this) => boolean): boolean;\n-\n-    /**\n-     * Returns true if renderer returned null\n-     */\n-    isEmptyRender(): boolean;\n-\n-    /**\n-     * Renders the component to static markup and returns a Cheerio wrapper around the result.\n-     */\n-    render(): Cheerio;\n-\n-    /**\n-     * Returns the type of the current node of this wrapper. If it's a composite component, this will be the\n-     * component constructor. If it's native DOM node, it will be a string of the tag name.\n-     *\n-     * Note: can only be called on a wrapper of a single node.\n-     */\n-    type(): string | ComponentClass<P> | StatelessComponent<P>;\n-\n-    length: number;\n-  }\n-\n-  export type Parameters<T> = T extends (...args: infer A) => any ? A : never;\n-\n-  // tslint:disable-next-line no-empty-interface\n-  export interface ShallowWrapper<P = {}, S = {}, C = Component> extends CommonWrapper<P, S, C> {}\n-  export class ShallowWrapper<P = {}, S = {}, C = Component> {\n-    constructor(nodes: JSX.Element[] | JSX.Element, root?: ShallowWrapper<any, any>, options?: ShallowRendererProps);\n-    shallow(options?: ShallowRendererProps): ShallowWrapper<P, S>;\n-    unmount(): this;\n-\n-    /**\n-     * Find every node in the render tree that matches the provided selector.\n-     * @param selector The selector to match.\n-     */\n-    find<P2>(statelessComponent: StatelessComponent<P2>): ShallowWrapper<P2, never>;\n-    find<P2>(component: ComponentType<P2>): ShallowWrapper<P2, any>;\n-    find(props: EnzymePropSelector): ShallowWrapper<any, any>;\n-    find(selector: string): ShallowWrapper<HTMLAttributes, any>;\n-\n-    /**\n-     * Removes nodes in the current wrapper that do not match the provided selector.\n-     * @param selector The selector to match.\n-     */\n-    filter<P2>(statelessComponent: StatelessComponent<P2>): ShallowWrapper<P2, never>;\n-    filter<P2>(component: ComponentType<P2>): ShallowWrapper<P2, any>;\n-    filter(props: EnzymePropSelector | string): ShallowWrapper<P, S>;\n-\n-    /**\n-     * Finds every node in the render tree that returns true for the provided predicate function.\n-     */\n-    findWhere(predicate: (wrapper: ShallowWrapper<any, any>) => boolean): ShallowWrapper<any, any>;\n-\n-    /**\n-     * Returns a new wrapper with all of the children of the node(s) in the current wrapper. Optionally, a selector\n-     * can be provided and it will filter the children by this selector.\n-     */\n-    children<P2>(statelessComponent: StatelessComponent<P2>): ShallowWrapper<P2, never>;\n-    children<P2>(component: ComponentType<P2>): ShallowWrapper<P2, any>;\n-    children(selector: string): ShallowWrapper<HTMLAttributes, any>;\n-    children(props?: EnzymePropSelector): ShallowWrapper<any, any>;\n-\n-    /**\n-     * Returns a new wrapper with child at the specified index.\n-     */\n-    childAt(index: number): ShallowWrapper<any, any>;\n-    childAt<P2, S2>(index: number): ShallowWrapper<P2, S2>;\n-\n-    /**\n-     * Shallow render the one non-DOM child of the current wrapper, and return a wrapper around the result.\n-     * NOTE: can only be called on wrapper of a single non-DOM component element node.\n-     */\n-    dive<C2 extends Component, P2 = C2['props'], S2 = C2['state']>(\n-      options?: ShallowRendererProps\n-    ): ShallowWrapper<P2, S2, C2>;\n-    dive<P2, S2>(options?: ShallowRendererProps): ShallowWrapper<P2, S2>;\n-    dive<P2, S2, C2>(options?: ShallowRendererProps): ShallowWrapper<P2, S2, C2>;\n-\n-    /**\n-     * Strips out all the not host-nodes from the list of nodes\n-     *\n-     * This method is useful if you want to check for the presence of host nodes\n-     * (actually rendered HTML elements) ignoring the React nodes.\n-     */\n-    hostNodes(): ShallowWrapper<HTMLAttributes>;\n-\n-    /**\n-     * Returns a wrapper around all of the parents/ancestors of the wrapper. Does not include the node in the\n-     * current wrapper. Optionally, a selector can be provided and it will filter the parents by this selector.\n-     *\n-     * Note: can only be called on a wrapper of a single node.\n-     */\n-    parents<P2>(statelessComponent: StatelessComponent<P2>): ShallowWrapper<P2, never>;\n-    parents<P2>(component: ComponentType<P2>): ShallowWrapper<P2, any>;\n-    parents(selector: string): ShallowWrapper<HTMLAttributes, any>;\n-    parents(props?: EnzymePropSelector): ShallowWrapper<any, any>;\n-\n-    /**\n-     * Returns a wrapper of the first element that matches the selector by traversing up through the current node's\n-     * ancestors in the tree, starting with itself.\n-     *\n-     * Note: can only be called on a wrapper of a single node.\n-     */\n-    closest<P2>(statelessComponent: StatelessComponent<P2>): ShallowWrapper<P2, never>;\n-    closest<P2>(component: ComponentType<P2>): ShallowWrapper<P2, any>;\n-    closest(props: EnzymePropSelector): ShallowWrapper<any, any>;\n-    closest(selector: string): ShallowWrapper<HTMLAttributes, any>;\n-\n-    /**\n-     * Returns a wrapper with the direct parent of the node in the current wrapper.\n-     */\n-    parent(): ShallowWrapper<any, any>;\n-\n-    /**\n-     * Returns a wrapper of the node rendered by the provided render prop.\n-     */\n-    renderProp<PropName extends keyof P>(\n-      prop: PropName\n-    ): (...params: Parameters<P[PropName]>) => ShallowWrapper<any, never>;\n-\n-    /**\n-     * If a wrappingComponent was passed in options,\n-     * this methods returns a ShallowWrapper around the rendered wrappingComponent.\n-     * This ShallowWrapper can be used to update the wrappingComponent's props and state\n-     */\n-    getWrappingComponent: () => ShallowWrapper;\n-  }\n-\n-  // tslint:disable-next-line no-empty-interface\n-  export interface ReactWrapper<P = {}, S = {}, C = Component> extends CommonWrapper<P, S, C> {}\n-  export class ReactWrapper<P = {}, S = {}, C = Component> {\n-    constructor(nodes: JSX.Element | JSX.Element[], root?: ReactWrapper<any, any>, options?: MountRendererProps);\n-\n-    unmount(): this;\n-    mount(): this;\n-\n-    /**\n-     * Returns a wrapper of the node that matches the provided reference name.\n-     *\n-     * NOTE: can only be called on a wrapper instance that is also the root instance.\n-     */\n-    ref(refName: string): ReactWrapper<any, any>;\n-    ref<P2, S2>(refName: string): ReactWrapper<P2, S2>;\n-\n-    /**\n-     * Detaches the react tree from the DOM. Runs ReactDOM.unmountComponentAtNode() under the hood.\n-     *\n-     * This method will most commonly be used as a \"cleanup\" method if you decide to use the attachTo option in mount(node, options).\n-     *\n-     * The method is intentionally not \"fluent\" (in that it doesn't return this) because you should not be doing anything with this wrapper after this method is called.\n-     *\n-     * Using the attachTo is not generally recommended unless it is absolutely necessary to test something.\n-     * It is your responsibility to clean up after yourself at the end of the test if you do decide to use it, though.\n-     */\n-    detach(): void;\n-\n-    /**\n-     * Strips out all the not host-nodes from the list of nodes\n-     *\n-     * This method is useful if you want to check for the presence of host nodes\n-     * (actually rendered HTML elements) ignoring the React nodes.\n-     */\n-    hostNodes(): ReactWrapper<HTMLAttributes>;\n-\n-    /**\n-     * Find every node in the render tree that matches the provided selector.\n-     * @param selector The selector to match.\n-     */\n-    find<P2>(statelessComponent: StatelessComponent<P2>): ReactWrapper<P2, never>;\n-    find<P2>(component: ComponentType<P2>): ReactWrapper<P2, any>;\n-    find(props: EnzymePropSelector): ReactWrapper<any, any>;\n-    find(selector: string): ReactWrapper<HTMLAttributes, any>;\n-\n-    /**\n-     * Finds every node in the render tree that returns true for the provided predicate function.\n-     */\n-    findWhere(predicate: (wrapper: ReactWrapper<any, any>) => boolean): ReactWrapper<any, any>;\n-\n-    /**\n-     * Removes nodes in the current wrapper that do not match the provided selector.\n-     * @param selector The selector to match.\n-     */\n-    filter<P2>(statelessComponent: StatelessComponent<P2>): ReactWrapper<P2, never>;\n-    filter<P2>(component: ComponentType<P2>): ReactWrapper<P2, any>;\n-    filter(props: EnzymePropSelector | string): ReactWrapper<P, S>;\n-\n-    /**\n-     * Returns a new wrapper with all of the children of the node(s) in the current wrapper. Optionally, a selector\n-     * can be provided and it will filter the children by this selector.\n-     */\n-    children<P2>(statelessComponent: StatelessComponent<P2>): ReactWrapper<P2, never>;\n-    children<P2>(component: ComponentType<P2>): ReactWrapper<P2, any>;\n-    children(selector: string): ReactWrapper<HTMLAttributes, any>;\n-    children(props?: EnzymePropSelector): ReactWrapper<any, any>;\n-\n-    /**\n-     * Returns a new wrapper with child at the specified index.\n-     */\n-    childAt(index: number): ReactWrapper<any, any>;\n-    childAt<P2, S2>(index: number): ReactWrapper<P2, S2>;\n-\n-    /**\n-     * Returns a wrapper around all of the parents/ancestors of the wrapper. Does not include the node in the\n-     * current wrapper. Optionally, a selector can be provided and it will filter the parents by this selector.\n-     *\n-     * Note: can only be called on a wrapper of a single node.\n-     */\n-    parents<P2>(statelessComponent: StatelessComponent<P2>): ReactWrapper<P2, never>;\n-    parents<P2>(component: ComponentType<P2>): ReactWrapper<P2, any>;\n-    parents(selector: string): ReactWrapper<HTMLAttributes, any>;\n-    parents(props?: EnzymePropSelector): ReactWrapper<any, any>;\n-\n-    /**\n-     * Returns a wrapper of the first element that matches the selector by traversing up through the current node's\n-     * ancestors in the tree, starting with itself.\n-     *\n-     * Note: can only be called on a wrapper of a single node.\n-     */\n-    closest<P2>(statelessComponent: StatelessComponent<P2>): ReactWrapper<P2, never>;\n-    closest<P2>(component: ComponentType<P2>): ReactWrapper<P2, any>;\n-    closest(props: EnzymePropSelector): ReactWrapper<any, any>;\n-    closest(selector: string): ReactWrapper<HTMLAttributes, any>;\n-\n-    /**\n-     * Returns a wrapper with the direct parent of the node in the current wrapper.\n-     */\n-    parent(): ReactWrapper<any, any>;\n-  }\n-\n-  export interface Lifecycles {\n-    componentDidUpdate?: {\n-      onSetState: boolean;\n-      prevContext: boolean;\n-    };\n-    getDerivedStateFromProps?: { hasShouldComponentUpdateBug: boolean } | boolean;\n-    getChildContext?: {\n-      calledByRenderer: boolean;\n-      [key: string]: any;\n-    };\n-    setState?: any;\n-    // TODO Maybe some life cycle are missing\n-    [lifecycleName: string]: any;\n-  }\n-\n-  export interface ShallowRendererProps {\n-    // See https://github.com/airbnb/enzyme/blob/enzyme@3.10.0/docs/api/shallow.md#arguments\n-    /**\n-     * If set to true, componentDidMount is not called on the component, and componentDidUpdate is not called after\n-     * setProps and setContext. Default to false.\n-     */\n-    disableLifecycleMethods?: boolean;\n-    /**\n-     * Enable experimental support for full react lifecycle methods\n-     */\n-    lifecycleExperimental?: boolean;\n-    /**\n-     * Context to be passed into the component\n-     */\n-    context?: any;\n-    /**\n-     * The legacy enableComponentDidUpdateOnSetState option should be matched by\n-     * `lifecycles: { componentDidUpdate: { onSetState: true } }`, for compatibility\n-     */\n-    enableComponentDidUpdateOnSetState?: boolean;\n-    /**\n-     * the legacy supportPrevContextArgumentOfComponentDidUpdate option should be matched by\n-     * `lifecycles: { componentDidUpdate: { prevContext: true } }`, for compatibility\n-     */\n-    supportPrevContextArgumentOfComponentDidUpdate?: boolean;\n-    lifecycles?: Lifecycles;\n-    /**\n-     * A component that will render as a parent of the node.\n-     * It can be used to provide context to the node, among other things.\n-     * See https://airbnb.io/enzyme/docs/api/ShallowWrapper/getWrappingComponent.html\n-     * Note: wrappingComponent must render its children.\n-     */\n-    wrappingComponent?: ComponentType<any>;\n-    /**\n-     * Initial props to pass to the wrappingComponent if it is specified.\n-     */\n-    wrappingComponentProps?: any;\n-    /**\n-     * If set to true, when rendering Suspense enzyme will replace all the lazy components in children\n-     * with fallback element prop. Otherwise it won't handle fallback of lazy component.\n-     * Default to true. Note: not supported in React < 16.6.\n-     */\n-    suspenseFallback?: boolean;\n-    adapter?: EnzymeAdapter;\n-    /* TODO what are these doing??? */\n-    attachTo?: any;\n-    hydrateIn?: any;\n-    PROVIDER_VALUES?: any;\n-  }\n-\n-  export interface MountRendererProps {\n-    /**\n-     * Context to be passed into the component\n-     */\n-    context?: {};\n-    /**\n-     * DOM Element to attach the component to\n-     */\n-    attachTo?: HTMLElement | null;\n-    /**\n-     * Merged contextTypes for all children of the wrapper\n-     */\n-    childContextTypes?: {};\n-  }\n-\n-  /**\n-   * Shallow rendering is useful to constrain yourself to testing a component as a unit, and to ensure that\n-   * your tests aren't indirectly asserting on behavior of child components.\n-   */\n-  export function shallow<C extends Component, P = C['props'], S = C['state']>(\n-    node: ReactElement<P>,\n-    options?: ShallowRendererProps\n-  ): ShallowWrapper<P, S, C>;\n-  export function shallow<P>(node: ReactElement<P>, options?: ShallowRendererProps): ShallowWrapper<P, any>;\n-  export function shallow<P, S>(node: ReactElement<P>, options?: ShallowRendererProps): ShallowWrapper<P, S>;\n-\n-  /**\n-   * Mounts and renders a react component into the document and provides a testing wrapper around it.\n-   */\n-  export function mount<C extends Component, P = C['props'], S = C['state']>(\n-    node: ReactElement<P>,\n-    options?: MountRendererProps\n-  ): ReactWrapper<P, S, C>;\n-  export function mount<P>(node: ReactElement<P>, options?: MountRendererProps): ReactWrapper<P, any>;\n-  export function mount<P, S>(node: ReactElement<P>, options?: MountRendererProps): ReactWrapper<P, S>;\n-\n-  /**\n-   * Render react components to static HTML and analyze the resulting HTML structure.\n-   */\n-  export function render<P, S>(node: ReactElement<P>, options?: any): Cheerio;\n-\n-  // See https://github.com/airbnb/enzyme/blob/v3.10.0/packages/enzyme/src/EnzymeAdapter.js\n-  export class EnzymeAdapter {\n-    wrapWithWrappingComponent?: (node: ReactElement, options?: ShallowRendererProps) => any;\n-  }\n-\n-  /**\n-   * Configure enzyme to use the correct adapter for the react version\n-   * This is enabling the Enzyme configuration with adapters in TS\n-   */\n-  export function configure(options: {\n-    adapter: EnzymeAdapter;\n-    // See https://github.com/airbnb/enzyme/blob/enzyme@3.10.0/docs/guides/migration-from-2-to-3.md#lifecycle-methods\n-    // Actually, `{adapter:} & Pick<ShallowRendererProps,\"disableLifecycleMethods\">` is more precise. However,\n-    // in that case jsdoc won't be shown\n-    /**\n-     * If set to true, componentDidMount is not called on the component, and componentDidUpdate is not called after\n-     * setProps and setContext. Default to false.\n-     */\n-    disableLifecycleMethods?: boolean;\n-  }): void;\n-}"
    },
    {
      "sha": "5b6e14dcb99d5e6aec148ace6c4bf5fdd8f1f826",
      "filename": "frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.scss",
      "status": "modified",
      "additions": 15,
      "deletions": 5,
      "changes": 20,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.scss",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.scss",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.scss?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -8,7 +8,7 @@\n .auth-panel-email-login-form__input,\n .auth-panel-email-login-form__token-input {\n   width: 12rem;\n-  margin: 0.15rem;\n+  margin: 2px;\n }\n \n .auth-panel-email-login-form__token-input {\n@@ -28,7 +28,7 @@\n }\n \n .auth-panel-email-login-form__submit {\n-  margin: 0.3rem 0.15rem 0.15rem;\n+  margin: 0.3rem 2px 2px;\n }\n \n .auth-panel-email-login-form__back-button {\n@@ -44,8 +44,18 @@\n }\n \n .auth-panel-email-login-form__error {\n-  color: #9a0000;\n-  text-align: center;\n-  margin-top: 1em;\n+  margin: 4px 2px;\n+  padding: 6px 8px;\n   font-weight: normal;\n+  line-height: 1.2;\n+}\n+\n+.auth-panel-email-login-form_theme_dark .auth-panel-email-login-form__error {\n+  background: #672323;\n+  color: #f98989;\n+}\n+\n+.auth-panel-email-login-form_theme_light .auth-panel-email-login-form__error {\n+  background: #ffd7d7;\n+  color: #9a0000;\n }"
    },
    {
      "sha": "7cebf6d28bb9abd0a5b4485433c08979be45005c",
      "filename": "frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.test.tsx",
      "status": "modified",
      "additions": 66,
      "deletions": 18,
      "changes": 84,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.test.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.test.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.test.tsx?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -4,13 +4,23 @@ import { mount } from 'enzyme';\n import { EmailLoginForm, Props, State } from './auth-panel__email-login-form';\n import { User } from '@app/common/types';\n import { sleep } from '@app/utils/sleep';\n+import { validToken } from '@app/testUtils/mocks/jwt';\n+\n+jest.mock('@app/utils/jwt', () => ({\n+  isJwtExpired: jest\n+    .fn()\n+    .mockImplementationOnce(() => false)\n+    .mockImplementationOnce(() => true),\n+}));\n \n describe('EmailLoginForm', () => {\n+  const testUser = ({} as any) as User;\n+  const onSuccess = jest.fn(async () => {});\n+  const onSignIn = jest.fn(async () => testUser);\n+\n   it('works', async () => {\n-    const testUser = ({} as any) as User;\n     const sendEmailVerification = jest.fn(async () => {});\n-    const onSignIn = jest.fn(async () => testUser);\n-    const onSuccess = jest.fn(async () => {});\n+\n     const el = mount<Props, State>(\n       <EmailLoginForm\n         sendEmailVerification={sendEmailVerification}\n@@ -19,32 +29,70 @@ describe('EmailLoginForm', () => {\n         theme=\"light\"\n       />\n     );\n+\n     await new Promise(resolve =>\n-      el.setState(\n-        {\n-          usernameValue: 'someone',\n-          addressValue: 'someone@example.com',\n-        } as State,\n-        resolve\n-      )\n+      el.setState({ usernameValue: 'someone', addressValue: 'someone@example.com' } as State, resolve)\n     );\n+\n     el.find('form').simulate('submit');\n     await sleep(100);\n     expect(sendEmailVerification).toBeCalledWith('someone', 'someone@example.com');\n     expect(el.state().verificationSent).toBe(true);\n \n-    await new Promise(resolve =>\n-      el.setState(\n-        {\n-          tokenValue: 'abcd',\n-        } as State,\n-        resolve\n-      )\n-    );\n+    await new Promise(resolve => el.setState({ tokenValue: 'abcd' } as State, resolve));\n \n     el.find('form').simulate('submit');\n     await sleep(100);\n     expect(onSignIn).toBeCalledWith('abcd');\n     expect(onSuccess).toBeCalledWith(testUser);\n   });\n+\n+  it('should send form by pasting token', async () => {\n+    const sendEmailVerification = jest.fn(async () => {});\n+    const onSignIn = jest.fn(async () => testUser);\n+\n+    const wrapper = mount<Props, State>(\n+      <EmailLoginForm\n+        sendEmailVerification={sendEmailVerification}\n+        onSignIn={onSignIn}\n+        onSuccess={onSuccess}\n+        theme=\"light\"\n+      />\n+    );\n+    await new Promise(resolve =>\n+      wrapper.setState({ usernameValue: 'someone', addressValue: 'someone@example.com' } as State, resolve)\n+    );\n+    wrapper.find('form').simulate('submit');\n+    await sleep(100);\n+    wrapper.update();\n+\n+    wrapper.find('textarea').getDOMNode<HTMLTextAreaElement>().value = validToken;\n+    wrapper.find('textarea').simulate('input');\n+\n+    expect(onSignIn).toBeCalledWith(validToken);\n+  });\n+\n+  it('should show error \"Token is expired\" on paste', async () => {\n+    const sendEmailVerification = jest.fn(async () => {});\n+    const onSignIn = jest.fn(async () => testUser);\n+\n+    const wrapper = mount<Props, State>(\n+      <EmailLoginForm\n+        sendEmailVerification={sendEmailVerification}\n+        onSignIn={onSignIn}\n+        onSuccess={onSuccess}\n+        theme=\"light\"\n+      />\n+    );\n+    await new Promise(resolve =>\n+      wrapper.setState({ usernameValue: 'someone', addressValue: 'someone@example.com' } as State, resolve)\n+    );\n+    wrapper.find('form').simulate('submit');\n+    await sleep(100);\n+    wrapper.update();\n+    wrapper.find('textarea').getDOMNode<HTMLTextAreaElement>().value = validToken;\n+    wrapper.find('textarea').simulate('input');\n+\n+    expect(wrapper.find('.auth-panel-email-login-form__error').text()).toBe('Token is expired');\n+  });\n });"
    },
    {
      "sha": "598c6c934a5bdc6d88403631118e6eeb65f8595b",
      "filename": "frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.tsx",
      "status": "modified",
      "additions": 41,
      "deletions": 38,
      "changes": 79,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/auth-panel/__email-login-form/auth-panel__email-login-form.tsx?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -11,6 +11,7 @@ import { sleep } from '@app/utils/sleep';\n import TextareaAutosize from '@app/components/comment-form/textarea-autosize';\n import { Input } from '@app/components/input';\n import { Button } from '@app/components/button';\n+import { isJwtExpired } from '@app/utils/jwt';\n \n const mapStateToProps = () => ({\n   sendEmailVerification: sendEmailVerificationRequest,\n@@ -41,37 +42,25 @@ export class EmailLoginForm extends Component<Props, State> {\n   usernameInputRef = createRef<HTMLInputElement>();\n   tokenRef = createRef<TextareaAutosize>();\n \n-  constructor(props: Props) {\n-    super(props);\n+  state = {\n+    usernameValue: '',\n+    addressValue: '',\n+    tokenValue: '',\n+    verificationSent: false,\n+    loading: false,\n+    error: null,\n+  };\n \n-    this.state = {\n-      usernameValue: '',\n-      addressValue: '',\n-      tokenValue: '',\n-      verificationSent: false,\n-      loading: false,\n-      error: null,\n-    };\n-\n-    this.focus = this.focus.bind(this);\n-    this.onVerificationSubmit = this.onVerificationSubmit.bind(this);\n-    this.onSubmit = this.onSubmit.bind(this);\n-    this.onUsernameChange = this.onUsernameChange.bind(this);\n-    this.onAddressChange = this.onAddressChange.bind(this);\n-    this.onTokenChange = this.onTokenChange.bind(this);\n-    this.goBack = this.goBack.bind(this);\n-  }\n-\n-  async focus() {\n+  focus = async () => {\n     await sleep(100);\n     if (this.usernameInputRef.current) {\n       this.usernameInputRef.current.focus();\n       return;\n     }\n     this.tokenRef.current && this.tokenRef.current.textareaRef && this.tokenRef.current.textareaRef.select();\n-  }\n+  };\n \n-  async onVerificationSubmit(e: Event) {\n+  onVerificationSubmit = async (e: Event) => {\n     e.preventDefault();\n     this.setState({ loading: true, error: null });\n     try {\n@@ -85,13 +74,12 @@ export class EmailLoginForm extends Component<Props, State> {\n     } finally {\n       this.setState({ loading: false });\n     }\n-  }\n+  };\n \n-  async onSubmit(e: Event) {\n-    e.preventDefault();\n+  async sendForm(token: string = this.state.tokenValue) {\n     try {\n       this.setState({ loading: true });\n-      const user = await this.props.onSignIn(this.state.tokenValue);\n+      const user = await this.props.onSignIn(token);\n       if (!user) {\n         this.setState({ error: 'No user was found' });\n         return;\n@@ -105,19 +93,34 @@ export class EmailLoginForm extends Component<Props, State> {\n     }\n   }\n \n-  onUsernameChange(e: Event) {\n+  onSubmit = async (e: Event) => {\n+    e.preventDefault();\n+    this.sendForm();\n+  };\n+\n+  onUsernameChange = (e: Event) => {\n     this.setState({ error: null, usernameValue: (e.target as HTMLInputElement).value });\n-  }\n+  };\n \n-  onAddressChange(e: Event) {\n+  onAddressChange = (e: Event) => {\n     this.setState({ error: null, addressValue: (e.target as HTMLInputElement).value });\n-  }\n+  };\n \n-  onTokenChange(e: Event) {\n-    this.setState({ error: null, tokenValue: (e.target as HTMLInputElement).value });\n-  }\n+  onTokenChange = (e: Event) => {\n+    const { value } = e.target as HTMLInputElement;\n+\n+    this.setState({ error: null, tokenValue: value });\n+\n+    try {\n+      if (value.length > 0 && isJwtExpired(value)) {\n+        this.setState({ error: 'Token is expired' });\n+        return;\n+      }\n+      this.sendForm(value);\n+    } catch (e) {}\n+  };\n \n-  async goBack() {\n+  goBack = async () => {\n     // Wait for finding back button in DOM by dropbox\n     // It prevents dropdown from closing, because if dropdown doesn't find clicked element it closes\n     await sleep(0);\n@@ -134,7 +137,7 @@ export class EmailLoginForm extends Component<Props, State> {\n     if (this.usernameInputRef.current) {\n       this.usernameInputRef.current.focus();\n     }\n-  }\n+  };\n \n   getForm1InvalidReason(): string | null {\n     if (this.state.loading) return 'Loading...';\n@@ -179,6 +182,7 @@ export class EmailLoginForm extends Component<Props, State> {\n             value={this.state.addressValue}\n             onInput={this.onAddressChange}\n           />\n+          {this.state.error && <div className=\"auth-panel-email-login-form__error\">{this.state.error}</div>}\n           <Button\n             mix=\"auth-panel-email-login-form__submit\"\n             kind=\"primary\"\n@@ -189,7 +193,6 @@ export class EmailLoginForm extends Component<Props, State> {\n           >\n             Send Verification\n           </Button>\n-          {this.state.error && <div className=\"auth-panel-email-login-form__error\">{this.state.error}</div>}\n         </form>\n       );\n \n@@ -210,6 +213,7 @@ export class EmailLoginForm extends Component<Props, State> {\n           spellcheck={false}\n           autocomplete=\"off\"\n         />\n+        {this.state.error && <div className=\"auth-panel-email-login-form__error\">{this.state.error}</div>}\n         <Button\n           mix=\"auth-panel-email-login-form__submit\"\n           type=\"submit\"\n@@ -220,7 +224,6 @@ export class EmailLoginForm extends Component<Props, State> {\n         >\n           Confirm\n         </Button>\n-        {this.state.error && <div className=\"auth-panel-email-login-form__error\">{this.state.error}</div>}\n       </form>\n     );\n   }"
    },
    {
      "sha": "78a760dd5d3e53fe1318259d808b78d8cf6c7b32",
      "filename": "frontend/app/components/comment-form/__subscribe-by-email/comment-form__subscribe-by-email.test.tsx",
      "status": "modified",
      "additions": 33,
      "deletions": 2,
      "changes": 35,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/comment-form/__subscribe-by-email/comment-form__subscribe-by-email.test.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/comment-form/__subscribe-by-email/comment-form__subscribe-by-email.test.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/comment-form/__subscribe-by-email/comment-form__subscribe-by-email.test.tsx?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -8,6 +8,7 @@ import createMockStore from 'redux-mock-store';\n \n import '@app/testUtils/mockApi';\n import { user, anonymousUser } from '@app/testUtils/mocks/user';\n+import { validToken } from '@app/testUtils/mocks/jwt';\n \n import * as api from '@app/common/api';\n import { sleep } from '@app/utils/sleep';\n@@ -32,7 +33,11 @@ const makeInputEvent = (value: string) => ({\n   },\n });\n \n-describe('<SubscribeByEmail', () => {\n+jest.mock('@app/utils/jwt', () => ({\n+  isJwtExpired: jest.fn(() => false),\n+}));\n+\n+describe('<SubscribeByEmail/>', () => {\n   const createWrapper = (store: ReturnType<typeof mockStore> = mockStore(initialStore)) =>\n     mount(\n       <Provider store={store}>\n@@ -59,7 +64,7 @@ describe('<SubscribeByEmail', () => {\n   });\n });\n \n-describe('<SubscribeByEmailForm>', () => {\n+describe('<SubscribeByEmailForm/>', () => {\n   const createWrapper = (store: ReturnType<typeof mockStore> = mockStore(initialStore)) =>\n     mount(\n       <Provider store={store}>\n@@ -128,6 +133,32 @@ describe('<SubscribeByEmailForm>', () => {\n     expect(wrapper.find(Button).prop('children')).toEqual('Unsubscribe');\n   });\n \n+  it('should send form by paste valid token', async () => {\n+    const wrapper = createWrapper();\n+    const onInputEmail = wrapper.find(Input).prop('onInput');\n+    const form = wrapper.find('form');\n+\n+    expect(onInputEmail).toBeFunction();\n+\n+    act(() => onInputEmail(makeInputEvent('some@email.com')));\n+\n+    form.simulate('submit');\n+\n+    await sleep(0);\n+    wrapper.update();\n+\n+    const textarea = wrapper.find(TextareaAutosize);\n+    const onInputToken = textarea.prop('onInput') as (e: any) => void;\n+\n+    act(() => onInputToken(makeInputEvent(validToken)));\n+\n+    await sleep(0);\n+    wrapper.update();\n+\n+    expect(wrapper.text()).toStartWith('You have been subscribed on updates by email');\n+    expect(wrapper.find(Button).prop('children')).toEqual('Unsubscribe');\n+  });\n+\n   it('should pass throw unsubscribe process', async () => {\n     const store = mockStore({ ...initialStore, user: { email_subscription: true } });\n     const wrapper = createWrapper(store);"
    },
    {
      "sha": "fca39616759405e6191a8bb2fee8d27920642737",
      "filename": "frontend/app/components/comment-form/__subscribe-by-email/comment-form__subscribe-by-email.tsx",
      "status": "modified",
      "additions": 91,
      "deletions": 62,
      "changes": 153,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/comment-form/__subscribe-by-email/comment-form__subscribe-by-email.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/comment-form/__subscribe-by-email/comment-form__subscribe-by-email.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/comment-form/__subscribe-by-email/comment-form__subscribe-by-email.tsx?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -1,5 +1,5 @@\n /** @jsx createElement */\n-import { createElement, FunctionComponent } from 'preact';\n+import { createElement, FunctionComponent, Fragment } from 'preact';\n import { useState, useCallback, useEffect, useRef } from 'preact/hooks';\n import { useSelector, useDispatch } from 'react-redux';\n import b from 'bem-react-helper';\n@@ -22,6 +22,7 @@ import { Dropdown } from '@app/components/dropdown';\n import { Preloader } from '@app/components/preloader';\n import TextareaAutosize from '@app/components/comment-form/textarea-autosize';\n import { isUserAnonymous } from '@app/utils/isUserAnonymous';\n+import { isJwtExpired } from '@app/utils/jwt';\n \n const emailRegex = /[^@]+@[^.]+\\..+/;\n \n@@ -39,36 +40,40 @@ const renderEmailPart = (\n   emailAddress: string,\n   handleChangeEmail: (e: Event) => void,\n   emailAddressRef: ReturnType<typeof useRef>\n-) => [\n-  <div className=\"comment-form__subscribe-by-email__title\">Subscribe to replies</div>,\n-  <Input\n-    ref={emailAddressRef}\n-    mix=\"comment-form__subscribe-by-email__input\"\n-    placeholder=\"Email\"\n-    value={emailAddress}\n-    onInput={handleChangeEmail}\n-    disabled={loading}\n-  />,\n-];\n+) => (\n+  <Fragment>\n+    <div className=\"comment-form__subscribe-by-email__title\">Subscribe to replies</div>\n+    <Input\n+      ref={emailAddressRef}\n+      mix=\"comment-form__subscribe-by-email__input\"\n+      placeholder=\"Email\"\n+      value={emailAddress}\n+      onInput={handleChangeEmail}\n+      disabled={loading}\n+    />\n+  </Fragment>\n+);\n \n const renderTokenPart = (\n   loading: boolean,\n   token: string,\n   handleChangeToken: (e: Event) => void,\n   setEmailStep: () => void\n-) => [\n-  <Button kind=\"link\" mix=\"auth-panel-email-login-form__back-button\" {...getHandleClickProps(setEmailStep)}>\n-    Back\n-  </Button>,\n-  <TextareaAutosize\n-    className=\"comment-form__subscribe-by-email__token-input\"\n-    placeholder=\"Token\"\n-    autofocus\n-    onInput={handleChangeToken}\n-    disabled={loading}\n-    value={token}\n-  />,\n-];\n+) => (\n+  <Fragment>\n+    <Button kind=\"link\" mix=\"auth-panel-email-login-form__back-button\" {...getHandleClickProps(setEmailStep)}>\n+      Back\n+    </Button>\n+    <TextareaAutosize\n+      className=\"comment-form__subscribe-by-email__token-input\"\n+      placeholder=\"Token\"\n+      autofocus\n+      onInput={handleChangeToken}\n+      disabled={loading}\n+      value={token}\n+    />\n+  </Fragment>\n+);\n \n export const SubscribeByEmailForm: FunctionComponent = () => {\n   const theme = useTheme();\n@@ -87,62 +92,86 @@ export const SubscribeByEmailForm: FunctionComponent = () => {\n   const [loading, setLoading] = useState(false);\n   const [error, setError] = useState<string | null>(null);\n \n+  const sendForm = useCallback(\n+    async (currentToken: string = token) => {\n+      setLoading(true);\n+      setError(null);\n+\n+      try {\n+        switch (step) {\n+          case Step.Email:\n+            await emailVerificationForSubscribe(emailAddress);\n+            setToken('');\n+            setStep(Step.Token);\n+            break;\n+          case Step.Token:\n+            await emailConfirmationForSubscribe(currentToken);\n+            dispatch(setUserSubscribed(true));\n+            previousStep.current = Step.Token;\n+            setStep(Step.Subscribed);\n+            break;\n+          default:\n+            break;\n+        }\n+      } catch (e) {\n+        setError(extractErrorMessageFromResponse(e));\n+      } finally {\n+        setLoading(false);\n+      }\n+    },\n+    [setLoading, setError, setStep, step, emailAddress, token]\n+  );\n+\n   const handleChangeEmail = useCallback((e: Event) => {\n-    const value = (e.target as HTMLInputElement).value;\n+    const { value } = e.target as HTMLInputElement;\n \n     e.preventDefault();\n     setError(null);\n     setEmailAddress(value);\n   }, []);\n \n-  const handleChangeToken = useCallback((e: Event) => {\n-    const value = (e.target as HTMLInputElement).value;\n+  const handleChangeToken = useCallback(\n+    (e: Event) => {\n+      const { value } = e.target as HTMLInputElement;\n \n-    e.preventDefault();\n-    setError(null);\n-    setToken(value);\n-  }, []);\n+      e.preventDefault();\n+      setError(null);\n \n-  const handleSubmit = async (e: Event) => {\n-    e.preventDefault();\n-    setLoading(true);\n-    setError(null);\n+      try {\n+        if (value.length > 0 && isJwtExpired(value)) {\n+          setError('Token is expired');\n+        } else {\n+          sendForm(value);\n+        }\n+      } catch (e) {}\n \n-    try {\n-      switch (step) {\n-        case Step.Email:\n-          await emailVerificationForSubscribe(emailAddress);\n-          setStep(Step.Token);\n-          break;\n-        case Step.Token:\n-          await emailConfirmationForSubscribe(token);\n-          dispatch(setUserSubscribed(true));\n-          previousStep.current = Step.Token;\n-          setStep(Step.Subscribed);\n-          break;\n-        default:\n-          break;\n-      }\n-    } catch (e) {\n-      setError(extractErrorMessageFromResponse(e));\n-    } finally {\n-      setLoading(false);\n-    }\n-  };\n+      setToken(value);\n+    },\n+    [sendForm, setError, setToken]\n+  );\n+\n+  const handleSubmit = useCallback(\n+    async (e: Event) => {\n+      e.preventDefault();\n+      sendForm();\n+    },\n+    [sendForm]\n+  );\n \n   const isValidEmailAddress = emailRegex.test(emailAddress);\n \n+  const setEmailStep = useCallback(async () => {\n+    await sleep(0);\n+    setError(null);\n+    setStep(Step.Email);\n+  }, [setStep]);\n+\n   useEffect(() => {\n     if (emailAddressRef.current) {\n       emailAddressRef.current.focus();\n     }\n   }, []);\n \n-  const setEmailStep = useCallback(async () => {\n-    await sleep(0);\n-    setStep(Step.Email);\n-  }, [setStep]);\n-\n   /**\n    * It needs for dropdown closing by click on button\n    * More info below"
    },
    {
      "sha": "f8cfcc284c73afdfe5f65bce0aa2f64889b61b81",
      "filename": "frontend/app/components/comment/comment.test.tsx",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/comment/comment.test.tsx",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/components/comment/comment.test.tsx",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/components/comment/comment.test.tsx?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -1,6 +1,6 @@\n /** @jsx createElement */\n import { createElement } from 'preact';\n-import { mount, shallow, HTMLAttributes } from 'enzyme';\n+import { mount, shallow } from 'enzyme';\n import { Props, Comment } from './comment';\n import { User, Comment as CommentType, PostInfo } from '@app/common/types';\n import { sleep } from '@app/utils/sleep';\n@@ -277,7 +277,7 @@ describe('<Comment />', () => {\n         new Date(new Date(initTime).getTime() + 300 * 1000).getTime()\n       );\n \n-      component.setProps<Props & HTMLAttributes>({\n+      component.setProps({\n         data: { ...props.data, time: changedTime },\n       });\n "
    },
    {
      "sha": "2587559a9253189cc32fc4b3d468770cc5b2d7ad",
      "filename": "frontend/app/testUtils/mocks/jwt.ts",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/testUtils/mocks/jwt.ts",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/testUtils/mocks/jwt.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/testUtils/mocks/jwt.ts?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -0,0 +1,2 @@\n+export const validToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJyZW1hcmsiLCJleHAiOjE1Nzk5ODY5ODIsImlzcyI6InJlbWFyazQyIiwibmJmIjoxNTc5OTg1MTIyLCJoYW5kc2hha2UiOnsiaWQiOiJkZXZfdXNlcjo6YXNkQHgxMDEucHcifX0.SLXLOE0Z8HQb2JwAvLS9fdrghwf8ndpuEjDsZvVE9O4' as const;\n+export const invalidToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJyZW1hcmsiLCJleHAiOjE1Nzk5ODY5ODIsImlzcyI6InJlbWFyazQyIiwibmJmIjoxNTc5OTg1MTIyLCJoYW5kc2hha2UiOnsiaWQiOiJkZXZfdXNlcjo6YXNkQHgxM' as const;"
    },
    {
      "sha": "df7321c5fb720681baa894b116312a58fdf4e8f0",
      "filename": "frontend/app/utils/jwt.test.ts",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/utils/jwt.test.ts",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/utils/jwt.test.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/utils/jwt.test.ts?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -0,0 +1,46 @@\n+import { validToken, invalidToken } from '@app/testUtils/mocks/jwt';\n+import { parseJwt, isJwtExpired } from './jwt';\n+\n+describe('JWT', () => {\n+  describe('parseJWT', () => {\n+    it('should parse token', () => {\n+      expect(parseJwt(validToken)).toEqual({\n+        aud: 'remark',\n+        exp: 1579986982,\n+        handshake: {\n+          id: 'dev_user::asd@x101.pw',\n+        },\n+        iss: 'remark42',\n+        nbf: 1579985122,\n+      });\n+    });\n+\n+    it('should throw error', () => {\n+      expect.assertions(1);\n+      try {\n+        parseJwt(invalidToken);\n+      } catch (e) {\n+        expect(e.message).toBe('The string to be decoded contains invalid characters.');\n+      }\n+    });\n+  });\n+\n+  describe('isJwtExpired', () => {\n+    const now = jest\n+      .fn()\n+      .mockImplementationOnce(() => 1579986981 * 1000)\n+      .mockImplementationOnce(() => 1579986982 * 1000)\n+      .mockImplementationOnce(() => 1579986983 * 1000);\n+\n+    Object.defineProperty(window, 'Data', { value: { now } });\n+\n+    it('should be not expired', () => {\n+      expect(isJwtExpired(validToken)).toBe(true);\n+      expect(isJwtExpired(validToken)).toBe(true);\n+    });\n+\n+    it('should be expired', () => {\n+      expect(isJwtExpired(validToken)).toBe(true);\n+    });\n+  });\n+});"
    },
    {
      "sha": "f5a4b3967a5f794bcd8a58d055a84944bfa38944",
      "filename": "frontend/app/utils/jwt.ts",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/utils/jwt.ts",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/app/utils/jwt.ts",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/app/utils/jwt.ts?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -0,0 +1,18 @@\n+export const parseJwt = (token: string) => {\n+  const [, base64Url] = token.split('.');\n+  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n+  const jsonPayload = decodeURIComponent(\n+    atob(base64)\n+      .split('')\n+      .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n+      .join('')\n+  );\n+\n+  return JSON.parse(jsonPayload);\n+};\n+\n+export const isJwtExpired = (token: string) => {\n+  const { exp } = parseJwt(token);\n+\n+  return exp * 1000 < Date.now();\n+};"
    },
    {
      "sha": "ee8a14116f7c51d01e781bcccba507de4ae81590",
      "filename": "frontend/package-lock.json",
      "status": "modified",
      "additions": 103,
      "deletions": 8,
      "changes": 111,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/package-lock.json",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/package-lock.json",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/package-lock.json?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -1782,6 +1782,16 @@\n       \"integrity\": \"sha512-+NPqjXgyA02xTHKJDeDca9u8Zr42ts6jhdND4C3PrPeQ35RJa0dmfAedXW7a9K4N1QcBbuWI1nSfGK4r1eVFCQ==\",\n       \"dev\": true\n     },\n+    \"@types/enzyme\": {\n+      \"version\": \"3.10.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@types/enzyme/-/enzyme-3.10.4.tgz\",\n+      \"integrity\": \"sha512-P5XpxcIt9KK8QUH4al4ttfJfIHg6xmN9ZjyUzRSzAsmDYwRXLI05ng/flZOPXrEXmp8ZYiN8/tEXYK5KSOQk3w==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"@types/cheerio\": \"*\",\n+        \"@types/react\": \"*\"\n+      }\n+    },\n     \"@types/eslint-visitor-keys\": {\n       \"version\": \"1.0.0\",\n       \"resolved\": \"https://registry.npmjs.org/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz\",\n@@ -2526,14 +2536,99 @@\n       }\n     },\n     \"array.prototype.flatmap\": {\n-      \"version\": \"1.2.1\",\n-      \"resolved\": \"https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.2.1.tgz\",\n-      \"integrity\": \"sha512-i18e2APdsiezkcqDyZor78Pbfjfds3S94dG6dgIV2ZASJaUf1N0dz2tGdrmwrmlZuNUgxH+wz6Z0zYVH2c5xzQ==\",\n+      \"version\": \"1.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.2.3.tgz\",\n+      \"integrity\": \"sha512-OOEk+lkePcg+ODXIpvuU9PAryCikCJyo7GlDG1upleEpQRx6mzL9puEBkozQ5iAx20KV0l3DbyQwqciJtqe5Pg==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"define-properties\": \"^1.1.2\",\n-        \"es-abstract\": \"^1.10.0\",\n+        \"define-properties\": \"^1.1.3\",\n+        \"es-abstract\": \"^1.17.0-next.1\",\n         \"function-bind\": \"^1.1.1\"\n+      },\n+      \"dependencies\": {\n+        \"es-abstract\": {\n+          \"version\": \"1.17.4\",\n+          \"resolved\": \"https://registry.npmjs.org/es-abstract/-/es-abstract-1.17.4.tgz\",\n+          \"integrity\": \"sha512-Ae3um/gb8F0mui/jPL+QiqmglkUsaQf7FwBEHYIFkztkneosu9imhqHpBzQ3h1vit8t5iQ74t6PEVvphBZiuiQ==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"es-to-primitive\": \"^1.2.1\",\n+            \"function-bind\": \"^1.1.1\",\n+            \"has\": \"^1.0.3\",\n+            \"has-symbols\": \"^1.0.1\",\n+            \"is-callable\": \"^1.1.5\",\n+            \"is-regex\": \"^1.0.5\",\n+            \"object-inspect\": \"^1.7.0\",\n+            \"object-keys\": \"^1.1.1\",\n+            \"object.assign\": \"^4.1.0\",\n+            \"string.prototype.trimleft\": \"^2.1.1\",\n+            \"string.prototype.trimright\": \"^2.1.1\"\n+          }\n+        },\n+        \"es-to-primitive\": {\n+          \"version\": \"1.2.1\",\n+          \"resolved\": \"https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.2.1.tgz\",\n+          \"integrity\": \"sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"is-callable\": \"^1.1.4\",\n+            \"is-date-object\": \"^1.0.1\",\n+            \"is-symbol\": \"^1.0.2\"\n+          }\n+        },\n+        \"has-symbols\": {\n+          \"version\": \"1.0.1\",\n+          \"resolved\": \"https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.1.tgz\",\n+          \"integrity\": \"sha512-PLcsoqu++dmEIZB+6totNFKq/7Do+Z0u4oT0zKOJNl3lYK6vGwwu2hjHs+68OEZbTjiUE9bgOABXbP/GvrS0Kg==\",\n+          \"dev\": true\n+        },\n+        \"is-callable\": {\n+          \"version\": \"1.1.5\",\n+          \"resolved\": \"https://registry.npmjs.org/is-callable/-/is-callable-1.1.5.tgz\",\n+          \"integrity\": \"sha512-ESKv5sMCJB2jnHTWZ3O5itG+O128Hsus4K4Qh1h2/cgn2vbgnLSVqfV46AeJA9D5EeeLa9w81KUXMtn34zhX+Q==\",\n+          \"dev\": true\n+        },\n+        \"is-regex\": {\n+          \"version\": \"1.0.5\",\n+          \"resolved\": \"https://registry.npmjs.org/is-regex/-/is-regex-1.0.5.tgz\",\n+          \"integrity\": \"sha512-vlKW17SNq44owv5AQR3Cq0bQPEb8+kF3UKZ2fiZNOWtztYE5i0CzCZxFDwO58qAOWtxdBRVO/V5Qin1wjCqFYQ==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"has\": \"^1.0.3\"\n+          }\n+        },\n+        \"object-inspect\": {\n+          \"version\": \"1.7.0\",\n+          \"resolved\": \"https://registry.npmjs.org/object-inspect/-/object-inspect-1.7.0.tgz\",\n+          \"integrity\": \"sha512-a7pEHdh1xKIAgTySUGgLMx/xwDZskN1Ud6egYYN3EdRW4ZMPNEDUTF+hwy2LUC+Bl+SyLXANnwz/jyh/qutKUw==\",\n+          \"dev\": true\n+        },\n+        \"object-keys\": {\n+          \"version\": \"1.1.1\",\n+          \"resolved\": \"https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz\",\n+          \"integrity\": \"sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==\",\n+          \"dev\": true\n+        },\n+        \"string.prototype.trimleft\": {\n+          \"version\": \"2.1.1\",\n+          \"resolved\": \"https://registry.npmjs.org/string.prototype.trimleft/-/string.prototype.trimleft-2.1.1.tgz\",\n+          \"integrity\": \"sha512-iu2AGd3PuP5Rp7x2kEZCrB2Nf41ehzh+goo8TV7z8/XDBbsvc6HQIlUl9RjkZ4oyrW1XM5UwlGl1oVEaDjg6Ag==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"define-properties\": \"^1.1.3\",\n+            \"function-bind\": \"^1.1.1\"\n+          }\n+        },\n+        \"string.prototype.trimright\": {\n+          \"version\": \"2.1.1\",\n+          \"resolved\": \"https://registry.npmjs.org/string.prototype.trimright/-/string.prototype.trimright-2.1.1.tgz\",\n+          \"integrity\": \"sha512-qFvWL3/+QIgZXVmJBfpHmxLB7xsUXz6HsUmP8+5dRaC3Q7oKUv9Vo6aMCRZC1smrtyECFsIT30PqBJ1gTjAs+g==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"define-properties\": \"^1.1.3\",\n+            \"function-bind\": \"^1.1.1\"\n+          }\n+        }\n       }\n     },\n     \"asn1\": {\n@@ -4873,9 +4968,9 @@\n       }\n     },\n     \"enzyme-adapter-preact-pure\": {\n-      \"version\": \"2.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/enzyme-adapter-preact-pure/-/enzyme-adapter-preact-pure-2.1.0.tgz\",\n-      \"integrity\": \"sha512-C1kcVqqA9GuSIFTUdX3aXjLoTrr0Z6aUn6DZqFOBhjGtHXOXrCycwsdPaF0x+/y1286/LaZxQvi8iBaMay4/Ew==\",\n+      \"version\": \"2.2.0\",\n+      \"resolved\": \"https://registry.npmjs.org/enzyme-adapter-preact-pure/-/enzyme-adapter-preact-pure-2.2.0.tgz\",\n+      \"integrity\": \"sha512-wb483yuBIk5CV+E9ardATYQxVywwWRo+Z3IaIECGTOLjWQYiv9NMSJGp0qXPKGp/zj9qS9yP1/qHEE4k9sEeYA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"array.prototype.flatmap\": \"^1.2.1\","
    },
    {
      "sha": "4180b75548ed9f6763c1705ae29e38a7ecd803a8",
      "filename": "frontend/package.json",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/umputun/remark/blob/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/package.json",
      "raw_url": "https://github.com/umputun/remark/raw/d22e364d1b0239b96615fed37d5396ddc327295b/frontend/package.json",
      "contents_url": "https://api.github.com/repos/umputun/remark/contents/frontend/package.json?ref=d22e364d1b0239b96615fed37d5396ddc327295b",
      "patch": "@@ -35,6 +35,7 @@\n     \"@babel/preset-react\": \"^7.6.3\",\n     \"@types/cheerio\": \"^0.22.13\",\n     \"@types/core-js\": \"^2.5.2\",\n+    \"@types/enzyme\": \"^3.10.4\",\n     \"@types/fetch-mock\": \"^7.3.1\",\n     \"@types/jest\": \"^24.0.20\",\n     \"@types/lodash\": \"^4.14.144\",\n@@ -53,7 +54,7 @@\n     \"document-register-element\": \"^1.14.3\",\n     \"dotenv\": \"^8.2.0\",\n     \"enzyme\": \"^3.10.0\",\n-    \"enzyme-adapter-preact-pure\": \"^2.1.0\",\n+    \"enzyme-adapter-preact-pure\": \"^2.2.0\",\n     \"es-check\": \"^5.1.0\",\n     \"eslint\": \"^6.6.0\",\n     \"eslint-config-prettier\": \"^6.5.0\","
    }
  ]
}
