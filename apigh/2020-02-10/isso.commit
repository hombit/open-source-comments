{
  "sha": "1633d9261ec9877358cda7acc7d78ecb9b09562c",
  "node_id": "MDY6Q29tbWl0NjI2ODQxOToxNjMzZDkyNjFlYzk4NzczNThjZGE3YWNjN2Q3OGVjYjliMDk1NjJj",
  "commit": {
    "author": {
      "name": "Facundo Batista",
      "email": "facundo@taniquetil.com.ar",
      "date": "2020-01-26T14:14:15Z"
    },
    "committer": {
      "name": "Jelmer VernooÄ³",
      "email": "jelmer@jelmer.uk",
      "date": "2020-01-26T14:14:15Z"
    },
    "message": "New 'latest' endpoint to serve latest comments. Fixes #556. (#610)\n\nNew 'latest' endpoint to serve latest comments.",
    "tree": {
      "sha": "d9c69da3b3901d50c921f02c1420877496aa35ab",
      "url": "https://api.github.com/repos/posativ/isso/git/trees/d9c69da3b3901d50c921f02c1420877496aa35ab"
    },
    "url": "https://api.github.com/repos/posativ/isso/git/commits/1633d9261ec9877358cda7acc7d78ecb9b09562c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/posativ/isso/commits/1633d9261ec9877358cda7acc7d78ecb9b09562c",
  "html_url": "https://github.com/posativ/isso/commit/1633d9261ec9877358cda7acc7d78ecb9b09562c",
  "comments_url": "https://api.github.com/repos/posativ/isso/commits/1633d9261ec9877358cda7acc7d78ecb9b09562c/comments",
  "author": {
    "login": "facundobatista",
    "id": 184060,
    "node_id": "MDQ6VXNlcjE4NDA2MA==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/184060?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/facundobatista",
    "html_url": "https://github.com/facundobatista",
    "followers_url": "https://api.github.com/users/facundobatista/followers",
    "following_url": "https://api.github.com/users/facundobatista/following{/other_user}",
    "gists_url": "https://api.github.com/users/facundobatista/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/facundobatista/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/facundobatista/subscriptions",
    "organizations_url": "https://api.github.com/users/facundobatista/orgs",
    "repos_url": "https://api.github.com/users/facundobatista/repos",
    "events_url": "https://api.github.com/users/facundobatista/events{/privacy}",
    "received_events_url": "https://api.github.com/users/facundobatista/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jelmer",
    "id": 49032,
    "node_id": "MDQ6VXNlcjQ5MDMy",
    "avatar_url": "https://avatars3.githubusercontent.com/u/49032?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jelmer",
    "html_url": "https://github.com/jelmer",
    "followers_url": "https://api.github.com/users/jelmer/followers",
    "following_url": "https://api.github.com/users/jelmer/following{/other_user}",
    "gists_url": "https://api.github.com/users/jelmer/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jelmer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jelmer/subscriptions",
    "organizations_url": "https://api.github.com/users/jelmer/orgs",
    "repos_url": "https://api.github.com/users/jelmer/repos",
    "events_url": "https://api.github.com/users/jelmer/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jelmer/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1de758887a6589cf7afa6d0f3b187b1ec73ee69a",
      "url": "https://api.github.com/repos/posativ/isso/commits/1de758887a6589cf7afa6d0f3b187b1ec73ee69a",
      "html_url": "https://github.com/posativ/isso/commit/1de758887a6589cf7afa6d0f3b187b1ec73ee69a"
    }
  ],
  "stats": {
    "total": 152,
    "additions": 152,
    "deletions": 0
  },
  "files": [
    {
      "sha": "4ae46c3f1a2f8902b484feb9dd4df3db9b347266",
      "filename": "docs/docs/configuration/server.rst",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/posativ/isso/blob/1633d9261ec9877358cda7acc7d78ecb9b09562c/docs/docs/configuration/server.rst",
      "raw_url": "https://github.com/posativ/isso/raw/1633d9261ec9877358cda7acc7d78ecb9b09562c/docs/docs/configuration/server.rst",
      "contents_url": "https://api.github.com/repos/posativ/isso/contents/docs/docs/configuration/server.rst?ref=1633d9261ec9877358cda7acc7d78ecb9b09562c",
      "patch": "@@ -110,6 +110,10 @@ gravatar-url\n     Url for gravatar images. The \"{}\" is where the email hash will be placed.\n     Defaults to \"https://www.gravatar.com/avatar/{}?d=identicon\"\n \n+latest-enabled\n+    If True it will enable the ``/latest`` endpoint. Optional, defaults \n+    to False.\n+\n \n \n .. _CORS: https://developer.mozilla.org/en/docs/HTTP/Access_control_CORS"
    },
    {
      "sha": "fe3f9e279f6f1ae16bf1420499c5f9de02bc5878",
      "filename": "docs/docs/extras/api.rst",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/posativ/isso/blob/1633d9261ec9877358cda7acc7d78ecb9b09562c/docs/docs/extras/api.rst",
      "raw_url": "https://github.com/posativ/isso/raw/1633d9261ec9877358cda7acc7d78ecb9b09562c/docs/docs/extras/api.rst",
      "contents_url": "https://api.github.com/repos/posativ/isso/contents/docs/docs/extras/api.rst?ref=1633d9261ec9877358cda7acc7d78ecb9b09562c",
      "patch": "@@ -83,6 +83,19 @@ plain :\n     pass plain=1 to get the raw comment text, defaults to 0.\n \n \n+Get the latest N comments for all threads:\n+\n+.. code-block:: text\n+\n+    GET /latest?limit=N\n+\n+The N parameter limits how many of the latest comments to retrieve; it's \n+mandatory, and must be an integer greater than 0.\n+\n+This endpoint needs to be enabled in the configuration (see the \n+``latest-enabled`` option in the ``general`` section).\n+\n+\n Create comment\n --------------\n "
    },
    {
      "sha": "2f2292e2c89adbab2fbf655eb2858a70b12d0c80",
      "filename": "isso/tests/test_comments.py",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/posativ/isso/blob/1633d9261ec9877358cda7acc7d78ecb9b09562c/isso/tests/test_comments.py",
      "raw_url": "https://github.com/posativ/isso/raw/1633d9261ec9877358cda7acc7d78ecb9b09562c/isso/tests/test_comments.py",
      "contents_url": "https://api.github.com/repos/posativ/isso/contents/isso/tests/test_comments.py?ref=1633d9261ec9877358cda7acc7d78ecb9b09562c",
      "patch": "@@ -33,6 +33,7 @@ def setUp(self):\n         conf.set(\"general\", \"dbpath\", self.path)\n         conf.set(\"guard\", \"enabled\", \"off\")\n         conf.set(\"hash\", \"algorithm\", \"none\")\n+        conf.set(\"general\", \"latest-enabled\", \"true\")\n         self.conf = conf\n \n         class App(Isso, core.Mixin):\n@@ -451,6 +452,48 @@ def testPreview(self):\n         self.assertEqual(\n             rv[\"text\"], '<p>This is <strong>mark</strong><em>down</em></p>')\n \n+    def testLatestOk(self):\n+        # load some comments in a mix of posts\n+        saved = []\n+        for idx, post_id in enumerate([1, 2, 2, 1, 2, 1, 3, 1, 4, 2, 3, 4, 1, 2]):\n+            text = 'text-{}'.format(idx)\n+            post_uri = 'test-{}'.format(post_id)\n+            self.post('/new?uri=' + post_uri, data=json.dumps({'text': text}))\n+            saved.append((post_uri, text))\n+\n+        response = self.get('/latest?limit=5')\n+        self.assertEqual(response.status_code, 200)\n+\n+        body = loads(response.data)\n+        expected_items = saved[-5:]  # latest 5\n+        for reply, expected in zip(body, expected_items):\n+            expected_uri, expected_text = expected\n+            self.assertIn(expected_text, reply['text'])\n+            self.assertEqual(expected_uri, reply['uri'])\n+\n+    def testLatestWithoutLimit(self):\n+        response = self.get('/latest')\n+        self.assertEqual(response.status_code, 400)\n+\n+    def testLatestBadLimitNaN(self):\n+        response = self.get('/latest?limit=WAT')\n+        self.assertEqual(response.status_code, 400)\n+\n+    def testLatestBadLimitNegative(self):\n+        response = self.get('/latest?limit=-12')\n+        self.assertEqual(response.status_code, 400)\n+\n+    def testLatestBadLimitZero(self):\n+        response = self.get('/latest?limit=0')\n+        self.assertEqual(response.status_code, 400)\n+\n+    def testLatestNotEnabled(self):\n+        # disable the endpoint\n+        self.conf.set(\"general\", \"latest-enabled\", \"false\")\n+\n+        response = self.get('/latest?limit=5')\n+        self.assertEqual(response.status_code, 404)\n+\n \n class TestModeratedComments(unittest.TestCase):\n "
    },
    {
      "sha": "7dfabafde754ee4c2415226dce47623e2671630f",
      "filename": "isso/views/comments.py",
      "status": "modified",
      "additions": 88,
      "deletions": 0,
      "changes": 88,
      "blob_url": "https://github.com/posativ/isso/blob/1633d9261ec9877358cda7acc7d78ecb9b09562c/isso/views/comments.py",
      "raw_url": "https://github.com/posativ/isso/raw/1633d9261ec9877358cda7acc7d78ecb9b09562c/isso/views/comments.py",
      "contents_url": "https://api.github.com/repos/posativ/isso/contents/isso/views/comments.py?ref=1633d9261ec9877358cda7acc7d78ecb9b09562c",
      "patch": "@@ -2,6 +2,7 @@\n \n from __future__ import unicode_literals\n \n+import collections\n import re\n import time\n import functools\n@@ -112,6 +113,7 @@ class API(object):\n         ('count', ('GET', '/count')),\n         ('counts', ('POST', '/count')),\n         ('feed', ('GET', '/feed')),\n+        ('latest', ('GET', '/latest')),\n         ('view', ('GET', '/id/<int:id>')),\n         ('edit', ('PUT', '/id/<int:id>')),\n         ('delete', ('DELETE', '/id/<int:id>')),\n@@ -1136,3 +1138,89 @@ def admin(self, env, req):\n                                counts=comment_mode_count,\n                                order_by=order_by, asc=asc,\n                                isso_host_script=isso_host_script)\n+    \"\"\"\n+    @api {get} /latest latest\n+    @apiGroup Comment\n+    @apiDescription\n+        Get the latest comments from the system, no matter which thread\n+\n+    @apiParam {number} limit\n+        The quantity of last comments to retrieve\n+\n+    @apiExample {curl} Get the latest 5 comments\n+        curl 'https://comments.example.com/latest?limit=5'\n+\n+    @apiUse commentResponse\n+\n+    @apiSuccessExample Example result:\n+        [\n+            {\n+                \"website\": null,\n+                \"uri\": \"/some\",\n+                \"author\": null,\n+                \"parent\": null,\n+                \"created\": 1464912312.123416,\n+                \"text\": \" &lt;p&gt;I want to use MySQL&lt;/p&gt;\",\n+                \"dislikes\": 0,\n+                \"modified\": null,\n+                \"mode\": 1,\n+                \"id\": 3,\n+                \"likes\": 1\n+            },\n+            {\n+                \"website\": null,\n+                \"uri\": \"/other\",\n+                \"author\": null,\n+                \"parent\": null,\n+                \"created\": 1464914341.312426,\n+                \"text\": \" &lt;p&gt;I want to use MySQL&lt;/p&gt;\",\n+                \"dislikes\": 0,\n+                \"modified\": null,\n+                \"mode\": 1,\n+                \"id\": 4,\n+                \"likes\": 0\n+            }\n+        ]\n+    \"\"\"\n+\n+    def latest(self, environ, request):\n+        # if the feature is not allowed, don't present the endpoint\n+        if not self.conf.getboolean(\"latest-enabled\"):\n+            return NotFound()\n+\n+        # get and check the limit\n+        bad_limit_msg = \"Query parameter 'limit' is mandatory (integer, >0)\"\n+        try:\n+            limit = int(request.args['limit'])\n+        except (KeyError, ValueError):\n+            return BadRequest(bad_limit_msg)\n+        if limit <= 0:\n+            return BadRequest(bad_limit_msg)\n+\n+        # retrieve the latest N comments from the DB\n+        all_comments_gen = self.comments.fetchall(limit=None, order_by='created', mode='1')\n+        comments = collections.deque(all_comments_gen, maxlen=limit)\n+\n+        # prepare a special set of fields (except text which is rendered specifically)\n+        fields = {\n+            'author',\n+            'created',\n+            'dislikes',\n+            'id',\n+            'likes',\n+            'mode',\n+            'modified',\n+            'parent',\n+            'text',\n+            'uri',\n+            'website',\n+        }\n+\n+        # process the retrieved comments and build results\n+        result = []\n+        for comment in comments:\n+            processed = {key: comment[key] for key in fields}\n+            processed['text'] = self.isso.render(comment['text'])\n+            result.append(processed)\n+\n+        return JSON(result, 200)"
    },
    {
      "sha": "ba8d983422df531a341d6ec3178b7026861a9194",
      "filename": "share/isso.conf",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/posativ/isso/blob/1633d9261ec9877358cda7acc7d78ecb9b09562c/share/isso.conf",
      "raw_url": "https://github.com/posativ/isso/raw/1633d9261ec9877358cda7acc7d78ecb9b09562c/share/isso.conf",
      "contents_url": "https://api.github.com/repos/posativ/isso/contents/share/isso.conf?ref=1633d9261ec9877358cda7acc7d78ecb9b09562c",
      "patch": "@@ -59,6 +59,10 @@ gravatar = false\n # default url for gravatar. {} is where the hash will be placed\n gravatar-url = https://www.gravatar.com/avatar/{}?d=identicon\n \n+# enable the \"/latest\" endpoint, that serves comment for multiple posts (not \n+# needing to previously know the posts URIs)\n+latest-enabled = false\n+\n [admin]\n enabled = false\n "
    }
  ]
}
