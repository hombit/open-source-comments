{
  "sha": "e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6ZTQyYzJiOTI1ZGY2NTM4YzdhNWQ1ZjEzNzhiNjhjNGU5N2YwZWM0MQ==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2020-02-18T18:25:48Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-02-18T18:25:48Z"
    },
    "message": "[CORL-687] Webhooks (#2738)\n\n* feat: initial webhook impl\r\n\r\n* feat: added support for key rotation\r\n\r\n* feat: harmonized fetcher\r\n\r\n* feat: added expired secrets cleaning\r\n\r\n* feat: event system refactor\r\n\r\n* feat: added story event\r\n\r\n* feat: simplfiied webhook handler\r\n\r\n* feat: added ref's to locations where user events can be added\r\n\r\n* feat: added UI to support webhooks\r\n\r\n* fix: renaming some Webhook -> WebhookEndpoint\r\n\r\n* fix: review comments to adjuist flow\r\n\r\n* feat: added localizations\r\n\r\n* fix: linting, updated snapshots\r\n\r\n* fix: adapted for new fluent\r\n\r\n* fix: rearranged folders\r\n\r\n* fix: linting\r\n\r\n* feat: added webhooks documentation\r\n\r\n* feat: improved toc generation\r\n\r\n* feat: added some tests to webhooks\r\n\r\n* fix: chain transition hooks\r\n\r\n* feat: added tests around webhook ui\r\n\r\n* fix: renamed events\r\n\r\n* fix: adjusted circle markdown linting\r\n\r\n* fix: adjusted doctoc script call\r\n\r\n* review: review fixes\r\n\r\n* review: review comments\r\n\r\n* review: adjusted signing secret confirmation\r\n\r\n* review: adjusted styles to harmonize button usage\r\n\r\n* fix: updated snapshots and tests\r\n\r\n* review: move form out of webhooks\r\n\r\nMoved the form out of the webhooks by relocating the layout used for the\r\nroute associated with the configure routes.\r\n\r\n* fix: fixed bugs and snapshots with tests\r\n\r\n* feat: revised slack message format to use block api\r\n\r\n* fix: fixed a small text bug\r\n\r\nCo-authored-by: Vinh <vinh@vinh.tech>\r\nCo-authored-by: Kim Gardner <kgardnr@gmail.com>",
    "tree": {
      "sha": "47e6cd13cf0818b8a980965cd7b1b83b94ef3852",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/47e6cd13cf0818b8a980965cd7b1b83b94ef3852"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeTCwsCRBK7hj4Ov3rIwAAdHIIAJ+2jfKcScBL121EWL0lYcW1\now8JwDLA7pxmH34R6yLtxA6y35gdQPAjSRufycNwWOPLzOYG4K9M9fM5xcwiAbc3\n5eHXFlmPgNJKXogc8fFdxu7YDWu/JYVpJV49Ll3wwdxL6xVNOC647P3BlcpoVrUT\nW+S1b/REajn3g+5MOunOska1SmHEf5czy7TAwcUCWDPKAx/dz7M6NpSzv4w6sZBm\nn/npf6LOk8QeG+Xr9Vy++E+sLSMY/4z5FU/qOukB/PE7/8gssBq3nn10PujZa+Hg\nAq/REWP9+m3QBcZkO9kvEqzlYESLaucXak0OgTysNnUZ+v12Juas4v+f2aBowNk=\n=6xbt\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 47e6cd13cf0818b8a980965cd7b1b83b94ef3852\nparent 34ba2da88df86f8634a2bbb630a99b92dfe4d41c\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1582050348 +0000\ncommitter GitHub <noreply@github.com> 1582050348 -0500\n\n[CORL-687] Webhooks (#2738)\n\n* feat: initial webhook impl\r\n\r\n* feat: added support for key rotation\r\n\r\n* feat: harmonized fetcher\r\n\r\n* feat: added expired secrets cleaning\r\n\r\n* feat: event system refactor\r\n\r\n* feat: added story event\r\n\r\n* feat: simplfiied webhook handler\r\n\r\n* feat: added ref's to locations where user events can be added\r\n\r\n* feat: added UI to support webhooks\r\n\r\n* fix: renaming some Webhook -> WebhookEndpoint\r\n\r\n* fix: review comments to adjuist flow\r\n\r\n* feat: added localizations\r\n\r\n* fix: linting, updated snapshots\r\n\r\n* fix: adapted for new fluent\r\n\r\n* fix: rearranged folders\r\n\r\n* fix: linting\r\n\r\n* feat: added webhooks documentation\r\n\r\n* feat: improved toc generation\r\n\r\n* feat: added some tests to webhooks\r\n\r\n* fix: chain transition hooks\r\n\r\n* feat: added tests around webhook ui\r\n\r\n* fix: renamed events\r\n\r\n* fix: adjusted circle markdown linting\r\n\r\n* fix: adjusted doctoc script call\r\n\r\n* review: review fixes\r\n\r\n* review: review comments\r\n\r\n* review: adjusted signing secret confirmation\r\n\r\n* review: adjusted styles to harmonize button usage\r\n\r\n* fix: updated snapshots and tests\r\n\r\n* review: move form out of webhooks\r\n\r\nMoved the form out of the webhooks by relocating the layout used for the\r\nroute associated with the configure routes.\r\n\r\n* fix: fixed bugs and snapshots with tests\r\n\r\n* feat: revised slack message format to use block api\r\n\r\n* fix: fixed a small text bug\r\n\r\nCo-authored-by: Vinh <vinh@vinh.tech>\r\nCo-authored-by: Kim Gardner <kgardnr@gmail.com>\r\n"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
  "html_url": "https://github.com/coralproject/talk/commit/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "34ba2da88df86f8634a2bbb630a99b92dfe4d41c",
      "url": "https://api.github.com/repos/coralproject/talk/commits/34ba2da88df86f8634a2bbb630a99b92dfe4d41c",
      "html_url": "https://github.com/coralproject/talk/commit/34ba2da88df86f8634a2bbb630a99b92dfe4d41c"
    }
  ],
  "stats": {
    "total": 6651,
    "additions": 5632,
    "deletions": 1019
  },
  "files": [
    {
      "sha": "f284de0d4e35908b9dc4f894d33ac7cf90cfae80",
      "filename": ".circleci/config.yml",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/.circleci/config.yml",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/.circleci/config.yml",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/.circleci/config.yml?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -65,11 +65,10 @@ jobs:\n           name: Lint Source Code\n           command: npm run lint\n       - run:\n-          name: Lint README.md\n+          name: Lint Markdown\n           command: |\n-            cp README.md README.md.orig\n             npm run doctoc\n-            diff -q README.md README.md.orig\n+            git diff --exit-code\n \n   # unit_tests will run the unit tests.\n   unit_tests:"
    },
    {
      "sha": "c45e608241278d8b9b28275e1591259eb5806e71",
      "filename": "CLIENT_EVENTS.md",
      "status": "renamed",
      "additions": 32,
      "deletions": 10,
      "changes": 42,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/CLIENT_EVENTS.md",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/CLIENT_EVENTS.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/CLIENT_EVENTS.md?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,31 +1,52 @@\n+# Client Events Guide\n+\n+This serves as a guide to events emitted by the javascript via the embed events\n+hook, as described below in [Viewer Events](#viewer-events).\n+\n+<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n+<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n+## Table of Contents\n+\n+- [Viewer Events](#viewer-events)\n+  - [Viewer Network Events](#viewer-network-events)\n+- [Event List](#event-list)\n+  - [Index](#index)\n+  - [Events](#events)\n+\n+<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n+\n ## Viewer Events\n+\n _Viewer Events_ are emitted when the viewer performs certain actions.\n They can be subscribed to using the `events` parameter in\n `Coral.createStreamEmbed`.\n+\n ```html\n- <script>\n-   const CoralStreamEmbed = Coral.createStreamEmbed({\n-     events: function(events) {\n-       events.onAny(function(eventName, data) {\n-         console.log(eventName, data);\n-       });\n-     },\n-   });\n- </script>\n+<script>\n+  const CoralStreamEmbed = Coral.createStreamEmbed({\n+    events: function(events) {\n+      events.onAny(function(eventName, data) {\n+        console.log(eventName, data);\n+      });\n+    },\n+  });\n+</script>\n ```\n \n Example events:\n+\n - `setMainTab {tab: \"PROFILE\"}`\n - `showFeaturedCommentTooltip`\n - `viewConversation {from: \"FEATURED_COMMENTS\", commentID: \"c45fb5f5-03f9-49a3-a755-488c698ca0df\"}`\n \n ### Viewer Network Events\n \n-_Viewer Network Events_ are events that involves a network request and thus can succeed or fail. Succeeding events will have a  `.success` appended to the event name while failing events have an `.error` appended to the event name.\n+_Viewer Network Events_ are events that involves a network request and thus can succeed or fail. Succeeding events will have a `.success` appended to the event name while failing events have an `.error` appended to the event name.\n \n Moreover _Viewer Network Events_ contains the `rtt` field which indicates the time it needed from initiating the request until the _UI_ has been updated with the response data.\n \n Example events:\n+\n ```\n createComment.success\n {\n@@ -53,6 +74,7 @@ createComment.error\n ```\n \n ## Event List\n+\n <!-- START docs:events -->\n <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN npm run docs:events -->\n ### Index",
      "previous_filename": "events.md"
    },
    {
      "sha": "efaba19ef2ef78bf0ffa15c8ca7bdbd4ee93b983",
      "filename": "CONTRIBUTING.md",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/CONTRIBUTING.md",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/CONTRIBUTING.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/CONTRIBUTING.md?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -8,6 +8,18 @@ do so, please [let us know how we can improve it](https://github.com/coralprojec\n By contributing to this project you agree to the\n [Code of Conduct](CODE_OF_CONDUCT.md).\n \n+<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n+<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n+## Table of Contents\n+\n+- [What should I Contribute?](#what-should-i-contribute)\n+- [Writing Code](#writing-code)\n+  - [When should I create an issue?](#when-should-i-create-an-issue)\n+  - [What should I include?](#what-should-i-include)\n+- [Localization](#localization)\n+\n+<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n+\n ## What should I Contribute?\n \n There are at least three ways to contribute to Coral:"
    },
    {
      "sha": "be39682f2446395037ac5b3566dde54fad6f4758",
      "filename": "WEBHOOKS.md",
      "status": "added",
      "additions": 205,
      "deletions": 0,
      "changes": 205,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/WEBHOOKS.md",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/WEBHOOKS.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/WEBHOOKS.md?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,205 @@\n+# Webhooks Guide\n+\n+This document is in reference to webhooks emitted by Coral. You can configure\n+webhooks on your installation of Coral by visiting `/admin/configure/webhooks`.\n+\n+Once you've configured a webhook endpoint in Coral, you will receive updates\n+from Coral when those events occur. These will be in the form of `POST` requests\n+with a `JSON` payload consisting of the schema represented below.\n+\n+<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n+<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n+## Table of Contents\n+\n+- [Webhook Signing](#webhook-signing)\n+  - [How to verify the signature(s)](#how-to-verify-the-signatures)\n+- [Schema](#schema)\n+- [Events Listing](#events-listing)\n+- [Events](#events)\n+\n+<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n+\n+## Webhook Signing\n+\n+Each webhook sent by Coral is signed by your webhook endpoint signing secret.\n+The signature method closely resembles the signing method used by Stripe for\n+their `v1` signing method. The `X-Coral-Signature` header contains one or more\n+signatures prefixed by `sha256=`.\n+\n+If you receive a signature containing multiple signatures, it is typically when\n+you have rolled the signing secret from the administrative panel, and chosen to\n+keep the previous secret active for a duration of time.\n+\n+### How to verify the signature(s)\n+\n+```js\n+// Set your signing secret here from the administration panel.\n+const SIGNING_SECRET = \"< YOUR SIGNING SECRET HERE >\";\n+\n+// We're using crypto to verify the signatures.\n+const crypto = require(\"crypto\");\n+\n+// We're using express to receive webhooks here.\n+const app = require(\"express\")();\n+\n+// Use the body-parser to get the raw body as a buffer so we can use it with the\n+// hashing functions.\n+const parser = require(\"body-parser\");\n+\n+function extractEvent(body, sig) {\n+  // Step 1: Extract signatures from the header.\n+  const signatures = sig\n+    // Split the header by `,` to get a list of elements.\n+    .split(\",\")\n+    // Split each element by `=` to get a prefix and value pair.\n+    .map(element => element.split(\"=\"))\n+    // Grab all the elements with the prefix of `sha256`.\n+    .filter(([prefix]) => prefix === \"sha256\")\n+    // Grab the value from the prefix and value pair.\n+    .map(([, value]) => value);\n+\n+  // Step 2: Prepare the `signed_payload`.\n+  const signed_payload = body;\n+\n+  // Step 3: Calculate the expected signature.\n+  const expected = crypto\n+    .createHmac(\"sha256\", SIGNING_SECRET)\n+    .update(signed_payload)\n+    .digest()\n+    .toString(\"hex\");\n+\n+  // Step 4: Compare signatures.\n+  if (\n+    // For each of the signatures on the request...\n+    !signatures.some(signature =>\n+      // Compare the expected signature to the signature on in the header. If at\n+      // least one of the match, we should continue to process the event.\n+      crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(expected))\n+    )\n+  ) {\n+    throw new Error(\"Invalid signature\");\n+  }\n+\n+  // Parse the JSON for the event.\n+  return JSON.parse(body.toString());\n+}\n+\n+app.post(\"/webhook\", parser.raw({ type: \"application/json\" }), (req, res) => {\n+  const sig = req.headers[\"x-coral-signature\"];\n+\n+  let event;\n+\n+  try {\n+    // Parse the JSON for the event.\n+    event = extractEvent(req.body, sig);\n+  } catch (err) {\n+    return res.status(400).send(`Webhook Error: ${err.message}`);\n+  }\n+\n+  // Handle the event.\n+  switch (event.type) {\n+    case \"STORY_CREATED\":\n+      const data = event.data;\n+      console.log(\n+        `A Story with ID ${data.storyID} and URL ${data.storyURL} was created!`\n+      );\n+      break;\n+    // ... handle other event types.\n+    default:\n+      // Unexpected event type\n+      return response.status(400).end();\n+  }\n+\n+  // Return a response to acknowledge receipt of the event\n+  res.json({ received: true });\n+});\n+\n+app.listen(4242, () => console.log(\"Running on port 4242\"));\n+```\n+\n+The procedure of how to verify the signatures follows.\n+\n+#### **Step 1**: Extract signatures from the header\n+\n+Split the header using `,` as the separator, to get a list of elements. Then\n+split each of these elements using `=` as the separator, to get a prefix and\n+value pair. The value for the prefix `sha256` corresponds to the signature(s).\n+\n+#### **Step 2**: Prepare the `signed_payload` string\n+\n+You can do this by taking the string contents of the body (before parsing or the\n+request body).\n+\n+#### **Step 3**: Calculate the expected signature\n+\n+Compute an HMAC signature using the SHA256 hash function. You can use the\n+webhook endpoint's signing secret as the key, and the above calculated\n+`signed_payload` as the message.\n+\n+#### **Step 4**: Compare signatures\n+\n+Compare the signature(s) in the header to the expected signature. To protect\n+against timing attacks, ensure you use a constant-time string comparison\n+function when comparing signatures.\n+\n+## Schema\n+\n+```ts\n+{\n+  /**\n+   * id is the identifier for this event, each event\n+   * will have a unique id.\n+   */\n+  id: string;\n+\n+  /**\n+   * type is the name of this event, this indicates\n+   * what is stored in the following `data` property.\n+   * Refer to the `Events List` below to see what the\n+   * type is for each event.\n+   */\n+  type: string;\n+\n+  /**\n+   * data is the object representing this particular\n+   * event. Each type of event has a different shape\n+   * to the data property. Refer to the `Events List`\n+   * below to see what the data looks like for each\n+   * event.\n+   */\n+  data: object;\n+\n+  /**\n+   * createdAt is the ISO 8601 representation of the\n+   * date when this event was created.\n+   */\n+  createdAt: string;\n+}\n+```\n+\n+## Events Listing\n+\n+- [`STORY_CREATED`](#story-created-event)\n+\n+## Events\n+\n+- <a id=\"story-created-event\">**STORY_CREATED**</a>\n+\n+```ts\n+{\n+  id: string;\n+  type: \"STORY_CREATED\";\n+  data: {\n+    /**\n+     * storyID is the ID of the newly created Story.\n+     */\n+    storyID: string;\n+\n+    /**\n+     * storyURL is the URL of the newly created Story.\n+     */\n+    storyURL: string;\n+  }\n+  createdAt: string;\n+}\n+```"
    },
    {
      "sha": "5e4215d48441ebc6f1b052f1297e58aaea3d493c",
      "filename": "package.json",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/package.json",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/package.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package.json?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -25,8 +25,8 @@\n     \"build:client\": \"ts-node --transpile-only ./scripts/build.ts\",\n     \"build:server\": \"gulp server\",\n     \"migration:create\": \"ts-node --transpile-only ./scripts/migration/create.ts\",\n-    \"doctoc\": \"doctoc --title='## Table of Contents' --github README.md\",\n-    \"docs:events\": \"ts-node ./scripts/generateEventDocs.ts ./src/core/client/stream/events.ts ./events.md\",\n+    \"docs:events\": \"ts-node ./scripts/generateEventDocs.ts ./src/core/client/stream/events.ts ./CLIENT_EVENTS.md\",\n+    \"doctoc\": \"doctoc --maxlevel=3 --title '## Table of Contents' README.md CLIENT_EVENTS.md CONTRIBUTING.md WEBHOOKS.md\",\n     \"generate\": \"npm-run-all generate:css-types generate:schema generate:relay\",\n     \"generate-persist\": \"npm-run-all generate:css-types generate:schema generate:relay-persist\",\n     \"generate:css-types\": \"tcm src/core/client/\",\n@@ -400,8 +400,12 @@\n     \"src/core/server/graph/schema/schema.graphql\": [\n       \"graphql-schema-linter\"\n     ],\n-    \"{src/core/client/stream/events.ts,scripts/generateEventDocs.ts,events.md}\": [\n+    \"{src/core/client/stream/events.ts,scripts/generateEventDocs.ts,CLIENT_EVENTS.md}\": [\n       \"npm run docs:events -- --verify\"\n+    ],\n+    \"{README,CLIENT_EVENTS,CONTRIBUTING,WEBHOOKS}.md\": [\n+      \"npm run doctoc\",\n+      \"git add\"\n     ]\n   },\n   \"bundlesize\": ["
    },
    {
      "sha": "80d43b32a4f9ab99bbda8b1a46d66bff5939eda2",
      "filename": "scripts/generateEventDocs.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/scripts/generateEventDocs.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/scripts/generateEventDocs.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/scripts/generateEventDocs.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,8 +1,8 @@\n /* eslint-disable no-bitwise */\n \n import { codeBlock, stripIndent } from \"common-tags\";\n-import * as fs from \"fs\";\n-import * as path from \"path\";\n+import fs from \"fs\";\n+import path from \"path\";\n import ts from \"typescript\";\n \n interface DocEntry {"
    },
    {
      "sha": "81123a9aba78bdcba53ef60f93cffbe548dc6a56",
      "filename": "src/core/client/admin/helpers/getEndpointLink.ts",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/helpers/getEndpointLink.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/helpers/getEndpointLink.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/helpers/getEndpointLink.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,5 @@\n+import { urls } from \"coral-framework/helpers\";\n+\n+export default function getEndpointLink(endpointID: string) {\n+  return `${urls.admin.configureWebhookEndpoint}/${endpointID}`;\n+}"
    },
    {
      "sha": "48e6ef33233bc9a744c8560fa89354c26ac65160",
      "filename": "src/core/client/admin/routeConfig.tsx",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routeConfig.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routeConfig.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routeConfig.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -9,18 +9,22 @@ import { createAuthCheckRoute } from \"./routes/AuthCheck\";\n import CommunityRoute from \"./routes/Community\";\n import ConfigureRoute from \"./routes/Configure\";\n import {\n+  AddWebhookEndpointRoute,\n   AdvancedConfigRoute,\n   AuthConfigRoute,\n+  ConfigureWebhookEndpointRoute,\n   EmailConfigRoute,\n   GeneralConfigRoute,\n   ModerationConfigRoute,\n   OrganizationConfigRoute,\n   SlackConfigRoute,\n+  WebhookEndpointsConfigRoute,\n   WordListConfigRoute,\n } from \"./routes/Configure/sections\";\n import { Sites } from \"./routes/Configure/sections/Sites\";\n import AddSiteRoute from \"./routes/Configure/sections/Sites/AddSiteRoute\";\n import SiteRoute from \"./routes/Configure/sections/Sites/SiteRoute\";\n+import WebhookEndpointsLayout from \"./routes/Configure/sections/WebhookEndpoints/WebhookEndpointsLayout\";\n import ForgotPasswordRoute from \"./routes/ForgotPassword\";\n import InviteRoute from \"./routes/Invite\";\n import LoginRoute from \"./routes/Login\";\n@@ -113,6 +117,14 @@ export default makeRouteConfig(\n             <Route path=\"email\" {...EmailConfigRoute.routeConfig} />\n             <Route path=\"slack\" {...SlackConfigRoute.routeConfig} />\n           </Route>\n+          <Route path=\"configure/webhooks\" Component={WebhookEndpointsLayout}>\n+            <Route path=\"/\" {...WebhookEndpointsConfigRoute.routeConfig} />\n+            <Route path=\"add\" {...AddWebhookEndpointRoute.routeConfig} />\n+            <Route\n+              path=\"endpoint/:webhookEndpointID\"\n+              {...ConfigureWebhookEndpointRoute.routeConfig}\n+            />\n+          </Route>\n           <Route path=\"configure/organization/sites\" Component={Sites}>\n             <Redirect from=\"/\" to=\"/admin/configure/organization/sites/new\" />\n             <Route path=\"new\" {...AddSiteRoute.routeConfig} />"
    },
    {
      "sha": "c24cb225a582f553d74269f2c2db42e25d9bc88f",
      "filename": "src/core/client/admin/routes/Configure/ConfigureLinks.tsx",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/ConfigureLinks.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/ConfigureLinks.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/ConfigureLinks.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -28,6 +28,9 @@ const ConfigureLinks: FunctionComponent<{}> = () => {\n       <Localized id=\"configure-sideBarNavigation-slack\">\n         <Link to=\"/admin/configure/slack\">Slack</Link>\n       </Localized>\n+      <Localized id=\"configure-sideBarNavigation-webhooks\">\n+        <Link to=\"/admin/configure/webhooks\">Webhooks</Link>\n+      </Localized>\n       <Localized id=\"configure-sideBarNavigation-advanced\">\n         <Link to=\"/admin/configure/advanced\">Advanced</Link>\n       </Localized>"
    },
    {
      "sha": "a053888006b37985b0b3358c5a7c5a3be22fdc2d",
      "filename": "src/core/client/admin/routes/Configure/NavigationWarningContainer.tsx",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/NavigationWarningContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/NavigationWarningContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/NavigationWarningContainer.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -24,7 +24,7 @@ class NavigationWarningContainer extends React.Component<Props> {\n     );\n \n     this.removeTransitionHook = props.router.addTransitionHook(() =>\n-      this.props.active ? warningMessage : true\n+      this.props.active ? warningMessage : undefined\n     );\n   }\n "
    },
    {
      "sha": "3b6742760f975d56fcdc311a9b2356250f7d2846",
      "filename": "src/core/client/admin/routes/Configure/sections/Organization/SitesConfig.tsx",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/Organization/SitesConfig.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/Organization/SitesConfig.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Organization/SitesConfig.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -44,11 +44,7 @@ const SitesConfig: FunctionComponent<Props> = ({\n         id=\"configure-organization-sites-add-site\"\n         icon={<Icon>add</Icon>}\n       >\n-        <Button\n-          to=\"/admin/configure/organization/sites/new\"\n-          iconLeft\n-          size=\"large\"\n-        >\n+        <Button to=\"/admin/configure/organization/sites/new\" iconLeft>\n           <Icon>add</Icon>\n           Add a site\n         </Button>"
    },
    {
      "sha": "4b895bb5ea61cd7fbe65c9cfb15ef72c34e4d082",
      "filename": "src/core/client/admin/routes/Configure/sections/Slack/SlackConfigContainer.tsx",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/Slack/SlackConfigContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/Slack/SlackConfigContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/Slack/SlackConfigContainer.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -107,7 +107,7 @@ const SlackConfigContainer: FunctionComponent<Props> = ({ form, settings }) => {\n             on how to create a Slack App see our documentation.\n           </FormFieldDescription>\n         </Localized>\n-        <Button color=\"dark\" onClick={onAddChannel}>\n+        <Button iconLeft onClick={onAddChannel}>\n           <ButtonIcon size=\"md\" className={styles.icon}>\n             add\n           </ButtonIcon>"
    },
    {
      "sha": "199910dc2e7161133dfc15d94581526072393c8b",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/AddWebhookEndpointContainer.tsx",
      "status": "added",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/AddWebhookEndpointContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/AddWebhookEndpointContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/AddWebhookEndpointContainer.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,58 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import { Match, Router, withRouter } from \"found\";\n+import React, { FunctionComponent, useCallback } from \"react\";\n+\n+import ConfigBox from \"coral-admin/routes/Configure/ConfigBox\";\n+import Header from \"coral-admin/routes/Configure/Header\";\n+import { urls } from \"coral-framework/helpers\";\n+import { graphql, withFragmentContainer } from \"coral-framework/lib/relay\";\n+import { HorizontalGutter } from \"coral-ui/components/v2\";\n+\n+import { AddWebhookEndpointContainer_settings } from \"coral-admin/__generated__/AddWebhookEndpointContainer_settings.graphql\";\n+\n+import { ConfigureWebhookEndpointForm } from \"../ConfigureWebhookEndpointForm\";\n+\n+interface Props {\n+  router: Router;\n+  match: Match;\n+  settings: AddWebhookEndpointContainer_settings;\n+}\n+\n+const AddWebhookEndpointContainer: FunctionComponent<Props> = ({\n+  settings,\n+  router,\n+}) => {\n+  const onCancel = useCallback(() => {\n+    router.push(urls.admin.webhooks);\n+  }, [router]);\n+\n+  return (\n+    <HorizontalGutter size=\"double\">\n+      <ConfigBox\n+        title={\n+          <Localized id=\"configure-webhooks-addEndpoint\">\n+            <Header>Add a webhook endpoint</Header>\n+          </Localized>\n+        }\n+      >\n+        <ConfigureWebhookEndpointForm\n+          settings={settings}\n+          webhookEndpoint={null}\n+          onCancel={onCancel}\n+        />\n+      </ConfigBox>\n+    </HorizontalGutter>\n+  );\n+};\n+\n+const enhanced = withRouter(\n+  withFragmentContainer<Props>({\n+    settings: graphql`\n+      fragment AddWebhookEndpointContainer_settings on Settings {\n+        ...ConfigureWebhookEndpointForm_settings\n+      }\n+    `,\n+  })(AddWebhookEndpointContainer)\n+);\n+\n+export default enhanced;"
    },
    {
      "sha": "12dd2d559148f181b4d3b99dc3ea9aec50bf36e5",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/AddWebhookEndpointRoute.tsx",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/AddWebhookEndpointRoute.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/AddWebhookEndpointRoute.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/AddWebhookEndpointRoute.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,38 @@\n+import React, { FunctionComponent } from \"react\";\n+import { graphql } from \"react-relay\";\n+\n+import { withRouteConfig } from \"coral-framework/lib/router\";\n+import { Delay, Spinner } from \"coral-ui/components/v2\";\n+\n+import { AddWebhookEndpointRouteQueryResponse } from \"coral-admin/__generated__/AddWebhookEndpointRouteQuery.graphql\";\n+\n+import AddWebhookEndpointContainer from \"./AddWebhookEndpointContainer\";\n+\n+interface Props {\n+  data: AddWebhookEndpointRouteQueryResponse | null;\n+}\n+\n+const AddWebhookEndpointRoute: FunctionComponent<Props> = ({ data }) => {\n+  if (!data) {\n+    return (\n+      <Delay>\n+        <Spinner />\n+      </Delay>\n+    );\n+  }\n+\n+  return <AddWebhookEndpointContainer settings={data.settings} />;\n+};\n+\n+const enhanced = withRouteConfig<Props>({\n+  query: graphql`\n+    query AddWebhookEndpointRouteQuery {\n+      settings {\n+        ...AddWebhookEndpointContainer_settings\n+      }\n+    }\n+  `,\n+  cacheConfig: { force: true },\n+})(AddWebhookEndpointRoute);\n+\n+export default enhanced;"
    },
    {
      "sha": "8e73a9dac9bef399f6890a3d92ac418ddf1ef969",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/index.ts",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/AddWebhookEndpoint/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,4 @@\n+export {\n+  default,\n+  default as AddWebhookEndpointRoute,\n+} from \"./AddWebhookEndpointRoute\";"
    },
    {
      "sha": "b37fac7aac19f89e732adb940b241296050fdeb6",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/ConfigureWebhookEndpointContainer.tsx",
      "status": "added",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/ConfigureWebhookEndpointContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/ConfigureWebhookEndpointContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/ConfigureWebhookEndpointContainer.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,62 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+\n+import ConfigBox from \"coral-admin/routes/Configure/ConfigBox\";\n+import Header from \"coral-admin/routes/Configure/Header\";\n+import { graphql, withFragmentContainer } from \"coral-framework/lib/relay\";\n+import { HorizontalGutter } from \"coral-ui/components/v2\";\n+\n+import { ConfigureWebhookEndpointContainer_settings } from \"coral-admin/__generated__/ConfigureWebhookEndpointContainer_settings.graphql\";\n+import { ConfigureWebhookEndpointContainer_webhookEndpoint } from \"coral-admin/__generated__/ConfigureWebhookEndpointContainer_webhookEndpoint.graphql\";\n+\n+import EndpointDangerZone from \"./EndpointDangerZone\";\n+import EndpointDetails from \"./EndpointDetails\";\n+import EndpointStatus from \"./EndpointStatus\";\n+\n+interface Props {\n+  webhookEndpoint: ConfigureWebhookEndpointContainer_webhookEndpoint;\n+  settings: ConfigureWebhookEndpointContainer_settings;\n+}\n+\n+const ConfigureWebhookEndpointContainer: FunctionComponent<Props> = ({\n+  webhookEndpoint,\n+  settings,\n+}) => {\n+  return (\n+    <HorizontalGutter size=\"double\" data-testid=\"webhook-endpoint-container\">\n+      <ConfigBox\n+        title={\n+          <Localized id=\"configure-webhooks-configureWebhookEndpoint\">\n+            <Header htmlFor=\"configure-webhooks-header.title\">\n+              Configure webhook endpoint\n+            </Header>\n+          </Localized>\n+        }\n+      >\n+        <EndpointDetails\n+          webhookEndpoint={webhookEndpoint}\n+          settings={settings}\n+        />\n+        <EndpointStatus webhookEndpoint={webhookEndpoint} />\n+        <EndpointDangerZone webhookEndpoint={webhookEndpoint} />\n+      </ConfigBox>\n+    </HorizontalGutter>\n+  );\n+};\n+\n+const enhanced = withFragmentContainer<Props>({\n+  webhookEndpoint: graphql`\n+    fragment ConfigureWebhookEndpointContainer_webhookEndpoint on WebhookEndpoint {\n+      ...EndpointDangerZone_webhookEndpoint\n+      ...EndpointDetails_webhookEndpoint\n+      ...EndpointStatus_webhookEndpoint\n+    }\n+  `,\n+  settings: graphql`\n+    fragment ConfigureWebhookEndpointContainer_settings on Settings {\n+      ...EndpointDetails_settings\n+    }\n+  `,\n+})(ConfigureWebhookEndpointContainer);\n+\n+export default enhanced;"
    },
    {
      "sha": "3c5e0928aeb1147352334c4e87dbaa2c04b00087",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/ConfigureWebhookEndpointRoute.tsx",
      "status": "added",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/ConfigureWebhookEndpointRoute.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/ConfigureWebhookEndpointRoute.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/ConfigureWebhookEndpointRoute.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,62 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+import { graphql } from \"react-relay\";\n+\n+import { withRouteConfig } from \"coral-framework/lib/router\";\n+import { CallOut, Delay, Spinner } from \"coral-ui/components/v2\";\n+\n+import { ConfigureWebhookEndpointRouteQueryResponse } from \"coral-admin/__generated__/ConfigureWebhookEndpointRouteQuery.graphql\";\n+\n+import ConfigureWebhookContainer from \"./ConfigureWebhookEndpointContainer\";\n+\n+interface Props {\n+  data: ConfigureWebhookEndpointRouteQueryResponse | null;\n+}\n+\n+const ConfigureWebhookEndpointRoute: FunctionComponent<Props> = ({ data }) => {\n+  if (!data) {\n+    return (\n+      <Delay>\n+        <Spinner />\n+      </Delay>\n+    );\n+  }\n+\n+  if (!data.webhookEndpoint) {\n+    return (\n+      <Localized id=\"configure-webhooks-webhookEndpointNotFound\">\n+        <CallOut color=\"error\" fullWidth>\n+          Webhook endpoint not found\n+        </CallOut>\n+      </Localized>\n+    );\n+  }\n+\n+  return (\n+    <ConfigureWebhookContainer\n+      webhookEndpoint={data.webhookEndpoint}\n+      settings={data.settings}\n+    />\n+  );\n+};\n+\n+const enhanced = withRouteConfig<Props>({\n+  query: graphql`\n+    query ConfigureWebhookEndpointRouteQuery($webhookEndpointID: ID!) {\n+      webhookEndpoint(id: $webhookEndpointID) {\n+        ...ConfigureWebhookEndpointContainer_webhookEndpoint\n+      }\n+      settings {\n+        ...ConfigureWebhookEndpointContainer_settings\n+      }\n+    }\n+  `,\n+  cacheConfig: { force: true },\n+  prepareVariables: (params, match) => {\n+    return {\n+      webhookEndpointID: match.params.webhookEndpointID,\n+    };\n+  },\n+})(ConfigureWebhookEndpointRoute);\n+\n+export default enhanced;"
    },
    {
      "sha": "55bc63b81f0527cccdb36d6b35facdb4042a665c",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/DeleteWebhookEndpointMutation.ts",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/DeleteWebhookEndpointMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/DeleteWebhookEndpointMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/DeleteWebhookEndpointMutation.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,38 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { DeleteWebhookEndpointMutation as MutationTypes } from \"coral-admin/__generated__/DeleteWebhookEndpointMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const DeleteWebhookEndpointMutation = createMutation(\n+  \"deleteWebhookEndpoint\",\n+  (environment: Environment, { id }: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation DeleteWebhookEndpointMutation(\n+          $input: DeleteWebhookEndpointInput!\n+        ) {\n+          deleteWebhookEndpoint(input: $input) {\n+            endpoint {\n+              id\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          id,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default DeleteWebhookEndpointMutation;"
    },
    {
      "sha": "ae2abc35f586d6981af56e0fe946c7b593b60bae",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/DisableWebhookEndpointMutation.ts",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/DisableWebhookEndpointMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/DisableWebhookEndpointMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/DisableWebhookEndpointMutation.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,38 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { DisableWebhookEndpointMutation as MutationTypes } from \"coral-admin/__generated__/DisableWebhookEndpointMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const DisableWebhookEndpointMutation = createMutation(\n+  \"disableWebhookEndpoint\",\n+  (environment: Environment, input: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation DisableWebhookEndpointMutation(\n+          $input: DisableWebhookEndpointInput!\n+        ) {\n+          disableWebhookEndpoint(input: $input) {\n+            endpoint {\n+              ...ConfigureWebhookEndpointContainer_webhookEndpoint\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          ...input,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default DisableWebhookEndpointMutation;"
    },
    {
      "sha": "c23b6207b01009247b9da1659c5ced4eed192cbd",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EnableWebhookEndpointMutation.ts",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EnableWebhookEndpointMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EnableWebhookEndpointMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EnableWebhookEndpointMutation.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,38 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { EnableWebhookEndpointMutation as MutationTypes } from \"coral-admin/__generated__/EnableWebhookEndpointMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const EnableWebhookEndpointMutation = createMutation(\n+  \"enableWebhookEndpoint\",\n+  (environment: Environment, input: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation EnableWebhookEndpointMutation(\n+          $input: EnableWebhookEndpointInput!\n+        ) {\n+          enableWebhookEndpoint(input: $input) {\n+            endpoint {\n+              ...ConfigureWebhookEndpointContainer_webhookEndpoint\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          ...input,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default EnableWebhookEndpointMutation;"
    },
    {
      "sha": "ef0ee7757f6cc2612aabb2a4ac63e3965ae367a1",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDangerZone.tsx",
      "status": "added",
      "additions": 181,
      "deletions": 0,
      "changes": 181,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDangerZone.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDangerZone.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDangerZone.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,181 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import { Match, Router, withRouter } from \"found\";\n+import React, { FunctionComponent, useCallback, useState } from \"react\";\n+\n+import Subheader from \"coral-admin/routes/Configure/Subheader\";\n+import { urls } from \"coral-framework/helpers\";\n+import { useCoralContext } from \"coral-framework/lib/bootstrap\";\n+import { getMessage } from \"coral-framework/lib/i18n\";\n+import {\n+  graphql,\n+  useMutation,\n+  withFragmentContainer,\n+} from \"coral-framework/lib/relay\";\n+import {\n+  Button,\n+  FormField,\n+  FormFieldDescription,\n+  Label,\n+} from \"coral-ui/components/v2\";\n+\n+import { EndpointDangerZone_webhookEndpoint } from \"coral-admin/__generated__/EndpointDangerZone_webhookEndpoint.graphql\";\n+\n+import DeleteWebhookEndpointMutation from \"./DeleteWebhookEndpointMutation\";\n+import DisableWebhookEndpointMutation from \"./DisableWebhookEndpointMutation\";\n+import EnableWebhookEndpointMutation from \"./EnableWebhookEndpointMutation\";\n+import RotateSigningSecretModal from \"./RotateSigningSecretModal\";\n+\n+interface Props {\n+  webhookEndpoint: EndpointDangerZone_webhookEndpoint;\n+  router: Router;\n+  match: Match;\n+}\n+\n+const EndpointDangerZone: FunctionComponent<Props> = ({\n+  webhookEndpoint,\n+  router,\n+}) => {\n+  const { localeBundles } = useCoralContext();\n+  const enableWebhookEndpoint = useMutation(EnableWebhookEndpointMutation);\n+  const disableWebhookEndpoint = useMutation(DisableWebhookEndpointMutation);\n+  const deleteWebhookEndpoint = useMutation(DeleteWebhookEndpointMutation);\n+\n+  const [rotateSecretOpen, setRotateSecretOpen] = useState<boolean>(false);\n+  const onRotateSecret = useCallback(async () => {\n+    setRotateSecretOpen(true);\n+  }, []);\n+  const onHideRotateSecret = useCallback(async () => {\n+    setRotateSecretOpen(false);\n+  }, [setRotateSecretOpen]);\n+\n+  const onEnable = useCallback(async () => {\n+    const message = getMessage(\n+      localeBundles,\n+      \"configure-webhooks-confirmEnable\",\n+      \"Enabling the webhook endpoint will start to send events to this URL. Are you sure you want to continue?\"\n+    );\n+\n+    if (window.confirm(message)) {\n+      await enableWebhookEndpoint({ id: webhookEndpoint.id });\n+    }\n+  }, [webhookEndpoint, enableWebhookEndpoint]);\n+  const onDisable = useCallback(async () => {\n+    const message = getMessage(\n+      localeBundles,\n+      \"configure-webhooks-confirmDisable\",\n+      \"Disabling this webhook endpoint will stop any new events from being sent to this URL. Are you sure you want to continue?\"\n+    );\n+\n+    if (window.confirm(message)) {\n+      await disableWebhookEndpoint({ id: webhookEndpoint.id });\n+    }\n+  }, [webhookEndpoint, disableWebhookEndpoint]);\n+\n+  const onDelete = useCallback(async () => {\n+    const message = getMessage(\n+      localeBundles,\n+      \"configure-webhooks-confirmDelete\",\n+      \"Deleting this webhook endpoint will stop any new events from being sent to this URL, and remove all the associated settings with this webhook endpoint. Are you sure you want to continue?\"\n+    );\n+\n+    if (window.confirm(message)) {\n+      await deleteWebhookEndpoint({ id: webhookEndpoint.id });\n+\n+      // Send the user back to the webhook endpoints listing.\n+      router.push(urls.admin.webhooks);\n+    }\n+  }, [webhookEndpoint, disableWebhookEndpoint, router]);\n+\n+  return (\n+    <>\n+      <Localized id=\"configure-webhooks-dangerZone\">\n+        <Subheader>Danger Zone</Subheader>\n+      </Localized>\n+      <FormField>\n+        <Localized id=\"configure-webhooks-rotateSigningSecret\">\n+          <Label>Rotate signing secret</Label>\n+        </Localized>\n+        <Localized id=\"configure-webhooks-rotateSigningSecretDescription\">\n+          <FormFieldDescription>\n+            Rotating the signing secret will allow to you to safely replace a\n+            signing secret used in production with a delay.\n+          </FormFieldDescription>\n+        </Localized>\n+        <Localized id=\"configure-webhooks-rotateSigningSecretButton\">\n+          <Button color=\"alert\" onClick={onRotateSecret}>\n+            Rotate signing secret\n+          </Button>\n+        </Localized>\n+      </FormField>\n+      <RotateSigningSecretModal\n+        endpointID={webhookEndpoint.id}\n+        onHide={onHideRotateSecret}\n+        open={rotateSecretOpen}\n+      />\n+      {webhookEndpoint.enabled ? (\n+        <FormField>\n+          <Localized id=\"configure-webhooks-disableEndpoint\">\n+            <Label>Disable endpoint</Label>\n+          </Localized>\n+          <Localized id=\"configure-webhooks-disableEndpointDescription\">\n+            <FormFieldDescription>\n+              This endpoint is current enabled. By disabling this endpoint no\n+              new events will be sent to the URL provided.\n+            </FormFieldDescription>\n+          </Localized>\n+          <Localized id=\"configure-webhooks-disableEndpointButton\">\n+            <Button color=\"alert\" onClick={onDisable}>\n+              Disable endpoint\n+            </Button>\n+          </Localized>\n+        </FormField>\n+      ) : (\n+        <FormField>\n+          <Localized id=\"configure-webhooks-enableEndpoint\">\n+            <Label>Enable endpoint</Label>\n+          </Localized>\n+          <Localized id=\"configure-webhooks-enableEndpointDescription\">\n+            <FormFieldDescription>\n+              This endpoint is current disabled. By enabling this endpoint new\n+              events will be sent to the URL provided.\n+            </FormFieldDescription>\n+          </Localized>\n+          <Localized id=\"configure-webhooks-enableEndpointButton\">\n+            <Button color=\"regular\" onClick={onEnable}>\n+              Enable endpoint\n+            </Button>\n+          </Localized>\n+        </FormField>\n+      )}\n+      <FormField>\n+        <Localized id=\"configure-webhooks-deleteEndpoint\">\n+          <Label>Delete endpoint</Label>\n+        </Localized>\n+        <Localized id=\"configure-webhooks-deleteEndpointDescription\">\n+          <FormFieldDescription>\n+            Deleting the endpoint will prevent any new events from being sent to\n+            the URL provided.\n+          </FormFieldDescription>\n+        </Localized>\n+        <Localized id=\"configure-webhooks-deleteEndpointButton\">\n+          <Button color=\"alert\" onClick={onDelete}>\n+            Delete endpoint\n+          </Button>\n+        </Localized>\n+      </FormField>\n+    </>\n+  );\n+};\n+\n+const enhanced = withRouter(\n+  withFragmentContainer<Props>({\n+    webhookEndpoint: graphql`\n+      fragment EndpointDangerZone_webhookEndpoint on WebhookEndpoint {\n+        id\n+        enabled\n+      }\n+    `,\n+  })(EndpointDangerZone)\n+);\n+\n+export default enhanced;"
    },
    {
      "sha": "49e6abe916284e657dd2dc1de565dca92306d862",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDetails.tsx",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDetails.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDetails.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointDetails.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,42 @@\n+import React, { FunctionComponent } from \"react\";\n+\n+import Subheader from \"coral-admin/routes/Configure/Subheader\";\n+import { graphql, withFragmentContainer } from \"coral-framework/lib/relay\";\n+\n+import { EndpointDetails_settings } from \"coral-admin/__generated__/EndpointDetails_settings.graphql\";\n+import { EndpointDetails_webhookEndpoint } from \"coral-admin/__generated__/EndpointDetails_webhookEndpoint.graphql\";\n+\n+import ConfigureWebhookEndpointForm from \"../ConfigureWebhookEndpointForm\";\n+\n+interface Props {\n+  webhookEndpoint: EndpointDetails_webhookEndpoint;\n+  settings: EndpointDetails_settings;\n+}\n+\n+const EndpointDetails: FunctionComponent<Props> = ({\n+  webhookEndpoint,\n+  settings,\n+}) => (\n+  <>\n+    <Subheader>Endpoint details</Subheader>\n+    <ConfigureWebhookEndpointForm\n+      settings={settings}\n+      webhookEndpoint={webhookEndpoint}\n+    />\n+  </>\n+);\n+\n+const enhanced = withFragmentContainer<Props>({\n+  webhookEndpoint: graphql`\n+    fragment EndpointDetails_webhookEndpoint on WebhookEndpoint {\n+      ...ConfigureWebhookEndpointForm_webhookEndpoint\n+    }\n+  `,\n+  settings: graphql`\n+    fragment EndpointDetails_settings on Settings {\n+      ...ConfigureWebhookEndpointForm_settings\n+    }\n+  `,\n+})(EndpointDetails);\n+\n+export default enhanced;"
    },
    {
      "sha": "fb3732588123c564d81f0e87f40e30ea99fdaae3",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointStatus.tsx",
      "status": "added",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointStatus.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointStatus.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/EndpointStatus.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,85 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+\n+import Subheader from \"coral-admin/routes/Configure/Subheader\";\n+import { CopyButton } from \"coral-framework/components\";\n+import { ExternalLink } from \"coral-framework/lib/i18n/components\";\n+import { graphql, withFragmentContainer } from \"coral-framework/lib/relay\";\n+import {\n+  Flex,\n+  FormField,\n+  FormFieldDescription,\n+  HelperText,\n+  Label,\n+  PasswordField,\n+} from \"coral-ui/components/v2\";\n+\n+import { EndpointStatus_webhookEndpoint } from \"coral-admin/__generated__/EndpointStatus_webhookEndpoint.graphql\";\n+\n+import StatusMarker from \"../StatusMarker\";\n+\n+interface Props {\n+  webhookEndpoint: EndpointStatus_webhookEndpoint;\n+}\n+\n+const EndpointStatus: FunctionComponent<Props> = ({ webhookEndpoint }) => {\n+  return (\n+    <>\n+      <Localized id=\"configure-webhooks-endpointStatus\">\n+        <Subheader>Endpoint status</Subheader>\n+      </Localized>\n+      <FormField>\n+        <Localized id=\"configure-webhooks-status\">\n+          <Label>Status</Label>\n+        </Localized>\n+        <StatusMarker enabled={webhookEndpoint.enabled} />\n+      </FormField>\n+      <FormField>\n+        <Localized id=\"configure-webhooks-signingSecret\">\n+          <Label>Signing secret</Label>\n+        </Localized>\n+        <Localized\n+          id=\"configure-webhooks-signingSecretDescription\"\n+          externalLink={\n+            <ExternalLink href=\"https://github.com/coralproject/talk/blob/master/WEBHOOKS.md#webhook-signing\" />\n+          }\n+        >\n+          <FormFieldDescription>\n+            The following signing secret is used to sign request payloads sent\n+            to the URL. To learn more about webhook signing, visit our{\" \"}\n+            <ExternalLink href=\"https://github.com/coralproject/talk/blob/master/WEBHOOKS.md#webhook-signing\">\n+              Webhook Guide\n+            </ExternalLink>\n+            .\n+          </FormFieldDescription>\n+        </Localized>\n+        <Flex direction=\"row\" itemGutter=\"half\" alignItems=\"center\">\n+          <PasswordField\n+            value={webhookEndpoint.signingSecret.secret}\n+            fullWidth\n+            readOnly\n+          />\n+          <CopyButton text={webhookEndpoint.signingSecret.secret} />\n+        </Flex>\n+        <HelperText>\n+          KEY GENERATED AT: {webhookEndpoint.signingSecret.createdAt}\n+        </HelperText>\n+      </FormField>\n+    </>\n+  );\n+};\n+\n+const enhanced = withFragmentContainer<Props>({\n+  webhookEndpoint: graphql`\n+    fragment EndpointStatus_webhookEndpoint on WebhookEndpoint {\n+      id\n+      enabled\n+      signingSecret {\n+        secret\n+        createdAt\n+      }\n+    }\n+  `,\n+})(EndpointStatus);\n+\n+export default enhanced;"
    },
    {
      "sha": "09aae758ae27d1b8780feed5f86cc2173bd32e0a",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.css",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.css",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.css?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,10 @@\n+.root {\n+  width: 500px;\n+}\n+\n+.title {\n+  font-size: var(--v2-font-size-5);\n+  font-family: var(--v2-font-family-primary);\n+  font-weight: var(--v2-font-weight-primary-semi-bold);\n+  line-height: var(--v2-line-height-title);\n+}"
    },
    {
      "sha": "697fec94710c69db7ef7d07b38726b297e4a17e9",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.tsx",
      "status": "added",
      "additions": 165,
      "deletions": 0,
      "changes": 165,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateSigningSecretModal.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,165 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import { FORM_ERROR } from \"final-form\";\n+import React, { FunctionComponent, useCallback } from \"react\";\n+import { Field, Form } from \"react-final-form\";\n+\n+import { useNotification } from \"coral-admin/App/GlobalNotification\";\n+import { InvalidRequestError } from \"coral-framework/lib/errors\";\n+import { useMutation } from \"coral-framework/lib/relay\";\n+import {\n+  Button,\n+  CallOut,\n+  Card,\n+  CardCloseButton,\n+  Flex,\n+  FormField,\n+  HelperText,\n+  HorizontalGutter,\n+  Label,\n+  Modal,\n+  Option,\n+  SelectField,\n+} from \"coral-ui/components/v2\";\n+import AppNotification from \"coral-ui/components/v2/AppNotification\";\n+\n+import RotateWebhookEndpointSecretMutation from \"./RotateWebhookEndpointSecretMutation\";\n+\n+import styles from \"./RotateSigningSecretModal.css\";\n+\n+interface Props {\n+  endpointID: string;\n+  onHide: () => void;\n+  open: boolean;\n+}\n+\n+const RotateWebhookEndpointSecretModal: FunctionComponent<Props> = ({\n+  onHide,\n+  open,\n+  endpointID,\n+}) => {\n+  const rotateWebhookEndpointSecret = useMutation(\n+    RotateWebhookEndpointSecretMutation\n+  );\n+  const { setMessage, clearMessage } = useNotification();\n+  const onRotateSecret = useCallback(\n+    async ({ inactiveIn: inactiveInString }) => {\n+      try {\n+        const inactiveIn = parseInt(inactiveInString, 10);\n+        await rotateWebhookEndpointSecret({ id: endpointID, inactiveIn });\n+\n+        // Post a notification about the successful change.\n+        setMessage(\n+          <Localized id=\"configure-webhooks-rotateSigningSecretSuccessUseNewSecret\">\n+            <AppNotification icon=\"check_circle_outline\" onClose={clearMessage}>\n+              Webhook endpoint signing secret has been rotated. Please ensure\n+              you update your integrations to use the new secret below.\n+            </AppNotification>\n+          </Localized>\n+        );\n+        window.scroll(0, 0);\n+      } catch (err) {\n+        if (err instanceof InvalidRequestError) {\n+          return err.invalidArgs;\n+        }\n+        return { [FORM_ERROR]: err.message };\n+      }\n+\n+      // Dismiss the modal.\n+      onHide();\n+\n+      return;\n+    },\n+    [endpointID, rotateWebhookEndpointSecret]\n+  );\n+\n+  return (\n+    <Modal open={open}>\n+      {({ firstFocusableRef, lastFocusableRef }) => (\n+        <Card className={styles.root}>\n+          <Flex justifyContent=\"flex-end\">\n+            <CardCloseButton onClick={onHide} ref={firstFocusableRef} />\n+          </Flex>\n+          <Form onSubmit={onRotateSecret} initialValues={{ inactiveIn: 0 }}>\n+            {({ handleSubmit, submitting, submitError }) => (\n+              <form onSubmit={handleSubmit}>\n+                <HorizontalGutter size=\"double\">\n+                  <Localized id=\"configure-webhooks-rotateSigningSecret\">\n+                    <h2 className={styles.title}>Rotate signing secret</h2>\n+                  </Localized>\n+                  {submitError && (\n+                    <CallOut color=\"error\" fullWidth>\n+                      {submitError}\n+                    </CallOut>\n+                  )}\n+                  <Localized id=\"configure-webhooks-rotateSigningSecretHelper\">\n+                    <HelperText>\n+                      After it expires, signatures will no longer be generated\n+                      with the old secret.\n+                    </HelperText>\n+                  </Localized>\n+                  <Field name=\"inactiveIn\">\n+                    {({ input }) => (\n+                      <FormField>\n+                        <Localized id=\"configure-webhooks-expiresOldSecret\">\n+                          <Label>Expire the old secret</Label>\n+                        </Localized>\n+                        <SelectField {...input} fullWidth>\n+                          <Localized id=\"configure-webhooks-expiresOldSecretImmediately\">\n+                            <Option value=\"0\">Immediately</Option>\n+                          </Localized>\n+                          <Localized\n+                            id=\"configure-webhooks-expiresOldSecretHoursFromNow\"\n+                            $hours={1}\n+                          >\n+                            <Option value=\"3600\">1 hour from now</Option>\n+                          </Localized>\n+                          <Localized\n+                            id=\"configure-webhooks-expiresOldSecretHoursFromNow\"\n+                            $hours={2}\n+                          >\n+                            <Option value=\"7200\">2 hours from now</Option>\n+                          </Localized>\n+                          <Localized\n+                            id=\"configure-webhooks-expiresOldSecretHoursFromNow\"\n+                            $hours={12}\n+                          >\n+                            <Option value=\"43200\">12 hours from now</Option>\n+                          </Localized>\n+                          <Localized\n+                            id=\"configure-webhooks-expiresOldSecretHoursFromNow\"\n+                            $hours={24}\n+                          >\n+                            <Option value=\"86400\">24 hours from now</Option>\n+                          </Localized>\n+                        </SelectField>\n+                      </FormField>\n+                    )}\n+                  </Field>\n+                  <Flex direction=\"row\" justifyContent=\"flex-end\" itemGutter>\n+                    <Localized id=\"configure-webhooks-cancelButton\">\n+                      <Button color=\"regular\" onClick={onHide}>\n+                        Cancel\n+                      </Button>\n+                    </Localized>\n+                    <Localized id=\"configure-webhooks-rotateSigningSecretButton\">\n+                      <Button\n+                        type=\"submit\"\n+                        color=\"alert\"\n+                        disabled={submitting}\n+                        ref={lastFocusableRef}\n+                      >\n+                        Rotate signing secret\n+                      </Button>\n+                    </Localized>\n+                  </Flex>\n+                </HorizontalGutter>\n+              </form>\n+            )}\n+          </Form>\n+        </Card>\n+      )}\n+    </Modal>\n+  );\n+};\n+\n+export default RotateWebhookEndpointSecretModal;"
    },
    {
      "sha": "8d5719b849b147cfd0dcb1efd63828de3b020090",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateWebhookEndpointSecretMutation.ts",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateWebhookEndpointSecretMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateWebhookEndpointSecretMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/RotateWebhookEndpointSecretMutation.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,38 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { RotateWebhookEndpointSecretMutation as MutationTypes } from \"coral-admin/__generated__/RotateWebhookEndpointSecretMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const RotateWebhookEndpointSecretMutation = createMutation(\n+  \"rotateWebhookEndpointSecret\",\n+  (environment: Environment, input: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation RotateWebhookEndpointSecretMutation(\n+          $input: RotateWebhookEndpointSecretInput!\n+        ) {\n+          rotateWebhookEndpointSecret(input: $input) {\n+            endpoint {\n+              ...ConfigureWebhookEndpointContainer_webhookEndpoint\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          ...input,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default RotateWebhookEndpointSecretMutation;"
    },
    {
      "sha": "bc040a0c00373afa7bb01865f19700340eec836f",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/index.ts",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpoint/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,4 @@\n+export {\n+  default,\n+  default as ConfigureWebhookEndpointRoute,\n+} from \"./ConfigureWebhookEndpointRoute\";"
    },
    {
      "sha": "f8d294c916614f3ce5f2044feba2432e199a119d",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/ConfigureWebhookEndpointForm.tsx",
      "status": "added",
      "additions": 162,
      "deletions": 0,
      "changes": 162,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/ConfigureWebhookEndpointForm.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/ConfigureWebhookEndpointForm.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/ConfigureWebhookEndpointForm.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,162 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import { FORM_ERROR } from \"final-form\";\n+import { Match, Router, withRouter } from \"found\";\n+import React, { FunctionComponent, useCallback } from \"react\";\n+import { Field, Form } from \"react-final-form\";\n+\n+import getEndpointLink from \"coral-admin/helpers/getEndpointLink\";\n+import { InvalidRequestError } from \"coral-framework/lib/errors\";\n+import { colorFromMeta, ValidationMessage } from \"coral-framework/lib/form\";\n+import {\n+  graphql,\n+  useMutation,\n+  withFragmentContainer,\n+} from \"coral-framework/lib/relay\";\n+import {\n+  composeValidators,\n+  required,\n+  validateURL,\n+} from \"coral-framework/lib/validation\";\n+import {\n+  Button,\n+  CallOut,\n+  Flex,\n+  FormField,\n+  HorizontalGutter,\n+  Label,\n+  TextField,\n+} from \"coral-ui/components/v2\";\n+\n+import { ConfigureWebhookEndpointForm_settings } from \"coral-admin/__generated__/ConfigureWebhookEndpointForm_settings.graphql\";\n+import { ConfigureWebhookEndpointForm_webhookEndpoint } from \"coral-admin/__generated__/ConfigureWebhookEndpointForm_webhookEndpoint.graphql\";\n+\n+import CreateWebhookEndpointMutation from \"./CreateWebhookEndpointMutation\";\n+import EventsSelectField from \"./EventsSelectField\";\n+import UpdateWebhookEndpointMutation from \"./UpdateWebhookEndpointMutation\";\n+\n+interface Props {\n+  onCancel?: () => void;\n+  router: Router;\n+  match: Match;\n+  webhookEndpoint: ConfigureWebhookEndpointForm_webhookEndpoint | null;\n+  settings: ConfigureWebhookEndpointForm_settings;\n+}\n+\n+const ConfigureWebhookEndpointForm: FunctionComponent<Props> = ({\n+  onCancel,\n+  settings,\n+  webhookEndpoint,\n+  router,\n+}) => {\n+  const create = useMutation(CreateWebhookEndpointMutation);\n+  const update = useMutation(UpdateWebhookEndpointMutation);\n+  const onSubmit = useCallback(\n+    async values => {\n+      try {\n+        if (webhookEndpoint) {\n+          // The webhook endpoint was defined, update it.\n+          await update(values);\n+        } else {\n+          // The webhook endpoint wasn't defined, created it.\n+          const result = await create(values);\n+\n+          // Redirect the user to the new webhook endpoint page.\n+          router.push(getEndpointLink(result.endpoint.id));\n+\n+          // We don't need to close this modal because we are navigating...\n+        }\n+\n+        return;\n+      } catch (err) {\n+        if (err instanceof InvalidRequestError) {\n+          return err.invalidArgs;\n+        }\n+        return { [FORM_ERROR]: err.message };\n+      }\n+    },\n+    [webhookEndpoint, create, update, router]\n+  );\n+\n+  return (\n+    <Form\n+      onSubmit={onSubmit}\n+      initialValues={\n+        webhookEndpoint ? webhookEndpoint : { events: [], all: false, url: \"\" }\n+      }\n+    >\n+      {({ handleSubmit, submitting, submitError, pristine }) => (\n+        <form autoComplete=\"off\" onSubmit={handleSubmit}>\n+          <HorizontalGutter size=\"double\">\n+            {submitError && (\n+              <CallOut color=\"error\" fullWidth>\n+                {submitError}\n+              </CallOut>\n+            )}\n+            <Field\n+              name=\"url\"\n+              validate={composeValidators(required, validateURL)}\n+            >\n+              {({ input, meta }) => (\n+                <FormField>\n+                  <Localized id=\"configure-webhooks-endpointURL\">\n+                    <Label>Endpoint URL</Label>\n+                  </Localized>\n+                  <TextField\n+                    {...input}\n+                    placeholder=\"https://\"\n+                    color={colorFromMeta(meta)}\n+                    fullWidth\n+                  />\n+                  <ValidationMessage meta={meta} fullWidth />\n+                </FormField>\n+              )}\n+            </Field>\n+            <EventsSelectField settings={settings} />\n+            <Flex direction=\"row\" justifyContent=\"flex-end\" itemGutter>\n+              {onCancel && (\n+                <Localized id=\"configure-webhooks-cancelButton\">\n+                  <Button type=\"button\" color=\"mono\" onClick={onCancel}>\n+                    Cancel\n+                  </Button>\n+                </Localized>\n+              )}\n+              {webhookEndpoint ? (\n+                <Localized id=\"configure-webhooks-updateWebhookEndpointButton\">\n+                  <Button type=\"submit\" disabled={submitting || pristine}>\n+                    Update details\n+                  </Button>\n+                </Localized>\n+              ) : (\n+                <Localized id=\"configure-webhooks-addEndpointButton\">\n+                  <Button type=\"submit\" disabled={submitting}>\n+                    Add webhook endpoint\n+                  </Button>\n+                </Localized>\n+              )}\n+            </Flex>\n+          </HorizontalGutter>\n+        </form>\n+      )}\n+    </Form>\n+  );\n+};\n+\n+const enhanced = withRouter(\n+  withFragmentContainer<Props>({\n+    webhookEndpoint: graphql`\n+      fragment ConfigureWebhookEndpointForm_webhookEndpoint on WebhookEndpoint {\n+        id\n+        url\n+        events\n+        all\n+      }\n+    `,\n+    settings: graphql`\n+      fragment ConfigureWebhookEndpointForm_settings on Settings {\n+        ...EventsSelectField_settings\n+      }\n+    `,\n+  })(ConfigureWebhookEndpointForm)\n+);\n+\n+export default enhanced;"
    },
    {
      "sha": "398a6c673b4def02410ba931e9d4e6eb137dc4e2",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/CreateWebhookEndpointMutation.ts",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/CreateWebhookEndpointMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/CreateWebhookEndpointMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/CreateWebhookEndpointMutation.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,41 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { CreateWebhookEndpointMutation as MutationTypes } from \"coral-admin/__generated__/CreateWebhookEndpointMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const CreateWebhookEndpointMutation = createMutation(\n+  \"createWebhookEndpoint\",\n+  (environment: Environment, input: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation CreateWebhookEndpointMutation(\n+          $input: CreateWebhookEndpointInput!\n+        ) {\n+          createWebhookEndpoint(input: $input) {\n+            endpoint {\n+              id\n+            }\n+            settings {\n+              ...WebhookEndpointsConfigContainer_settings\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          ...input,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default CreateWebhookEndpointMutation;"
    },
    {
      "sha": "66c537a2ced3853b6f8d83db5f264f10d8b5e8e4",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/EventsSelectField.css",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/EventsSelectField.css",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/EventsSelectField.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/EventsSelectField.css?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,7 @@\n+.list {\n+  max-height: 295px;\n+}\n+\n+.event {\n+  font-family: monospace;\n+}"
    },
    {
      "sha": "fd5121a3842d8440cd7a79b8f01423e815c31f44",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/EventsSelectField.tsx",
      "status": "added",
      "additions": 152,
      "deletions": 0,
      "changes": 152,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/EventsSelectField.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/EventsSelectField.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/EventsSelectField.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,152 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent, useCallback } from \"react\";\n+import { useField } from \"react-final-form\";\n+\n+import { ValidationMessage } from \"coral-framework/lib/form\";\n+import { ExternalLink } from \"coral-framework/lib/i18n/components\";\n+import { graphql, withFragmentContainer } from \"coral-framework/lib/relay\";\n+import { validateWebhookEventSelection } from \"coral-framework/lib/validation\";\n+import { Typography } from \"coral-ui/components\";\n+import {\n+  Button,\n+  CheckBox,\n+  Flex,\n+  FormField,\n+  FormFieldDescription,\n+  HelperText,\n+  Label,\n+  ListGroup,\n+  ListGroupRow,\n+} from \"coral-ui/components/v2\";\n+\n+import {\n+  EventsSelectField_settings,\n+  WEBHOOK_EVENT_NAME,\n+} from \"coral-admin/__generated__/EventsSelectField_settings.graphql\";\n+\n+import styles from \"./EventsSelectField.css\";\n+\n+interface Props {\n+  settings: EventsSelectField_settings;\n+}\n+\n+const EventsSelectField: FunctionComponent<Props> = ({ settings }) => {\n+  const { input: all } = useField<boolean>(\"all\");\n+  const { input: events, meta } = useField<WEBHOOK_EVENT_NAME[]>(\"events\", {\n+    validate: validateWebhookEventSelection,\n+  });\n+\n+  const onClear = useCallback(() => {\n+    if (all.value) {\n+      all.onChange(false);\n+    } else {\n+      events.onChange([]);\n+    }\n+  }, [all, events]);\n+\n+  const onCheckChange = useCallback(\n+    (event: WEBHOOK_EVENT_NAME, selectedIndex: number) => () => {\n+      const changed = [...events.value];\n+      if (selectedIndex >= 0) {\n+        changed.splice(selectedIndex, 1);\n+      } else {\n+        changed.push(event);\n+      }\n+\n+      events.onChange(changed);\n+    },\n+    [events]\n+  );\n+\n+  const onRecieveAll = useCallback(() => {\n+    all.onChange(true);\n+  }, [all]);\n+\n+  return (\n+    <FormField>\n+      <Flex justifyContent=\"space-between\">\n+        <Localized id=\"configure-webhooks-eventsToSend\">\n+          <Label>Events to send</Label>\n+        </Localized>\n+        {(all.value || events.value.length > 0) && (\n+          <Localized id=\"configure-webhooks-clearEventsToSend\">\n+            <Button variant=\"text\" onClick={onClear}>\n+              Clear\n+            </Button>\n+          </Localized>\n+        )}\n+      </Flex>\n+      <Localized\n+        id=\"configure-webhooks-eventsToSendDescription\"\n+        externalLink={\n+          <ExternalLink href=\"https://github.com/coralproject/talk/blob/master/WEBHOOKS.md#events-listing\" />\n+        }\n+      >\n+        <FormFieldDescription>\n+          These are the events that are registered to this particular endpoint.\n+          Visit our{\" \"}\n+          <ExternalLink href=\"https://github.com/coralproject/talk/blob/master/WEBHOOKS.md#events-listing\">\n+            Webhook Guide\n+          </ExternalLink>{\" \"}\n+          for the schema of these events. Any event matching the following will\n+          be sent to the endpoint if it is enabled:\n+        </FormFieldDescription>\n+      </Localized>\n+      <ListGroup className={styles.list}>\n+        {settings.webhookEvents.map(event => {\n+          const selectedIndex = events.value.indexOf(event);\n+          return (\n+            <ListGroupRow key={event}>\n+              <CheckBox\n+                disabled={all.value}\n+                checked={all.value || selectedIndex >= 0}\n+                onChange={onCheckChange(event, selectedIndex)}\n+              >\n+                <Typography className={styles.event}>{event}</Typography>\n+              </CheckBox>\n+            </ListGroupRow>\n+          );\n+        })}\n+      </ListGroup>\n+      {all.value ? (\n+        <Localized id=\"configure-webhooks-allEvents\">\n+          <HelperText>\n+            The endpoint will receive all events, including any added in the\n+            future.\n+          </HelperText>\n+        </Localized>\n+      ) : events.value.length > 0 ? (\n+        <Localized\n+          id=\"configure-webhooks-selectedEvents\"\n+          $count={events.value.length}\n+        >\n+          <HelperText>{events.value.length} event selected.</HelperText>\n+        </Localized>\n+      ) : (\n+        <Localized\n+          id=\"configure-webhooks-selectAnEvent\"\n+          button={<Button variant=\"text\" onClick={onRecieveAll} />}\n+        >\n+          <HelperText>\n+            Select events above or{\" \"}\n+            <Button variant=\"text\" onClick={onRecieveAll}>\n+              receive all events\n+            </Button>\n+            .\n+          </HelperText>\n+        </Localized>\n+      )}\n+      <ValidationMessage meta={meta} fullWidth />\n+    </FormField>\n+  );\n+};\n+\n+const enhanced = withFragmentContainer<Props>({\n+  settings: graphql`\n+    fragment EventsSelectField_settings on Settings {\n+      webhookEvents\n+    }\n+  `,\n+})(EventsSelectField);\n+\n+export default enhanced;"
    },
    {
      "sha": "58bbe7ee680712836b10b6cab93b90e402d631a1",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/UpdateWebhookEndpointMutation.ts",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/UpdateWebhookEndpointMutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/UpdateWebhookEndpointMutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/UpdateWebhookEndpointMutation.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,38 @@\n+import { graphql } from \"react-relay\";\n+import { Environment } from \"relay-runtime\";\n+\n+import {\n+  commitMutationPromiseNormalized,\n+  createMutation,\n+  MutationInput,\n+} from \"coral-framework/lib/relay\";\n+\n+import { UpdateWebhookEndpointMutation as MutationTypes } from \"coral-admin/__generated__/UpdateWebhookEndpointMutation.graphql\";\n+\n+let clientMutationId = 0;\n+\n+const UpdateWebhookEndpointMutation = createMutation(\n+  \"updateWebhookEndpoint\",\n+  (environment: Environment, input: MutationInput<MutationTypes>) =>\n+    commitMutationPromiseNormalized<MutationTypes>(environment, {\n+      mutation: graphql`\n+        mutation UpdateWebhookEndpointMutation(\n+          $input: UpdateWebhookEndpointInput!\n+        ) {\n+          updateWebhookEndpoint(input: $input) {\n+            endpoint {\n+              ...ConfigureWebhookEndpointContainer_webhookEndpoint\n+            }\n+          }\n+        }\n+      `,\n+      variables: {\n+        input: {\n+          ...input,\n+          clientMutationId: (clientMutationId++).toString(),\n+        },\n+      },\n+    })\n+);\n+\n+export default UpdateWebhookEndpointMutation;"
    },
    {
      "sha": "90d30541c108c50f4c25d6624d4b8854ea7f8b16",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/index.ts",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/ConfigureWebhookEndpointForm/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,4 @@\n+export {\n+  default,\n+  default as ConfigureWebhookEndpointForm,\n+} from \"./ConfigureWebhookEndpointForm\";"
    },
    {
      "sha": "3d54c73b6bc4d365623c83df468fef12da200609",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/StatusMarker.css",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/StatusMarker.css",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/StatusMarker.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/StatusMarker.css?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,12 @@\n+.success {\n+  background-color: var(--v2-palette-success-main);\n+  border-color: var(--v2-palette-success-main);\n+  color: var(--v2-colors-pure-white);\n+}\n+\n+.error {\n+  background-color: var(--v2-palette-error-darkest);\n+  border-color: var(--v2-palette-error-darkest);\n+  color: var(--v2-colors-pure-white);\n+  font-weight: var(--v2-font-weight-primary-semi-bold);\n+}"
    },
    {
      "sha": "5ba47f004ea5958724fc0425b506f35078d9c592",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/StatusMarker.tsx",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/StatusMarker.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/StatusMarker.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/StatusMarker.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,23 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+\n+import { Marker } from \"coral-ui/components/v2\";\n+\n+import styles from \"./StatusMarker.css\";\n+\n+interface Props {\n+  enabled: boolean;\n+}\n+\n+const StatusMarker: FunctionComponent<Props> = ({ enabled }) =>\n+  enabled ? (\n+    <Localized id=\"configure-webhooks-enabledWebhookEndpoint\">\n+      <Marker className={styles.success}>Enabled</Marker>\n+    </Localized>\n+  ) : (\n+    <Localized id=\"configure-webhooks-disabledWebhookEndpoint\">\n+      <Marker className={styles.error}>Disabled</Marker>\n+    </Localized>\n+  );\n+\n+export default StatusMarker;"
    },
    {
      "sha": "1b5b25d5a6c08b8adbce85d8b54530d113cc1f30",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointRow.css",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointRow.css",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointRow.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointRow.css?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,10 @@\n+.urlColumn {\n+  width: 100%;\n+}\n+\n+.detailsButton {\n+  font-family: var(--v2-font-family-primary);\n+  font-weight: var(--v2-font-weight-primary-semi-bold);\n+  line-height: var(--v2-line-height-reset);\n+  font-size: var(--v2-font-size-2);\n+}"
    },
    {
      "sha": "ed63b620519678dee77d932735100d1ca1ac696e",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointRow.tsx",
      "status": "added",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointRow.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointRow.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointRow.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,56 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+\n+import getEndpointLink from \"coral-admin/helpers/getEndpointLink\";\n+import { graphql, withFragmentContainer } from \"coral-framework/lib/relay\";\n+import {\n+  Button,\n+  Flex,\n+  Icon,\n+  TableCell,\n+  TableRow,\n+} from \"coral-ui/components/v2\";\n+\n+import { WebhookEndpointRow_webhookEndpoint } from \"coral-admin/__generated__/WebhookEndpointRow_webhookEndpoint.graphql\";\n+\n+import StatusMarker from \"./StatusMarker\";\n+\n+import styles from \"./WebhookEndpointRow.css\";\n+\n+interface Props {\n+  endpoint: WebhookEndpointRow_webhookEndpoint;\n+}\n+\n+const WebhookEndpointRow: FunctionComponent<Props> = ({ endpoint }) => (\n+  <TableRow data-testid={`webhook-endpoint-${endpoint.id}`}>\n+    <TableCell className={styles.urlColumn}>{endpoint.url}</TableCell>\n+    <TableCell>\n+      <StatusMarker enabled={endpoint.enabled} />\n+    </TableCell>\n+    <TableCell>\n+      <Flex justifyContent=\"flex-end\">\n+        <Localized\n+          id=\"configure-webhooks-detailsButton\"\n+          icon={<Icon>keyboard_arrow_right</Icon>}\n+        >\n+          <Button variant=\"text\" to={getEndpointLink(endpoint.id)} iconRight>\n+            Details\n+            <Icon>keyboard_arrow_right</Icon>\n+          </Button>\n+        </Localized>\n+      </Flex>\n+    </TableCell>\n+  </TableRow>\n+);\n+\n+const enhanced = withFragmentContainer<Props>({\n+  endpoint: graphql`\n+    fragment WebhookEndpointRow_webhookEndpoint on WebhookEndpoint {\n+      id\n+      enabled\n+      url\n+    }\n+  `,\n+})(WebhookEndpointRow);\n+\n+export default enhanced;"
    },
    {
      "sha": "8b718dbc11402e858a0d9c5a9a697fa7fbc7e9b8",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsConfigContainer.tsx",
      "status": "added",
      "additions": 115,
      "deletions": 0,
      "changes": 115,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsConfigContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsConfigContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsConfigContainer.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,115 @@\n+import { Localized } from \"@fluent/react/compat\";\n+import React, { FunctionComponent } from \"react\";\n+\n+import { urls } from \"coral-framework/helpers\";\n+import { ExternalLink } from \"coral-framework/lib/i18n/components\";\n+import { graphql, withFragmentContainer } from \"coral-framework/lib/relay\";\n+import {\n+  Button,\n+  CallOut,\n+  FormFieldDescription,\n+  HorizontalGutter,\n+  Icon,\n+  Table,\n+  TableBody,\n+  TableCell,\n+  TableHead,\n+  TableRow,\n+} from \"coral-ui/components/v2\";\n+\n+import { WebhookEndpointsConfigContainer_settings } from \"coral-admin/__generated__/WebhookEndpointsConfigContainer_settings.graphql\";\n+\n+import ConfigBox from \"../../ConfigBox\";\n+import Header from \"../../Header\";\n+import Subheader from \"../../Subheader\";\n+import WebhookEndpointRow from \"./WebhookEndpointRow\";\n+\n+interface Props {\n+  settings: WebhookEndpointsConfigContainer_settings;\n+}\n+\n+const WebhookEndpointsConfigContainer: FunctionComponent<Props> = ({\n+  settings,\n+}) => {\n+  return (\n+    <HorizontalGutter size=\"double\" data-testid=\"webhooks-container\">\n+      <ConfigBox\n+        title={\n+          <Localized id=\"configure-webhooks-header-title\">\n+            <Header htmlFor=\"configure-webhooks-header.title\">Webhooks</Header>\n+          </Localized>\n+        }\n+      >\n+        <Localized\n+          id=\"configure-webhooks-description\"\n+          externalLink={\n+            <ExternalLink href=\"https://docs.coralproject.net/coral/v5/integrating/webhooks/\" />\n+          }\n+        >\n+          <FormFieldDescription>\n+            Configure an endpoint to send events to when events occur within\n+            Coral. These events will be JSON encoded and signed. To learn more\n+            about webhook signing, visit our{\" \"}\n+            <ExternalLink href=\"https://docs.coralproject.net/coral/v5/integrating/webhooks/\">\n+              our docs\n+            </ExternalLink>\n+            .\n+          </FormFieldDescription>\n+        </Localized>\n+        <Button\n+          to={urls.admin.addWebhookEndpoint}\n+          iconLeft\n+          data-testid=\"add-webhook-endpoint\"\n+        >\n+          <Icon size=\"md\">add</Icon>\n+          <Localized id=\"configure-webhooks-addEndpointButton\">\n+            Add webhook endpoint\n+          </Localized>\n+        </Button>\n+        <Localized id=\"configure-webhooks-endpoints\">\n+          <Subheader>Endpoints</Subheader>\n+        </Localized>\n+        {settings.webhooks.endpoints.length > 0 ? (\n+          <Table fullWidth>\n+            <TableHead>\n+              <TableRow>\n+                <Localized id=\"configure-webhooks-url\">\n+                  <TableCell>URL</TableCell>\n+                </Localized>\n+                <Localized id=\"configure-webhooks-status\">\n+                  <TableCell>Status</TableCell>\n+                </Localized>\n+                <TableCell />\n+              </TableRow>\n+            </TableHead>\n+            <TableBody>\n+              {settings.webhooks.endpoints.map((endpoint, idx) => (\n+                <WebhookEndpointRow key={idx} endpoint={endpoint} />\n+              ))}\n+            </TableBody>\n+          </Table>\n+        ) : (\n+          <Localized id=\"configure-webhooks-noEndpoints\">\n+            <CallOut color=\"regular\" fullWidth>\n+              There are no webhook endpoints configured, add one above.\n+            </CallOut>\n+          </Localized>\n+        )}\n+      </ConfigBox>\n+    </HorizontalGutter>\n+  );\n+};\n+\n+const enhanced = withFragmentContainer<Props>({\n+  settings: graphql`\n+    fragment WebhookEndpointsConfigContainer_settings on Settings {\n+      webhooks {\n+        endpoints {\n+          ...WebhookEndpointRow_webhookEndpoint\n+        }\n+      }\n+    }\n+  `,\n+})(WebhookEndpointsConfigContainer);\n+\n+export default enhanced;"
    },
    {
      "sha": "d4ffd72f5fc4afb3e1cbc005ad4d325c4353debc",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsConfigRoute.tsx",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsConfigRoute.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsConfigRoute.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsConfigRoute.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,37 @@\n+import React, { FunctionComponent } from \"react\";\n+import { graphql } from \"react-relay\";\n+\n+import { withRouteConfig } from \"coral-framework/lib/router\";\n+import { Delay, Spinner } from \"coral-ui/components/v2\";\n+\n+import { WebhookEndpointsConfigRouteQueryResponse } from \"coral-admin/__generated__/WebhookEndpointsConfigRouteQuery.graphql\";\n+\n+import WebhookEndpointsConfigContainer from \"./WebhookEndpointsConfigContainer\";\n+\n+interface Props {\n+  data: WebhookEndpointsConfigRouteQueryResponse | null;\n+}\n+\n+const WebhookEndpointsConfigRoute: FunctionComponent<Props> = ({ data }) => {\n+  if (!data) {\n+    return (\n+      <Delay>\n+        <Spinner />\n+      </Delay>\n+    );\n+  }\n+\n+  return <WebhookEndpointsConfigContainer settings={data.settings} />;\n+};\n+\n+const enhanced = withRouteConfig<Props>({\n+  query: graphql`\n+    query WebhookEndpointsConfigRouteQuery {\n+      settings {\n+        ...WebhookEndpointsConfigContainer_settings\n+      }\n+    }\n+  `,\n+})(WebhookEndpointsConfigRoute);\n+\n+export default enhanced;"
    },
    {
      "sha": "fcfdf143c5334a5baf680649d5639cec5848a21d",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsLayout.tsx",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsLayout.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsLayout.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/WebhookEndpointsLayout.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,27 @@\n+import React, { FunctionComponent } from \"react\";\n+\n+import MainLayout from \"coral-admin/components/MainLayout\";\n+\n+import ConfigureLinks from \"../../ConfigureLinks\";\n+import Layout from \"../../Layout\";\n+import Main from \"../../Main\";\n+import SideBar from \"../../SideBar\";\n+\n+interface Props {\n+  children: React.ReactElement;\n+}\n+\n+const WebhookEndpointsLayout: FunctionComponent<Props> = props => {\n+  return (\n+    <MainLayout>\n+      <Layout>\n+        <SideBar>\n+          <ConfigureLinks />\n+        </SideBar>\n+        <Main>{props.children}</Main>\n+      </Layout>\n+    </MainLayout>\n+  );\n+};\n+\n+export default WebhookEndpointsLayout;"
    },
    {
      "sha": "715c90381fac78748524ba3721c94b721e3d3e43",
      "filename": "src/core/client/admin/routes/Configure/sections/WebhookEndpoints/index.ts",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/WebhookEndpoints/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,8 @@\n+export {\n+  default,\n+  default as WebhookEndpointsConfigRoute,\n+} from \"./WebhookEndpointsConfigRoute\";\n+export { default as AddWebhookEndpointRoute } from \"./AddWebhookEndpoint\";\n+export {\n+  default as ConfigureWebhookEndpointRoute,\n+} from \"./ConfigureWebhookEndpoint\";"
    },
    {
      "sha": "cff9bfbb7a179fa7550705594689b024b6fdef54",
      "filename": "src/core/client/admin/routes/Configure/sections/index.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/routes/Configure/sections/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/routes/Configure/sections/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -6,3 +6,8 @@ export { ModerationConfigRoute } from \"./Moderation\";\n export { OrganizationConfigRoute } from \"./Organization\";\n export { WordListConfigRoute } from \"./WordList\";\n export { SlackConfigRoute } from \"./Slack\";\n+export {\n+  WebhookEndpointsConfigRoute,\n+  ConfigureWebhookEndpointRoute,\n+  AddWebhookEndpointRoute,\n+} from \"./WebhookEndpoints\";"
    },
    {
      "sha": "fcf9f9386408c7765fe4171072ac2cd7a0c34203",
      "filename": "src/core/client/admin/test/configure/__snapshots__/advanced.spec.tsx.snap",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/advanced.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/advanced.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/advanced.spec.tsx.snap?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -88,6 +88,15 @@ exports[`renders configure advanced 1`] = `\n                   Slack\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/webhooks\"\n+                  onClick={[Function]}\n+                >\n+                  Webhooks\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link Link-linkActive\""
    },
    {
      "sha": "40e92c098a2a741aa9d5225545abb9e4f5f6fc58",
      "filename": "src/core/client/admin/test/configure/__snapshots__/auth.spec.tsx.snap",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/auth.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/auth.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/auth.spec.tsx.snap?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -88,6 +88,15 @@ exports[`renders configure auth 1`] = `\n                   Slack\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/webhooks\"\n+                  onClick={[Function]}\n+                >\n+                  Webhooks\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link\""
    },
    {
      "sha": "37348ec4774b108c8d5cd3ae9e00836e86ad8983",
      "filename": "src/core/client/admin/test/configure/__snapshots__/general.spec.tsx.snap",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/general.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/general.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/general.spec.tsx.snap?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -88,6 +88,15 @@ exports[`renders configure general 1`] = `\n                   Slack\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/webhooks\"\n+                  onClick={[Function]}\n+                >\n+                  Webhooks\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link\""
    },
    {
      "sha": "3a30fdf737ed975ac35f1600a54be83ed41dae08",
      "filename": "src/core/client/admin/test/configure/__snapshots__/moderation.spec.tsx.snap",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/moderation.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/moderation.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/moderation.spec.tsx.snap?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -88,6 +88,15 @@ exports[`renders configure moderation 1`] = `\n                   Slack\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/webhooks\"\n+                  onClick={[Function]}\n+                >\n+                  Webhooks\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link\""
    },
    {
      "sha": "ec52a1a95856cce3bb7bbbc9f87e767f36b67843",
      "filename": "src/core/client/admin/test/configure/__snapshots__/organization.spec.tsx.snap",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/organization.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/organization.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/organization.spec.tsx.snap?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -88,6 +88,15 @@ exports[`renders configure organization 1`] = `\n                   Slack\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/webhooks\"\n+                  onClick={[Function]}\n+                >\n+                  Webhooks\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link\"\n@@ -320,7 +329,7 @@ moderation questions.\n                   Add a new site to your organization or edit an existing site's details.\n                 </p>\n                 <a\n-                  className=\"BaseButton-root Button-root Button-sizeLarge Button-colorRegular Button-variantRegular Button-uppercase Button-iconLeft\"\n+                  className=\"BaseButton-root Button-root Button-sizeRegular Button-colorRegular Button-variantRegular Button-uppercase Button-iconLeft\"\n                   data-color=\"regular\"\n                   data-variant=\"regular\"\n                   href=\"/admin/configure/organization/sites/new\""
    },
    {
      "sha": "b1706d9b4bb320939140045eb705b0180d71cdd8",
      "filename": "src/core/client/admin/test/configure/__snapshots__/webhooks.spec.tsx.snap",
      "status": "added",
      "additions": 525,
      "deletions": 0,
      "changes": 525,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/webhooks.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/webhooks.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/webhooks.spec.tsx.snap?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,525 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`displays a list of webhook endpoints that have been configured 1`] = `\n+<div\n+  className=\"Box-root HorizontalGutter-root HorizontalGutter-double\"\n+  data-testid=\"webhooks-container\"\n+>\n+  <div\n+    className=\"Box-root ConfigBox-root\"\n+  >\n+    <div\n+      className=\"Box-root Flex-root ConfigBox-title Flex-flex Flex-justifySpaceBetween\"\n+    >\n+      <div>\n+        <label\n+          className=\"Header-root\"\n+          htmlFor=\"configure-webhooks-header.title\"\n+        >\n+          Configure webhook endpoint\n+        </label>\n+      </div>\n+      <div />\n+    </div>\n+    <div\n+      className=\"ConfigBox-content\"\n+    >\n+      <div\n+        className=\"Box-root HorizontalGutter-root HorizontalGutter-spacing-4\"\n+      >\n+        <p\n+          className=\"FormFieldDescription-root\"\n+        >\n+          Configure an endpoint to send events to when events occur within\n+Coral. These events will be JSON encoded and signed. To learn more\n+about webhook signing, visit our \n+          <a\n+            className=\"ExternalLink-root\"\n+            href=\"https://docs.coralproject.net/coral/v5/integrating/webhooks/\"\n+            rel=\"noopener noreferrer\"\n+            target=\"_blank\"\n+          >\n+            Webhook Guide\n+          </a>\n+          .\n+        </p>\n+        <a\n+          className=\"BaseButton-root Button-root Button-sizeRegular Button-colorRegular Button-variantRegular Button-uppercase Button-iconLeft\"\n+          data-color=\"regular\"\n+          data-testid=\"add-webhook-endpoint\"\n+          data-variant=\"regular\"\n+          href=\"/admin/configure/webhooks/add\"\n+          onBlur={[Function]}\n+          onClick={[Function]}\n+          onFocus={[Function]}\n+          onMouseOut={[Function]}\n+          onMouseOver={[Function]}\n+          onTouchEnd={[Function]}\n+          type=\"button\"\n+        >\n+          <i\n+            aria-hidden=\"true\"\n+            className=\"Icon-root Icon-md\"\n+          >\n+            add\n+          </i>\n+          Add webhook endpoint\n+        </a>\n+        <h3\n+          className=\"Subheader-root\"\n+        >\n+          Endpoints\n+        </h3>\n+        <table\n+          className=\"Table-root Table-fullWidth\"\n+        >\n+          <thead\n+            className=\"TableHead-root\"\n+          >\n+            <tr\n+              className=\"TableRow-root\"\n+            >\n+              <th\n+                className=\"TableCell-root TableCell-header\"\n+              >\n+                URL\n+              </th>\n+              <th\n+                className=\"TableCell-root TableCell-header\"\n+              >\n+                Status\n+              </th>\n+              <th\n+                className=\"TableCell-root TableCell-header\"\n+              />\n+            </tr>\n+          </thead>\n+          <tbody\n+            className=\"TableBody-root\"\n+          >\n+            <tr\n+              className=\"TableRow-root TableRow-body\"\n+              data-testid=\"webhook-endpoint-webhook-endpoint-1\"\n+            >\n+              <td\n+                className=\"TableCell-root WebhookEndpointRow-urlColumn TableCell-body\"\n+              >\n+                http://example.com/webhook-endpoint-1\n+              </td>\n+              <td\n+                className=\"TableCell-root TableCell-body\"\n+              >\n+                <span\n+                  className=\"Marker-root StatusMarker-success Marker-colorPending Marker-variantRegular\"\n+                >\n+                  Enabled\n+                </span>\n+              </td>\n+              <td\n+                className=\"TableCell-root TableCell-body\"\n+              >\n+                <div\n+                  className=\"Box-root Flex-root Flex-flex Flex-justifyFlexEnd\"\n+                >\n+                  <a\n+                    className=\"BaseButton-root Button-root Button-sizeRegular Button-colorRegular Button-variantText Button-uppercase Button-iconRight\"\n+                    data-color=\"regular\"\n+                    data-variant=\"text\"\n+                    href=\"/admin/configure/webhooks/endpoint/webhook-endpoint-1\"\n+                    onBlur={[Function]}\n+                    onClick={[Function]}\n+                    onFocus={[Function]}\n+                    onMouseOut={[Function]}\n+                    onMouseOver={[Function]}\n+                    onTouchEnd={[Function]}\n+                    type=\"button\"\n+                  >\n+                    Details \n+                    <i\n+                      aria-hidden=\"true\"\n+                      className=\"Icon-root Icon-sm\"\n+                    >\n+                      keyboard_arrow_right\n+                    </i>\n+                  </a>\n+                </div>\n+              </td>\n+            </tr>\n+            <tr\n+              className=\"TableRow-root TableRow-body\"\n+              data-testid=\"webhook-endpoint-webhook-endpoint-2\"\n+            >\n+              <td\n+                className=\"TableCell-root WebhookEndpointRow-urlColumn TableCell-body\"\n+              >\n+                http://example.com/webhook-endpoint-2\n+              </td>\n+              <td\n+                className=\"TableCell-root TableCell-body\"\n+              >\n+                <span\n+                  className=\"Marker-root StatusMarker-error Marker-colorPending Marker-variantRegular\"\n+                >\n+                  Disabled\n+                </span>\n+              </td>\n+              <td\n+                className=\"TableCell-root TableCell-body\"\n+              >\n+                <div\n+                  className=\"Box-root Flex-root Flex-flex Flex-justifyFlexEnd\"\n+                >\n+                  <a\n+                    className=\"BaseButton-root Button-root Button-sizeRegular Button-colorRegular Button-variantText Button-uppercase Button-iconRight\"\n+                    data-color=\"regular\"\n+                    data-variant=\"text\"\n+                    href=\"/admin/configure/webhooks/endpoint/webhook-endpoint-2\"\n+                    onBlur={[Function]}\n+                    onClick={[Function]}\n+                    onFocus={[Function]}\n+                    onMouseOut={[Function]}\n+                    onMouseOver={[Function]}\n+                    onTouchEnd={[Function]}\n+                    type=\"button\"\n+                  >\n+                    Details \n+                    <i\n+                      aria-hidden=\"true\"\n+                      className=\"Icon-root Icon-sm\"\n+                    >\n+                      keyboard_arrow_right\n+                    </i>\n+                  </a>\n+                </div>\n+              </td>\n+            </tr>\n+          </tbody>\n+        </table>\n+      </div>\n+    </div>\n+  </div>\n+</div>\n+`;\n+\n+exports[`goes to add new webhook endpoint when clicking add 1`] = `\n+<div\n+  className=\"Box-root HorizontalGutter-root HorizontalGutter-double\"\n+  data-testid=\"webhooks-container\"\n+>\n+  <div\n+    className=\"Box-root ConfigBox-root\"\n+  >\n+    <div\n+      className=\"Box-root Flex-root ConfigBox-title Flex-flex Flex-justifySpaceBetween\"\n+    >\n+      <div>\n+        <label\n+          className=\"Header-root\"\n+          htmlFor=\"configure-webhooks-header.title\"\n+        >\n+          Configure webhook endpoint\n+        </label>\n+      </div>\n+      <div />\n+    </div>\n+    <div\n+      className=\"ConfigBox-content\"\n+    >\n+      <div\n+        className=\"Box-root HorizontalGutter-root HorizontalGutter-spacing-4\"\n+      >\n+        <p\n+          className=\"FormFieldDescription-root\"\n+        >\n+          Configure an endpoint to send events to when events occur within\n+Coral. These events will be JSON encoded and signed. To learn more\n+about webhook signing, visit our \n+          <a\n+            className=\"ExternalLink-root\"\n+            href=\"https://docs.coralproject.net/coral/v5/integrating/webhooks/\"\n+            rel=\"noopener noreferrer\"\n+            target=\"_blank\"\n+          >\n+            Webhook Guide\n+          </a>\n+          .\n+        </p>\n+        <a\n+          className=\"BaseButton-root Button-root Button-sizeRegular Button-colorRegular Button-variantRegular Button-uppercase Button-iconLeft\"\n+          data-color=\"regular\"\n+          data-testid=\"add-webhook-endpoint\"\n+          data-variant=\"regular\"\n+          href=\"/admin/configure/webhooks/add\"\n+          onBlur={[Function]}\n+          onClick={[Function]}\n+          onFocus={[Function]}\n+          onMouseOut={[Function]}\n+          onMouseOver={[Function]}\n+          onTouchEnd={[Function]}\n+          type=\"button\"\n+        >\n+          <i\n+            aria-hidden=\"true\"\n+            className=\"Icon-root Icon-md\"\n+          >\n+            add\n+          </i>\n+          Add webhook endpoint\n+        </a>\n+        <h3\n+          className=\"Subheader-root\"\n+        >\n+          Endpoints\n+        </h3>\n+        <div\n+          className=\"CallOut-root CallOut-colorRegular CallOut-fullWidth\"\n+        >\n+          <div\n+            className=\"CallOut-inner\"\n+          >\n+            There are no webhook endpoints configured, add one above.\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  </div>\n+</div>\n+`;\n+\n+exports[`goes to the webhook endpoint configuration page when selected 1`] = `\n+<div\n+  className=\"Box-root HorizontalGutter-root HorizontalGutter-double\"\n+  data-testid=\"webhooks-container\"\n+>\n+  <div\n+    className=\"Box-root ConfigBox-root\"\n+  >\n+    <div\n+      className=\"Box-root Flex-root ConfigBox-title Flex-flex Flex-justifySpaceBetween\"\n+    >\n+      <div>\n+        <label\n+          className=\"Header-root\"\n+          htmlFor=\"configure-webhooks-header.title\"\n+        >\n+          Configure webhook endpoint\n+        </label>\n+      </div>\n+      <div />\n+    </div>\n+    <div\n+      className=\"ConfigBox-content\"\n+    >\n+      <div\n+        className=\"Box-root HorizontalGutter-root HorizontalGutter-spacing-4\"\n+      >\n+        <p\n+          className=\"FormFieldDescription-root\"\n+        >\n+          Configure an endpoint to send events to when events occur within\n+Coral. These events will be JSON encoded and signed. To learn more\n+about webhook signing, visit our \n+          <a\n+            className=\"ExternalLink-root\"\n+            href=\"https://docs.coralproject.net/coral/v5/integrating/webhooks/\"\n+            rel=\"noopener noreferrer\"\n+            target=\"_blank\"\n+          >\n+            Webhook Guide\n+          </a>\n+          .\n+        </p>\n+        <a\n+          className=\"BaseButton-root Button-root Button-sizeRegular Button-colorRegular Button-variantRegular Button-uppercase Button-iconLeft\"\n+          data-color=\"regular\"\n+          data-testid=\"add-webhook-endpoint\"\n+          data-variant=\"regular\"\n+          href=\"/admin/configure/webhooks/add\"\n+          onBlur={[Function]}\n+          onClick={[Function]}\n+          onFocus={[Function]}\n+          onMouseOut={[Function]}\n+          onMouseOver={[Function]}\n+          onTouchEnd={[Function]}\n+          type=\"button\"\n+        >\n+          <i\n+            aria-hidden=\"true\"\n+            className=\"Icon-root Icon-md\"\n+          >\n+            add\n+          </i>\n+          Add webhook endpoint\n+        </a>\n+        <h3\n+          className=\"Subheader-root\"\n+        >\n+          Endpoints\n+        </h3>\n+        <table\n+          className=\"Table-root Table-fullWidth\"\n+        >\n+          <thead\n+            className=\"TableHead-root\"\n+          >\n+            <tr\n+              className=\"TableRow-root\"\n+            >\n+              <th\n+                className=\"TableCell-root TableCell-header\"\n+              >\n+                URL\n+              </th>\n+              <th\n+                className=\"TableCell-root TableCell-header\"\n+              >\n+                Status\n+              </th>\n+              <th\n+                className=\"TableCell-root TableCell-header\"\n+              />\n+            </tr>\n+          </thead>\n+          <tbody\n+            className=\"TableBody-root\"\n+          >\n+            <tr\n+              className=\"TableRow-root TableRow-body\"\n+              data-testid=\"webhook-endpoint-webhook-endpoint-1\"\n+            >\n+              <td\n+                className=\"TableCell-root WebhookEndpointRow-urlColumn TableCell-body\"\n+              >\n+                http://example.com/webhook-endpoint-1\n+              </td>\n+              <td\n+                className=\"TableCell-root TableCell-body\"\n+              >\n+                <span\n+                  className=\"Marker-root StatusMarker-success Marker-colorPending Marker-variantRegular\"\n+                >\n+                  Enabled\n+                </span>\n+              </td>\n+              <td\n+                className=\"TableCell-root TableCell-body\"\n+              >\n+                <div\n+                  className=\"Box-root Flex-root Flex-flex Flex-justifyFlexEnd\"\n+                >\n+                  <a\n+                    className=\"BaseButton-root Button-root Button-sizeRegular Button-colorRegular Button-variantText Button-uppercase Button-iconRight\"\n+                    data-color=\"regular\"\n+                    data-variant=\"text\"\n+                    href=\"/admin/configure/webhooks/endpoint/webhook-endpoint-1\"\n+                    onBlur={[Function]}\n+                    onClick={[Function]}\n+                    onFocus={[Function]}\n+                    onMouseOut={[Function]}\n+                    onMouseOver={[Function]}\n+                    onTouchEnd={[Function]}\n+                    type=\"button\"\n+                  >\n+                    Details \n+                    <i\n+                      aria-hidden=\"true\"\n+                      className=\"Icon-root Icon-sm\"\n+                    >\n+                      keyboard_arrow_right\n+                    </i>\n+                  </a>\n+                </div>\n+              </td>\n+            </tr>\n+          </tbody>\n+        </table>\n+      </div>\n+    </div>\n+  </div>\n+</div>\n+`;\n+\n+exports[`renders webhooks 1`] = `\n+<div\n+  className=\"Box-root HorizontalGutter-root HorizontalGutter-double\"\n+  data-testid=\"webhooks-container\"\n+>\n+  <div\n+    className=\"Box-root ConfigBox-root\"\n+  >\n+    <div\n+      className=\"Box-root Flex-root ConfigBox-title Flex-flex Flex-justifySpaceBetween\"\n+    >\n+      <div>\n+        <label\n+          className=\"Header-root\"\n+          htmlFor=\"configure-webhooks-header.title\"\n+        >\n+          Configure webhook endpoint\n+        </label>\n+      </div>\n+      <div />\n+    </div>\n+    <div\n+      className=\"ConfigBox-content\"\n+    >\n+      <div\n+        className=\"Box-root HorizontalGutter-root HorizontalGutter-spacing-4\"\n+      >\n+        <p\n+          className=\"FormFieldDescription-root\"\n+        >\n+          Configure an endpoint to send events to when events occur within\n+Coral. These events will be JSON encoded and signed. To learn more\n+about webhook signing, visit our \n+          <a\n+            className=\"ExternalLink-root\"\n+            href=\"https://docs.coralproject.net/coral/v5/integrating/webhooks/\"\n+            rel=\"noopener noreferrer\"\n+            target=\"_blank\"\n+          >\n+            Webhook Guide\n+          </a>\n+          .\n+        </p>\n+        <a\n+          className=\"BaseButton-root Button-root Button-sizeRegular Button-colorRegular Button-variantRegular Button-uppercase Button-iconLeft\"\n+          data-color=\"regular\"\n+          data-testid=\"add-webhook-endpoint\"\n+          data-variant=\"regular\"\n+          href=\"/admin/configure/webhooks/add\"\n+          onBlur={[Function]}\n+          onClick={[Function]}\n+          onFocus={[Function]}\n+          onMouseOut={[Function]}\n+          onMouseOver={[Function]}\n+          onTouchEnd={[Function]}\n+          type=\"button\"\n+        >\n+          <i\n+            aria-hidden=\"true\"\n+            className=\"Icon-root Icon-md\"\n+          >\n+            add\n+          </i>\n+          Add webhook endpoint\n+        </a>\n+        <h3\n+          className=\"Subheader-root\"\n+        >\n+          Endpoints\n+        </h3>\n+        <div\n+          className=\"CallOut-root CallOut-colorRegular CallOut-fullWidth\"\n+        >\n+          <div\n+            className=\"CallOut-inner\"\n+          >\n+            There are no webhook endpoints configured, add one above.\n+          </div>\n+        </div>\n+      </div>\n+    </div>\n+  </div>\n+</div>\n+`;"
    },
    {
      "sha": "009bfc4749035c5a678fcaada29feb0348ffd113",
      "filename": "src/core/client/admin/test/configure/__snapshots__/wordList.spec.tsx.snap",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/wordList.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/__snapshots__/wordList.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/__snapshots__/wordList.spec.tsx.snap?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -88,6 +88,15 @@ exports[`renders configure wordList 1`] = `\n                   Slack\n                 </a>\n               </li>\n+              <li>\n+                <a\n+                  className=\"Link-link\"\n+                  href=\"/admin/configure/webhooks\"\n+                  onClick={[Function]}\n+                >\n+                  Webhooks\n+                </a>\n+              </li>\n               <li>\n                 <a\n                   className=\"Link-link\""
    },
    {
      "sha": "b003ce50c5478e1c5b37e12fd789af64dd30b3b9",
      "filename": "src/core/client/admin/test/configure/webhooks.spec.tsx",
      "status": "added",
      "additions": 182,
      "deletions": 0,
      "changes": 182,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/webhooks.spec.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/configure/webhooks.spec.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/configure/webhooks.spec.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,182 @@\n+import { noop } from \"lodash\";\n+\n+import { pureMerge } from \"coral-common/utils\";\n+import { GQLResolver } from \"coral-framework/schema\";\n+import {\n+  act,\n+  createResolversStub,\n+  CreateTestRendererParams,\n+  replaceHistoryLocation,\n+  wait,\n+  waitForElement,\n+  within,\n+} from \"coral-framework/testHelpers\";\n+\n+import create from \"../create\";\n+import { settings, users } from \"../fixtures\";\n+\n+beforeEach(async () => {\n+  replaceHistoryLocation(\"http://localhost/admin/configure/webhooks\");\n+});\n+\n+const viewer = users.admins[0];\n+\n+async function createTestRenderer(\n+  params: CreateTestRendererParams<GQLResolver> = {}\n+) {\n+  const { testRenderer, context } = create({\n+    ...params,\n+    resolvers: pureMerge(\n+      createResolversStub<GQLResolver>({\n+        Query: {\n+          settings: () => settings,\n+          viewer: () => viewer,\n+        },\n+      }),\n+      params.resolvers\n+    ),\n+    initLocalState: (localRecord, source, environment) => {\n+      if (params.initLocalState) {\n+        params.initLocalState(localRecord, source, environment);\n+      }\n+    },\n+  });\n+\n+  return await act(async () => {\n+    const container = await waitForElement(() =>\n+      within(testRenderer.root).getByTestID(\"webhooks-container\")\n+    );\n+\n+    return { testRenderer, container, context };\n+  });\n+}\n+\n+it(\"renders webhooks\", async () => {\n+  const { container } = await createTestRenderer();\n+  await act(async () => {\n+    await wait(() => {\n+      expect(within(container).toJSON()).toMatchSnapshot();\n+    });\n+  });\n+});\n+\n+it(\"goes to add new webhook endpoint when clicking add\", async () => {\n+  const {\n+    container,\n+    context: { transitionControl },\n+  } = await createTestRenderer();\n+\n+  // Prevent router transitions.\n+  transitionControl.allowTransition = false;\n+\n+  act(() => {\n+    within(container)\n+      .getByText(/Add webhook endpoint/)\n+      .props.onClick({ button: 0, preventDefault: noop });\n+  });\n+\n+  // Expect a routing request was made to the right url.\n+  await act(async () => {\n+    await wait(() => {\n+      expect(transitionControl.history[0].pathname).toBe(\n+        \"/admin/configure/webhooks/add\"\n+      );\n+    });\n+  });\n+\n+  await act(async () => {\n+    await wait(() => {\n+      expect(within(container).toJSON()).toMatchSnapshot();\n+    });\n+  });\n+});\n+\n+it(\"displays a list of webhook endpoints that have been configured\", async () => {\n+  const resolvers = createResolversStub<GQLResolver>({\n+    Query: {\n+      settings: () =>\n+        pureMerge<typeof settings>(settings, {\n+          webhooks: {\n+            endpoints: [\n+              {\n+                id: \"webhook-endpoint-1\",\n+                enabled: true,\n+                url: \"http://example.com/webhook-endpoint-1\",\n+                all: true,\n+                events: [],\n+              },\n+              {\n+                id: \"webhook-endpoint-2\",\n+                enabled: false,\n+                url: \"http://example.com/webhook-endpoint-2\",\n+                all: true,\n+                events: [],\n+              },\n+            ],\n+          },\n+        }),\n+    },\n+  });\n+  const { container } = await createTestRenderer({ resolvers });\n+\n+  await act(async () => {\n+    await wait(() => {\n+      expect(within(container).toJSON()).toMatchSnapshot();\n+    });\n+  });\n+});\n+\n+it(\"goes to the webhook endpoint configuration page when selected\", async () => {\n+  const resolvers = createResolversStub<GQLResolver>({\n+    Query: {\n+      settings: () =>\n+        pureMerge<typeof settings>(settings, {\n+          webhooks: {\n+            endpoints: [\n+              {\n+                id: \"webhook-endpoint-1\",\n+                enabled: true,\n+                url: \"http://example.com/webhook-endpoint-1\",\n+                all: true,\n+                events: [],\n+              },\n+            ],\n+          },\n+        }),\n+    },\n+  });\n+  const {\n+    container,\n+    context: { transitionControl },\n+  } = await createTestRenderer({ resolvers });\n+\n+  // Prevent router transitions.\n+  transitionControl.allowTransition = false;\n+\n+  act(() => {\n+    const row = within(container).getByTestID(\n+      \"webhook-endpoint-webhook-endpoint-1\"\n+    );\n+\n+    within(row)\n+      .getByText(/Details/, {\n+        selector: \"a\",\n+      })\n+      .props.onClick({ button: 0, preventDefault: noop });\n+  });\n+\n+  // Expect a routing request was made to the right url.\n+  await act(async () => {\n+    await wait(() => {\n+      expect(transitionControl.history[0].pathname).toBe(\n+        \"/admin/configure/webhooks/endpoint/webhook-endpoint-1\"\n+      );\n+    });\n+  });\n+\n+  await act(async () => {\n+    await wait(() => {\n+      expect(within(container).toJSON()).toMatchSnapshot();\n+    });\n+  });\n+});"
    },
    {
      "sha": "2c74572fcee0e89371081644462b4fad6829563e",
      "filename": "src/core/client/admin/test/fixtures.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/fixtures.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/admin/test/fixtures.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/test/fixtures.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -23,6 +23,7 @@ import {\n   GQLUSER_ROLE,\n   GQLUSER_STATUS,\n   GQLUsersConnection,\n+  GQLWEBHOOK_EVENT_NAME,\n } from \"coral-framework/schema\";\n import { createFixture, createFixtures } from \"coral-framework/testHelpers\";\n \n@@ -152,6 +153,10 @@ export const settings = createFixture<GQLSettings>({\n       },\n     },\n   },\n+  webhooks: {\n+    endpoints: [],\n+  },\n+  webhookEvents: [GQLWEBHOOK_EVENT_NAME.STORY_CREATED],\n   stories: {\n     scraping: {\n       enabled: true,"
    },
    {
      "sha": "7447841f89ddbb6a42a9964d8c6d3150c59ee8a6",
      "filename": "src/core/client/framework/helpers/urls.tsx",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/framework/helpers/urls.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/framework/helpers/urls.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/helpers/urls.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,6 +1,10 @@\n export default {\n   admin: {\n     moderate: \"/admin/moderate\",\n+    configureWebhooks: \"/admin/configure/webhooks\",\n+    webhooks: \"/admin/configure/webhooks\",\n+    addWebhookEndpoint: \"/admin/configure/webhooks/add\",\n+    configureWebhookEndpoint: \"/admin/configure/webhooks/endpoint\",\n   },\n   embed: {\n     stream: \"/embed/stream\","
    },
    {
      "sha": "3a7b68293ba650442cda88e5a5800d494d2466fd",
      "filename": "src/core/client/framework/lib/messages.tsx",
      "status": "modified",
      "additions": 11,
      "deletions": 5,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/framework/lib/messages.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/framework/lib/messages.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/messages.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -14,13 +14,13 @@ export const VALIDATION_REQUIRED = () => (\n \n export const VALIDATION_TOO_SHORT = (minLength: number) => (\n   <Localized id=\"framework-validation-tooShort\" $minLength={minLength}>\n-    <span>{\"Please enter at least {$minLength} characters.\"}</span>\n+    <span>Please enter at least {minLength} characters.</span>\n   </Localized>\n );\n \n export const VALIDATION_TOO_LONG = (maxLength: number) => (\n   <Localized id=\"framework-validation-tooLong\" $maxLength={maxLength}>\n-    <span>{\"Please enter at max {$maxLength} characters.\"}</span>\n+    <span>Please enter at max {maxLength} characters.</span>\n   </Localized>\n );\n \n@@ -38,19 +38,19 @@ export const INVALID_CHARACTERS = () => (\n \n export const USERNAME_TOO_SHORT = (minLength: number) => (\n   <Localized id=\"framework-validation-usernameTooShort\" $minLength={minLength}>\n-    <span>{\"Usernames must contain at least {$minLength} characters.\"}</span>\n+    <span>Usernames must contain at least {minLength} characters.</span>\n   </Localized>\n );\n \n export const USERNAME_TOO_LONG = (maxLength: number) => (\n   <Localized id=\"framework-validation-usernameTooLong\" $maxLength={maxLength}>\n-    <span>{\"Usernames cannot be longer than {$maxLength} characters.\"}</span>\n+    <span>Usernames cannot be longer than {maxLength} characters.</span>\n   </Localized>\n );\n \n export const PASSWORD_TOO_SHORT = (minLength: number) => (\n   <Localized id=\"framework-validation-passwordTooShort\" $minLength={minLength}>\n-    <span>{\"Password must contain at least {$minLength} characters.\"}</span>\n+    <span>Password must contain at least {minLength} characters.</span>\n   </Localized>\n );\n \n@@ -60,6 +60,12 @@ export const PASSWORDS_DO_NOT_MATCH = () => (\n   </Localized>\n );\n \n+export const INVALID_WEBHOOK_ENDPOINT_EVENT_SELECTION = () => (\n+  <Localized id=\"framework-validation-invalidWebhookEndpointEventSelection\">\n+    <span>Select at least one event to receive.</span>\n+  </Localized>\n+);\n+\n export const USERNAMES_DO_NOT_MATCH = () => (\n   <Localized id=\"framework-validation-usernamesDoNotMatch\">\n     <span>Usernames do not match. Try again.</span>"
    },
    {
      "sha": "44f0b82154b41702edffd1cf1eec61353964b01c",
      "filename": "src/core/client/framework/lib/validation.tsx",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/framework/lib/validation.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/framework/lib/validation.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/validation.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -17,6 +17,7 @@ import {\n   INVALID_CHARACTERS,\n   INVALID_EMAIL,\n   INVALID_URL,\n+  INVALID_WEBHOOK_ENDPOINT_EVENT_SELECTION,\n   NOT_A_WHOLE_NUMBER,\n   NOT_A_WHOLE_NUMBER_BETWEEN,\n   NOT_A_WHOLE_NUMBER_GREATER_THAN,\n@@ -155,6 +156,15 @@ export const validateEqualPasswords = createValidator(\n   PASSWORDS_DO_NOT_MATCH()\n );\n \n+/**\n+ * validateWebhookEventSelection is a Validator that checks for a valid\n+ * combination of event selections for webhook endpoints.\n+ */\n+export const validateWebhookEventSelection = createValidator(\n+  (v, values) => values.all || (values.events && values.events.length > 0),\n+  INVALID_WEBHOOK_ENDPOINT_EVENT_SELECTION()\n+);\n+\n /**\n  * validateEqualEmails is a Validator that checks for correct email confirmation.\n  */"
    },
    {
      "sha": "c868d5411e508f9f46c3310c6f2f527fb8951279",
      "filename": "src/core/client/ui/components/v2/ListGroup/ListGroup.css",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/ListGroup/ListGroup.css",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/ListGroup/ListGroup.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/ui/components/v2/ListGroup/ListGroup.css?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,5 @@\n+.root {\n+  border: 1px solid var(--v2-colors-grey-300);\n+  border-radius: var(--round-corners);\n+  overflow-y: auto;\n+}"
    },
    {
      "sha": "c9b19cf88c9c1f26e81f63c5c7842fe60c833605",
      "filename": "src/core/client/ui/components/v2/ListGroup/ListGroup.tsx",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/ListGroup/ListGroup.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/ListGroup/ListGroup.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/ui/components/v2/ListGroup/ListGroup.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,20 @@\n+import cn from \"classnames\";\n+import React, { FunctionComponent } from \"react\";\n+\n+import { Flex } from \"coral-ui/components/v2\";\n+\n+import styles from \"./ListGroup.css\";\n+\n+interface Props {\n+  className?: string;\n+}\n+\n+const ListGroup: FunctionComponent<Props> = ({ className, children }) => {\n+  return (\n+    <Flex direction=\"column\" className={cn(styles.root, className)}>\n+      {children}\n+    </Flex>\n+  );\n+};\n+\n+export default ListGroup;"
    },
    {
      "sha": "f8e8901de0ec02822e631f57cc1142ac69dbd069",
      "filename": "src/core/client/ui/components/v2/ListGroup/ListGroupRow.css",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/ListGroup/ListGroupRow.css",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/ListGroup/ListGroupRow.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/ui/components/v2/ListGroup/ListGroupRow.css?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,8 @@\n+.root {\n+  border-bottom: 1px solid var(--v2-colors-grey-200);\n+  padding: var(--v2-spacing-2);\n+\n+  &:last-child {\n+    border-bottom: none;\n+  }\n+}"
    },
    {
      "sha": "328cb83c61eada10723d4bfd25c80de9ef77447d",
      "filename": "src/core/client/ui/components/v2/ListGroup/ListGroupRow.tsx",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/ListGroup/ListGroupRow.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/ListGroup/ListGroupRow.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/ui/components/v2/ListGroup/ListGroupRow.tsx?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,14 @@\n+import cn from \"classnames\";\n+import React, { FunctionComponent } from \"react\";\n+\n+import styles from \"./ListGroupRow.css\";\n+\n+interface Props {\n+  className?: string;\n+}\n+\n+const ListGroupRow: FunctionComponent<Props> = ({ className, children }) => {\n+  return <div className={cn(styles.root, className)}>{children}</div>;\n+};\n+\n+export default ListGroupRow;"
    },
    {
      "sha": "a16279c661842622ab803144f084e02105516556",
      "filename": "src/core/client/ui/components/v2/ListGroup/index.ts",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/ListGroup/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/ListGroup/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/ui/components/v2/ListGroup/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,2 @@\n+export { default as ListGroup } from \"./ListGroup\";\n+export { default as ListGroupRow } from \"./ListGroupRow\";"
    },
    {
      "sha": "08fb69730b9939ca2b249e17b1c46741498e051d",
      "filename": "src/core/client/ui/components/v2/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/client/ui/components/v2/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/ui/components/v2/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -36,6 +36,7 @@ export { default as HelperText } from \"./HelperText\";\n export { default as HorizontalGutter } from \"./HorizontalGutter\";\n export { default as Icon } from \"./Icon\";\n export { default as Label } from \"./Label\";\n+export { ListGroup, ListGroupRow } from \"./ListGroup\";\n export { Marker, Count as MarkerCount } from \"./Marker\";\n export { default as Message, MessageIcon } from \"./Message\";\n export { default as Modal, ModalProps } from \"./Modal\";"
    },
    {
      "sha": "513d6dc3a28d15fc0baf796e7d5b867b816a4873",
      "filename": "src/core/server/app/handlers/api/graphql.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/app/handlers/api/graphql.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/app/handlers/api/graphql.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/graphql.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -17,7 +17,7 @@ export type GraphMiddlewareOptions = Pick<\n   | \"pubsub\"\n   | \"tenantCache\"\n   | \"metrics\"\n-  | \"notifierQueue\"\n+  | \"broker\"\n >;\n \n export const graphQLHandler = ({"
    },
    {
      "sha": "652314d8beae673f4a7b0efc19e1653aaaec4a22",
      "filename": "src/core/server/app/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/app/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/app/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -15,9 +15,9 @@ import { HTMLErrorHandler } from \"coral-server/app/middleware/error\";\n import { notFoundMiddleware } from \"coral-server/app/middleware/notFound\";\n import { createPassport } from \"coral-server/app/middleware/passport\";\n import { Config } from \"coral-server/config\";\n+import CoralEventListenerBroker from \"coral-server/events/publisher\";\n import logger from \"coral-server/logger\";\n import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n-import { NotifierQueue } from \"coral-server/queue/tasks/notifier\";\n import { ScraperQueue } from \"coral-server/queue/tasks/scraper\";\n import { I18n } from \"coral-server/services/i18n\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n@@ -41,7 +41,6 @@ export interface AppOptions {\n   mailerQueue: MailerQueue;\n   metrics?: Metrics;\n   mongo: Db;\n-  notifierQueue: NotifierQueue;\n   parent: Express;\n   persistedQueriesRequired: boolean;\n   persistedQueryCache: PersistedQueryCache;\n@@ -52,6 +51,7 @@ export interface AppOptions {\n   signingConfig: JWTSigningConfig;\n   tenantCache: TenantCache;\n   migrationManager: MigrationManager;\n+  broker: CoralEventListenerBroker;\n }\n \n /**"
    },
    {
      "sha": "2a53b3b7dd1292bdadfcca64de269040328515d6",
      "filename": "src/core/server/app/middleware/passport/strategies/oidc/discover.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/app/middleware/passport/strategies/oidc/discover.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/app/middleware/passport/strategies/oidc/discover.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/strategies/oidc/discover.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,7 +1,7 @@\n-import fetch from \"node-fetch\";\n import { URL } from \"url\";\n \n import { ensureNoEndSlash } from \"coral-common/utils\";\n+import { createFetch } from \"coral-server/services/fetch\";\n \n /**\n  * Configuration that Coral is expecting.\n@@ -25,6 +25,12 @@ interface DiscoveryRawConfiguration {\n   jwks_uri: string;\n }\n \n+/**\n+ * fetch provides a single source for managing the fetching operations for\n+ * discovery.\n+ */\n+const fetch = createFetch({ name: \"OIDC\" });\n+\n /**\n  * discover will discover the configuration for the issuer.\n  *"
    },
    {
      "sha": "3a2306e7f40c5396b217fc2d2379815abd52012f",
      "filename": "src/core/server/app/middleware/passport/strategies/verifiers/sso.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/app/middleware/passport/strategies/verifiers/sso.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/app/middleware/passport/strategies/verifiers/sso.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/passport/strategies/verifiers/sso.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -5,7 +5,7 @@ import { Db } from \"mongodb\";\n \n import { validate } from \"coral-server/app/request/body\";\n import { IntegrationDisabled, TokenInvalidError } from \"coral-server/errors\";\n-import { SSOAuthIntegration, SSOKey } from \"coral-server/models/settings\";\n+import { Secret, SSOAuthIntegration } from \"coral-server/models/settings\";\n import { Tenant } from \"coral-server/models/tenant\";\n import {\n   retrieveUserWithProfile,\n@@ -169,7 +169,7 @@ export function getRelevantSSOKeys(\n   tokenString: string,\n   now: Date,\n   kid?: string\n-): SSOKey[] {\n+): Secret[] {\n   // Collect all the current valid keys.\n   const keys = integration.keys.filter(k => {\n     if (k.inactiveAt && now >= k.inactiveAt) {"
    },
    {
      "sha": "16da3e6e14794a1962d264310e4878e5d5ada442",
      "filename": "src/core/server/events/README.md",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/README.md",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/README.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/events/README.md?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,15 @@\n+# events\n+\n+This is the events package for Coral.\n+\n+## Adding new events\n+\n+You can add new events by adding to the `events.ts` file. Each event must export\n+a `{ eventName }Payload` type and a `{ eventName }` Coral Event.\n+\n+## Adding new event listeners\n+\n+You can add a new event listener by adding to the `listeners/` folder. These\n+events must implement the `CoralEventListener` abstract class. You can then\n+register this listener in the `src/core/server/index.ts` file by registering\n+it on the broker."
    },
    {
      "sha": "d1881496dc25d8be499fa1c1112a82869192e60f",
      "filename": "src/core/server/events/event.ts",
      "status": "added",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/event.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/event.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/events/event.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,51 @@\n+import uuid from \"uuid/v4\";\n+\n+import logger from \"coral-server/logger\";\n+\n+import { CoralEventPublisherBroker } from \"./publisher\";\n+import { CoralEventType } from \"./types\";\n+\n+export interface CoralEventPayload<\n+  T extends CoralEventType = CoralEventType,\n+  U extends {} = {}\n+> {\n+  /**\n+   * id is the identifier for this specific event. Every copy of this unique\n+   * event will share the same identifier.\n+   */\n+  readonly id: string;\n+\n+  /**\n+   * type identifies this particular event.\n+   */\n+  readonly type: T;\n+\n+  /**\n+   * data stores the underlying content of the event.\n+   */\n+  readonly data: Readonly<U>;\n+\n+  /**\n+   * createdAt is the date that this event was published at.\n+   */\n+  readonly createdAt: Date;\n+}\n+\n+export function createCoralEvent<T extends CoralEventPayload>(type: T[\"type\"]) {\n+  return {\n+    publish: async (broker: CoralEventPublisherBroker, data: T[\"data\"]) => {\n+      const event: CoralEventPayload = {\n+        id: uuid(),\n+        createdAt: new Date(),\n+        data,\n+        type,\n+      };\n+\n+      logger.trace(\n+        { eventType: event.type, eventID: event.id },\n+        \"publishing event\"\n+      );\n+      await broker.emit(event);\n+    },\n+  };\n+}"
    },
    {
      "sha": "3eadd300d22aad06729d0af08cae39e66c164292",
      "filename": "src/core/server/events/events.ts",
      "status": "added",
      "additions": 87,
      "deletions": 0,
      "changes": 87,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/events.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/events.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/events/events.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,87 @@\n+import {\n+  CommentCreatedInput,\n+  CommentEnteredModerationQueueInput,\n+  CommentFeaturedInput,\n+  CommentLeftModerationQueueInput,\n+  CommentReleasedInput,\n+  CommentReplyCreatedInput,\n+  CommentStatusUpdatedInput,\n+} from \"coral-server/graph/resolvers/Subscription\";\n+\n+import { CoralEventPayload, createCoralEvent } from \"./event\";\n+import { CoralEventType } from \"./types\";\n+\n+export type CommentEnteredModerationQueueCoralEventPayload = CoralEventPayload<\n+  CoralEventType.COMMENT_ENTERED_MODERATION_QUEUE,\n+  CommentEnteredModerationQueueInput\n+>;\n+\n+export const CommentEnteredModerationQueueCoralEvent = createCoralEvent<\n+  CommentEnteredModerationQueueCoralEventPayload\n+>(CoralEventType.COMMENT_ENTERED_MODERATION_QUEUE);\n+\n+export type CommentLeftModerationQueueCoralEventPayload = CoralEventPayload<\n+  CoralEventType.COMMENT_LEFT_MODERATION_QUEUE,\n+  CommentLeftModerationQueueInput\n+>;\n+\n+export const CommentLeftModerationQueueCoralEvent = createCoralEvent<\n+  CommentLeftModerationQueueCoralEventPayload\n+>(CoralEventType.COMMENT_LEFT_MODERATION_QUEUE);\n+\n+export type CommentStatusUpdatedCoralEventPayload = CoralEventPayload<\n+  CoralEventType.COMMENT_STATUS_UPDATED,\n+  CommentStatusUpdatedInput\n+>;\n+\n+export const CommentStatusUpdatedCoralEvent = createCoralEvent<\n+  CommentStatusUpdatedCoralEventPayload\n+>(CoralEventType.COMMENT_STATUS_UPDATED);\n+\n+export type CommentReplyCreatedCoralEventPayload = CoralEventPayload<\n+  CoralEventType.COMMENT_REPLY_CREATED,\n+  CommentReplyCreatedInput\n+>;\n+\n+export const CommentReplyCreatedCoralEvent = createCoralEvent<\n+  CommentReplyCreatedCoralEventPayload\n+>(CoralEventType.COMMENT_REPLY_CREATED);\n+\n+export type CommentCreatedCoralEventPayload = CoralEventPayload<\n+  CoralEventType.COMMENT_CREATED,\n+  CommentCreatedInput\n+>;\n+\n+export const CommentCreatedCoralEvent = createCoralEvent<\n+  CommentCreatedCoralEventPayload\n+>(CoralEventType.COMMENT_CREATED);\n+\n+export type CommentFeaturedCoralEventPayload = CoralEventPayload<\n+  CoralEventType.COMMENT_FEATURED,\n+  CommentFeaturedInput\n+>;\n+\n+export const CommentFeaturedCoralEvent = createCoralEvent<\n+  CommentFeaturedCoralEventPayload\n+>(CoralEventType.COMMENT_FEATURED);\n+\n+export type CommentReleasedCoralEventPayload = CoralEventPayload<\n+  CoralEventType.COMMENT_RELEASED,\n+  CommentReleasedInput\n+>;\n+\n+export const CommentReleasedCoralEvent = createCoralEvent<\n+  CommentReleasedCoralEventPayload\n+>(CoralEventType.COMMENT_RELEASED);\n+\n+export type StoryCreatedCoralEventPayload = CoralEventPayload<\n+  CoralEventType.STORY_CREATED,\n+  {\n+    storyID: string;\n+    storyURL: string;\n+  }\n+>;\n+\n+export const StoryCreatedCoralEvent = createCoralEvent<\n+  StoryCreatedCoralEventPayload\n+>(CoralEventType.STORY_CREATED);"
    },
    {
      "sha": "01c57e6b2a82a4e4863a79009b05e6e3c757d9f8",
      "filename": "src/core/server/events/index.ts",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/events/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,2 @@\n+export * from \"./types\";\n+export * from \"./events\";"
    },
    {
      "sha": "2c9d431f12da98b4ba3d7d66019756fca039e25b",
      "filename": "src/core/server/events/listeners/notifier.ts",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/listeners/notifier.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/listeners/notifier.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/events/listeners/notifier.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,49 @@\n+import { NotifierQueue } from \"coral-server/queue/tasks/notifier\";\n+import { categories } from \"coral-server/services/notifications/categories\";\n+\n+import {\n+  CommentFeaturedCoralEventPayload,\n+  CommentReplyCreatedCoralEventPayload,\n+  CommentStatusUpdatedCoralEventPayload,\n+} from \"../events\";\n+import { CoralEventListener, CoralEventPublisherFactory } from \"../publisher\";\n+import { CoralEventType } from \"../types\";\n+\n+export type NotifierCoralEventListenerPayloads =\n+  | CommentFeaturedCoralEventPayload\n+  | CommentStatusUpdatedCoralEventPayload\n+  | CommentReplyCreatedCoralEventPayload;\n+\n+export class NotifierCoralEventListener\n+  implements CoralEventListener<NotifierCoralEventListenerPayloads> {\n+  public readonly name = \"notifier\";\n+\n+  private readonly queue: NotifierQueue;\n+\n+  constructor(queue: NotifierQueue) {\n+    this.queue = queue;\n+  }\n+\n+  /**\n+   * events are the events that this listener handles. These are parsed from the\n+   * notification categories.\n+   */\n+  public readonly events = categories.reduce(\n+    (events, category) => {\n+      for (const event of category.events) {\n+        if (!events.includes(event)) {\n+          events.push(event);\n+        }\n+      }\n+\n+      return events;\n+    },\n+    [] as CoralEventType[]\n+  );\n+\n+  public initialize: CoralEventPublisherFactory<\n+    NotifierCoralEventListenerPayloads\n+  > = ({ tenant: { id } }) => async input => {\n+    await this.queue.add({ tenantID: id, input });\n+  };\n+}"
    },
    {
      "sha": "546285536347d68878f73f672a8dc38cce7456a9",
      "filename": "src/core/server/events/listeners/slack.ts",
      "status": "added",
      "additions": 210,
      "deletions": 0,
      "changes": 210,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/listeners/slack.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/listeners/slack.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/events/listeners/slack.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,210 @@\n+import striptags from \"striptags\";\n+\n+import { reconstructTenantURL } from \"coral-server/app/url\";\n+import GraphContext from \"coral-server/graph/context\";\n+import logger from \"coral-server/logger\";\n+import { getLatestRevision } from \"coral-server/models/comment\";\n+import { getStoryTitle, getURLWithCommentID } from \"coral-server/models/story\";\n+import { createFetch } from \"coral-server/services/fetch\";\n+\n+import { GQLMODERATION_QUEUE } from \"coral-server/graph/schema/__generated__/types\";\n+\n+import {\n+  CommentEnteredModerationQueueCoralEventPayload,\n+  CommentFeaturedCoralEventPayload,\n+} from \"../events\";\n+import { CoralEventListener, CoralEventPublisherFactory } from \"../publisher\";\n+import { CoralEventType } from \"../types\";\n+\n+type SlackCoralEventListenerPayloads =\n+  | CommentFeaturedCoralEventPayload\n+  | CommentEnteredModerationQueueCoralEventPayload;\n+\n+type Trigger = \"reported\" | \"pending\" | \"featured\";\n+\n+export class SlackCoralEventListener\n+  implements CoralEventListener<SlackCoralEventListenerPayloads> {\n+  public readonly name = \"slack\";\n+  public readonly events = [\n+    CoralEventType.COMMENT_FEATURED,\n+    CoralEventType.COMMENT_ENTERED_MODERATION_QUEUE,\n+  ];\n+  private readonly fetch = createFetch({ name: \"slack\" });\n+\n+  private payloadTrigger(\n+    payload: SlackCoralEventListenerPayloads\n+  ): Trigger | null {\n+    switch (payload.type) {\n+      case CoralEventType.COMMENT_ENTERED_MODERATION_QUEUE:\n+        if (payload.data.queue === GQLMODERATION_QUEUE.REPORTED) {\n+          return \"reported\";\n+        } else if (payload.data.queue === GQLMODERATION_QUEUE.PENDING) {\n+          return \"pending\";\n+        }\n+        break;\n+      case CoralEventType.COMMENT_FEATURED:\n+        return \"featured\";\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * postMessage will prepare and send the incoming Slack webhook.\n+   *\n+   * @param ctx context of the request\n+   * @param message the message prefix for the request\n+   * @param payload payload for the event that occurred\n+   * @param hookURL url to the Slack webhook that we should send the message to\n+   */\n+  private async postMessage(\n+    { loaders, config, tenant, req }: GraphContext,\n+    message: string,\n+    payload: SlackCoralEventListenerPayloads,\n+    hookURL: string\n+  ) {\n+    // Get the comment.\n+    const comment = await loaders.Comments.comment.load(payload.data.commentID);\n+    if (!comment || !comment.authorID) {\n+      return;\n+    }\n+\n+    // Get the story.\n+    const story = await loaders.Stories.story.load(payload.data.storyID);\n+    if (!story) {\n+      return;\n+    }\n+\n+    // Get the author.\n+    const author = await loaders.Users.user.load(comment.authorID);\n+    if (!author) {\n+      return;\n+    }\n+\n+    // Get some properties about the event.\n+    const storyTitle = getStoryTitle(story);\n+    const moderateLink = reconstructTenantURL(\n+      config,\n+      tenant,\n+      req,\n+      `/admin/moderate/comment/${comment.id}`\n+    );\n+    const commentLink = getURLWithCommentID(story.url, comment.id);\n+\n+    // Replace HTML link breaks with newlines.\n+    const body = striptags(getLatestRevision(comment).body);\n+\n+    // Send the post to the Slack URL. We don't wrap this in a try/catch because\n+    // it's handled in the calling function.\n+    const res = await this.fetch(hookURL, {\n+      method: \"POST\",\n+      headers: {\n+        \"Content-Type\": \"application/json\",\n+      },\n+      body: JSON.stringify({\n+        blocks: [\n+          {\n+            type: \"section\",\n+            text: {\n+              type: \"mrkdwn\",\n+              text: `${message} on *<${story.url}|${storyTitle}>*`,\n+            },\n+          },\n+          { type: \"divider\" },\n+          {\n+            type: \"section\",\n+            text: {\n+              type: \"plain_text\",\n+              text: body,\n+            },\n+          },\n+          {\n+            type: \"context\",\n+            elements: [\n+              {\n+                type: \"mrkdwn\",\n+                text: `Authored by *${author.username}* | <${moderateLink}|Go to Moderation> | <${commentLink}|See Comment>`,\n+              },\n+            ],\n+          },\n+          { type: \"divider\" },\n+        ],\n+      }),\n+    });\n+\n+    // Check that the request was completed successfully.\n+    if (!res.ok) {\n+      throw new Error(`slack returned non-200 status code: ${res.status}`);\n+    }\n+  }\n+\n+  private getMessage(trigger: Trigger): string {\n+    switch (trigger) {\n+      case \"featured\":\n+        return \"This comment has been featured\";\n+      case \"pending\":\n+        return \"This comment is pending\";\n+      case \"reported\":\n+        return \"This comment has been reported\";\n+      default:\n+        throw new Error(\"invalid trigger\");\n+    }\n+  }\n+\n+  public initialize: CoralEventPublisherFactory<\n+    SlackCoralEventListenerPayloads\n+  > = ctx => async payload => {\n+    const {\n+      tenant: { id: tenantID, slack },\n+    } = ctx;\n+\n+    if (\n+      // If slack is not defined,\n+      !slack ||\n+      // Or there are no slack channels,\n+      slack.channels.length === 0 ||\n+      // Or each channel isn't enabled or configured right.\n+      slack.channels.every(c => !c.enabled || !c.hookURL)\n+    ) {\n+      // Exit out then.\n+      return;\n+    }\n+\n+    // Get the trigger that is associated with this payload.\n+    const trigger = this.payloadTrigger(payload);\n+    if (!trigger) {\n+      return;\n+    }\n+\n+    // For each channel that is enabled with configuration.\n+    for (const channel of slack.channels) {\n+      if (!channel.enabled || !channel.hookURL) {\n+        continue;\n+      }\n+\n+      if (\n+        // If featured comments are, and it's a featured comment,\n+        (channel.triggers.featuredComments && trigger === \"featured\") ||\n+        // Or reported comments are, and it's a reported comment,\n+        (channel.triggers.reportedComments && trigger === \"reported\") ||\n+        // Or pending comments are, and it's a pending comment,\n+        (channel.triggers.pendingComments && trigger === \"pending\")\n+      ) {\n+        try {\n+          // Post the message to slack.\n+          await this.postMessage(\n+            ctx,\n+            this.getMessage(trigger),\n+            payload,\n+            channel.hookURL\n+          );\n+        } catch (err) {\n+          logger.error(\n+            { err, tenantID, payload, channel },\n+            \"could not post the comment to slack\"\n+          );\n+        }\n+      }\n+    }\n+  };\n+}"
    },
    {
      "sha": "e7724623dda8ed23f5afc9a370556fba5eaf0fd1",
      "filename": "src/core/server/events/listeners/subscription.ts",
      "status": "added",
      "additions": 74,
      "deletions": 0,
      "changes": 74,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/listeners/subscription.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/listeners/subscription.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/events/listeners/subscription.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,74 @@\n+import { createSubscriptionChannelName } from \"coral-server/graph/resolvers/Subscription/helpers\";\n+import { SUBSCRIPTION_CHANNELS } from \"coral-server/graph/resolvers/Subscription/types\";\n+\n+import {\n+  CommentCreatedCoralEventPayload,\n+  CommentEnteredModerationQueueCoralEventPayload,\n+  CommentFeaturedCoralEventPayload,\n+  CommentLeftModerationQueueCoralEventPayload,\n+  CommentReleasedCoralEventPayload,\n+  CommentReplyCreatedCoralEventPayload,\n+  CommentStatusUpdatedCoralEventPayload,\n+} from \"../events\";\n+import { CoralEventListener, CoralEventPublisherFactory } from \"../publisher\";\n+import { CoralEventType } from \"../types\";\n+\n+type SubscriptionCoralEventListenerPayloads =\n+  | CommentEnteredModerationQueueCoralEventPayload\n+  | CommentLeftModerationQueueCoralEventPayload\n+  | CommentStatusUpdatedCoralEventPayload\n+  | CommentReplyCreatedCoralEventPayload\n+  | CommentCreatedCoralEventPayload\n+  | CommentFeaturedCoralEventPayload\n+  | CommentReleasedCoralEventPayload;\n+\n+export class SubscriptionCoralEventListener\n+  implements CoralEventListener<SubscriptionCoralEventListenerPayloads> {\n+  public readonly name = \"subscription\";\n+  public readonly events = [\n+    CoralEventType.COMMENT_ENTERED_MODERATION_QUEUE,\n+    CoralEventType.COMMENT_LEFT_MODERATION_QUEUE,\n+    CoralEventType.COMMENT_STATUS_UPDATED,\n+    CoralEventType.COMMENT_REPLY_CREATED,\n+    CoralEventType.COMMENT_CREATED,\n+    CoralEventType.COMMENT_FEATURED,\n+    CoralEventType.COMMENT_RELEASED,\n+  ];\n+\n+  private translate(\n+    type: SubscriptionCoralEventListenerPayloads[\"type\"]\n+  ): SUBSCRIPTION_CHANNELS {\n+    switch (type) {\n+      case CoralEventType.COMMENT_ENTERED_MODERATION_QUEUE:\n+        return SUBSCRIPTION_CHANNELS.COMMENT_ENTERED_MODERATION_QUEUE;\n+      case CoralEventType.COMMENT_LEFT_MODERATION_QUEUE:\n+        return SUBSCRIPTION_CHANNELS.COMMENT_LEFT_MODERATION_QUEUE;\n+      case CoralEventType.COMMENT_STATUS_UPDATED:\n+        return SUBSCRIPTION_CHANNELS.COMMENT_STATUS_UPDATED;\n+      case CoralEventType.COMMENT_REPLY_CREATED:\n+        return SUBSCRIPTION_CHANNELS.COMMENT_REPLY_CREATED;\n+      case CoralEventType.COMMENT_CREATED:\n+        return SUBSCRIPTION_CHANNELS.COMMENT_CREATED;\n+      case CoralEventType.COMMENT_FEATURED:\n+        return SUBSCRIPTION_CHANNELS.COMMENT_FEATURED;\n+      case CoralEventType.COMMENT_RELEASED:\n+        return SUBSCRIPTION_CHANNELS.COMMENT_RELEASED;\n+    }\n+  }\n+\n+  private trigger(\n+    tenantID: string,\n+    type: SubscriptionCoralEventListenerPayloads[\"type\"]\n+  ) {\n+    return createSubscriptionChannelName(tenantID, this.translate(type));\n+  }\n+\n+  public initialize: CoralEventPublisherFactory<\n+    SubscriptionCoralEventListenerPayloads\n+  > = ({ clientID, pubsub, tenant: { id } }) => async ({ type, data }) => {\n+    await pubsub.publish(this.trigger(id, type), {\n+      ...data,\n+      clientID,\n+    });\n+  };\n+}"
    },
    {
      "sha": "fed52ec6fdb8f074772ecd9e75f7fc4c1708f987",
      "filename": "src/core/server/events/listeners/webhook.ts",
      "status": "added",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/listeners/webhook.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/listeners/webhook.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/events/listeners/webhook.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,85 @@\n+import logger from \"coral-server/logger\";\n+import { WebhookQueue } from \"coral-server/queue/tasks/webhook\";\n+\n+import { GQLWEBHOOK_EVENT_NAME } from \"coral-server/graph/schema/__generated__/types\";\n+\n+import { StoryCreatedCoralEventPayload } from \"../events\";\n+import { CoralEventListener, CoralEventPublisherFactory } from \"../publisher\";\n+import { CoralEventType } from \"../types\";\n+\n+export type WebhookCoralEventListenerPayloads = StoryCreatedCoralEventPayload;\n+\n+export class WebhookCoralEventListener\n+  implements CoralEventListener<WebhookCoralEventListenerPayloads> {\n+  public readonly name = \"webhook\";\n+  public readonly events = [CoralEventType.STORY_CREATED];\n+\n+  private readonly queue: WebhookQueue;\n+\n+  constructor(queue: WebhookQueue) {\n+    this.queue = queue;\n+  }\n+\n+  public initialize: CoralEventPublisherFactory<\n+    WebhookCoralEventListenerPayloads\n+  > = ({ id: contextID, tenant }) => async event => {\n+    const log = logger.child(\n+      {\n+        tenantID: tenant.id,\n+        contextID,\n+        eventType: event.type,\n+      },\n+      true\n+    );\n+\n+    // Based on the incoming event, determine which endpoints we should send.\n+    const endpoints = tenant.webhooks.endpoints.filter(endpoint => {\n+      // If the endpoint is disabled, don't include it.\n+      if (!endpoint.enabled) {\n+        return false;\n+      }\n+\n+      // If all notifications have been enabled for this endpoint, include it.\n+      if (endpoint.all) {\n+        return true;\n+      }\n+\n+      // If this event name is specifically listed, include it. We have to do\n+      // some nasty casting here to address the fact that the types don't\n+      // technically overlap.\n+      if (\n+        endpoint.events.includes(\n+          (event.type as unknown) as GQLWEBHOOK_EVENT_NAME\n+        )\n+      ) {\n+        return true;\n+      }\n+\n+      return false;\n+    });\n+\n+    // Log some important details.\n+    if (endpoints.length === 0) {\n+      log.debug(\"no endpoints matched for event\");\n+      return;\n+    }\n+\n+    log.debug(\n+      { endpoints: endpoints.length },\n+      \"matched endpoints that will receive event\"\n+    );\n+\n+    // For each of these endpoints that need a delivery of these notifications,\n+    // queue up the job that will send it.\n+    await Promise.all(\n+      endpoints.map(endpoint =>\n+        this.queue.add({\n+          tenantID: tenant.id,\n+          contextID,\n+          endpointID: endpoint.id,\n+          event,\n+        })\n+      )\n+    );\n+  };\n+}"
    },
    {
      "sha": "254fa21d7c4a28e1f3cfbc3f2a72002c1a0e303e",
      "filename": "src/core/server/events/publisher.ts",
      "status": "added",
      "additions": 125,
      "deletions": 0,
      "changes": 125,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/publisher.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/publisher.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/events/publisher.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,125 @@\n+/* eslint-disable max-classes-per-file */\n+\n+import GraphContext from \"coral-server/graph/context\";\n+import logger from \"coral-server/logger\";\n+\n+import { CoralEventPayload } from \"./event\";\n+import { CoralEventType } from \"./types\";\n+\n+export type CoralEventPublisher<T extends CoralEventPayload = any> = (\n+  payload: T\n+) => Promise<void>;\n+\n+export type CoralEventPublisherFactory<T extends CoralEventPayload = any> = (\n+  ctx: GraphContext\n+) => CoralEventPublisher<T>;\n+\n+export abstract class CoralEventListener<T extends CoralEventPayload = any> {\n+  /**\n+   * name is the name of the listener used for identification in logs.\n+   */\n+  public abstract readonly name: string;\n+\n+  /**\n+   * events is the array of event types that this listener should listen for.\n+   */\n+  public abstract readonly events: CoralEventType[];\n+\n+  /**\n+   * initialize is a function that when\n+   */\n+  public abstract initialize: CoralEventPublisherFactory<T>;\n+}\n+\n+export class CoralEventPublisherBroker {\n+  private readonly ctx: GraphContext;\n+  private readonly events: Set<CoralEventType>;\n+  private readonly listeners: CoralEventListener[];\n+  private registry?: Map<CoralEventType, CoralEventPublisher[]>;\n+\n+  constructor(\n+    ctx: GraphContext,\n+    events: Set<CoralEventType>,\n+    listeners: CoralEventListener[]\n+  ) {\n+    this.ctx = ctx;\n+    this.events = events;\n+    this.listeners = listeners;\n+  }\n+\n+  private initialize() {\n+    const registry = new Map<CoralEventType, CoralEventPublisher[]>();\n+\n+    // Iterate over the listeners to initialize them.\n+    for (const listener of this.listeners) {\n+      // Initialize this listener.\n+      const publisher = listener.initialize(this.ctx);\n+\n+      // Associate the publisher with each of the events.\n+      for (const event of listener.events) {\n+        // Get the current publishers associated with this event.\n+        const publishers = registry.get(event) || [];\n+\n+        // Add this publisher to the array.\n+        publishers.push(publisher);\n+\n+        // Update this item in the registry.\n+        registry.set(event, publishers);\n+      }\n+    }\n+\n+    return registry;\n+  }\n+\n+  public emit = (payload: CoralEventPayload) => {\n+    // Check to see if this event is even registered.\n+    if (!this.events.has(payload.type)) {\n+      return;\n+    }\n+\n+    // Lazily create the registry.\n+    if (!this.registry) {\n+      this.registry = this.initialize();\n+    }\n+\n+    // Get the current publishers for this event. We can assert that this is\n+    // found because the event was checked in the above events set. If the event\n+    // did not exist in the events set, then it does not have an associated\n+    // registry entry.\n+    const publishers = this.registry.get(payload.type)!;\n+\n+    // Begin resolving these publishers.\n+    return Promise.all(publishers.map(publisher => publisher(payload)));\n+  };\n+}\n+\n+export default class CoralEventListenerBroker {\n+  private readonly events = new Set<CoralEventType>();\n+  private readonly listeners: CoralEventListener[] = [];\n+\n+  public instance = (ctx: GraphContext) =>\n+    new CoralEventPublisherBroker(ctx, this.events, this.listeners);\n+\n+  public register(listener: CoralEventListener) {\n+    if (listener.events.length === 0) {\n+      logger.warn(\n+        { listenerName: listener.name },\n+        \"listener was registered without any events\"\n+      );\n+      return;\n+    }\n+\n+    logger.trace(\n+      { listenerName: listener.name, listenerEvents: listener.events },\n+      \"registering listener for events\"\n+    );\n+\n+    // Add this listener to this listener set.\n+    this.listeners.push(listener);\n+\n+    // Add each event to the set of registered events.\n+    for (const event of listener.events) {\n+      this.events.add(event);\n+    }\n+  }\n+}"
    },
    {
      "sha": "9737f1298e7de89f929be6dd66794bd5b642fda0",
      "filename": "src/core/server/events/types.ts",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/types.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/events/types.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/events/types.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,10 @@\n+export enum CoralEventType {\n+  COMMENT_ENTERED_MODERATION_QUEUE = \"COMMENT_ENTERED_MODERATION_QUEUE\",\n+  COMMENT_LEFT_MODERATION_QUEUE = \"COMMENT_LEFT_MODERATION_QUEUE\",\n+  COMMENT_STATUS_UPDATED = \"COMMENT_STATUS_UPDATED\",\n+  COMMENT_REPLY_CREATED = \"COMMENT_REPLY_CREATED\",\n+  COMMENT_CREATED = \"COMMENT_CREATED\",\n+  COMMENT_FEATURED = \"COMMENT_FEATURED\",\n+  COMMENT_RELEASED = \"COMMENT_RELEASED\",\n+  STORY_CREATED = \"STORY_CREATED\",\n+}"
    },
    {
      "sha": "92a9b5b84316ac27e11d8983e90284a4bf1ab42f",
      "filename": "src/core/server/graph/context.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 20,
      "changes": 26,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/context.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/context.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/context.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -4,21 +4,18 @@ import uuid from \"uuid\";\n \n import { LanguageCode } from \"coral-common/helpers/i18n/locales\";\n import { Config } from \"coral-server/config\";\n-import {\n-  createPublisher,\n-  Publisher,\n-} from \"coral-server/graph/subscriptions/publisher\";\n+import CoralEventListenerBroker, {\n+  CoralEventPublisherBroker,\n+} from \"coral-server/events/publisher\";\n import logger, { Logger } from \"coral-server/logger\";\n import { PersistedQuery } from \"coral-server/models/queries\";\n import { Tenant } from \"coral-server/models/tenant\";\n import { User } from \"coral-server/models/user\";\n import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n-import { NotifierQueue } from \"coral-server/queue/tasks/notifier\";\n import { ScraperQueue } from \"coral-server/queue/tasks/scraper\";\n import { I18n } from \"coral-server/services/i18n\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n import { AugmentedRedis } from \"coral-server/services/redis\";\n-import createSlackPublisher from \"coral-server/services/slack/publisher\";\n import TenantCache from \"coral-server/services/tenant/cache\";\n import { Request } from \"coral-server/types/express\";\n \n@@ -41,16 +38,17 @@ export interface GraphContextOptions {\n   i18n: I18n;\n   mailerQueue: MailerQueue;\n   mongo: Db;\n-  notifierQueue: NotifierQueue;\n   pubsub: RedisPubSub;\n   redis: AugmentedRedis;\n   scraperQueue: ScraperQueue;\n   tenant: Tenant;\n   tenantCache: TenantCache;\n+  broker: CoralEventListenerBroker;\n }\n \n export default class GraphContext {\n   public readonly config: Config;\n+  public readonly broker: CoralEventPublisherBroker;\n   public readonly disableCaching: boolean;\n   public readonly i18n: I18n;\n   public readonly id: string;\n@@ -61,7 +59,6 @@ export default class GraphContext {\n   public readonly mongo: Db;\n   public readonly mutators: ReturnType<typeof mutators>;\n   public readonly now: Date;\n-  public readonly publisher: Publisher;\n   public readonly pubsub: RedisPubSub;\n   public readonly redis: AugmentedRedis;\n   public readonly scraperQueue: ScraperQueue;\n@@ -100,18 +97,7 @@ export default class GraphContext {\n     this.signingConfig = options.signingConfig;\n     this.clientID = options.clientID;\n \n-    this.publisher = createPublisher({\n-      pubsub: this.pubsub,\n-      slackPublisher: createSlackPublisher(\n-        this.mongo,\n-        this.config,\n-        this.tenant\n-      ),\n-      notifierQueue: options.notifierQueue,\n-      tenantID: this.tenant.id,\n-      clientID: this.clientID,\n-    });\n-\n+    this.broker = options.broker.instance(this);\n     this.loaders = loaders(this);\n     this.mutators = mutators(this);\n   }"
    },
    {
      "sha": "48f6725acfe1dee5d54a1e0e800d510e4a5a4955",
      "filename": "src/core/server/graph/loaders/Stories.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/loaders/Stories.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/loaders/Stories.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/loaders/Stories.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -81,7 +81,14 @@ const primeStoriesFromConnection = (ctx: GraphContext) => (\n export default (ctx: GraphContext) => ({\n   findOrCreate: new DataLoader(\n     createManyBatchLoadFn((input: FindOrCreateStory) =>\n-      findOrCreate(ctx.mongo, ctx.tenant, input, ctx.scraperQueue, ctx.now)\n+      findOrCreate(\n+        ctx.mongo,\n+        ctx.tenant,\n+        ctx.broker,\n+        input,\n+        ctx.scraperQueue,\n+        ctx.now\n+      )\n     ),\n     {\n       // TODO: (wyattjoh) see if there's something we can do to improve the cache key"
    },
    {
      "sha": "cf396ffec71217278b256f811d93aac8857dda1d",
      "filename": "src/core/server/graph/mutators/Actions.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/mutators/Actions.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/mutators/Actions.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/mutators/Actions.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -12,7 +12,7 @@ export const Actions = (ctx: GraphContext) => ({\n       ctx.mongo,\n       ctx.redis,\n       ctx.config,\n-      ctx.publisher,\n+      ctx.broker,\n       ctx.tenant,\n       input.commentID,\n       input.commentRevisionID,\n@@ -24,7 +24,7 @@ export const Actions = (ctx: GraphContext) => ({\n       ctx.mongo,\n       ctx.redis,\n       ctx.config,\n-      ctx.publisher,\n+      ctx.broker,\n       ctx.tenant,\n       input.commentID,\n       input.commentRevisionID,"
    },
    {
      "sha": "8ed0b37269e6f47b4f4a9555d2de82396af0ead5",
      "filename": "src/core/server/graph/mutators/Comments.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 16,
      "changes": 27,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/mutators/Comments.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/mutators/Comments.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/mutators/Comments.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -45,7 +45,7 @@ export const Comments = (ctx: GraphContext) => ({\n         ctx.mongo,\n         ctx.redis,\n         ctx.config,\n-        ctx.publisher,\n+        ctx.broker,\n         ctx.tenant,\n         ctx.user!,\n         { authorID: ctx.user!.id, ...comment },\n@@ -68,7 +68,7 @@ export const Comments = (ctx: GraphContext) => ({\n         ctx.mongo,\n         ctx.redis,\n         ctx.config,\n-        ctx.publisher,\n+        ctx.broker,\n         ctx.tenant,\n         ctx.user!,\n         {\n@@ -92,7 +92,7 @@ export const Comments = (ctx: GraphContext) => ({\n     createReaction(\n       ctx.mongo,\n       ctx.redis,\n-      ctx.publisher,\n+      ctx.broker,\n       ctx.tenant,\n       ctx.user!,\n       {\n@@ -102,7 +102,7 @@ export const Comments = (ctx: GraphContext) => ({\n       ctx.now\n     ),\n   removeReaction: ({ commentID }: GQLRemoveCommentReactionInput) =>\n-    removeReaction(ctx.mongo, ctx.redis, ctx.publisher, ctx.tenant, ctx.user!, {\n+    removeReaction(ctx.mongo, ctx.redis, ctx.broker, ctx.tenant, ctx.user!, {\n       commentID,\n     }),\n   createDontAgree: ({\n@@ -113,7 +113,7 @@ export const Comments = (ctx: GraphContext) => ({\n     createDontAgree(\n       ctx.mongo,\n       ctx.redis,\n-      ctx.publisher,\n+      ctx.broker,\n       ctx.tenant,\n       ctx.user!,\n       {\n@@ -128,14 +128,9 @@ export const Comments = (ctx: GraphContext) => ({\n       ctx.now\n     ),\n   removeDontAgree: ({ commentID }: GQLRemoveCommentDontAgreeInput) =>\n-    removeDontAgree(\n-      ctx.mongo,\n-      ctx.redis,\n-      ctx.publisher,\n-      ctx.tenant,\n-      ctx.user!,\n-      { commentID }\n-    ),\n+    removeDontAgree(ctx.mongo, ctx.redis, ctx.broker, ctx.tenant, ctx.user!, {\n+      commentID,\n+    }),\n   createFlag: ({\n     commentID,\n     commentRevisionID,\n@@ -145,7 +140,7 @@ export const Comments = (ctx: GraphContext) => ({\n     createFlag(\n       ctx.mongo,\n       ctx.redis,\n-      ctx.publisher,\n+      ctx.broker,\n       ctx.tenant,\n       ctx.user!,\n       {\n@@ -179,7 +174,7 @@ export const Comments = (ctx: GraphContext) => ({\n               ctx.mongo,\n               ctx.redis,\n               ctx.config,\n-              ctx.publisher,\n+              ctx.broker,\n               ctx.tenant,\n               commentID,\n               commentRevisionID,\n@@ -190,7 +185,7 @@ export const Comments = (ctx: GraphContext) => ({\n       )\n       .then(comment => {\n         // Publish that the comment was featured.\n-        publishCommentFeatured(ctx.publisher, comment);\n+        publishCommentFeatured(ctx.broker, comment);\n \n         // Return it to the next step.\n         return comment;"
    },
    {
      "sha": "2b2908a01cd93be60e76127d0926031bd5b092ff",
      "filename": "src/core/server/graph/mutators/Settings.ts",
      "status": "modified",
      "additions": 55,
      "deletions": 1,
      "changes": 56,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/mutators/Settings.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/mutators/Settings.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/mutators/Settings.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -2,19 +2,33 @@ import GraphContext from \"coral-server/graph/context\";\n import { Tenant } from \"coral-server/models/tenant\";\n import {\n   createAnnouncement,\n+  createWebhookEndpoint,\n   deleteAnnouncement,\n+  deleteWebhookEndpoint,\n   disableFeatureFlag,\n+  disableWebhookEndpoint,\n   enableFeatureFlag,\n+  enableWebhookEndpoint,\n   regenerateSSOKey,\n+  rotateWebhookEndpointSecret,\n   update,\n+  updateWebhookEndpoint,\n } from \"coral-server/services/tenant\";\n \n import {\n   GQLCreateAnnouncementInput,\n+  GQLCreateWebhookEndpointInput,\n+  GQLDeleteWebhookEndpointInput,\n+  GQLDisableWebhookEndpointInput,\n+  GQLEnableWebhookEndpointInput,\n   GQLFEATURE_FLAG,\n+  GQLRotateWebhookEndpointSecretInput,\n   GQLUpdateSettingsInput,\n+  GQLUpdateWebhookEndpointInput,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n+import { WithoutMutationID } from \"./util\";\n+\n export const Settings = ({\n   mongo,\n   redis,\n@@ -23,7 +37,9 @@ export const Settings = ({\n   config,\n   now,\n }: GraphContext) => ({\n-  update: (input: GQLUpdateSettingsInput): Promise<Tenant | null> =>\n+  update: (\n+    input: WithoutMutationID<GQLUpdateSettingsInput>\n+  ): Promise<Tenant | null> =>\n     update(mongo, redis, tenantCache, config, tenant, input.settings),\n   regenerateSSOKey: (): Promise<Tenant | null> =>\n     regenerateSSOKey(mongo, redis, tenantCache, tenant, now),\n@@ -35,4 +51,42 @@ export const Settings = ({\n     createAnnouncement(mongo, redis, tenantCache, tenant, input, now),\n   deleteAnnouncement: () =>\n     deleteAnnouncement(mongo, redis, tenantCache, tenant),\n+  createWebhookEndpoint: (\n+    input: WithoutMutationID<GQLCreateWebhookEndpointInput>\n+  ) =>\n+    createWebhookEndpoint(\n+      mongo,\n+      redis,\n+      config,\n+      tenantCache,\n+      tenant,\n+      input,\n+      now\n+    ),\n+  enableWebhookEndpoint: (\n+    input: WithoutMutationID<GQLEnableWebhookEndpointInput>\n+  ) => enableWebhookEndpoint(mongo, redis, tenantCache, tenant, input.id),\n+  disableWebhookEndpoint: (\n+    input: WithoutMutationID<GQLDisableWebhookEndpointInput>\n+  ) => disableWebhookEndpoint(mongo, redis, tenantCache, tenant, input.id),\n+  updateWebhookEndpoint: ({\n+    id,\n+    ...input\n+  }: WithoutMutationID<GQLUpdateWebhookEndpointInput>) =>\n+    updateWebhookEndpoint(mongo, redis, config, tenantCache, tenant, id, input),\n+  deleteWebhookEndpoint: (\n+    input: WithoutMutationID<GQLDeleteWebhookEndpointInput>\n+  ) => deleteWebhookEndpoint(mongo, redis, tenantCache, tenant, input.id),\n+  rotateWebhookEndpointSecret: (\n+    input: WithoutMutationID<GQLRotateWebhookEndpointSecretInput>\n+  ) =>\n+    rotateWebhookEndpointSecret(\n+      mongo,\n+      redis,\n+      tenantCache,\n+      tenant,\n+      input.id,\n+      input.inactiveIn,\n+      now\n+    ),\n });"
    },
    {
      "sha": "aa2611606448d595cfaca25ac9ae6a4ea613cc8b",
      "filename": "src/core/server/graph/mutators/Stories.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/mutators/Stories.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/mutators/Stories.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/mutators/Stories.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -32,6 +32,7 @@ export const Stories = (ctx: GraphContext) => ({\n       create(\n         ctx.mongo,\n         ctx.tenant,\n+        ctx.broker,\n         ctx.config,\n         input.story.id,\n         input.story.url,"
    },
    {
      "sha": "1bad2f1ecdf70654e23026a0e50ef1e8687cc1c6",
      "filename": "src/core/server/graph/resolvers/ModerationQueues.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/ModerationQueues.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/ModerationQueues.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/ModerationQueues.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -86,7 +86,7 @@ export const storyModerationInputResolver = (\n  *\n  * @param source the source of the type, not used\n  * @param args the args of the type, not used\n- * @param ctx the TenantContext that will be used to get the shared counts\n+ * @param ctx the GraphContext that will be used to get the shared counts\n  */\n export const sharedModerationInputResolver = async (\n   source: any,\n@@ -106,7 +106,7 @@ export const sharedModerationInputResolver = async (\n  *\n  * @param source the source of the payload, not used\n  * @param args the args of the payload containing potentially a Story ID\n- * @param ctx the TenantContext for which we can use to retrieve the shared data\n+ * @param ctx the GraphContext for which we can use to retrieve the shared data\n  */\n export const moderationQueuesResolver: QueryToModerationQueuesResolver = async (\n   source,"
    },
    {
      "sha": "c194922b7bdf859a69d3a3b0a244967fa038e2ec",
      "filename": "src/core/server/graph/resolvers/Mutation.ts",
      "status": "modified",
      "additions": 54,
      "deletions": 2,
      "changes": 56,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/Mutation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/Mutation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/Mutation.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -33,9 +33,13 @@ export const Mutation: Required<GQLMutationTypeResolver<void>> = {\n     user: await ctx.mutators.Users.updateNotificationSettings(input),\n     clientMutationId,\n   }),\n-  updateSettings: async (source, { input }, ctx) => ({\n+  updateSettings: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n     settings: await ctx.mutators.Settings.update(input),\n-    clientMutationId: input.clientMutationId,\n+    clientMutationId,\n   }),\n   createCommentReaction: async (source, { input }, ctx) => ({\n     comment: await ctx.mutators.Comments.createReaction(input),\n@@ -252,4 +256,52 @@ export const Mutation: Required<GQLMutationTypeResolver<void>> = {\n     site: await ctx.mutators.Sites.update(input),\n     clientMutationId: input.clientMutationId,\n   }),\n+  createWebhookEndpoint: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    ...(await ctx.mutators.Settings.createWebhookEndpoint(input)),\n+    clientMutationId,\n+  }),\n+  updateWebhookEndpoint: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    endpoint: await ctx.mutators.Settings.updateWebhookEndpoint(input),\n+    clientMutationId,\n+  }),\n+  disableWebhookEndpoint: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    endpoint: await ctx.mutators.Settings.disableWebhookEndpoint(input),\n+    clientMutationId,\n+  }),\n+  enableWebhookEndpoint: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    endpoint: await ctx.mutators.Settings.enableWebhookEndpoint(input),\n+    clientMutationId,\n+  }),\n+  deleteWebhookEndpoint: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    endpoint: await ctx.mutators.Settings.deleteWebhookEndpoint(input),\n+    clientMutationId,\n+  }),\n+  rotateWebhookEndpointSecret: async (\n+    source,\n+    { input: { clientMutationId, ...input } },\n+    ctx\n+  ) => ({\n+    endpoint: await ctx.mutators.Settings.rotateWebhookEndpointSecret(input),\n+    clientMutationId,\n+  }),\n };"
    },
    {
      "sha": "822eb616ac573e37880cbb53e3a8c175032aefc6",
      "filename": "src/core/server/graph/resolvers/Query.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/Query.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/Query.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/Query.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,3 +1,5 @@\n+import { getWebhookEndpoint } from \"coral-server/models/tenant\";\n+\n import { GQLQueryTypeResolver } from \"coral-server/graph/schema/__generated__/types\";\n \n import { moderationQueuesResolver } from \"./ModerationQueues\";\n@@ -25,4 +27,5 @@ export const Query: Required<GQLQueryTypeResolver<void>> = {\n     ctx.loaders.Stories.activeStories(limit),\n   sites: (source, args, ctx) => ctx.loaders.Sites.connection(args),\n   site: (source, { id }, ctx) => (id ? ctx.loaders.Sites.site.load(id) : null),\n+  webhookEndpoint: (source, { id }, ctx) => getWebhookEndpoint(ctx.tenant, id),\n };"
    },
    {
      "sha": "978f72e034a9f884d9e3fc93d5184df93fc068a4",
      "filename": "src/core/server/graph/resolvers/SSOAuthIntegration.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/SSOAuthIntegration.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/SSOAuthIntegration.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/SSOAuthIntegration.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -2,7 +2,7 @@ import * as settings from \"coral-server/models/settings\";\n \n import { GQLSSOAuthIntegrationTypeResolver } from \"coral-server/graph/schema/__generated__/types\";\n \n-function getActiveSSOKey(keys: settings.SSOKey[]) {\n+function getActiveSSOKey(keys: settings.Secret[]) {\n   // Any key that has been rotated cannot be the active key.\n   return keys.find(key => !key.rotatedAt);\n }"
    },
    {
      "sha": "a4f1549d936b3bcc344dad88a3ec19528c15a399",
      "filename": "src/core/server/graph/resolvers/Settings.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/Settings.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/Settings.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/Settings.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -6,6 +6,7 @@ import {\n import {\n   GQLFEATURE_FLAG,\n   GQLSettingsTypeResolver,\n+  GQLWEBHOOK_EVENT_NAME,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n const filterValidFeatureFlags = () => {\n@@ -27,4 +28,5 @@ export const Settings: GQLSettingsTypeResolver<Tenant> = {\n     const sites = await ctx.loaders.Sites.connection({});\n     return sites.edges.length > 1;\n   },\n+  webhookEvents: () => Object.values(GQLWEBHOOK_EVENT_NAME),\n };"
    },
    {
      "sha": "754a060fc4fa3a16f15c8043effabd824e05d3c1",
      "filename": "src/core/server/graph/resolvers/Subscription/index.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/Subscription/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/Subscription/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/Subscription/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -17,3 +17,13 @@ export const Subscription: GQLSubscriptionTypeResolver = {\n   commentFeatured,\n   commentReleased,\n };\n+\n+export { CommentFeaturedInput } from \"./commentFeatured\";\n+export { CommentCreatedInput } from \"./commentCreated\";\n+export {\n+  CommentEnteredModerationQueueInput,\n+} from \"./commentEnteredModerationQueue\";\n+export { CommentLeftModerationQueueInput } from \"./commentLeftModerationQueue\";\n+export { CommentReleasedInput } from \"./commentReleased\";\n+export { CommentReplyCreatedInput } from \"./commentReplyCreated\";\n+export { CommentStatusUpdatedInput } from \"./commentStatusUpdated\";"
    },
    {
      "sha": "6b613dcd0a111461f59f1a28ceed68316b41a1a4",
      "filename": "src/core/server/graph/resolvers/WebhookEndpoint.ts",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/WebhookEndpoint.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/WebhookEndpoint.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/WebhookEndpoint.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,10 @@\n+import * as tenant from \"coral-server/models/tenant\";\n+\n+import { GQLWebhookEndpointTypeResolver } from \"coral-server/graph/schema/__generated__/types\";\n+\n+export const WebhookEndpoint: GQLWebhookEndpointTypeResolver<\n+  tenant.Endpoint\n+> = {\n+  signingSecret: ({ signingSecrets }) =>\n+    signingSecrets[signingSecrets.length - 1],\n+};"
    },
    {
      "sha": "0ba8f620d1b83ed49e8baf47228f4c4afed99e2f",
      "filename": "src/core/server/graph/resolvers/index.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/resolvers/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -50,6 +50,7 @@ import { User } from \"./User\";\n import { UsernameHistory } from \"./UsernameHistory\";\n import { UsernameStatus } from \"./UsernameStatus\";\n import { UserStatus } from \"./UserStatus\";\n+import { WebhookEndpoint } from \"./WebhookEndpoint\";\n \n const Resolvers: GQLResolver = {\n   ApproveCommentPayload,\n@@ -101,6 +102,7 @@ const Resolvers: GQLResolver = {\n   UserStatus,\n   Settings,\n   SlackConfiguration,\n+  WebhookEndpoint,\n };\n \n export default Resolvers;"
    },
    {
      "sha": "d877ea72bd739209296108b12b8ecbed361fab2c",
      "filename": "src/core/server/graph/schema/schema.graphql",
      "status": "modified",
      "additions": 338,
      "deletions": 1,
      "changes": 339,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/schema/schema.graphql",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/graph/schema/schema.graphql",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/schema/schema.graphql?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1002,7 +1002,7 @@ type SlackChannel {\n   triggers are the filters of types of comments that will be sent to\n   the correlated channel\n   \"\"\"\n-  triggers: SlackChannelTriggers\n+  triggers: SlackChannelTriggers!\n }\n \n ################################################################################\n@@ -1204,6 +1204,79 @@ type StaffConfiguration {\n   label: String!\n }\n \n+type WebhookDelivery {\n+  success: Boolean!\n+  status: Int!\n+  statusText: String!\n+  request: String!\n+  response: String!\n+  createdAt: Time!\n+}\n+\n+enum WEBHOOK_EVENT_NAME {\n+  STORY_CREATED\n+}\n+\n+\"\"\"\n+TODO: merge with SSOKey with PR #2732\n+\"\"\"\n+type Secret {\n+  \"\"\"\n+  secret is the actual underlying secret used to verify the tokens with.\n+  \"\"\"\n+  secret: String!\n+\n+  \"\"\"\n+  createdAt is the date that the key was created at.\n+  \"\"\"\n+  createdAt: Time!\n+}\n+\n+type WebhookEndpoint {\n+  \"\"\"\n+  id is the unique identifier for this specific endpoint.\n+  \"\"\"\n+  id: ID!\n+\n+  \"\"\"\n+  enabled when true will enable events to be sent to this endpoint.\n+  \"\"\"\n+  enabled: Boolean!\n+\n+  \"\"\"\n+  url is the URL that we will POST event data to.\n+  \"\"\"\n+  url: String!\n+\n+  \"\"\"\n+  signingSecret is the current secret used to sign the events sent out.\n+  \"\"\"\n+  signingSecret: Secret!\n+\n+  \"\"\"\n+  deliveries store the deliveries for each event sent for the last 50 events.\n+  \"\"\"\n+  deliveries: [WebhookDelivery!]!\n+\n+  \"\"\"\n+  all is true when all events are subscribed to.\n+  \"\"\"\n+  all: Boolean!\n+\n+  \"\"\"\n+  events are the specific event names that this endpoint is configured to send\n+  for.\n+  \"\"\"\n+  events: [WEBHOOK_EVENT_NAME!]!\n+}\n+\n+type WebhookConfiguration {\n+  \"\"\"\n+  endpoints is all the configured endpoints that should receive events.\n+  \"\"\"\n+  endpoints: [WebhookEndpoint!]!\n+}\n+\n \"\"\"\n NewCommenterConfiguration specifies the features that apply to new commenters\n \"\"\"\n@@ -1266,6 +1339,16 @@ type Settings {\n   \"\"\"\n   domain: String! @auth(roles: [ADMIN])\n \n+  \"\"\"\n+  webhooks store the webhook configuration.\n+  \"\"\"\n+  webhooks: WebhookConfiguration! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  webhookEvents returns all the events that can trigger webhooks.\n+  \"\"\"\n+  webhookEvents: [WEBHOOK_EVENT_NAME!]! @auth(roles: [ADMIN])\n+\n   \"\"\"\n   staticURI if configured, is the static URI used to serve static files from.\n   \"\"\"\n@@ -2891,6 +2974,11 @@ type Query {\n   activeStories(limit: Int = 10 @constraint(max: 25)): [Story!]!\n     @auth(roles: [ADMIN])\n     @rate(max: 2, seconds: 1)\n+\n+  \"\"\"\n+  webhookEndpint will return a specific WebhookEndpoint if it exists.\n+  \"\"\"\n+  webhookEndpoint(id: ID!): WebhookEndpoint @auth(roles: [ADMIN])\n }\n \n ################################################################################\n@@ -4768,6 +4856,212 @@ type DeleteModeratorNotePayload {\n   user: User!\n }\n \n+##################\n+# createWebhookEndpoint\n+##################\n+\n+input CreateWebhookEndpointInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  url is the URL that Coral will POST event data to.\n+  \"\"\"\n+  url: String!\n+\n+  \"\"\"\n+  all is true when all events are subscribed to.\n+  \"\"\"\n+  all: Boolean!\n+\n+  \"\"\"\n+  events are the specific event names that this endpoint is configured to send\n+  for.\n+  \"\"\"\n+  events: [WEBHOOK_EVENT_NAME!]!\n+}\n+\n+type CreateWebhookEndpointPayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  endpoint is the endpoint that we just created.\n+  \"\"\"\n+  endpoint: WebhookEndpoint!\n+\n+  \"\"\"\n+  settings is the updated settings also containing the new endpoint.\n+  \"\"\"\n+  settings: Settings!\n+}\n+\n+##################\n+# updateWebhookEndpoint\n+##################\n+\n+input UpdateWebhookEndpointInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  id is the ID of the WebhookEndpoint being updated.\n+  \"\"\"\n+  id: ID!\n+\n+  \"\"\"\n+  url is the URL that Coral will POST event data to.\n+  \"\"\"\n+  url: String\n+\n+  \"\"\"\n+  all is true when all events are subscribed to.\n+  \"\"\"\n+  all: Boolean\n+\n+  \"\"\"\n+  events are the specific event names that this endpoint is configured to send\n+  for.\n+  \"\"\"\n+  events: [WEBHOOK_EVENT_NAME!]\n+}\n+\n+type UpdateWebhookEndpointPayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  endpoint is the endpoint that we just created.\n+  \"\"\"\n+  endpoint: WebhookEndpoint!\n+}\n+\n+##################\n+# rotateWebhookEndpointSecret\n+##################\n+\n+input RotateWebhookEndpointSecretInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  id is the ID of the WebhookEndpoint being updated.\n+  \"\"\"\n+  id: ID!\n+\n+  \"\"\"\n+  inactiveIn is the number of seconds that the current active Secret should be\n+  kept active.\n+  \"\"\"\n+  inactiveIn: Int!\n+}\n+\n+type RotateWebhookEndpointSecretPayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  endpoint is the endpoint that we just updated.\n+  \"\"\"\n+  endpoint: WebhookEndpoint\n+}\n+\n+##################\n+# disableWebhookEndpoint\n+##################\n+\n+input DisableWebhookEndpointInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  id is the ID of the WebhookEndpoint being disabled.\n+  \"\"\"\n+  id: ID!\n+}\n+\n+type DisableWebhookEndpointPayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  endpoint is the endpoint that we just disabled.\n+  \"\"\"\n+  endpoint: WebhookEndpoint\n+}\n+\n+##################\n+# enableWebhookEndpoint\n+##################\n+\n+input EnableWebhookEndpointInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  id is the ID of the WebhookEndpoint being enabled.\n+  \"\"\"\n+  id: ID!\n+}\n+\n+type EnableWebhookEndpointPayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  endpoint is the endpoint that we just enabled.\n+  \"\"\"\n+  endpoint: WebhookEndpoint\n+}\n+\n+##################\n+# deleteWebhookEndpoint\n+##################\n+\n+input DeleteWebhookEndpointInput {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  id is the ID of the WebhookEndpoint being deleted.\n+  \"\"\"\n+  id: ID!\n+}\n+\n+type DeleteWebhookEndpointPayload {\n+  \"\"\"\n+  clientMutationId is required for Relay support.\n+  \"\"\"\n+  clientMutationId: String!\n+\n+  \"\"\"\n+  endpoint is the endpoint that we just deleted.\n+  \"\"\"\n+  endpoint: WebhookEndpoint\n+}\n+\n ##################\n # setEmail\n ##################\n@@ -5899,6 +6193,49 @@ type Mutation {\n   createSite(input: CreateSiteInput!): CreateSitePayload! @auth(roles: [ADMIN])\n \n   updateSite(input: UpdateSiteInput!): UpdateSitePayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  createWebhookEndpoint will create a new WebhookEndpoint.\n+  \"\"\"\n+  createWebhookEndpoint(\n+    input: CreateWebhookEndpointInput!\n+  ): CreateWebhookEndpointPayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  updateWebhookEndpoint will update a WebhookEndpoint.\n+  \"\"\"\n+  updateWebhookEndpoint(\n+    input: UpdateWebhookEndpointInput!\n+  ): UpdateWebhookEndpointPayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  enableWebhookEndpoint will enable a WebhookEndpoint to recieve new events.\n+  \"\"\"\n+  enableWebhookEndpoint(\n+    input: EnableWebhookEndpointInput!\n+  ): EnableWebhookEndpointPayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  disableWebhookEndpoint will disable a WebhookEndpoint from recieving new\n+  events.\n+  \"\"\"\n+  disableWebhookEndpoint(\n+    input: DisableWebhookEndpointInput!\n+  ): DisableWebhookEndpointPayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  deleteWebhookEndpoint will delete a WebhookEndpoint.\n+  \"\"\"\n+  deleteWebhookEndpoint(\n+    input: DeleteWebhookEndpointInput!\n+  ): DeleteWebhookEndpointPayload! @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  rotateWebhookEndpointSecret will roll the current active secret to a new key.\n+  \"\"\"\n+  rotateWebhookEndpointSecret(\n+    input: RotateWebhookEndpointSecretInput!\n+  ): RotateWebhookEndpointSecretPayload! @auth(roles: [ADMIN])\n }\n \n ##################"
    },
    {
      "sha": "79e46fb27ca2aa8b17bdb5a6102f97f34bea526b",
      "filename": "src/core/server/graph/subscriptions/publisher.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 57,
      "changes": 57,
      "blob_url": "https://github.com/coralproject/talk/blob/34ba2da88df86f8634a2bbb630a99b92dfe4d41c/src/core/server/graph/subscriptions/publisher.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/34ba2da88df86f8634a2bbb630a99b92dfe4d41c/src/core/server/graph/subscriptions/publisher.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/subscriptions/publisher.ts?ref=34ba2da88df86f8634a2bbb630a99b92dfe4d41c",
      "patch": "@@ -1,57 +0,0 @@\n-import { RedisPubSub } from \"graphql-redis-subscriptions\";\n-\n-import { createSubscriptionChannelName } from \"coral-server/graph/resolvers/Subscription/helpers\";\n-import { SUBSCRIPTION_INPUT } from \"coral-server/graph/resolvers/Subscription/types\";\n-import logger from \"coral-server/logger\";\n-import { NotifierQueue } from \"coral-server/queue/tasks/notifier\";\n-import { SlackPublisher } from \"coral-server/services/slack/publisher\";\n-\n-export type Publisher = (input: SUBSCRIPTION_INPUT) => Promise<void>;\n-\n-export interface PublisherOptions {\n-  pubsub: RedisPubSub;\n-  slackPublisher: SlackPublisher;\n-  notifierQueue: NotifierQueue;\n-  tenantID: string;\n-  clientID?: string;\n-}\n-\n-/**\n- * createPublisher will create a new Publisher that can be used to send events\n- * over the pubsub broker to facilitate live updates and notifications.\n- *\n- * TODO: Update\n- *\n- * @param options options object\n- * @param options.pubsub the pubsub broker to be used to facilitate the publish action\n- * @param options.slackPublisher the slack publisher instance\n- * @param options.notifierQueue the queue\n- * @param options.tenantID the ID of the Tenant where the event will be published with\n- * @param options.clientID the ID of the client to de-duplicate mutation responses\n- */\n-export const createPublisher = ({\n-  pubsub,\n-  slackPublisher,\n-  notifierQueue,\n-  tenantID,\n-  clientID,\n-}: PublisherOptions): Publisher => async input => {\n-  const { channel, payload } = input;\n-\n-  logger.trace({ channel, tenantID, clientID }, \"publishing event\");\n-\n-  // Start the publishing operation out to all affected subscribers.\n-  await Promise.all([\n-    // Publish to the underlying pubsub system for subscriptions.\n-    pubsub.publish(createSubscriptionChannelName(tenantID, channel), {\n-      ...payload,\n-      clientID,\n-    }),\n-\n-    slackPublisher(channel, payload),\n-\n-    // Notify the notifications queue so we can offload notification processing\n-    // to it.\n-    notifierQueue.add({ tenantID, input }),\n-  ]);\n-};"
    },
    {
      "sha": "d43de169c038692d7df9d34ddc86986fcdd71477",
      "filename": "src/core/server/index.ts",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -37,6 +37,11 @@ import {\n } from \"coral-server/services/redis\";\n import TenantCache from \"coral-server/services/tenant/cache\";\n \n+import { NotifierCoralEventListener } from \"./events/listeners/notifier\";\n+import { SlackCoralEventListener } from \"./events/listeners/slack\";\n+import { SubscriptionCoralEventListener } from \"./events/listeners/subscription\";\n+import { WebhookCoralEventListener } from \"./events/listeners/webhook\";\n+import CoralEventListenerBroker from \"./events/publisher\";\n import { isInstalled } from \"./services/tenant\";\n \n export interface ServerOptions {\n@@ -108,6 +113,12 @@ class Server {\n   // migrationManager is the manager for performing migrations on Coral.\n   private migrationManager: MigrationManager;\n \n+  /**\n+   * broker stores a reference to all of the listeners that can be used in\n+   * conjunction with an event to publish activity occurring inside Coral.\n+   */\n+  private broker: CoralEventListenerBroker;\n+\n   constructor(options: ServerOptions) {\n     this.parentApp = express();\n \n@@ -190,6 +201,7 @@ class Server {\n     this.tasks = await createQueue({\n       config: this.config,\n       mongo: this.mongo,\n+      redis: this.redis,\n       tenantCache: this.tenantCache,\n       i18n: this.i18n,\n       signingConfig: this.signingConfig,\n@@ -201,6 +213,13 @@ class Server {\n       createRedisClient(this.config)\n     );\n \n+    // Setup the broker.\n+    this.broker = new CoralEventListenerBroker();\n+    this.broker.register(new NotifierCoralEventListener(this.tasks.notifier));\n+    this.broker.register(new SlackCoralEventListener());\n+    this.broker.register(new SubscriptionCoralEventListener());\n+    this.broker.register(new WebhookCoralEventListener(this.tasks.webhook));\n+\n     // Setup the metrics collectors.\n     collectDefaultMetrics({ timeout: 5000 });\n   }\n@@ -233,6 +252,7 @@ class Server {\n     this.tasks.mailer.process();\n     this.tasks.scraper.process();\n     this.tasks.notifier.process();\n+    this.tasks.webhook.process();\n \n     // Start up the cron job processors.\n     this.scheduledTasks = startScheduledTasks({\n@@ -323,6 +343,7 @@ class Server {\n \n     const options: AppOptions = {\n       parent,\n+      broker: this.broker,\n       pubsub: this.pubsub,\n       mongo: this.mongo,\n       redis: this.redis,\n@@ -333,7 +354,6 @@ class Server {\n       i18n: this.i18n,\n       mailerQueue: this.tasks.mailer,\n       scraperQueue: this.tasks.scraper,\n-      notifierQueue: this.tasks.notifier,\n       disableClientRoutes,\n       persistedQueryCache: this.persistedQueryCache,\n       persistedQueriesRequired:"
    },
    {
      "sha": "5fd61cce8d9b6a57600ea5544a696b58056711aa",
      "filename": "src/core/server/models/settings/index.ts",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/settings/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/settings/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/settings/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,2 @@\n+export * from \"./settings\";\n+export * from \"./secret\";"
    },
    {
      "sha": "e23f6abfe46bd8da41729203f70570b3e1b0c055",
      "filename": "src/core/server/models/settings/secret.ts",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/settings/secret.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/settings/secret.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/settings/secret.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,44 @@\n+export interface Secret {\n+  /**\n+   * kid is the identifier for the key used when verifying tokens issued by the\n+   * provider.\n+   */\n+  kid: string;\n+\n+  /**\n+   * secret is the actual underlying secret used to verify the tokens with.\n+   */\n+  secret: string;\n+\n+  /**\n+   * createdAt is the date that the key was created at.\n+   */\n+  createdAt: Date;\n+\n+  /**\n+   * rotatedAt is the time that the token was rotated out.\n+   */\n+  rotatedAt?: Date;\n+\n+  /**\n+   * inactiveAt is the date that the token can no longer be used to validate\n+   * tokens.\n+   */\n+  inactiveAt?: Date;\n+}\n+\n+export function isSecretExpired({ inactiveAt }: Secret, now = new Date()) {\n+  if (inactiveAt && inactiveAt <= now) {\n+    return true;\n+  }\n+\n+  return false;\n+}\n+\n+export function filterExpiredSecrets(now = new Date()) {\n+  return (secret: Secret) => isSecretExpired(secret, now);\n+}\n+\n+export function filterActiveSecrets(now = new Date()) {\n+  return (secret: Secret) => !isSecretExpired(secret, now);\n+}"
    },
    {
      "sha": "b4ae22d44a8f74032da2442fb781bcd5037b538b",
      "filename": "src/core/server/models/settings/settings.ts",
      "status": "renamed",
      "additions": 3,
      "deletions": 30,
      "changes": 33,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/settings/settings.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/settings/settings.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/settings/settings.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -13,6 +13,8 @@ import {\n   GQLSettings,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n+import { Secret } from \"./secret\";\n+\n export type LiveConfiguration = Omit<GQLLiveConfiguration, \"configurable\">;\n \n export type EmailConfiguration = GQLEmailConfiguration;\n@@ -38,40 +40,11 @@ export type FacebookAuthIntegration = Omit<\n   \"callbackURL\" | \"redirectURL\"\n >;\n \n-export interface SSOKey {\n-  /**\n-   * kid is the identifier for the key used when verifying tokens issued by the\n-   * provider.\n-   */\n-  kid: string;\n-\n-  /**\n-   * secret is the actual underlying secret used to verify the tokens with.\n-   */\n-  secret: string;\n-\n-  /**\n-   * createdAt is the date that the key was created at.\n-   */\n-  createdAt: Date;\n-\n-  /**\n-   * rotatedAt is the time that the token was rotated out.\n-   */\n-  rotatedAt?: Date;\n-\n-  /**\n-   * inactiveAt is the date that the token can no longer be used to validate\n-   * tokens.\n-   */\n-  inactiveAt?: Date;\n-}\n-\n export interface SSOAuthIntegration {\n   enabled: boolean;\n   allowRegistration: boolean;\n   targetFilter: GQLAuthenticationTargetFilter;\n-  keys: SSOKey[];\n+  keys: Secret[];\n }\n \n /**",
      "previous_filename": "src/core/server/models/settings.ts"
    },
    {
      "sha": "a2b5235f664843037f09979b6cf6886b1939cac1",
      "filename": "src/core/server/models/story/index.ts",
      "status": "modified",
      "additions": 41,
      "deletions": 19,
      "changes": 60,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/story/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/story/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/story/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -93,24 +93,27 @@ export interface UpsertStoryInput {\n   siteID: string;\n }\n \n+export interface UpsertStoryResult {\n+  story: Story;\n+  wasUpserted: boolean;\n+}\n+\n export async function upsertStory(\n   mongo: Db,\n   tenantID: string,\n   { id = uuid.v4(), url, siteID }: UpsertStoryInput,\n   now = new Date()\n-) {\n+): Promise<UpsertStoryResult> {\n   // Create the story, optionally sourcing the id from the input, additionally\n   // porting in the tenantID.\n-  const update: { $setOnInsert: Story } = {\n-    $setOnInsert: {\n-      id,\n-      url,\n-      siteID,\n-      tenantID,\n-      createdAt: now,\n-      commentCounts: createEmptyRelatedCommentCounts(),\n-      settings: {},\n-    },\n+  const story: Story = {\n+    id,\n+    url,\n+    tenantID,\n+    siteID,\n+    createdAt: now,\n+    commentCounts: createEmptyRelatedCommentCounts(),\n+    settings: {},\n   };\n \n   try {\n@@ -121,18 +124,26 @@ export async function upsertStory(\n         url,\n         tenantID,\n       },\n-      update,\n+      { $setOnInsert: story },\n       {\n         // Create the object if it doesn't already exist.\n         upsert: true,\n \n-        // False to return the updated document instead of the original\n-        // document.\n-        returnOriginal: false,\n+        // True to return the original document instead of the updated document.\n+        // This will ensure that when an upsert operation adds a new Story, it\n+        // should return null.\n+        returnOriginal: true,\n       }\n     );\n \n-    return result.value || null;\n+    return {\n+      // The story will either be found (via `result.value`) or upserted (via\n+      // `story`).\n+      story: result.value || story,\n+\n+      // The story was upserted if the value isn't provided.\n+      wasUpserted: !result.value,\n+    };\n   } catch (err) {\n     // Evaluate the error, if it is in regards to violating the unique index,\n     // then return a duplicate Story error.\n@@ -172,13 +183,18 @@ export interface FindOrCreateStoryInput {\n   url?: string;\n }\n \n+export interface FindOrCreateStoryResult {\n+  story: Story | null;\n+  wasUpserted: boolean;\n+}\n+\n export async function findOrCreateStory(\n   mongo: Db,\n   tenantID: string,\n   { id, url }: FindOrCreateStoryInput,\n   siteID: string | null,\n   now = new Date()\n-) {\n+): Promise<FindOrCreateStoryResult> {\n   if (id) {\n     if (url && siteID) {\n       // The URL was specified, this is an upsert operation.\n@@ -194,8 +210,14 @@ export async function findOrCreateStory(\n       );\n     }\n \n-    // The URL and siteID were not specified, this is a lookup operation.\n-    return retrieveStory(mongo, tenantID, id);\n+    // The URL was not specified, this is a lookup operation.\n+    const story = await retrieveStory(mongo, tenantID, id);\n+\n+    // Return the result object.\n+    return {\n+      story,\n+      wasUpserted: false,\n+    };\n   }\n \n   // The ID was not specified, this is an upsert operation. Check to see that"
    },
    {
      "sha": "9087ec616dbd80bd61531b3e44c97c9be44dc6cb",
      "filename": "src/core/server/models/tenant/helpers.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/tenant/helpers.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/tenant/helpers.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/tenant/helpers.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -9,7 +9,7 @@ import {\n   GQLStaffConfiguration,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n-import { SSOKey } from \"../settings\";\n+import { Secret } from \"../settings\";\n import { Tenant } from \"./tenant\";\n \n export const getDefaultReactionConfiguration = (\n@@ -39,12 +39,12 @@ export function generateRandomString(size: number, drift = 5) {\n     .toString(\"hex\");\n }\n \n-export function generateSSOKey(createdAt: Date): SSOKey {\n+export function generateSecret(prefix: string, createdAt: Date): Secret {\n   // Generate a new key. We generate a key of minimum length 32 up to 37 bytes,\n   // as 16 was the minimum length recommended.\n   //\n   // Reference: https://security.stackexchange.com/a/96176\n-  const secret = generateRandomString(32, 5);\n+  const secret = prefix + \"_\" + generateRandomString(32, 5);\n   const kid = generateRandomString(8, 3);\n \n   return { kid, secret, createdAt };\n@@ -67,3 +67,10 @@ export function hasFeatureFlag(\n \n   return false;\n }\n+\n+export function getWebhookEndpoint(\n+  tenant: Pick<Tenant, \"webhooks\">,\n+  endpointID: string\n+) {\n+  return tenant.webhooks.endpoints.find(e => e.id === endpointID) || null;\n+}"
    },
    {
      "sha": "8d40e9877b4e2b7a4ddef8b9af1a7a805592d1c5",
      "filename": "src/core/server/models/tenant/tenant.ts",
      "status": "modified",
      "additions": 308,
      "deletions": 7,
      "changes": 315,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/tenant/tenant.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/tenant/tenant.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/tenant/tenant.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -9,7 +9,8 @@ import TIME from \"coral-common/time\";\n import { DeepPartial, Omit, Sub } from \"coral-common/types\";\n import { isBeforeDate } from \"coral-common/utils\";\n import { dotize } from \"coral-common/utils/dotize\";\n-import { Settings } from \"coral-server/models/settings\";\n+import logger from \"coral-server/logger\";\n+import { Secret, Settings } from \"coral-server/models/settings\";\n import { I18n } from \"coral-server/services/i18n\";\n import { tenants as collection } from \"coral-server/services/mongodb/collections\";\n \n@@ -18,12 +19,14 @@ import {\n   GQLFEATURE_FLAG,\n   GQLMODERATION_MODE,\n   GQLSettings,\n+  GQLWEBHOOK_EVENT_NAME,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n import {\n-  generateSSOKey,\n+  generateSecret,\n   getDefaultReactionConfiguration,\n   getDefaultStaffConfiguration,\n+  getWebhookEndpoint,\n } from \"./helpers\";\n \n /**\n@@ -38,6 +41,49 @@ export interface TenantResource {\n   readonly tenantID: string;\n }\n \n+export interface Endpoint {\n+  /**\n+   * id is the unique identifier for this specific endpoint.\n+   */\n+  id: string;\n+\n+  /**\n+   * enabled when true will enable events to be sent to this endpoint.\n+   */\n+  enabled: boolean;\n+\n+  /**\n+   * url is the URL that we will POST event data to.\n+   */\n+  url: string;\n+\n+  /**\n+   * signingSecret is the secret used to sign the events sent out.\n+   */\n+  signingSecrets: Secret[];\n+\n+  /**\n+   * all when true indicates that all events should trigger.\n+   */\n+  all: boolean;\n+\n+  /**\n+   * events is the array of events that will trigger the delivery of an\n+   * event.\n+   */\n+  events: GQLWEBHOOK_EVENT_NAME[];\n+\n+  /**\n+   * createdAt is the date that this endpoint was created.\n+   */\n+  createdAt: Date;\n+\n+  /**\n+   * modifiedAt is the date that this Endpoint was last modified at.\n+   */\n+  modifiedAt?: Date;\n+}\n+\n export interface TenantSettings\n   extends Pick<GQLSettings, \"domain\" | \"organization\"> {\n   readonly id: string;\n@@ -51,6 +97,16 @@ export interface TenantSettings\n    * featureFlags is the set of flags enabled on this Tenant.\n    */\n   featureFlags?: GQLFEATURE_FLAG[];\n+\n+  /**\n+   * webhooks stores the configurations for this Tenant's webhook rules.\n+   */\n+  webhooks: {\n+    /**\n+     * endpoints is all the configured endpoints that should receive events.\n+     */\n+    endpoints: Endpoint[];\n+  };\n }\n \n /**\n@@ -112,6 +168,9 @@ export async function createTenant(\n       enabled: false,\n     },\n     editCommentWindowLength: 30 * TIME.SECOND,\n+    webhooks: {\n+      endpoints: [],\n+    },\n     charCount: {\n       enabled: false,\n     },\n@@ -138,7 +197,7 @@ export async function createTenant(\n             stream: true,\n           },\n           // TODO: [CORL-754] (wyattjoh) remove this in favor of generating this when needed\n-          keys: [generateSSOKey(now)],\n+          keys: [generateSecret(\"ssosec\", now)],\n         },\n         oidc: {\n           enabled: false,\n@@ -294,9 +353,11 @@ export async function updateTenant(\n     { id },\n     // Only update fields that have been updated.\n     { $set },\n-    // False to return the updated document instead of the original\n-    // document.\n-    { returnOriginal: false }\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+    }\n   );\n \n   return result.value || null;\n@@ -309,7 +370,7 @@ export async function updateTenant(\n  */\n export async function createTenantSSOKey(mongo: Db, id: string, now: Date) {\n   // Construct the new key.\n-  const key = generateSSOKey(now);\n+  const key = generateSecret(\"ssosec\", now);\n \n   // Update the Tenant with this new key.\n   const result = await collection(mongo).findOneAndUpdate(\n@@ -466,3 +527,243 @@ export function retrieveAnnouncementIfEnabled(\n   }\n   return null;\n }\n+\n+export async function rollTenantWebhookEndpointSecret(\n+  mongo: Db,\n+  id: string,\n+  endpointID: string,\n+  inactiveAt: Date,\n+  now: Date\n+) {\n+  // Create the new secret.\n+  const secret = generateSecret(\"whsec\", now);\n+\n+  // Update the Tenant with this new secret.\n+  let result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    {\n+      $push: { \"webhooks.endpoints.$[endpoint].signingSecrets\": secret },\n+    },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+      arrayFilters: [\n+        // Select the endpoint we're updating.\n+        { \"endpoint.id\": endpointID },\n+      ],\n+    }\n+  );\n+  if (!result.value) {\n+    return null;\n+  }\n+\n+  // Grab the endpoint we just modified.\n+  const endpoint = getWebhookEndpoint(result.value, endpointID);\n+  if (!endpoint) {\n+    return null;\n+  }\n+\n+  // Get the secrets we need to deactivate...\n+  const secretKIDsToDeprecate = endpoint.signingSecrets\n+    // By excluding the last one (the one we just pushed)...\n+    .splice(0, endpoint.signingSecrets.length - 1)\n+    // And only finding keys that have not been rotated yet.\n+    .filter(s => !s.rotatedAt)\n+    // And get their kid's.\n+    .map(s => s.kid);\n+  if (secretKIDsToDeprecate.length > 0) {\n+    logger.trace(\n+      { kids: secretKIDsToDeprecate },\n+      \"deprecating old signingSecrets\"\n+    );\n+\n+    // Deactivate the old keys.\n+    result = await collection(mongo).findOneAndUpdate(\n+      { id },\n+      {\n+        $set: {\n+          \"webhooks.endpoints.$[endpoint].signingSecrets.$[signingSecret].inactiveAt\": inactiveAt,\n+          \"webhooks.endpoints.$[endpoint].signingSecrets.$[signingSecret].rotatedAt\": now,\n+        },\n+      },\n+      {\n+        arrayFilters: [\n+          // Select the endpoint we're updating.\n+          { \"endpoint.id\": endpointID },\n+          // Select any signing secrets with the given ids.\n+          { \"signingSecret.kid\": { $in: secretKIDsToDeprecate } },\n+        ],\n+      }\n+    );\n+  }\n+\n+  return result.value;\n+}\n+\n+export interface CreateTenantWebhookEndpointInput {\n+  url: string;\n+  all: boolean;\n+  events: GQLWEBHOOK_EVENT_NAME[];\n+}\n+\n+export async function createTenantWebhookEndpoint(\n+  mongo: Db,\n+  id: string,\n+  input: CreateTenantWebhookEndpointInput,\n+  now: Date\n+) {\n+  // Create the new endpoint.\n+  const endpoint: Endpoint = {\n+    ...input,\n+    id: uuid(),\n+    enabled: true,\n+    signingSecrets: [generateSecret(\"whsec\", now)],\n+    createdAt: now,\n+  };\n+\n+  // Update the Tenant with this new endpoint.\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    { $push: { \"webhooks.endpoints\": endpoint } },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+    }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return {\n+        endpoint: null,\n+        tenant: null,\n+      };\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return {\n+    endpoint,\n+    tenant: result.value,\n+  };\n+}\n+\n+export interface UpdateTenantWebhookEndpointInput {\n+  enabled?: boolean;\n+  url?: string;\n+  all?: boolean;\n+  events?: GQLWEBHOOK_EVENT_NAME[];\n+}\n+\n+export async function updateTenantWebhookEndpoint(\n+  mongo: Db,\n+  id: string,\n+  endpointID: string,\n+  update: UpdateTenantWebhookEndpointInput\n+) {\n+  const $set = dotize(\n+    { \"webhooks.endpoints.$[endpoint]\": update },\n+    { embedArrays: true }\n+  );\n+\n+  // Check to see if there is any updates that will be made.\n+  if (isEmpty($set)) {\n+    // No updates need to be made, abort here and just return the tenant.\n+    return retrieveTenant(mongo, id);\n+  }\n+\n+  // Perform the actual update operation.\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    { $set },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+      arrayFilters: [{ \"endpoint.id\": endpointID }],\n+    }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return null;\n+    }\n+\n+    const endpoint = getWebhookEndpoint(tenant, endpointID);\n+    if (!endpoint) {\n+      throw new Error(\n+        `endpoint not found with id: ${endpointID} on tenant: ${id}`\n+      );\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return result.value;\n+}\n+\n+export async function deleteEndpointSecrets(\n+  mongo: Db,\n+  id: string,\n+  endpointID: string,\n+  kids: string[]\n+) {\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    {\n+      $pull: {\n+        \"webhooks.endpoints.$[endpoint].signingSecrets\": { kid: { $in: kids } },\n+      },\n+    },\n+    { returnOriginal: false, arrayFilters: [{ \"endpoint.id\": endpointID }] }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return null;\n+    }\n+\n+    const endpoint = getWebhookEndpoint(tenant, endpointID);\n+    if (!endpoint) {\n+      throw new Error(\n+        `endpoint not found with id: ${endpointID} on tenant: ${id}`\n+      );\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return result.value;\n+}\n+\n+export async function deleteTenantWebhookEndpoint(\n+  mongo: Db,\n+  id: string,\n+  endpointID: string\n+) {\n+  const result = await collection(mongo).findOneAndUpdate(\n+    { id },\n+    {\n+      $pull: {\n+        \"webhooks.endpoints\": { id: endpointID },\n+      },\n+    },\n+    {\n+      // False to return the updated document instead of the original\n+      // document.\n+      returnOriginal: false,\n+    }\n+  );\n+  if (!result.value) {\n+    const tenant = await retrieveTenant(mongo, id);\n+    if (!tenant) {\n+      return null;\n+    }\n+\n+    throw new Error(\"update failed for an unexpected reason\");\n+  }\n+\n+  return result.value;\n+}"
    },
    {
      "sha": "f3d206aeb7e5a2ed0d54a88fde8897820f6b619a",
      "filename": "src/core/server/models/user/user.ts",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/user/user.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/models/user/user.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/user/user.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -576,7 +576,7 @@ export async function findOrCreateUser(\n   const user = await findOrCreateUserInput(tenantID, input, now);\n \n   try {\n-    await collection(mongo).findOneAndUpdate(\n+    const result = await collection(mongo).findOneAndUpdate(\n       {\n         tenantID,\n         profiles: {\n@@ -588,12 +588,18 @@ export async function findOrCreateUser(\n       },\n       { $setOnInsert: user },\n       {\n-        // False to return the updated document instead of the original\n-        // document.\n-        returnOriginal: false,\n+        // True to return the original document instead of the updated document.\n+        // This will ensure that when an upsert operation adds a new User, it\n+        // should return null.\n+        returnOriginal: true,\n         upsert: true,\n       }\n     );\n+\n+    return {\n+      user: result.value || user,\n+      wasUpserted: !result.value,\n+    };\n   } catch (err) {\n     // Evaluate the error, if it is in regards to violating the unique index,\n     // then return a duplicate User error.\n@@ -607,8 +613,6 @@ export async function findOrCreateUser(\n \n     throw err;\n   }\n-\n-  return user;\n }\n \n export type CreateUserInput = FindOrCreateUserInput;"
    },
    {
      "sha": "405f980751139c93f6fce423a34862478408c5cb",
      "filename": "src/core/server/queue/Task.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/Task.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/Task.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/Task.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -4,9 +4,11 @@ import Logger from \"bunyan\";\n import TIME from \"coral-common/time\";\n import logger from \"coral-server/logger\";\n \n-export interface TaskOptions<T, U = any> {\n+export type JobProcessor<T, U = void> = (job: Job<T>) => Promise<U>;\n+\n+export interface TaskOptions<T, U = void> {\n   jobName: string;\n-  jobProcessor: (job: Job<T>) => Promise<U>;\n+  jobProcessor: JobProcessor<T, U>;\n   jobOptions?: Queue.JobOptions;\n   queue: Queue.QueueOptions;\n }"
    },
    {
      "sha": "f64f9bd6d69d9aab476f0d29fa85fca518fa7645",
      "filename": "src/core/server/queue/index.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,4 +1,5 @@\n import Queue from \"bull\";\n+import { Redis } from \"ioredis\";\n import { Db } from \"mongodb\";\n \n import { Config } from \"coral-server/config\";\n@@ -10,6 +11,7 @@ import TenantCache from \"coral-server/services/tenant/cache\";\n import { createMailerTask, MailerQueue } from \"./tasks/mailer\";\n import { createNotifierTask, NotifierQueue } from \"./tasks/notifier\";\n import { createScraperTask, ScraperQueue } from \"./tasks/scraper\";\n+import { createWebhookTask, WebhookQueue } from \"./tasks/webhook\";\n \n const createQueueOptions = async (\n   config: Config\n@@ -47,12 +49,14 @@ export interface QueueOptions {\n   tenantCache: TenantCache;\n   i18n: I18n;\n   signingConfig: JWTSigningConfig;\n+  redis: Redis;\n }\n \n export interface TaskQueue {\n   mailer: MailerQueue;\n   scraper: ScraperQueue;\n   notifier: NotifierQueue;\n+  webhook: WebhookQueue;\n }\n \n export async function createQueue(options: QueueOptions): Promise<TaskQueue> {\n@@ -67,11 +71,13 @@ export async function createQueue(options: QueueOptions): Promise<TaskQueue> {\n     mailerQueue: mailer,\n     ...options,\n   });\n+  const webhook = createWebhookTask(queueOptions, options);\n \n   // Return the tasks + client.\n   return {\n     mailer,\n     scraper,\n     notifier,\n+    webhook,\n   };\n }"
    },
    {
      "sha": "2ba223cf524c923e4fcc4e4b07347653a81c6597",
      "filename": "src/core/server/queue/tasks/notifier/index.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 19,
      "changes": 34,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/tasks/notifier/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/tasks/notifier/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/notifier/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,10 +1,8 @@\n import Queue from \"bull\";\n-import { groupBy } from \"lodash\";\n import { Db } from \"mongodb\";\n \n import { Config } from \"coral-server/config\";\n-import { SUBSCRIPTION_CHANNELS } from \"coral-server/graph/resolvers/Subscription/types\";\n-import logger from \"coral-server/logger\";\n+import { CoralEventType } from \"coral-server/events\";\n import Task from \"coral-server/queue/Task\";\n import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n@@ -29,34 +27,32 @@ interface Options {\n  * that could be sent to users.\n  */\n export class NotifierQueue {\n-  private registry: Record<SUBSCRIPTION_CHANNELS, NotificationCategory[]>;\n   private task: Task<NotifierData>;\n \n   constructor(queue: Queue.QueueOptions, options: Options) {\n+    const registry = new Map<CoralEventType, NotificationCategory[]>();\n+\n     // Notification categories have been grouped by their event name so that\n     // each event emitted need only access the associated notification once.\n-    this.registry = groupBy(categories, \"event\") as Record<\n-      SUBSCRIPTION_CHANNELS,\n-      NotificationCategory[]\n-    >;\n+    for (const category of categories) {\n+      for (const event of category.events as CoralEventType[]) {\n+        let handlers = registry.get(event);\n+        if (!handlers) {\n+          handlers = [];\n+        }\n+        handlers.push(category);\n+        registry.set(event, handlers);\n+      }\n+    }\n+\n     this.task = new Task({\n       jobName: JOB_NAME,\n-      jobProcessor: createJobProcessor({ registry: this.registry, ...options }),\n+      jobProcessor: createJobProcessor({ registry, ...options }),\n       queue,\n     });\n   }\n \n   public async add(data: NotifierData) {\n-    // Get all the handlers that are active for this channel.\n-    const c = this.registry[data.input.channel];\n-    if (!c || c.length === 0) {\n-      logger.debug(\n-        { channel: data.input.channel },\n-        \"no notifications registered on this channel\"\n-      );\n-      return;\n-    }\n-\n     return this.task.add(data);\n   }\n "
    },
    {
      "sha": "bb4706227e1d7891b7b2de287a2780a42d8b4220",
      "filename": "src/core/server/queue/tasks/notifier/messages.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/tasks/notifier/messages.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/tasks/notifier/messages.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/notifier/messages.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,10 +1,11 @@\n-import { SUBSCRIPTION_INPUT } from \"coral-server/graph/resolvers/Subscription/types\";\n-import { GQLDIGEST_FREQUENCY } from \"coral-server/graph/schema/__generated__/types\";\n+import { CoralEventPayload } from \"coral-server/events/event\";\n import logger from \"coral-server/logger\";\n import { NotificationCategory } from \"coral-server/services/notifications/categories\";\n import NotificationContext from \"coral-server/services/notifications/context\";\n import { Notification } from \"coral-server/services/notifications/notification\";\n \n+import { GQLDIGEST_FREQUENCY } from \"coral-server/graph/schema/__generated__/types\";\n+\n import { MailerQueue } from \"../mailer\";\n import { DigestibleTemplate } from \"../mailer/templates\";\n import { CategoryNotification } from \"./processor\";\n@@ -52,11 +53,11 @@ export const filterSuperseded = (\n export const handleHandlers = async (\n   ctx: NotificationContext,\n   categories: NotificationCategory[],\n-  input: SUBSCRIPTION_INPUT\n+  payload: CoralEventPayload\n ): Promise<CategoryNotification[]> => {\n   const notifications: Array<CategoryNotification | null> = await Promise.all(\n     categories.map(async category => {\n-      const notification = await category.process(ctx, input.payload);\n+      const notification = await category.process(ctx, payload);\n       if (!notification) {\n         return null;\n       }"
    },
    {
      "sha": "4af95f81029f1c37e933ca4650da986e9a8fe5fe",
      "filename": "src/core/server/queue/tasks/notifier/processor.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/tasks/notifier/processor.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/tasks/notifier/processor.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/notifier/processor.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -2,10 +2,8 @@ import { Job } from \"bull\";\n import { Db } from \"mongodb\";\n \n import { Config } from \"coral-server/config\";\n-import {\n-  SUBSCRIPTION_CHANNELS,\n-  SUBSCRIPTION_INPUT,\n-} from \"coral-server/graph/resolvers/Subscription/types\";\n+import { CoralEventType } from \"coral-server/events\";\n+import { NotifierCoralEventListenerPayloads } from \"coral-server/events/listeners/notifier\";\n import logger from \"coral-server/logger\";\n import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n@@ -27,14 +25,14 @@ export const JOB_NAME = \"notifications\";\n  */\n export interface NotifierData {\n   tenantID: string;\n-  input: SUBSCRIPTION_INPUT;\n+  input: NotifierCoralEventListenerPayloads;\n }\n \n interface Options {\n   mailerQueue: MailerQueue;\n   mongo: Db;\n   config: Config;\n-  registry: Record<SUBSCRIPTION_CHANNELS, NotificationCategory[]>;\n+  registry: Map<CoralEventType, NotificationCategory[]>;\n   tenantCache: TenantCache;\n   signingConfig: JWTSigningConfig;\n }\n@@ -83,7 +81,7 @@ export const createJobProcessor = ({\n \n     try {\n       // Get all the handlers that are active for this channel.\n-      const categories = registry[input.channel];\n+      const categories = registry.get(input.type);\n       if (!categories || categories.length === 0) {\n         return;\n       }"
    },
    {
      "sha": "e301f118c668475fc4e47c016e0c0e765e6e2391",
      "filename": "src/core/server/queue/tasks/webhook/index.ts",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/tasks/webhook/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/tasks/webhook/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/webhook/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,22 @@\n+import Queue from \"bull\";\n+\n+import Task from \"coral-server/queue/Task\";\n+\n+import {\n+  createJobProcessor,\n+  JOB_NAME,\n+  WebhookData,\n+  WebhookProcessorOptions,\n+} from \"./processor\";\n+\n+export type WebhookQueue = Task<WebhookData>;\n+\n+export const createWebhookTask = (\n+  queue: Queue.QueueOptions,\n+  options: WebhookProcessorOptions\n+) =>\n+  new Task({\n+    jobName: JOB_NAME,\n+    jobProcessor: createJobProcessor(options),\n+    queue,\n+  });"
    },
    {
      "sha": "dc4d4d71fd4956388d862344366e7e78020b2b8a",
      "filename": "src/core/server/queue/tasks/webhook/processor.ts",
      "status": "added",
      "additions": 262,
      "deletions": 0,
      "changes": 262,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/tasks/webhook/processor.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/queue/tasks/webhook/processor.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/webhook/processor.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,262 @@\n+import crypto from \"crypto\";\n+import { Redis } from \"ioredis\";\n+import { Db } from \"mongodb\";\n+import getNow from \"performance-now\";\n+\n+import { Config } from \"coral-server/config\";\n+import { CoralEventPayload } from \"coral-server/events/event\";\n+import logger from \"coral-server/logger\";\n+import {\n+  filterActiveSecrets,\n+  filterExpiredSecrets,\n+} from \"coral-server/models/settings\";\n+import {\n+  deleteEndpointSecrets,\n+  Endpoint,\n+  getWebhookEndpoint,\n+} from \"coral-server/models/tenant\";\n+import { JobProcessor } from \"coral-server/queue/Task\";\n+import { createFetch, FetchOptions } from \"coral-server/services/fetch\";\n+import { disableWebhookEndpoint } from \"coral-server/services/tenant\";\n+import TenantCache from \"coral-server/services/tenant/cache\";\n+\n+export const JOB_NAME = \"webhook\";\n+\n+// The count of failures on a webhook delivery before we disable the endpoint.\n+const MAXIMUM_FAILURE_COUNT = 10;\n+\n+// The number of webhook attempts that should be retained for debugging.\n+const MAXIMUM_EVENT_ATTEMPTS_LOG_SIZE = 50;\n+\n+export interface WebhookProcessorOptions {\n+  config: Config;\n+  mongo: Db;\n+  redis: Redis;\n+  tenantCache: TenantCache;\n+}\n+\n+export interface WebhookData {\n+  contextID: string;\n+  endpointID: string;\n+  tenantID: string;\n+  event: CoralEventPayload;\n+}\n+\n+export interface WebhookDelivery {\n+  id: string;\n+  name: string;\n+  success: boolean;\n+  status: number;\n+  statusText: string;\n+  request: string;\n+  response: string;\n+  createdAt: Date;\n+}\n+\n+/**\n+ * generateSignature will generate a signature used to assist clients to\n+ * validate that the request came from Coral.\n+ *\n+ * @param secret the secret used to sign the body with\n+ * @param body the body to use when signing\n+ */\n+export function generateSignature(secret: string, body: string) {\n+  return crypto\n+    .createHmac(\"sha256\", secret)\n+    .update(body)\n+    .digest()\n+    .toString(\"hex\");\n+}\n+\n+export function generateSignatures(\n+  endpoint: Pick<Endpoint, \"signingSecrets\">,\n+  body: string,\n+  now: Date\n+) {\n+  // For each of the signatures, we only want to sign the body with secrets that\n+  // are still active.\n+  return endpoint.signingSecrets\n+    .filter(filterActiveSecrets(now))\n+    .map(({ secret }) => generateSignature(secret, body))\n+    .map(signature => `sha256=${signature}`)\n+    .join(\",\");\n+}\n+\n+export function generateFetchOptions(\n+  endpoint: Pick<Endpoint, \"signingSecrets\">,\n+  data: CoralEventPayload,\n+  now: Date\n+): FetchOptions {\n+  // Serialize the body and signature to include in the request.\n+  const body = JSON.stringify(data, null, 2);\n+  const signature = generateSignatures(endpoint, body, now);\n+\n+  const headers: Record<string, any> = {\n+    \"Content-Type\": \"application/json\",\n+    \"X-Coral-Event\": data.type,\n+    \"X-Coral-Signature\": signature,\n+  };\n+\n+  return {\n+    method: \"POST\",\n+    headers,\n+    body,\n+  };\n+}\n+\n+export function createJobProcessor({\n+  mongo,\n+  tenantCache,\n+  redis,\n+}: WebhookProcessorOptions): JobProcessor<WebhookData> {\n+  // Create the fetcher that will orchestrate sending the actual webhooks.\n+  const fetch = createFetch({ name: \"Webhook\" });\n+\n+  return async job => {\n+    const { tenantID, endpointID, contextID, event } = job.data;\n+\n+    const log = logger.child(\n+      {\n+        eventID: event.id,\n+        contextID,\n+        jobID: job.id,\n+        jobName: JOB_NAME,\n+        tenantID,\n+        endpointID,\n+      },\n+      true\n+    );\n+\n+    // Get the referenced tenant so we can get the endpoint details.\n+    const tenant = await tenantCache.retrieveByID(tenantID);\n+    if (!tenant) {\n+      log.error(\"referenced tenant was not found\");\n+      return;\n+    }\n+\n+    // Get the referenced endpoint.\n+    const endpoint = getWebhookEndpoint(tenant, endpointID);\n+    if (!endpoint) {\n+      log.error(\"referenced endpoint was not found\");\n+      return;\n+    }\n+\n+    // If the endpoint is disabled, don't bother processing it.\n+    if (!endpoint.enabled) {\n+      log.warn(\"endpoint was disabled, skipping sending\");\n+      return;\n+    }\n+\n+    // Get the current date.\n+    const now = new Date();\n+\n+    // Get the fetch options.\n+    const options = generateFetchOptions(endpoint, event, now);\n+\n+    // Send the request.\n+    const startedSendingAt = getNow();\n+    const res = await fetch(endpoint.url, options);\n+    const took = getNow() - startedSendingAt;\n+    if (res.ok) {\n+      log.info(\n+        { took, responseStatus: res.status },\n+        \"finished sending webhook\"\n+      );\n+    } else {\n+      log.warn(\n+        { took, responseStatus: res.status },\n+        \"failed to deliver webhook\"\n+      );\n+    }\n+\n+    // Grab the response from the webhook, we'll want to save this in the recent\n+    // attempts.\n+    const response = await res.text();\n+\n+    // Collect the delivery information.\n+    const delivery: WebhookDelivery = {\n+      id: event.id,\n+      name: event.type,\n+      success: res.ok,\n+      status: res.status,\n+      statusText: res.statusText,\n+      // We only serialize the body as a string.\n+      request: options.body as string,\n+      response,\n+      createdAt: new Date(),\n+    };\n+\n+    // Record the delivery.\n+    const endpointDeliveriesKey = `${tenantID}:endpointDeliveries:${endpointID}`;\n+    const endpointFailuresKey = `${tenantID}:endpointFailures:${endpointID}`;\n+    let [, , [, failuresString]] = await redis\n+      .multi()\n+      // Push the attempt into the list.\n+      .rpush(endpointDeliveriesKey, JSON.stringify(delivery))\n+      // Trim the list to the 50 most recent attempts.\n+      .ltrim(endpointDeliveriesKey, 0, MAXIMUM_EVENT_ATTEMPTS_LOG_SIZE - 1)\n+      // Get the current failure count.\n+      .get(endpointFailuresKey)\n+      // Execute the queued operations.\n+      .exec();\n+\n+    let failures = failuresString ? parseInt(failuresString, 10) : null;\n+    if (res.ok && failures && failures > 0) {\n+      // The webhook delivery was a success, and there were previous failures.\n+      // Remove the failures record.\n+      await redis.del(endpointFailuresKey);\n+    } else if (!res.ok) {\n+      // Record the failed attempt.\n+      failuresString = await redis.incr(endpointFailuresKey);\n+\n+      // If the failure count is higher than the allowed maximum, disable the\n+      // endpoint.\n+      failures = failuresString ? parseInt(failuresString, 10) : null;\n+      if (failures && failures >= MAXIMUM_FAILURE_COUNT) {\n+        log.warn(\n+          { failures, maxFailures: MAXIMUM_FAILURE_COUNT },\n+          \"maximum failures reached, disabling endpoint\"\n+        );\n+\n+        await disableWebhookEndpoint(\n+          mongo,\n+          redis,\n+          tenantCache,\n+          tenant,\n+          endpointID\n+        );\n+      } else {\n+        // TODO: (wyattjoh) maybe schedule a retry?\n+      }\n+    }\n+\n+    // Remove the expired secrets in the next tick so that it does not affect\n+    // the sending performance of this job, and errors do not impact the\n+    // sending.\n+    const expiredSigningSecrets = endpoint.signingSecrets.filter(\n+      filterExpiredSecrets(now)\n+    );\n+    if (expiredSigningSecrets.length > 0) {\n+      process.nextTick(() => {\n+        deleteEndpointSecrets(\n+          mongo,\n+          tenantID,\n+          endpoint.id,\n+          expiredSigningSecrets.map(s => s.kid)\n+        )\n+          .then(() => {\n+            log.info(\n+              { secrets: expiredSigningSecrets.length },\n+              \"removed expired secrets from endpoint\"\n+            );\n+          })\n+          .catch(err => {\n+            log.error(\n+              { err },\n+              \"an error occurred when trying to remove expired secrets\"\n+            );\n+          });\n+      });\n+    }\n+  };\n+}"
    },
    {
      "sha": "4a57aabe0611c78d314ec650d696aace79a98fc8",
      "filename": "src/core/server/services/comments/actions.ts",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/comments/actions.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/comments/actions.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/actions.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -2,7 +2,7 @@ import { Db } from \"mongodb\";\n \n import { Omit } from \"coral-common/types\";\n import { CommentNotFoundError } from \"coral-server/errors\";\n-import { Publisher } from \"coral-server/graph/subscriptions/publisher\";\n+import { CoralEventPublisherBroker } from \"coral-server/events/publisher\";\n import {\n   ACTION_TYPE,\n   CreateActionInput,\n@@ -76,7 +76,7 @@ export async function addCommentActionCounts(\n async function addCommentAction(\n   mongo: Db,\n   redis: AugmentedRedis,\n-  publisher: Publisher,\n+  broker: CoralEventPublisherBroker,\n   tenant: Tenant,\n   input: Omit<CreateActionInput, \"storyID\" | \"siteID\">,\n   now = new Date()\n@@ -116,7 +116,7 @@ async function addCommentAction(\n     });\n \n     // Publish changes to the event publisher.\n-    await publishChanges(publisher, {\n+    await publishChanges(broker, {\n       ...counts,\n       before: oldComment,\n       after: updatedComment,\n@@ -131,7 +131,7 @@ async function addCommentAction(\n export async function removeCommentAction(\n   mongo: Db,\n   redis: AugmentedRedis,\n-  publisher: Publisher,\n+  broker: CoralEventPublisherBroker,\n   tenant: Tenant,\n   input: Omit<RemoveActionInput, \"commentRevisionID\" | \"reason\">\n ): Promise<Readonly<Comment>> {\n@@ -191,7 +191,7 @@ export async function removeCommentAction(\n     });\n \n     // Publish changes to the event publisher.\n-    await publishChanges(publisher, {\n+    await publishChanges(broker, {\n       ...counts,\n       before: oldComment,\n       after: updatedComment,\n@@ -211,7 +211,7 @@ export type CreateCommentReaction = Pick<\n export async function createReaction(\n   mongo: Db,\n   redis: AugmentedRedis,\n-  publish: Publisher,\n+  broker: CoralEventPublisherBroker,\n   tenant: Tenant,\n   author: User,\n   input: CreateCommentReaction,\n@@ -220,7 +220,7 @@ export async function createReaction(\n   return addCommentAction(\n     mongo,\n     redis,\n-    publish,\n+    broker,\n     tenant,\n     {\n       actionType: ACTION_TYPE.REACTION,\n@@ -237,12 +237,12 @@ export type RemoveCommentReaction = Pick<RemoveActionInput, \"commentID\">;\n export async function removeReaction(\n   mongo: Db,\n   redis: AugmentedRedis,\n-  publisher: Publisher,\n+  broker: CoralEventPublisherBroker,\n   tenant: Tenant,\n   author: User,\n   input: RemoveCommentReaction\n ) {\n-  return removeCommentAction(mongo, redis, publisher, tenant, {\n+  return removeCommentAction(mongo, redis, broker, tenant, {\n     actionType: ACTION_TYPE.REACTION,\n     commentID: input.commentID,\n     userID: author.id,\n@@ -257,7 +257,7 @@ export type CreateCommentDontAgree = Pick<\n export async function createDontAgree(\n   mongo: Db,\n   redis: AugmentedRedis,\n-  publish: Publisher,\n+  broker: CoralEventPublisherBroker,\n   tenant: Tenant,\n   author: User,\n   input: CreateCommentDontAgree,\n@@ -266,7 +266,7 @@ export async function createDontAgree(\n   return addCommentAction(\n     mongo,\n     redis,\n-    publish,\n+    broker,\n     tenant,\n     {\n       actionType: ACTION_TYPE.DONT_AGREE,\n@@ -284,12 +284,12 @@ export type RemoveCommentDontAgree = Pick<RemoveActionInput, \"commentID\">;\n export async function removeDontAgree(\n   mongo: Db,\n   redis: AugmentedRedis,\n-  publisher: Publisher,\n+  broker: CoralEventPublisherBroker,\n   tenant: Tenant,\n   author: User,\n   input: RemoveCommentDontAgree\n ) {\n-  return removeCommentAction(mongo, redis, publisher, tenant, {\n+  return removeCommentAction(mongo, redis, broker, tenant, {\n     actionType: ACTION_TYPE.DONT_AGREE,\n     commentID: input.commentID,\n     userID: author.id,\n@@ -306,7 +306,7 @@ export type CreateCommentFlag = Pick<\n export async function createFlag(\n   mongo: Db,\n   redis: AugmentedRedis,\n-  publish: Publisher,\n+  broker: CoralEventPublisherBroker,\n   tenant: Tenant,\n   author: User,\n   input: CreateCommentFlag,\n@@ -315,7 +315,7 @@ export async function createFlag(\n   return addCommentAction(\n     mongo,\n     redis,\n-    publish,\n+    broker,\n     tenant,\n     {\n       actionType: ACTION_TYPE.FLAG,"
    },
    {
      "sha": "3aed4d252768d475b14a0ab3ae78cce2d19f2414",
      "filename": "src/core/server/services/comments/pipeline/phases/toxic.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/comments/pipeline/phases/toxic.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/comments/pipeline/phases/toxic.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/phases/toxic.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,5 +1,4 @@\n import { isNil } from \"lodash\";\n-import fetch from \"node-fetch\";\n import path from \"path\";\n import { URL } from \"url\";\n \n@@ -18,6 +17,7 @@ import {\n   IntermediatePhaseResult,\n   ModerationPhaseContext,\n } from \"coral-server/services/comments/pipeline\";\n+import { createFetch } from \"coral-server/services/fetch\";\n \n import {\n   GQLCOMMENT_FLAG_REASON,\n@@ -26,6 +26,11 @@ import {\n   GQLPerspectiveExternalIntegration,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n+/**\n+ * fetch is the phase hook fetcher used to communicate with the Perspective API.\n+ */\n+const fetch = createFetch({ name: \"Hooks\" });\n+\n export const toxic: IntermediateModerationPhase = async ({\n   tenant,\n   nudge,"
    },
    {
      "sha": "3c11dd05271dcdb4b8fff665debce1c7063d059b",
      "filename": "src/core/server/services/events/comments.ts",
      "status": "modified",
      "additions": 68,
      "deletions": 90,
      "changes": 158,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/events/comments.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/events/comments.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/events/comments.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,153 +1,131 @@\n-import { SUBSCRIPTION_CHANNELS } from \"coral-server/graph/resolvers/Subscription/types\";\n-import { Publisher } from \"coral-server/graph/subscriptions/publisher\";\n-import { Comment, hasPublishedStatus } from \"coral-server/models/comment\";\n-import { CommentModerationQueueCounts } from \"coral-server/models/comment/counts\";\n+import {\n+  CommentCreatedCoralEvent,\n+  CommentEnteredModerationQueueCoralEvent,\n+  CommentFeaturedCoralEvent,\n+  CommentLeftModerationQueueCoralEvent,\n+  CommentReleasedCoralEvent,\n+  CommentReplyCreatedCoralEvent,\n+  CommentStatusUpdatedCoralEvent,\n+} from \"coral-server/events\";\n+import { CoralEventPublisherBroker } from \"coral-server/events/publisher\";\n+import {\n+  Comment,\n+  CommentModerationQueueCounts,\n+  hasPublishedStatus,\n+} from \"coral-server/models/comment\";\n \n import {\n   GQLCOMMENT_STATUS,\n   GQLMODERATION_QUEUE,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n-export function publishCommentStatusChanges(\n-  publish: Publisher,\n+export async function publishCommentStatusChanges(\n+  broker: CoralEventPublisherBroker,\n   oldStatus: GQLCOMMENT_STATUS,\n   newStatus: GQLCOMMENT_STATUS,\n   commentID: string,\n   moderatorID: string | null\n ) {\n   if (oldStatus !== newStatus) {\n-    publish({\n-      channel: SUBSCRIPTION_CHANNELS.COMMENT_STATUS_UPDATED,\n-      payload: {\n-        newStatus,\n-        oldStatus,\n-        commentID,\n-        moderatorID,\n-      },\n+    await CommentStatusUpdatedCoralEvent.publish(broker, {\n+      newStatus,\n+      oldStatus,\n+      commentID,\n+      moderatorID,\n     });\n   }\n }\n \n-export function publishCommentReplyCreated(\n-  publish: Publisher,\n+export async function publishCommentReplyCreated(\n+  broker: CoralEventPublisherBroker,\n   comment: Pick<Comment, \"id\" | \"status\" | \"ancestorIDs\">\n ) {\n   if (comment.ancestorIDs.length > 0 && hasPublishedStatus(comment)) {\n-    publish({\n-      channel: SUBSCRIPTION_CHANNELS.COMMENT_REPLY_CREATED,\n-      payload: {\n-        ancestorIDs: comment.ancestorIDs,\n-        commentID: comment.id,\n-      },\n+    await CommentReplyCreatedCoralEvent.publish(broker, {\n+      ancestorIDs: comment.ancestorIDs,\n+      commentID: comment.id,\n     });\n   }\n }\n \n-export function publishCommentCreated(\n-  publish: Publisher,\n+export async function publishCommentCreated(\n+  broker: CoralEventPublisherBroker,\n   comment: Pick<Comment, \"id\" | \"storyID\" | \"parentID\" | \"status\">\n ) {\n   if (!comment.parentID && hasPublishedStatus(comment)) {\n-    publish({\n-      channel: SUBSCRIPTION_CHANNELS.COMMENT_CREATED,\n-      payload: {\n-        commentID: comment.id,\n-        storyID: comment.storyID,\n-      },\n+    await CommentCreatedCoralEvent.publish(broker, {\n+      commentID: comment.id,\n+      storyID: comment.storyID,\n     });\n   }\n }\n \n-export function publishCommentReleased(\n-  publish: Publisher,\n+export async function publishCommentReleased(\n+  broker: CoralEventPublisherBroker,\n   comment: Pick<Comment, \"id\" | \"storyID\" | \"parentID\" | \"status\">\n ) {\n   if (!comment.parentID && hasPublishedStatus(comment)) {\n-    publish({\n-      channel: SUBSCRIPTION_CHANNELS.COMMENT_RELEASED,\n-      payload: {\n-        commentID: comment.id,\n-        storyID: comment.storyID,\n-      },\n+    await CommentReleasedCoralEvent.publish(broker, {\n+      commentID: comment.id,\n+      storyID: comment.storyID,\n     });\n   }\n }\n \n-export function publishCommentFeatured(\n-  publish: Publisher,\n+export async function publishCommentFeatured(\n+  broker: CoralEventPublisherBroker,\n   comment: Pick<Comment, \"id\" | \"status\" | \"storyID\">\n ) {\n   if (hasPublishedStatus(comment)) {\n-    publish({\n-      channel: SUBSCRIPTION_CHANNELS.COMMENT_FEATURED,\n-      payload: {\n-        commentID: comment.id,\n-        storyID: comment.storyID,\n-      },\n+    await CommentFeaturedCoralEvent.publish(broker, {\n+      commentID: comment.id,\n+      storyID: comment.storyID,\n     });\n   }\n }\n \n-export function publishModerationQueueChanges(\n-  publish: Publisher,\n+export async function publishModerationQueueChanges(\n+  broker: CoralEventPublisherBroker,\n   moderationQueue: Pick<CommentModerationQueueCounts, \"queues\">,\n   comment: Pick<Comment, \"id\" | \"storyID\">\n ) {\n   if (moderationQueue.queues.pending === 1) {\n-    publish({\n-      channel: SUBSCRIPTION_CHANNELS.COMMENT_ENTERED_MODERATION_QUEUE,\n-      payload: {\n-        queue: GQLMODERATION_QUEUE.PENDING,\n-        commentID: comment.id,\n-        storyID: comment.storyID,\n-      },\n+    await CommentEnteredModerationQueueCoralEvent.publish(broker, {\n+      queue: GQLMODERATION_QUEUE.PENDING,\n+      commentID: comment.id,\n+      storyID: comment.storyID,\n     });\n   } else if (moderationQueue.queues.pending === -1) {\n-    publish({\n-      channel: SUBSCRIPTION_CHANNELS.COMMENT_LEFT_MODERATION_QUEUE,\n-      payload: {\n-        queue: GQLMODERATION_QUEUE.PENDING,\n-        commentID: comment.id,\n-        storyID: comment.storyID,\n-      },\n+    await CommentLeftModerationQueueCoralEvent.publish(broker, {\n+      queue: GQLMODERATION_QUEUE.PENDING,\n+      commentID: comment.id,\n+      storyID: comment.storyID,\n     });\n   }\n   if (moderationQueue.queues.reported === 1) {\n-    publish({\n-      channel: SUBSCRIPTION_CHANNELS.COMMENT_ENTERED_MODERATION_QUEUE,\n-      payload: {\n-        queue: GQLMODERATION_QUEUE.REPORTED,\n-        commentID: comment.id,\n-        storyID: comment.storyID,\n-      },\n+    await CommentEnteredModerationQueueCoralEvent.publish(broker, {\n+      queue: GQLMODERATION_QUEUE.REPORTED,\n+      commentID: comment.id,\n+      storyID: comment.storyID,\n     });\n   } else if (moderationQueue.queues.reported === -1) {\n-    publish({\n-      channel: SUBSCRIPTION_CHANNELS.COMMENT_LEFT_MODERATION_QUEUE,\n-      payload: {\n-        queue: GQLMODERATION_QUEUE.REPORTED,\n-        commentID: comment.id,\n-        storyID: comment.storyID,\n-      },\n+    await CommentLeftModerationQueueCoralEvent.publish(broker, {\n+      queue: GQLMODERATION_QUEUE.REPORTED,\n+      commentID: comment.id,\n+      storyID: comment.storyID,\n     });\n   }\n   if (moderationQueue.queues.unmoderated === 1) {\n-    publish({\n-      channel: SUBSCRIPTION_CHANNELS.COMMENT_ENTERED_MODERATION_QUEUE,\n-      payload: {\n-        queue: GQLMODERATION_QUEUE.UNMODERATED,\n-        commentID: comment.id,\n-        storyID: comment.storyID,\n-      },\n+    await CommentEnteredModerationQueueCoralEvent.publish(broker, {\n+      queue: GQLMODERATION_QUEUE.UNMODERATED,\n+      commentID: comment.id,\n+      storyID: comment.storyID,\n     });\n   } else if (moderationQueue.queues.unmoderated === -1) {\n-    publish({\n-      channel: SUBSCRIPTION_CHANNELS.COMMENT_LEFT_MODERATION_QUEUE,\n-      payload: {\n-        queue: GQLMODERATION_QUEUE.UNMODERATED,\n-        commentID: comment.id,\n-        storyID: comment.storyID,\n-      },\n+    await CommentLeftModerationQueueCoralEvent.publish(broker, {\n+      queue: GQLMODERATION_QUEUE.UNMODERATED,\n+      commentID: comment.id,\n+      storyID: comment.storyID,\n     });\n   }\n }"
    },
    {
      "sha": "180706a583386285bb5c534121f60ef937035bdd",
      "filename": "src/core/server/services/fetch/abortAfter.ts",
      "status": "renamed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/fetch/abortAfter.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/fetch/abortAfter.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/fetch/abortAfter.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "previous_filename": "src/core/server/services/stories/scraper/abortAfter.ts"
    },
    {
      "sha": "005839111ec4660e0bdb793e64483e956ab715f0",
      "filename": "src/core/server/services/fetch/fetch.ts",
      "status": "added",
      "additions": 84,
      "deletions": 0,
      "changes": 84,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/fetch/fetch.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/fetch/fetch.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/fetch/fetch.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,84 @@\n+import http from \"http\";\n+import https from \"https\";\n+import { capitalize } from \"lodash\";\n+import fetch, { RequestInit, Response } from \"node-fetch\";\n+import { URL } from \"url\";\n+\n+import { version } from \"coral-common/version\";\n+\n+import abortAfter from \"./abortAfter\";\n+\n+export type Fetch = (url: string, options?: FetchOptions) => Promise<Response>;\n+\n+export interface CreateFetchOptions {\n+  /**\n+   * name is the string that is attached to the `User-Agent` header as:\n+   *\n+   *  `Coral ${name}/${version}`\n+   */\n+  name: string;\n+}\n+\n+export type FetchOptions = RequestInit & {\n+  /**\n+   * timeout is the number of seconds that the request will wait for a response\n+   * before timing out.\n+   */\n+  timeout?: number;\n+};\n+\n+export const createFetch = ({ name }: CreateFetchOptions): Fetch => {\n+  // Create HTTP agents to improve connection performance.\n+  const agents = {\n+    https: new https.Agent({\n+      keepAlive: true,\n+    }),\n+    http: new http.Agent({\n+      keepAlive: true,\n+    }),\n+  };\n+\n+  // agent will select the correct agent to use for reusing the agent.\n+  const agent = (url: URL) =>\n+    url.protocol === \"http:\" ? agents.http : agents.https;\n+\n+  // defaultHeaders are the headers attached to each request (unless they are\n+  // overridden).\n+  const defaultHeaders = {\n+    \"User-Agent\": `Coral ${capitalize(name)}/${version}`,\n+  };\n+\n+  // Return the actual fetcher that just uses fetch under the hood.\n+  return async (\n+    url: string,\n+    {\n+      headers = {},\n+      // Default to 10 seconds for the timeout.\n+      timeout = 10000,\n+      ...options\n+    }: FetchOptions = {}\n+  ) => {\n+    // Abort the scrape request after the timeout is reached.\n+    const abort = abortAfter(timeout);\n+\n+    try {\n+      // Perform the actual fetch operation.\n+      const res = await fetch(url, {\n+        agent,\n+        headers: {\n+          ...defaultHeaders,\n+          ...headers,\n+        },\n+        // Attach the controller signal to abort the request after the timeout\n+        // is reached.\n+        signal: abort.controller.signal,\n+        // Merge in the passed options.\n+        ...options,\n+      });\n+\n+      return res;\n+    } finally {\n+      clearTimeout(abort.timeout);\n+    }\n+  };\n+};"
    },
    {
      "sha": "9898400f4378178338c4ebcfe8c4803db2d0a20f",
      "filename": "src/core/server/services/fetch/index.ts",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/fetch/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/fetch/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/fetch/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1 @@\n+export * from \"./fetch\";"
    },
    {
      "sha": "2308912ced82e1e4ec03a2ff4e08b08a4a033cd9",
      "filename": "src/core/server/services/migrate/migrations/1573073491825_sso_tokens.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/migrate/migrations/1573073491825_sso_tokens.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/migrate/migrations/1573073491825_sso_tokens.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/migrations/1573073491825_sso_tokens.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,7 +1,7 @@\n import { Db } from \"mongodb\";\n \n-import { SSOKey } from \"coral-server/models/settings\";\n-import { generateSSOKey, Tenant } from \"coral-server/models/tenant\";\n+import { Secret } from \"coral-server/models/settings\";\n+import { generateSecret, Tenant } from \"coral-server/models/tenant\";\n import Migration from \"coral-server/services/migrate/migration\";\n import collections from \"coral-server/services/mongodb/collections\";\n \n@@ -48,14 +48,14 @@ export default class extends Migration {\n     }\n \n     // Store the keys in an array.\n-    const keys: SSOKey[] = [];\n+    const keys: Secret[] = [];\n \n     // Check to see if a key is set.\n     const sso = tenant.auth.integrations.sso;\n \n     if (sso.key && sso.keyGeneratedAt) {\n       // Create the new SSOKey based on this data.\n-      const key = generateSSOKey(sso.keyGeneratedAt);\n+      const key = generateSecret(\"ssosec\", sso.keyGeneratedAt);\n \n       // Set the secret of the sso key to the secret of the current set key.\n       key.secret = sso.key;"
    },
    {
      "sha": "a48f438fcba0d6cb4f6fac17ab7fa99023e1998f",
      "filename": "src/core/server/services/migrate/migrations/1573841155297_webhooks.ts",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/migrate/migrations/1573841155297_webhooks.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/migrate/migrations/1573841155297_webhooks.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/migrations/1573841155297_webhooks.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -0,0 +1,49 @@\n+import { Db } from \"mongodb\";\n+\n+import Migration from \"coral-server/services/migrate/migration\";\n+import collections from \"coral-server/services/mongodb/collections\";\n+\n+import { MigrationError } from \"../error\";\n+\n+export default class extends Migration {\n+  public async up(mongo: Db, id: string) {\n+    await collections.tenants(mongo).updateOne(\n+      { id, webhooks: null },\n+      {\n+        $set: {\n+          webhooks: {\n+            endpoints: [],\n+          },\n+        },\n+      }\n+    );\n+  }\n+\n+  public async test(mongo: Db, id: string) {\n+    // Ensure that the tenant has the webhooks set.\n+    const tenant = await collections.tenants(mongo).findOne({ id });\n+    if (!tenant) {\n+      throw new MigrationError(\n+        id,\n+        \"could not find the specified tenant\",\n+        \"tenants\",\n+        [id]\n+      );\n+    }\n+\n+    if (!tenant.webhooks) {\n+      throw new MigrationError(\n+        id,\n+        \"tenant did not have webhooks set\",\n+        \"tenants\",\n+        [id]\n+      );\n+    }\n+  }\n+\n+  public async down(mongo: Db, id: string) {\n+    await collections\n+      .tenants(mongo)\n+      .updateOne({ id }, { $unset: { webhooks: \"\" } });\n+  }\n+}"
    },
    {
      "sha": "344e3685138845501997c7c448772516c88b3e7d",
      "filename": "src/core/server/services/migrate/migrations/1573858750460_sso_token_refactor.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/migrate/migrations/1573858750460_sso_token_refactor.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/migrate/migrations/1573858750460_sso_token_refactor.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/migrations/1573858750460_sso_token_refactor.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,7 +1,7 @@\n import { DateTime } from \"luxon\";\n import { Db } from \"mongodb\";\n \n-import { SSOKey } from \"coral-server/models/settings\";\n+import { Secret } from \"coral-server/models/settings\";\n import Migration from \"coral-server/services/migrate/migration\";\n import collections from \"coral-server/services/mongodb/collections\";\n \n@@ -15,16 +15,16 @@ interface OldSSOKey {\n   deletedAt?: Date;\n }\n \n-function isOldSSOKey(key: SSOKey | OldSSOKey): key is OldSSOKey {\n+function isOldSSOKey(key: Secret | OldSSOKey): key is OldSSOKey {\n   if (!key) {\n     return true;\n   }\n \n-  if ((key as SSOKey).inactiveAt) {\n+  if ((key as Secret).inactiveAt) {\n     return false;\n   }\n \n-  if ((key as SSOKey).rotatedAt) {\n+  if ((key as Secret).rotatedAt) {\n     return false;\n   }\n \n@@ -63,7 +63,7 @@ export default class extends Migration {\n \n     // Transform the keys into the new format.\n     const keys: OldSSOKey[] = tenant.auth.integrations.sso.keys.map(\n-      (key: OldSSOKey | SSOKey): OldSSOKey =>\n+      (key: OldSSOKey | Secret): OldSSOKey =>\n         !isOldSSOKey(key)\n           ? {\n               kid: key.kid,\n@@ -100,8 +100,8 @@ export default class extends Migration {\n     }\n \n     // Transform the keys into the new format.\n-    const keys: SSOKey[] = tenant.auth.integrations.sso.keys.map(\n-      (key): SSOKey => ({\n+    const keys: Secret[] = tenant.auth.integrations.sso.keys.map(\n+      (key): Secret => ({\n         kid: key.kid,\n         secret: key.secret || \"<deleted>\",\n         createdAt: key.createdAt,"
    },
    {
      "sha": "0d7298451291cef7f1703b93acd4f6c10932743c",
      "filename": "src/core/server/services/notifications/categories/categories.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/categories.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/categories.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/notifications/categories/categories.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -8,10 +8,10 @@ import { staffReply } from \"./staffReply\";\n  * categories stores all the notification categories in a flat list.\n  */\n const categories: NotificationCategory[] = [\n-  ...reply,\n-  ...staffReply,\n-  ...featured,\n-  ...moderation,\n+  reply,\n+  staffReply,\n+  moderation,\n+  featured,\n ];\n \n export default categories;"
    },
    {
      "sha": "0b6e23fd03c95eec7cd03be8dd37955d05cf8029",
      "filename": "src/core/server/services/notifications/categories/category.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/category.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/category.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/notifications/categories/category.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,7 +1,4 @@\n-import {\n-  SUBSCRIPTION_CHANNELS,\n-  SUBSCRIPTION_INPUT,\n-} from \"coral-server/graph/resolvers/Subscription/types\";\n+import { CoralEventPayload } from \"coral-server/events/event\";\n \n import NotificationContext from \"../context\";\n import { Notification } from \"../notification\";\n@@ -10,7 +7,7 @@ import { Notification } from \"../notification\";\n  * NotificationCategory define the Category that is used to define a\n  * Notification type.\n  */\n-export interface NotificationCategory {\n+export interface NotificationCategory<T extends CoralEventPayload = any> {\n   /**\n    * name is the actual name of the notification that can be used to define the\n    * other category names that are superseded by this one.\n@@ -23,14 +20,14 @@ export interface NotificationCategory {\n    */\n   process: (\n     ctx: NotificationContext,\n-    input: SUBSCRIPTION_INPUT[\"payload\"]\n+    payload: T\n   ) => Promise<Notification | null>;\n \n   /**\n-   * event is the subscription event that when fired, will trigger this\n+   * events is the subscription event that when fired, will trigger this\n    * notification processor to be called.\n    */\n-  event: SUBSCRIPTION_CHANNELS;\n+  events: T[\"type\"][];\n \n   /**\n    * digestOrder, when provided, allows the custom ordering of notifications in"
    },
    {
      "sha": "dd59d66bffd8dbacf40b493774533814495205ac",
      "filename": "src/core/server/services/notifications/categories/featured.ts",
      "status": "modified",
      "additions": 51,
      "deletions": 56,
      "changes": 107,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/featured.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/featured.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/notifications/categories/featured.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,63 +1,58 @@\n-import { CommentFeaturedInput } from \"coral-server/graph/resolvers/Subscription/commentFeatured\";\n-import { SUBSCRIPTION_CHANNELS } from \"coral-server/graph/resolvers/Subscription/types\";\n+import {\n+  CommentFeaturedCoralEventPayload,\n+  CoralEventType,\n+} from \"coral-server/events\";\n import { hasPublishedStatus } from \"coral-server/models/comment\";\n \n import { getStoryTitle, getURLWithCommentID } from \"coral-server/models/story\";\n-import NotificationContext from \"../context\";\n-import { Notification } from \"../notification\";\n import { NotificationCategory } from \"./category\";\n \n-async function processor(\n-  ctx: NotificationContext,\n-  input: CommentFeaturedInput\n-): Promise<Notification | null> {\n-  // Get the comment that was featured.\n-  const comment = await ctx.comments.load(input.commentID);\n-  if (!comment || (!hasPublishedStatus(comment) || !comment.authorID)) {\n-    return null;\n-  }\n-\n-  // Get the comment's author.\n-  const author = await ctx.users.load(comment.authorID);\n-  if (!author) {\n-    return null;\n-  }\n-\n-  // Check to see if the user has this notification type enabled.\n-  if (!author.notifications.onFeatured) {\n-    return null;\n-  }\n-\n-  // Get the story that this was written on.\n-  const story = await ctx.stories.load(comment.storyID);\n-  if (!story) {\n-    return null;\n-  }\n-\n-  // Generate the unsubscribe URL.\n-  const unsubscribeURL = await ctx.generateUnsubscribeURL(author);\n-\n-  return {\n-    userID: author.id,\n-    template: {\n-      name: \"notification/on-featured\",\n-      context: {\n-        commentPermalink: getURLWithCommentID(story.url, comment.id),\n-        storyTitle: getStoryTitle(story),\n-        storyURL: story.url,\n-        organizationName: ctx.tenant.organization.name,\n-        organizationURL: ctx.tenant.organization.url,\n-        unsubscribeURL,\n+export const featured: NotificationCategory<\n+  CommentFeaturedCoralEventPayload\n+> = {\n+  name: \"featured\",\n+  process: async (ctx, input) => {\n+    // Get the comment that was featured.\n+    const comment = await ctx.comments.load(input.data.commentID);\n+    if (!comment || !hasPublishedStatus(comment) || !comment.authorID) {\n+      return null;\n+    }\n+\n+    // Get the comment's author.\n+    const author = await ctx.users.load(comment.authorID);\n+    if (!author) {\n+      return null;\n+    }\n+\n+    // Check to see if the user has this notification type enabled.\n+    if (!author.notifications.onFeatured) {\n+      return null;\n+    }\n+\n+    // Get the story that this was written on.\n+    const story = await ctx.stories.load(comment.storyID);\n+    if (!story) {\n+      return null;\n+    }\n+\n+    // Generate the unsubscribe URL.\n+    const unsubscribeURL = await ctx.generateUnsubscribeURL(author);\n+\n+    return {\n+      userID: author.id,\n+      template: {\n+        name: \"notification/on-featured\",\n+        context: {\n+          commentPermalink: getURLWithCommentID(story.url, comment.id),\n+          storyTitle: getStoryTitle(story),\n+          storyURL: story.url,\n+          organizationName: ctx.tenant.organization.name,\n+          organizationURL: ctx.tenant.organization.url,\n+          unsubscribeURL,\n+        },\n       },\n-    },\n-  };\n-}\n-\n-export const featured: NotificationCategory[] = [\n-  {\n-    name: \"featured\",\n-    process: processor,\n-    event: SUBSCRIPTION_CHANNELS.COMMENT_FEATURED,\n-    digestOrder: 30,\n+    };\n   },\n-];\n+  events: [CoralEventType.COMMENT_FEATURED],\n+  digestOrder: 30,\n+};"
    },
    {
      "sha": "e5a0c6ec12a912c33a7dddf6fd36c7d2d448be7f",
      "filename": "src/core/server/services/notifications/categories/moderation.ts",
      "status": "modified",
      "additions": 65,
      "deletions": 69,
      "changes": 134,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/moderation.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/moderation.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/notifications/categories/moderation.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,84 +1,80 @@\n-import { CommentStatusUpdatedInput } from \"coral-server/graph/resolvers/Subscription/commentStatusUpdated\";\n-import { SUBSCRIPTION_CHANNELS } from \"coral-server/graph/resolvers/Subscription/types\";\n+import {\n+  CommentStatusUpdatedCoralEventPayload,\n+  CoralEventType,\n+} from \"coral-server/events\";\n import { hasModeratorStatus } from \"coral-server/models/comment\";\n-\n-import { GQLCOMMENT_STATUS } from \"coral-server/graph/schema/__generated__/types\";\n import { getURLWithCommentID } from \"coral-server/models/story\";\n-import NotificationContext from \"../context\";\n-import { Notification } from \"../notification\";\n-import { NotificationCategory } from \"./category\";\n \n-async function processor(\n-  ctx: NotificationContext,\n-  input: CommentStatusUpdatedInput\n-): Promise<Notification | null> {\n-  // Check to see if this comment was previously in a moderation status.\n-  if (!hasModeratorStatus({ status: input.oldStatus })) {\n-    return null;\n-  }\n+import { GQLCOMMENT_STATUS } from \"coral-server/graph/schema/__generated__/types\";\n \n-  // Load the comment in question.\n-  const comment = await ctx.comments.load(input.commentID);\n-  if (!comment || !comment.authorID) {\n-    return null;\n-  }\n+import { NotificationCategory } from \"./category\";\n \n-  // Get the comment author.\n-  const author = await ctx.users.load(comment.authorID);\n-  if (!author) {\n-    return null;\n-  }\n+export const moderation: NotificationCategory<\n+  CommentStatusUpdatedCoralEventPayload\n+> = {\n+  name: \"moderation\",\n+  process: async (ctx, input) => {\n+    // Check to see if this comment was previously in a moderation status.\n+    if (!hasModeratorStatus({ status: input.data.oldStatus })) {\n+      return null;\n+    }\n \n-  // Check to see if this user has notifications enabled.\n-  if (!author.notifications.onModeration) {\n-    return null;\n-  }\n+    // Load the comment in question.\n+    const comment = await ctx.comments.load(input.data.commentID);\n+    if (!comment || !comment.authorID) {\n+      return null;\n+    }\n \n-  // Generate the unsubscribe URL.\n-  const unsubscribeURL = await ctx.generateUnsubscribeURL(author);\n+    // Get the comment author.\n+    const author = await ctx.users.load(comment.authorID);\n+    if (!author) {\n+      return null;\n+    }\n \n-  // Check to see which template we should use.\n-  if (comment.status === GQLCOMMENT_STATUS.APPROVED) {\n-    // Get the story that this was written on.\n-    const story = await ctx.stories.load(comment.storyID);\n-    if (!story) {\n+    // Check to see if this user has notifications enabled.\n+    if (!author.notifications.onModeration) {\n       return null;\n     }\n \n-    return {\n-      userID: author.id,\n-      template: {\n-        name: \"notification/on-comment-approved\",\n-        context: {\n-          commentPermalink: getURLWithCommentID(story.url, comment.id),\n-          organizationName: ctx.tenant.organization.name,\n-          organizationURL: ctx.tenant.organization.url,\n-          unsubscribeURL,\n+    // Generate the unsubscribe URL.\n+    const unsubscribeURL = await ctx.generateUnsubscribeURL(author);\n+\n+    // Check to see which template we should use.\n+    if (comment.status === GQLCOMMENT_STATUS.APPROVED) {\n+      // Get the story that this was written on.\n+      const story = await ctx.stories.load(comment.storyID);\n+      if (!story) {\n+        return null;\n+      }\n+\n+      return {\n+        userID: author.id,\n+        template: {\n+          name: \"notification/on-comment-approved\",\n+          context: {\n+            commentPermalink: getURLWithCommentID(story.url, comment.id),\n+            organizationName: ctx.tenant.organization.name,\n+            organizationURL: ctx.tenant.organization.url,\n+            unsubscribeURL,\n+          },\n         },\n-      },\n-    };\n-  } else if (comment.status === GQLCOMMENT_STATUS.REJECTED) {\n-    return {\n-      userID: author.id,\n-      template: {\n-        name: \"notification/on-comment-rejected\",\n-        context: {\n-          organizationName: ctx.tenant.organization.name,\n-          organizationURL: ctx.tenant.organization.url,\n-          unsubscribeURL,\n+      };\n+    } else if (comment.status === GQLCOMMENT_STATUS.REJECTED) {\n+      return {\n+        userID: author.id,\n+        template: {\n+          name: \"notification/on-comment-rejected\",\n+          context: {\n+            organizationName: ctx.tenant.organization.name,\n+            organizationURL: ctx.tenant.organization.url,\n+            unsubscribeURL,\n+          },\n         },\n-      },\n-    };\n-  }\n-\n-  return null;\n-}\n+      };\n+    }\n \n-export const moderation: NotificationCategory[] = [\n-  {\n-    name: \"moderation\",\n-    process: processor,\n-    event: SUBSCRIPTION_CHANNELS.COMMENT_STATUS_UPDATED,\n-    digestOrder: 30,\n+    return null;\n   },\n-];\n+  events: [CoralEventType.COMMENT_STATUS_UPDATED],\n+  digestOrder: 30,\n+};"
    },
    {
      "sha": "e6c5955252afadfd5fa1602245c575251e63db75",
      "filename": "src/core/server/services/notifications/categories/reply.ts",
      "status": "modified",
      "additions": 78,
      "deletions": 95,
      "changes": 173,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/reply.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/reply.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/notifications/categories/reply.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,112 +1,95 @@\n-import { CommentReplyCreatedInput } from \"coral-server/graph/resolvers/Subscription/commentReplyCreated\";\n-import { CommentStatusUpdatedInput } from \"coral-server/graph/resolvers/Subscription/commentStatusUpdated\";\n-import { SUBSCRIPTION_CHANNELS } from \"coral-server/graph/resolvers/Subscription/types\";\n+import {\n+  CommentReplyCreatedCoralEventPayload,\n+  CommentStatusUpdatedCoralEventPayload,\n+  CoralEventType,\n+} from \"coral-server/events\";\n import { hasPublishedStatus } from \"coral-server/models/comment\";\n import { getStoryTitle, getURLWithCommentID } from \"coral-server/models/story\";\n \n-import NotificationContext from \"../context\";\n-import { Notification } from \"../notification\";\n import { NotificationCategory } from \"./category\";\n \n-async function processor(\n-  ctx: NotificationContext,\n-  input: CommentReplyCreatedInput\n-): Promise<Notification | null> {\n-  const comment = await ctx.comments.load(input.commentID);\n-  if (!comment || !hasPublishedStatus(comment) || !comment.authorID) {\n-    return null;\n-  }\n+type Payloads =\n+  | CommentReplyCreatedCoralEventPayload\n+  | CommentStatusUpdatedCoralEventPayload;\n \n-  // Check to see if this is a reply to an existing comment.\n-  if (!comment.parentID) {\n-    return null;\n-  }\n+export const reply: NotificationCategory<Payloads> = {\n+  name: \"reply\",\n+  process: async (ctx, input) => {\n+    const comment = await ctx.comments.load(input.data.commentID);\n+    if (!comment || !hasPublishedStatus(comment)) {\n+      return null;\n+    }\n \n-  // Get the parent comment.\n-  const parent = await ctx.comments.load(comment.parentID);\n-  if (!parent || !hasPublishedStatus(parent) || !parent.authorID) {\n-    return null;\n-  }\n+    // TODO: evaluate storing a history of comment statuses so we can ensure we don't double send.\n \n-  // Get the parent comment's author.\n-  const [author, parentAuthor] = await ctx.users.loadMany([\n-    comment.authorID,\n-    parent.authorID,\n-  ]);\n-  if (!author || !parentAuthor) {\n-    return null;\n-  }\n+    // Check to see if this is a reply to an existing comment.\n+    if (!comment.parentID || !comment.authorID) {\n+      return null;\n+    }\n \n-  // Check to see if the target user has notifications enabled for this type.\n-  if (!parentAuthor.notifications.onReply) {\n-    return null;\n-  }\n+    // Get the parent comment.\n+    const parent = await ctx.comments.load(comment.parentID);\n+    if (!parent || !hasPublishedStatus(parent) || !parent.authorID) {\n+      return null;\n+    }\n \n-  // Check to see if this is yourself replying to yourself, if that's the case\n-  // don't send a notification.\n-  if (parentAuthor.id === author.id) {\n-    return null;\n-  }\n+    // Get the parent comment's author.\n+    const [author, parentAuthor] = await ctx.users.loadMany([\n+      comment.authorID,\n+      parent.authorID,\n+    ]);\n+    if (!author || !parentAuthor) {\n+      return null;\n+    }\n \n-  // Check to see if this user is ignoring the user who replied to their\n-  // comment.\n-  if (parentAuthor.ignoredUsers.some(user => user.id === author.id)) {\n-    return null;\n-  }\n+    // Check to see if the target user has notifications enabled for this type.\n+    if (!parentAuthor.notifications.onReply) {\n+      return null;\n+    }\n \n-  // Get the story that this was written on.\n-  const story = await ctx.stories.load(comment.storyID);\n-  if (!story) {\n-    return null;\n-  }\n+    // Check to see if this is yourself replying to yourself, if that's the case\n+    // don't send a notification.\n+    if (parentAuthor.id === author.id) {\n+      return null;\n+    }\n \n-  // Generate the unsubscribe URL.\n-  const unsubscribeURL = await ctx.generateUnsubscribeURL(parentAuthor);\n+    // Check to see if this user is ignoring the user who replied to their\n+    // comment.\n+    if (parentAuthor.ignoredUsers.some(user => user.id === author.id)) {\n+      return null;\n+    }\n \n-  // The user does have notifications for replied comments enabled, queue the\n-  // notification to be sent.\n-  return {\n-    userID: parentAuthor.id,\n-    template: {\n-      name: \"notification/on-reply\",\n-      context: {\n-        // We know that the user had a username because they wrote a comment!\n-        authorUsername: author.username!,\n-        commentPermalink: getURLWithCommentID(story.url, comment.id),\n-        storyTitle: getStoryTitle(story),\n-        storyURL: story.url,\n-        organizationName: ctx.tenant.organization.name,\n-        organizationURL: ctx.tenant.organization.url,\n-        unsubscribeURL,\n-      },\n-    },\n-  };\n-}\n-\n-export const reply: NotificationCategory[] = [\n-  {\n-    name: \"reply\",\n-    process: processor,\n-    event: SUBSCRIPTION_CHANNELS.COMMENT_REPLY_CREATED,\n-    digestOrder: 30,\n-  },\n-  {\n-    name: \"reply\",\n-    process: async (ctx, input: CommentStatusUpdatedInput) => {\n-      const comment = await ctx.comments.load(input.commentID);\n-      if (!comment || !hasPublishedStatus(comment)) {\n-        return null;\n-      }\n+    // Get the story that this was written on.\n+    const story = await ctx.stories.load(comment.storyID);\n+    if (!story) {\n+      return null;\n+    }\n \n-      // TODO: evaluate storing a history of comment statuses so we can ensure we don't double send.\n+    // Generate the unsubscribe URL.\n+    const unsubscribeURL = await ctx.generateUnsubscribeURL(parentAuthor);\n \n-      // We've checked the status, let the processing continue!\n-      return processor(ctx, {\n-        commentID: comment.id,\n-        ancestorIDs: comment.ancestorIDs,\n-      });\n-    },\n-    event: SUBSCRIPTION_CHANNELS.COMMENT_STATUS_UPDATED,\n-    digestOrder: 30,\n+    // The user does have notifications for replied comments enabled, queue the\n+    // notification to be sent.\n+    return {\n+      userID: parentAuthor.id,\n+      template: {\n+        name: \"notification/on-reply\",\n+        context: {\n+          // We know that the user had a username because they wrote a comment!\n+          authorUsername: author.username!,\n+          commentPermalink: getURLWithCommentID(story.url, comment.id),\n+          storyTitle: getStoryTitle(story),\n+          storyURL: story.url,\n+          organizationName: ctx.tenant.organization.name,\n+          organizationURL: ctx.tenant.organization.url,\n+          unsubscribeURL,\n+        },\n+      },\n+    };\n   },\n-];\n+  events: [\n+    CoralEventType.COMMENT_STATUS_UPDATED,\n+    CoralEventType.COMMENT_REPLY_CREATED,\n+  ],\n+  digestOrder: 30,\n+};"
    },
    {
      "sha": "465450dbdb18f4f46062905f38106d3014907b9a",
      "filename": "src/core/server/services/notifications/categories/staffReply.ts",
      "status": "modified",
      "additions": 84,
      "deletions": 96,
      "changes": 180,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/staffReply.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/notifications/categories/staffReply.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/notifications/categories/staffReply.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,114 +1,102 @@\n-import { CommentReplyCreatedInput } from \"coral-server/graph/resolvers/Subscription/commentReplyCreated\";\n-import { CommentStatusUpdatedInput } from \"coral-server/graph/resolvers/Subscription/commentStatusUpdated\";\n-import { SUBSCRIPTION_CHANNELS } from \"coral-server/graph/resolvers/Subscription/types\";\n+import {\n+  CommentReplyCreatedCoralEventPayload,\n+  CommentStatusUpdatedCoralEventPayload,\n+  CoralEventType,\n+} from \"coral-server/events\";\n import { hasPublishedStatus } from \"coral-server/models/comment\";\n import { getStoryTitle, getURLWithCommentID } from \"coral-server/models/story\";\n import { hasStaffRole } from \"coral-server/models/user/helpers\";\n \n-import NotificationContext from \"../context\";\n-import { Notification } from \"../notification\";\n import { NotificationCategory } from \"./category\";\n \n-async function processor(\n-  ctx: NotificationContext,\n-  input: CommentReplyCreatedInput\n-): Promise<Notification | null> {\n-  const comment = await ctx.comments.load(input.commentID);\n-  if (!comment || !hasPublishedStatus(comment) || !comment.authorID) {\n-    return null;\n-  }\n+type Payloads =\n+  | CommentStatusUpdatedCoralEventPayload\n+  | CommentReplyCreatedCoralEventPayload;\n \n-  // Check to see if this is a reply to an existing comment.\n-  if (!comment.parentID) {\n-    return null;\n-  }\n+export const staffReply: NotificationCategory<Payloads> = {\n+  name: \"staffReply\",\n+  process: async (ctx, input) => {\n+    const comment = await ctx.comments.load(input.data.commentID);\n+    if (!comment || !hasPublishedStatus(comment)) {\n+      return null;\n+    }\n \n-  // Get the parent comment.\n-  const parent = await ctx.comments.load(comment.parentID);\n-  if (!parent || !hasPublishedStatus(parent) || !parent.authorID) {\n-    return null;\n-  }\n+    // TODO: evaluate storing a history of comment statuses so we can ensure we don't double send.\n \n-  // Get the parent comment's author.\n-  const [author, parentAuthor] = await ctx.users.loadMany([\n-    comment.authorID,\n-    parent.authorID,\n-  ]);\n-  if (!author || !parentAuthor) {\n-    return null;\n-  }\n+    // Check to see if this is a reply to an existing comment.\n+    if (!comment.parentID) {\n+      return null;\n+    }\n \n-  // Check to see if the author was a staff member.\n-  if (!hasStaffRole(author)) {\n-    return null;\n-  }\n+    // Get the parent comment.\n+    const parent = await ctx.comments.load(comment.parentID);\n+    if (\n+      !parent ||\n+      !hasPublishedStatus(parent) ||\n+      !parent.authorID ||\n+      !comment.authorID\n+    ) {\n+      return null;\n+    }\n \n-  // Check to see if the target user has notifications enabled for this type.\n-  if (!parentAuthor.notifications.onStaffReplies) {\n-    return null;\n-  }\n+    // Get the parent comment's author.\n+    const [author, parentAuthor] = await ctx.users.loadMany([\n+      comment.authorID,\n+      parent.authorID,\n+    ]);\n+    if (!author || !parentAuthor) {\n+      return null;\n+    }\n \n-  // Check to see if this is yourself replying to yourself, if that's the case\n-  // don't send a notification.\n-  if (parentAuthor.id === author.id) {\n-    return null;\n-  }\n+    // Check to see if the author was a staff member.\n+    if (!hasStaffRole(author)) {\n+      // This is a handler for staff replies only.\n+      return null;\n+    }\n \n-  // Get the story that this was written on.\n-  const story = await ctx.stories.load(comment.storyID);\n-  if (!story) {\n-    return null;\n-  }\n+    // Check to see if the target user has notifications enabled for this type.\n+    if (!parentAuthor.notifications.onStaffReplies) {\n+      return null;\n+    }\n \n-  // Generate the unsubscribe URL.\n-  const unsubscribeURL = await ctx.generateUnsubscribeURL(parentAuthor);\n+    // Check to see if this is yourself replying to yourself, if that's the case\n+    // don't send a notification.\n+    if (parentAuthor.id === author.id) {\n+      return null;\n+    }\n \n-  // The user does have notifications for replied comments enabled, queue the\n-  // notification to be sent.\n-  return {\n-    userID: parentAuthor.id,\n-    template: {\n-      name: \"notification/on-staff-reply\",\n-      context: {\n-        // We know that the user had a username because they wrote a comment!\n-        authorUsername: author.username!,\n-        commentPermalink: getURLWithCommentID(story.url, comment.id),\n-        storyTitle: getStoryTitle(story),\n-        storyURL: story.url,\n-        organizationName: ctx.tenant.organization.name,\n-        organizationURL: ctx.tenant.organization.url,\n-        unsubscribeURL,\n-      },\n-    },\n-  };\n-}\n-\n-export const staffReply: NotificationCategory[] = [\n-  {\n-    name: \"staffReply\",\n-    process: processor,\n-    event: SUBSCRIPTION_CHANNELS.COMMENT_REPLY_CREATED,\n-    digestOrder: 30,\n-    supersedesCategories: [\"reply\"],\n-  },\n-  {\n-    name: \"staffReply\",\n-    process: async (ctx, input: CommentStatusUpdatedInput) => {\n-      const comment = await ctx.comments.load(input.commentID);\n-      if (!comment || !hasPublishedStatus(comment)) {\n-        return null;\n-      }\n+    // Get the story that this was written on.\n+    const story = await ctx.stories.load(comment.storyID);\n+    if (!story) {\n+      return null;\n+    }\n \n-      // TODO: evaluate storing a history of comment statuses so we can ensure we don't double send.\n+    // Generate the unsubscribe URL.\n+    const unsubscribeURL = await ctx.generateUnsubscribeURL(parentAuthor);\n \n-      // We've checked the status, let the processing continue!\n-      return processor(ctx, {\n-        commentID: comment.id,\n-        ancestorIDs: comment.ancestorIDs,\n-      });\n-    },\n-    event: SUBSCRIPTION_CHANNELS.COMMENT_STATUS_UPDATED,\n-    digestOrder: 30,\n-    supersedesCategories: [\"reply\"],\n+    // The user does have notifications for replied comments enabled, queue the\n+    // notification to be sent.\n+    return {\n+      userID: parentAuthor.id,\n+      template: {\n+        name: \"notification/on-staff-reply\",\n+        context: {\n+          // We know that the user had a username because they wrote a comment!\n+          authorUsername: author.username!,\n+          commentPermalink: getURLWithCommentID(story.url, comment.id),\n+          storyTitle: getStoryTitle(story),\n+          storyURL: story.url,\n+          organizationName: ctx.tenant.organization.name,\n+          organizationURL: ctx.tenant.organization.url,\n+          unsubscribeURL,\n+        },\n+      },\n+    };\n   },\n-];\n+  events: [\n+    CoralEventType.COMMENT_STATUS_UPDATED,\n+    CoralEventType.COMMENT_REPLY_CREATED,\n+  ],\n+  digestOrder: 30,\n+  supersedesCategories: [\"reply\"],\n+};"
    },
    {
      "sha": "6122b0d99b35861994c4f88f09cf20fbd7808512",
      "filename": "src/core/server/services/slack/context.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 55,
      "changes": 55,
      "blob_url": "https://github.com/coralproject/talk/blob/34ba2da88df86f8634a2bbb630a99b92dfe4d41c/src/core/server/services/slack/context.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/34ba2da88df86f8634a2bbb630a99b92dfe4d41c/src/core/server/services/slack/context.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/slack/context.ts?ref=34ba2da88df86f8634a2bbb630a99b92dfe4d41c",
      "patch": "@@ -1,55 +0,0 @@\n-import Logger from \"bunyan\";\n-import DataLoader from \"dataloader\";\n-import { Db } from \"mongodb\";\n-\n-import { Config } from \"coral-server/config\";\n-import { Comment, retrieveManyComments } from \"coral-server/models/comment\";\n-import { retrieveManyStories, Story } from \"coral-server/models/story\";\n-import { Tenant } from \"coral-server/models/tenant\";\n-import { retrieveManyUsers, User } from \"coral-server/models/user\";\n-import { Request } from \"coral-server/types/express\";\n-\n-interface Options {\n-  mongo: Db;\n-  tenant: Pick<Tenant, \"id\" | \"domain\">;\n-  config: Config;\n-  req?: Request;\n-}\n-\n-class SlackContext {\n-  public readonly mongo: Db;\n-  public readonly tenant: Pick<Tenant, \"id\" | \"domain\">;\n-  public readonly logger: Logger;\n-  public readonly config: Config;\n-  public readonly req?: Request;\n-\n-  public readonly comments: DataLoader<\n-    string,\n-    Readonly<Comment> | null\n-  > = new DataLoader(commentIDs =>\n-    retrieveManyComments(this.mongo, this.tenant.id, commentIDs)\n-  );\n-\n-  public readonly stories: DataLoader<\n-    string,\n-    Readonly<Story> | null\n-  > = new DataLoader(storyIDs =>\n-    retrieveManyStories(this.mongo, this.tenant.id, storyIDs)\n-  );\n-\n-  public readonly users: DataLoader<\n-    string,\n-    Readonly<User> | null\n-  > = new DataLoader(userIDs =>\n-    retrieveManyUsers(this.mongo, this.tenant.id, userIDs)\n-  );\n-\n-  constructor({ mongo, tenant, config, req }: Options) {\n-    this.mongo = mongo;\n-    this.tenant = tenant;\n-    this.config = config;\n-    this.req = req;\n-  }\n-}\n-\n-export default SlackContext;"
    },
    {
      "sha": "b26ba5afcdba70929ac4ce5729c71990c209ead4",
      "filename": "src/core/server/services/slack/index.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/coralproject/talk/blob/34ba2da88df86f8634a2bbb630a99b92dfe4d41c/src/core/server/services/slack/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/34ba2da88df86f8634a2bbb630a99b92dfe4d41c/src/core/server/services/slack/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/slack/index.ts?ref=34ba2da88df86f8634a2bbb630a99b92dfe4d41c",
      "patch": "@@ -1,3 +0,0 @@\n-export { default as slackPublisher } from \"./publisher\";\n-export * from \"./publisher\";\n-export * from \"./context\";"
    },
    {
      "sha": "59fd6a724dcf19c66482af79133a2c5c5a9c6625",
      "filename": "src/core/server/services/slack/publisher.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 207,
      "changes": 207,
      "blob_url": "https://github.com/coralproject/talk/blob/34ba2da88df86f8634a2bbb630a99b92dfe4d41c/src/core/server/services/slack/publisher.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/34ba2da88df86f8634a2bbb630a99b92dfe4d41c/src/core/server/services/slack/publisher.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/slack/publisher.ts?ref=34ba2da88df86f8634a2bbb630a99b92dfe4d41c",
      "patch": "@@ -1,207 +0,0 @@\n-import { Db } from \"mongodb\";\n-\n-import { reconstructTenantURL } from \"coral-server/app/url\";\n-import { Config } from \"coral-server/config\";\n-import { CommentCreatedInput } from \"coral-server/graph/resolvers/Subscription/commentCreated\";\n-import { CommentEnteredModerationQueueInput } from \"coral-server/graph/resolvers/Subscription/commentEnteredModerationQueue\";\n-import { CommentFeaturedInput } from \"coral-server/graph/resolvers/Subscription/commentFeatured\";\n-import { CommentLeftModerationQueueInput } from \"coral-server/graph/resolvers/Subscription/commentLeftModerationQueue\";\n-import { CommentReleasedInput } from \"coral-server/graph/resolvers/Subscription/commentReleased\";\n-import { CommentReplyCreatedInput } from \"coral-server/graph/resolvers/Subscription/commentReplyCreated\";\n-import { CommentStatusUpdatedInput } from \"coral-server/graph/resolvers/Subscription/commentStatusUpdated\";\n-import { SUBSCRIPTION_CHANNELS } from \"coral-server/graph/resolvers/Subscription/types\";\n-import logger from \"coral-server/logger\";\n-import { getLatestRevision } from \"coral-server/models/comment/helpers\";\n-import {\n-  getStoryTitle,\n-  getURLWithCommentID,\n-} from \"coral-server/models/story/helpers\";\n-import { Tenant } from \"coral-server/models/tenant\";\n-\n-import { GQLMODERATION_QUEUE } from \"coral-server/graph/schema/__generated__/types\";\n-\n-import SlackContext from \"./context\";\n-\n-type Payload =\n-  | CommentEnteredModerationQueueInput\n-  | CommentLeftModerationQueueInput\n-  | CommentStatusUpdatedInput\n-  | CommentReplyCreatedInput\n-  | CommentCreatedInput\n-  | CommentFeaturedInput\n-  | CommentReleasedInput;\n-\n-function isFeatured(channel: SUBSCRIPTION_CHANNELS) {\n-  return channel === SUBSCRIPTION_CHANNELS.COMMENT_FEATURED;\n-}\n-\n-function isReported(channel: SUBSCRIPTION_CHANNELS, payload: Payload) {\n-  return (\n-    channel === SUBSCRIPTION_CHANNELS.COMMENT_ENTERED_MODERATION_QUEUE &&\n-    (payload as CommentEnteredModerationQueueInput).queue ===\n-      GQLMODERATION_QUEUE.REPORTED\n-  );\n-}\n-\n-function isPending(channel: SUBSCRIPTION_CHANNELS, payload: Payload) {\n-  return (\n-    channel === SUBSCRIPTION_CHANNELS.COMMENT_ENTERED_MODERATION_QUEUE &&\n-    (payload as CommentEnteredModerationQueueInput).queue ===\n-      GQLMODERATION_QUEUE.PENDING\n-  );\n-}\n-\n-function createModerationLink(ctx: SlackContext, commentID: string) {\n-  return reconstructTenantURL(\n-    ctx.config,\n-    ctx.tenant,\n-    ctx.req,\n-    `/admin/moderate/comment/${commentID}`\n-  );\n-}\n-\n-async function postCommentToSlack(\n-  ctx: SlackContext,\n-  message: string,\n-  commentID: string,\n-  hookURL: string\n-) {\n-  const comment = await ctx.comments.load(commentID);\n-  if (comment === null || !comment.authorID) {\n-    return;\n-  }\n-  const author = await ctx.users.load(comment.authorID);\n-  if (author === null) {\n-    return;\n-  }\n-  const story = await ctx.stories.load(comment.storyID);\n-  if (story === null) {\n-    return;\n-  }\n-\n-  // Get some properties about the event.\n-  const storyTitle = getStoryTitle(story);\n-  const commentBody = getLatestRevision(comment).body;\n-  const moderateLink = createModerationLink(ctx, commentID);\n-  const commentLink = getURLWithCommentID(story.url, comment.id);\n-\n-  // Replace HTML link breaks with newlines.\n-  const body = commentBody.replace(/<br\\/?>/g, \"\\n\");\n-\n-  const data = {\n-    text: `${message} on *<${story.url}|${storyTitle}>*`,\n-    attachments: [\n-      {\n-        text: body,\n-        footer: `Authored by *${author.username}* | <${moderateLink}|Go to Moderation> | <${commentLink}|See Comment>`,\n-      },\n-    ],\n-  };\n-\n-  try {\n-    // Send the post to the Slack URL.\n-    const res = await fetch(hookURL, {\n-      method: \"POST\",\n-      headers: {\n-        \"Content-Type\": \"application/json\",\n-      },\n-      body: JSON.stringify(data),\n-    });\n-\n-    if (!res.ok) {\n-      logger.error({ res }, \"error sending Slack comment\");\n-    }\n-  } catch (err) {\n-    logger.error({ err }, \"error sending Slack comment\");\n-  }\n-}\n-\n-export type SlackPublisher = (\n-  channel: SUBSCRIPTION_CHANNELS,\n-  payload: Payload\n-) => Promise<void>;\n-\n-function createSlackPublisher(\n-  mongo: Db,\n-  config: Config,\n-  tenant: Tenant\n-): SlackPublisher {\n-  if (\n-    !tenant.slack ||\n-    !tenant.slack.channels ||\n-    tenant.slack.channels.length === 0\n-  ) {\n-    return async () => {\n-      // noop\n-    };\n-  }\n-\n-  const { channels } = tenant.slack;\n-\n-  return async (channel: SUBSCRIPTION_CHANNELS, payload: Payload) => {\n-    const ctx = new SlackContext({ mongo, config, tenant });\n-\n-    try {\n-      const reported = isReported(channel, payload);\n-      const pending = isPending(channel, payload);\n-      const featured = isFeatured(channel);\n-\n-      // If the comment doesn't match any filter, then we don't need to send\n-      // anything.\n-      if (!reported && !pending && !featured) {\n-        return;\n-      }\n-\n-      const { commentID } = payload;\n-\n-      for (const ch of channels) {\n-        if (!ch) {\n-          return;\n-        }\n-        if (!ch.enabled) {\n-          return;\n-        }\n-        const { hookURL } = ch;\n-        if (!hookURL) {\n-          return;\n-        }\n-        const { triggers } = ch;\n-        if (!triggers) {\n-          return;\n-        }\n-\n-        // Add ticket to add back all comments option (including approved)\n-\n-        if (triggers.reportedComments && reported) {\n-          await postCommentToSlack(\n-            ctx,\n-            \"This comment has been reported\",\n-            commentID,\n-            hookURL\n-          );\n-        } else if (triggers.pendingComments && pending) {\n-          await postCommentToSlack(\n-            ctx,\n-            \"This comment is pending\",\n-            commentID,\n-            hookURL\n-          );\n-        } else if (triggers.featuredComments && featured) {\n-          await postCommentToSlack(\n-            ctx,\n-            \"This comment has been featured\",\n-            commentID,\n-            hookURL\n-          );\n-        }\n-      }\n-    } catch (err) {\n-      logger.error(\n-        { err, tenantID: tenant.id, channel, payload },\n-        \"could not handle comment in Slack publisher\"\n-      );\n-    }\n-  };\n-}\n-\n-export default createSlackPublisher;"
    },
    {
      "sha": "58a9904878f05af74d1ea967394b32f7da8b2ff6",
      "filename": "src/core/server/services/stories/index.ts",
      "status": "modified",
      "additions": 26,
      "deletions": 4,
      "changes": 30,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/stories/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/stories/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/stories/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -4,6 +4,8 @@ import { Db } from \"mongodb\";\n import isNonNullArray from \"coral-common/helpers/isNonNullArray\";\n import { Config } from \"coral-server/config\";\n import { StoryURLInvalidError } from \"coral-server/errors\";\n+import { StoryCreatedCoralEvent } from \"coral-server/events\";\n+import { CoralEventPublisherBroker } from \"coral-server/events/publisher\";\n import logger from \"coral-server/logger\";\n import {\n   mergeCommentActionCounts,\n@@ -53,6 +55,7 @@ export type FindOrCreateStory = FindOrCreateStoryInput;\n export async function findOrCreate(\n   mongo: Db,\n   tenant: Tenant,\n+  broker: CoralEventPublisherBroker,\n   input: FindOrCreateStory,\n   scraper: ScraperQueue,\n   now = new Date()\n@@ -70,11 +73,24 @@ export async function findOrCreate(\n     siteID = site.id;\n   }\n \n-  const story = await findOrCreateStory(mongo, tenant.id, input, siteID, now);\n+  const { story, wasUpserted } = await findOrCreateStory(\n+    mongo,\n+    tenant.id,\n+    input,\n+    siteID,\n+    now\n+  );\n   if (!story) {\n     return null;\n   }\n \n+  if (wasUpserted) {\n+    StoryCreatedCoralEvent.publish(broker, {\n+      storyID: story.id,\n+      storyURL: story.url,\n+    });\n+  }\n+\n   if (tenant.stories.scraping.enabled && !story.metadata && !story.scrapedAt) {\n     // If the scraper has not scraped this story, and we have no metadata, we\n     // need to scrape it now!\n@@ -160,6 +176,7 @@ export type CreateStory = Partial<\n export async function create(\n   mongo: Db,\n   tenant: Tenant,\n+  broker: CoralEventPublisherBroker,\n   config: Config,\n   storyID: string,\n   storyURL: string,\n@@ -182,7 +199,7 @@ export async function create(\n   }\n \n   // Create the story in the database.\n-  let newStory = await createStory(\n+  let story = await createStory(\n     mongo,\n     tenant.id,\n     storyID,\n@@ -193,10 +210,15 @@ export async function create(\n   if (!metadata && tenant.stories.scraping.enabled) {\n     // If the scraper has not scraped this story and story metadata was not\n     // provided, we need to scrape it now!\n-    newStory = await scrape(mongo, config, tenant.id, newStory.id, storyURL);\n+    story = await scrape(mongo, config, tenant.id, story.id, storyURL);\n   }\n \n-  return newStory;\n+  StoryCreatedCoralEvent.publish(broker, {\n+    storyID: story.id,\n+    storyURL: story.url,\n+  });\n+\n+  return story;\n }\n \n export type UpdateStory = UpdateStoryInput;"
    },
    {
      "sha": "3b51b0b81ecdc9f287733346520d806d7fbed16f",
      "filename": "src/core/server/services/stories/scraper/scraper.ts",
      "status": "modified",
      "additions": 16,
      "deletions": 22,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/stories/scraper/scraper.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/stories/scraper/scraper.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/stories/scraper/scraper.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -5,19 +5,17 @@ import descriptionScraper from \"metascraper-description\";\n import imageScraper from \"metascraper-image\";\n import titleScraper from \"metascraper-title\";\n import { Db } from \"mongodb\";\n-import fetch, { RequestInit } from \"node-fetch\";\n import ProxyAgent from \"proxy-agent\";\n \n-import { version } from \"coral-common/version\";\n import { Config } from \"coral-server/config\";\n import { ScrapeFailed } from \"coral-server/errors\";\n import logger from \"coral-server/logger\";\n import { retrieveStory, updateStory } from \"coral-server/models/story\";\n import { retrieveTenant } from \"coral-server/models/tenant\";\n+import { createFetch, Fetch, FetchOptions } from \"coral-server/services/fetch\";\n \n import { GQLStoryMetadata } from \"coral-server/graph/schema/__generated__/types\";\n \n-import abortAfter from \"./abortAfter\";\n import { modifiedScraper } from \"./rules/modified\";\n import { publishedScraper } from \"./rules/published\";\n import { sectionScraper } from \"./rules/section\";\n@@ -32,8 +30,10 @@ export type Rule = Record<\n class Scraper {\n   private readonly rules: Rule[];\n   private readonly log: Logger;\n+  private readonly fetch: Fetch;\n \n   constructor(rules: Rule[]) {\n+    this.fetch = createFetch({ name: \"Scraper\" });\n     this.rules = rules;\n     this.log = logger.child({ taskName: \"scraper\" }, true);\n   }\n@@ -85,36 +85,34 @@ class Scraper {\n \n   public async download(\n     url: string,\n-    abortAfterMilliseconds: number,\n+    timeout: number,\n     customUserAgent?: string,\n     proxyURL?: string\n   ) {\n     const log = this.log.child({ storyURL: url }, true);\n \n-    // Abort the scrape request after the timeout is reached.\n-    const { controller, timeout } = abortAfter(abortAfterMilliseconds);\n-\n-    const options: RequestInit = {\n-      headers: {\n-        \"User-Agent\": customUserAgent || `Talk Scraper/${version}`,\n-      },\n-      signal: controller.signal,\n-    };\n+    const options: FetchOptions = { timeout };\n+    if (customUserAgent) {\n+      options.headers = {\n+        ...options.headers,\n+        \"User-Agent\": customUserAgent,\n+      };\n+    }\n \n     if (proxyURL) {\n       // Force the type here because there's a slight mismatch.\n       options.agent = (new ProxyAgent(\n         proxyURL\n-      ) as unknown) as RequestInit[\"agent\"];\n+      ) as unknown) as FetchOptions[\"agent\"];\n       log.debug(\"using proxy for scrape\");\n     }\n \n     const start = Date.now();\n     log.debug(\"starting scrape of Story\");\n \n     try {\n-      const res = await fetch(url, options);\n-      if (!res.ok || res.status !== 200) {\n+      const res = await this.fetch(url, options);\n+      if (!res.ok) {\n         log.warn(\n           { statusCode: res.status, statusText: res.statusText },\n           \"scrape failed with non-200 status code\"\n@@ -129,8 +127,6 @@ class Scraper {\n       return html;\n     } catch (err) {\n       throw new ScrapeFailed(url, err);\n-    } finally {\n-      clearTimeout(timeout);\n     }\n   }\n \n@@ -198,14 +194,12 @@ export async function scrape(\n \n   // This typecast is needed because the custom `ms` format does not return the\n   // desired `number` type even though that's the only type it can output.\n-  const abortAfterMilliseconds = (config.get(\n-    \"scrape_timeout\"\n-  ) as unknown) as number;\n+  const timeout = (config.get(\"scrape_timeout\") as unknown) as number;\n \n   // Get the metadata from the scraped html.\n   const metadata = await scraper.scrape(\n     storyURL,\n-    abortAfterMilliseconds,\n+    timeout,\n     tenant.stories.scraping.customUserAgent,\n     tenant.stories.scraping.proxyURL\n   );"
    },
    {
      "sha": "9be9a8afd43c265a0574b44153f8d42dc6d1c615",
      "filename": "src/core/server/services/tenant/index.ts",
      "status": "modified",
      "additions": 260,
      "deletions": 0,
      "changes": 260,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/tenant/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/tenant/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/tenant/index.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -14,19 +14,27 @@ import {\n   createTenantAnnouncement,\n   CreateTenantInput,\n   createTenantSSOKey,\n+  createTenantWebhookEndpoint,\n+  CreateTenantWebhookEndpointInput,\n   deleteTenantAnnouncement,\n+  deleteTenantWebhookEndpoint,\n   disableTenantFeatureFlag,\n   enableTenantFeatureFlag,\n+  getWebhookEndpoint,\n+  rollTenantWebhookEndpointSecret,\n   rotateTenantSSOKey,\n   Tenant,\n   updateTenant,\n+  updateTenantWebhookEndpoint,\n+  UpdateTenantWebhookEndpointInput,\n } from \"coral-server/models/tenant\";\n import { I18n } from \"coral-server/services/i18n\";\n \n import {\n   GQLFEATURE_FLAG,\n   GQLSettingsInput,\n   GQLSettingsWordListInput,\n+  GQLWEBHOOK_EVENT_NAME,\n } from \"coral-server/graph/schema/__generated__/types\";\n \n import TenantCache from \"./cache\";\n@@ -203,6 +211,258 @@ export async function discoverOIDCConfiguration(issuerString: string) {\n   return discover(issuer);\n }\n \n+interface WebhookEndpointInput {\n+  url: string;\n+  all: boolean;\n+  events: GQLWEBHOOK_EVENT_NAME[];\n+}\n+\n+export function validateWebhookEndpointInput(\n+  config: Config,\n+  input: WebhookEndpointInput\n+) {\n+  // Check to see that this URL is valid and has a https:// scheme if in\n+  // production mode.\n+  const url = new URL(input.url);\n+  if (config.get(\"env\") === \"production\" && url.protocol !== \"https:\") {\n+    throw new Error(`invalid scheme provided in production: ${url.protocol}`);\n+  }\n+\n+  // Ensure that either the \"all\" or \"events\" is provided but not both.\n+  if (input.all && input.events.length > 0) {\n+    throw new Error(\"both all events and specific events were requested\");\n+  }\n+}\n+\n+export async function createWebhookEndpoint(\n+  mongo: Db,\n+  redis: Redis,\n+  config: Config,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  input: CreateTenantWebhookEndpointInput,\n+  now: Date\n+) {\n+  // Validate the input.\n+  validateWebhookEndpointInput(config, input);\n+\n+  // Looks good in create this, send it off to be created.\n+  const result = await createTenantWebhookEndpoint(\n+    mongo,\n+    tenant.id,\n+    input,\n+    now\n+  );\n+  if (!result.tenant) {\n+    throw new Error(\"could not create the tenant endpoint, tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, result.tenant);\n+\n+  return {\n+    endpoint: result.endpoint,\n+    settings: result.tenant,\n+  };\n+}\n+\n+export async function updateWebhookEndpoint(\n+  mongo: Db,\n+  redis: Redis,\n+  config: Config,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  endpointID: string,\n+  input: UpdateTenantWebhookEndpointInput\n+) {\n+  // Find the endpoint.\n+  let endpoint = getWebhookEndpoint(tenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  // Extract the input.\n+  const {\n+    url = endpoint.url,\n+    all = endpoint.all,\n+    events = endpoint.events,\n+  } = input;\n+\n+  // Validate the input.\n+  validateWebhookEndpointInput(config, {\n+    url,\n+    all,\n+    events,\n+  });\n+\n+  const updatedTenant = await updateTenantWebhookEndpoint(\n+    mongo,\n+    tenant.id,\n+    endpointID,\n+    input\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated endpoint.\n+  endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  return endpoint;\n+}\n+\n+export async function enableWebhookEndpoint(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  endpointID: string\n+) {\n+  // Find the endpoint.\n+  let endpoint = getWebhookEndpoint(tenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  // Endpoint is already enabled.\n+  if (endpoint.enabled === true) {\n+    return endpoint;\n+  }\n+\n+  const updatedTenant = await updateTenantWebhookEndpoint(\n+    mongo,\n+    tenant.id,\n+    endpointID,\n+    { enabled: true }\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated endpoint.\n+  endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  return endpoint;\n+}\n+\n+export async function disableWebhookEndpoint(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  endpointID: string\n+) {\n+  // Find the endpoint.\n+  let endpoint = getWebhookEndpoint(tenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  // Endpoint is already disabled.\n+  if (endpoint.enabled === false) {\n+    return endpoint;\n+  }\n+\n+  const updatedTenant = await updateTenantWebhookEndpoint(\n+    mongo,\n+    tenant.id,\n+    endpointID,\n+    { enabled: false }\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated endpoint.\n+  endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  return endpoint;\n+}\n+\n+export async function deleteWebhookEndpoint(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  endpointID: string\n+) {\n+  // Find the endpoint.\n+  const endpoint = getWebhookEndpoint(tenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  const updatedTenant = await deleteTenantWebhookEndpoint(\n+    mongo,\n+    tenant.id,\n+    endpointID\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  return endpoint;\n+}\n+\n+export async function rotateWebhookEndpointSecret(\n+  mongo: Db,\n+  redis: Redis,\n+  cache: TenantCache,\n+  tenant: Tenant,\n+  endpointID: string,\n+  inactiveIn: number,\n+  now: Date\n+) {\n+  // Compute the inactiveAt dates for the current active secrets.\n+  const inactiveAt = DateTime.fromJSDate(now)\n+    .plus({ seconds: inactiveIn })\n+    .toJSDate();\n+\n+  // Rotate the secrets.\n+  const updatedTenant = await rollTenantWebhookEndpointSecret(\n+    mongo,\n+    tenant.id,\n+    endpointID,\n+    inactiveAt,\n+    now\n+  );\n+  if (!updatedTenant) {\n+    throw new Error(\"tenant not found\");\n+  }\n+\n+  // Update the tenant cache.\n+  await cache.update(redis, updatedTenant);\n+\n+  // Find the updated endpoint.\n+  const endpoint = getWebhookEndpoint(updatedTenant, endpointID);\n+  if (!endpoint) {\n+    throw new Error(\"referenced endpoint was not found on tenant\");\n+  }\n+\n+  return endpoint;\n+}\n+\n export async function enableFeatureFlag(\n   mongo: Db,\n   redis: Redis,"
    },
    {
      "sha": "f820b98574b4ff14c4184a512f217e526a2ecaaf",
      "filename": "src/core/server/services/users/auth/invite.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/users/auth/invite.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/users/auth/invite.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/users/auth/invite.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -4,7 +4,15 @@ import { DateTime } from \"luxon\";\n import { Db } from \"mongodb\";\n import uuid from \"uuid\";\n \n+import { constructTenantURL } from \"coral-server/app/url\";\n import { Config } from \"coral-server/config\";\n+import {\n+  IntegrationDisabled,\n+  InviteIncludesExistingUser,\n+  InviteRequiresEmailAddresses,\n+  InviteTokenExpired,\n+  TokenInvalidError,\n+} from \"coral-server/errors\";\n import {\n   createInvite,\n   Invite,\n@@ -28,15 +36,8 @@ import {\n   verifyJWT,\n } from \"coral-server/services/jwt\";\n \n-import { constructTenantURL } from \"coral-server/app/url\";\n-import {\n-  IntegrationDisabled,\n-  InviteIncludesExistingUser,\n-  InviteRequiresEmailAddresses,\n-  InviteTokenExpired,\n-  TokenInvalidError,\n-} from \"coral-server/errors\";\n import { GQLUSER_ROLE } from \"coral-server/graph/schema/__generated__/types\";\n+\n import { validateEmail, validatePassword, validateUsername } from \"../helpers\";\n \n export interface InviteToken extends Required<StandardClaims> {\n@@ -324,5 +325,7 @@ export async function redeem(\n     now\n   );\n \n+  // TODO: (wyattjoh) emit that a user was created\n+\n   return user;\n }"
    },
    {
      "sha": "cefa051eb730ac64d28519bac25d51175d2c16dd",
      "filename": "src/core/server/services/users/download/download.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/users/download/download.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/users/download/download.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/users/download/download.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -6,9 +6,11 @@ import htmlToText from \"html-to-text\";\n import { kebabCase } from \"lodash\";\n import { Db } from \"mongodb\";\n \n-import { getLatestRevision } from \"coral-server/models/comment\";\n-import { Comment } from \"coral-server/models/comment\";\n-import { retrieveManyStories } from \"coral-server/models/story\";\n+import { Comment, getLatestRevision } from \"coral-server/models/comment\";\n+import {\n+  getURLWithCommentID,\n+  retrieveManyStories,\n+} from \"coral-server/models/story\";\n import { Tenant } from \"coral-server/models/tenant\";\n import { User } from \"coral-server/models/user\";\n \n@@ -102,15 +104,11 @@ export async function sendUserDownload(\n \n       const revision = getLatestRevision(comment);\n \n-      const commentID = comment.id;\n       const createdAt = formatter.format(new Date(comment.createdAt));\n-      const storyURL = story.url;\n-      const urlBuilder = new URL(storyURL);\n-      urlBuilder.searchParams.set(\"commentID\", commentID);\n-      const commentURL = urlBuilder.href;\n       const body = htmlToText.fromString(revision.body);\n+      const commentURL = getURLWithCommentID(story.url, comment.id);\n \n-      csv.write([commentID, createdAt, storyURL, commentURL, body]);\n+      csv.write([comment.id, createdAt, story.url, commentURL, body]);\n     }\n \n     commentBatch = [];"
    },
    {
      "sha": "da701733e357565cab30774ace3832944617c0c9",
      "filename": "src/core/server/services/users/users.ts",
      "status": "modified",
      "additions": 19,
      "deletions": 8,
      "changes": 27,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/users/users.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/services/users/users.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/users/users.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -5,8 +5,8 @@ import {\n   ALLOWED_USERNAME_CHANGE_TIMEFRAME_DURATION,\n   COMMENT_REPEAT_POST_DURATION,\n   DOWNLOAD_LIMIT_TIMEFRAME_DURATION,\n+  SCHEDULED_DELETION_WINDOW_DURATION,\n } from \"coral-common/constants\";\n-import { SCHEDULED_DELETION_WINDOW_DURATION } from \"coral-common/constants\";\n import { Config } from \"coral-server/config\";\n import {\n   DuplicateEmailError,\n@@ -25,10 +25,6 @@ import {\n   UsernameUpdatedWithinWindowError,\n   UserNotFoundError,\n } from \"coral-server/errors\";\n-import {\n-  GQLAuthIntegrations,\n-  GQLUSER_ROLE,\n-} from \"coral-server/graph/schema/__generated__/types\";\n import logger from \"coral-server/logger\";\n import { Comment, retrieveComment } from \"coral-server/models/comment\";\n import { Tenant } from \"coral-server/models/tenant\";\n@@ -72,12 +68,16 @@ import {\n import {\n   getLocalProfile,\n   hasLocalProfile,\n+  hasStaffRole,\n } from \"coral-server/models/user/helpers\";\n-import { hasStaffRole } from \"coral-server/models/user/helpers\";\n import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n+import { JWTSigningConfig, signPATString } from \"coral-server/services/jwt\";\n import { sendConfirmationEmail } from \"coral-server/services/users/auth\";\n \n-import { JWTSigningConfig, signPATString } from \"coral-server/services/jwt\";\n+import {\n+  GQLAuthIntegrations,\n+  GQLUSER_ROLE,\n+} from \"coral-server/graph/schema/__generated__/types\";\n \n import { AugmentedRedis } from \"../redis\";\n import {\n@@ -125,7 +125,16 @@ export async function findOrCreate(\n   // Validate the input.\n   validateFindOrCreateUserInput(input, options);\n \n-  const user = await findOrCreateUser(mongo, tenant.id, input, now);\n+  const { user, wasUpserted } = await findOrCreateUser(\n+    mongo,\n+    tenant.id,\n+    input,\n+    now\n+  );\n+\n+  if (wasUpserted) {\n+    // TODO: (wyattjoh) emit that a user was created\n+  }\n \n   // TODO: (wyattjoh) evaluate the tenant to determine if we should send the verification email.\n \n@@ -169,6 +178,8 @@ export async function create(\n \n   const user = await createUser(mongo, tenant.id, input, now);\n \n+  // TODO: (wyattjoh) emit that a user was created\n+\n   // TODO: (wyattjoh) evaluate the tenant to determine if we should send the verification email.\n \n   return user;"
    },
    {
      "sha": "1daabbe6d88c0473d1c6861e38abfa4bcd25eac9",
      "filename": "src/core/server/stacks/approveComment.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/stacks/approveComment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/stacks/approveComment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/stacks/approveComment.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,7 +1,7 @@\n import { Db } from \"mongodb\";\n \n import { Config } from \"coral-server/config\";\n-import { Publisher } from \"coral-server/graph/subscriptions/publisher\";\n+import { CoralEventPublisherBroker } from \"coral-server/events/publisher\";\n import { Tenant } from \"coral-server/models/tenant\";\n import { moderate } from \"coral-server/services/comments/moderation\";\n import { notifyPerspectiveModerationDecision } from \"coral-server/services/perspective\";\n@@ -15,7 +15,7 @@ const approveComment = async (\n   mongo: Db,\n   redis: AugmentedRedis,\n   config: Config,\n-  publisher: Publisher,\n+  broker: CoralEventPublisherBroker,\n   tenant: Tenant,\n   commentID: string,\n   commentRevisionID: string,\n@@ -44,7 +44,7 @@ const approveComment = async (\n   });\n \n   // Publish changes to the event publisher.\n-  await publishChanges(publisher, {\n+  await publishChanges(broker, {\n     ...result,\n     ...counts,\n     moderatorID,"
    },
    {
      "sha": "a793b14bec1c4d70606f52681cd66c93b6de9b88",
      "filename": "src/core/server/stacks/createComment.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/stacks/createComment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/stacks/createComment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/stacks/createComment.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -8,7 +8,7 @@ import {\n   CoralError,\n   StoryNotFoundError,\n } from \"coral-server/errors\";\n-import { Publisher } from \"coral-server/graph/subscriptions/publisher\";\n+import { CoralEventPublisherBroker } from \"coral-server/events/publisher\";\n import logger from \"coral-server/logger\";\n import {\n   encodeActionCounts,\n@@ -59,7 +59,7 @@ export default async function create(\n   mongo: Db,\n   redis: AugmentedRedis,\n   config: Config,\n-  publisher: Publisher,\n+  broker: CoralEventPublisherBroker,\n   tenant: Tenant,\n   author: User,\n   input: CreateComment,\n@@ -233,19 +233,19 @@ export default async function create(\n   });\n \n   // Publish changes to the event publisher.\n-  await publishChanges(publisher, {\n+  await publishChanges(broker, {\n     ...counts,\n     after: comment,\n   });\n \n   // If this is a reply, publish it.\n   if (input.parentID) {\n-    publishCommentReplyCreated(publisher, comment);\n+    publishCommentReplyCreated(broker, comment);\n   }\n \n   // If this comment is visible (and not a reply), publish it.\n   if (!input.parentID && hasPublishedStatus(comment)) {\n-    publishCommentCreated(publisher, comment);\n+    publishCommentCreated(broker, comment);\n   }\n \n   return comment;"
    },
    {
      "sha": "79a9f33763d02713b81c87dbcbb4b6a4d560957f",
      "filename": "src/core/server/stacks/editComment.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/stacks/editComment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/stacks/editComment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/stacks/editComment.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -4,7 +4,7 @@ import { Db } from \"mongodb\";\n import { Omit } from \"coral-common/types\";\n import { Config } from \"coral-server/config\";\n import { CommentNotFoundError, StoryNotFoundError } from \"coral-server/errors\";\n-import { Publisher } from \"coral-server/graph/subscriptions/publisher\";\n+import { CoralEventPublisherBroker } from \"coral-server/events/publisher\";\n import logger from \"coral-server/logger\";\n import {\n   encodeActionCounts,\n@@ -57,7 +57,7 @@ export default async function edit(\n   mongo: Db,\n   redis: AugmentedRedis,\n   config: Config,\n-  publisher: Publisher,\n+  broker: CoralEventPublisherBroker,\n   tenant: Tenant,\n   author: User,\n   input: EditComment,\n@@ -188,7 +188,7 @@ export default async function edit(\n   });\n \n   // Publish changes to the event publisher.\n-  await publishChanges(publisher, {\n+  await publishChanges(broker, {\n     ...result,\n     ...counts,\n   });"
    },
    {
      "sha": "747e3c944fa86ba3a8de841a7e91369bf83cf1f4",
      "filename": "src/core/server/stacks/helpers/publishChanges.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/stacks/helpers/publishChanges.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/stacks/helpers/publishChanges.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/stacks/helpers/publishChanges.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,4 +1,4 @@\n-import { Publisher } from \"coral-server/graph/subscriptions/publisher\";\n+import { CoralEventPublisherBroker } from \"coral-server/events/publisher\";\n import {\n   Comment,\n   CommentModerationQueueCounts,\n@@ -19,25 +19,25 @@ interface PublishChangesInput {\n }\n \n export default async function publishChanges(\n-  publish: Publisher,\n+  broker: CoralEventPublisherBroker,\n   input: PublishChangesInput\n ) {\n   // Publish changes.\n-  publishModerationQueueChanges(publish, input.moderationQueue, input.after);\n+  publishModerationQueueChanges(broker, input.moderationQueue, input.after);\n \n   // If this was a change, and it has a \"before\" state for the comment, process\n   // those updates too.\n   if (input.before) {\n     publishCommentStatusChanges(\n-      publish,\n+      broker,\n       input.before.status,\n       input.after.status,\n       input.after.id,\n       input.moderatorID || null\n     );\n \n     if (hasModeratorStatus(input.before) && hasPublishedStatus(input.after)) {\n-      publishCommentReleased(publish, input.after);\n+      publishCommentReleased(broker, input.after);\n     }\n   }\n }"
    },
    {
      "sha": "3292d48e690721dbe9b3f715fb94da8fc0d09c2c",
      "filename": "src/core/server/stacks/rejectComment.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/stacks/rejectComment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/core/server/stacks/rejectComment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/stacks/rejectComment.ts?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -1,7 +1,7 @@\n import { Db } from \"mongodb\";\n \n import { Config } from \"coral-server/config\";\n-import { Publisher } from \"coral-server/graph/subscriptions/publisher\";\n+import { CoralEventPublisherBroker } from \"coral-server/events/publisher\";\n import { hasTag } from \"coral-server/models/comment\";\n import { Tenant } from \"coral-server/models/tenant\";\n import { removeTag } from \"coral-server/services/comments\";\n@@ -20,7 +20,7 @@ const rejectComment = async (\n   mongo: Db,\n   redis: AugmentedRedis,\n   config: Config,\n-  publisher: Publisher,\n+  broker: CoralEventPublisherBroker,\n   tenant: Tenant,\n   commentID: string,\n   commentRevisionID: string,\n@@ -49,7 +49,7 @@ const rejectComment = async (\n   });\n \n   // Publish changes to the event publisher.\n-  await publishChanges(publisher, {\n+  await publishChanges(broker, {\n     ...result,\n     ...counts,\n     moderatorID,"
    },
    {
      "sha": "f19bc30c9e44d9ae619597314ff1408c8be36fa1",
      "filename": "src/locales/da/admin.ftl",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/locales/da/admin.ftl",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/locales/da/admin.ftl",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/locales/da/admin.ftl?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -541,7 +541,7 @@ community-filter-allStatuses = Alle statuer\n community-column-username = Brugernavn\n community-column-email = Email\n community-column-memberSince = Medlem siden\n-community-column-role = Rolle\n+community-column-role = Rotatee\n community-column-status = Status\n \n community-role-popover ="
    },
    {
      "sha": "d35f3e66bf7068f88ce2023b1584df73d8374e27",
      "filename": "src/locales/en-US/admin.ftl",
      "status": "modified",
      "additions": 83,
      "deletions": 0,
      "changes": 83,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/locales/en-US/admin.ftl",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/locales/en-US/admin.ftl",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/locales/en-US/admin.ftl?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -79,6 +79,7 @@ configure-sideBarNavigation-advanced = Advanced\n configure-sideBarNavigation-email = Email\n configure-sideBarNavigation-bannedAndSuspectWords = Banned and Suspect Words\n configure-sideBarNavigation-slack = Slack\n+configure-sideBarNavigation-webhooks = Webhooks\n \n configure-sideBar-saveChanges = Save Changes\n configure-configurationSubHeader = Configuration\n@@ -87,6 +88,88 @@ configure-onOffField-off = Off\n configure-radioButton-allow = Allow\n configure-radioButton-dontAllow = Don't allow\n \n+### Webhooks\n+configure-webhooks-webhookEndpointNotFound = Webhook endpoint not found\n+configure-webhooks-header-title = Configure webhook endpoint\n+configure-webhooks-description =\n+  Configure an endpoint to send events to when events occur within\n+  Coral. These events will be JSON encoded and signed. To learn more\n+  about webhook signing, visit our <externalLink>Webhook Guide</externalLink>.\n+configure-webhooks-addEndpoint = Add webhook endpoint\n+configure-webhooks-addEndpointButton = Add webhook endpoint\n+configure-webhooks-endpoints = Endpoints\n+configure-webhooks-url = URL\n+configure-webhooks-status = Status\n+configure-webhooks-noEndpoints = There are no webhook endpoints configured, add one above.\n+configure-webhooks-enabledWebhookEndpoint = Enabled\n+configure-webhooks-disabledWebhookEndpoint = Disabled\n+configure-webhooks-endpointURL = Endpoint URL\n+configure-webhooks-cancelButton = Cancel\n+configure-webhooks-updateWebhookEndpointButton = Update webhook endpoint\n+configure-webhooks-eventsToSend = Events to send\n+configure-webhooks-clearEventsToSend = Clear\n+configure-webhooks-eventsToSendDescription =\n+  These are the events that are registered to this particular endpoint. Visit\n+  our <externalLink>Webhook Guide</externalLink> for the schema of these events.\n+  Any event matching the following will be sent to the endpoint if it is\n+  enabled:\n+configure-webhooks-allEvents =\n+  The endpoint will receive all events, including any added in the future.\n+configure-webhooks-selectedEvents =\n+  { $count } { $count ->\n+    [1] event\n+    *[other] events\n+  } selected.\n+configure-webhooks-selectAnEvent =\n+  Select events above or <button>receive all events</button>.\n+configure-webhooks-configureWebhookEndpoint = Configure webhook endpoint\n+configure-webhooks-confirmEnable =\n+  Enabling the webhook endpoint will start to send events to this URL. Are you sure you want to continue?\n+configure-webhooks-confirmDisable =\n+  Disabling this webhook endpoint will stop any new events from being sent to this URL. Are you sure you want to continue?\n+configure-webhooks-confirmDelete =\n+  Deleting this webhook endpoint will stop any new events from being sent to this URL, and remove all the associated settings with this webhook endpoint. Are you sure you want to continue?\n+configure-webhooks-dangerZone = Danger Zone\n+configure-webhooks-rotateSigningSecret = Rotate signing secret\n+configure-webhooks-rotateSigningSecretDescription =\n+  Rotating the signing secret will allow to you to safely replace a signing\n+  secret used in production with a delay.\n+configure-webhooks-rotateSigningSecretButton = Rotate signing secret\n+configure-webhooks-rotateSigningSecretHelper =\n+  After it expires, signatures will no longer be generated with the old secret.\n+configure-webhooks-rotateSigningSecretSuccessUseNewSecret =\n+  Webhook endpoint signing secret has been rotated. Please ensure\n+  you update your integrations to use the new secret below.\n+configure-webhooks-disableEndpoint = Disable endpoint\n+configure-webhooks-disableEndpointDescription =\n+  This endpoint is current enabled. By disabling this endpoint no new events\n+  will be sent to the URL provided.\n+configure-webhooks-disableEndpointButton = Disable endpoint\n+configure-webhooks-enableEndpoint = Enable endpoint\n+configure-webhooks-enableEndpointDescription =\n+  This endpoint is current disabled. By enabling this endpoint new events will\n+  be sent to the URL provided.\n+configure-webhooks-enableEndpointButton = Enable endpoint\n+configure-webhooks-deleteEndpoint = Delete endpoint\n+configure-webhooks-deleteEndpointDescription =\n+  Deleting the endpoint will prevent any new events from being sent to the URL\n+  provided.\n+configure-webhooks-deleteEndpointButton = Delete endpoint\n+configure-webhooks-endpointStatus = Endpoint status\n+configure-webhooks-signingSecret = Signing secret\n+configure-webhooks-signingSecretDescription =\n+  The following signing secret is used to sign request payloads sent\n+  to the URL. To learn more about webhook signing, visit our\n+  <externalLink>Webhook Guide</externalLink>.\n+configure-webhooks-expiresOldSecret = Expire the old secret\n+configure-webhooks-expiresOldSecretImmediately = Immediately\n+configure-webhooks-expiresOldSecretHoursFromNow =\n+  { $hours ->\n+    [1] 1 hour\n+    *[other] { $hours } hours\n+  }  from now\n+configure-webhooks-detailsButton = Details <icon>keyboard_arrow_right</icon>\n+\n ### General\n configure-general-guidelines-title = Community guidelines summary\n configure-general-guidelines-explanation ="
    },
    {
      "sha": "afde0384c90f66081a674296fd10d8eb7953bcc7",
      "filename": "src/locales/en-US/framework.ftl",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/locales/en-US/framework.ftl",
      "raw_url": "https://github.com/coralproject/talk/raw/e42c2b925df6538c7a5d5f1378b68c4e97f0ec41/src/locales/en-US/framework.ftl",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/locales/en-US/framework.ftl?ref=e42c2b925df6538c7a5d5f1378b68c4e97f0ec41",
      "patch": "@@ -33,6 +33,7 @@ framework-validation-notAWholeNumberGreaterThan = Please enter a whole number gr\n framework-validation-notAWholeNumberGreaterThanOrEqual = Please enter a whole number greater than or equal to { $x }\n framework-validation-usernamesDoNotMatch = Usernames do not match. Try again.\n framework-validation-deleteConfirmationInvalid = Incorrect confirmation. Try again.\n+framework-validation-invalidWebhookEndpointEventSelection = Select at least one event to receive.\n \n framework-timeago-just-now = Just now\n "
    }
  ]
}
