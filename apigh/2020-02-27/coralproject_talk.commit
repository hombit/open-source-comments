{
  "sha": "a059e70d05faec8384ed194570b61529c61c38f8",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6YTA1OWU3MGQwNWZhZWM4Mzg0ZWQxOTQ1NzBiNjE1MjljNjFjMzhmOA==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2020-02-26T16:29:18Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-02-26T16:29:18Z"
    },
    "message": "[DOCS Day] Contribution Guidelines Update (#2863)\n\n* feat: initial commit with new handbook material\r\n\r\n- Adds guides related to creating PR's\r\n- Enhances PR templates\r\n\r\n* feat: harmonized docs",
    "tree": {
      "sha": "79fc8201daba79fc59ce19fb46a3c4287778e378",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/79fc8201daba79fc59ce19fb46a3c4287778e378"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/a059e70d05faec8384ed194570b61529c61c38f8",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeVpzeCRBK7hj4Ov3rIwAAdHIIABTsxLtAUmR4SG9waaiuaga1\nEMYOzfN1sshcGdrCe6Uuk1VlytcPnFuhdFvkBvln+VDW+JXeRvg0+0TZfTXgPmsm\nf9GKpyJYhMGqR5Qpj5hVUwd+NWA6go6yoZfU1n6QH1wGk2QbtLl6mTJ9+i73CKfo\nWSHL1YwuT2Z0i4yL+hszhKPOsXfJbdeB80H1NcE+gbPk7Dn481PSE5sXPvbzf1bJ\n2n9YZg0IXc4EarmMvm1P/qUXafASJYAFBA1PB2LVUsTAHX0JaRmvTdq9mGd6WFAP\nL1QNAGEiQl+bum9C3v3ajCmtn+nAw1JjgGu30Lw4RKpoOOMRsr7crKzIxhObTpk=\n=I3SF\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 79fc8201daba79fc59ce19fb46a3c4287778e378\nparent 1a3401710fafe5e0c14aa9511359158fc4862cea\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1582734558 +0000\ncommitter GitHub <noreply@github.com> 1582734558 -0500\n\n[DOCS Day] Contribution Guidelines Update (#2863)\n\n* feat: initial commit with new handbook material\r\n\r\n- Adds guides related to creating PR's\r\n- Enhances PR templates\r\n\r\n* feat: harmonized docs\r\n"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/a059e70d05faec8384ed194570b61529c61c38f8",
  "html_url": "https://github.com/coralproject/talk/commit/a059e70d05faec8384ed194570b61529c61c38f8",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/a059e70d05faec8384ed194570b61529c61c38f8/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1a3401710fafe5e0c14aa9511359158fc4862cea",
      "url": "https://api.github.com/repos/coralproject/talk/commits/1a3401710fafe5e0c14aa9511359158fc4862cea",
      "html_url": "https://github.com/coralproject/talk/commit/1a3401710fafe5e0c14aa9511359158fc4862cea"
    }
  ],
  "stats": {
    "total": 460,
    "additions": 316,
    "deletions": 144
  },
  "files": [
    {
      "sha": "70d79699b5e29cd604e619e2f672b7beba653377",
      "filename": ".adr-dir",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/a059e70d05faec8384ed194570b61529c61c38f8/.adr-dir",
      "raw_url": "https://github.com/coralproject/talk/raw/a059e70d05faec8384ed194570b61529c61c38f8/.adr-dir",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/.adr-dir?ref=a059e70d05faec8384ed194570b61529c61c38f8",
      "patch": "@@ -0,0 +1 @@\n+src/docs/architecture/decisions"
    },
    {
      "sha": "0f8f7f845c6f0f19f3b132b06e957a8cf2218d86",
      "filename": ".github/PULL_REQUEST_TEMPLATE.md",
      "status": "modified",
      "additions": 36,
      "deletions": 2,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/a059e70d05faec8384ed194570b61529c61c38f8/.github/PULL_REQUEST_TEMPLATE.md",
      "raw_url": "https://github.com/coralproject/talk/raw/a059e70d05faec8384ed194570b61529c61c38f8/.github/PULL_REQUEST_TEMPLATE.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/.github/PULL_REQUEST_TEMPLATE.md?ref=a059e70d05faec8384ed194570b61529c61c38f8",
      "patch": "@@ -1,14 +1,48 @@\n <!--\n-Thank you for submitting a pull request! Please note that by contributing to Coral, you agree to our Code of Conduct: http://code-of-conduct.voxmedia.com/\n \n-Before submitting your PR, please verify that:\n+Thank you for submitting a pull request! Please note that by contributing to\n+Coral, you agree to our Code of Conduct: http://code-of-conduct.voxmedia.com/\n+\n+Before submitting your Pull Request (or PR), please verify that:\n+\n * [ ] Your code is up-to-date with the base branch\n * [ ] You've successfully run `npm run test` locally\n \n Refer to CONTRIBUTING.MD for more details.\n+\n   https://github.com/coralproject/talk/blob/master/CONTRIBUTING.md\n+\n -->\n \n ## What does this PR do?\n \n+<!--\n+\n+In this section, you should be describing what other Github issues or tickets\n+that this PR is designed to addressed.\n+\n+Any related Github issue should be linked by adding its URL to this section.\n+\n+-->\n+\n+## What changes to the GraphQL/Database Schema does this PR introduce?\n+\n+<!--\n+\n+In this section, you should describe any changes to be made to the GraphQL\n+schema file (located https://github.com/coralproject/talk/blob/master/src/core/server/graph/schema/schema.graphql) or any\n+database model (located as types in the https://github.com/coralproject/talk/blob/master/src/core/server/models directory).\n+\n+If no changes were added to the GraphQL/Database Schema as a part of this PR,\n+simply write \"None\".\n+\n+-->\n+\n ## How do I test this PR?\n+\n+<!--\n+\n+In this section, you should be describing any manual testing that can be used to\n+verify features introduced or bugs fixed in this PR.\n+\n+ -->"
    },
    {
      "sha": "b6b108a22121d03dd1f4b4d0583e8cad34d03536",
      "filename": "CONTRIBUTING.md",
      "status": "modified",
      "additions": 260,
      "deletions": 142,
      "changes": 402,
      "blob_url": "https://github.com/coralproject/talk/blob/a059e70d05faec8384ed194570b61529c61c38f8/CONTRIBUTING.md",
      "raw_url": "https://github.com/coralproject/talk/raw/a059e70d05faec8384ed194570b61529c61c38f8/CONTRIBUTING.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/CONTRIBUTING.md?ref=a059e70d05faec8384ed194570b61529c61c38f8",
      "patch": "@@ -5,8 +5,7 @@ Welcome! We are very excited that you are interested in contributing to Coral.\n This document is a companion to help you approach contributing. If it does not\n do so, please [let us know how we can improve it](https://github.com/coralproject/talk/issues)!\n \n-By contributing to this project you agree to the\n-[Code of Conduct](CODE_OF_CONDUCT.md).\n+By contributing to this project you agree to the [Code of Conduct](CODE_OF_CONDUCT.md).\n \n <!-- START doctoc generated TOC please keep comment here to allow auto update -->\n <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n@@ -15,40 +14,59 @@ By contributing to this project you agree to the\n - [What should I Contribute?](#what-should-i-contribute)\n - [Writing Code](#writing-code)\n   - [When should I create an issue?](#when-should-i-create-an-issue)\n-  - [What should I include?](#what-should-i-include)\n+  - [What should I include in my issue?](#what-should-i-include-in-my-issue)\n+  - [When should I create a pull request?](#when-should-i-create-a-pull-request)\n+  - [What should I include in my pull request?](#what-should-i-include-in-my-pull-request)\n+- [Reviewing pull requests](#reviewing-pull-requests)\n+  - [Ensure contributions are linted and tested](#ensure-contributions-are-linted-and-tested)\n+  - [Review the feature/fixes](#review-the-featurefixes)\n+  - [Review architectural decisions](#review-architectural-decisions)\n+  - [Verify localizations](#verify-localizations)\n - [Localization](#localization)\n-- [Contributing To Our Docs](#contributing-to-our-docs)\n-- [Understanding GraphQL Types](#understanding-graphql-types)\n-  - [Custom Defined `type`'s:](#custom-defined-types)\n-  - [`enum` Types](#enum-types)\n-  - [Mutation Types](#mutation-types)\n-  - [Access Permissions On Types](#access-permissions-on-types)\n-  - [Arrays of Items](#arrays-of-items)\n-  - [Commenting Types and Properties](#commenting-types-and-properties)\n+- [Documentation](#documentation)\n+- [Design Principles](#design-principles)\n+  - [GraphQL](#graphql)\n \n <!-- END doctoc generated TOC please keep comment here to allow auto update -->\n \n ## What should I Contribute?\n \n-There are at least three ways to contribute to Coral:\n+There are at least three different ways to contribute to Coral:\n \n-- Writing Code\n-- Providing Translations\n+- [Writing Code](#writing-code)\n+- [Reviewing pull requests](#reviewing-pull-requests)\n+- [Localization](#localization)\n+- [Documentation](#documentation)\n+\n+Typically these take the form of creating a Pull Request for Coral, and\n+submitting it to be reviewed by a member of our team and the greater Coral\n+community.\n+\n+Working on your first Pull Request? You can learn how from this free video\n+series:\n+\n+[How to Contribute to an Open Source Project on GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github)\n+\n+If you decide to fix an issue, please be sure to check the comment thread in\n+case somebody is already working on a fix. If nobody is working on it at the\n+moment, please leave a comment stating that you intend to work on it so other\n+people don’t accidentally duplicate your effort.\n+\n+If somebody claims an issue but doesn’t follow up for more than two weeks, it’s\n+fine to take it over but you should still leave a comment.\n \n ## Writing Code\n \n-Conversation surrounding contributions begins in\n-[issues](https://github.com/coralproject/talk/issues).\n+Conversation surrounding contributions begins when you can create an issue\n+describing your issue or suggestion.\n \n ### When should I create an issue?\n \n File an issue as soon as you have an idea of something you'd like to contribute.\n We would love to hear what you're thinking and help refine the idea to make it\n into the Coral ecosystem.\n \n-Please file issues if you would like to contribute to Coral.\n-\n-### What should I include?\n+### What should I include in my issue?\n \n Coral has adopted an iterative, agile development philosophy. All contributions\n that make it into the Coral repository should start with a user story in this\n@@ -58,8 +76,8 @@ form:\n \n This exercise does two things:\n \n-- allows us to ground our technical choices in a clear, simple product need.\n-- expresses that product need in a way that doesn't imply a specific technical\n+- Allows us to ground our technical choices in a clear, simple product need.\n+- Expresses that product need in a way that doesn't imply a specific technical\n   solution allowing for debate as to the best way to solve the problem.\n \n Please feel free to provide as much detail as possible when filing the issue but\n@@ -69,6 +87,72 @@ technical or design solutions.\n If you have a specific technical or design solution in mind, please submit it as\n the first comment on the thread.\n \n+### When should I create a pull request?\n+\n+File a pull request if you've created an issue in our [issues](https://github.com/coralproject/talk/issues)\n+page and have heard back from a member or contributor to Coral. This allows our\n+team to review the proposed changes prior to time being spent if the team\n+already has the feature/fix in the road map.\n+\n+### What should I include in my pull request?\n+\n+When you create a pull request, the template will describe the required\n+components needed for it to be reviewed by a member of the Coral team. You\n+should end up filling out:\n+\n+- What does this PR (pull request) do?\n+- How do I test this PR?\n+\n+You should describe what Github issue or ticket that the PR is associated with\n+to assist the review process. If this PR is resolving a particular bug, a\n+testing strategy should be described in the testing section. If this PR is\n+contributing a new feature, a description should describe a scenario to test or\n+verify the new functionality.\n+\n+## Reviewing pull requests\n+\n+Reviewing pull requests in Coral is generally completed by the core Coral team\n+that is composed of developers employed by Vox Media Inc, but external reviews\n+or suggestions are also welcomed.\n+\n+Our review process generally follows a few core principles:\n+\n+### Ensure contributions are linted and tested\n+\n+It is the job of CI linting and tests to notify of style issues within the\n+codebase. If it is not possible for style issues to be encapsulated as a\n+linting rule, it shouldn't be concretely enforced during the review process.\n+This can ensure that code reviews contain more meaningful feedback tied to the\n+contribution rather than nit-picking on stylistic choices.\n+\n+Reviewers must ensure that linting and tests pass in CI and locally prior to a\n+review taking place. You can do this by running `npm run generate` followed by\n+`npm run lint` and `npm run test`.\n+\n+### Review the feature/fixes\n+\n+Any new features added to Coral should be reviewed for bugs through a manual\n+verification process to ensure that they function on your machine. If possible\n+you should review any automated tests that were added (or not added) related to\n+the feature.\n+\n+While the Coral team is not strict on test driven development (or TDD), any\n+contributions that include tests are greatly appreciated, and preferred over\n+those that do not.\n+\n+### Review architectural decisions\n+\n+Any substantial changes made to the codebase should be reviewed to ensure\n+that they conform to the current way code/services are laid out.\n+\n+Architecture Decision Records (or [ADR](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions)) are now being used to describe architectural decisions and can be found in the `src/docs/architecture/decisions` directory.\n+\n+### Verify localizations\n+\n+While we don't have any automated tools at the time of writing that will\n+verify this in CI, any strings being added that are presented to the end user\n+should be wrapped in localization components to support other languages.\n+\n ## Localization\n \n We use the [fluent](http://projectfluent.org/) library and store our\n@@ -90,32 +174,47 @@ also supports comments in specific languages. When the language is supported in\n Coral and supported by the Perspective API, the language should be added to the\n language map in `src/core/server/services/comments/pipeline/phases/toxic.ts`.\n \n-## Contributing To Our Docs\n+## Documentation\n+\n+Documentation that is publicly shown on\n+[docs.coralproject.net](https://docs.coralproject.net/coral/) is stored under\n+the `release/4` branch as it contains information for versions 4.0 onwards of\n+Coral.\n \n-Documentation that is publicly shown on [docs.coralproject.net](https://docs.coralproject.net/coral/) is stored under the `release/4` branch as it contains information for versions 4.0 onwards of Coral.\n+To contribute new docs, you can either click the \"Suggest Edits\" in the top\n+right of each page, or you can edit directly via source. We suggest that for\n+individual fixes or contributions to the documentation.\n \n-It was originally created for v4 and continues to serve all later versions of the Coral codebase.\n+If you want to contribute via source files, you can follow the procedure\n+outlined below:\n \n-To contribute new docs:\n-1. Pull down Coral's [talk repo](https://github.com/coralproject/talk)\n-1. Switch to the [release/4](https://github.com/coralproject/talk/tree/release/4) branch\n-1. Edit the docs located under the [docs](https://github.com/coralproject/talk/tree/release/4/docs) directory\n-1. Make a new branch off of `release/4`\n-1. Perform doc changes as needed\n-1. Push up your branch to GitHub\n-1. Request a PR via GitHub to merge your changes back into `release/4`\n+1. Clone the Talk repository via `git clone https://github.com/coralproject/talk.git`\n+2. Switch to the `release/4` branch via `git checkout release/4`\n+3. Follow the procedure outlined on that branch's [CONTRIBUTING.md](https://github.com/coralproject/talk/blob/release/4/CONTRIBUTING.md#contributing-documentation) file for contributing documentation changes\n+4. Create a pull request to merge your changes back into the `release/4` branch\n \n-## Understanding GraphQL Types\n+## Design Principles\n \n-There are many GraphQL types in our `schema.graphql` that define the way we handle data in our API. We'll try to outline a few of them here with examples to help you understand their uses.\n+### GraphQL\n \n-### Custom Defined `type`'s:\n+Coral relies heavily on [GraphQL](https://graphql.org) as the query language for\n+the API and the runtime on the server that powers resolving data from data\n+sources. This heavily influences a lot of the decisions around how we create and\n+consume it's API internally and how we expose it to others to interact with.\n \n-Similar to defining an interface or a struct definition, GraphQL has flexible types that can be used to define data types that are used for querying data from the API. This retrieval can happen directly via a query, or after executing an action using a mutation and querying its response result.\n+There are many GraphQL types in our [`schema.graphql`](https://github.com/coralproject/talk/blob/master/src/core/server/graph/schema/schema.graphql)\n+that define the way we handle data in our API. We'll try to outline a few of\n+them here with examples to help you understand their uses.\n \n-An example of these types is the `Comment` and its nested `CommentRevision` type.\n+#### Types\n \n-Comment:\n+Similar to defining an interface or a _struct_ definition, GraphQL has flexible\n+types that can be used to define data types that are used for querying data from\n+the API. This retrieval can happen directly via a query, or after executing an\n+action using a mutation and querying its response result.\n+\n+An example of these types is the `Comment` and its nested `CommentRevision`\n+type:\n \n ```graphql\n \"\"\"\n@@ -153,14 +252,12 @@ type Comment {\n   status represents the Comment's current status.\n   \"\"\"\n   status: COMMENT_STATUS!\n-\n-  ...\n }\n ```\n \n-Notice how the `Comment` type can nest more custom defined types. A `Comment` can have a current `CommentRevision` named `revision`. It also has a list of its historical `revisionHistory`.\n-\n-CommentRevision:\n+Notice how the `Comment` type can nest more custom defined types. A `Comment`\n+can have a current `CommentRevision` named `revision`. It also has a list of its\n+historical `revisionHistory`:\n \n ```graphql\n type CommentRevision {\n@@ -186,97 +283,90 @@ type CommentRevision {\n   body text was deleted.\n   \"\"\"\n   body: String\n+}\n ```\n \n-Another thing to note, see how `CommentRevision` is not only referenced by `revision` and `revisionHistory` on the `Comment` type. The `CommentRevision` also references back to its parent `Comment` via the `comment: Comment!` property.\n-\n-This is how defined types interact between each other in the GraphQL schema.\n+Another thing to note, see how `CommentRevision` is not only referenced by\n+`revision` and `revisionHistory` on the `Comment` type. The `CommentRevision`\n+also references back to its parent `Comment` via the `comment: Comment!`\n+property. This is how defined types interact between each other in the GraphQL\n+schema.\n \n-Our naming scheme is upper camel case (also known as Pascal Case) for these types:\n+Our naming scheme is upper camel case (also known as Pascal Case) for these\n+types:\n \n - Start with a capital letter\n - Following characters are lower case\n - Every new word in the type name begins with a new capital letter\n+- Acronyms are always capitalized (with the only exception being the\n+  `clientMutationId: String!` field in mutation input/payload types)\n \n-### `enum` Types\n+Some of the properties have an `!` beside their type (i.e `id: ID!`) which\n+indicates that this property is required and is non-nullable. GraphQL will\n+validate the input request for these properties and ensure they are provided\n+during the GraphQL request.\n \n-In the previous example with the `Comment` type. We also had a property called `status` which was of type `COMMENT_STATUS`.\n+You can learn more about GraphQL types in their documentation:\n \n-This is another kind of defined type, an `enum`. Most devs are familiar with enum's, but we have to cover them none-the-less.\n+[Learn GraphQL: Schemas and Types](https://graphql.org/learn/schema/)\n \n-COMMENT_STATUS:\n+#### Enumeration Types\n+\n+In the previous example with the `Comment` type. We also had a property called\n+`status` which was of type `COMMENT_STATUS`.\n+\n+This is another kind of defined type, an [Enumeration Type](https://graphql.org/learn/schema/#enumeration-types),\n+also called _enums_.\n \n ```graphql\n enum COMMENT_STATUS {\n-  \"\"\"\n-  The comment is not PREMOD, but was not applied a moderation status by a\n-  moderator.\n-  \"\"\"\n   NONE\n-\n-  \"\"\"\n-  The comment has been approved by a moderator.\n-  \"\"\"\n   APPROVED\n-\n-  \"\"\"\n-  The comment has been rejected by a moderator.\n-  \"\"\"\n   REJECTED\n-\n-  ...\n+  PREMOD\n+  SYSTEM_WITHHELD\n }\n ```\n \n-Like all enum's this definition enumerates out typed, named values that are reusable for state elsewhere on other types.\n+Like all enumeration types this definition enumerates out typed, named values\n+that are reusable for state elsewhere on other types.\n \n-Our naming scheme follows:\n+Our naming scheme for enumeration types and values in those types as:\n \n-- All capitals\n+- All capital letters\n - Spaces delimited with underscores\n \n-This is because they are treated as shared constant values across the schema. Rather than storing strings or int's to capture selected state, we prefer using enum's.\n+This is because they are treated as shared constant values across the schema.\n+Rather than storing strings or numbers to capture selected state, we prefer\n+using enumeration types because they are much more stricter in terms of value.\n \n-### Mutation Types\n+You can learn more about GraphQL Enumeration types in their documentation:\n \n-Mutations are a request to GraphQL to initiate an action which will result in a response. As such,they're broken up into an `Input` and `Payload` pair that matches a mutation's request and response pair.\n-\n-An example is the `CreateCommentInput` and `CreateCommentPayload`:\n+[Learn GraphQL: Enumeration Types](https://graphql.org/learn/schema/#enumeration-types)\n \n-CreateCommentInput:\n+#### Mutation Types\n \n-The input contains some parameters that allow us to execute the mutation. These are:\n-\n-- storyID: ID!\n-  - The story we are submitting the comment to.\n-- body\n-  - The body of our comment.\n-- nudge\n-  - Whether we should return validation prompts to the user about improper comment language.\n-- clientMutationId\n-  - An identifier used by Relay, our front-end state cache to process the mutation request.\n-\n-Note: Some of the properties have an `!` beside their type (i.e `storyID: ID!`). This indicates that the property is required and cannot be null. GraphQL will validate the input request for these properties and ensure they are provided during the GraphQL request.\n+Mutations are a request to GraphQL to initiate an action which will result in a response. As such,they're broken up into an `Input` and `Payload` pair that matches a mutation's request and response pair.\n \n-Note: The `clientMutationId` is required on all mutation inputs and payload responses. It is used by Relay (our front end state cache) to process the requests efficiently. Just always use a required `String!` type for it and put it on all your inputs and payloads and you should be fine.\n+An example is the `CreateCommentInput` and `CreateCommentPayload`:\n \n ```graphql\n \"\"\"\n CreateCommentInput provides the input for the createComment Mutation.\n \"\"\"\n input CreateCommentInput {\n+  \"\"\"\n+  storyID is the ID of the Story where we are creating a comment on.\n+  \"\"\"\n+  storyID: ID!\n+\n   \"\"\"\n   nudge when true will instead return an error related to recoverable moderation\n   faults such as a toxic comment or spam comment to provide user feedback to\n   nudge the user to correct the comment.\n   \"\"\"\n   nudge: Boolean = false\n \n-  \"\"\"\n-  storyID is the ID of the Story where we are creating a comment on.\n-  \"\"\"\n-  storyID: ID!\n-\n   \"\"\"\n   body is the Comment body, the content of the Comment.\n   \"\"\"\n@@ -287,20 +377,7 @@ input CreateCommentInput {\n   \"\"\"\n   clientMutationId: String!\n }\n-```\n-\n-CreateCommentPayload:\n-\n-The returned response for a mutation is a what we call a Payload. This usually has a response that is the full data type of whatever was modified by the earlier called mutation action.\n-\n-We have a few props from the payload, let's have a look:\n-\n-- edge\n-  - We return the full comment edge that was created by the previous input. This is done so that the mutation request can query whatever it needs to from the returned input to update state on the client.\n-- clientMutationId\n-  - An identifier used by Relay (our front-end client state cache) to process the mutation request.\n \n-```graphql\n \"\"\"\n CreateCommentPayload contains the created Comment after the createComment\n mutation.\n@@ -318,17 +395,44 @@ type CreateCommentPayload {\n }\n ```\n \n-### Access Permissions On Types\n+The `CreateCommentInput` type contains some parameters that allow us to execute\n+the mutation. These are:\n \n-Sometimes, you only want specific users to be allowed to view certain information. For instance, we have roles that are defined in our schema so we can filter who can have access to what.\n+- `storyID` - the story we are submitting the comment to.\n+- `body` - the body of our comment.\n+- `nudge` - whether we should return validation prompts to the user about\n+  improper comment language.\n+- `clientMutationId` - the identifier used by Relay to identify this mutation,\n+  our front-end state cache to process the mutation request. This is the only\n+  place in the code-base that we do not capitalize the acronym when written in\n+  camel-case, this is unfortunately due to legacy reasons from within Relay.\n \n-These roles are used with directives on our schema that GraphQL then enforces when trying to resolve requests a user makes. If the user has the specified role associated with their signed-in account, they are given access to the requested data.\n+The returned response for a mutation is a what we call a Payload, in this case\n+it's `CreateCommentPayload`. This usually has a response that is the full data\n+type of whatever was modified by the earlier called mutation action. The\n+properties on this type are:\n \n-An example of this is the `revisionHistory` on the `Comment` type.\n+- `edge` - we return the full comment edge that was created by the previous\n+  input. This is done so that the mutation request can query whatever it needs\n+  to from the returned input to update state on the client.\n+- `clientMutationId` - an identifier used by Relay (our front-end client state\n+  cache) to process the mutation request.\n \n-```graphql\n-  ...\n+#### Access Permissions On Types\n+\n+Sometimes, you only want specific users to be allowed to view certain\n+information. For instance, we have roles that are defined in our schema so we\n+can filter who can have access to what.\n \n+These roles are used with directives on our schema that GraphQL then enforces\n+when trying to resolve requests a user makes. If the user has the specified role\n+associated with their signed-in account, they are given access to the requested\n+data.\n+\n+An example of this is the `revisionHistory` on the `Comment` type:\n+\n+```graphql\n+fragment on Comment {\n   \"\"\"\n   revisionHistory stores the previous CommentRevision's, with the most recent\n   edit last.\n@@ -339,32 +443,43 @@ An example of this is the `revisionHistory` on the `Comment` type.\n       userIDField: \"author_id\"\n       permit: [SUSPENDED, BANNED, PENDING_DELETION]\n     )\n-\n-  ...\n+}\n ```\n \n-Here we see an `@auth` directive.\n-\n-- The roles that are allowed to access this information are `MODERATOR` and `ADMIN`.\n-- We let the directive know that the author of the comment is `author_id` from the `Comment` by defining the `userIDField`.\n-- We permit returning comments where the author's status is `SUSPENDED`, `BANNED`, or `PENDING_DELETION`.\n-\n-These directives can be simpler, for example the `metadata` property on the `CommentRevision`.\n+Here we see the `@auth` directive. It has documentation describing the various\n+parameters allowed located in the [`schema.graphql`](https://github.com/coralproject/talk/blob/master/src/core/server/graph/schema/schema.graphql)\n+file, we'll discuss below what this particular set of parameters can be read as:\n+\n+- The roles that are allowed to access this information are `MODERATOR` and\n+  `ADMIN` as defined by the `roles` argument.\n+- We let the directive know that the author of the comment is `author_id` from\n+  the `Comment` by defining the `userIDField`. It's a rule of thumb in Coral if\n+  the Author created the document, they have permission to view it. A Comment\n+  for example is authored by a user, with the underlying field associated with\n+  the id of that author living on the `author_id` field. You can see how this\n+  is related if you look at the resolver for the `Comment` type to see that it\n+  is based off of the `Comment` interface from `src/core/server/models/comment`.\n+- We permit returning comments when the author has the following conditions\n+  associated with their account: `SUSPENDED`, `BANNED`, or `PENDING_DELETION`.\n+\n+These directives can be simpler, for example the `metadata` property on the\n+`CommentRevision`:\n \n ```graphql\n-  ...\n-\n+fragment on CommentRevision {\n   \"\"\"\n   metadata stores details on a CommentRevision.\n   \"\"\"\n   metadata: CommentRevisionMetadata! @auth(roles: [ADMIN, MODERATOR])\n-\n-  ...\n+}\n ```\n \n-Here we see an auth directive with only roles defined. This is sufficient to make sure that the metadata property is only accessible to `ADMIN` and `MODERATOR` user roles.\n+Here we see an auth directive with only roles defined. This is sufficient to\n+make sure that the metadata property is only accessible to `ADMIN` and\n+`MODERATOR` user roles.\n \n-Note: Wondering how the user roles are defined? They're simply an `enum` that is also defined in the schema.\n+Note: Wondering how the user roles are defined? They're simply an enumeration\n+type that is also defined in the schema.\n \n ```graphql\n enum USER_ROLE {\n@@ -375,25 +490,25 @@ enum USER_ROLE {\n }\n ```\n \n-### Arrays of Items\n+#### Arrays of Items\n \n-Sometimes you don't want a singular property, your property is instead a collection of items.\n+Sometimes you don't want a singular property, your property is instead a\n+collection of items.\n \n The `revisionHistory` from the `Comment` is again useful as an example:\n \n ```graphql\n-  ...\n-\n+fragment on Comment {\n   \"\"\"\n   revisionHistory stores the previous CommentRevision's, with the most recent\n   edit last.\n   \"\"\"\n   revisionHistory: [CommentRevision!]!\n-\n-  ...\n+}\n ```\n \n-The interior type `CommentRevision` is required using the `!` and the outer array is also required using `!`.\n+The interior type `CommentRevision` is required using the `!` and the outer\n+array is also required using `!`.\n \n We do this for a couple of reasons:\n \n@@ -402,9 +517,10 @@ We do this for a couple of reasons:\n - We want the array to always be defined, if empty, we return and empty array (i.e. `[]`).\n   - This can be handled nicely in our resolvers. We simply check if the retrieved values is null or undefined and simply return an empty array in its stead.\n \n-These little tweaks aren't necessary, but they ease the consumability of our API by making the results for arrays predictable and strongly typed.\n+These little tweaks aren't necessary, but they ease the use of our API by making\n+the results for arrays predictable and strongly typed.\n \n-### Commenting Types and Properties\n+#### Documenting\n \n As you may have noticed, there is quite a bit of documentation in the schema examples listed here.\n \n@@ -413,21 +529,23 @@ We typically follow these two rules in commenting our GraphQL types:\n - Always comment the property within a type describing its purpose on its parent type\n \n   i.e. `createdAt` on our `Setting` type:\n+\n   ```graphql\n-  \"\"\"\n-  createdAt is the time that the Settings was created at.\n-  \"\"\"\n-  createdAt: Time! @auth(roles: [ADMIN])\n+  fragment on Setting {\n+    \"\"\"\n+    createdAt is the time that the Settings was created at.\n+    \"\"\"\n+    createdAt: Time! @auth(roles: [ADMIN])\n+  }\n   ```\n \n - Always comment the purpose of each type\n \n   i.e. the `Comment` type:\n+\n   ```graphql\n   \"\"\"\n   Comment is a comment left by a User on an Story or another Comment as a reply.\n   \"\"\"\n-  type Comment {\n-    ...\n-  }\n+  type Comment { }\n   ```"
    },
    {
      "sha": "6213c891fa475a0b246e858a1d04bc34f72594e6",
      "filename": "src/docs/architecture/decisions/0001-record-architecture-decisions.md",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/coralproject/talk/blob/a059e70d05faec8384ed194570b61529c61c38f8/src/docs/architecture/decisions/0001-record-architecture-decisions.md",
      "raw_url": "https://github.com/coralproject/talk/raw/a059e70d05faec8384ed194570b61529c61c38f8/src/docs/architecture/decisions/0001-record-architecture-decisions.md",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/docs/architecture/decisions/0001-record-architecture-decisions.md?ref=a059e70d05faec8384ed194570b61529c61c38f8",
      "patch": "@@ -0,0 +1,19 @@\n+# 1. Record architecture decisions\n+\n+Date: 2020-02-25\n+\n+## Status\n+\n+Accepted\n+\n+## Context\n+\n+We need to record the architectural decisions made on this project.\n+\n+## Decision\n+\n+We will use Architecture Decision Records, as [described by Michael Nygard](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions).\n+\n+## Consequences\n+\n+See Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's [adr-tools](https://github.com/npryce/adr-tools)."
    }
  ]
}
