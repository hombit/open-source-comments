{
  "sha": "226d81fcc5a1a227bbc3a363b8f5e6958e0b74de",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODoyMjZkODFmY2M1YTFhMjI3YmJjM2EzNjNiOGY1ZTY5NThlMGI3NGRl",
  "commit": {
    "author": {
      "name": "Rafael dos Santos Silva",
      "email": "xfalcox@gmail.com",
      "date": "2020-03-16T22:17:20Z"
    },
    "committer": {
      "name": "Rafael dos Santos Silva",
      "email": "xfalcox@gmail.com",
      "date": "2020-03-19T16:31:11Z"
    },
    "message": "FIX: Fix a PostgreSQL error when a draft was concurrently created\n\nMoves the new draft creation concurrency handling to PostgreSQL\nso the database doesn't error out when the draft is being created\nby multiple backends.\n\nAlso removes `retry_not_unique` parameter from Draft#set` which is\nnot called anywhere.\n\nAlso fixes a draft update not bumping the `updated_at` column.",
    "tree": {
      "sha": "a871bb5240d7dd411cdfc20d648a296ca793fd8a",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/a871bb5240d7dd411cdfc20d648a296ca793fd8a"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/226d81fcc5a1a227bbc3a363b8f5e6958e0b74de",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/226d81fcc5a1a227bbc3a363b8f5e6958e0b74de",
  "html_url": "https://github.com/discourse/discourse/commit/226d81fcc5a1a227bbc3a363b8f5e6958e0b74de",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/226d81fcc5a1a227bbc3a363b8f5e6958e0b74de/comments",
  "author": {
    "login": "xfalcox",
    "id": 1385470,
    "node_id": "MDQ6VXNlcjEzODU0NzA=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/1385470?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/xfalcox",
    "html_url": "https://github.com/xfalcox",
    "followers_url": "https://api.github.com/users/xfalcox/followers",
    "following_url": "https://api.github.com/users/xfalcox/following{/other_user}",
    "gists_url": "https://api.github.com/users/xfalcox/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/xfalcox/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/xfalcox/subscriptions",
    "organizations_url": "https://api.github.com/users/xfalcox/orgs",
    "repos_url": "https://api.github.com/users/xfalcox/repos",
    "events_url": "https://api.github.com/users/xfalcox/events{/privacy}",
    "received_events_url": "https://api.github.com/users/xfalcox/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "xfalcox",
    "id": 1385470,
    "node_id": "MDQ6VXNlcjEzODU0NzA=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/1385470?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/xfalcox",
    "html_url": "https://github.com/xfalcox",
    "followers_url": "https://api.github.com/users/xfalcox/followers",
    "following_url": "https://api.github.com/users/xfalcox/following{/other_user}",
    "gists_url": "https://api.github.com/users/xfalcox/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/xfalcox/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/xfalcox/subscriptions",
    "organizations_url": "https://api.github.com/users/xfalcox/orgs",
    "repos_url": "https://api.github.com/users/xfalcox/repos",
    "events_url": "https://api.github.com/users/xfalcox/events{/privacy}",
    "received_events_url": "https://api.github.com/users/xfalcox/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f6d6f1701f18de3589c742592e17b3ed505172c0",
      "url": "https://api.github.com/repos/discourse/discourse/commits/f6d6f1701f18de3589c742592e17b3ed505172c0",
      "html_url": "https://github.com/discourse/discourse/commit/f6d6f1701f18de3589c742592e17b3ed505172c0"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 22,
    "deletions": 19
  },
  "files": [
    {
      "sha": "8d1b5ca3645106a01d4b0a766eacf82fbc7ca682",
      "filename": "app/models/draft.rb",
      "status": "modified",
      "additions": 22,
      "deletions": 19,
      "changes": 41,
      "blob_url": "https://github.com/discourse/discourse/blob/226d81fcc5a1a227bbc3a363b8f5e6958e0b74de/app/models/draft.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/226d81fcc5a1a227bbc3a363b8f5e6958e0b74de/app/models/draft.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/draft.rb?ref=226d81fcc5a1a227bbc3a363b8f5e6958e0b74de",
      "patch": "@@ -7,7 +7,7 @@ class Draft < ActiveRecord::Base\n \n   class OutOfSequence < StandardError; end\n \n-  def self.set(user, key, sequence, data, owner = nil, retry_not_unique: true)\n+  def self.set(user, key, sequence, data, owner = nil)\n     if SiteSetting.backup_drafts_to_pm_length > 0 && SiteSetting.backup_drafts_to_pm_length < data.length\n       backup_draft(user, key, sequence, data)\n     end\n@@ -59,30 +59,33 @@ def self.set(user, key, sequence, data, owner = nil, retry_not_unique: true)\n              , data = :data\n              , revisions = revisions + 1\n              , owner = :owner\n+             , updated_at = CURRENT_TIMESTAMP\n          WHERE id = :id\n       SQL\n \n     elsif sequence != current_sequence\n       raise Draft::OutOfSequence\n     else\n-      begin\n-        Draft.create!(\n-          user_id: user.id,\n-          draft_key: key,\n-          data: data,\n-          sequence: sequence,\n-          owner: owner\n-        )\n-      rescue ActiveRecord::RecordNotUnique => e\n-        # we need this to be fast and with minimal locking, in some cases we can have a race condition\n-        # around 2 controller actions calling for draft creation at the exact same time\n-        # to avoid complex locking and a distributed mutex, since this is so rare, simply add a single retry\n-        if retry_not_unique\n-          set(user, key, sequence, data, owner, retry_not_unique: false)\n-        else\n-          raise e\n-        end\n-      end\n+      opts = {\n+        user_id: user.id,\n+        draft_key: key,\n+        data: data,\n+        sequence: sequence,\n+        owner: owner\n+      }\n+\n+      DB.exec(<<~SQL, opts)\n+        INSERT INTO drafts (user_id, draft_key, data, sequence, owner, created_at, updated_at)\n+        VALUES (:user_id, :draft_key, :data, :sequence, :owner, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n+        ON CONFLICT (user_id, draft_key) DO\n+        UPDATE\n+        SET\n+          sequence = :sequence,\n+          data = :data,\n+          revisions = drafts.revisions + 1,\n+          owner = :owner,\n+          updated_at = CURRENT_TIMESTAMP\n+      SQL\n     end\n \n     sequence"
    }
  ]
}
