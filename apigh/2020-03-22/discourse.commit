{
  "sha": "3189dab622dead97d73651af99f2cf23ed6e188f",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODozMTg5ZGFiNjIyZGVhZDk3ZDczNjUxYWY5OWYyY2YyM2VkNmUxODhm",
  "commit": {
    "author": {
      "name": "Jeff Wong",
      "email": "awole20@gmail.com",
      "date": "2020-03-21T20:24:49Z"
    },
    "committer": {
      "name": "Jeff Wong",
      "email": "awole20@gmail.com",
      "date": "2020-03-21T21:34:25Z"
    },
    "message": "FIX: correctly remove authentication_data cookie on oauth login flow\n\nAdditionally correctly handle cookie path for authentication_data\n\nThere were two bugs that exposed an interesting case where two discourse\ninstances hosted across two subfolder installs in the same domain\nwith oauth may clash and cause strange redirection on first login:\n\nLog in to example.com/forum1. authentication_data cookie is set with path /\nOn the first redirection, the current authentication_data cookie is not unset.\nLog in to example.com/forum2. In this case, the authentication_data cookie\nis already set from forum1 - the initial page load will incorrectly redirect\nthe user to the redirect URL from the already-stored cookie, to /forum1.\n\nThis removes this issue by:\n\n* Setting the cookie for the correct path, and not having it on root\n* Correctly removing the cookie on first login",
    "tree": {
      "sha": "af054d01c9de04b11fb073609972e8dc53dff93c",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/af054d01c9de04b11fb073609972e8dc53dff93c"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/3189dab622dead97d73651af99f2cf23ed6e188f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/3189dab622dead97d73651af99f2cf23ed6e188f",
  "html_url": "https://github.com/discourse/discourse/commit/3189dab622dead97d73651af99f2cf23ed6e188f",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/3189dab622dead97d73651af99f2cf23ed6e188f/comments",
  "author": {
    "login": "featheredtoast",
    "id": 1322534,
    "node_id": "MDQ6VXNlcjEzMjI1MzQ=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/1322534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/featheredtoast",
    "html_url": "https://github.com/featheredtoast",
    "followers_url": "https://api.github.com/users/featheredtoast/followers",
    "following_url": "https://api.github.com/users/featheredtoast/following{/other_user}",
    "gists_url": "https://api.github.com/users/featheredtoast/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/featheredtoast/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/featheredtoast/subscriptions",
    "organizations_url": "https://api.github.com/users/featheredtoast/orgs",
    "repos_url": "https://api.github.com/users/featheredtoast/repos",
    "events_url": "https://api.github.com/users/featheredtoast/events{/privacy}",
    "received_events_url": "https://api.github.com/users/featheredtoast/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "featheredtoast",
    "id": 1322534,
    "node_id": "MDQ6VXNlcjEzMjI1MzQ=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/1322534?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/featheredtoast",
    "html_url": "https://github.com/featheredtoast",
    "followers_url": "https://api.github.com/users/featheredtoast/followers",
    "following_url": "https://api.github.com/users/featheredtoast/following{/other_user}",
    "gists_url": "https://api.github.com/users/featheredtoast/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/featheredtoast/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/featheredtoast/subscriptions",
    "organizations_url": "https://api.github.com/users/featheredtoast/orgs",
    "repos_url": "https://api.github.com/users/featheredtoast/repos",
    "events_url": "https://api.github.com/users/featheredtoast/events{/privacy}",
    "received_events_url": "https://api.github.com/users/featheredtoast/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c97244ca115c6e8d287d9c4e6033bf3e1d084f70",
      "url": "https://api.github.com/repos/discourse/discourse/commits/c97244ca115c6e8d287d9c4e6033bf3e1d084f70",
      "html_url": "https://github.com/discourse/discourse/commit/c97244ca115c6e8d287d9c4e6033bf3e1d084f70"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 38,
    "deletions": 3
  },
  "files": [
    {
      "sha": "4bcd8c8f5fdae140fcb41ead9ddd8a668bae0639",
      "filename": "app/controllers/users/omniauth_callbacks_controller.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/3189dab622dead97d73651af99f2cf23ed6e188f/app/controllers/users/omniauth_callbacks_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/3189dab622dead97d73651af99f2cf23ed6e188f/app/controllers/users/omniauth_callbacks_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/users/omniauth_callbacks_controller.rb?ref=3189dab622dead97d73651af99f2cf23ed6e188f",
      "patch": "@@ -74,7 +74,10 @@ def complete\n       @auth_result.authenticator_name = authenticator.name\n       complete_response_data\n       cookies['_bypass_cache'] = true\n-      cookies[:authentication_data] = @auth_result.to_client_hash.to_json\n+      cookies[:authentication_data] = {\n+        value: @auth_result.to_client_hash.to_json,\n+        path: Discourse.base_uri(\"/\")\n+      }\n       redirect_to @origin\n     end\n   end"
    },
    {
      "sha": "0b037d521f88866fd0f08194fbe919546af2995a",
      "filename": "app/views/layouts/application.html.erb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/3189dab622dead97d73651af99f2cf23ed6e188f/app/views/layouts/application.html.erb",
      "raw_url": "https://github.com/discourse/discourse/raw/3189dab622dead97d73651af99f2cf23ed6e188f/app/views/layouts/application.html.erb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/views/layouts/application.html.erb?ref=3189dab622dead97d73651af99f2cf23ed6e188f",
      "patch": "@@ -58,8 +58,8 @@\n \n     <%= tag.meta id: 'data-discourse-setup', data: client_side_setup_data %>\n \n-    <%- if !current_user && cookies[:authentication_data] %>\n-      <meta id=\"data-authentication\" data-authentication-data=\"<%= cookies.delete(:authentication_data) %>\">\n+    <%- if !current_user && (data = cookies.delete(:authentication_data, path: Discourse.base_uri(\"/\"))) %>\n+      <meta id=\"data-authentication\" data-authentication-data=\"<%= data %>\">\n     <%- end %>\n   </head>\n "
    },
    {
      "sha": "4d551942f6b020fdada9c516987eba8ca6327d63",
      "filename": "spec/requests/application_controller_spec.rb",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/3189dab622dead97d73651af99f2cf23ed6e188f/spec/requests/application_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/3189dab622dead97d73651af99f2cf23ed6e188f/spec/requests/application_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/application_controller_spec.rb?ref=3189dab622dead97d73651af99f2cf23ed6e188f",
      "patch": "@@ -84,6 +84,14 @@\n         expect(response).to redirect_to(\"/login\")\n       end\n     end\n+\n+    it 'contains authentication data when cookies exist' do\n+      COOKIE_DATA = \"someauthenticationdata\"\n+      cookies['authentication_data'] = COOKIE_DATA\n+      get '/login'\n+      expect(response.status).to eq(200)\n+      expect(response.body).to include(\"data-authentication-data=\\\"#{COOKIE_DATA }\\\"\")\n+    end\n   end\n \n   describe '#redirect_to_second_factor_if_required' do"
    },
    {
      "sha": "e604a89aba4fa0c22365f2e744f3e24d56486da4",
      "filename": "spec/requests/omniauth_callbacks_controller_spec.rb",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/discourse/discourse/blob/3189dab622dead97d73651af99f2cf23ed6e188f/spec/requests/omniauth_callbacks_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/3189dab622dead97d73651af99f2cf23ed6e188f/spec/requests/omniauth_callbacks_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/omniauth_callbacks_controller_spec.rb?ref=3189dab622dead97d73651af99f2cf23ed6e188f",
      "patch": "@@ -269,6 +269,30 @@ def enabled?\n         expect(user.email_confirmed?).to eq(true)\n       end\n \n+      it 'should return the authenticated response with the correct path for subfolders' do\n+        set_subfolder \"/forum\"\n+        events = DiscourseEvent.track_events do\n+          get \"/auth/google_oauth2/callback.json\"\n+        end\n+\n+        expect(response.headers[\"Set-Cookie\"].match(/^authentication_data=.*; path=\\/forum/)).not_to eq(nil)\n+\n+        expect(events.map { |event| event[:event_name] }).to include(:user_logged_in, :user_first_logged_in)\n+\n+        expect(response.status).to eq(302)\n+\n+        data = JSON.parse(response.cookies[\"authentication_data\"])\n+\n+        expect(data[\"authenticated\"]).to eq(true)\n+        expect(data[\"awaiting_activation\"]).to eq(false)\n+        expect(data[\"awaiting_approval\"]).to eq(false)\n+        expect(data[\"not_allowed_from_ip_address\"]).to eq(false)\n+        expect(data[\"admin_not_allowed_from_ip_address\"]).to eq(false)\n+\n+        user.reload\n+        expect(user.email_confirmed?).to eq(true)\n+      end\n+\n       it \"should confirm email even when the tokens are expired\" do\n         user.email_tokens.update_all(confirmed: false, expired: true)\n "
    }
  ]
}
