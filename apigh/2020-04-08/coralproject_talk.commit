{
  "sha": "6711f09a79b06950c28df551c63276fc5ff8be04",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6NjcxMWYwOWE3OWIwNjk1MGMyOGRmNTUxYzYzMjc2ZmM1ZmY4YmUwNA==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2020-04-06T19:04:05Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-04-06T19:04:05Z"
    },
    "message": "[CORL-1001] Wordlist Fixes (#2920)\n\n* fix: improve wordlist highlighting and perf\r\n\r\n* fix: updated tests\r\n\r\n* fix: implmeneted new regexp lib/patterns\r\n\r\n* fix: improve comment body css\r\n\r\n* fix: take into account the tree shaking is disabled\r\n\r\nSee: https://github.com/webpack/webpack/issues/7094\r\n\r\nCo-authored-by: Chi Vinh Le <vinh@vinh.tech>\r\nCo-authored-by: Kim Gardner <kgardnr@gmail.com>",
    "tree": {
      "sha": "3ee7d878f285cee84d1fcfd63c9e53de7c3b1e91",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/3ee7d878f285cee84d1fcfd63c9e53de7c3b1e91"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/6711f09a79b06950c28df551c63276fc5ff8be04",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJei30lCRBK7hj4Ov3rIwAAdHIIAJmShCBXHG7YrceUQWJb/DCh\n5Bg/rmTHVMsiFr+iIAkDnxLUhJRehStVtNGzqD+W6AcThuuE3b9yOqtfwdHNrmQ9\ngfYp6hxkwjb82YyZMdGtjUmZ26TCPq0gWw8XQz+XFuQDUHjgm47hwP0UCNbnRidy\nq4w8eWqLfoy2+oT3XjZETbmSgD2X8UyscktiqSH700STzVOT/Nrvdrn2/WYLB+Oa\nG6MENFrccU0vi4YqZTpSDX9cpPPHmw7Byv0/geneshrkJJ6OlbB+AxVfHVvbvQD2\nY6uqc5pFNuX6my98ddWHor0zjPc/A/Wc3Mi66BTNBAqCY9ToDlKKL3GiMpwepYU=\n=TZs5\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 3ee7d878f285cee84d1fcfd63c9e53de7c3b1e91\nparent 8966a8201b3a911476ece5b9cff6d7726911b97f\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1586199845 +0000\ncommitter GitHub <noreply@github.com> 1586199845 -0400\n\n[CORL-1001] Wordlist Fixes (#2920)\n\n* fix: improve wordlist highlighting and perf\r\n\r\n* fix: updated tests\r\n\r\n* fix: implmeneted new regexp lib/patterns\r\n\r\n* fix: improve comment body css\r\n\r\n* fix: take into account the tree shaking is disabled\r\n\r\nSee: https://github.com/webpack/webpack/issues/7094\r\n\r\nCo-authored-by: Chi Vinh Le <vinh@vinh.tech>\r\nCo-authored-by: Kim Gardner <kgardnr@gmail.com>"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/6711f09a79b06950c28df551c63276fc5ff8be04",
  "html_url": "https://github.com/coralproject/talk/commit/6711f09a79b06950c28df551c63276fc5ff8be04",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/6711f09a79b06950c28df551c63276fc5ff8be04/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8966a8201b3a911476ece5b9cff6d7726911b97f",
      "url": "https://api.github.com/repos/coralproject/talk/commits/8966a8201b3a911476ece5b9cff6d7726911b97f",
      "html_url": "https://github.com/coralproject/talk/commit/8966a8201b3a911476ece5b9cff6d7726911b97f"
    }
  ],
  "stats": {
    "total": 801,
    "additions": 616,
    "deletions": 185
  },
  "files": [
    {
      "sha": "82b74c83ac3f49f5e1d982aeb69a4f6f3d408c27",
      "filename": "package-lock.json",
      "status": "modified",
      "additions": 22,
      "deletions": 9,
      "changes": 31,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/package-lock.json",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/package-lock.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package-lock.json?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -3217,7 +3217,6 @@\n       \"version\": \"7.8.3\",\n       \"resolved\": \"https://registry.npmjs.org/@babel/runtime-corejs3/-/runtime-corejs3-7.8.3.tgz\",\n       \"integrity\": \"sha512-lrIU4aVbmlM/wQPzhEvzvNJskKyYptuXb0fGC0lTQTupTOYtR2Vqbu6/jf8vTr4M8Wt1nIzxVrSvPI5qESa/xA==\",\n-      \"dev\": true,\n       \"requires\": {\n         \"core-js-pure\": \"^3.0.0\",\n         \"regenerator-runtime\": \"^0.13.2\"\n@@ -5760,6 +5759,12 @@\n         \"@types/node\": \"*\"\n       }\n     },\n+    \"@types/xregexp\": {\n+      \"version\": \"4.3.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@types/xregexp/-/xregexp-4.3.0.tgz\",\n+      \"integrity\": \"sha512-3gJTS9gt27pS7U9q5IVqo4YvKSlkf2ck8ish6etuDj6LIRxkL/2Y8RMUtK/QzvE1Yv2zwWV5yemI2BS0GGGFnA==\",\n+      \"dev\": true\n+    },\n     \"@types/yargs\": {\n       \"version\": \"12.0.12\",\n       \"resolved\": \"https://registry.npmjs.org/@types/yargs/-/yargs-12.0.12.tgz\",\n@@ -10721,8 +10726,7 @@\n     \"core-js-pure\": {\n       \"version\": \"3.6.4\",\n       \"resolved\": \"https://registry.npmjs.org/core-js-pure/-/core-js-pure-3.6.4.tgz\",\n-      \"integrity\": \"sha512-epIhRLkXdgv32xIUFaaAry2wdxZYBi6bgM7cB136dzzXXa+dFyRLTZeLUJxnd8ShrmyVXBub63n2NHo2JAt8Cw==\",\n-      \"dev\": true\n+      \"integrity\": \"sha512-epIhRLkXdgv32xIUFaaAry2wdxZYBi6bgM7cB136dzzXXa+dFyRLTZeLUJxnd8ShrmyVXBub63n2NHo2JAt8Cw==\"\n     },\n     \"core-util-is\": {\n       \"version\": \"1.0.2\",\n@@ -32077,8 +32081,7 @@\n     \"regenerator-runtime\": {\n       \"version\": \"0.13.3\",\n       \"resolved\": \"https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.3.tgz\",\n-      \"integrity\": \"sha512-naKIZz2GQ8JWh///G7L3X6LaQUAMp2lvb1rvwwsURe/VXwD6VMfr+/1NuNw3ag8v2kY1aQ/go5SNn79O9JU7yw==\",\n-      \"dev\": true\n+      \"integrity\": \"sha512-naKIZz2GQ8JWh///G7L3X6LaQUAMp2lvb1rvwwsURe/VXwD6VMfr+/1NuNw3ag8v2kY1aQ/go5SNn79O9JU7yw==\"\n     },\n     \"regenerator-transform\": {\n       \"version\": \"0.13.4\",\n@@ -38138,6 +38141,14 @@\n           \"dev\": true,\n           \"requires\": {\n             \"xregexp\": \"4.0.0\"\n+          },\n+          \"dependencies\": {\n+            \"xregexp\": {\n+              \"version\": \"4.0.0\",\n+              \"resolved\": \"https://registry.npmjs.org/xregexp/-/xregexp-4.0.0.tgz\",\n+              \"integrity\": \"sha512-PHyM+sQouu7xspQQwELlGwwd05mXUFqwFYfqPO0cC7x4fxyHnnuetmQr6CjJiafIDoH4MogHb9dOoJzR/Y4rFg==\",\n+              \"dev\": true\n+            }\n           }\n         },\n         \"del\": {\n@@ -39365,10 +39376,12 @@\n       \"integrity\": \"sha512-tGkGJkN8XqCod7OT+EvGYK5Z4SfDQGD30zAa58OcnAa0RRWgzUEK72tkXhsX1FZd+rgnhRxFtmO+ihkp8LHSkw==\"\n     },\n     \"xregexp\": {\n-      \"version\": \"4.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/xregexp/-/xregexp-4.0.0.tgz\",\n-      \"integrity\": \"sha512-PHyM+sQouu7xspQQwELlGwwd05mXUFqwFYfqPO0cC7x4fxyHnnuetmQr6CjJiafIDoH4MogHb9dOoJzR/Y4rFg==\",\n-      \"dev\": true\n+      \"version\": \"4.3.0\",\n+      \"resolved\": \"https://registry.npmjs.org/xregexp/-/xregexp-4.3.0.tgz\",\n+      \"integrity\": \"sha512-7jXDIFXh5yJ/orPn4SXjuVrWWoi4Cr8jfV1eHv9CixKSbU+jY4mxfrBwAuDvupPNKpMUY+FeIqsVw/JLT9+B8g==\",\n+      \"requires\": {\n+        \"@babel/runtime-corejs3\": \"^7.8.3\"\n+      }\n     },\n     \"xtend\": {\n       \"version\": \"4.0.1\","
    },
    {
      "sha": "b42b5e3012336c4f37426573b788accac836bcd9",
      "filename": "package.json",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/package.json",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/package.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package.json?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -4,6 +4,7 @@\n   \"author\": \"The Coral Project\",\n   \"homepage\": \"https://coralproject.net/\",\n   \"sideEffects\": [\n+    \"*.css.ts\",\n     \"*.css\"\n   ],\n   \"repository\": {\n@@ -140,7 +141,8 @@\n     \"tsscmp\": \"^1.0.6\",\n     \"url-regex\": \"^5.0.0\",\n     \"uuid\": \"^3.3.3\",\n-    \"verror\": \"^1.10.0\"\n+    \"verror\": \"^1.10.0\",\n+    \"xregexp\": \"^4.3.0\"\n   },\n   \"devDependencies\": {\n     \"@babel/core\": \"^7.8.3\",\n@@ -240,6 +242,7 @@\n     \"@types/webpack-bundle-analyzer\": \"^2.13.1\",\n     \"@types/webpack-dev-server\": \"^3.1.5\",\n     \"@types/ws\": \"^5.1.2\",\n+    \"@types/xregexp\": \"^4.3.0\",\n     \"@typescript-eslint/eslint-plugin\": \"2.3.3\",\n     \"@typescript-eslint/eslint-plugin-tslint\": \"2.3.3\",\n     \"@typescript-eslint/parser\": \"2.3.3\","
    },
    {
      "sha": "4039216480902f042e676a3760ab9e99b0bcd6b2",
      "filename": "src/core/client/admin/components/Comment/CommentContent.css",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/Comment/CommentContent.css",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/Comment/CommentContent.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/components/Comment/CommentContent.css?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -12,12 +12,12 @@ $comment-link-active: var(--v2-palette-primary-darkest);\n   color: $comment-content;\n   overflow-wrap: break-word;\n \n-  & * bold,\n-  & * strong {\n+  b,\n+  strong {\n     font-weight: var(--v2-font-weight-primary-bold);\n   }\n-  & * italic,\n-  & * em {\n+  i,\n+  em {\n     font-style: italic;\n   }\n   blockquote {\n@@ -50,3 +50,7 @@ $comment-link-active: var(--v2-palette-primary-darkest);\n     }\n   }\n }\n+\n+.highlight {\n+  white-space: pre-wrap;\n+}"
    },
    {
      "sha": "0dadae902217fbb80ba15ba675d6ecda2080e344",
      "filename": "src/core/client/admin/components/Comment/CommentContent.spec.tsx",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/Comment/CommentContent.spec.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/Comment/CommentContent.spec.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/components/Comment/CommentContent.spec.tsx?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -16,6 +16,7 @@ it(\"renders correctly\", () => {\n     },\n     className: \"custom\",\n     children: \"Hello <b>Bob</b>, you bad guy\",\n+    highlight: true,\n   };\n   const renderer = createRenderer();\n   renderer.render(<CommentContent {...props} />);\n@@ -33,6 +34,26 @@ it(\"renders empty words correctly\", () => {\n     },\n     className: \"custom\",\n     children: \"Hello <b>Bob</b>, you bad guy\",\n+    highlight: true,\n+  };\n+  const renderer = createRenderer();\n+  renderer.render(<CommentContent {...props} />);\n+  expect(renderer.getRenderOutput()).toMatchSnapshot();\n+});\n+\n+it(\"renders correctly even if it has consecutive banned words on comments\", () => {\n+  const props: PropTypesOf<typeof CommentContent> = {\n+    phrases: {\n+      locale: \"en-US\",\n+      wordList: {\n+        suspect: [\"worse\"],\n+        banned: [\"bad\"],\n+      },\n+    },\n+    className: \"custom\",\n+    children:\n+      \"This is a very long comment with bad words. Let's try bad and bad. Now bad bad.\\nBad BAD bad.\\n\",\n+    highlight: true,\n   };\n   const renderer = createRenderer();\n   renderer.render(<CommentContent {...props} />);"
    },
    {
      "sha": "933cb90dcdc0428c1f2a5ff8d5cd433a90fb692a",
      "filename": "src/core/client/admin/components/Comment/CommentContent.tsx",
      "status": "modified",
      "additions": 40,
      "deletions": 56,
      "changes": 96,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/Comment/CommentContent.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/Comment/CommentContent.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/components/Comment/CommentContent.tsx?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -1,7 +1,12 @@\n import cn from \"classnames\";\n import React, { FunctionComponent, useMemo } from \"react\";\n+import striptags from \"striptags\";\n \n-import { getPhrasesRegExp, GetPhrasesRegExpOptions } from \"coral-admin/helpers\";\n+import {\n+  getPhrasesRegExp,\n+  GetPhrasesRegExpOptions,\n+  markHTMLNode,\n+} from \"coral-admin/helpers\";\n import { createPurify } from \"coral-common/utils/purify\";\n \n import styles from \"./CommentContent.css\";\n@@ -15,81 +20,60 @@ interface Props {\n   className?: string;\n   children: string | React.ReactElement;\n   phrases: GetPhrasesRegExpOptions;\n-}\n-\n-function escapeHTML(unsafe: string) {\n-  return unsafe\n-    .replace(/&/g, \"&amp;\")\n-    .replace(/</g, \"&lt;\")\n-    .replace(/>/g, \"&gt;\")\n-    .replace(/\"/g, \"&quot;\")\n-    .replace(/'/g, \"&#039;\");\n-}\n-\n-// markPhrasesHTML looks for `supsect` and `banned` words inside `text` given\n-// the settings applied for the locale and highlights them by returning an HTML\n-// string.\n-function markPhrasesHTML(text: string, expression: RegExp) {\n-  const tokens = text.split(expression);\n-  if (tokens.length === 1) {\n-    return text;\n-  }\n-  return tokens\n-    .map((token, i) =>\n-      // Using our Regexp patterns it returns tokens arranged this way\n-      // [STRING_WITH_NO_MATCH, NEW_WORD_DELIMITER, MATCHED_WORD, ...].\n-      // This pattern repeats throughout. Next line will mark MATCHED_WORD\n-      // and escape all tokens.\n-      i % 3 === 2 ? `<mark>${escapeHTML(token)}</mark>` : escapeHTML(token)\n-    )\n-    .join(\"\");\n-}\n-\n-// markHTMLNode manipulates the node by looking for #text nodes and adding markers\n-// for `supsectWords` and `bannedWords`.\n-function markHTMLNode(parentNode: Node, expression: RegExp) {\n-  parentNode.childNodes.forEach(node => {\n-    if (node.nodeName === \"#text\") {\n-      const newContent = markPhrasesHTML(node.textContent!, expression);\n-      if (newContent !== node.textContent) {\n-        const newNode = document.createElement(\"span\");\n-        newNode.innerHTML = newContent;\n-        parentNode.replaceChild(newNode, node);\n-      }\n-    } else {\n-      markHTMLNode(node, expression);\n-    }\n-  });\n+  highlight?: boolean;\n }\n \n const CommentContent: FunctionComponent<Props> = ({\n   phrases,\n   className,\n   children,\n+  highlight = false,\n }) => {\n   // Cache the expression used via memo. This will reduce duplicate renders of\n   // this comment content when the children change but the phrase configuration\n   // does not change. The regExp is already cached on a deeper level\n   // automatically, this is just lessening that impact further.\n-  const expression = useMemo(() => getPhrasesRegExp(phrases), [phrases]);\n+  const expression = useMemo(() => {\n+    // If we aren't in highlight mode for this comment, don't even attempt to\n+    // generate the expression.\n+    if (!highlight) {\n+      return null;\n+    }\n+\n+    return getPhrasesRegExp(phrases);\n+  }, [phrases, highlight]);\n+\n+  // Cache the parsed comment node. If the children cannot be parsed, this will\n+  // be null.\n+  const parsed = useMemo(() => {\n+    if (typeof children !== \"string\") {\n+      return null;\n+    }\n+\n+    // Sanitize the input for display.\n+    let html = purify.sanitize(children);\n+    if (highlight) {\n+      html = striptags(html, [\"a\"]);\n+    }\n \n-  if (typeof children === \"string\") {\n-    // We create a Shadow DOM Tree with the HTML body content and\n-    // use it as a parser.\n+    // We create a Shadow DOM Tree with the HTML body content and use it as a\n+    // parser.\n     const node = document.createElement(\"div\");\n-    node.innerHTML = purify.sanitize(children);\n+    node.innerHTML = html;\n \n+    // If the expression is available, then mark the nodes.\n     if (expression) {\n-      // Then we traverse it recursively and manipulate it to highlight suspect words\n-      // and banned words.\n       markHTMLNode(node, expression);\n     }\n \n-    // Finally we render the content of the Shadow DOM Tree\n+    return node;\n+  }, [children, expression, highlight]);\n+\n+  if (parsed) {\n     return (\n       <div\n-        className={cn(className, styles.root)}\n-        dangerouslySetInnerHTML={{ __html: node.innerHTML }}\n+        className={cn(className, styles.root, highlight && styles.highlight)}\n+        dangerouslySetInnerHTML={{ __html: parsed.innerHTML }}\n       />\n     );\n   }"
    },
    {
      "sha": "5d54e8adae0978fccf700516009829d3cf26a9a0",
      "filename": "src/core/client/admin/components/Comment/__snapshots__/CommentContent.spec.tsx.snap",
      "status": "modified",
      "additions": 17,
      "deletions": 4,
      "changes": 21,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/Comment/__snapshots__/CommentContent.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/Comment/__snapshots__/CommentContent.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/components/Comment/__snapshots__/CommentContent.spec.tsx.snap?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -2,21 +2,34 @@\n \n exports[`renders correctly 1`] = `\n <div\n-  className=\"custom CommentContent-root\"\n+  className=\"custom CommentContent-root CommentContent-highlight\"\n   dangerouslySetInnerHTML={\n     Object {\n-      \"__html\": \"Hello <b>Bob</b><span>, you <mark>bad</mark> guy</span>\",\n+      \"__html\": \"<span>Hello Bob, you <mark>bad</mark> guy</span>\",\n+    }\n+  }\n+/>\n+`;\n+\n+exports[`renders correctly even if it has consecutive banned words on comments 1`] = `\n+<div\n+  className=\"custom CommentContent-root CommentContent-highlight\"\n+  dangerouslySetInnerHTML={\n+    Object {\n+      \"__html\": \"<span>This is a very long comment with <mark>bad</mark> words. Let's try <mark>bad</mark> and <mark>bad</mark>. Now <mark>bad</mark> bad.\n+<mark>Bad</mark> BAD <mark>bad</mark>.\n+</span>\",\n     }\n   }\n />\n `;\n \n exports[`renders empty words correctly 1`] = `\n <div\n-  className=\"custom CommentContent-root\"\n+  className=\"custom CommentContent-root CommentContent-highlight\"\n   dangerouslySetInnerHTML={\n     Object {\n-      \"__html\": \"Hello <b>Bob</b>, you bad guy\",\n+      \"__html\": \"Hello Bob, you bad guy\",\n     }\n   }\n />"
    },
    {
      "sha": "3b6cb493cb8ff3bfca50ec45fc0814e204a315c8",
      "filename": "src/core/client/admin/components/ModerateCard/ModerateCard.tsx",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/ModerateCard/ModerateCard.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/ModerateCard/ModerateCard.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/components/ModerateCard/ModerateCard.tsx?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -37,6 +37,7 @@ interface Props {\n   username: string;\n   createdAt: string;\n   body: string;\n+  highlight?: boolean;\n   inReplyTo?: {\n     id: string;\n     username: string | null;\n@@ -82,6 +83,7 @@ const ModerateCard: FunctionComponent<Props> = ({\n   username,\n   createdAt,\n   body,\n+  highlight = false,\n   inReplyTo,\n   comment,\n   settings,\n@@ -222,7 +224,11 @@ const ModerateCard: FunctionComponent<Props> = ({\n             )}\n           </div>\n           <div className={styles.contentArea}>\n-            <CommentContent phrases={phrases} className={styles.content}>\n+            <CommentContent\n+              highlight={highlight}\n+              phrases={phrases}\n+              className={styles.content}\n+            >\n               {commentBody}\n             </CommentContent>\n             <div className={styles.viewContext}>"
    },
    {
      "sha": "13699b7ab5546c34b11e935f8cd260c8bc52994b",
      "filename": "src/core/client/admin/components/ModerateCard/ModerateCardContainer.tsx",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/ModerateCard/ModerateCardContainer.tsx",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/ModerateCard/ModerateCardContainer.tsx",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/components/ModerateCard/ModerateCardContainer.tsx?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -215,6 +215,16 @@ const ModerateCardContainer: FunctionComponent<Props> = ({\n     },\n     [comment]\n   );\n+\n+  // Only highlight comments that have been flagged for containing a banned or\n+  // suspect word.\n+  const highlight = comment.revision\n+    ? comment.revision.actionCounts.flag.reasons.COMMENT_DETECTED_BANNED_WORD +\n+        comment.revision.actionCounts.flag.reasons\n+          .COMMENT_DETECTED_SUSPECT_WORD >\n+      0\n+    : false;\n+\n   return (\n     <>\n       <FadeInTransition active={Boolean(comment.enteredLive)}>\n@@ -227,6 +237,7 @@ const ModerateCardContainer: FunctionComponent<Props> = ({\n           }\n           createdAt={comment.createdAt}\n           body={comment.body!}\n+          highlight={highlight}\n           inReplyTo={comment.parent && comment.parent.author}\n           comment={comment}\n           settings={settings}\n@@ -296,6 +307,16 @@ const enhanced = withFragmentContainer<Props>({\n       statusLiveUpdated\n       createdAt\n       body\n+      revision {\n+        actionCounts {\n+          flag {\n+            reasons {\n+              COMMENT_DETECTED_BANNED_WORD\n+              COMMENT_DETECTED_SUSPECT_WORD\n+            }\n+          }\n+        }\n+      }\n       tags {\n         code\n       }"
    },
    {
      "sha": "3a4107f45cefc95b35a7f9e3200b5ef1bc0d8b7f",
      "filename": "src/core/client/admin/components/ModerateCard/__snapshots__/ModerateCard.spec.tsx.snap",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/ModerateCard/__snapshots__/ModerateCard.spec.tsx.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/components/ModerateCard/__snapshots__/ModerateCard.spec.tsx.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/components/ModerateCard/__snapshots__/ModerateCard.spec.tsx.snap?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -44,6 +44,7 @@ exports[`renders approved correctly 1`] = `\n       >\n         <CommentContent\n           className=\"ModerateCard-content\"\n+          highlight={false}\n           phrases={\n             Object {\n               \"locale\": \"en-US\",\n@@ -178,6 +179,7 @@ exports[`renders correctly 1`] = `\n       >\n         <CommentContent\n           className=\"ModerateCard-content\"\n+          highlight={false}\n           phrases={\n             Object {\n               \"locale\": \"en-US\",\n@@ -312,6 +314,7 @@ exports[`renders dangling correctly 1`] = `\n       >\n         <CommentContent\n           className=\"ModerateCard-content\"\n+          highlight={false}\n           phrases={\n             Object {\n               \"locale\": \"en-US\",\n@@ -446,6 +449,7 @@ exports[`renders rejected correctly 1`] = `\n       >\n         <CommentContent\n           className=\"ModerateCard-content\"\n+          highlight={false}\n           phrases={\n             Object {\n               \"locale\": \"en-US\",\n@@ -589,6 +593,7 @@ exports[`renders reply correctly 1`] = `\n       >\n         <CommentContent\n           className=\"ModerateCard-content\"\n+          highlight={false}\n           phrases={\n             Object {\n               \"locale\": \"en-US\",\n@@ -723,6 +728,7 @@ exports[`renders story info 1`] = `\n       >\n         <CommentContent\n           className=\"ModerateCard-content\"\n+          highlight={false}\n           phrases={\n             Object {\n               \"locale\": \"en-US\",\n@@ -895,6 +901,7 @@ exports[`renders tombstoned when comment is deleted 1`] = `\n       >\n         <CommentContent\n           className=\"ModerateCard-content\"\n+          highlight={false}\n           phrases={\n             Object {\n               \"locale\": \"en-US\","
    },
    {
      "sha": "df303534cfd9b5550c2f6bedb7e93b3ebdd05d34",
      "filename": "src/core/client/admin/helpers/getPhrasesRegExp.ts",
      "status": "modified",
      "additions": 30,
      "deletions": 8,
      "changes": 38,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/helpers/getPhrasesRegExp.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/helpers/getPhrasesRegExp.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/helpers/getPhrasesRegExp.ts?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -1,5 +1,7 @@\n+import { lowerCase, uniqBy } from \"lodash\";\n+\n import { LanguageCode } from \"coral-common/helpers\";\n-import { createWordListRegExp } from \"coral-common/utils\";\n+import createWordListRegExp from \"coral-common/utils/createWordListRegExp\";\n \n export interface GetPhrasesRegExpOptions {\n   locale: string;\n@@ -17,20 +19,35 @@ export function getPhrasesRegExp({\n     return null;\n   }\n \n-  return createWordListRegExp(locale as LanguageCode, [...banned, ...suspect]);\n+  // Because the banned and suspect word lists may sometimes overlap, we should\n+  // make this list as short as possible before compiling it into a RegExp.\n+  const phrases = uniqBy<string>([...banned, ...suspect], lowerCase);\n+\n+  // The locale is passed down to us from the Graph, we can cast it to a\n+  // LanguageCode.\n+  return createWordListRegExp(locale as LanguageCode, phrases);\n }\n \n-// cache is used as a global validator to the cached RegExp used by the\n+// Cache is used as a global validator to the cached RegExp used by the\n // application. We expect that generally, there is only ever one word list used\n // by the client at a time, so this ensures that we only re-create the word list\n // if we must.\n-const cache = {\n+interface Cache {\n+  keys: {\n+    locale: string;\n+    suspect: ReadonlyArray<string>;\n+    banned: ReadonlyArray<string>;\n+  };\n+  value: RegExp | null;\n+}\n+\n+const cache: Cache = {\n   keys: {\n     locale: \"\",\n-    suspect: [] as ReadonlyArray<string>,\n-    banned: [] as ReadonlyArray<string>,\n+    suspect: [],\n+    banned: [],\n   },\n-  value: null as RegExp | null,\n+  value: null,\n };\n \n export default function(options: GetPhrasesRegExpOptions) {\n@@ -57,7 +74,12 @@ export default function(options: GetPhrasesRegExpOptions) {\n \n   // If the cache is expired, or the value doesn't exist, regenerate it.\n   if (expired) {\n-    cache.value = getPhrasesRegExp(options);\n+    try {\n+      cache.value = getPhrasesRegExp(options);\n+    } catch (err) {\n+      window.console.error(err);\n+      return null;\n+    }\n   }\n \n   return cache.value;"
    },
    {
      "sha": "16e48a31f8e119bbdc44d93ff343721c22ba8edb",
      "filename": "src/core/client/admin/helpers/index.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/helpers/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/helpers/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/helpers/index.ts?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -3,3 +3,4 @@ export {\n   default as getPhrasesRegExp,\n   GetPhrasesRegExpOptions,\n } from \"./getPhrasesRegExp\";\n+export { default as markHTMLNode } from \"./markHTMLNode\";"
    },
    {
      "sha": "e1ffd617b4a420382b83353539a995d087f3b74a",
      "filename": "src/core/client/admin/helpers/markHTMLNode.ts",
      "status": "added",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/helpers/markHTMLNode.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/admin/helpers/markHTMLNode.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/admin/helpers/markHTMLNode.ts?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -0,0 +1,58 @@\n+// markPhrasesHTML looks for `suspect` and `banned` words inside `text` given\n+// the settings applied for the locale and highlights them by returning an HTML\n+// string.\n+function markPhrasesHTML(text: string, expression: RegExp) {\n+  const tokens = text.split(expression);\n+\n+  // If there were less than two matches, then there was no matched word\n+  // associated with the passed in text.\n+  if (tokens.length < 3) {\n+    return null;\n+  }\n+\n+  return tokens\n+    .map((token, i) =>\n+      // Using our Regexp patterns it returns tokens arranged this way:\n+      //\n+      //  - STRING_WITH_NO_MATCH\n+      //  - NEW_WORD_DELIMITER\n+      //  - MATCHED_WORD\n+      //  - NEW_WORD_DELIMITER\n+      //  - ...\n+      //\n+      // This pattern repeats throughout. Next line will mark MATCHED_WORD.\n+      i % 4 === 2 ? \"<mark>\" + token + \"</mark>\" : token\n+    )\n+    .join(\"\");\n+}\n+\n+// markHTMLNode manipulates the node by looking for #text nodes and adding\n+// markers.\n+export default function markHTMLNode(parentNode: Node, expression: RegExp) {\n+  parentNode.childNodes.forEach(node => {\n+    // Anchor links are already marked by default, skip them now.\n+    if (node.nodeName === \"A\") {\n+      return;\n+    }\n+\n+    // If the node isn't of text type then we can't mark it directly.\n+    if (node.nodeName !== \"#text\") {\n+      return markHTMLNode(node, expression);\n+    }\n+\n+    // If the node doesn't have any text content, then we can't mark it either.\n+    if (!node.textContent) {\n+      return;\n+    }\n+\n+    // We've encountered a text node with text content that isn't in an anchor\n+    // link. We should try to mark and replace it's content.\n+    const replacement = markPhrasesHTML(node.textContent, expression);\n+    if (replacement) {\n+      // Create the new span node to replace the old node with.\n+      const newNode = document.createElement(\"span\");\n+      newNode.innerHTML = replacement;\n+      parentNode.replaceChild(newNode, node);\n+    }\n+  });\n+}"
    },
    {
      "sha": "cfab5c0d44698ad738afad3206941fd4edc48412",
      "filename": "src/core/client/framework/components/loadables/MarkdownEditor/MarkdownEditor.css",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/framework/components/loadables/MarkdownEditor/MarkdownEditor.css",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/framework/components/loadables/MarkdownEditor/MarkdownEditor.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/components/loadables/MarkdownEditor/MarkdownEditor.css?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -3,6 +3,10 @@ $fullscreenZIndex: 10;\n \n .wrapper {\n   @mixin bodyCopy;\n+  i\n+  em {\n+    font-style: italic;\n+  }\n   b,\n   strong {\n     font-weight: var(--font-weight-medium);"
    },
    {
      "sha": "86afc2c65b063fb89e61b36c625a524aadcdee54",
      "filename": "src/core/client/stream/shared/htmlContent.css",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/stream/shared/htmlContent.css",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/client/stream/shared/htmlContent.css",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/stream/shared/htmlContent.css?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -3,12 +3,12 @@\n   color: var(--palette-text-dark);\n   overflow-wrap: break-word;\n \n-  & * bold,\n-  & * strong {\n+  b,\n+  strong {\n     font-weight: var(--font-weight-medium);\n   }\n-  & * italic,\n-  & * em {\n+  i\n+  em {\n     font-style: italic;\n   }\n   blockquote {"
    },
    {
      "sha": "84677322da75240ae95cf361ece293bd2edceb4f",
      "filename": "src/core/common/utils/__snapshots__/createWordListRegExp.spec.ts.snap",
      "status": "added",
      "additions": 179,
      "deletions": 0,
      "changes": 179,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/common/utils/__snapshots__/createWordListRegExp.spec.ts.snap",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/common/utils/__snapshots__/createWordListRegExp.spec.ts.snap",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/common/utils/__snapshots__/createWordListRegExp.spec.ts.snap?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -0,0 +1,179 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`en-US splits the multi-words in a sentence correctly 1`] = `\n+Array [\n+  \"this sentence has\",\n+  \" \",\n+  \"french fries\",\n+  \".\",\n+  \"\",\n+]\n+`;\n+\n+exports[`en-US splits the multi-words in a sentence correctly 2`] = `\n+Array [\n+  \"this sentence has\",\n+  \" \",\n+  \"french;fries\",\n+  \".\",\n+  \"\",\n+]\n+`;\n+\n+exports[`en-US splits the multi-words in a sentence correctly 3`] = `\n+Array [\n+  \"this sentence has\",\n+  \" \",\n+  \"french!fries\",\n+  \".\",\n+  \"\",\n+]\n+`;\n+\n+exports[`en-US splits the multi-words in a sentence correctly 4`] = `\n+Array [\n+  \"this sentence has\",\n+  \" \",\n+  \"french.fries\",\n+  \".\",\n+  \"\",\n+]\n+`;\n+\n+exports[`en-US splits the multi-words in a sentence correctly 5`] = `\n+Array [\n+  \"this sentence has\",\n+  \" \",\n+  \"french?fries\",\n+  \".\",\n+  \"\",\n+]\n+`;\n+\n+exports[`en-US splits the multi-words in a sentence correctly 6`] = `\n+Array [\n+  \"this sentence has\",\n+  \" \",\n+  \"french¿fries\",\n+  \".\",\n+  \"\",\n+]\n+`;\n+\n+exports[`en-US splits the multi-words in a sentence correctly 7`] = `\n+Array [\n+  \"this sentence has\",\n+  \" \",\n+  \"french:fries\",\n+  \".\",\n+  \"\",\n+]\n+`;\n+\n+exports[`en-US splits the words in a sentence correctly 1`] = `\n+Array [\n+  \"this sentence is\",\n+  \" \",\n+  \"bad\",\n+  \".\",\n+  \"\",\n+]\n+`;\n+\n+exports[`en-US splits the words in a sentence correctly 2`] = `\n+Array [\n+  \"this sentence is\",\n+  \" \",\n+  \"worse\",\n+  \".\",\n+  \"\",\n+]\n+`;\n+\n+exports[`en-US splits the words with unicode in a sentence correctly 1`] = `\n+Array [\n+  \"this sentence has one\",\n+  \" \",\n+  \"jalapeño\",\n+  \".\",\n+  \"\",\n+]\n+`;\n+\n+exports[`en-US splits the words with unicode in a sentence correctly 2`] = `\n+Array [\n+  \"this sentence has many jalapeños.\",\n+]\n+`;\n+\n+exports[`en-US splits words when there are repeat words 1`] = `\n+Array [\n+  \"This is\",\n+  \" \",\n+  \"bad\",\n+  \" \",\n+  \"bad, very\",\n+  \" \",\n+  \"BAD\",\n+  \".\",\n+  \"\",\n+]\n+`;\n+\n+exports[`pt-BR splits the words with unicode in a sentence correctly 1`] = `\n+Array [\n+  \"biólogo se soletra com\",\n+  \": \",\n+  \"bi\",\n+  \" \",\n+  \"\",\n+]\n+`;\n+\n+exports[`pt-BR splits the words with unicode in a sentence correctly 2`] = `\n+Array [\n+  \"\",\n+  \"\",\n+  \"m.e.r.d.a\",\n+  \"\",\n+  \"\",\n+]\n+`;\n+\n+exports[`pt-BR splits the words with unicode in a sentence correctly 3`] = `\n+Array [\n+  \"não tomo\",\n+  \" \",\n+  \"café\",\n+  \" \",\n+  \"pois faz mal\",\n+]\n+`;\n+\n+exports[`pt-BR splits the words with unicode in a sentence correctly 4`] = `\n+Array [\n+  \"\",\n+  \"\",\n+  \"Como fazer coisas ruins\",\n+  \"\",\n+  \"\",\n+]\n+`;\n+\n+exports[`pt-BR splits the words with unicode in a sentence correctly 5`] = `\n+Array [\n+  \"O biólogo recomenda este artigo\",\n+]\n+`;\n+\n+exports[`pt-BR splits the words with unicode in a sentence correctly 6`] = `\n+Array [\n+  \"cafe\",\n+]\n+`;\n+\n+exports[`pt-BR splits the words with unicode in a sentence correctly 7`] = `\n+Array [\n+  \"Ser banido é uma merda\",\n+]\n+`;"
    },
    {
      "sha": "174935cccfd4618e73e7efd8552809ae8dd2d92d",
      "filename": "src/core/common/utils/createWordListRegExp.spec.ts",
      "status": "added",
      "additions": 173,
      "deletions": 0,
      "changes": 173,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/common/utils/createWordListRegExp.spec.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/common/utils/createWordListRegExp.spec.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/common/utils/createWordListRegExp.spec.ts?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -0,0 +1,173 @@\n+import createWordListRegExp from \"./createWordListRegExp\";\n+\n+const buildTester = (re: RegExp) => (str: string) => re.test(str);\n+\n+const buildSplitter = (re: RegExp) => (str: string) => str.split(re);\n+\n+describe(\"en-US\", () => {\n+  const re = createWordListRegExp(\"en-US\", [\n+    \"bad\",\n+    \"french fries\",\n+    \"worse\",\n+    \"jalapeño\",\n+    \"1km\",\n+  ]);\n+\n+  const test = buildTester(re);\n+\n+  it(\"test words in the list\", () => {\n+    expect(test(\"bad\")).toBeTruthy();\n+    expect(test(\"worse\")).toBeTruthy();\n+    expect(test(\"1km\")).toBeTruthy();\n+  });\n+\n+  it(\"test repeated words in the list\", () => {\n+    expect(test(\"bad bad bad\")).toBeTruthy();\n+    expect(test(\"worse worse worse\")).toBeTruthy();\n+  });\n+\n+  it(\"test words not in the list\", () => {\n+    expect(test(\"fine\")).toBeFalsy();\n+    expect(test(\"ok\")).toBeFalsy();\n+  });\n+\n+  it(\"test words that end with a unicode character\", () => {\n+    expect(test(\"I have one jalapeño.\")).toBeTruthy();\n+    expect(test(\"I have two jalapeños.\")).toBeFalsy();\n+  });\n+\n+  it(\"test words in the list while being case insensitive\", () => {\n+    expect(test(\"Bad\")).toBeTruthy();\n+    expect(test(\"BAd\")).toBeTruthy();\n+    expect(test(\"BAD\")).toBeTruthy();\n+    expect(test(\"bAD\")).toBeTruthy();\n+    expect(test(\"baD\")).toBeTruthy();\n+    expect(test(\"bAd\")).toBeTruthy();\n+    expect(test(\"1KM\")).toBeTruthy();\n+  });\n+\n+  it(\"test multi-words\", () => {\n+    expect(test(\"french fries\")).toBeTruthy();\n+    expect(test(\"french!fries\")).toBeTruthy();\n+    expect(test(\"french.fries\")).toBeTruthy();\n+    expect(test(\"french?fries\")).toBeTruthy();\n+    expect(test(\"french¿fries\")).toBeTruthy();\n+    expect(test(\"french:fries\")).toBeTruthy();\n+    expect(test(\"french;fries\")).toBeTruthy();\n+  });\n+\n+  it(\"test words at the end of a sentence\", () => {\n+    expect(test(\"this sentence is bad.\")).toBeTruthy();\n+    expect(test(\"this sentence is worse.\")).toBeTruthy();\n+    expect(test(\"this sentence has french fries.\")).toBeTruthy();\n+    expect(test(\"this sentence has french!fries.\")).toBeTruthy();\n+    expect(test(\"this sentence has french.fries.\")).toBeTruthy();\n+    expect(test(\"this sentence has french?fries.\")).toBeTruthy();\n+    expect(test(\"this sentence has french¿fries.\")).toBeTruthy();\n+    expect(test(\"this sentence has french:fries.\")).toBeTruthy();\n+    expect(test(\"this sentence has french;fries.\")).toBeTruthy();\n+  });\n+\n+  it(\"test words at the start of a sentence\", () => {\n+    expect(test(\"bad is the start of the sentence.\")).toBeTruthy();\n+    expect(test(\"worse is the start of the sentence.\")).toBeTruthy();\n+    expect(test(\"french fries is the start of the sentence.\")).toBeTruthy();\n+  });\n+\n+  it(\"test does not preserve state\", () => {\n+    expect(test(\"bad 1\")).toBeTruthy();\n+    expect(test(\"bad 2\")).toBeTruthy();\n+    expect(test(\"more bad 3\")).toBeTruthy();\n+    expect(test(\"more bad 4\")).toBeTruthy();\n+  });\n+\n+  it(\"test repeated words\", () => {\n+    expect(test(\"This is bad bad, very bad\")).toBeTruthy();\n+  });\n+\n+  it(\"test does not match substrings\", () => {\n+    expect(test(\"baddd\")).toBeFalsy();\n+    expect(test(\"wwworse\")).toBeFalsy();\n+    expect(test(\"fffrench fries\")).toBeFalsy();\n+  });\n+\n+  it(\"test handles when there are numbers\", () => {\n+    expect(test(\"bad3\")).toBeTruthy();\n+    expect(test(\"3bad\")).toBeTruthy();\n+  });\n+\n+  const split = buildSplitter(re);\n+\n+  it(\"splits the words in a sentence correctly\", () => {\n+    expect(split(\"this sentence is bad.\")).toMatchSnapshot();\n+    expect(split(\"this sentence is worse.\")).toMatchSnapshot();\n+  });\n+\n+  it(\"splits words when there are repeat words\", () => {\n+    expect(split(\"This is bad bad, very BAD.\")).toMatchSnapshot();\n+  });\n+\n+  it(\"splits the words with unicode in a sentence correctly\", () => {\n+    expect(split(\"this sentence has one jalapeño.\")).toMatchSnapshot();\n+    expect(split(\"this sentence has many jalapeños.\")).toMatchSnapshot();\n+  });\n+\n+  it(\"splits the multi-words in a sentence correctly\", () => {\n+    expect(split(\"this sentence has french fries.\")).toMatchSnapshot();\n+    expect(split(\"this sentence has french;fries.\")).toMatchSnapshot();\n+    expect(split(\"this sentence has french!fries.\")).toMatchSnapshot();\n+    expect(split(\"this sentence has french.fries.\")).toMatchSnapshot();\n+    expect(split(\"this sentence has french?fries.\")).toMatchSnapshot();\n+    expect(split(\"this sentence has french¿fries.\")).toMatchSnapshot();\n+    expect(split(\"this sentence has french:fries.\")).toMatchSnapshot();\n+  });\n+});\n+\n+describe(\"es\", () => {\n+  const re = createWordListRegExp(\"es\", [\"adónde vas\", \"tú\"]);\n+\n+  const test = buildTester(re);\n+\n+  it(\"test words in the list\", () => {\n+    expect(test(\"Pablo, ¿adónde vas?\")).toBeTruthy();\n+    expect(test(\"Estoy cansado, ¿y tú?\")).toBeTruthy();\n+    expect(test(\"¿tú?\")).toBeTruthy();\n+  });\n+});\n+\n+describe(\"pt-BR\", () => {\n+  const re = createWordListRegExp(\"pt-BR\", [\n+    \"bi\",\n+    \"outro\",\n+    \"café\",\n+    \"m e r d a\",\n+    \"Como fazer coisas ruins\",\n+  ]);\n+\n+  const test = buildTester(re);\n+\n+  it(\"test words in the list\", () => {\n+    expect(test(\"biólogo se soletra com: bi \")).toBeTruthy();\n+    expect(test(\"m.e.r.d.a\")).toBeTruthy();\n+    expect(test(\"não tomo café pois faz mal\")).toBeTruthy();\n+    expect(test(\"Como fazer coisas ruins\")).toBeTruthy();\n+  });\n+\n+  it(\"test words not in the list\", () => {\n+    expect(test(\"O biólogo recomenda este artigo\")).toBeFalsy();\n+    expect(test(\"cafe\")).toBeFalsy();\n+    expect(test(\"Ser banido é uma merda\")).toBeFalsy();\n+  });\n+\n+  const split = buildSplitter(re);\n+\n+  it(\"splits the words with unicode in a sentence correctly\", () => {\n+    expect(split(\"biólogo se soletra com: bi \")).toMatchSnapshot();\n+    expect(split(\"m.e.r.d.a\")).toMatchSnapshot();\n+    expect(split(\"não tomo café pois faz mal\")).toMatchSnapshot();\n+    expect(split(\"Como fazer coisas ruins\")).toMatchSnapshot();\n+    expect(split(\"O biólogo recomenda este artigo\")).toMatchSnapshot();\n+    expect(split(\"cafe\")).toMatchSnapshot();\n+    expect(split(\"Ser banido é uma merda\")).toMatchSnapshot();\n+  });\n+});"
    },
    {
      "sha": "c6fed401eed44b277869c767305137b37340dd04",
      "filename": "src/core/common/utils/createWordListRegExp.ts",
      "status": "modified",
      "additions": 17,
      "deletions": 12,
      "changes": 29,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/common/utils/createWordListRegExp.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/common/utils/createWordListRegExp.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/common/utils/createWordListRegExp.ts?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -1,18 +1,20 @@\n import { defaults } from \"lodash\";\n+import XRegExp from \"xregexp\";\n \n import { LanguageCode } from \"coral-common/helpers\";\n import { DeepPartial } from \"coral-common/types\";\n \n interface WordListRule {\n-  split: string;\n+  boundary: string;\n   punctuation: string;\n-  whitespace: string;\n }\n \n const DefaultWordListRule: WordListRule = {\n-  split: \"[^\\\\w]\",\n-  punctuation: '[\\\\s\"?!.¿¡`:;]+',\n-  whitespace: \"\\\\s+\",\n+  // The following symbol, \\p{L} refers to any letter class within unicode.\n+  // Because we're adding the ^, we're also saying to exclude any from that set,\n+  // leaving all non-word characters from unicode available for selection.\n+  boundary: \"[^\\\\p{L}]+\",\n+  punctuation: \"[\\\\s\\\"'?!.,¿¡`:;]+\",\n };\n \n const WordListRules: DeepPartial<Record<LanguageCode, WordListRule>> = {\n@@ -47,14 +49,12 @@ export default function createWordListRegExp(\n     DefaultWordListRule\n   );\n \n-  const whitespace = new RegExp(rule.whitespace);\n-\n   // Split up the words from the list into a regex escaped string.\n   const words = phrases\n     .map(phrase =>\n       phrase\n         // Split each phrase by whitespace.\n-        .split(whitespace)\n+        .split(/\\s/)\n         // Escape each phrase, we don't expect any of them to contain regex.\n         .map(word => escapeRegExp(word))\n         // Rejoin to ensure that any variation of the word separated by a\n@@ -64,13 +64,18 @@ export default function createWordListRegExp(\n     // For each of these words, wrap a `|` or OR.\n     .join(\"|\");\n \n-  // Wrap the pattern in split rules.\n-  const pattern = `(^|${rule.split})(${words})($|${rule.split})`;\n+  // Wrap the pattern in split rules. We want to match any word that either is\n+  // at the start of a string, or a word boundary. The word must also either be\n+  // at the end of the string or at another word boundary.\n+  const pattern = `(^|${rule.boundary})(${words})($|${rule.boundary})`;\n \n   try {\n-    return new RegExp(pattern, \"iu\");\n+    // Create the RegExp using xregexp to pre-process the pattern to generate\n+    // one with the correct unicode ranges. Including A for \"astral\" unicode\n+    // support for supporting higher character ranges.\n+    return XRegExp(pattern, \"iuA\");\n   } catch {\n     // IE does not support unicode support, so we'll create one without.\n-    return new RegExp(pattern, \"i\");\n+    return XRegExp(pattern, \"i\");\n   }\n }"
    },
    {
      "sha": "4dedb2a47d6b97ea0727f2297b1ec9734d9c4aae",
      "filename": "src/core/common/utils/index.ts",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/common/utils/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/common/utils/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/common/utils/index.ts?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -12,4 +12,3 @@ export { default as isPromiseLike } from \"./isPromiseLike\";\n export { default as isPromise } from \"./isPromise\";\n export { default as startsWith } from \"./startsWith\";\n export { default as getOrigin } from \"./getOrigin\";\n-export { default as createWordListRegExp } from \"./createWordListRegExp\";"
    },
    {
      "sha": "227c8240b627c8425f5fac6313cae39ff19cbbe2",
      "filename": "src/core/server/services/comments/pipeline/wordList.spec.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 82,
      "changes": 82,
      "blob_url": "https://github.com/coralproject/talk/blob/8966a8201b3a911476ece5b9cff6d7726911b97f/src/core/server/services/comments/pipeline/wordList.spec.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/8966a8201b3a911476ece5b9cff6d7726911b97f/src/core/server/services/comments/pipeline/wordList.spec.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/wordList.spec.ts?ref=8966a8201b3a911476ece5b9cff6d7726911b97f",
      "patch": "@@ -1,82 +0,0 @@\n-import {\n-  Options,\n-  WordList,\n-} from \"coral-server/services/comments/pipeline/wordList\";\n-\n-describe(\"en-US\", () => {\n-  const list = new WordList();\n-  const options: Options = {\n-    id: \"tenant_1\",\n-    locale: \"en-US\",\n-    wordList: {\n-      banned: [\n-        \"cookies\",\n-        \"how to do bad things\",\n-        \"how to do really bad things\",\n-        \"s h i t\",\n-        \"$hit\",\n-        \"p**ch\",\n-        \"p*ch\",\n-        \"banned\",\n-        \"ban\",\n-      ],\n-      suspect: [],\n-    },\n-  };\n-\n-  describe(\"containsMatchingPhrase\", () => {\n-    it(\"does match on a word in the list\", () => {\n-      [\n-        \"how to do really bad things\",\n-        \"what is cookies\",\n-        \"cookies\",\n-        \"COOKIES.\",\n-        \"how to do bad things\",\n-        \"How To do bad things!\",\n-        \"How.To.do.bad.things!\",\n-        \"This stuff is $hit!\",\n-        \"This is a test.\\nTo see if cookies are found, in the second line.\",\n-        \"That's a p**ch!\",\n-        \"Banned words should be detected\",\n-      ].forEach(word => {\n-        expect(list.test(options, \"banned\", word)).toEqual(true);\n-      });\n-    });\n-\n-    it(\"does not match on a word not in the list\", () => {\n-      [\n-        \"how to\",\n-        \"cookie\",\n-        \"how to be a great person?\",\n-        \"how to not do really bad things?\",\n-        \"i have $100 dollars.\",\n-        \"I have bad $ hit lling\",\n-        \"That's a p***ch!\",\n-        \"When bann is spelt wrong, it won't be caught.\",\n-      ].forEach(word => {\n-        expect(list.test(options, \"banned\", word)).toEqual(false);\n-      });\n-    });\n-\n-    it(\"allows an empty list\", () => {\n-      expect(list.test(options, \"banned\", \"test\")).toEqual(false);\n-    });\n-  });\n-\n-  describe(\"containsMatchingPhraseMemoized\", () => {\n-    it(\"return true for all cases after memoizing the first result\", () => {\n-      [\n-        \"cookies 1\",\n-        \"cookies 2\",\n-        \"cookies 4\",\n-        \"cookies 5\",\n-        \"this is for cookies 6\",\n-        \"this is for cookies 7\",\n-        \"this is for cookies 8\",\n-        \"this is for cookies 9\",\n-      ].forEach(word => {\n-        expect(list.test(options, \"banned\", word)).toEqual(true);\n-      });\n-    });\n-  });\n-});"
    },
    {
      "sha": "985144df66f3c1b54b63d0474e8b8a4f72d5149a",
      "filename": "src/core/server/services/comments/pipeline/wordList.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/server/services/comments/pipeline/wordList.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/6711f09a79b06950c28df551c63276fc5ff8be04/src/core/server/services/comments/pipeline/wordList.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/wordList.ts?ref=6711f09a79b06950c28df551c63276fc5ff8be04",
      "patch": "@@ -2,7 +2,7 @@ import ms from \"ms\";\n import now from \"performance-now\";\n \n import { LanguageCode } from \"coral-common/helpers\";\n-import { createWordListRegExp } from \"coral-common/utils\";\n+import createWordListRegExp from \"coral-common/utils/createWordListRegExp\";\n import logger from \"coral-server/logger\";\n import { Tenant } from \"coral-server/models/tenant\";\n \n@@ -90,8 +90,8 @@ export class WordList {\n \n     const startedAt = now();\n     const result = list.test(testString);\n-    logger.debug(\n-      { tenantID: options.id, took: ms(now() - startedAt) },\n+    logger.info(\n+      { tenantID: options.id, listName, took: ms(now() - startedAt) },\n       \"word list phrase test complete\"\n     );\n "
    }
  ]
}
