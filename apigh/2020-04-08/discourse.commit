{
  "sha": "e1f8014acd2877cda539b14b4694d9c077f6b36d",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODplMWY4MDE0YWNkMjg3N2NkYTUzOWIxNGI0Njk0ZDljMDc3ZjZiMzZk",
  "commit": {
    "author": {
      "name": "Robin Ward",
      "email": "robin.ward@gmail.com",
      "date": "2020-04-08T16:52:36Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-04-08T16:52:36Z"
    },
    "message": "FEATURE: Support for publishing topics as pages (#9364)\n\nIf the feature is enabled, staff members can construct a URL and publish a\r\ntopic for others to browse without the regular Discourse chrome.\r\n\r\nThis is useful if you want to use Discourse like a CMS and publish\r\ntopics as articles, which can then be embedded into other systems.",
    "tree": {
      "sha": "f377d793129e4ed451039e60eb3f52f407e91328",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/f377d793129e4ed451039e60eb3f52f407e91328"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/e1f8014acd2877cda539b14b4694d9c077f6b36d",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejgFUCRBK7hj4Ov3rIwAAdHIIAHQFtzUkzSpAeCbbYGEy8yXY\nMpA61RLUPVwBhVMiZL5coqdK8QqKg71fFvEgZg44bvMPIiz+JIQPArF4IQw61BrS\n4j84etHAK9unrjCykqQuTpifs60qtSBtUdvsrswLVbyBbIYSKLVuHHCnHHVQ0sTe\nr6gBi3jrsTg8OTiHCQNN0U26/NOxsbjuHIPufCdVu/0OraBDhqrwWznzAPNkHM8x\nF8k9X8Bo7ReosySn6LucRINVH5QE/3hTfbeWz0CB1KWNqglhCZ/4BT3XDGxREHTj\nqswsqnnG6N6CloVq86W59Pdgk+5yP3QBv6eonG+RY2SilU14s0M3N98YCnKdyOk=\n=GfAQ\n-----END PGP SIGNATURE-----\n",
      "payload": "tree f377d793129e4ed451039e60eb3f52f407e91328\nparent b64b590cfb42b2d8b8129d2bee44e6407f11d284\nauthor Robin Ward <robin.ward@gmail.com> 1586364756 -0400\ncommitter GitHub <noreply@github.com> 1586364756 -0400\n\nFEATURE: Support for publishing topics as pages (#9364)\n\nIf the feature is enabled, staff members can construct a URL and publish a\r\ntopic for others to browse without the regular Discourse chrome.\r\n\r\nThis is useful if you want to use Discourse like a CMS and publish\r\ntopics as articles, which can then be embedded into other systems."
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/e1f8014acd2877cda539b14b4694d9c077f6b36d",
  "html_url": "https://github.com/discourse/discourse/commit/e1f8014acd2877cda539b14b4694d9c077f6b36d",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/e1f8014acd2877cda539b14b4694d9c077f6b36d/comments",
  "author": {
    "login": "eviltrout",
    "id": 17538,
    "node_id": "MDQ6VXNlcjE3NTM4",
    "avatar_url": "https://avatars0.githubusercontent.com/u/17538?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eviltrout",
    "html_url": "https://github.com/eviltrout",
    "followers_url": "https://api.github.com/users/eviltrout/followers",
    "following_url": "https://api.github.com/users/eviltrout/following{/other_user}",
    "gists_url": "https://api.github.com/users/eviltrout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eviltrout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eviltrout/subscriptions",
    "organizations_url": "https://api.github.com/users/eviltrout/orgs",
    "repos_url": "https://api.github.com/users/eviltrout/repos",
    "events_url": "https://api.github.com/users/eviltrout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eviltrout/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b64b590cfb42b2d8b8129d2bee44e6407f11d284",
      "url": "https://api.github.com/repos/discourse/discourse/commits/b64b590cfb42b2d8b8129d2bee44e6407f11d284",
      "html_url": "https://github.com/discourse/discourse/commit/b64b590cfb42b2d8b8129d2bee44e6407f11d284"
    }
  ],
  "stats": {
    "total": 890,
    "additions": 883,
    "deletions": 7
  },
  "files": [
    {
      "sha": "192267393598660579f7c723c34dafbad4968075",
      "filename": "app/assets/javascripts/discourse/adapters/published-page.js",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/adapters/published-page.js",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/adapters/published-page.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/adapters/published-page.js?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,9 @@\n+import RestAdapter from \"discourse/adapters/rest\";\n+\n+export default RestAdapter.extend({\n+  jsonMode: true,\n+\n+  pathFor(store, type, id) {\n+    return `/pub/by-topic/${id}`;\n+  }\n+});"
    },
    {
      "sha": "3477520d0bcc603e309bb72850b1a0ba7caefe2e",
      "filename": "app/assets/javascripts/discourse/components/text-field.js",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/components/text-field.js",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/components/text-field.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/components/text-field.js?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -71,6 +71,27 @@ export default TextField.extend({\n     }\n   },\n \n+  didReceiveAttrs() {\n+    this._super(...arguments);\n+    this._prevValue = this.value;\n+  },\n+\n+  didUpdateAttrs() {\n+    this._super(...arguments);\n+    if (this._prevValue !== this.value) {\n+      if (this.onChangeImmediate) {\n+        next(() => this.onChangeImmediate(this.value));\n+      }\n+      if (this.onChange) {\n+        debounce(this, this._debouncedChange, DEBOUNCE_MS);\n+      }\n+    }\n+  },\n+\n+  _debouncedChange() {\n+    next(() => this.onChange(this.value));\n+  },\n+\n   @discourseComputed(\"placeholderKey\")\n   placeholder: {\n     get() {"
    },
    {
      "sha": "37462fce3814dc81395d85a8bf42888f3a58c7e6",
      "filename": "app/assets/javascripts/discourse/controllers/publish-page.js",
      "status": "added",
      "additions": 121,
      "deletions": 0,
      "changes": 121,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/controllers/publish-page.js",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/controllers/publish-page.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/controllers/publish-page.js?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,121 @@\n+import Controller from \"@ember/controller\";\n+import ModalFunctionality from \"discourse/mixins/modal-functionality\";\n+import { computed, action } from \"@ember/object\";\n+import { equal, not } from \"@ember/object/computed\";\n+import { ajax } from \"discourse/lib/ajax\";\n+import { popupAjaxError } from \"discourse/lib/ajax-error\";\n+\n+const States = {\n+  initializing: \"initializing\",\n+  checking: \"checking\",\n+  valid: \"valid\",\n+  invalid: \"invalid\",\n+  saving: \"saving\",\n+  new: \"new\",\n+  existing: \"existing\",\n+  unpublishing: \"unpublishing\",\n+  unpublished: \"unpublished\"\n+};\n+\n+const StateHelpers = {};\n+Object.keys(States).forEach(name => {\n+  StateHelpers[name] = equal(\"state\", name);\n+});\n+\n+export default Controller.extend(ModalFunctionality, StateHelpers, {\n+  state: null,\n+  reason: null,\n+  publishedPage: null,\n+  disabled: not(\"valid\"),\n+  publishedPage: null,\n+\n+  showUrl: computed(\"state\", function() {\n+    return (\n+      this.state === States.valid ||\n+      this.state === States.saving ||\n+      this.state === States.existing\n+    );\n+  }),\n+  showUnpublish: computed(\"state\", function() {\n+    return this.state === States.existing || this.state === States.unpublishing;\n+  }),\n+\n+  onShow() {\n+    this.set(\"state\", States.initializing);\n+\n+    this.store\n+      .find(\"published_page\", this.model.id)\n+      .then(page => {\n+        this.setProperties({ state: States.existing, publishedPage: page });\n+      })\n+      .catch(this.startNew);\n+  },\n+\n+  @action\n+  startCheckSlug() {\n+    if (this.state === States.existing) {\n+      return;\n+    }\n+\n+    this.set(\"state\", States.checking);\n+  },\n+\n+  @action\n+  checkSlug() {\n+    if (this.state === States.existing) {\n+      return;\n+    }\n+    return ajax(\"/pub/check-slug\", {\n+      data: { slug: this.publishedPage.slug }\n+    }).then(result => {\n+      if (result.valid_slug) {\n+        this.set(\"state\", States.valid);\n+      } else {\n+        this.setProperties({ state: States.invalid, reason: result.reason });\n+      }\n+    });\n+  },\n+\n+  @action\n+  unpublish() {\n+    this.set(\"state\", States.unpublishing);\n+    return this.publishedPage\n+      .destroyRecord()\n+      .then(() => {\n+        this.set(\"state\", States.unpublished);\n+        this.model.set(\"publishedPage\", null);\n+      })\n+      .catch(result => {\n+        this.set(\"state\", States.existing);\n+        popupAjaxError(result);\n+      });\n+  },\n+\n+  @action\n+  publish() {\n+    this.set(\"state\", States.saving);\n+\n+    return this.publishedPage\n+      .update({ slug: this.publishedPage.slug })\n+      .then(() => {\n+        this.set(\"state\", States.existing);\n+        this.model.set(\"publishedPage\", this.publishedPage);\n+      })\n+      .catch(errResult => {\n+        popupAjaxError(errResult);\n+        this.set(\"state\", States.existing);\n+      });\n+  },\n+\n+  @action\n+  startNew() {\n+    this.setProperties({\n+      state: States.new,\n+      publishedPage: this.store.createRecord(\"published_page\", {\n+        id: this.model.id,\n+        slug: this.model.slug\n+      })\n+    });\n+    this.checkSlug();\n+  }\n+});"
    },
    {
      "sha": "986dc46c3c638eb6ef09df08e33b40c498f62060",
      "filename": "app/assets/javascripts/discourse/lib/transform-post.js",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/lib/transform-post.js",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/lib/transform-post.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/lib/transform-post.js?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -76,7 +76,8 @@ export function transformBasicPost(post) {\n     replyCount: post.reply_count,\n     locked: post.locked,\n     userCustomFields: post.user_custom_fields,\n-    readCount: post.readers_count\n+    readCount: post.readers_count,\n+    canPublishPage: false\n   };\n \n   _additionalAttributes.forEach(a => (postAtts[a] = post[a]));\n@@ -118,6 +119,8 @@ export default function transformPost(\n     currentUser && (currentUser.id === post.user_id || currentUser.staff);\n   postAtts.canReplyAsNewTopic = details.can_reply_as_new_topic;\n   postAtts.canReviewTopic = !!details.can_review_topic;\n+  postAtts.canPublishPage =\n+    !!details.can_publish_page && post.post_number === 1;\n   postAtts.isWarning = topic.is_warning;\n   postAtts.links = post.get(\"internalLinks\");\n   postAtts.replyDirectlyBelow ="
    },
    {
      "sha": "7f0c12ddf565d4d22531e46e5ff1c038fb3db792",
      "filename": "app/assets/javascripts/discourse/models/published-page.js",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/models/published-page.js",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/models/published-page.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/models/published-page.js?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,8 @@\n+import RestModel from \"discourse/models/rest\";\n+import { computed } from \"@ember/object\";\n+\n+export default RestModel.extend({\n+  url: computed(\"slug\", function() {\n+    return `${Discourse.BaseUrl}/pub/${this.slug}`;\n+  })\n+});"
    },
    {
      "sha": "41734e6e8fd0d76539f8d01a6c3a3acd09d65baf",
      "filename": "app/assets/javascripts/discourse/models/topic.js",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/models/topic.js",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/models/topic.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/models/topic.js?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -545,6 +545,13 @@ const Topic = RestModel.extend({\n       this.details.updateFromJson(json.details);\n \n       keys.removeObjects([\"details\", \"post_stream\"]);\n+\n+      if (json.published_page) {\n+        this.set(\n+          \"publishedPage\",\n+          this.store.createRecord(\"published-page\", json.published_page)\n+        );\n+      }\n     }\n     keys.forEach(key => this.set(key, json[key]));\n   },"
    },
    {
      "sha": "5aebefe6a43de5b2082ea95346f74d663f8253fc",
      "filename": "app/assets/javascripts/discourse/routes/topic.js",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/routes/topic.js",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/routes/topic.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/routes/topic.js?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -89,6 +89,14 @@ const TopicRoute = DiscourseRoute.extend({\n       controller.setProperties({ flagTopic: true });\n     },\n \n+    showPagePublish() {\n+      const model = this.modelFor(\"topic\");\n+      showModal(\"publish-page\", {\n+        model,\n+        title: \"topic.publish_page.title\"\n+      });\n+    },\n+\n     showTopicStatusUpdate() {\n       const model = this.modelFor(\"topic\");\n "
    },
    {
      "sha": "027f3ee76495a6617fb40a2654b9268e445ee981",
      "filename": "app/assets/javascripts/discourse/templates/modal/publish-page.hbs",
      "status": "added",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/templates/modal/publish-page.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/templates/modal/publish-page.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/templates/modal/publish-page.hbs?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,62 @@\n+{{#d-modal-body}}\n+  {{#if unpublished}}\n+    <p>{{i18n \"topic.publish_page.unpublished\"}}</p>\n+  {{else}}\n+    {{#conditional-loading-spinner condition=initializing}}\n+      <p class=\"publish-description\">{{i18n \"topic.publish_page.description\"}}</p>\n+\n+      <form>\n+        <label>{{i18n \"topic.publish_page.slug\"}}</label>\n+        {{text-field value=publishedPage.slug onChange=(action \"checkSlug\") onChangeImmediate=(action \"startCheckSlug\") disabled=existing class=\"publish-slug\"}}\n+      </form>\n+\n+      <div class=\"publish-url\">\n+        {{conditional-loading-spinner condition=checking}}\n+\n+        {{#if existing}}\n+          <div class='current-url'>\n+            {{i18n \"topic.publish_page.publish_url\"}}\n+            <div>\n+              <a href={{publishedPage.url}} target=\"_blank\" rel=\"noopener\">{{publishedPage.url}}</a>\n+            </div>\n+          </div>\n+        {{else}}\n+          {{#if showUrl}}\n+            <div class=\"valid-slug\">\n+              {{i18n \"topic.publish_page.preview_url\"}}\n+              <div class='example-url'>{{publishedPage.url}}</div>\n+            </div>\n+          {{/if}}\n+\n+          {{#if invalid}}\n+            {{i18n \"topic.publish_page.invalid_slug\"}} <span class=\"invalid-slug\">{{reason}}.</span>\n+          {{/if}}\n+        {{/if}}\n+\n+      </div>\n+    {{/conditional-loading-spinner}}\n+  {{/if}}\n+{{/d-modal-body}}\n+\n+<div class=\"modal-footer\">\n+  {{#if showUnpublish}}\n+    {{d-button icon=\"times\" label=\"close\" action=(action \"closeModal\")}}\n+\n+    {{d-button\n+      label=\"topic.publish_page.unpublish\"\n+      icon=\"trash\"\n+      class=\"btn-danger\"\n+      isLoading=unpublishing\n+      action=(action \"unpublish\") }}\n+  {{else if unpublished}}\n+    {{d-button label=\"topic.publish_page.publishing_settings\" action=(action \"startNew\")}}\n+  {{else}}\n+    {{d-button\n+      label=\"topic.publish_page.publish\"\n+      class=\"btn-primary publish-page\"\n+      icon=\"file\"\n+      disabled=disabled\n+      isLoading=saving\n+      action=(action \"publish\") }}\n+  {{/if}}\n+</div>"
    },
    {
      "sha": "ed26ae62ba9417db11c9a93d130a84cd877e22f5",
      "filename": "app/assets/javascripts/discourse/templates/topic.hbs",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/templates/topic.hbs",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/templates/topic.hbs",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/templates/topic.hbs?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -85,6 +85,25 @@\n           {{topic-category topic=model class=\"topic-category\"}}\n         {{/if}}\n       {{/topic-title}}\n+\n+      {{#if model.publishedPage}}\n+        <div class='published-page'>\n+          <div class=\"details\">\n+            {{i18n \"topic.publish_page.topic_published\"}}\n+            <div>\n+              <a href={{model.publishedPage.url}} target=\"_blank\" rel=\"noopener\">{{model.publishedPage.url}}</a>\n+            </div>\n+          </div>\n+          <div class=\"controls\">\n+            {{d-button\n+              icon=\"file\"\n+              label=\"topic.publish_page.publishing_settings\"\n+              action=(route-action \"showPagePublish\")\n+            }}\n+          </div>\n+        </div>\n+      {{/if}}\n+\n     {{/if}}\n \n     <div class=\"container posts\">\n@@ -230,7 +249,8 @@\n                 selectBelow=(action \"selectBelow\")\n                 fillGapBefore=(action \"fillGapBefore\")\n                 fillGapAfter=(action \"fillGapAfter\")\n-                showInvite=(route-action \"showInvite\")}}\n+                showInvite=(route-action \"showInvite\")\n+                showPagePublish=(route-action \"showPagePublish\")}}\n             {{/unless}}\n \n             {{conditional-loading-spinner condition=model.postStream.loadingBelow}}"
    },
    {
      "sha": "2b94b8a85c444ee67c3c11677390321788440842",
      "filename": "app/assets/javascripts/discourse/widgets/post-admin-menu.js",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/widgets/post-admin-menu.js",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/javascripts/discourse/widgets/post-admin-menu.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/widgets/post-admin-menu.js?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -120,6 +120,15 @@ export function buildManageButtons(attrs, currentUser, siteSettings) {\n     }\n   }\n \n+  if (attrs.canPublishPage) {\n+    contents.push({\n+      icon: \"file\",\n+      label: \"post.controls.publish_page\",\n+      action: \"showPagePublish\",\n+      className: \"btn-default publish-page\"\n+    });\n+  }\n+\n   if (attrs.canManage) {\n     contents.push({\n       icon: \"cog\","
    },
    {
      "sha": "cb7e0a4c35498f11a026cec2bd1a3e989df27fa1",
      "filename": "app/assets/stylesheets/common/base/modal.scss",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/stylesheets/common/base/modal.scss",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/stylesheets/common/base/modal.scss",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/stylesheets/common/base/modal.scss?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -684,6 +684,27 @@\n   }\n }\n \n+.publish-page-modal .modal-body {\n+  p.publish-description {\n+    margin-top: 0;\n+  }\n+  input.publish-slug {\n+    width: 100%;\n+  }\n+\n+  .publish-url {\n+    margin-bottom: 1em;\n+    .example-url,\n+    .invalid-slug {\n+      font-weight: bold;\n+    }\n+  }\n+\n+  .publish-slug:disabled {\n+    cursor: not-allowed;\n+  }\n+}\n+\n .modal:not(.has-tabs) {\n   .modal-tab {\n     position: absolute;"
    },
    {
      "sha": "cd7c7d70cc0df562a306a953a039c8280875fe97",
      "filename": "app/assets/stylesheets/common/base/topic.scss",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/stylesheets/common/base/topic.scss",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/stylesheets/common/base/topic.scss",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/stylesheets/common/base/topic.scss?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -295,3 +295,14 @@ a.topic-featured-link {\n     }\n   }\n }\n+\n+.published-page {\n+  display: flex;\n+  justify-content: space-between;\n+  padding-bottom: 1em;\n+  max-width: calc(\n+    #{$topic-body-width} + #{$topic-avatar-width} + #{$topic-body-width-padding *\n+      2}\n+  );\n+  align-items: center;\n+}"
    },
    {
      "sha": "b59a480ef06b5cb773c1a264853ae753be83e278",
      "filename": "app/assets/stylesheets/publish.scss",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/stylesheets/publish.scss",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/assets/stylesheets/publish.scss",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/stylesheets/publish.scss?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,32 @@\n+@import \"common\";\n+\n+body {\n+  background-color: $secondary;\n+  color: $primary;\n+}\n+\n+.published-page {\n+  margin: 2em auto;\n+  max-width: 800px;\n+\n+  h1 {\n+    color: $header_primary;\n+  }\n+\n+  .published-page-author {\n+    margin-top: 1em;\n+    margin-bottom: 2em;\n+    display: flex;\n+\n+    .avatar {\n+      margin-right: 1em;\n+    }\n+    .topic-created-at {\n+      color: $primary-medium;\n+    }\n+  }\n+\n+  .published-page-body {\n+    font-size: 1.25em;\n+  }\n+}"
    },
    {
      "sha": "a133732867772cd671b25d0b4bcf0180dff50cf4",
      "filename": "app/controllers/published_pages_controller.rb",
      "status": "added",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/controllers/published_pages_controller.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/controllers/published_pages_controller.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/controllers/published_pages_controller.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,59 @@\n+# frozen_string_literal: true\n+\n+class PublishedPagesController < ApplicationController\n+\n+  skip_before_action :preload_json\n+  skip_before_action :check_xhr, :verify_authenticity_token, only: [:show]\n+  before_action :ensure_publish_enabled\n+\n+  def show\n+    params.require(:slug)\n+\n+    pp = PublishedPage.find_by(slug: params[:slug])\n+    raise Discourse::NotFound unless pp\n+\n+    guardian.ensure_can_see!(pp.topic)\n+    @topic = pp.topic\n+    @canonical_url = @topic.url\n+    render layout: 'publish'\n+  end\n+\n+  def details\n+    pp = PublishedPage.find_by(topic: fetch_topic)\n+    raise Discourse::NotFound if pp.blank?\n+    render_serialized(pp, PublishedPageSerializer)\n+  end\n+\n+  def upsert\n+    result, pp = PublishedPage.publish!(current_user, fetch_topic, params[:published_page][:slug].strip)\n+    json_result(pp, serializer: PublishedPageSerializer) { result }\n+  end\n+\n+  def destroy\n+    PublishedPage.unpublish!(current_user, fetch_topic)\n+    render json: success_json\n+  end\n+\n+  def check_slug\n+    pp = PublishedPage.new(topic: Topic.new, slug: params[:slug].strip)\n+\n+    if pp.valid?\n+      render json: { valid_slug: true }\n+    else\n+      render json: { valid_slug: false, reason: pp.errors.full_messages.first }\n+    end\n+  end\n+\n+private\n+\n+  def fetch_topic\n+    topic = Topic.find_by(id: params[:topic_id])\n+    guardian.ensure_can_publish_page!(topic)\n+    topic\n+  end\n+\n+  def ensure_publish_enabled\n+    raise Discourse::NotFound unless SiteSetting.enable_page_publishing?\n+  end\n+\n+end"
    },
    {
      "sha": "da89df53bc6ed865a9afd2af901be0492ce5ef21",
      "filename": "app/models/published_page.rb",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/models/published_page.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/models/published_page.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/published_page.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,46 @@\n+# frozen_string_literal: true\n+\n+class PublishedPage < ActiveRecord::Base\n+  belongs_to :topic\n+\n+  validates_presence_of :slug\n+  validates_uniqueness_of :slug, :topic_id\n+\n+  validate :slug_format\n+  def slug_format\n+    if slug !~ /^[a-zA-Z\\-\\_0-9]+$/\n+      errors.add(:slug, I18n.t(\"publish_page.slug_errors.invalid\"))\n+    elsif [\"check-slug\", \"by-topic\"].include?(slug)\n+      errors.add(:slug, I18n.t(\"publish_page.slug_errors.unavailable\"))\n+    end\n+  end\n+\n+  def path\n+    \"/pub/#{slug}\"\n+  end\n+\n+  def url\n+    \"#{Discourse.base_url}#{path}\"\n+  end\n+\n+  def self.publish!(publisher, topic, slug)\n+    transaction do\n+      pp = find_or_initialize_by(topic: topic)\n+      pp.slug = slug.strip\n+\n+      if pp.save\n+        StaffActionLogger.new(publisher).log_published_page(topic.id, slug)\n+        return [true, pp]\n+      end\n+    end\n+\n+    [false, pp]\n+  end\n+\n+  def self.unpublish!(publisher, topic)\n+    if pp = PublishedPage.find_by(topic_id: topic.id)\n+      pp.destroy!\n+      StaffActionLogger.new(publisher).log_unpublished_page(topic.id, pp.slug)\n+    end\n+  end\n+end"
    },
    {
      "sha": "dd9460ce3a2cc39e3c8fa288a75dd7e689836624",
      "filename": "app/models/topic.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/models/topic.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/models/topic.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/topic.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -114,6 +114,7 @@ def recover!(recovered_by = nil)\n \n   has_one :top_topic\n   has_one :shared_draft, dependent: :destroy\n+  has_one :published_page\n \n   belongs_to :user\n   belongs_to :last_poster, class_name: 'User', foreign_key: :last_post_user_id"
    },
    {
      "sha": "49a545b8156bb14ee982e5214d51e3606cbba4d3",
      "filename": "app/models/user_history.rb",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/models/user_history.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/models/user_history.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/models/user_history.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -103,7 +103,9 @@ def self.actions\n       api_key_destroy: 82,\n       revoke_title: 83,\n       change_title: 84,\n-      override_upload_secure_status: 85\n+      override_upload_secure_status: 85,\n+      page_published: 86,\n+      page_unpublished: 87\n     )\n   end\n \n@@ -183,7 +185,9 @@ def self.staff_actions\n       :api_key_create,\n       :api_key_update,\n       :api_key_destroy,\n-      :override_upload_secure_status\n+      :override_upload_secure_status,\n+      :page_published,\n+      :page_unpublished\n     ]\n   end\n "
    },
    {
      "sha": "bdee8d14f70cc30469ac196c9edd543b99a097d8",
      "filename": "app/serializers/published_page_serializer.rb",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/serializers/published_page_serializer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/serializers/published_page_serializer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/serializers/published_page_serializer.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,9 @@\n+# frozen_string_literal: true\n+\n+class PublishedPageSerializer < ApplicationSerializer\n+  attributes :id, :slug\n+\n+  def id\n+    object.topic_id\n+  end\n+end"
    },
    {
      "sha": "32a1737527d26d968ade54ea9a20e0b13855847c",
      "filename": "app/serializers/topic_view_details_serializer.rb",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/serializers/topic_view_details_serializer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/serializers/topic_view_details_serializer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/serializers/topic_view_details_serializer.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -15,7 +15,8 @@ def self.can_attributes\n      :can_flag_topic,\n      :can_convert_topic,\n      :can_review_topic,\n-     :can_edit_tags]\n+     :can_edit_tags,\n+     :can_publish_page]\n   end\n \n   attributes(\n@@ -133,6 +134,10 @@ def include_can_edit_tags?\n     !scope.can_edit?(object.topic) && scope.can_edit_tags?(object.topic)\n   end\n \n+  def include_can_publish_page?\n+    scope.can_publish_page?(object.topic)\n+  end\n+\n   def allowed_users\n     object.topic.allowed_users.reject { |user| object.group_allowed_user_ids.include?(user.id) }\n   end"
    },
    {
      "sha": "1aec5f442d5d375c3a0c48bd5b440194da8b070f",
      "filename": "app/serializers/topic_view_serializer.rb",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/serializers/topic_view_serializer.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/serializers/topic_view_serializer.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/serializers/topic_view_serializer.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -71,12 +71,14 @@ def self.attributes_from_topic(*list)\n     :pm_with_non_human_user,\n     :queued_posts_count,\n     :show_read_indicator,\n-    :requested_group_name\n+    :requested_group_name,\n   )\n \n   has_one :details, serializer: TopicViewDetailsSerializer, root: false, embed: :objects\n   has_many :pending_posts, serializer: TopicPendingPostSerializer, root: false, embed: :objects\n \n+  has_one :published_page, embed: :objects\n+\n   def details\n     object\n   end\n@@ -273,4 +275,8 @@ def requested_group_name\n   def include_requested_group_name?\n     object.personal_message\n   end\n+\n+  def include_published_page?\n+    SiteSetting.enable_page_publishing? && scope.is_staff? && object.published_page.present?\n+  end\n end"
    },
    {
      "sha": "117353cb17e841437363dedca3b9c94d7351128e",
      "filename": "app/services/staff_action_logger.rb",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/services/staff_action_logger.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/services/staff_action_logger.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/services/staff_action_logger.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -728,6 +728,22 @@ def log_api_key_restore(api_key)\n     ))\n   end\n \n+  def log_published_page(topic_id, slug)\n+    UserHistory.create!(params.merge(\n+      subject: slug,\n+      topic_id: topic_id,\n+      action: UserHistory.actions[:page_published]\n+    ))\n+  end\n+\n+  def log_unpublished_page(topic_id, slug)\n+    UserHistory.create!(params.merge(\n+      subject: slug,\n+      topic_id: topic_id,\n+      action: UserHistory.actions[:page_unpublished]\n+    ))\n+  end\n+\n   private\n \n   def get_changes(changes)"
    },
    {
      "sha": "2b3d727dc7dc07bf8a9ee3a6b52aaa3a8e5a9ee5",
      "filename": "app/views/layouts/publish.html.erb",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/views/layouts/publish.html.erb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/views/layouts/publish.html.erb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/views/layouts/publish.html.erb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,15 @@\n+<!DOCTYPE html>\n+<html>\n+  <head>\n+    <meta charset=\"utf-8\">\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=yes, viewport-fit=cover\">\n+    <%= discourse_stylesheet_link_tag 'publish', theme_ids: nil %>\n+\n+    <%- if @canonical_url -%>\n+      <link rel=\"canonical\" href=\"<%= @canonical_url %>\" />\n+    <%- end -%>\n+  </head>\n+  <body>\n+    <%= yield %>\n+  </body>\n+</html>"
    },
    {
      "sha": "08f5474b817774d6d4a4ff9f7c1cb87a3b639766",
      "filename": "app/views/published_pages/show.html.erb",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/views/published_pages/show.html.erb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/app/views/published_pages/show.html.erb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/views/published_pages/show.html.erb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,19 @@\n+<div class=\"published-page\">\n+  <div class=\"published-page-header\">\n+    <h1 class=\"published-page-title\"><%= @topic.title %></h1>\n+\n+    <div class=\"published-page-author\">\n+      <img src=\"<%= @topic.user.small_avatar_url %>\" class=\"avatar\">\n+      <div class=\"published-page-author-details\">\n+        <div class=\"username\"><%= @topic.user.username %></div>\n+        <div class=\"topic-created-at\"><%= short_date(@topic.created_at) %></div>\n+      </div>\n+    </div>\n+\n+    <%- if @topic.first_post.present? %>\n+      <div class=\"published-page-body\">\n+        <%= @topic.first_post.cooked.html_safe %>\n+      </div>\n+    <%- end -%>\n+  </div>\n+</div>"
    },
    {
      "sha": "7e28c6620d235a69ff928cda64adbe54422d0a54",
      "filename": "config/locales/client.en.yml",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/config/locales/client.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/config/locales/client.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/client.en.yml?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -2439,6 +2439,19 @@ en:\n         action: \"merge selected posts\"\n         error: \"There was an error merging the selected posts.\"\n \n+      publish_page:\n+        title: \"Page Publishing\"\n+        publish: \"Publish\"\n+        description: \"When a topic is published as a page, its URL can be shared and it will displayed with custom styling.\"\n+        slug: \"Slug\"\n+        publish_url: \"Your page has been published at:\"\n+        topic_published: \"Your topic has been published at:\"\n+        preview_url: \"Your page will be published at:\"\n+        invalid_slug: \"Sorry, you can't publish this page.\"\n+        unpublish: \"Unpublish\"\n+        unpublished: \"Your page has been unpublished and is no longer accessible.\"\n+        publishing_settings: \"Publishing Settings\"\n+\n       change_owner:\n         title: \"Change Owner\"\n         action: \"change ownership\"\n@@ -2591,6 +2604,7 @@ en:\n         convert_to_moderator: \"Add Staff Color\"\n         revert_to_regular: \"Remove Staff Color\"\n         rebake: \"Rebuild HTML\"\n+        publish_page: \"Page Publishing\"\n         unhide: \"Unhide\"\n         change_owner: \"Change Ownership\"\n         grant_badge: \"Grant Badge\"\n@@ -4083,6 +4097,8 @@ en:\n             api_key_update: \"api key update\"\n             api_key_destroy: \"api key destroy\"\n             override_upload_secure_status: \"override upload secure status\"\n+            page_published: \"page published\"\n+            page_unpublished: \"page unpublished\"\n         screened_emails:\n           title: \"Screened Emails\"\n           description: \"When someone tries to create a new account, the following email addresses will be checked and the registration will be blocked, or some other action performed.\""
    },
    {
      "sha": "f5f03a1b9d69dbbff627e8ecb933ec07ade74d4c",
      "filename": "config/locales/server.en.yml",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/config/locales/server.en.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/config/locales/server.en.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/locales/server.en.yml?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -2107,6 +2107,7 @@ en:\n     new_user_notice_tl: \"Minimum trust level required to see new user post notices.\"\n     returning_user_notice_tl: \"Minimum trust level required to see returning user post notices.\"\n     returning_users_days: \"How many days should pass before a user is considered to be returning.\"\n+    enable_page_publishing: \"Allow staff members to publish topics to new URLs with their own styling.\"\n \n     default_email_digest_frequency: \"How often users receive summary emails by default.\"\n     default_include_tl0_in_digests: \"Include posts from new users in summary emails by default. Users can change this in their preferences.\"\n@@ -2299,6 +2300,12 @@ en:\n   change_owner:\n     post_revision_text: \"Ownership transferred\"\n \n+  publish_page:\n+    slug_errors:\n+      blank: \"can't be blank\"\n+      unavailable: \"is unavailable\"\n+      invalid: \"contains invalid characters\"\n+\n   topic_statuses:\n     autoclosed_message_max_posts:\n       one: \"This message was automatically closed after reaching the maximum limit of %{count} reply.\""
    },
    {
      "sha": "1a92a5440d14c321f13dec643e83049838354453",
      "filename": "config/routes.rb",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/config/routes.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/config/routes.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/routes.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -45,6 +45,12 @@\n   get \"finish-installation/confirm-email\" => \"finish_installation#confirm_email\"\n   put \"finish-installation/resend-email\" => \"finish_installation#resend_email\"\n \n+  get \"pub/check-slug\" => \"published_pages#check_slug\"\n+  get \"pub/by-topic/:topic_id\" => \"published_pages#details\"\n+  put \"pub/by-topic/:topic_id\" => \"published_pages#upsert\"\n+  delete \"pub/by-topic/:topic_id\" => \"published_pages#destroy\"\n+  get \"pub/:slug\" => \"published_pages#show\"\n+\n   resources :directory_items\n \n   get \"site\" => \"site#site\""
    },
    {
      "sha": "e2fc35aac481227cad7e4cdf12f445054145af48",
      "filename": "config/site_settings.yml",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/config/site_settings.yml",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/config/site_settings.yml",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/config/site_settings.yml?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -933,6 +933,8 @@ posting:\n     enum: \"TrustLevelSetting\"\n   returning_users_days:\n     default: 120\n+  enable_page_publishing:\n+    default: false\n \n email:\n   email_time_window_mins:"
    },
    {
      "sha": "201b08c9d6f5292972ebd7e156a8d1f9c5fdf97c",
      "filename": "db/migrate/20200401172023_create_published_pages.rb",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/db/migrate/20200401172023_create_published_pages.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/db/migrate/20200401172023_create_published_pages.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/db/migrate/20200401172023_create_published_pages.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,13 @@\n+# frozen_string_literal: true\n+\n+class CreatePublishedPages < ActiveRecord::Migration[6.0]\n+  def change\n+    create_table :published_pages do |t|\n+      t.references :topic, null: false, index: { unique: true }\n+      t.string :slug, null: false\n+      t.timestamps\n+    end\n+\n+    add_index :published_pages, :slug, unique: true\n+  end\n+end"
    },
    {
      "sha": "00d496e46ebd5447f0e769380412b9d68c00a244",
      "filename": "lib/guardian.rb",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/lib/guardian.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/lib/guardian.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/guardian.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -485,6 +485,14 @@ def allow_themes?(theme_ids, include_preview: false)\n       (components - Theme.components_for(parent)).empty?\n   end\n \n+  def can_publish_page?(topic)\n+    return false unless SiteSetting.enable_page_publishing?\n+    return false if topic.blank?\n+    return false if topic.private_message?\n+    return false unless can_see_topic?(topic)\n+    is_staff?\n+  end\n+\n   def auth_token\n     if cookie = request&.cookies[Auth::DefaultCurrentUserProvider::TOKEN_COOKIE]\n       UserAuthToken.hash_token(cookie)"
    },
    {
      "sha": "d2d49c2ab934f7ee910eb3cbb96eacdcbac042d0",
      "filename": "lib/stylesheet/watcher.rb",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/lib/stylesheet/watcher.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/lib/stylesheet/watcher.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/stylesheet/watcher.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -78,7 +78,7 @@ def start\n \n                 target = nil\n                 if !plugin_name\n-                  target_match = long.match(/admin|desktop|mobile/)\n+                  target_match = long.match(/admin|desktop|mobile|publish/)\n                   if target_match&.length\n                     target = target_match[0]\n                   end"
    },
    {
      "sha": "82ae26c573cfda30b02ddad5049f1eace195bfd1",
      "filename": "lib/topic_view.rb",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/lib/topic_view.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/lib/topic_view.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/topic_view.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -596,6 +596,10 @@ def queued_posts_count\n     ReviewableQueuedPost.viewable_by(@user).where(topic_id: @topic.id).pending.count\n   end\n \n+  def published_page\n+    @topic.published_page\n+  end\n+\n   protected\n \n   def read_posts_set"
    },
    {
      "sha": "97a1b0c2e0658f6dbc0e521af5c2d3699e80940f",
      "filename": "spec/components/guardian_spec.rb",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/spec/components/guardian_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/spec/components/guardian_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/components/guardian_spec.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -3476,4 +3476,36 @@\n       expect(guardian.auth_token).to eq(token.auth_token)\n     end\n   end\n+\n+  describe \"can_publish_page?\" do\n+    context \"when disabled\" do\n+      it \"is false for staff\" do\n+        expect(Guardian.new(admin).can_publish_page?(topic)).to eq(false)\n+      end\n+    end\n+\n+    context \"when enabled\" do\n+      before do\n+        SiteSetting.enable_page_publishing = true\n+      end\n+\n+      it \"is false for anonymous users\" do\n+        expect(Guardian.new.can_publish_page?(topic)).to eq(false)\n+      end\n+\n+      it \"is false for regular users\" do\n+        expect(Guardian.new(user).can_publish_page?(topic)).to eq(false)\n+      end\n+\n+      it \"is true for staff\" do\n+        expect(Guardian.new(moderator).can_publish_page?(topic)).to eq(true)\n+        expect(Guardian.new(admin).can_publish_page?(topic)).to eq(true)\n+      end\n+\n+      it \"is false if the topic is a private message\" do\n+        post = Fabricate(:private_message_post, user: admin)\n+        expect(Guardian.new(admin).can_publish_page?(post.topic)).to eq(false)\n+      end\n+    end\n+  end\n end"
    },
    {
      "sha": "44f8da98da2169d6670c99cd11e617822b5ba656",
      "filename": "spec/fabricators/published_page_fabricator.rb",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/spec/fabricators/published_page_fabricator.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/spec/fabricators/published_page_fabricator.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/fabricators/published_page_fabricator.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,6 @@\n+# frozen_string_literal: true\n+\n+Fabricator(:published_page) do\n+  topic\n+  slug \"published-page-test\"\n+end"
    },
    {
      "sha": "e863cdb47303d9f7a31a316918d1d5a41ad31c78",
      "filename": "spec/models/published_page_spec.rb",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/spec/models/published_page_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/spec/models/published_page_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/models/published_page_spec.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,27 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe PublishedPage, type: :model do\n+\n+  fab!(:topic) { Fabricate(:topic) }\n+\n+  it \"has path and url helpers\" do\n+    pp = PublishedPage.create!(topic: topic, slug: 'hello-world')\n+    expect(pp.path).to eq(\"/pub/hello-world\")\n+    expect(pp.url).to eq(Discourse.base_url + \"/pub/hello-world\")\n+  end\n+\n+  it \"validates the slug\" do\n+    expect(PublishedPage.new(topic: topic, slug: \"this-is-valid\")).to be_valid\n+    expect(PublishedPage.new(topic: topic, slug: \"10_things_i_hate_about_slugs\")).to be_valid\n+    expect(PublishedPage.new(topic: topic, slug: \"YELLING\")).to be_valid\n+\n+    expect(PublishedPage.new(topic: topic, slug: \"how about some space\")).not_to be_valid\n+    expect(PublishedPage.new(topic: topic, slug: \"slugs are %%%%\")).not_to be_valid\n+\n+    expect(PublishedPage.new(topic: topic, slug: \"check-slug\")).not_to be_valid\n+    expect(PublishedPage.new(topic: topic, slug: \"by-topic\")).not_to be_valid\n+  end\n+\n+end"
    },
    {
      "sha": "6b3a6894f46c3679cd3fa313f30ab7f2dd57edac",
      "filename": "spec/requests/published_pages_controller_spec.rb",
      "status": "added",
      "additions": 170,
      "deletions": 0,
      "changes": 170,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/spec/requests/published_pages_controller_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/spec/requests/published_pages_controller_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/requests/published_pages_controller_spec.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,170 @@\n+# frozen_string_literal: true\n+\n+require 'rails_helper'\n+\n+RSpec.describe PublishedPagesController do\n+  fab!(:published_page) { Fabricate(:published_page) }\n+  fab!(:admin) { Fabricate(:admin) }\n+  fab!(:user) { Fabricate(:user) }\n+\n+  context \"when enabled\" do\n+    before do\n+      SiteSetting.enable_page_publishing = true\n+    end\n+\n+    context \"check slug availability\" do\n+      it \"returns true for a new slug\" do\n+        get \"/pub/check-slug.json?slug=cool-slug-man\"\n+        expect(response).to be_successful\n+        expect(response.parsed_body[\"valid_slug\"]).to eq(true)\n+      end\n+\n+      it \"returns true for a new slug with whitespace\" do\n+        get \"/pub/check-slug.json?slug=cool-slug-man%20\"\n+        expect(response).to be_successful\n+        expect(response.parsed_body[\"valid_slug\"]).to eq(true)\n+      end\n+\n+      it \"returns false for an empty value\" do\n+        get \"/pub/check-slug.json?slug=\"\n+        expect(response).to be_successful\n+        expect(response.parsed_body[\"valid_slug\"]).to eq(false)\n+        expect(response.parsed_body[\"reason\"]).to be_present\n+      end\n+\n+      it \"returns false for a reserved value\" do\n+        get \"/pub/check-slug.json\", params: { slug: \"check-slug\" }\n+        expect(response).to be_successful\n+        expect(response.parsed_body[\"valid_slug\"]).to eq(false)\n+        expect(response.parsed_body[\"reason\"]).to be_present\n+      end\n+    end\n+\n+    context \"show\" do\n+      it \"returns 404 for a missing article\" do\n+        get \"/pub/no-article-here-no-thx\"\n+        expect(response.status).to eq(404)\n+      end\n+\n+      context \"private topic\" do\n+        fab!(:group) { Fabricate(:group) }\n+        fab!(:private_category) { Fabricate(:private_category, group: group) }\n+\n+        before do\n+          published_page.topic.update!(category: private_category)\n+        end\n+\n+        it \"returns 403 for a topic you can't see\" do\n+          get published_page.path\n+          expect(response.status).to eq(403)\n+        end\n+\n+        context \"as an admin\" do\n+          before do\n+            sign_in(admin)\n+          end\n+\n+          it \"returns 200\" do\n+            get published_page.path\n+            expect(response.status).to eq(200)\n+          end\n+        end\n+      end\n+\n+      it \"returns an error for an article you can't see\" do\n+        get \"/pub/no-article-here-no-thx\"\n+        expect(response.status).to eq(404)\n+      end\n+\n+      it \"returns 200 for a valid article\" do\n+        get published_page.path\n+        expect(response.status).to eq(200)\n+      end\n+    end\n+\n+    context \"publishing\" do\n+      fab!(:topic) { Fabricate(:topic) }\n+\n+      it \"returns invalid access for non-staff\" do\n+        sign_in(user)\n+        put \"/pub/by-topic/#{topic.id}.json\", params: { published_page: { slug: 'cant-do-this' } }\n+        expect(response.status).to eq(403)\n+      end\n+\n+      context \"with a valid staff account\" do\n+        before do\n+          sign_in(admin)\n+        end\n+\n+        it \"creates the published page record\" do\n+          put \"/pub/by-topic/#{topic.id}.json\", params: { published_page: { slug: 'i-hate-salt' } }\n+          expect(response).to be_successful\n+          expect(response.parsed_body['published_page']).to be_present\n+          expect(response.parsed_body['published_page']['slug']).to eq(\"i-hate-salt\")\n+\n+          expect(PublishedPage.exists?(topic_id: response.parsed_body['published_page']['id'])).to eq(true)\n+          expect(UserHistory.exists?(\n+            acting_user_id: admin.id,\n+            action: UserHistory.actions[:page_published],\n+            topic_id: topic.id\n+          )).to be(true)\n+        end\n+\n+        it \"returns an error if the slug is already taken\" do\n+          PublishedPage.create!(slug: 'i-hate-salt', topic: Fabricate(:topic))\n+          put \"/pub/by-topic/#{topic.id}.json\", params: { published_page: { slug: 'i-hate-salt' } }\n+          expect(response).not_to be_successful\n+        end\n+\n+        it \"returns an error if the topic already has been published\" do\n+          PublishedPage.create!(slug: 'already-done-pal', topic: topic)\n+          put \"/pub/by-topic/#{topic.id}.json\", params: { published_page: { slug: 'i-hate-salt' } }\n+          expect(response).to be_successful\n+          expect(PublishedPage.exists?(topic_id: topic.id)).to eq(true)\n+        end\n+\n+      end\n+    end\n+\n+    context \"destroy\" do\n+\n+      it \"returns invalid access for non-staff\" do\n+        sign_in(user)\n+        delete \"/pub/by-topic/#{published_page.topic_id}.json\"\n+        expect(response.status).to eq(403)\n+      end\n+\n+      context \"with a valid staff account\" do\n+        before do\n+          sign_in(admin)\n+        end\n+\n+        it \"deletes the record\" do\n+          topic_id = published_page.topic_id\n+\n+          delete \"/pub/by-topic/#{topic_id}.json\"\n+          expect(response).to be_successful\n+          expect(PublishedPage.exists?(slug: published_page.slug)).to eq(false)\n+\n+          expect(UserHistory.exists?(\n+            acting_user_id: admin.id,\n+            action: UserHistory.actions[:page_unpublished],\n+            topic_id: topic_id\n+          )).to be(true)\n+        end\n+      end\n+    end\n+  end\n+\n+  context \"when disabled\" do\n+    before do\n+      SiteSetting.enable_page_publishing = false\n+    end\n+\n+    it \"returns 404 for any article\" do\n+      get published_page.path\n+      expect(response.status).to eq(404)\n+    end\n+  end\n+\n+end"
    },
    {
      "sha": "a80f884812f4ebc6bd27ae62c280463c9d75ef86",
      "filename": "spec/serializers/topic_view_serializer_spec.rb",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/spec/serializers/topic_view_serializer_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/spec/serializers/topic_view_serializer_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/serializers/topic_view_serializer_spec.rb?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -258,6 +258,16 @@ def serialize_topic(topic, user_arg)\n       expect(details[:allowed_groups].find { |ag| ag[:id] == group.id }).to be_present\n     end\n \n+    it \"has can_publish_page if possible\" do\n+      SiteSetting.enable_page_publishing = true\n+\n+      json = serialize_topic(topic, user)\n+      expect(json[:details][:can_publish_page]).to be_blank\n+\n+      json = serialize_topic(topic, admin)\n+      expect(json[:details][:can_publish_page]).to eq(true)\n+    end\n+\n     context \"can_edit_tags\" do\n       before do\n         SiteSetting.tagging_enabled = true\n@@ -279,4 +289,26 @@ def serialize_topic(topic, user_arg)\n     end\n   end\n \n+  context \"published_page\" do\n+    fab!(:published_page) { Fabricate(:published_page, topic: topic) }\n+\n+    it \"doesn't return the published page if not enabled\" do\n+      json = serialize_topic(topic, admin)\n+      expect(json[:published_page]).to be_blank\n+    end\n+\n+    it \"doesn't return the published page unless staff\" do\n+      SiteSetting.enable_page_publishing = true\n+      json = serialize_topic(topic, user)\n+      expect(json[:published_page]).to be_blank\n+    end\n+\n+    it \"returns the published page if enabled and staff\" do\n+      SiteSetting.enable_page_publishing = true\n+      json = serialize_topic(topic, admin)\n+      expect(json[:published_page]).to be_present\n+      expect(json[:published_page][:slug]).to eq(\"published-page-test\")\n+    end\n+  end\n+\n end"
    },
    {
      "sha": "2b51229bb28dba94beb3a08d06de42c4d0594a65",
      "filename": "test/javascripts/acceptance/page-publishing-test.js",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/test/javascripts/acceptance/page-publishing-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/test/javascripts/acceptance/page-publishing-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/acceptance/page-publishing-test.js?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -0,0 +1,40 @@\n+import { acceptance } from \"helpers/qunit-helpers\";\n+\n+acceptance(\"Page Publishing\", {\n+  loggedIn: true,\n+  pretend(server, helper) {\n+    const validSlug = helper.response({ valid_slug: true });\n+\n+    server.put(\"/pub/by-topic/280\", () => {\n+      return helper.response({});\n+    });\n+    server.get(\"/pub/by-topic/280\", () => {\n+      return helper.response({});\n+    });\n+    server.get(\"/pub/check-slug\", req => {\n+      if (req.queryParams.slug === \"internationalization-localization\") {\n+        return validSlug;\n+      }\n+      return helper.response({\n+        valid_slug: false,\n+        reason: \"i don't need a reason\"\n+      });\n+    });\n+  }\n+});\n+QUnit.test(\"can publish a page via modal\", async assert => {\n+  await visit(\"/t/internationalization-localization/280\");\n+  await click(\".topic-post:eq(0) button.show-more-actions\");\n+  await click(\".topic-post:eq(0) button.show-post-admin-menu\");\n+  await click(\".topic-post:eq(0) .publish-page\");\n+\n+  await fillIn(\".publish-slug\", \"bad-slug\");\n+  assert.ok(!exists(\".valid-slug\"));\n+  assert.ok(exists(\".invalid-slug\"));\n+  await fillIn(\".publish-slug\", \"internationalization-localization\");\n+  assert.ok(exists(\".valid-slug\"));\n+  assert.ok(!exists(\".invalid-slug\"));\n+\n+  await click(\".publish-page\");\n+  assert.ok(exists(\".current-url\"));\n+});"
    },
    {
      "sha": "dedf9814b83eaaa714272189feffcf1be4e3c287",
      "filename": "test/javascripts/fixtures/topic.js",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/discourse/discourse/blob/e1f8014acd2877cda539b14b4694d9c077f6b36d/test/javascripts/fixtures/topic.js",
      "raw_url": "https://github.com/discourse/discourse/raw/e1f8014acd2877cda539b14b4694d9c077f6b36d/test/javascripts/fixtures/topic.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/fixtures/topic.js?ref=e1f8014acd2877cda539b14b4694d9c077f6b36d",
      "patch": "@@ -1977,6 +1977,7 @@ export default {\n     pinned: false,\n     pinned_at: null,\n     details: {\n+      can_publish_page: true,\n       can_invite_via_email: true,\n       auto_close_at: null,\n       auto_close_hours: null,"
    }
  ]
}
