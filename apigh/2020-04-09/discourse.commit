{
  "sha": "64ec771dc63eea5fb503481b590d656cfa885733",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODo2NGVjNzcxZGM2M2VlYTVmYjUwMzQ4MWI1OTBkNjU2Y2ZhODg1NzMz",
  "commit": {
    "author": {
      "name": "Roman Rizzi",
      "email": "rizziromanalejandro@gmail.com",
      "date": "2020-04-09T15:13:15Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-04-09T15:13:15Z"
    },
    "message": "REFACTOR: Resize controls (#9393)",
    "tree": {
      "sha": "64b159b1ae8eed7009079d859e4332da2043154c",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/64b159b1ae8eed7009079d859e4332da2043154c"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/64ec771dc63eea5fb503481b590d656cfa885733",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJejzuLCRBK7hj4Ov3rIwAAdHIIAICEW/x28sQ+eOK5p0KduV1G\nNOMmBO/PGKtkmmFfeWOlXhXzrPyuKApJjQZ6sJ5L8XNpe95QsbU0lL5tZll6Wq/H\nmdg9ow2Ztz7aKEtz3hpSqm/HDXMnlTHljSKLxgKX53a29Hj+q8lu6nJwgAyV4in8\ncJXa+CIuP9uo+p/KUF45VpmmtJgiiy08ltko2HxC5FQaxc3vhEN3P2i6pzfD9W8X\nC0tpH41G1REAYdfF8VslUiYuOwb48ycSrF0ppBzcSnBWi80gJqApJYVI0NjIVEyq\n2YMNd0iCMCPOsD6OLUnxySuWE9XadMgRwVhwXeHRFdNoY4Rq5r+63EcBl6LwHDk=\n=SiG9\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 64b159b1ae8eed7009079d859e4332da2043154c\nparent 81c7f369ebddbc788e8d8724616e122cedf504d4\nauthor Roman Rizzi <rizziromanalejandro@gmail.com> 1586445195 -0300\ncommitter GitHub <noreply@github.com> 1586445195 -0300\n\nREFACTOR: Resize controls (#9393)\n\n"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/64ec771dc63eea5fb503481b590d656cfa885733",
  "html_url": "https://github.com/discourse/discourse/commit/64ec771dc63eea5fb503481b590d656cfa885733",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/64ec771dc63eea5fb503481b590d656cfa885733/comments",
  "author": {
    "login": "romanrizzi",
    "id": 5025816,
    "node_id": "MDQ6VXNlcjUwMjU4MTY=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/5025816?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/romanrizzi",
    "html_url": "https://github.com/romanrizzi",
    "followers_url": "https://api.github.com/users/romanrizzi/followers",
    "following_url": "https://api.github.com/users/romanrizzi/following{/other_user}",
    "gists_url": "https://api.github.com/users/romanrizzi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/romanrizzi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/romanrizzi/subscriptions",
    "organizations_url": "https://api.github.com/users/romanrizzi/orgs",
    "repos_url": "https://api.github.com/users/romanrizzi/repos",
    "events_url": "https://api.github.com/users/romanrizzi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/romanrizzi/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "81c7f369ebddbc788e8d8724616e122cedf504d4",
      "url": "https://api.github.com/repos/discourse/discourse/commits/81c7f369ebddbc788e8d8724616e122cedf504d4",
      "html_url": "https://github.com/discourse/discourse/commit/81c7f369ebddbc788e8d8724616e122cedf504d4"
    }
  ],
  "stats": {
    "total": 150,
    "additions": 56,
    "deletions": 94
  },
  "files": [
    {
      "sha": "16e5a17aabe093c8a9dd24982e8564f21632b39c",
      "filename": "app/assets/javascripts/pretty-text/engines/discourse-markdown/resize-controls.js",
      "status": "modified",
      "additions": 56,
      "deletions": 94,
      "changes": 150,
      "blob_url": "https://github.com/discourse/discourse/blob/64ec771dc63eea5fb503481b590d656cfa885733/app/assets/javascripts/pretty-text/engines/discourse-markdown/resize-controls.js",
      "raw_url": "https://github.com/discourse/discourse/raw/64ec771dc63eea5fb503481b590d656cfa885733/app/assets/javascripts/pretty-text/engines/discourse-markdown/resize-controls.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/pretty-text/engines/discourse-markdown/resize-controls.js?ref=64ec771dc63eea5fb503481b590d656cfa885733",
      "patch": "@@ -1,3 +1,5 @@\n+const SCALES = [\"100\", \"75\", \"50\"];\n+\n function isUpload(token) {\n   return token.content.includes(\"upload://\");\n }\n@@ -6,131 +8,62 @@ function hasMetadata(token) {\n   return token.content.match(/(\\d{1,4}x\\d{1,4})/);\n }\n \n-function buildToken(state, type, tag, klass, nesting) {\n-  const token = new state.Token(type, tag, nesting);\n-  token.block = true;\n-  token.attrs = [[\"class\", klass]];\n-  return token;\n-}\n-\n-function wrapImage(tokens, index, state, imgNumber) {\n-  const imgToken = tokens[index];\n-  const sizePart = imgToken.content\n+function appendMetaData(index, token) {\n+  const sizePart = token.content\n     .split(\"|\")\n     .find(x => x.match(/\\d{1,4}x\\d{1,4}(,\\s*\\d{1,3}%)?/));\n   let selectedScale =\n     sizePart &&\n     sizePart\n       .split(\",\")\n       .pop()\n-      .trim();\n-  tokens.splice(\n-    index,\n-    0,\n-    buildToken(state, \"wrap_image_open\", \"span\", \"image-wrapper\", 1)\n-  );\n-\n-  const newElements = [];\n-  const btnWrapper = buildToken(\n-    state,\n-    \"wrap_button_open\",\n-    \"span\",\n-    \"button-wrapper\",\n-    1\n-  );\n-  btnWrapper.attrs.push([\"data-image-index\", imgNumber]);\n-  newElements.push(btnWrapper);\n-\n-  const minimumScale = 50;\n-  const scales = [100, 75, minimumScale];\n-  const overwriteScale = !scales.find(scale => `${scale}%` === selectedScale);\n-  if (overwriteScale) selectedScale = \"100%\";\n-\n-  scales.forEach(scale => {\n-    const scaleText = `${scale}%`;\n-\n-    const btnClass =\n-      scaleText === selectedScale ? \"scale-btn active\" : \"scale-btn\";\n-    const scaleBtn = buildToken(\n-      state,\n-      \"scale_button_open\",\n-      \"span\",\n-      btnClass,\n-      1\n-    );\n-    scaleBtn.attrs.push([\"data-scale\", scale]);\n-    newElements.push(scaleBtn);\n-\n-    let textToken = buildToken(state, \"text\", \"\", \"\", 0);\n-    textToken.content = scaleText;\n-    newElements.push(textToken);\n-\n-    newElements.push(buildToken(state, \"scale_button_close\", \"span\", \"\", -1));\n-\n-    if (scale !== minimumScale) {\n-      newElements.push(buildToken(state, \"separator\", \"span\", \"separator\", 1));\n-      let separatorToken = buildToken(state, \"text\", \"\", \"\", 0);\n-      separatorToken.content = \" â€¢ \";\n-      newElements.push(separatorToken);\n-      newElements.push(buildToken(state, \"separator_close\", \"span\", \"\", -1));\n-    }\n-  });\n-  newElements.push(buildToken(state, \"wrap_button_close\", \"span\", \"\", -1));\n-\n-  newElements.push(buildToken(state, \"wrap_image_close\", \"span\", \"\", -1));\n-\n-  const afterImageIndex = index + 2;\n-  tokens.splice(afterImageIndex, 0, ...newElements);\n-}\n+      .trim()\n+      .replace(\"%\", \"\");\n \n-function updateIndexes(indexes, name) {\n-  indexes[name].push(indexes.current);\n-  indexes.current++;\n-}\n+  const overwriteScale = !SCALES.find(scale => scale === selectedScale);\n+  if (overwriteScale) selectedScale = \"100\";\n \n-function wrapImages(tokens, tokenIndexes, state, imgNumberIndexes) {\n-  //We do this in reverse order because it's easier for #wrapImage to manipulate the tokens array.\n-  for (let j = tokenIndexes.length - 1; j >= 0; j--) {\n-    let index = tokenIndexes[j];\n-    wrapImage(tokens, index, state, imgNumberIndexes.pop());\n-  }\n+  token.attrs.push([\"index-image\", index]);\n+  token.attrs.push([\"scale\", selectedScale]);\n }\n \n function rule(state) {\n-  let blockIndexes = [];\n-  const indexNumbers = { current: 0, blocks: [], childrens: [] };\n+  let currentIndex = 0;\n \n   for (let i = 0; i < state.tokens.length; i++) {\n     let blockToken = state.tokens[i];\n     const blockTokenImage = blockToken.tag === \"img\";\n \n     if (blockTokenImage && isUpload(blockToken) && hasMetadata(blockToken)) {\n-      blockIndexes.push(i);\n-      updateIndexes(indexNumbers, \"blocks\");\n+      appendMetaData(currentIndex, blockToken);\n+      currentIndex++;\n     }\n \n     if (!blockToken.children) continue;\n \n-    const childrenIndexes = [];\n     for (let j = 0; j < blockToken.children.length; j++) {\n       let token = blockToken.children[j];\n       const childrenImage = token.tag === \"img\";\n \n       if (childrenImage && isUpload(blockToken) && hasMetadata(token)) {\n-        childrenIndexes.push(j);\n-        updateIndexes(indexNumbers, \"childrens\");\n+        appendMetaData(currentIndex, token);\n+        currentIndex++;\n       }\n     }\n-\n-    wrapImages(\n-      blockToken.children,\n-      childrenIndexes,\n-      state,\n-      indexNumbers.childrens\n-    );\n   }\n+}\n \n-  wrapImages(state.tokens, blockIndexes, state, indexNumbers.blocks);\n+function buildScaleButton(selectedScale, scale) {\n+  const activeScaleClass = selectedScale === scale ? \"active\" : \"\";\n+  return (\n+    \"<span class='scale-btn\" +\n+    activeScaleClass +\n+    \"' data-scale='\" +\n+    scale +\n+    \"'>\" +\n+    scale +\n+    \"%</span>\"\n+  );\n }\n \n export function setup(helper) {\n@@ -147,6 +80,35 @@ export function setup(helper) {\n     ]);\n \n     helper.registerPlugin(md => {\n+      const oldRule = md.renderer.rules.image;\n+\n+      md.renderer.rules.image = function(tokens, idx, options, env, slf) {\n+        const token = tokens[idx];\n+        const scaleIndex = token.attrIndex(\"scale\");\n+        const imageIndex = token.attrIndex(\"index-image\");\n+\n+        if (scaleIndex !== -1) {\n+          var selectedScale = token.attrs[scaleIndex][1];\n+          var index = token.attrs[imageIndex][1];\n+\n+          let result = \"<span class='image-wrapper'>\";\n+          result += oldRule(tokens, idx, options, env, slf);\n+\n+          result +=\n+            \"<span class='button-wrapper' data-image-index='\" + index + \"'>\";\n+\n+          result += SCALES.map(scale =>\n+            buildScaleButton(selectedScale, scale)\n+          ).join(\"<span class='separator'>&nbsp;â€¢&nbsp;</span>\");\n+\n+          result += \"</span></span>\";\n+\n+          return result;\n+        } else {\n+          return oldRule(tokens, idx, options, env, slf);\n+        }\n+      };\n+\n       md.core.ruler.after(\"upload-protocol\", \"resize-controls\", rule);\n     });\n   }"
    }
  ]
}
