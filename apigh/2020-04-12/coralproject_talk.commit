{
  "sha": "4194b08a128e31ea4028e662f13dadd27aa1db70",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6NDE5NGIwOGExMjhlMzFlYTQwMjhlNjYyZjEzZGFkZDI3YWExZGI3MA==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2020-04-10T16:15:09Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-04-10T16:15:09Z"
    },
    "message": "[CORL-1002] Queue Improvements (#2931)\n\n* fix: improved count handler for stories not found\r\n\r\n* feat: removed performance-now\r\n\r\n* feat: cleaned up processors, exposed counts\r\n\r\n* feat: increased verb of schd jobs\r\n\r\n* fix: removed dead code",
    "tree": {
      "sha": "6a338573eccd0c42080c21f7428492252d22e71a",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/6a338573eccd0c42080c21f7428492252d22e71a"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/4194b08a128e31ea4028e662f13dadd27aa1db70",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJekJuNCRBK7hj4Ov3rIwAAdHIIAEp/QwmOrXrCDw0WSRR9JGaI\nLcaJh4RMoZ3TDDQc+BSkVBPk304iknzrX8Ls8lcRVqEMSQSwiPIdippqqj3VSdui\nzd1dkBndGbc1B9sUc4kaB1DSuILhR0H8Z+R7r5fO8VdXYGlgvsQh/lt6oXp41wRz\nbEllzu6IzHhhpdWTP/GSFslvMl7iEKK6JyK/s7CNRM5amqvEwlTT1CvV4eYPTVCs\nOGiByJZfbKtZtUr+3k1548mT97q755lZC13HYbR3uncAl+okEgjd1cSopxvYank6\nNte52oRAPBtvDNOqjKcTn8RM78EIgxDFY9gO7qf5X+rnbGJH75pUu/Fuz1EkrFo=\n=M03r\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 6a338573eccd0c42080c21f7428492252d22e71a\nparent 98e6a3ccc76bdb9664cd4fb8396c700d39308696\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1586535309 +0000\ncommitter GitHub <noreply@github.com> 1586535309 +0000\n\n[CORL-1002] Queue Improvements (#2931)\n\n* fix: improved count handler for stories not found\r\n\r\n* feat: removed performance-now\r\n\r\n* feat: cleaned up processors, exposed counts\r\n\r\n* feat: increased verb of schd jobs\r\n\r\n* fix: removed dead code"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/4194b08a128e31ea4028e662f13dadd27aa1db70",
  "html_url": "https://github.com/coralproject/talk/commit/4194b08a128e31ea4028e662f13dadd27aa1db70",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/4194b08a128e31ea4028e662f13dadd27aa1db70/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "98e6a3ccc76bdb9664cd4fb8396c700d39308696",
      "url": "https://api.github.com/repos/coralproject/talk/commits/98e6a3ccc76bdb9664cd4fb8396c700d39308696",
      "html_url": "https://github.com/coralproject/talk/commit/98e6a3ccc76bdb9664cd4fb8396c700d39308696"
    }
  ],
  "stats": {
    "total": 683,
    "additions": 352,
    "deletions": 331
  },
  "files": [
    {
      "sha": "76330e32644ae0e48c8f409f1af96cf2fd5e9b29",
      "filename": "package.json",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/package.json",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/package.json",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/package.json?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -128,7 +128,6 @@\n     \"passport-local\": \"^1.0.0\",\n     \"passport-oauth2\": \"^1.4.0\",\n     \"passport-strategy\": \"^1.0.0\",\n-    \"performance-now\": \"^2.1.0\",\n     \"permit\": \"^0.2.4\",\n     \"prom-client\": \"^11.3.0\",\n     \"proxy-agent\": \"^3.1.1\","
    },
    {
      "sha": "0800c6604c88e995c9816957cf1a6ca54f188600",
      "filename": "src/core/server/app/handlers/api/graphql.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/app/handlers/api/graphql.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/app/handlers/api/graphql.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/graphql.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -9,16 +9,18 @@ export type GraphMiddlewareOptions = Pick<\n   | \"config\"\n   | \"i18n\"\n   | \"mailerQueue\"\n+  | \"scraperQueue\"\n+  | \"rejectorQueue\"\n+  | \"notifierQueue\"\n+  | \"webhookQueue\"\n   | \"mongo\"\n   | \"redis\"\n   | \"schema\"\n-  | \"scraperQueue\"\n   | \"signingConfig\"\n   | \"pubsub\"\n   | \"tenantCache\"\n   | \"metrics\"\n   | \"broker\"\n-  | \"rejectorQueue\"\n >;\n \n export const graphQLHandler = ({"
    },
    {
      "sha": "28412c1b66ae2bf6610a9b67bf02454d3a90dc0f",
      "filename": "src/core/server/app/handlers/api/story/count.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/app/handlers/api/story/count.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/app/handlers/api/story/count.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/handlers/api/story/count.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -29,13 +29,10 @@ export const countHandler = ({ mongo, i18n }: CountOptions): RequestHandler => {\n         id: req.query.id,\n         url: req.query.url,\n       });\n-      if (!story) {\n-        throw new Error(\"Story not found\");\n-      }\n \n-      const count = calculateTotalPublishedCommentCount(\n-        story.commentCounts.status\n-      );\n+      const count = story\n+        ? calculateTotalPublishedCommentCount(story.commentCounts.status)\n+        : 0;\n \n       let html = \"\";\n       if (req.query.notext === \"true\") {"
    },
    {
      "sha": "f7913682d281eb88e686267faf5113e8e8b2c309",
      "filename": "src/core/server/app/index.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/app/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/app/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/index.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -18,8 +18,10 @@ import { Config } from \"coral-server/config\";\n import CoralEventListenerBroker from \"coral-server/events/publisher\";\n import logger from \"coral-server/logger\";\n import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n+import { NotifierQueue } from \"coral-server/queue/tasks/notifier\";\n import { RejectorQueue } from \"coral-server/queue/tasks/rejector\";\n import { ScraperQueue } from \"coral-server/queue/tasks/scraper\";\n+import { WebhookQueue } from \"coral-server/queue/tasks/webhook\";\n import { I18n } from \"coral-server/services/i18n\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n import { Metrics } from \"coral-server/services/metrics\";\n@@ -40,6 +42,10 @@ export interface AppOptions {\n   disableClientRoutes: boolean;\n   i18n: I18n;\n   mailerQueue: MailerQueue;\n+  scraperQueue: ScraperQueue;\n+  rejectorQueue: RejectorQueue;\n+  webhookQueue: WebhookQueue;\n+  notifierQueue: NotifierQueue;\n   metrics?: Metrics;\n   mongo: Db;\n   parent: Express;\n@@ -48,12 +54,10 @@ export interface AppOptions {\n   pubsub: RedisPubSub;\n   redis: AugmentedRedis;\n   schema: GraphQLSchema;\n-  scraperQueue: ScraperQueue;\n   signingConfig: JWTSigningConfig;\n   tenantCache: TenantCache;\n   migrationManager: MigrationManager;\n   broker: CoralEventListenerBroker;\n-  rejectorQueue: RejectorQueue;\n }\n \n /**"
    },
    {
      "sha": "354a8e119c1d566fdb56333504fcf7d59629b5c2",
      "filename": "src/core/server/app/middleware/logging.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/app/middleware/logging.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/app/middleware/logging.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/logging.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,12 +1,12 @@\n+import { Request, Response } from \"express\";\n import onFinished from \"on-finished\";\n-import now from \"performance-now\";\n \n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import {\n   ErrorRequestHandler,\n   RequestHandler,\n } from \"coral-server/types/express\";\n-import { Request, Response } from \"express\";\n \n const extractMetadata = (req: Request, res: Response) => ({\n   url: req.originalUrl || req.url,\n@@ -18,11 +18,10 @@ const extractMetadata = (req: Request, res: Response) => ({\n });\n \n export const accessLogger: RequestHandler = (req, res, next) => {\n-  const startTime = now();\n-\n+  const timer = createTimer();\n   onFinished(res, () => {\n     // Compute the end time.\n-    const responseTime = Math.round(now() - startTime);\n+    const responseTime = timer();\n \n     // Grab the logger.\n     const log = req.coral ? req.coral.logger : logger;"
    },
    {
      "sha": "621dca056e691045901a0cdf57a6a44ea0f476f8",
      "filename": "src/core/server/app/middleware/metrics.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/app/middleware/metrics.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/app/middleware/metrics.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/middleware/metrics.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,6 +1,6 @@\n import onFinished from \"on-finished\";\n-import now from \"performance-now\";\n \n+import { createTimer } from \"coral-server/helpers\";\n import { Metrics } from \"coral-server/services/metrics\";\n import { RequestHandler } from \"coral-server/types/express\";\n \n@@ -11,11 +11,10 @@ export const metricsRecorder = ({\n   httpRequestDurationMilliseconds,\n }: Metrics): RequestHandler => {\n   return (req, res, next) => {\n-    const startTime = now();\n-\n+    const timer = createTimer();\n     onFinished(res, () => {\n       // Compute the end time.\n-      const responseTime = Math.round(now() - startTime);\n+      const responseTime = timer();\n \n       // Increment the request counter.\n       httpRequestsTotal.labels(`${res.statusCode}`, req.method).inc();"
    },
    {
      "sha": "0dfd37ff715c5a02f613d56d28d9748233b6bb27",
      "filename": "src/core/server/config.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 25,
      "changes": 36,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/config.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/config.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/config.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -94,188 +94,174 @@ const config = convict({\n     format: String,\n     default: \"\",\n     env: \"TRUST_PROXY\",\n-    arg: \"trustProxy\",\n   },\n   enable_graphiql: {\n     doc: \"When true, this will enable the GraphiQL interface at /graphiql\",\n     format: Boolean,\n     default: false,\n     env: \"ENABLE_GRAPHIQL\",\n-    arg: \"enableGraphiQL\",\n   },\n   concurrency: {\n     doc: \"The number of worker nodes to spawn to handle traffic\",\n     format: Number,\n     default: os.cpus().length,\n     env: \"CONCURRENCY\",\n-    arg: \"concurrency\",\n   },\n   port: {\n     doc: \"The port to bind.\",\n     format: \"port\",\n     default: 3000,\n     env: \"PORT\",\n-    arg: \"port\",\n   },\n   cluster_metrics_port: {\n     doc: \"The port to bind for cluster metrics.\",\n     format: \"port\",\n     default: 3001,\n     env: \"CLUSTER_METRICS_PORT\",\n-    arg: \"clusterMetricsPort\",\n   },\n   metrics_username: {\n     doc: \"The username to use to authenticate to the metrics endpoint.\",\n     format: \"String\",\n     default: \"\",\n     env: \"METRICS_USERNAME\",\n-    arg: \"metricsUsername\",\n   },\n   metrics_password: {\n     doc: \"The password to use to authenticate to the metrics endpoint.\",\n     format: \"String\",\n     default: \"\",\n     env: \"METRICS_PASSWORD\",\n-    arg: \"metricsPassword\",\n+\n     sensitive: true,\n   },\n   dev_port: {\n     doc: \"The port to bind for the Webpack Dev Server.\",\n     format: \"port\",\n     default: 8080,\n     env: \"DEV_PORT\",\n-    arg: \"dev-port\",\n   },\n   mongodb: {\n     doc: \"The MongoDB database to connect to.\",\n     format: \"mongo-uri\",\n     default: \"mongodb://127.0.0.1:27017/coral\",\n     env: \"MONGODB_URI\",\n-    arg: \"mongodb\",\n+\n     sensitive: true,\n   },\n   redis: {\n     doc: \"The Redis database to connect to.\",\n     format: \"redis-uri\",\n     default: \"redis://127.0.0.1:6379\",\n     env: \"REDIS_URI\",\n-    arg: \"redis\",\n+\n     sensitive: true,\n   },\n   redis_options: {\n     doc: \"The Redis options to connect to Redis Server.\",\n     format: Object,\n     default: {},\n     env: \"REDIS_OPTIONS\",\n-    arg: \"redisOptions\",\n   },\n   signing_secret: {\n     doc:\n       \"The shared secret to use to sign JSON Web Tokens (JWT) with the selected signing algorithm.\",\n     format: \"*\",\n     default: \"keyboard cat\", // TODO: (wyattjoh) evaluate best solution\n     env: \"SIGNING_SECRET\",\n-    arg: \"signingSecret\",\n+\n     sensitive: true,\n   },\n   signing_algorithm: {\n     doc: \"The signing algorithm used to sign JSON Web Tokens (JWT).\",\n     format: algorithms,\n     default: \"HS256\",\n     env: \"SIGNING_ALGORITHM\",\n-    arg: \"signingAlgorithm\",\n   },\n   management_signing_secret: {\n     doc: \"The secret used to verify management API requests.\",\n     format: \"*\",\n     default: null,\n     env: \"MANAGEMENT_SIGNING_SECRET\",\n-    arg: \"managementSigningSecret\",\n+\n     sensitive: true,\n   },\n   management_signing_algorithm: {\n     doc: \"The algorithm used to sign management API requests\",\n     format: algorithms,\n     default: \"HS256\",\n     env: \"MANAGEMENT_SIGNING_ALGORITHM\",\n-    arg: \"managementSigningAlgorithm\",\n   },\n   logging_level: {\n     doc: \"The logging level to print to the console\",\n     format: [\"fatal\", \"error\", \"warn\", \"info\", \"debug\", \"trace\"],\n     default: \"info\",\n     env: \"LOGGING_LEVEL\",\n-    arg: \"logging\",\n   },\n   static_uri: {\n     doc: \"The URL that static assets will be hosted from\",\n     format: \"optional-url\",\n     default: \"\",\n     env: \"STATIC_URI\",\n-    arg: \"staticURI\",\n   },\n   websocket_keep_alive_timeout: {\n     doc:\n       \"The keepalive timeout (in ms) that should be used to send keep alive messages through the websocket to keep the socket alive\",\n     format: \"ms\",\n     default: \"30 seconds\",\n     env: \"WEBSOCKET_KEEP_ALIVE_TIMEOUT\",\n-    arg: \"websocketKeepAliveTimeout\",\n   },\n   disable_tenant_caching: {\n     doc:\n       \"Disables the tenant caching, all tenants will be loaded from MongoDB each time it's needed\",\n     format: Boolean,\n     default: false,\n     env: \"DISABLE_TENANT_CACHING\",\n-    arg: \"disableTenantCaching\",\n   },\n   disable_live_updates: {\n     doc:\n       \"Disables subscriptions for the comment stream for all stories across all tenants\",\n     format: Boolean,\n     default: false,\n     env: \"DISABLE_LIVE_UPDATES\",\n-    arg: \"disableLiveUpdates\",\n   },\n   disable_client_routes: {\n     doc:\n       \"Disables mounting of client routes for developing with Webpack Dev Server\",\n     format: Boolean,\n     default: false,\n     env: \"DISABLE_CLIENT_ROUTES\",\n-    arg: \"disableClientRoutes\",\n   },\n   disable_rate_limiters: {\n     doc:\n       \"Disables the rate limiters in development. This will only work when also set to a development environment\",\n     format: Boolean,\n     default: false,\n     env: \"DISABLE_RATE_LIMITERS\",\n-    arg: \"disableRateLimiters\",\n   },\n   scrape_timeout: {\n     doc: \"The request timeout (in ms) for scraping operations.\",\n     format: \"ms\",\n     default: \"10 seconds\",\n     env: \"SCRAPE_TIMEOUT\",\n-    arg: \"scrapeTimeout\",\n   },\n   perspective_timeout: {\n     doc:\n       \"The request timeout (in ms) for perspective comment checking operations.\",\n     format: \"ms\",\n     default: \"800 milliseconds\",\n     env: \"PERSPECTIVE_TIMEOUT\",\n-    arg: \"perspectiveTimeout\",\n   },\n   force_ssl: {\n     doc:\n       \"Forces SSL in production by redirecting all HTTP requests to HTTPS, and sending HSTS headers.\",\n     format: Boolean,\n     default: false,\n     env: \"FORCE_SSL\",\n-    arg: \"forceSSL\",\n+  },\n+  disable_job_processors: {\n+    doc: \"Disables job processors when running.\",\n+    format: Boolean,\n+    default: false,\n+    env: \"DISABLE_JOB_PROCESSORS\",\n   },\n });\n "
    },
    {
      "sha": "b0fca0a7ddf6565998154807f268f2f791a71cf4",
      "filename": "src/core/server/cron/scheduled/job.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/cron/scheduled/job.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/cron/scheduled/job.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/cron/scheduled/job.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,7 +1,7 @@\n import { CronCommand, CronJob } from \"cron\";\n-import now from \"performance-now\";\n import uuid from \"uuid\";\n \n+import { createTimer } from \"coral-server/helpers\";\n import logger, { Logger } from \"coral-server/logger\";\n \n export type ScheduledJobCommand<T extends {}> = (\n@@ -40,18 +40,16 @@ export class ScheduledJob<T extends {} = {}> {\n   private command(command: ScheduledJobCommand<T>): CronCommand {\n     return async () => {\n       const log = this.log.child({ scheduledExecutionID: uuid.v1() }, true);\n-      log.debug(\"now starting scheduled job\");\n-      const start = now();\n+      log.info(\"now starting scheduled job\");\n+      const timer = createTimer();\n       try {\n         await command({\n           ...this.context,\n           log,\n         });\n-        const processingTime = Math.floor(now() - start);\n-        log.debug({ processingTime }, \"now finished scheduled job\");\n+        log.info({ took: timer() }, \"now finished scheduled job\");\n       } catch (err) {\n-        const processingTime = Math.floor(now() - start);\n-        log.error({ err, processingTime }, \"failed to run scheduled job\");\n+        log.error({ err, took: timer() }, \"failed to run scheduled job\");\n       }\n     };\n   }"
    },
    {
      "sha": "07146519a87ee295e480c741cc5a660bfc9e8fc8",
      "filename": "src/core/server/graph/context.ts",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/context.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/context.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/context.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -12,8 +12,10 @@ import { PersistedQuery } from \"coral-server/models/queries\";\n import { Tenant } from \"coral-server/models/tenant\";\n import { User } from \"coral-server/models/user\";\n import { MailerQueue } from \"coral-server/queue/tasks/mailer\";\n+import { NotifierQueue } from \"coral-server/queue/tasks/notifier\";\n import { RejectorQueue } from \"coral-server/queue/tasks/rejector\";\n import { ScraperQueue } from \"coral-server/queue/tasks/scraper\";\n+import { WebhookQueue } from \"coral-server/queue/tasks/webhook\";\n import { I18n } from \"coral-server/services/i18n\";\n import { JWTSigningConfig } from \"coral-server/services/jwt\";\n import { AugmentedRedis } from \"coral-server/services/redis\";\n@@ -38,11 +40,13 @@ export interface GraphContextOptions {\n   config: Config;\n   i18n: I18n;\n   mailerQueue: MailerQueue;\n+  rejectorQueue: RejectorQueue;\n+  scraperQueue: ScraperQueue;\n+  webhookQueue: WebhookQueue;\n+  notifierQueue: NotifierQueue;\n   mongo: Db;\n   pubsub: RedisPubSub;\n   redis: AugmentedRedis;\n-  rejectorQueue: RejectorQueue;\n-  scraperQueue: ScraperQueue;\n   tenant: Tenant;\n   tenantCache: TenantCache;\n   broker: CoralEventListenerBroker;\n@@ -58,13 +62,15 @@ export default class GraphContext {\n   public readonly loaders: ReturnType<typeof loaders>;\n   public readonly logger: Logger;\n   public readonly mailerQueue: MailerQueue;\n+  public readonly rejectorQueue: RejectorQueue;\n+  public readonly scraperQueue: ScraperQueue;\n+  public readonly webhookQueue: WebhookQueue;\n+  public readonly notifierQueue: NotifierQueue;\n   public readonly mongo: Db;\n   public readonly mutators: ReturnType<typeof mutators>;\n   public readonly now: Date;\n   public readonly pubsub: RedisPubSub;\n   public readonly redis: AugmentedRedis;\n-  public readonly rejectorQueue: RejectorQueue;\n-  public readonly scraperQueue: ScraperQueue;\n   public readonly tenant: Tenant;\n   public readonly tenantCache: TenantCache;\n \n@@ -98,6 +104,8 @@ export default class GraphContext {\n     this.scraperQueue = options.scraperQueue;\n     this.mailerQueue = options.mailerQueue;\n     this.rejectorQueue = options.rejectorQueue;\n+    this.notifierQueue = options.notifierQueue;\n+    this.webhookQueue = options.webhookQueue;\n     this.signingConfig = options.signingConfig;\n     this.clientID = options.clientID;\n "
    },
    {
      "sha": "8c00737e6a54bf4bd62d6780ac7d410c1c88550b",
      "filename": "src/core/server/graph/extensions/LoggerExtension.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/extensions/LoggerExtension.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/extensions/LoggerExtension.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/extensions/LoggerExtension.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -4,9 +4,9 @@ import {\n   GraphQLExtension,\n   GraphQLResponse,\n } from \"graphql-extensions\";\n-import now from \"performance-now\";\n \n import GraphContext from \"coral-server/graph/context\";\n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n \n import { getOperationMetadata, getPersistedQueryMetadata } from \"./helpers\";\n@@ -84,17 +84,14 @@ export class LoggerExtension implements GraphQLExtension<GraphContext> {\n     if (o.executionArgs.contextValue) {\n       // Grab the start time so we can calculate the time it takes to execute\n       // the graph query.\n-      const startTime = now();\n+      const timer = createTimer();\n       return () => {\n-        // Compute the end time.\n-        const responseTime = Math.round(now() - startTime);\n-\n         // Log out the details of the request.\n         logQuery(\n           o.executionArgs.contextValue,\n           o.executionArgs.document,\n           undefined,\n-          responseTime\n+          timer()\n         );\n       };\n     }"
    },
    {
      "sha": "96d66f82f771592a00c460a85c30d7ca5a0f571e",
      "filename": "src/core/server/graph/extensions/MetricsExtension.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/extensions/MetricsExtension.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/extensions/MetricsExtension.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/extensions/MetricsExtension.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,8 +1,9 @@\n-import GraphContext from \"coral-server/graph/context\";\n-import { Metrics } from \"coral-server/services/metrics\";\n import { ExecutionArgs } from \"graphql\";\n import { EndHandler, GraphQLExtension } from \"graphql-extensions\";\n-import now from \"performance-now\";\n+\n+import GraphContext from \"coral-server/graph/context\";\n+import { createTimer } from \"coral-server/helpers\";\n+import { Metrics } from \"coral-server/services/metrics\";\n \n import { getOperationMetadata } from \"./helpers\";\n \n@@ -16,10 +17,10 @@ export class MetricsExtension implements GraphQLExtension<GraphContext> {\n     if (o.executionArgs.contextValue) {\n       // Grab the start time so we can calculate the time it takes to execute\n       // the graph query.\n-      const startTime = now();\n+      const timer = createTimer();\n       return () => {\n         // Compute the end time.\n-        const responseTime = Math.round(now() - startTime);\n+        const responseTime = timer();\n \n         // Get the request metadata.\n         const { operation, operationName } = getOperationMetadata("
    },
    {
      "sha": "9b14a113258b16f6e8d8a7a2788750e57ab6dd0f",
      "filename": "src/core/server/graph/resolvers/Query.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/resolvers/Query.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/resolvers/Query.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/Query.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -28,4 +28,5 @@ export const Query: Required<GQLQueryTypeResolver<void>> = {\n   sites: (source, args, ctx) => ctx.loaders.Sites.connection(args),\n   site: (source, { id }, ctx) => (id ? ctx.loaders.Sites.site.load(id) : null),\n   webhookEndpoint: (source, { id }, ctx) => getWebhookEndpoint(ctx.tenant, id),\n+  queues: () => ({}),\n };"
    },
    {
      "sha": "d6b8b9991c787926ab342646dcbe4b579dfc8055",
      "filename": "src/core/server/graph/resolvers/Queue.ts",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/resolvers/Queue.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/resolvers/Queue.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/Queue.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -0,0 +1,12 @@\n+import {\n+  GQLQueueCounts,\n+  GQLQueueTypeResolver,\n+} from \"../schema/__generated__/types\";\n+\n+export interface QueueInput {\n+  counts(): Promise<GQLQueueCounts>;\n+}\n+\n+export const Queue: Required<GQLQueueTypeResolver<QueueInput>> = {\n+  counts: t => t.counts(),\n+};"
    },
    {
      "sha": "bdb1054225d8256c358b961fab267aaaaa41cda9",
      "filename": "src/core/server/graph/resolvers/Queues.ts",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/resolvers/Queues.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/resolvers/Queues.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/Queues.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -0,0 +1,23 @@\n+import { GQLQueuesTypeResolver } from \"../schema/__generated__/types\";\n+\n+import GraphContext from \"../context\";\n+import { QueueInput } from \"./Queue\";\n+\n+/**\n+ * get produces a resolver that maps the context to a QueueInput.\n+ *\n+ * @param fn the function to map the ctx to the queue.\n+ */\n+const get = (fn: (ctx: GraphContext) => QueueInput) => (\n+  parent: any,\n+  args: any,\n+  ctx: GraphContext\n+) => fn(ctx);\n+\n+export const Queues: Required<GQLQueuesTypeResolver> = {\n+  mailer: get(ctx => ctx.mailerQueue),\n+  scraper: get(ctx => ctx.scraperQueue),\n+  notifier: get(ctx => ctx.notifierQueue),\n+  webhook: get(ctx => ctx.webhookQueue),\n+  rejector: get(ctx => ctx.rejectorQueue),\n+};"
    },
    {
      "sha": "905d26a764b6e84beb496509b6ac99a446601f74",
      "filename": "src/core/server/graph/resolvers/index.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/resolvers/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/resolvers/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/resolvers/index.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -35,6 +35,8 @@ import { PremodStatus } from \"./PremodStatus\";\n import { PremodStatusHistory } from \"./PremodStatusHistory\";\n import { Profile } from \"./Profile\";\n import { Query } from \"./Query\";\n+import { Queue } from \"./Queue\";\n+import { Queues } from \"./Queues\";\n import { RecentCommentHistory } from \"./RecentCommentHistory\";\n import { RejectCommentPayload } from \"./RejectCommentPayload\";\n import { Secret } from \"./Secret\";\n@@ -99,6 +101,8 @@ const Resolvers: GQLResolver = {\n   Tag,\n   Time,\n   User,\n+  Queue,\n+  Queues,\n   UsernameHistory,\n   UsernameStatus,\n   UserStatus,"
    },
    {
      "sha": "114c5cf818ac24be4b5bbdca204d8266b9ea33b0",
      "filename": "src/core/server/graph/schema/schema.graphql",
      "status": "modified",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/schema/schema.graphql",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/graph/schema/schema.graphql",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/schema/schema.graphql?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -2997,6 +2997,62 @@ type StoriesConnection {\n   pageInfo: PageInfo!\n }\n \n+################################################################################\n+## Queue\n+################################################################################\n+\n+type QueueCounts {\n+  \"\"\"\n+  waiting is the number of jobs that are in line to be processed.\n+  \"\"\"\n+  waiting: Int!\n+\n+  \"\"\"\n+  active is the number of jobs that are being activly processed.\n+  \"\"\"\n+  active: Int!\n+\n+  \"\"\"\n+  delayed is the number of jobs that have been delayed due to a failure and are\n+  waiting for a backoff.\n+  \"\"\"\n+  delayed: Int!\n+}\n+\n+type Queue {\n+  \"\"\"\n+  counts is the current counts associated with the Queue.\n+  \"\"\"\n+  counts: QueueCounts!\n+}\n+\n+type Queues {\n+  \"\"\"\n+  mailer is the Queue associated with the Mailer queue.\n+  \"\"\"\n+  mailer: Queue!\n+\n+  \"\"\"\n+  scraper is the Queue associated with the Scraper queue.\n+  \"\"\"\n+  scraper: Queue!\n+\n+  \"\"\"\n+  notifier is the Queue associated with the Notifier queue.\n+  \"\"\"\n+  notifier: Queue!\n+\n+  \"\"\"\n+  webhook is the Queue associated with the Webhook queue.\n+  \"\"\"\n+  webhook: Queue!\n+\n+  \"\"\"\n+  rejector is the Queue associated with the Rejector queue.\n+  \"\"\"\n+  rejector: Queue!\n+}\n+\n ################################################################################\n ## Query\n ################################################################################\n@@ -3119,6 +3175,11 @@ type Query {\n   webhookEndpint will return a specific WebhookEndpoint if it exists.\n   \"\"\"\n   webhookEndpoint(id: ID!): WebhookEndpoint @auth(roles: [ADMIN])\n+\n+  \"\"\"\n+  queues returns information on queues used in Coral to manage\n+  \"\"\"\n+  queues: Queues! @auth(roles: [ADMIN])\n }\n \n ################################################################################"
    },
    {
      "sha": "72296661f682458b94ea3c8d2fc78d2de22e4a30",
      "filename": "src/core/server/helpers/createTimer.ts",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/helpers/createTimer.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/helpers/createTimer.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/helpers/createTimer.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -0,0 +1,14 @@\n+/**\n+ * createTimer will create a new timer that can be called again to get the\n+ * milliseconds since the timer was created.\n+ *\n+ */\n+const createTimer = () => {\n+  const start = Date.now();\n+  return () => {\n+    const finish = Date.now();\n+    return finish - start;\n+  };\n+};\n+\n+export default createTimer;"
    },
    {
      "sha": "f2469b295ae370c9e5c56bbaadfc9e519e968634",
      "filename": "src/core/server/helpers/index.ts",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/helpers/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/helpers/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/helpers/index.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -0,0 +1 @@\n+export { default as createTimer } from \"./createTimer\";"
    },
    {
      "sha": "e7f3ff73ea4fbd50bbb2513690e3145ddab63ed5",
      "filename": "src/core/server/index.ts",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/index.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -201,7 +201,7 @@ class Server {\n     await this.tenantCache.primeAll();\n \n     // Create the Job Queue.\n-    this.tasks = await createQueue({\n+    this.tasks = createQueue({\n       config: this.config,\n       mongo: this.mongo,\n       redis: this.redis,\n@@ -253,11 +253,17 @@ class Server {\n     await this.persistedQueryCache.prime();\n \n     // Launch all of the job processors.\n-    this.tasks.mailer.process();\n-    this.tasks.scraper.process();\n-    this.tasks.notifier.process();\n-    this.tasks.webhook.process();\n-    this.tasks.rejector.process();\n+    if (!this.config.get(\"disable_job_processors\")) {\n+      logger.info(\"job processing is enabled, starting job processors\");\n+\n+      this.tasks.mailer.process();\n+      this.tasks.scraper.process();\n+      this.tasks.notifier.process();\n+      this.tasks.webhook.process();\n+      this.tasks.rejector.process();\n+    } else {\n+      logger.info(\"job processing is disabled, not starting job processors\");\n+    }\n \n     // Start up the cron job processors.\n     this.scheduledTasks = startScheduledTasks({\n@@ -360,6 +366,8 @@ class Server {\n       mailerQueue: this.tasks.mailer,\n       scraperQueue: this.tasks.scraper,\n       rejectorQueue: this.tasks.rejector,\n+      webhookQueue: this.tasks.webhook,\n+      notifierQueue: this.tasks.notifier,\n       disableClientRoutes,\n       persistedQueryCache: this.persistedQueryCache,\n       persistedQueriesRequired:"
    },
    {
      "sha": "12f838d901495d2424d4d59168f3f5bb4a270a95",
      "filename": "src/core/server/models/comment/comment.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/models/comment/comment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/models/comment/comment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/comment/comment.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,11 +1,11 @@\n import { isEmpty } from \"lodash\";\n import { Db } from \"mongodb\";\n-import performanceNow from \"performance-now\";\n import uuid from \"uuid\";\n \n import { Omit, Sub } from \"coral-common/types\";\n import { dotize } from \"coral-common/utils/dotize\";\n import { CommentNotFoundError } from \"coral-server/errors\";\n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import {\n   EncodedCommentActionCounts,\n@@ -936,7 +936,7 @@ export async function retrieveStoryCommentTagCounts(\n   }\n \n   // Get the start time.\n-  const startTime = performanceNow();\n+  const timer = createTimer();\n \n   // Load the counts from the database for this particular tag query.\n   const cursor = collection<{\n@@ -956,12 +956,9 @@ export async function retrieveStoryCommentTagCounts(\n   // Get all of the counts.\n   const tags = await cursor.toArray();\n \n-  // Compute the end time.\n-  const responseTime = Math.round(performanceNow() - startTime);\n-\n   // Logging at the info level here to ensure we track any degrading performance\n   // issues from this query.\n-  logger.info({ responseTime, filter: $match }, \"counting tags\");\n+  logger.info({ responseTime: timer(), filter: $match }, \"counting tags\");\n \n   // For each of the storyIDs...\n   return storyIDs.map(storyID => {"
    },
    {
      "sha": "96b9eb249d3d109899aef7672b310b25aad9168e",
      "filename": "src/core/server/queue/Task.ts",
      "status": "modified",
      "additions": 22,
      "deletions": 9,
      "changes": 31,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/Task.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/Task.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/Task.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,8 +1,10 @@\n-import Queue, { Job, Queue as QueueType } from \"bull\";\n+import Queue, { Job, JobCounts, Queue as QueueType } from \"bull\";\n import Logger from \"bunyan\";\n \n import TIME from \"coral-common/time\";\n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n+import { TenantResource } from \"coral-server/models/tenant\";\n \n export type JobProcessor<T, U = void> = (job: Job<T>) => Promise<U>;\n \n@@ -13,10 +15,10 @@ export interface TaskOptions<T, U = void> {\n   queue: Queue.QueueOptions;\n }\n \n-export default class Task<T, U = any> {\n-  private options: TaskOptions<T, U>;\n-  private queue: QueueType<T>;\n-  private log: Logger;\n+export default class Task<T extends TenantResource, U = any> {\n+  private readonly options: Required<TaskOptions<T, U>>;\n+  private readonly queue: QueueType<T>;\n+  private readonly log: Logger;\n \n   constructor({\n     jobName,\n@@ -34,6 +36,9 @@ export default class Task<T, U = any> {\n         // with completed entries if we don't need to.\n         removeOnComplete: true,\n \n+        // Remove the job if it fails after all attempts.\n+        removeOnFail: true,\n+\n         // By default, configure jobs to use an exponential backoff strategy.\n         backoff: {\n           type: \"exponential\",\n@@ -52,6 +57,10 @@ export default class Task<T, U = any> {\n     // TODO: (wyattjoh) attach event handlers to the queue for metrics via: https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#events\n   }\n \n+  public async counts(): Promise<JobCounts> {\n+    return this.queue.getJobCounts();\n+  }\n+\n   /**\n    * Add will add the job to the queue to get processed. It's not needed to\n    * handle the job after it has been created.\n@@ -62,7 +71,7 @@ export default class Task<T, U = any> {\n     // Create the job.\n     const job = await this.queue.add(data, this.options.jobOptions);\n \n-    this.log.trace({ jobID: job.id }, \"added job to queue\");\n+    this.log.info({ jobID: job.id }, \"added job to queue\");\n     return job;\n   }\n \n@@ -77,15 +86,19 @@ export default class Task<T, U = any> {\n         true\n       );\n \n-      log.trace(\"processing job from queue\");\n+      const timer = createTimer();\n+      log.info(\"processing job from queue\");\n \n       try {\n         // Send the job off to the job processor to be handled.\n         const promise: U = await this.options.jobProcessor(job);\n-        log.trace(\"processing completed\");\n+\n+        // Log it!\n+        log.info({ took: timer() }, \"processing completed\");\n+\n         return promise;\n       } catch (err) {\n-        log.error({ err }, \"job failed to process\");\n+        log.error({ err, took: timer() }, \"job failed to process\");\n         throw err;\n       }\n     });"
    },
    {
      "sha": "83afd1291531949bc23415044bf6deaaec47fd7a",
      "filename": "src/core/server/queue/index.ts",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/index.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -13,9 +13,7 @@ import { createRejectorTask, RejectorQueue } from \"./tasks/rejector\";\n import { createScraperTask, ScraperQueue } from \"./tasks/scraper\";\n import { createWebhookTask, WebhookQueue } from \"./tasks/webhook\";\n \n-const createQueueOptions = async (\n-  config: Config\n-): Promise<Queue.QueueOptions> => {\n+const createQueueOptions = (config: Config): Queue.QueueOptions => {\n   const client = createRedisClient(config);\n   const subscriber = createRedisClient(config);\n \n@@ -60,10 +58,13 @@ export interface TaskQueue {\n   rejector: RejectorQueue;\n }\n \n-export async function createQueue(options: QueueOptions): Promise<TaskQueue> {\n+export function createQueue(options: QueueOptions): TaskQueue {\n+  // Pull some options out.\n+  const { config } = options;\n+\n   // Create the processor queue options. This holds references to the Redis\n   // clients that are shared per queue.\n-  const queueOptions = await createQueueOptions(options.config);\n+  const queueOptions = createQueueOptions(config);\n \n   // Attach process functions to the various tasks in the queue.\n   const mailer = createMailerTask(queueOptions, options);\n@@ -73,7 +74,6 @@ export async function createQueue(options: QueueOptions): Promise<TaskQueue> {\n     ...options,\n   });\n   const webhook = createWebhookTask(queueOptions, options);\n-\n   const rejector = createRejectorTask(queueOptions, options);\n \n   // Return the tasks + client."
    },
    {
      "sha": "df86ec389fad40c41d5c6ca84422c45597af196b",
      "filename": "src/core/server/queue/tasks/Task.ts",
      "status": "removed",
      "additions": 0,
      "deletions": 70,
      "changes": 70,
      "blob_url": "https://github.com/coralproject/talk/blob/98e6a3ccc76bdb9664cd4fb8396c700d39308696/src/core/server/queue/tasks/Task.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/98e6a3ccc76bdb9664cd4fb8396c700d39308696/src/core/server/queue/tasks/Task.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/Task.ts?ref=98e6a3ccc76bdb9664cd4fb8396c700d39308696",
      "patch": "@@ -1,70 +0,0 @@\n-import Queue, { Job, Queue as QueueType } from \"bull\";\n-import logger from \"coral-server/logger\";\n-\n-export interface TaskOptions<T, U = any> {\n-  jobName: string;\n-  jobProcessor: (job: Job<T>) => Promise<U>;\n-  queue: Queue.QueueOptions;\n-}\n-\n-export default class Task<T, U = any> {\n-  private options: TaskOptions<T, U>;\n-  private queue: QueueType<T>;\n-\n-  constructor(options: TaskOptions<T, U>) {\n-    this.queue = new Queue(options.jobName, options.queue);\n-    this.options = options;\n-\n-    // Sets up and attaches the job processor to the queue.\n-    this.setupAndAttachProcessor();\n-  }\n-\n-  /**\n-   * Add will add the job to the queue to get processed. It's not needed to\n-   * handle the job after it has been created.\n-   *\n-   * @param data the data for the job to add.\n-   */\n-  public async add(data: T) {\n-    const job = await this.queue.add(data, {\n-      // We always remove the job when it's complete, no need to fill up Redis\n-      // with completed entries if we don't need to.\n-      removeOnComplete: true,\n-    });\n-\n-    logger.trace(\n-      { jobID: job.id, jobName: this.options.jobName },\n-      \"added job to queue\"\n-    );\n-    return job;\n-  }\n-\n-  private setupAndAttachProcessor() {\n-    this.queue.process(async (job: Job<T>) => {\n-      logger.trace(\n-        { jobID: job.id, jobName: this.options.jobName },\n-        \"processing job from queue\"\n-      );\n-\n-      try {\n-        // Send the job off to the job processor to be handled.\n-        const promise: U = await this.options.jobProcessor(job);\n-        logger.trace(\n-          { jobID: job.id, jobName: this.options.jobName },\n-          \"processing completed\"\n-        );\n-\n-        return promise;\n-      } catch (err) {\n-        logger.error({ err }, \"failed to process job from queue\");\n-\n-        throw err;\n-      }\n-    });\n-\n-    logger.trace(\n-      { jobName: this.options.jobName },\n-      \"registered processor for job type\"\n-    );\n-  }\n-}"
    },
    {
      "sha": "27d669a8383ba9902691cb15076f57c849529349",
      "filename": "src/core/server/queue/tasks/mailer/index.ts",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/mailer/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/mailer/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/mailer/index.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,6 +1,6 @@\n import Queue from \"bull\";\n-import now from \"performance-now\";\n \n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import Task from \"coral-server/queue/Task\";\n import MailerContent from \"coral-server/queue/tasks/mailer/content\";\n@@ -37,6 +37,10 @@ export class MailerQueue {\n     this.tenantCache = options.tenantCache;\n   }\n \n+  public async counts() {\n+    return this.task.counts();\n+  }\n+\n   public async add({ template, tenantID, message: { to } }: MailerInput) {\n     const log = logger.child(\n       {\n@@ -61,7 +65,7 @@ export class MailerQueue {\n       return;\n     }\n \n-    const startTemplateGenerationTime = now();\n+    const timer = createTimer();\n \n     let html: string;\n     try {\n@@ -74,8 +78,7 @@ export class MailerQueue {\n     }\n \n     // Compute the end time.\n-    const responseTime = Math.round(now() - startTemplateGenerationTime);\n-    log.trace({ responseTime }, \"finished template generation\");\n+    log.trace({ took: timer() }, \"finished template generation\");\n \n     // Return the job that'll add the email to the queue to be processed later.\n     return this.task.add({"
    },
    {
      "sha": "5a5e49f016de211821f73a6373f8e74fa17af532",
      "filename": "src/core/server/queue/tasks/mailer/processor.ts",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/mailer/processor.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/mailer/processor.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/mailer/processor.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -11,11 +11,11 @@ import { camelCase, isNil } from \"lodash\";\n import { Db } from \"mongodb\";\n import { createTransport } from \"nodemailer\";\n import { Options } from \"nodemailer/lib/smtp-connection\";\n-import now from \"performance-now\";\n \n import { LanguageCode } from \"coral-common/helpers/i18n/locales\";\n import { Config } from \"coral-server/config\";\n import { InternalError } from \"coral-server/errors\";\n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import { Tenant } from \"coral-server/models/tenant\";\n import { I18n, translate } from \"coral-server/services/i18n\";\n@@ -245,7 +245,7 @@ export const createJobProcessor = (options: MailProcessorOptions) => {\n     // Construct the fromAddress.\n     const fromAddress = fromName ? `${fromName} <${fromEmail}>` : fromEmail;\n \n-    const startTemplateGenerationTime = now();\n+    const templateGenerationTimer = createTimer();\n \n     // Get the message to send.\n     let message: Message;\n@@ -261,9 +261,10 @@ export const createJobProcessor = (options: MailProcessorOptions) => {\n       throw new InternalError(e, \"could not translate the message\");\n     }\n \n-    // Compute the end time.\n-    const responseTime = Math.round(now() - startTemplateGenerationTime);\n-    log.trace({ responseTime }, \"finished mail translation\");\n+    log.trace(\n+      { responseTime: templateGenerationTimer() },\n+      \"finished mail translation\"\n+    );\n \n     let transport = cache.get(tenantID);\n     if (!transport) {\n@@ -300,7 +301,7 @@ export const createJobProcessor = (options: MailProcessorOptions) => {\n \n     log.debug(\"starting to send the email\");\n \n-    const startMessageSendTime = now();\n+    const messageSendTimer = createTimer();\n \n     try {\n       // Send the mail message.\n@@ -309,8 +310,6 @@ export const createJobProcessor = (options: MailProcessorOptions) => {\n       throw new InternalError(e, \"could not send email\");\n     }\n \n-    // Compute the end time.\n-    const messageSendResponseTime = Math.round(now() - startMessageSendTime);\n-    log.debug({ responseTime: messageSendResponseTime }, \"sent the email\");\n+    log.debug({ responseTime: messageSendTimer() }, \"sent the email\");\n   };\n };"
    },
    {
      "sha": "fe8317bf1bac799c6d0ddb12fbddc1b67a05c466",
      "filename": "src/core/server/queue/tasks/notifier/index.ts",
      "status": "modified",
      "additions": 22,
      "deletions": 38,
      "changes": 60,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/notifier/index.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/notifier/index.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/notifier/index.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -22,46 +22,30 @@ interface Options {\n   signingConfig: JWTSigningConfig;\n }\n \n-/**\n- * NotifierQueue is designed to handle creating and queuing notifications\n- * that could be sent to users.\n- */\n-export class NotifierQueue {\n-  private task: Task<NotifierData>;\n+export type NotifierQueue = Task<NotifierData>;\n \n-  constructor(queue: Queue.QueueOptions, options: Options) {\n-    const registry = new Map<CoralEventType, NotificationCategory[]>();\n-\n-    // Notification categories have been grouped by their event name so that\n-    // each event emitted need only access the associated notification once.\n-    for (const category of categories) {\n-      for (const event of category.events as CoralEventType[]) {\n-        let handlers = registry.get(event);\n-        if (!handlers) {\n-          handlers = [];\n-        }\n-        handlers.push(category);\n-        registry.set(event, handlers);\n+export const createNotifierTask = (\n+  queue: Queue.QueueOptions,\n+  options: Options\n+) => {\n+  const registry = new Map<CoralEventType, NotificationCategory[]>();\n+\n+  // Notification categories have been grouped by their event name so that\n+  // each event emitted need only access the associated notification once.\n+  for (const category of categories) {\n+    for (const event of category.events as CoralEventType[]) {\n+      let handlers = registry.get(event);\n+      if (!handlers) {\n+        handlers = [];\n       }\n+      handlers.push(category);\n+      registry.set(event, handlers);\n     }\n-\n-    this.task = new Task({\n-      jobName: JOB_NAME,\n-      jobProcessor: createJobProcessor({ registry, ...options }),\n-      queue,\n-    });\n-  }\n-\n-  public async add(data: NotifierData) {\n-    return this.task.add(data);\n   }\n \n-  public process() {\n-    return this.task.process();\n-  }\n-}\n-\n-export const createNotifierTask = (\n-  queue: Queue.QueueOptions,\n-  options: Options\n-) => new NotifierQueue(queue, options);\n+  return new Task({\n+    jobName: JOB_NAME,\n+    jobProcessor: createJobProcessor({ registry, ...options }),\n+    queue,\n+  });\n+};"
    },
    {
      "sha": "db7fe0fb3e778983c3a7ef4a0ea7d77ebe4fad28",
      "filename": "src/core/server/queue/tasks/notifier/processor.ts",
      "status": "modified",
      "additions": 36,
      "deletions": 45,
      "changes": 81,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/notifier/processor.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/notifier/processor.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/notifier/processor.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -79,51 +79,42 @@ export const createJobProcessor = ({\n \n     log.debug(\"starting to handle a notify operation\");\n \n-    try {\n-      // Get all the handlers that are active for this channel.\n-      const categories = registry.get(input.type);\n-      if (!categories || categories.length === 0) {\n-        return;\n-      }\n-\n-      // Grab the tenant from the cache.\n-      const tenant = await tenantCache.retrieveByID(tenantID);\n-      if (!tenant) {\n-        throw new Error(\"tenant not found with ID\");\n-      }\n-\n-      // Create a notification context to handle processing notifications.\n-      const ctx = new NotificationContext({\n-        mongo,\n-        config,\n-        signingConfig,\n-        tenant,\n-        now,\n-      });\n-\n-      // For each of the handler's we need to process, we should iterate to\n-      // generate their notifications.\n-      let notifications = await handleHandlers(ctx, categories, input);\n-\n-      // Check to see if some of the other notifications that are queued\n-      // had this notification superseded.\n-      notifications = notifications.filter(filterSuperseded);\n-\n-      // Send all the notifications now.\n-      await processNewNotifications(\n-        ctx,\n-        notifications.map(({ notification }) => notification),\n-        mailerQueue\n-      );\n-\n-      log.debug(\n-        { notifications: notifications.length },\n-        \"notifications handled\"\n-      );\n-    } catch (err) {\n-      log.error({ err }, \"could not handle the notifications\");\n-\n-      throw err;\n+    // Get all the handlers that are active for this channel.\n+    const categories = registry.get(input.type);\n+    if (!categories || categories.length === 0) {\n+      return;\n     }\n+\n+    // Grab the tenant from the cache.\n+    const tenant = await tenantCache.retrieveByID(tenantID);\n+    if (!tenant) {\n+      throw new Error(\"tenant not found with ID\");\n+    }\n+\n+    // Create a notification context to handle processing notifications.\n+    const ctx = new NotificationContext({\n+      mongo,\n+      config,\n+      signingConfig,\n+      tenant,\n+      now,\n+    });\n+\n+    // For each of the handler's we need to process, we should iterate to\n+    // generate their notifications.\n+    let notifications = await handleHandlers(ctx, categories, input);\n+\n+    // Check to see if some of the other notifications that are queued\n+    // had this notification superseded.\n+    notifications = notifications.filter(filterSuperseded);\n+\n+    // Send all the notifications now.\n+    await processNewNotifications(\n+      ctx,\n+      notifications.map(({ notification }) => notification),\n+      mailerQueue\n+    );\n+\n+    log.debug({ notifications: notifications.length }, \"notifications handled\");\n   };\n };"
    },
    {
      "sha": "a5cd9c44e519f6d50f13fd5438ed1fb63dd74389",
      "filename": "src/core/server/queue/tasks/rejector.ts",
      "status": "modified",
      "additions": 32,
      "deletions": 32,
      "changes": 64,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/rejector.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/rejector.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/rejector.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,7 +1,7 @@\n import Queue, { Job } from \"bull\";\n import { Db } from \"mongodb\";\n-import now from \"performance-now\";\n \n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import {\n   Comment,\n@@ -61,49 +61,49 @@ const createJobProcessor = ({\n     true\n   );\n   // Mark the start time.\n-  const startTime = now();\n+  const timer = createTimer();\n+\n   log.debug(\"starting to reject author comments\");\n+\n   // Get the tenant.\n   const tenant = await tenantCache.retrieveByID(tenantID);\n   if (!tenant) {\n     log.error(\"referenced tenant was not found\");\n     return;\n   }\n+\n   // Get the current time.\n   const currentTime = new Date();\n-  try {\n-    // Find all comments written by the author that should be rejected.\n-    let connection = await getBatch(mongo, tenantID, authorID);\n-    while (connection.nodes.length > 0) {\n-      for (const comment of connection.nodes) {\n-        // Get the latest revision of the comment.\n-        const revision = getLatestRevision(comment);\n-        // Reject the comment.\n-        await rejectComment(\n-          mongo,\n-          redis,\n-          null,\n-          tenant,\n-          comment.id,\n-          revision.id,\n-          moderatorID,\n-          currentTime\n-        );\n-      }\n-      // If there was not another page, abort processing.\n-      if (!connection.pageInfo.hasNextPage) {\n-        break;\n-      }\n-      // Load the next page.\n-      connection = await getBatch(mongo, tenantID, authorID, connection);\n+\n+  // Find all comments written by the author that should be rejected.\n+  let connection = await getBatch(mongo, tenantID, authorID);\n+  while (connection.nodes.length > 0) {\n+    for (const comment of connection.nodes) {\n+      // Get the latest revision of the comment.\n+      const revision = getLatestRevision(comment);\n+\n+      // Reject the comment.\n+      await rejectComment(\n+        mongo,\n+        redis,\n+        null,\n+        tenant,\n+        comment.id,\n+        revision.id,\n+        moderatorID,\n+        currentTime\n+      );\n+    }\n+    // If there was not another page, abort processing.\n+    if (!connection.pageInfo.hasNextPage) {\n+      break;\n     }\n-  } catch (err) {\n-    log.error({ err }, \"could not reject the author's comments\");\n-    throw err;\n+    // Load the next page.\n+    connection = await getBatch(mongo, tenantID, authorID, connection);\n   }\n+\n   // Compute the end time.\n-  const took = Math.round(now() - startTime);\n-  log.debug({ took }, \"rejected the author's comments\");\n+  log.debug({ took: timer() }, \"rejected the author's comments\");\n };\n \n export type RejectorQueue = Task<RejectorData>;"
    },
    {
      "sha": "8fc5bd0c3a13094c0993a8a03934f8dccccd43db",
      "filename": "src/core/server/queue/tasks/scraper.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 13,
      "changes": 17,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/scraper.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/scraper.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/scraper.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,8 +1,8 @@\n import Queue, { Job } from \"bull\";\n import { Db } from \"mongodb\";\n-import now from \"performance-now\";\n \n import { Config } from \"coral-server/config\";\n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import Task from \"coral-server/queue/Task\";\n import { scrape } from \"coral-server/services/stories/scraper\";\n@@ -39,22 +39,13 @@ const createJobProcessor = ({\n   );\n \n   // Mark the start time.\n-  const startTime = now();\n+  const timer = createTimer();\n \n   log.debug(\"starting to scrape the story\");\n-\n-  try {\n-    await scrape(mongo, config, tenantID, storyID, storyURL);\n-  } catch (err) {\n-    log.error({ err }, \"could not scrape the story\");\n-\n-    throw err;\n-  }\n+  await scrape(mongo, config, tenantID, storyID, storyURL);\n \n   // Compute the end time.\n-  const responseTime = Math.round(now() - startTime);\n-\n-  log.debug({ responseTime }, \"scraped the story\");\n+  log.debug({ responseTime: timer() }, \"scraped the story\");\n };\n \n export type ScraperQueue = Task<ScraperData>;"
    },
    {
      "sha": "d5667fbfda0d5dbacbe4992148226255ddb92813",
      "filename": "src/core/server/queue/tasks/webhook/processor.ts",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/webhook/processor.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/queue/tasks/webhook/processor.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/queue/tasks/webhook/processor.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,10 +1,10 @@\n import crypto from \"crypto\";\n import { Redis } from \"ioredis\";\n import { Db } from \"mongodb\";\n-import getNow from \"performance-now\";\n \n import { Config } from \"coral-server/config\";\n import { CoralEventPayload } from \"coral-server/events/event\";\n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import {\n   filterActiveSecrets,\n@@ -170,17 +170,16 @@ export function createJobProcessor({\n     );\n \n     // Send the request.\n-    const startedSendingAt = getNow();\n+    const timer = createTimer();\n     const res = await fetch(endpoint.url, options);\n-    const took = getNow() - startedSendingAt;\n     if (res.ok) {\n       log.info(\n-        { took, responseStatus: res.status },\n+        { took: timer(), responseStatus: res.status },\n         \"finished sending webhook\"\n       );\n     } else {\n       log.warn(\n-        { took, responseStatus: res.status },\n+        { took: timer(), responseStatus: res.status },\n         \"failed to deliver webhook\"\n       );\n     }"
    },
    {
      "sha": "cb78e04caff873f4a1dc1e3ed15bb08aec62b216",
      "filename": "src/core/server/services/comments/pipeline/wordList.ts",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/services/comments/pipeline/wordList.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/services/comments/pipeline/wordList.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/comments/pipeline/wordList.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,8 +1,6 @@\n-import ms from \"ms\";\n-import now from \"performance-now\";\n-\n import { LanguageCode } from \"coral-common/helpers\";\n import createWordListRegExp from \"coral-common/utils/createWordListRegExp\";\n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import { Tenant } from \"coral-server/models/tenant\";\n \n@@ -54,10 +52,10 @@ export class WordList {\n     // it.\n     let lists = this.cache.get(options);\n     if (!lists) {\n-      const startedAt = now();\n+      const timer = createTimer();\n       lists = this.create(options);\n       logger.info(\n-        { tenantID: options.id, took: ms(now() - startedAt) },\n+        { tenantID: options.id, took: timer() },\n         \"regenerated word list cache\"\n       );\n \n@@ -88,10 +86,10 @@ export class WordList {\n       return false;\n     }\n \n-    const startedAt = now();\n+    const timer = createTimer();\n     const result = list.test(testString);\n     logger.info(\n-      { tenantID: options.id, listName, took: ms(now() - startedAt) },\n+      { tenantID: options.id, listName, took: timer() },\n       \"word list phrase test complete\"\n     );\n "
    },
    {
      "sha": "4f5c9a5042410bd87ef491fc08bb24ba7c94b4cc",
      "filename": "src/core/server/services/migrate/indexing.ts",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/services/migrate/indexing.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/services/migrate/indexing.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/indexing.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -1,8 +1,8 @@\n import { merge } from \"lodash\";\n import { Collection, Db, IndexOptions } from \"mongodb\";\n-import now from \"performance-now\";\n \n import { Writable } from \"coral-common/types\";\n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n \n import collections from \"../mongodb/collections\";\n@@ -33,11 +33,11 @@ export async function createIndex<T>(\n \n   try {\n     // Try to create the index.\n-    const start = now();\n+    const timer = createTimer();\n     log.debug({ indexSpec, indexOptions }, \"creating index\");\n     const indexName = await collection.createIndex(indexSpec, indexOptions);\n     log.debug(\n-      { indexName, indexSpec, indexOptions, took: Math.round(now() - start) },\n+      { indexName, indexSpec, indexOptions, took: timer() },\n       \"index was created\"\n     );\n "
    },
    {
      "sha": "61c5c9ede7dd95302f384266d6210ef174aff17c",
      "filename": "src/core/server/services/migrate/manager.ts",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/coralproject/talk/blob/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/services/migrate/manager.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/4194b08a128e31ea4028e662f13dadd27aa1db70/src/core/server/services/migrate/manager.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/migrate/manager.ts?ref=4194b08a128e31ea4028e662f13dadd27aa1db70",
      "patch": "@@ -2,9 +2,9 @@ import fs from \"fs-extra\";\n import { Redis } from \"ioredis\";\n import { Db } from \"mongodb\";\n import path from \"path\";\n-import now from \"performance-now\";\n import uuid from \"uuid\";\n \n+import { createTimer } from \"coral-server/helpers\";\n import logger from \"coral-server/logger\";\n import {\n   failMigration,\n@@ -177,7 +177,7 @@ export default class Manager {\n \n     logger.info({ pending: pending.length }, \"executing pending migrations\");\n \n-    const migrationsStartTime = now();\n+    const migrationsStartTimer = createTimer();\n \n     for (const migration of pending) {\n       let log = logger.child(\n@@ -196,11 +196,13 @@ export default class Manager {\n \n       // Apply any index changes for the migration.\n       if (migration.indexes) {\n-        const migrationStartTime = now();\n+        const migrationStartTime = createTimer();\n         log.info(\"starting index migration\");\n         await migration.indexes(mongo);\n-        const executionTime = Math.round(now() - migrationStartTime);\n-        log.info({ executionTime }, \"finished index migration\");\n+        log.info(\n+          { executionTime: migrationStartTime() },\n+          \"finished index migration\"\n+        );\n       }\n \n       if (migration.up) {\n@@ -209,7 +211,7 @@ export default class Manager {\n         for await (const tenant of this.tenantCache) {\n           log = log.child({ tenantID: tenant.id }, true);\n \n-          const migrationStartTime = now();\n+          const migrationStartTimer = createTimer();\n           log.info(\"starting migration\");\n \n           try {\n@@ -241,22 +243,22 @@ export default class Manager {\n             throw err;\n           }\n \n-          const executionTime = Math.round(now() - migrationStartTime);\n-          log.info({ executionTime }, \"finished migration\");\n+          log.info(\n+            { executionTime: migrationStartTimer() },\n+            \"finished migration\"\n+          );\n         }\n       }\n \n       // Mark the migration as completed.\n       await finishMigration(mongo, migration.id);\n     }\n \n-    const finishTime = Math.round(now() - migrationsStartTime);\n-\n     currentMigration = await this.currentMigration(mongo);\n \n     logger.info(\n       {\n-        finishTime,\n+        finishTime: migrationsStartTimer(),\n         currentMigrationID: currentMigration ? currentMigration.id : null,\n       },\n       \"finished running pending migrations\""
    }
  ]
}
