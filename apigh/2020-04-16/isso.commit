{
  "sha": "04d138dc77f19a79d34d17245efca1cf6c954ac4",
  "node_id": "MDY6Q29tbWl0NjI2ODQxOTowNGQxMzhkYzc3ZjE5YTc5ZDM0ZDE3MjQ1ZWZjYTFjZjZjOTU0YWM0",
  "commit": {
    "author": {
      "name": "Lucas Cimon",
      "email": "lucas.cimon@gmail.com",
      "date": "2020-04-16T13:11:30Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-04-16T13:11:30Z"
    },
    "message": "Adding contrib/dump_comments.py (#638)",
    "tree": {
      "sha": "f6f42444a4ed56bb9f8c014867dc0be6de816cd4",
      "url": "https://api.github.com/repos/posativ/isso/git/trees/f6f42444a4ed56bb9f8c014867dc0be6de816cd4"
    },
    "url": "https://api.github.com/repos/posativ/isso/git/commits/04d138dc77f19a79d34d17245efca1cf6c954ac4",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemFmCCRBK7hj4Ov3rIwAAdHIIAHEvcPgyBrAXmqKjTCew0n+N\nSOzoS7cTP9y56MEO0X5QtpiQoQzPGZkBtKHUNiqG/UZt33AddSdEqYQCcGYTa7OD\nItOBHp9cdadt+oW+h2IrHR81FTXt/vyEUyEZMWtb4um4H38orjaXw3QJJy1009TB\nraoQM9F8IqpGXLk4sZwe20417laFAZZUN8zUWQ2qJmO6BTrZyIJvCA2Ub2iP229x\n/fjE+arfSS5TRZGJ3qqhuvu0Z047Am115ioyEB1RGYelScDWvQ9c1zwoHuBkS/0b\n3tTumWrXJ9HG5Vrzq1KukEzqb6G/chVIUkFVJOURVytl7Uq1373eNp2XX7P2cfI=\n=T+U3\n-----END PGP SIGNATURE-----\n",
      "payload": "tree f6f42444a4ed56bb9f8c014867dc0be6de816cd4\nparent c4373186f904c4ffc86c83c5f9d58ca296bf6db7\nauthor Lucas Cimon <lucas.cimon@gmail.com> 1587042690 +0200\ncommitter GitHub <noreply@github.com> 1587042690 +0000\n\nAdding contrib/dump_comments.py (#638)\n\n"
    }
  },
  "url": "https://api.github.com/repos/posativ/isso/commits/04d138dc77f19a79d34d17245efca1cf6c954ac4",
  "html_url": "https://github.com/posativ/isso/commit/04d138dc77f19a79d34d17245efca1cf6c954ac4",
  "comments_url": "https://api.github.com/repos/posativ/isso/commits/04d138dc77f19a79d34d17245efca1cf6c954ac4/comments",
  "author": {
    "login": "Lucas-C",
    "id": 925560,
    "node_id": "MDQ6VXNlcjkyNTU2MA==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/925560?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Lucas-C",
    "html_url": "https://github.com/Lucas-C",
    "followers_url": "https://api.github.com/users/Lucas-C/followers",
    "following_url": "https://api.github.com/users/Lucas-C/following{/other_user}",
    "gists_url": "https://api.github.com/users/Lucas-C/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Lucas-C/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Lucas-C/subscriptions",
    "organizations_url": "https://api.github.com/users/Lucas-C/orgs",
    "repos_url": "https://api.github.com/users/Lucas-C/repos",
    "events_url": "https://api.github.com/users/Lucas-C/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Lucas-C/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c4373186f904c4ffc86c83c5f9d58ca296bf6db7",
      "url": "https://api.github.com/repos/posativ/isso/commits/c4373186f904c4ffc86c83c5f9d58ca296bf6db7",
      "html_url": "https://github.com/posativ/isso/commit/c4373186f904c4ffc86c83c5f9d58ca296bf6db7"
    }
  ],
  "stats": {
    "total": 128,
    "additions": 128,
    "deletions": 0
  },
  "files": [
    {
      "sha": "570d675947bc9d8bbf597f7328447ebe3ec44e63",
      "filename": "contrib/dump_comments.py",
      "status": "added",
      "additions": 128,
      "deletions": 0,
      "changes": 128,
      "blob_url": "https://github.com/posativ/isso/blob/04d138dc77f19a79d34d17245efca1cf6c954ac4/contrib/dump_comments.py",
      "raw_url": "https://github.com/posativ/isso/raw/04d138dc77f19a79d34d17245efca1cf6c954ac4/contrib/dump_comments.py",
      "contents_url": "https://api.github.com/repos/posativ/isso/contents/contrib/dump_comments.py?ref=04d138dc77f19a79d34d17245efca1cf6c954ac4",
      "patch": "@@ -0,0 +1,128 @@\n+#!/usr/bin/env python\n+# -*- encoding: utf-8 -*-\n+#\n+# The MIT License (MIT)\n+#\n+# Copyright (c) 2020 Lucas Cimon.\n+#\n+# Permission is hereby granted, free of charge, to any person obtaining a copy\n+# of this software and associated documentation files (the \"Software\"), to deal\n+# in the Software without restriction, including without limitation the rights\n+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+# copies of the Software, and to permit persons to whom the Software is\n+# furnished to do so, subject to the following conditions:\n+#\n+# The above copyright notice and this permission notice shall be included in\n+# all copies or substantial portions of the Software.\n+#\n+# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+# THE SOFTWARE.\n+\n+\"\"\"Dump isso comments as text\n+\n+The script can be run like this:\n+\n+    contrib/dump_comments.py .../path/to/isso.db --sort-by-last-reply\n+\n+To get a list of all available options:\n+\n+    contrib/dump_comments.py --help\n+\n+By installing the optional colorama dependency, you'll get a colored output.\n+An example of output can be found at https://github.com/posativ/isso/issues/634\n+\"\"\"\n+\n+import argparse\n+import sqlite3\n+from collections import defaultdict, namedtuple\n+from datetime import date\n+from textwrap import indent\n+\n+\n+class ColorFallback():\n+    __getattr__ = lambda self, name: ''  # noqa: E731\n+\n+\n+try:\n+    from colorama import Fore, Style, init\n+    init()  # needed for Windows\n+except ImportError:  # fallback so that the imported classes always exist\n+    Fore = Style = ColorFallback()\n+\n+\n+Comment = namedtuple('Comment', ('uri', 'id', 'parent', 'created', 'text', 'author', 'email', 'website', 'likes', 'dislikes', 'replies'))\n+\n+INDENT = '    '\n+QUERY = 'SELECT uri, comments.id, parent, created, text, author, email, website, likes, dislikes FROM comments INNER JOIN threads on comments.tid = threads.id'\n+\n+\n+def main():\n+    args = parse_args()\n+    if not args.colors:\n+        global Fore, Style\n+        Fore = Style = ColorFallback()\n+    db = sqlite3.connect(args.db_path)\n+    comments_per_uri = defaultdict(list)\n+    for result in db.execute(QUERY).fetchall():\n+        comment = Comment(*result, replies=[])\n+        comments_per_uri[comment.uri].append(comment)\n+    root_comments_per_sort_date = {}\n+    for comments in comments_per_uri.values():\n+        comments_per_id = {comment.id: comment for comment in comments}\n+        root_comments, sort_date = [], None\n+        for comment in comments:\n+            if comment.parent:  # == this is a \"reply\" comment\n+                comments_per_id[comment.parent].replies.append(comment)\n+                if args.sort_by_last_reply and (sort_date is None or comment.created > sort_date):\n+                    sort_date = comment.created\n+            else:\n+                root_comments.append(comment)\n+                if sort_date is None or comment.created > sort_date:\n+                    sort_date = comment.created\n+        root_comments_per_sort_date[sort_date] = root_comments\n+    for _, root_comments in sorted(root_comments_per_sort_date.items(), key=lambda pair: pair[0]):\n+        print(Fore.MAGENTA + args.url_prefix + root_comments[0].uri + Fore.RESET)\n+        for comment in root_comments:\n+            print_comment(INDENT, comment)\n+            for comment in comment.replies:\n+                print_comment(INDENT * 2, comment)\n+        print()\n+\n+\n+def print_comment(prefix, comment):\n+    author = comment.author or 'Anonymous'\n+    email = comment.email or ''\n+    website = comment.website or ''\n+    when = date.fromtimestamp(comment.created)\n+    popularity = ''\n+    if comment.likes:\n+        popularity = '+{.likes}'.format(comment)\n+    if comment.dislikes:\n+        if popularity:\n+            popularity += '/'\n+        popularity = '-{.dislikes}'.format(comment)\n+    print(prefix + '{Style.BRIGHT}{author}{Style.RESET_ALL} {Style.DIM}- {email} {website}{Style.RESET_ALL} {when} {Style.DIM}{popularity}{Style.RESET_ALL}'.format(Style=Style, **locals()))\n+    print(indent(comment.text, prefix))\n+\n+\n+def parse_args():\n+    parser = argparse.ArgumentParser(description='Dump all Isso comments in chronological order, grouped by replies',\n+                                     formatter_class=ArgparseHelpFormatter)\n+    parser.add_argument('db_path', help='File path to Isso Sqlite DB')\n+    parser.add_argument('--sort-by-last-reply', action='store_true', help='By default comments are sorted by \"parent\" comment date, this sort comments based on the last replies')\n+    parser.add_argument('--url-prefix', default='', help='Optional domain name to prefix to pages URLs')\n+    parser.add_argument('--no-colors', action='store_false', dest='colors', default=True, help='Disabled colored output')\n+    return parser.parse_args()\n+\n+\n+class ArgparseHelpFormatter(argparse.RawTextHelpFormatter, argparse.ArgumentDefaultsHelpFormatter):\n+    pass\n+\n+\n+if __name__ == '__main__':\n+    main()"
    }
  ]
}
