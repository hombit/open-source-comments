{
  "sha": "e41f1e6ec221c10024bde6c33336e1dc21684d9d",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODplNDFmMWU2ZWMyMjFjMTAwMjRiZGU2YzMzMzM2ZTFkYzIxNjg0ZDlk",
  "commit": {
    "author": {
      "name": "tshenry",
      "email": "taylor@discourse.org",
      "date": "2020-04-17T21:59:54Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-04-17T21:59:54Z"
    },
    "message": "FEATURE: Rake task to export groups (#9450)",
    "tree": {
      "sha": "ad91cae3e6fbcb960e6d15cd64cf362fbf6e50f4",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/ad91cae3e6fbcb960e6d15cd64cf362fbf6e50f4"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/e41f1e6ec221c10024bde6c33336e1dc21684d9d",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemibaCRBK7hj4Ov3rIwAAdHIIAG4A985YgmmAzU14WFun0Du9\nhGmWw4lD2G1bSTWhMH4Ce+q1nHs403hdqhC/XIhzWoxs5BXsr9RjdMB0A2EwwoMw\nFLBdBb4v4qhl2kXEDp2zRhv8V1Lpjlx+K/8eV69/aVNvU2jDLtrnR6cf0HREM8g8\nBLiYoj4j92mUtXB+h2A1vT+IursSM9QgqRSuzfr4T5ojI3ujncm7vgvRdevgv4gQ\nRXUDBguTGMmwFJbC1S+cRUeklX2MT48lNNdelc0ORO+K+qyFc4iXr+6TOV824hBe\ngSmSl05V1JiGr47DhAmbQylzXRqTnI4CC1s8StiHsbaIZYXWNNdhwFBgDwa6t0Q=\n=fOlw\n-----END PGP SIGNATURE-----\n",
      "payload": "tree ad91cae3e6fbcb960e6d15cd64cf362fbf6e50f4\nparent 3ac6e16250e17fcb242e0dada6519df485bcbf20\nauthor tshenry <taylor@discourse.org> 1587160794 -0700\ncommitter GitHub <noreply@github.com> 1587160794 -0700\n\nFEATURE: Rake task to export groups (#9450)\n\n"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/e41f1e6ec221c10024bde6c33336e1dc21684d9d",
  "html_url": "https://github.com/discourse/discourse/commit/e41f1e6ec221c10024bde6c33336e1dc21684d9d",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/e41f1e6ec221c10024bde6c33336e1dc21684d9d/comments",
  "author": {
    "login": "tshenry",
    "id": 22733864,
    "node_id": "MDQ6VXNlcjIyNzMzODY0",
    "avatar_url": "https://avatars3.githubusercontent.com/u/22733864?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tshenry",
    "html_url": "https://github.com/tshenry",
    "followers_url": "https://api.github.com/users/tshenry/followers",
    "following_url": "https://api.github.com/users/tshenry/following{/other_user}",
    "gists_url": "https://api.github.com/users/tshenry/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tshenry/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tshenry/subscriptions",
    "organizations_url": "https://api.github.com/users/tshenry/orgs",
    "repos_url": "https://api.github.com/users/tshenry/repos",
    "events_url": "https://api.github.com/users/tshenry/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tshenry/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3ac6e16250e17fcb242e0dada6519df485bcbf20",
      "url": "https://api.github.com/repos/discourse/discourse/commits/3ac6e16250e17fcb242e0dada6519df485bcbf20",
      "html_url": "https://github.com/discourse/discourse/commit/3ac6e16250e17fcb242e0dada6519df485bcbf20"
    }
  ],
  "stats": {
    "total": 127,
    "additions": 115,
    "deletions": 12
  },
  "files": [
    {
      "sha": "6a32d686f1353ee8b76542a96fa64a6208fc4c90",
      "filename": "lib/import_export.rb",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/discourse/discourse/blob/e41f1e6ec221c10024bde6c33336e1dc21684d9d/lib/import_export.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e41f1e6ec221c10024bde6c33336e1dc21684d9d/lib/import_export.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/import_export.rb?ref=e41f1e6ec221c10024bde6c33336e1dc21684d9d",
      "patch": "@@ -5,6 +5,7 @@\n require \"import_export/category_structure_exporter\"\n require \"import_export/category_exporter\"\n require \"import_export/topic_exporter\"\n+require \"import_export/group_exporter\"\n require \"json\"\n \n module ImportExport\n@@ -26,4 +27,8 @@ def self.export_topics(topic_ids, filename = nil)\n     ImportExport::TopicExporter.new(topic_ids).perform.save_to_file(filename)\n   end\n \n+  def self.export_groups(include_users, filename = nil)\n+    ImportExport::GroupExporter.new(include_users).perform.save_to_file(filename)\n+  end\n+\n end"
    },
    {
      "sha": "f53b38025fa9ca7d2fe284b430bd1fb1a49ff96e",
      "filename": "lib/import_export/base_exporter.rb",
      "status": "modified",
      "additions": 26,
      "deletions": 10,
      "changes": 36,
      "blob_url": "https://github.com/discourse/discourse/blob/e41f1e6ec221c10024bde6c33336e1dc21684d9d/lib/import_export/base_exporter.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e41f1e6ec221c10024bde6c33336e1dc21684d9d/lib/import_export/base_exporter.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/import_export/base_exporter.rb?ref=e41f1e6ec221c10024bde6c33336e1dc21684d9d",
      "patch": "@@ -8,9 +8,11 @@ class BaseExporter\n                       :auto_close_hours, :parent_category_id, :auto_close_based_on_last_post,\n                       :topic_template, :all_topics_wiki, :permissions_params]\n \n-    GROUP_ATTRS = [ :id, :name, :created_at, :mentionable_level, :messageable_level, :visibility_level,\n-                    :automatic_membership_email_domains, :automatic_membership_retroactive,\n-                    :primary_group, :title, :grant_trust_level, :incoming_email]\n+    GROUP_ATTRS = [:id, :name, :created_at, :automatic_membership_email_domains, :primary_group,\n+                   :title, :grant_trust_level, :incoming_email, :bio_raw, :allow_membership_requests,\n+                   :full_name, :default_notification_level, :visibility_level, :public_exit,\n+                   :public_admission, :membership_request_template, :messageable_level, :mentionable_level,\n+                   :members_visibility_level, :publish_read_state]\n \n     USER_ATTRS = [:id, :email, :username, :name, :created_at, :trust_level, :active, :last_emailed_at]\n \n@@ -39,6 +41,26 @@ def export_categories!\n       self\n     end\n \n+    def export_groups(group_names)\n+      data = []\n+      groups = Group.all\n+      groups = groups.where(name: group_names) if group_names.present?\n+\n+      groups.find_each do |group|\n+        attrs = GROUP_ATTRS.inject({}) { |h, a| h[a] = group.public_send(a); h }\n+        attrs[:user_ids] = group.users.pluck(:id)\n+        data << attrs\n+      end\n+\n+      data\n+    end\n+\n+    def export_groups!\n+      @export_data[:groups] = export_groups([])\n+\n+      self\n+    end\n+\n     def export_category_groups\n       groups = []\n       group_names = []\n@@ -53,13 +75,7 @@ def export_category_groups\n       group_names.uniq!\n       return [] if group_names.empty?\n \n-      Group.where(name: group_names).find_each do |group|\n-        attrs = GROUP_ATTRS.inject({}) { |h, a| h[a] = group.public_send(a); h }\n-        attrs[:user_ids] = group.users.pluck(:id)\n-        groups << attrs\n-      end\n-\n-      groups\n+      export_groups(group_names)\n     end\n \n     def export_category_groups!"
    },
    {
      "sha": "893320cfbbbb6f28f42f7741440bd269385a193b",
      "filename": "lib/import_export/group_exporter.rb",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/discourse/discourse/blob/e41f1e6ec221c10024bde6c33336e1dc21684d9d/lib/import_export/group_exporter.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e41f1e6ec221c10024bde6c33336e1dc21684d9d/lib/import_export/group_exporter.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/import_export/group_exporter.rb?ref=e41f1e6ec221c10024bde6c33336e1dc21684d9d",
      "patch": "@@ -0,0 +1,28 @@\n+# frozen_string_literal: true\n+\n+module ImportExport\n+  class GroupExporter < BaseExporter\n+\n+    def initialize(include_group_users = false)\n+      @include_group_users = include_group_users\n+\n+      @export_data = {\n+        groups: []\n+      }\n+      @export_data[:users] = [] if @include_group_users\n+    end\n+\n+    def perform\n+      puts \"Exporting all user groups...\", \"\"\n+      export_groups!\n+      export_group_users! if @include_group_users\n+\n+      self\n+    end\n+\n+    def default_filename_prefix\n+      \"groups-export\"\n+    end\n+\n+  end\n+end"
    },
    {
      "sha": "1e58a3f9a8624fe233e15565e1a9f136dea3e6e6",
      "filename": "lib/tasks/export.rake",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/discourse/discourse/blob/e41f1e6ec221c10024bde6c33336e1dc21684d9d/lib/tasks/export.rake",
      "raw_url": "https://github.com/discourse/discourse/raw/e41f1e6ec221c10024bde6c33336e1dc21684d9d/lib/tasks/export.rake",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/lib/tasks/export.rake?ref=e41f1e6ec221c10024bde6c33336e1dc21684d9d",
      "patch": "@@ -16,3 +16,11 @@ task 'export:category_structure', [:include_group_users, :file_name] => [:enviro\n   ImportExport.export_category_structure(args[:include_group_users], args[:file_name])\n   puts \"\", \"Done\", \"\"\n end\n+\n+desc 'Export all user groups'\n+task 'export:groups', [:include_group_users, :file_name] => [:environment] do |_, args|\n+  require \"import_export\"\n+\n+  ImportExport.export_groups(args[:include_group_users], args[:file_name])\n+  puts \"\", \"Done\", \"\"\n+end"
    },
    {
      "sha": "f991e7f2c40bbdeba8a339cd27dc6847db58ccd7",
      "filename": "spec/fixtures/json/import-export.json",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/discourse/discourse/blob/e41f1e6ec221c10024bde6c33336e1dc21684d9d/spec/fixtures/json/import-export.json",
      "raw_url": "https://github.com/discourse/discourse/raw/e41f1e6ec221c10024bde6c33336e1dc21684d9d/spec/fixtures/json/import-export.json",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/fixtures/json/import-export.json?ref=e41f1e6ec221c10024bde6c33336e1dc21684d9d",
      "patch": "@@ -1,7 +1,7 @@\n {\n   \"groups\":[\n-    {\"id\":41,\"name\":\"custom_group\",\"created_at\":\"2017-10-26T15:33:46.328Z\",\"mentionable_level\":0,\"messageable_level\":0,\"visibility_level\":0,\"automatic_membership_email_domains\":\"\",\"automatic_membership_retroactive\":false,\"primary_group\":false,\"title\":null,\"grant_trust_level\":null,\"incoming_email\":null,\"user_ids\":[1]},\n-    {\"id\":42,\"name\":\"custom_group_import\",\"created_at\":\"2017-10-26T15:33:46.328Z\",\"mentionable_level\":0,\"messageable_level\":0,\"visibility_level\":0,\"automatic_membership_email_domains\":\"\",\"automatic_membership_retroactive\":false,\"primary_group\":false,\"title\":null,\"grant_trust_level\":null,\"incoming_email\":null,\"user_ids\":[2]}\n+    {\"id\":41,\"name\":\"custom_group\",\"created_at\":\"2017-10-26T15:33:46.328Z\",\"automatic_membership_email_domains\":\"\",\"primary_group\":false,\"title\":null,\"grant_trust_level\":null,\"incoming_email\":null,\"bio_raw\":\"This is a custom group\",\"allow_membership_requests\":false,\"full_name\":\"Custom Group\",\"default_notification_level\":3,\"visibility_level\":0,\"public_exit\":false,\"public_admission\":false,\"membership_request_template\":\"\",\"messageable_level\":0,\"mentionable_level\":0,\"members_visibility_level\":0,\"publish_read_state\":false,\"user_ids\":[1]},\n+    {\"id\":42,\"name\":\"custom_group_import\",\"created_at\":\"2017-10-26T15:33:46.328Z\",\"automatic_membership_email_domains\":\"\",\"primary_group\":false,\"title\":null,\"grant_trust_level\":null,\"incoming_email\":null,\"bio_raw\":\"This is a custom group import\",\"allow_membership_requests\":false,\"full_name\":\"Custom Group Import\",\"default_notification_level\":3,\"visibility_level\":0,\"public_exit\":false,\"public_admission\":false,\"membership_request_template\":\"\",\"messageable_level\":0,\"mentionable_level\":0,\"members_visibility_level\":0,\"publish_read_state\":false,\"user_ids\":[2]}\n   ],\n   \"categories\":[\n     {\"id\":8,\"name\":\"Custom Category\",\"color\":\"0088CC\",\"created_at\":\"2017-10-26T15:32:44.083Z\",\"user_id\":1,\"slug\":\"custom-category\",\"description\":null,\"text_color\":\"FFFFFF\",\"auto_close_hours\":null,\"parent_category_id\":3,\"auto_close_based_on_last_post\":false,\"topic_template\":\"\",\"all_topics_wiki\":false,\"permissions_params\":{\"custom_group\":1,\"everyone\":2}},"
    },
    {
      "sha": "1e2deb929c60e12502838a5a118b98de96bd45ab",
      "filename": "spec/import_export/group_exporter_spec.rb",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/discourse/discourse/blob/e41f1e6ec221c10024bde6c33336e1dc21684d9d/spec/import_export/group_exporter_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e41f1e6ec221c10024bde6c33336e1dc21684d9d/spec/import_export/group_exporter_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/import_export/group_exporter_spec.rb?ref=e41f1e6ec221c10024bde6c33336e1dc21684d9d",
      "patch": "@@ -0,0 +1,32 @@\n+# frozen_string_literal: true\n+\n+require \"rails_helper\"\n+require \"import_export/group_exporter\"\n+\n+describe ImportExport::GroupExporter do\n+\n+  before do\n+    STDOUT.stubs(:write)\n+  end\n+\n+  it 'exports all the groups' do\n+    group = Fabricate(:group)\n+    user = Fabricate(:user)\n+    group_user = Fabricate(:group_user, group: group, user: user)\n+    data = ImportExport::GroupExporter.new.perform.export_data\n+\n+    expect(data[:groups].map { |g| g[:id] }).to include(group.id)\n+    expect(data[:users].blank?).to eq(true)\n+  end\n+\n+  it 'exports all the groups with users' do\n+    group = Fabricate(:group)\n+    user = Fabricate(:user)\n+    group_user = Fabricate(:group_user, group: group, user: user)\n+    data = ImportExport::GroupExporter.new(true).perform.export_data\n+\n+    expect(data[:groups].map { |g| g[:id] }).to include(group.id)\n+    expect(data[:users].map { |u| u[:id] }).to include(user.id)\n+  end\n+\n+end"
    },
    {
      "sha": "6065448996aaf534cee9454ba5f4366b93e45d0e",
      "filename": "spec/import_export/importer_spec.rb",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/discourse/discourse/blob/e41f1e6ec221c10024bde6c33336e1dc21684d9d/spec/import_export/importer_spec.rb",
      "raw_url": "https://github.com/discourse/discourse/raw/e41f1e6ec221c10024bde6c33336e1dc21684d9d/spec/import_export/importer_spec.rb",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/spec/import_export/importer_spec.rb?ref=e41f1e6ec221c10024bde6c33336e1dc21684d9d",
      "patch": "@@ -84,6 +84,20 @@ def import(data)\n         .and change { User.count }.by(2)\n     end\n \n+    it 'groups' do\n+      data = import_data.dup\n+      data[:categories] = nil\n+      data[:topics] = nil\n+      data[:users] = nil\n+\n+      expect {\n+        import(data)\n+      }.to change { Category.count }.by(0)\n+        .and change { Group.count }.by(2)\n+        .and change { Topic.count }.by(0)\n+        .and change { User.count }.by(0)\n+    end\n+\n     it 'all' do\n       expect {\n         import(import_data)"
    }
  ]
}
