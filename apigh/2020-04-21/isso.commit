{
  "sha": "a548fbf45b2e8cb992842edbd9c0385780674f24",
  "node_id": "MDY6Q29tbWl0NjI2ODQxOTphNTQ4ZmJmNDViMmU4Y2I5OTI4NDJlZGJkOWMwMzg1NzgwNjc0ZjI0",
  "commit": {
    "author": {
      "name": "Lucas Cimon",
      "email": "lucas.cimon@gmail.com",
      "date": "2020-04-17T17:06:46Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-04-17T17:06:46Z"
    },
    "message": "Add warnings on Comments.vote failures (#635)",
    "tree": {
      "sha": "43b4a66800d7d31e849fbd3ca8d688d9747eef0f",
      "url": "https://api.github.com/repos/posativ/isso/git/trees/43b4a66800d7d31e849fbd3ca8d688d9747eef0f"
    },
    "url": "https://api.github.com/repos/posativ/isso/git/commits/a548fbf45b2e8cb992842edbd9c0385780674f24",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemeImCRBK7hj4Ov3rIwAAdHIIAInHbOKa8jGH0xEc73iptnT8\n2Xtw28V915zaXXE8xAOgIai84UqIUZOFOYMs0jQus3OJbegsoaQp0tyom6QvCprb\nMQXsk0ls4u4/IJ6//fg/ZMR1kaIfee/wNwlykWNVUgwfm800RNTrGNni0xYt/ci8\neTzDeUEwyIElm2yvkuNrScgypr/b2KQV6eqoVrwcBUj3Degth6cBux2oZ0P2+D8u\nyg8SdvrT+kTBV4u7rC17sX/6lN66u2ZLVeXDckF4ZOEOjDgaQ7/Ate6EYYRItEdj\nfquw8tGBw4k6QA1l4SaVGTZPvr1FgQDG36WbIZ9BzuOL4kMY15NNjvRo57npAZI=\n=7u7K\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 43b4a66800d7d31e849fbd3ca8d688d9747eef0f\nparent f70eaf315ab0d9fc7cab244492d27fd5c95c62e8\nauthor Lucas Cimon <lucas.cimon@gmail.com> 1587143206 +0200\ncommitter GitHub <noreply@github.com> 1587143206 +0000\n\nAdd warnings on Comments.vote failures (#635)\n\n"
    }
  },
  "url": "https://api.github.com/repos/posativ/isso/commits/a548fbf45b2e8cb992842edbd9c0385780674f24",
  "html_url": "https://github.com/posativ/isso/commit/a548fbf45b2e8cb992842edbd9c0385780674f24",
  "comments_url": "https://api.github.com/repos/posativ/isso/commits/a548fbf45b2e8cb992842edbd9c0385780674f24/comments",
  "author": {
    "login": "Lucas-C",
    "id": 925560,
    "node_id": "MDQ6VXNlcjkyNTU2MA==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/925560?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Lucas-C",
    "html_url": "https://github.com/Lucas-C",
    "followers_url": "https://api.github.com/users/Lucas-C/followers",
    "following_url": "https://api.github.com/users/Lucas-C/following{/other_user}",
    "gists_url": "https://api.github.com/users/Lucas-C/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Lucas-C/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Lucas-C/subscriptions",
    "organizations_url": "https://api.github.com/users/Lucas-C/orgs",
    "repos_url": "https://api.github.com/users/Lucas-C/repos",
    "events_url": "https://api.github.com/users/Lucas-C/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Lucas-C/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f70eaf315ab0d9fc7cab244492d27fd5c95c62e8",
      "url": "https://api.github.com/repos/posativ/isso/commits/f70eaf315ab0d9fc7cab244492d27fd5c95c62e8",
      "html_url": "https://github.com/posativ/isso/commit/f70eaf315ab0d9fc7cab244492d27fd5c95c62e8"
    }
  ],
  "stats": {
    "total": 18,
    "additions": 15,
    "deletions": 3
  },
  "files": [
    {
      "sha": "9eb91f5590bc88ad7c651b0e1349cc51cfa1f174",
      "filename": "isso/db/comments.py",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/posativ/isso/blob/a548fbf45b2e8cb992842edbd9c0385780674f24/isso/db/comments.py",
      "raw_url": "https://github.com/posativ/isso/raw/a548fbf45b2e8cb992842edbd9c0385780674f24/isso/db/comments.py",
      "contents_url": "https://api.github.com/repos/posativ/isso/contents/isso/db/comments.py?ref=a548fbf45b2e8cb992842edbd9c0385780674f24",
      "patch": "@@ -1,11 +1,18 @@\n # -*- encoding: utf-8 -*-\n \n+import logging\n import time\n \n from isso.utils import Bloomfilter\n from isso.compat import buffer\n \n \n+logger = logging.getLogger(\"isso\")\n+\n+\n+MAX_LIKES_AND_DISLIKES = 142\n+\n+\n class Comments:\n     \"\"\"Hopefully DB-independend SQL to store, modify and retrieve all\n     comment-related actions.  Here's a short scheme overview:\n@@ -280,13 +287,18 @@ def vote(self, upvote, id, remote_addr):\n         if rv is None:\n             return None\n \n+        operation_name = 'Upvote' if upvote else 'Downvote'\n         likes, dislikes, voters = rv\n-        if likes + dislikes >= 142:\n-            return {'likes': likes, 'dislikes': dislikes}\n+        if likes + dislikes >= MAX_LIKES_AND_DISLIKES:\n+            message = '{} denied due to a \"likes + dislikes\" total too high ({} >= {})'.format(operation_name, likes + dislikes, MAX_LIKES_AND_DISLIKES)\n+            logger.debug('Comments.vote(id=%s): %s', id, message)\n+            return {'likes': likes, 'dislikes': dislikes, 'message': message}\n \n         bf = Bloomfilter(bytearray(voters), likes + dislikes)\n         if remote_addr in bf:\n-            return {'likes': likes, 'dislikes': dislikes}\n+            message = '{} denied because a vote has already been registered for this remote address: {}'.format(operation_name, remote_addr)\n+            logger.debug('Comments.vote(id=%s): %s', id, message)\n+            return {'likes': likes, 'dislikes': dislikes, 'message': message}\n \n         bf.add(remote_addr)\n         self.db.execute(["
    }
  ]
}
