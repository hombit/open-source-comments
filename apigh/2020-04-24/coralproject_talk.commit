{
  "sha": "0e9621c499f4686268c4e59ee0353461e6a4ff7d",
  "node_id": "MDY6Q29tbWl0NzI0NTQyNDI6MGU5NjIxYzQ5OWY0Njg2MjY4YzRlNTllZTAzNTM0NjFlNmE0ZmY3ZA==",
  "commit": {
    "author": {
      "name": "Wyatt Johnson",
      "email": "wyattjoh@gmail.com",
      "date": "2020-04-17T17:12:36Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-04-17T17:12:36Z"
    },
    "message": "fix: Added linting rule to disable use of object prototypes (#2939)",
    "tree": {
      "sha": "6f6afaa5b086b73eb59e049a5871eee7b2207bdf",
      "url": "https://api.github.com/repos/coralproject/talk/git/trees/6f6afaa5b086b73eb59e049a5871eee7b2207bdf"
    },
    "url": "https://api.github.com/repos/coralproject/talk/git/commits/0e9621c499f4686268c4e59ee0353461e6a4ff7d",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemeOECRBK7hj4Ov3rIwAAdHIIAG865ZrVQS1P4xUOXBnO7a42\n/zBO3+s/jIHmlnkx1UvqSt/yBMT4AP3eK839uGt3Fi6yMhDa1H0tv0gGgwjzs9gc\nbiyU2MqxQmuVk9Tczumbo8B8+7a9Hkprtbemi751VI6gu0yoaS2l5mZBdmLznII6\ndrx3F9Wb8Q/PvTZoaGAU0DQyTpcNCSrHUaqXjTEuyBdoNMHz5+dLwFX3Xnv5OJ0p\nc/lkRFLbI6/Uw9Ha2hLz6671h4JMDKJo9AY1qDhZ5VXczH11KDk1YqMW5lvJwxUy\nNxcgtMI6hBbiWnV5iDFuPk4IOaPZ7NeBeQF5HiYK1I5SaKDWFWR7ZIeY6MuJbAY=\n=btU3\n-----END PGP SIGNATURE-----\n",
      "payload": "tree 6f6afaa5b086b73eb59e049a5871eee7b2207bdf\nparent 5b92f7e96845d5daebe9e09b055b77c34b79e55e\nauthor Wyatt Johnson <wyattjoh@gmail.com> 1587143556 +0000\ncommitter GitHub <noreply@github.com> 1587143556 +0000\n\nfix: Added linting rule to disable use of object prototypes (#2939)\n\n"
    }
  },
  "url": "https://api.github.com/repos/coralproject/talk/commits/0e9621c499f4686268c4e59ee0353461e6a4ff7d",
  "html_url": "https://github.com/coralproject/talk/commit/0e9621c499f4686268c4e59ee0353461e6a4ff7d",
  "comments_url": "https://api.github.com/repos/coralproject/talk/commits/0e9621c499f4686268c4e59ee0353461e6a4ff7d/comments",
  "author": {
    "login": "wyattjoh",
    "id": 633002,
    "node_id": "MDQ6VXNlcjYzMzAwMg==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/633002?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wyattjoh",
    "html_url": "https://github.com/wyattjoh",
    "followers_url": "https://api.github.com/users/wyattjoh/followers",
    "following_url": "https://api.github.com/users/wyattjoh/following{/other_user}",
    "gists_url": "https://api.github.com/users/wyattjoh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wyattjoh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wyattjoh/subscriptions",
    "organizations_url": "https://api.github.com/users/wyattjoh/orgs",
    "repos_url": "https://api.github.com/users/wyattjoh/repos",
    "events_url": "https://api.github.com/users/wyattjoh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wyattjoh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5b92f7e96845d5daebe9e09b055b77c34b79e55e",
      "url": "https://api.github.com/repos/coralproject/talk/commits/5b92f7e96845d5daebe9e09b055b77c34b79e55e",
      "html_url": "https://github.com/coralproject/talk/commit/5b92f7e96845d5daebe9e09b055b77c34b79e55e"
    }
  ],
  "stats": {
    "total": 127,
    "additions": 70,
    "deletions": 57
  },
  "files": [
    {
      "sha": "4d515ead76506bdb3eba9e9b5370dc9515e654b9",
      "filename": ".eslintrc.js",
      "status": "modified",
      "additions": 50,
      "deletions": 45,
      "changes": 95,
      "blob_url": "https://github.com/coralproject/talk/blob/0e9621c499f4686268c4e59ee0353461e6a4ff7d/.eslintrc.js",
      "raw_url": "https://github.com/coralproject/talk/raw/0e9621c499f4686268c4e59ee0353461e6a4ff7d/.eslintrc.js",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/.eslintrc.js?ref=0e9621c499f4686268c4e59ee0353461e6a4ff7d",
      "patch": "@@ -1,10 +1,11 @@\n-const typescriptEslintRecommended = require('@typescript-eslint/eslint-plugin/dist/configs/eslint-recommended').default.overrides[0];\n-const typescriptRecommended = require('@typescript-eslint/eslint-plugin/dist/configs/recommended.json');\n-const typescriptRecommendedTypeChecking = require('@typescript-eslint/eslint-plugin/dist/configs/recommended-requiring-type-checking.json');\n-const typescriptEslintPrettier = require('eslint-config-prettier/@typescript-eslint');\n-const react = require('eslint-plugin-react').configs.recommended;\n-const jsxA11y = require('eslint-plugin-jsx-a11y').configs.recommended;\n-const reactPrettier = require('eslint-config-prettier/react');\n+const typescriptEslintRecommended = require(\"@typescript-eslint/eslint-plugin/dist/configs/eslint-recommended\")\n+  .default.overrides[0];\n+const typescriptRecommended = require(\"@typescript-eslint/eslint-plugin/dist/configs/recommended.json\");\n+const typescriptRecommendedTypeChecking = require(\"@typescript-eslint/eslint-plugin/dist/configs/recommended-requiring-type-checking.json\");\n+const typescriptEslintPrettier = require(\"eslint-config-prettier/@typescript-eslint\");\n+const react = require(\"eslint-plugin-react\").configs.recommended;\n+const jsxA11y = require(\"eslint-plugin-jsx-a11y\").configs.recommended;\n+const reactPrettier = require(\"eslint-config-prettier/react\");\n \n const typescriptOverrides = {\n   files: [\"*.ts\", \"*.tsx\"],\n@@ -24,7 +25,7 @@ const typescriptOverrides = {\n   settings: {\n     react: {\n       version: \"detect\",\n-    }\n+    },\n   },\n   rules: Object.assign(\n     typescriptEslintRecommended.rules,\n@@ -36,7 +37,10 @@ const typescriptOverrides = {\n     {\n       \"@typescript-eslint/adjacent-overload-signatures\": \"error\",\n       // TODO: (cvle) change `readonly` param to `array-simple` when upgraded typescript.\n-      \"@typescript-eslint/array-type\": [\"error\", { \"default\": \"array-simple\", \"readonly\": \"generic\"}],\n+      \"@typescript-eslint/array-type\": [\n+        \"error\",\n+        { default: \"array-simple\", readonly: \"generic\" },\n+      ],\n       \"@typescript-eslint/ban-types\": \"error\",\n       \"@typescript-eslint/camelcase\": \"off\",\n       \"@typescript-eslint/consistent-type-assertions\": \"error\",\n@@ -46,8 +50,8 @@ const typescriptOverrides = {\n       \"@typescript-eslint/explicit-member-accessibility\": [\n         \"error\",\n         {\n-          \"overrides\": {\n-            \"constructors\": \"off\",\n+          overrides: {\n+            constructors: \"off\",\n           },\n         },\n       ],\n@@ -61,7 +65,10 @@ const typescriptOverrides = {\n       \"@typescript-eslint/no-namespace\": \"error\",\n       \"@typescript-eslint/no-non-null-assertion\": \"off\",\n       \"@typescript-eslint/no-parameter-properties\": \"off\",\n-      \"@typescript-eslint/no-unused-vars\": [\"error\", {\"args\": \"none\", \"ignoreRestSiblings\": true}],\n+      \"@typescript-eslint/no-unused-vars\": [\n+        \"error\",\n+        { args: \"none\", ignoreRestSiblings: true },\n+      ],\n       \"@typescript-eslint/no-use-before-define\": \"off\", // TODO: (cvle) Should be on?\n       \"@typescript-eslint/no-use-before-declare\": \"off\",\n       \"@typescript-eslint/no-var-requires\": \"error\",\n@@ -85,32 +92,36 @@ const typescriptOverrides = {\n let typescriptTypeCheckingOverrides = {\n   files: [\"*.ts\", \"*.tsx\"],\n   parserOptions: {\n-    project: [\"./tsconfig.json\", \"./src/tsconfig.json\", \"./src/core/client/tsconfig.json\"],\n+    project: [\n+      \"./tsconfig.json\",\n+      \"./src/tsconfig.json\",\n+      \"./src/core/client/tsconfig.json\",\n+    ],\n     // TODO: (cvle) this is a workaround, see: https://github.com/typescript-eslint/typescript-eslint/issues/1091.\n     createDefaultProgram: true,\n   },\n-  rules: Object.assign(\n-    typescriptRecommendedTypeChecking.rules,\n-    {\n-      \"@typescript-eslint/tslint/config\": [\"error\", {\n-        \"rules\": {\n+  rules: Object.assign(typescriptRecommendedTypeChecking.rules, {\n+    \"@typescript-eslint/tslint/config\": [\n+      \"error\",\n+      {\n+        rules: {\n           \"ordered-imports\": {\n-            \"options\": {\n+            options: {\n               // Legacy sorting until this is fixed: https://github.com/SoominHan/import-sorter/issues/60\n               \"import-sources-order\": \"case-insensitive-legacy\",\n               \"module-source-path\": \"full\",\n               \"named-imports-order\": \"case-insensitive-legacy\",\n             },\n           },\n         },\n-      }],\n-      // 28.11.19: (cvle) Disabled because behavior of regexp.exec seems different than str.match?\n-      \"@typescript-eslint/prefer-regexp-exec\": \"off\",\n-      \"@typescript-eslint/require-await\": \"off\",\n-      \"@typescript-eslint/no-misused-promises\": \"off\",\n-      \"@typescript-eslint/unbound-method\": \"off\", // 10.10.19: (cvle) seems to give false positive.\n-    }\n-  ),\n+      },\n+    ],\n+    // 28.11.19: (cvle) Disabled because behavior of regexp.exec seems different than str.match?\n+    \"@typescript-eslint/prefer-regexp-exec\": \"off\",\n+    \"@typescript-eslint/require-await\": \"off\",\n+    \"@typescript-eslint/no-misused-promises\": \"off\",\n+    \"@typescript-eslint/unbound-method\": \"off\", // 10.10.19: (cvle) seems to give false positive.\n+  }),\n };\n \n const jestOverrides = {\n@@ -119,8 +130,8 @@ const jestOverrides = {\n   },\n   files: [\"test/**/*.ts\", \"test/**/*.tsx\"],\n   globals: {\n-    \"expectAndFail\": \"readonly\",\n-    \"fail\": \"readonly\",\n+    expectAndFail: \"readonly\",\n+    fail: \"readonly\",\n   },\n };\n \n@@ -144,33 +155,27 @@ module.exports = {\n     \"plugin:prettier/recommended\",\n   ],\n   parserOptions: {\n-    \"ecmaVersion\": 2018,\n+    ecmaVersion: 2018,\n   },\n   rules: {\n     \"arrow-body-style\": \"off\",\n-    \"arrow-parens\": [\n-      \"off\",\n-      \"as-needed\",\n-    ],\n-    \"camelcase\": \"off\",\n-    \"complexity\": \"off\",\n+    \"arrow-parens\": [\"off\", \"as-needed\"],\n+    camelcase: \"off\",\n+    complexity: \"off\",\n     \"constructor-super\": \"error\",\n     \"spaced-comment\": [\"error\", \"always\"],\n-    \"curly\": \"error\",\n+    curly: \"error\",\n     \"dot-notation\": \"error\",\n     \"eol-last\": \"off\",\n-    \"eqeqeq\": \"error\",\n+    eqeqeq: \"error\",\n     \"guard-for-in\": \"error\",\n     \"jsdoc/require-jsdoc\": \"off\",\n     \"jsdoc/require-returns\": \"off\",\n     \"jsdoc/require-param\": \"off\",\n     \"jsdoc/require-param-type\": \"off\",\n     \"jsdoc/require-returns-type\": \"off\",\n     \"linebreak-style\": \"off\",\n-    \"max-classes-per-file\": [\n-      \"error\",\n-      1,\n-    ],\n+    \"max-classes-per-file\": [\"error\", 1],\n     \"member-ordering\": \"off\",\n     \"new-parens\": \"off\",\n     \"newline-per-chained-call\": \"off\",\n@@ -187,22 +192,22 @@ module.exports = {\n     \"no-irregular-whitespace\": \"off\",\n     \"no-multiple-empty-lines\": \"off\",\n     \"no-new-wrappers\": \"error\",\n-    \"no-prototype-builtins\": \"off\",\n+    \"no-prototype-builtins\": \"error\",\n     \"no-shadow\": \"error\",\n     \"no-throw-literal\": \"error\",\n     \"no-undef\": \"off\",\n     \"no-undef-init\": \"error\",\n     \"no-unsafe-finally\": \"error\",\n     \"no-unused-expressions\": \"error\",\n     \"no-unused-labels\": \"error\",\n-    \"no-unused-vars\": [\"error\", {\"args\": \"none\", \"ignoreRestSiblings\": true}],\n+    \"no-unused-vars\": [\"error\", { args: \"none\", ignoreRestSiblings: true }],\n     \"no-var\": \"error\",\n     \"object-shorthand\": \"error\",\n     \"one-var\": \"off\",\n     \"prefer-arrow-callback\": \"off\",\n     \"prefer-const\": \"error\",\n     \"quote-props\": \"off\",\n-    \"radix\": \"error\",\n+    radix: \"error\",\n     \"require-atomic-updates\": \"off\",\n     \"space-before-function-paren\": \"off\",\n     \"sort-imports\": \"off\","
    },
    {
      "sha": "368d89585ba5fbc605c2fe27ed181998bee39241",
      "filename": "src/core/client/framework/lib/network/persistedQueriesGetMethodMiddleware.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/client/framework/lib/network/persistedQueriesGetMethodMiddleware.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/client/framework/lib/network/persistedQueriesGetMethodMiddleware.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/client/framework/lib/network/persistedQueriesGetMethodMiddleware.ts?ref=0e9621c499f4686268c4e59ee0353461e6a4ff7d",
      "patch": "@@ -31,7 +31,7 @@ const persistedQueriesGetMethodMiddleware: Middleware = (next) => async (\n     // Rebuild the query parameters for GET.\n     const params: Record<string, string> = { query: \"\" };\n     for (const key in body) {\n-      if (!body.hasOwnProperty(key)) {\n+      if (!Object.prototype.hasOwnProperty.call(body, key)) {\n         continue;\n       }\n "
    },
    {
      "sha": "67f773029d597bcbc376fd2554286a685270c76b",
      "filename": "src/core/common/utils/dotize.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/common/utils/dotize.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/common/utils/dotize.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/common/utils/dotize.ts?ref=0e9621c499f4686268c4e59ee0353461e6a4ff7d",
      "patch": "@@ -45,7 +45,7 @@ function reduce({\n \n   if (isObject(obj)) {\n     for (const property in obj) {\n-      if (!obj.hasOwnProperty(property)) {\n+      if (!Object.prototype.hasOwnProperty.call(obj, property)) {\n         continue;\n       }\n "
    },
    {
      "sha": "110c1814a7007e2814fc619fe522d6b918d69f4d",
      "filename": "src/core/server/app/helpers/entrypoints.ts",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/coralproject/talk/blob/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/app/helpers/entrypoints.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/app/helpers/entrypoints.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/app/helpers/entrypoints.ts?ref=0e9621c499f4686268c4e59ee0353461e6a4ff7d",
      "patch": "@@ -37,7 +37,7 @@ export default class Entrypoints {\n \n   constructor(manifest: Manifest) {\n     for (const entry in manifest.entrypoints) {\n-      if (!manifest.entrypoints.hasOwnProperty(entry)) {\n+      if (!Object.prototype.hasOwnProperty.call(manifest.entrypoints, entry)) {\n         continue;\n       }\n \n@@ -47,7 +47,12 @@ export default class Entrypoints {\n \n       // Itterate over the extension's in the entrypoint.\n       for (const extension in manifest.entrypoints[entry]) {\n-        if (!manifest.entrypoints[entry].hasOwnProperty(extension)) {\n+        if (\n+          !Object.prototype.hasOwnProperty.call(\n+            manifest.entrypoints[entry],\n+            extension\n+          )\n+        ) {\n           continue;\n         }\n \n@@ -61,7 +66,10 @@ export default class Entrypoints {\n         for (const src of assets) {\n           // Search for the entry in the assets.\n           for (const name in manifest) {\n-            if (name !== \"entrypoints\" && !manifest.hasOwnProperty(name)) {\n+            if (\n+              name !== \"entrypoints\" &&\n+              !Object.prototype.hasOwnProperty.call(manifest, name)\n+            ) {\n               continue;\n             }\n "
    },
    {
      "sha": "5f62282380229cb8c5d5cdfd384fd7722618c64a",
      "filename": "src/core/server/graph/errors.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/graph/errors.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/graph/errors.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/errors.ts?ref=0e9621c499f4686268c4e59ee0353461e6a4ff7d",
      "patch": "@@ -20,7 +20,7 @@ export async function mapFieldsetToErrorCodes<T>(\n     if (err instanceof CoralError) {\n       // Then loop over all the fieldSpecs...\n       for (const param in errorMap) {\n-        if (!errorMap.hasOwnProperty(param)) {\n+        if (!Object.prototype.hasOwnProperty.call(errorMap, param)) {\n           continue;\n         }\n "
    },
    {
      "sha": "a7e5f81789260a411152476e427ee984381a2793",
      "filename": "src/core/server/graph/persisted/loader.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/graph/persisted/loader.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/graph/persisted/loader.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/graph/persisted/loader.ts?ref=0e9621c499f4686268c4e59ee0353461e6a4ff7d",
      "patch": "@@ -36,7 +36,7 @@ export function loadPersistedQueries(): PersistedQuery[] {\n     // Go over each of the persisted queries and collect the ID and query to\n     // merge in.\n     for (const id in persistedQueries) {\n-      if (!persistedQueries.hasOwnProperty(id)) {\n+      if (!Object.prototype.hasOwnProperty.call(persistedQueries, id)) {\n         continue;\n       }\n "
    },
    {
      "sha": "a2f23e3889d17763b77488314aa70314d0e45487",
      "filename": "src/core/server/models/action/comment.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/models/action/comment.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/models/action/comment.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/action/comment.ts?ref=0e9621c499f4686268c4e59ee0353461e6a4ff7d",
      "patch": "@@ -464,7 +464,7 @@ export function invertEncodedActionCounts(\n   actionCounts: EncodedCommentActionCounts\n ): EncodedCommentActionCounts {\n   for (const key in actionCounts) {\n-    if (!actionCounts.hasOwnProperty(key)) {\n+    if (!Object.prototype.hasOwnProperty.call(actionCounts, key)) {\n       continue;\n     }\n "
    },
    {
      "sha": "13b77b8ea2b4cba4e92d393ab2a1777c26b4ac07",
      "filename": "src/core/server/models/comment/counts/counts.ts",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/coralproject/talk/blob/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/models/comment/counts/counts.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/models/comment/counts/counts.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/comment/counts/counts.ts?ref=0e9621c499f4686268c4e59ee0353461e6a4ff7d",
      "patch": "@@ -101,7 +101,7 @@ export function mergeCommentStatusCount(\n   const mergedStatusCounts = createEmptyCommentStatusCounts();\n   for (const commentCounts of statusCounts) {\n     for (const status in commentCounts) {\n-      if (!commentCounts.hasOwnProperty(status)) {\n+      if (!Object.prototype.hasOwnProperty.call(commentCounts, status)) {\n         continue;\n       }\n \n@@ -147,7 +147,7 @@ export function calculateTotalCommentCount(\n ): number {\n   let count = 0;\n   for (const status in commentCounts) {\n-    if (!commentCounts.hasOwnProperty(status)) {\n+    if (!Object.prototype.hasOwnProperty.call(commentCounts, status)) {\n       continue;\n     }\n "
    },
    {
      "sha": "0fc3cec1007ced2e8a81163f88348a433311414d",
      "filename": "src/core/server/models/comment/counts/shared.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/models/comment/counts/shared.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/models/comment/counts/shared.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/models/comment/counts/shared.ts?ref=0e9621c499f4686268c4e59ee0353461e6a4ff7d",
      "patch": "@@ -126,7 +126,7 @@ function fillAndConvertStringToNumber<\n >(input: T, initial: U): U {\n   const result: U = Object.assign({}, initial);\n   for (const key in input) {\n-    if (!input.hasOwnProperty(key)) {\n+    if (!Object.prototype.hasOwnProperty.call(input, key)) {\n       continue;\n     }\n "
    },
    {
      "sha": "56b2fa9efff281a51ebb6b7bdc8162b07f275170",
      "filename": "src/core/server/services/stories/scraper/scraper.ts",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/coralproject/talk/blob/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/services/stories/scraper/scraper.ts",
      "raw_url": "https://github.com/coralproject/talk/raw/0e9621c499f4686268c4e59ee0353461e6a4ff7d/src/core/server/services/stories/scraper/scraper.ts",
      "contents_url": "https://api.github.com/repos/coralproject/talk/contents/src/core/server/services/stories/scraper/scraper.ts?ref=0e9621c499f4686268c4e59ee0353461e6a4ff7d",
      "patch": "@@ -51,7 +51,7 @@ class Scraper {\n \n     for (const rule of this.rules) {\n       for (const property in rule) {\n-        if (!rule.hasOwnProperty(property)) {\n+        if (!Object.prototype.hasOwnProperty.call(rule, property)) {\n           continue;\n         }\n "
    }
  ]
}
