{
  "sha": "0e4db91870fba37e5584a9f20813f6029612d085",
  "node_id": "MDY6Q29tbWl0NzU2OTU3ODowZTRkYjkxODcwZmJhMzdlNTU4NGE5ZjIwODEzZjYwMjk2MTJkMDg1",
  "commit": {
    "author": {
      "name": "Joffrey JAFFEUX",
      "email": "j.jaffeux@gmail.com",
      "date": "2020-05-02T08:31:44Z"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com",
      "date": "2020-05-02T08:31:44Z"
    },
    "message": "FIX: save bookmark reminder on tap unless custom (#9611)",
    "tree": {
      "sha": "b803a5c7972f1e48d5d67310be2bc7825caaea8b",
      "url": "https://api.github.com/repos/discourse/discourse/git/trees/b803a5c7972f1e48d5d67310be2bc7825caaea8b"
    },
    "url": "https://api.github.com/repos/discourse/discourse/git/commits/0e4db91870fba37e5584a9f20813f6029612d085",
    "comment_count": 0,
    "verification": {
      "verified": true,
      "reason": "valid",
      "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJerS/wCRBK7hj4Ov3rIwAAdHIIAG+4oUDBbZKJ2cmwdx/raWrI\nM6nMceS7vZFAqcaZ5oEYerTpMEc67JmKzuL3DsSo9hi99TVtADfm7NdesRfXzd+o\nmsakMUgT6wIVsxmLYCqFBCaughMK3fxMAhj61eqSOxlPpTawvcOFfdz8thynrfN/\nXzZjhFQXe9IWkJp46WtyWifjRiZBngvJm0fCk6s1DWU422lBiVTiBUG+AXCBIxJR\nx2WgnEBO5okQfR5p2ZLqDQWDvhmEnOABOKpPsp8I3RdakqogvgISO4MQBxjhk3Qt\npC9YK/4koFFBTCfZDggdps+5MLzpul+8Gs9WlZSx4pWZhwIe3D+QxTIzlY8/snQ=\n=nOxm\n-----END PGP SIGNATURE-----\n",
      "payload": "tree b803a5c7972f1e48d5d67310be2bc7825caaea8b\nparent e57fd283db3b6501edad53a7acf45b5659f8a09d\nauthor Joffrey JAFFEUX <j.jaffeux@gmail.com> 1588408304 +0200\ncommitter GitHub <noreply@github.com> 1588408304 +0200\n\nFIX: save bookmark reminder on tap unless custom (#9611)\n\n"
    }
  },
  "url": "https://api.github.com/repos/discourse/discourse/commits/0e4db91870fba37e5584a9f20813f6029612d085",
  "html_url": "https://github.com/discourse/discourse/commit/0e4db91870fba37e5584a9f20813f6029612d085",
  "comments_url": "https://api.github.com/repos/discourse/discourse/commits/0e4db91870fba37e5584a9f20813f6029612d085/comments",
  "author": {
    "login": "jjaffeux",
    "id": 339945,
    "node_id": "MDQ6VXNlcjMzOTk0NQ==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/339945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jjaffeux",
    "html_url": "https://github.com/jjaffeux",
    "followers_url": "https://api.github.com/users/jjaffeux/followers",
    "following_url": "https://api.github.com/users/jjaffeux/following{/other_user}",
    "gists_url": "https://api.github.com/users/jjaffeux/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jjaffeux/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jjaffeux/subscriptions",
    "organizations_url": "https://api.github.com/users/jjaffeux/orgs",
    "repos_url": "https://api.github.com/users/jjaffeux/repos",
    "events_url": "https://api.github.com/users/jjaffeux/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jjaffeux/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "web-flow",
    "id": 19864447,
    "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/19864447?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/web-flow",
    "html_url": "https://github.com/web-flow",
    "followers_url": "https://api.github.com/users/web-flow/followers",
    "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
    "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
    "organizations_url": "https://api.github.com/users/web-flow/orgs",
    "repos_url": "https://api.github.com/users/web-flow/repos",
    "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
    "received_events_url": "https://api.github.com/users/web-flow/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e57fd283db3b6501edad53a7acf45b5659f8a09d",
      "url": "https://api.github.com/repos/discourse/discourse/commits/e57fd283db3b6501edad53a7acf45b5659f8a09d",
      "html_url": "https://github.com/discourse/discourse/commit/e57fd283db3b6501edad53a7acf45b5659f8a09d"
    }
  ],
  "stats": {
    "total": 181,
    "additions": 114,
    "deletions": 67
  },
  "files": [
    {
      "sha": "cd071c6bb41899a11da0db43e952860431c7df4f",
      "filename": "app/assets/javascripts/discourse/app/controllers/bookmark.js",
      "status": "modified",
      "additions": 51,
      "deletions": 43,
      "changes": 94,
      "blob_url": "https://github.com/discourse/discourse/blob/0e4db91870fba37e5584a9f20813f6029612d085/app/assets/javascripts/discourse/app/controllers/bookmark.js",
      "raw_url": "https://github.com/discourse/discourse/raw/0e4db91870fba37e5584a9f20813f6029612d085/app/assets/javascripts/discourse/app/controllers/bookmark.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/app/assets/javascripts/discourse/app/controllers/bookmark.js?ref=0e4db91870fba37e5584a9f20813f6029612d085",
      "patch": "@@ -1,4 +1,5 @@\n import { and } from \"@ember/object/computed\";\n+import { action } from \"@ember/object\";\n import { isPresent } from \"@ember/utils\";\n import Controller from \"@ember/controller\";\n import { Promise } from \"rsvp\";\n@@ -424,53 +425,60 @@ export default Controller.extend(ModalFunctionality, {\n     }\n   },\n \n-  actions: {\n-    saveAndClose() {\n-      if (this._saving || this._deleting) {\n-        return;\n-      }\n+  @action\n+  saveAndClose() {\n+    if (this._saving || this._deleting) {\n+      return;\n+    }\n \n-      this._saving = true;\n-      this._savingBookmarkManually = true;\n-      this._saveBookmark()\n-        .then(() => this.send(\"closeModal\"))\n-        .catch(e => this._handleSaveError(e))\n-        .finally(() => (this._saving = false));\n-    },\n-\n-    delete() {\n-      this._deleting = true;\n-      let deleteAction = () => {\n-        this._closeWithoutSaving = true;\n-        this._deleteBookmark()\n-          .then(() => {\n-            this._deleting = false;\n-            this.send(\"closeModal\");\n-          })\n-          .catch(e => this._handleSaveError(e));\n-      };\n-\n-      if (this._existingBookmarkHasReminder()) {\n-        bootbox.confirm(I18n.t(\"bookmarks.confirm_delete\"), result => {\n-          if (result) {\n-            deleteAction();\n-          }\n-        });\n-      } else {\n-        deleteAction();\n-      }\n-    },\n+    this._saving = true;\n+    this._savingBookmarkManually = true;\n+    return this._saveBookmark()\n+      .then(() => this.send(\"closeModal\"))\n+      .catch(e => this._handleSaveError(e))\n+      .finally(() => (this._saving = false));\n+  },\n \n-    closeWithoutSavingBookmark() {\n+  @action\n+  delete() {\n+    this._deleting = true;\n+    let deleteAction = () => {\n       this._closeWithoutSaving = true;\n-      this.send(\"closeModal\");\n-    },\n+      this._deleteBookmark()\n+        .then(() => {\n+          this._deleting = false;\n+          this.send(\"closeModal\");\n+        })\n+        .catch(e => this._handleSaveError(e));\n+    };\n \n-    selectReminderType(type) {\n-      if (type === REMINDER_TYPES.LATER_TODAY && !this.showLaterToday) {\n-        return;\n-      }\n-      this.set(\"selectedReminderType\", type);\n+    if (this._existingBookmarkHasReminder()) {\n+      bootbox.confirm(I18n.t(\"bookmarks.confirm_delete\"), result => {\n+        if (result) {\n+          deleteAction();\n+        }\n+      });\n+    } else {\n+      deleteAction();\n+    }\n+  },\n+\n+  @action\n+  closeWithoutSavingBookmark() {\n+    this._closeWithoutSaving = true;\n+    this.send(\"closeModal\");\n+  },\n+\n+  @action\n+  selectReminderType(type) {\n+    if (type === REMINDER_TYPES.LATER_TODAY && !this.showLaterToday) {\n+      return;\n+    }\n+\n+    this.set(\"selectedReminderType\", type);\n+\n+    if (type !== REMINDER_TYPES.CUSTOM) {\n+      return this.saveAndClose();\n     }\n   }\n });"
    },
    {
      "sha": "6361d4326144a02111e27386555c9e5ed5a11476",
      "filename": "test/javascripts/acceptance/bookmarks-test.js",
      "status": "modified",
      "additions": 63,
      "deletions": 24,
      "changes": 87,
      "blob_url": "https://github.com/discourse/discourse/blob/0e4db91870fba37e5584a9f20813f6029612d085/test/javascripts/acceptance/bookmarks-test.js",
      "raw_url": "https://github.com/discourse/discourse/raw/0e4db91870fba37e5584a9f20813f6029612d085/test/javascripts/acceptance/bookmarks-test.js",
      "contents_url": "https://api.github.com/repos/discourse/discourse/contents/test/javascripts/acceptance/bookmarks-test.js?ref=0e4db91870fba37e5584a9f20813f6029612d085",
      "patch": "@@ -1,14 +1,17 @@\n import { acceptance, loggedInUser } from \"helpers/qunit-helpers\";\n import pretender from \"helpers/create-pretender\";\n \n-acceptance(\"Bookmarking\", {\n-  loggedIn: true,\n+acceptance(\"Bookmarking\", { loggedIn: true });\n \n-  beforeEach() {}\n-});\n+function handleRequest(assert, request) {\n+  const body = request.requestBody;\n+  const reminderType = body\n+    .substr(0, body.indexOf(\"&\"))\n+    .replace(\"reminder_type=\", \"\");\n+\n+  assert.step(reminderType || \"none\");\n \n-function mockSuccessfulBookmarkPost() {\n-  pretender.post(\"/bookmarks\", () => [\n+  return [\n     200,\n     {\n       \"Content-Type\": \"application/json\"\n@@ -17,15 +20,24 @@ function mockSuccessfulBookmarkPost() {\n       id: 999,\n       success: \"OK\"\n     }\n-  ]);\n+  ];\n+}\n+\n+function mockSuccessfulBookmarkPost(assert) {\n+  pretender.post(\"/bookmarks\", request => handleRequest(assert, request));\n+  pretender.put(\"/bookmarks/999\", request => handleRequest(assert, request));\n }\n \n async function openBookmarkModal() {\n-  await click(\".topic-post:first-child button.show-more-actions\");\n-  return await click(\".topic-post:first-child button.bookmark\");\n+  if (exists(\".topic-post:first-child button.show-more-actions\")) {\n+    await click(\".topic-post:first-child button.show-more-actions\");\n+  }\n+\n+  await click(\".topic-post:first-child button.bookmark\");\n }\n+\n async function openEditBookmarkModal() {\n-  return await click(\".topic-post:first-child button.bookmarked\");\n+  await click(\".topic-post:first-child button.bookmarked\");\n }\n \n test(\"Bookmarks modal opening\", async assert => {\n@@ -35,32 +47,45 @@ test(\"Bookmarks modal opening\", async assert => {\n });\n \n test(\"Bookmarks modal selecting reminder type\", async assert => {\n+  mockSuccessfulBookmarkPost(assert);\n+\n   await visit(\"/t/internationalization-localization/280\");\n+\n   await openBookmarkModal();\n   await click(\"#tap_tile_tomorrow\");\n-  assert.ok(exists(\"#tap_tile_tomorrow.active\"), \"it selects tomorrow\");\n+\n+  await openBookmarkModal();\n   await click(\"#tap_tile_start_of_next_business_week\");\n-  assert.ok(\n-    exists(\"#tap_tile_start_of_next_business_week.active\"),\n-    \"it selects next monday\"\n-  );\n+\n+  await openBookmarkModal();\n   await click(\"#tap_tile_next_week\");\n-  assert.ok(exists(\"#tap_tile_next_week.active\"), \"it selects next week\");\n+\n+  await openBookmarkModal();\n   await click(\"#tap_tile_next_month\");\n-  assert.ok(exists(\"#tap_tile_next_month.active\"), \"it selects next month\");\n+\n+  await openBookmarkModal();\n   await click(\"#tap_tile_custom\");\n   assert.ok(exists(\"#tap_tile_custom.active\"), \"it selects custom\");\n   assert.ok(exists(\".tap-tile-date-input\"), \"it shows the custom date input\");\n   assert.ok(exists(\".tap-tile-time-input\"), \"it shows the custom time input\");\n+  await click(\"#save-bookmark\");\n+\n+  assert.verifySteps([\n+    \"tomorrow\",\n+    \"start_of_next_business_week\",\n+    \"next_week\",\n+    \"next_month\",\n+    \"custom\"\n+  ]);\n });\n \n test(\"Saving a bookmark with a reminder\", async assert => {\n-  mockSuccessfulBookmarkPost();\n+  mockSuccessfulBookmarkPost(assert);\n   await visit(\"/t/internationalization-localization/280\");\n   await openBookmarkModal();\n   await fillIn(\"input#bookmark-name\", \"Check this out later\");\n   await click(\"#tap_tile_tomorrow\");\n-  await click(\"#save-bookmark\");\n+\n   assert.ok(\n     exists(\".topic-post:first-child button.bookmark.bookmarked\"),\n     \"it shows the bookmarked icon on the post\"\n@@ -71,13 +96,15 @@ test(\"Saving a bookmark with a reminder\", async assert => {\n     ),\n     \"it shows the bookmark clock icon because of the reminder\"\n   );\n+  assert.verifySteps([\"tomorrow\"]);\n });\n \n test(\"Saving a bookmark with no reminder or name\", async assert => {\n-  mockSuccessfulBookmarkPost();\n+  mockSuccessfulBookmarkPost(assert);\n   await visit(\"/t/internationalization-localization/280\");\n   await openBookmarkModal();\n   await click(\"#save-bookmark\");\n+\n   assert.ok(\n     exists(\".topic-post:first-child button.bookmark.bookmarked\"),\n     \"it shows the bookmarked icon on the post\"\n@@ -88,6 +115,7 @@ test(\"Saving a bookmark with no reminder or name\", async assert => {\n     ),\n     \"it shows the regular bookmark active icon\"\n   );\n+  assert.verifySteps([\"none\"]);\n });\n \n test(\"Deleting a bookmark with a reminder\", async assert => {\n@@ -101,22 +129,31 @@ test(\"Deleting a bookmark with a reminder\", async assert => {\n       topic_bookmarked: false\n     }\n   ]);\n-  mockSuccessfulBookmarkPost();\n+\n+  mockSuccessfulBookmarkPost(assert);\n+\n   await visit(\"/t/internationalization-localization/280\");\n   await openBookmarkModal();\n   await click(\"#tap_tile_tomorrow\");\n-  await click(\"#save-bookmark\");\n+\n+  assert.verifySteps([\"tomorrow\"]);\n+\n   await openEditBookmarkModal();\n+\n   assert.ok(exists(\"#bookmark-reminder-modal\"), \"it shows the bookmark modal\");\n+\n   await click(\"#delete-bookmark\");\n+\n   assert.ok(exists(\".bootbox.modal\"), \"it asks for delete confirmation\");\n   assert.ok(\n     find(\".bootbox.modal\")\n       .text()\n       .includes(I18n.t(\"bookmarks.confirm_delete\")),\n     \"it shows delete confirmation message\"\n   );\n+\n   await click(\".bootbox.modal .btn-primary\");\n+\n   assert.not(\n     exists(\".topic-post:first-child button.bookmark.bookmarked\"),\n     \"it no longer shows the bookmarked icon on the post after bookmark is deleted\"\n@@ -134,14 +171,15 @@ test(\"Cancelling saving a bookmark\", async assert => {\n });\n \n test(\"Editing a bookmark\", async assert => {\n-  mockSuccessfulBookmarkPost();\n+  mockSuccessfulBookmarkPost(assert);\n+\n   await visit(\"/t/internationalization-localization/280\");\n   let now = moment.tz(loggedInUser().resolvedTimezone());\n   let tomorrow = now.add(1, \"day\").format(\"YYYY-MM-DD\");\n   await openBookmarkModal();\n   await fillIn(\"input#bookmark-name\", \"Test name\");\n   await click(\"#tap_tile_tomorrow\");\n-  await click(\"#save-bookmark\");\n+\n   await openEditBookmarkModal();\n   assert.equal(\n     find(\"#bookmark-name\").val(),\n@@ -158,4 +196,5 @@ test(\"Editing a bookmark\", async assert => {\n     \"08:00\",\n     \"it should prefill the bookmark time\"\n   );\n+  assert.verifySteps([\"tomorrow\"]);\n });"
    }
  ]
}
